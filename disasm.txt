
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 db fb 00 00       	call   c000fbfb <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b3 85 02 00       	call   c00285d8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 82 91 02 c0       	mov    ebx,0xc0029182
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 90 91 02 c0    	cmp    ebx,0xc0029190
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 d8 02 c0       	mov    eax,0xc002d8f8
c0000049:	3d f8 d8 02 c0       	cmp    eax,0xc002d8f8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 d8 02 c0       	push   0xc002d8f8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 d8 02 c0       	mov    eax,0xc002d8f8
c0000075:	2d f8 d8 02 c0       	sub    eax,0xc002d8f8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 d8 02 c0       	push   0xc002d8f8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 df 02 c0 00 	cmp    BYTE PTR ds:0xc002df28,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 98 91 02 c0       	mov    ebx,0xc0029198
c00000bb:	81 eb 94 91 02 c0    	sub    ebx,0xc0029194
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 94 91 02 c0       	mov    esi,0xc0029194
c00000ca:	a1 2c df 02 c0       	mov    eax,ds:0xc002df2c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c df 02 c0       	mov    ds:0xc002df2c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c df 02 c0       	mov    eax,ds:0xc002df2c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 d8 02 c0       	push   0xc002d8f8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 df 02 c0 01 	mov    BYTE PTR ds:0xc002df28,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 df 02 c0       	push   0xc002df30
c000012c:	68 f8 d8 02 c0       	push   0xc002d8f8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 8f d5 01 00       	call   c001d92a <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 c8 28 01 00       	call   c0012c7b <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 6d d5 01 00       	call   c001d92a <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 bb d9 01 00       	call   c001dd97 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 69 df 01 00       	call   c001e34e <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 70 e3 02 c0 	lgdtd  ds:0xc002e370
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 a6 45 01 00       	call   c0014b7f <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 48 df 02 c0       	mov    ds:0xc002df48,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 48 df 02 c0    	mov    DWORD PTR ds:0xc002df48,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 48 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df48
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 a0 91 02 c0 02 	test   BYTE PTR [edx-0x3ffd6e60],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 a0 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6e60],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 a0 91 02 c0 08 	test   BYTE PTR [edx-0x3ffd6e60],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 a0 91 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6e60],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 a0 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6e60],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 60 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df60
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 60 df 02 c0    	mov    DWORD PTR ds:0xc002df60,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 64 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd209c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 64 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd209c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 60 df 02 c0    	mov    DWORD PTR ds:0xc002df60,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 8c df 02 c0    	cmp    DWORD PTR ds:0xc002df8c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 9c df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df9c
c0000e60:	c7 42 0c 94 df 02 c0 	mov    DWORD PTR [edx+0xc],0xc002df94
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 9c df 02 c0    	mov    DWORD PTR ds:0xc002df9c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 8c df 02 c0    	mov    DWORD PTR ds:0xc002df8c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 60 df 02 c0 02 	test   BYTE PTR ds:0xc002df60,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 60 df 02 c0       	mov    eax,0xc002df60
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 60 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df60
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 60 df 02 c0       	mov    eax,0xc002df60
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 64 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd209c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 64 df 02 c0 	mov    DWORD PTR [edx*4-0x3ffd209c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 94 df 02 c0 	lea    edx,[eax*8-0x3ffd206c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 60 df 02 c0       	mov    eax,0xc002df60
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d a0 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002dfa0
c00011e2:	81 fb 94 df 02 c0    	cmp    ebx,0xc002df94
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 94 df 02 c0       	cmp    eax,0xc002df94
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 90 df 02 c0    	cmp    DWORD PTR ds:0xc002df90,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 9c df 02 c0       	mov    ds:0xc002df9c,eax
c000121e:	a3 a0 df 02 c0       	mov    ds:0xc002dfa0,eax
c0001223:	a3 90 df 02 c0       	mov    ds:0xc002df90,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 94 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002df94
c0001231:	c7 40 0c 94 df 02 c0 	mov    DWORD PTR [eax+0xc],0xc002df94
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 a0 df 02 c0       	mov    ds:0xc002dfa0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 94 df 02 c0 	mov    DWORD PTR [eax+0x8],0xc002df94
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 58 df 02 c0 	lea    ebp,[edx*4-0x3ffd20a8]
c0001282:	8b 14 95 60 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20a0]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 60 df 02 c0 	lea    ecx,[edx*4-0x3ffd20a0]
c000129d:	8b 14 95 60 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20a0]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 94 e2 02 c0 	or     DWORD PTR [edi*4-0x3ffd1d6c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 94 df 02 c0 	lea    eax,[eax*8-0x3ffd206c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 9c df 02 c0    	mov    DWORD PTR ds:0xc002df9c,ecx
c0001357:	89 0d a0 df 02 c0    	mov    DWORD PTR ds:0xc002dfa0,ecx
c000135d:	c7 41 08 94 df 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002df94
c0001364:	c7 41 0c 94 df 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002df94
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 8c df 02 c0 	lea    edx,[ecx*8-0x3ffd2074]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 94 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d6c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 94 e2 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1d6c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 8c df 02 c0 	lea    edx,[eax*4-0x3ffd2074]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 94 e2 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1d6c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 9c df 02 c0    	mov    DWORD PTR ds:0xc002df9c,edi
c000142a:	89 3d a0 df 02 c0    	mov    DWORD PTR ds:0xc002dfa0,edi
c0001430:	c7 47 08 94 df 02 c0 	mov    DWORD PTR [edi+0x8],0xc002df94
c0001437:	c7 47 0c 94 df 02 c0 	mov    DWORD PTR [edi+0xc],0xc002df94
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 90 df 02 c0    	mov    DWORD PTR ds:0xc002df90,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 8c df 02 c0       	mov    eax,ds:0xc002df8c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 8c df 02 c0    	mov    DWORD PTR ds:0xc002df8c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 60 df 02 c0       	mov    edx,0xc002df60
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 60 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df60,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 60 df 02 c0       	mov    eax,0xc002df60
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d b4 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2b4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 b4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2b4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d b4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2b4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 8c df 02 c0    	cmp    DWORD PTR ds:0xc002df8c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 8c df 02 c0    	mov    DWORD PTR ds:0xc002df8c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 60 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df60,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 60 df 02 c0       	mov    eax,0xc002df60
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 bc e2 02 c0    	push   DWORD PTR ds:0xc002e2bc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 60 df 02 c0 00 	cmp    DWORD PTR ds:0xc002df60,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 60 df 02 c0       	mov    eax,0xc002df60
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 bc e2 02 c0       	mov    eax,ds:0xc002e2bc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 60 df 02 c0       	mov    eax,0xc002df60
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 8c df 02 c0 00 	cmp    DWORD PTR ds:0xc002df8c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 60 df 02 c0       	mov    eax,0xc002df60
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 8c df 02 c0       	mov    eax,ds:0xc002df8c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 64 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd209c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 94 df 02 c0       	mov    eax,0xc002df94
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 8c e2 02 c0       	cmp    eax,0xc002e28c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 c8 e2 02 c0       	mov    eax,ds:0xc002e2c8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 b0 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2b0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 c4 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2c4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 d4 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2d4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 60 df 02 c0       	mov    eax,0xc002df60
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 a4 92 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6d5c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 60 df 02 c0       	mov    ds:0xc002df60,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d a4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2a4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d a8 e2 02 c0    	mov    DWORD PTR ds:0xc002e2a8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d ac e2 02 c0    	mov    DWORD PTR ds:0xc002e2ac,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 b4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2b4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 40 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce5c0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 1a f1 01 00       	jmp    c0020d46 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 40 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce5c0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 4b f1 01 00       	jmp    c0020d8d <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 40 1a 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce5c0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 73 f1 01 00       	jmp    c0020dd4 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 f8 49 02 00       	call   c002693c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 c0 93 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6c40]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 c0 93 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6c40]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba c0 92 02 c0       	mov    edx,0xc00292c0
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba e0 93 02 c0       	mov    edx,0xc00293e0
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 70 c7 02 c0       	mov    edx,0xc002c770
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba ec 93 02 c0       	mov    edx,0xc00293ec
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba d0 93 02 c0       	mov    edx,0xc00293d0
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 00 e3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1d00]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 e0 e2 02 c0    	mov    ax,ds:0xc002e2e0
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 e0 e2 02 c0    	mov    ds:0xc002e2e0,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 f5 37 02 00       	call   c002693c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 f2 93 02 c0       	mov    eax,0xc00293f2
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 40 93 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6cc0]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 fb 93 02 c0       	mov    eax,0xc00293fb
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 c0 93 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6c40]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 c0 21 02 00       	call   c002693c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba d0 93 02 c0       	mov    edx,0xc00293d0
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba c0 92 02 c0       	mov    edx,0xc00292c0
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba d0 92 02 c0       	mov    edx,0xc00292d0
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 00 e3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1d00]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 00 e3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1d00],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 87 0b 02 00       	call   c002693c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 6d 0b 02 00       	call   c002693c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 17 93 02 c0       	mov    eax,0xc0029317
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 10 93 02 c0       	mov    eax,0xc0029310
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 00 e3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1d00]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 00 93 02 c0       	mov    esi,0xc0029300
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 b0 f2 01 00       	call   c002693c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba e0 93 02 c0       	mov    edx,0xc00293e0
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba e0 92 02 c0       	mov    edx,0xc00292e0
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba f0 92 02 c0       	mov    edx,0xc00292f0
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 02 94 02 c0       	mov    edx,0xc0029402
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 0e 94 02 c0       	mov    edx,0xc002940e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 22 94 02 c0       	mov    edx,0xc0029422
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 a0 73 00 00       	call   c000f843 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 9a 73 00 00       	call   c000f853 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 40 97 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029740
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 40 97 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029740
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 40 95 02 c0       	mov    eax,0xc0029540
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 80 94 02 c0       	mov    eax,0xc0029480
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 40 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6bc0]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 df 70 00 00       	call   c000f853 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c9 70 00 00       	call   c000f853 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 04 fc 01 00       	call   c002840f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 c7 fb 01 00       	call   c00283f1 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 9b fb 01 00       	call   c002840f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 4e f2 01 00       	call   c0027b14 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 c8 fc 01 00       	call   c00285a0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 15 fb 01 00       	call   c002840f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 57 fa 01 00       	call   c002840f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 24 fa 01 00       	call   c00283f1 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 11 f9 01 00       	call   c002840f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 d9 f8 01 00       	call   c00283f1 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a8 6c 00 00       	call   c000f873 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 43 6c 00 00       	call   c000f853 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 40 98 02 c0       	mov    eax,0xc0029840
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 e5 f6 01 00       	call   c002840f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 aa f6 01 00       	call   c00283f1 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 a0 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6360]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 ba f3 01 00       	call   c00281a3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 38 ed 01 00       	call   c0027b40 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 f4 f5 01 00       	call   c0028413 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 e2 f6 01 00       	call   c0028537 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 cc ec 01 00       	call   c0027b40 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 77 f5 01 00       	call   c002840d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 58 f5 01 00       	call   c0028411 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 e6 f6 01 00       	call   c00285c0 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 98 f2 01 00       	call   c00281a3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 16 ec 01 00       	call   c0027b40 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 d2 f4 01 00       	call   c0028413 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 c0 f5 01 00       	call   c0028537 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 aa eb 01 00       	call   c0027b40 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 55 f4 01 00       	call   c002840d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 35 f4 01 00       	call   c0028411 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 c2 f5 01 00       	call   c00285c0 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 70 f3 01 00       	call   c002840f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 2e f3 01 00       	call   c00283f1 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 16 f3 01 00       	call   c002840f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 88 f0 01 00       	call   c00281a3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 8a e3 01 00       	call   c00274c3 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 ed e9 01 00       	call   c0027b40 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 3f f0 01 00       	call   c00281a3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 45 e3 01 00       	call   c00274c3 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 14 f0 01 00       	call   c00281a3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 64 f2 01 00       	call   c002840d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 41 e9 01 00       	call   c0027b14 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 bb f3 01 00       	call   c00285a0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 ea f1 01 00       	call   c00283f1 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 e5 e8 01 00       	call   c0027b14 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 63 ef 01 00       	call   c00281a3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 e6 e8 01 00       	call   c0027b40 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 38 ef 01 00       	call   c00281a3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 9f eb 01 00       	call   c0027e24 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 1e e2 01 00       	call   c00274c3 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 7e db 01 00       	call   c0026e58 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 55 f2 01 00       	call   c0028537 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 3e e8 01 00       	call   c0027b40 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 25 f2 01 00       	call   c0028537 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 97 e1 01 00       	call   c00274c3 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 d0 f0 01 00       	call   c0028413 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 b8 ea 01 00       	call   c0027e24 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 3e e1 01 00       	call   c00274c3 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 24 f2 01 00       	call   c00285c0 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 fe ed 01 00       	call   c00281a3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 55 e7 01 00       	call   c0027b14 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 34 f0 01 00       	call   c002840f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 cd e0 01 00       	call   c00274c3 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 f9 e6 01 00       	call   c0027b14 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 93 f1 01 00       	call   c00285c0 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 4c ed 01 00       	call   c00281a3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 c9 e6 01 00       	call   c0027b40 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 1c ed 01 00       	call   c00281a3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 22 e0 01 00       	call   c00274c3 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 f2 ec 01 00       	call   c00281a3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 44 ef 01 00       	call   c002840f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 1b e6 01 00       	call   c0027b14 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 95 f0 01 00       	call   c00285a0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 c4 ee 01 00       	call   c00283f1 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 be e5 01 00       	call   c0027b14 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 3c ec 01 00       	call   c00281a3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 bf e5 01 00       	call   c0027b40 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 11 ec 01 00       	call   c00281a3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 78 e8 01 00       	call   c0027e24 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 f7 de 01 00       	call   c00274c3 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 47 d8 01 00       	call   c0026e58 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 1e ef 01 00       	call   c0028537 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 07 e5 01 00       	call   c0027b40 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 ee ee 01 00       	call   c0028537 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 60 de 01 00       	call   c00274c3 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 99 ed 01 00       	call   c0028413 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 80 e7 01 00       	call   c0027e24 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 ff dd 01 00       	call   c00274c3 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 e5 ee 01 00       	call   c00285c0 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 bf ea 01 00       	call   c00281a3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 16 e4 01 00       	call   c0027b14 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 f5 ec 01 00       	call   c002840f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 8e dd 01 00       	call   c00274c3 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 ba e3 01 00       	call   c0027b14 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 2f ea 01 00       	call   c00281a3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 35 dd 01 00       	call   c00274c3 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 00 9d 02 c0       	mov    eax,0xc0029d00
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 14 9d 02 c0       	mov    eax,0xc0029d14
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 dc 5f 00 00       	call   c000f853 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 de 5f 00 00       	call   c000f873 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 aa e8 01 00       	call   c00281a3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 28 e2 01 00       	call   c0027b40 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 ba d4 01 00       	call   c0026e58 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 91 eb 01 00       	call   c0028537 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 7a e1 01 00       	call   c0027b40 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 5d eb 01 00       	call   c0028537 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 cf da 01 00       	call   c00274c3 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 2f eb 01 00       	call   c0028537 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 1e e1 01 00       	call   c0027b40 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 87 da 01 00       	call   c00274c3 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 a8 d3 01 00       	call   c0026e58 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 7f ea 01 00       	call   c0028537 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 68 e0 01 00       	call   c0027b40 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 4b ea 01 00       	call   c0028537 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 bd d9 01 00       	call   c00274c3 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 1d ea 01 00       	call   c0028537 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 0c e0 01 00       	call   c0027b40 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 75 d9 01 00       	call   c00274c3 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 53 d9 01 00       	call   c00274c3 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 2f d2 01 00       	call   c0026e58 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 06 e9 01 00       	call   c0028537 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 ef de 01 00       	call   c0027b40 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 d2 e8 01 00       	call   c0028537 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 44 d8 01 00       	call   c00274c3 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 a4 e8 01 00       	call   c0028537 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 8d de 01 00       	call   c0027b40 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 f6 d7 01 00       	call   c00274c3 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 56 e8 01 00       	call   c0028537 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 3f de 01 00       	call   c0027b40 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 a8 d7 01 00       	call   c00274c3 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 bd d0 01 00       	call   c0026e58 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 94 e7 01 00       	call   c0028537 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 7d dd 01 00       	call   c0027b40 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 64 e7 01 00       	call   c0028537 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 d6 d6 01 00       	call   c00274c3 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 36 e7 01 00       	call   c0028537 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 1f dd 01 00       	call   c0027b40 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 88 d6 01 00       	call   c00274c3 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 e8 e6 01 00       	call   c0028537 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 d1 dc 01 00       	call   c0027b40 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 3a d6 01 00       	call   c00274c3 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 0e d6 01 00       	call   c00274c3 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 6b dc 01 00       	call   c0027b40 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 27 e5 01 00       	call   c0028413 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 b6 d5 01 00       	call   c00274c3 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 13 dc 01 00       	call   c0027b40 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 cf e4 01 00       	call   c0028413 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 49 ce 01 00       	call   c0026e58 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 20 e5 01 00       	call   c0028537 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 09 db 01 00       	call   c0027b40 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 ec e4 01 00       	call   c0028537 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 5e d4 01 00       	call   c00274c3 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 be e4 01 00       	call   c0028537 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 a7 da 01 00       	call   c0027b40 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 10 d4 01 00       	call   c00274c3 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 70 e4 01 00       	call   c0028537 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 59 da 01 00       	call   c0027b40 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 c2 d3 01 00       	call   c00274c3 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 22 e4 01 00       	call   c0028537 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 0b da 01 00       	call   c0027b40 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 74 d3 01 00       	call   c00274c3 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 d4 e3 01 00       	call   c0028537 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 bd d9 01 00       	call   c0027b40 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 26 d3 01 00       	call   c00274c3 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 28 cc 01 00       	call   c0026e58 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 ff e2 01 00       	call   c0028537 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 e8 d8 01 00       	call   c0027b40 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 cf e2 01 00       	call   c0028537 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 41 d2 01 00       	call   c00274c3 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 a1 e2 01 00       	call   c0028537 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 8a d8 01 00       	call   c0027b40 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 f3 d1 01 00       	call   c00274c3 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 53 e2 01 00       	call   c0028537 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 3c d8 01 00       	call   c0027b40 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 a5 d1 01 00       	call   c00274c3 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 05 e2 01 00       	call   c0028537 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 ee d7 01 00       	call   c0027b40 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 57 d1 01 00       	call   c00274c3 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 b7 e1 01 00       	call   c0028537 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 a0 d7 01 00       	call   c0027b40 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 09 d1 01 00       	call   c00274c3 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 dd d0 01 00       	call   c00274c3 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 3a d7 01 00       	call   c0027b40 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 f6 df 01 00       	call   c0028413 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 85 d0 01 00       	call   c00274c3 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 e2 d6 01 00       	call   c0027b40 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 9e df 01 00       	call   c0028413 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 2c d0 01 00       	call   c00274c3 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 89 d6 01 00       	call   c0027b40 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 45 df 01 00       	call   c0028413 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 d3 cf 01 00       	call   c00274c3 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 30 d6 01 00       	call   c0027b40 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 ec de 01 00       	call   c0028413 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 4a c8 01 00       	call   c0026e58 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 21 df 01 00       	call   c0028537 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 0a d5 01 00       	call   c0027b40 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 ed de 01 00       	call   c0028537 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 5f ce 01 00       	call   c00274c3 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 bf de 01 00       	call   c0028537 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 a8 d4 01 00       	call   c0027b40 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 11 ce 01 00       	call   c00274c3 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 71 de 01 00       	call   c0028537 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 5a d4 01 00       	call   c0027b40 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 c3 cd 01 00       	call   c00274c3 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 23 de 01 00       	call   c0028537 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 0c d4 01 00       	call   c0027b40 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 75 cd 01 00       	call   c00274c3 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 d5 dd 01 00       	call   c0028537 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 be d3 01 00       	call   c0027b40 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 27 cd 01 00       	call   c00274c3 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 87 dd 01 00       	call   c0028537 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 70 d3 01 00       	call   c0027b40 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 d6 cc 01 00       	call   c00274c3 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 36 dd 01 00       	call   c0028537 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 1f d3 01 00       	call   c0027b40 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 88 cc 01 00       	call   c00274c3 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 82 c5 01 00       	call   c0026e58 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 59 dc 01 00       	call   c0028537 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 42 d2 01 00       	call   c0027b40 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 22 dc 01 00       	call   c0028537 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 94 cb 01 00       	call   c00274c3 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 f4 db 01 00       	call   c0028537 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 dd d1 01 00       	call   c0027b40 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 46 cb 01 00       	call   c00274c3 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 a6 db 01 00       	call   c0028537 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 8f d1 01 00       	call   c0027b40 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 f8 ca 01 00       	call   c00274c3 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 58 db 01 00       	call   c0028537 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 41 d1 01 00       	call   c0027b40 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 aa ca 01 00       	call   c00274c3 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 0a db 01 00       	call   c0028537 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 f3 d0 01 00       	call   c0027b40 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 5c ca 01 00       	call   c00274c3 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 bc da 01 00       	call   c0028537 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 a5 d0 01 00       	call   c0027b40 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 0b ca 01 00       	call   c00274c3 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 6b da 01 00       	call   c0028537 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 54 d0 01 00       	call   c0027b40 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 c3 c9 01 00       	call   c00274c3 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 9c c9 01 00       	call   c00274c3 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 fa cf 01 00       	call   c0027b40 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 b6 d8 01 00       	call   c0028413 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 45 c9 01 00       	call   c00274c3 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 a3 cf 01 00       	call   c0027b40 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 5f d8 01 00       	call   c0028413 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 ed c8 01 00       	call   c00274c3 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 4b cf 01 00       	call   c0027b40 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 07 d8 01 00       	call   c0028413 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 95 c8 01 00       	call   c00274c3 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 f3 ce 01 00       	call   c0027b40 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 af d7 01 00       	call   c0028413 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 3d c8 01 00       	call   c00274c3 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 9b ce 01 00       	call   c0027b40 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 57 d7 01 00       	call   c0028413 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 eb c7 01 00       	call   c00274c3 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 49 ce 01 00       	call   c0027b40 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 05 d7 01 00       	call   c0028413 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 19 c0 01 00       	call   c0026e58 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 f0 d6 01 00       	call   c0028537 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 d9 cc 01 00       	call   c0027b40 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 c0 d6 01 00       	call   c0028537 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 32 c6 01 00       	call   c00274c3 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 44 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd62bc]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 66 d6 01 00       	call   c0028537 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 4f cc 01 00       	call   c0027b40 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 ba c5 01 00       	call   c00274c3 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 07 d6 01 00       	call   c0028537 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 f0 cb 01 00       	call   c0027b40 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 5b c5 01 00       	call   c00274c3 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 a8 d5 01 00       	call   c0028537 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 91 cb 01 00       	call   c0027b40 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 fc c4 01 00       	call   c00274c3 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 49 d5 01 00       	call   c0028537 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 32 cb 01 00       	call   c0027b40 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 9d c4 01 00       	call   c00274c3 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 ea d4 01 00       	call   c0028537 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 d3 ca 01 00       	call   c0027b40 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 3e c4 01 00       	call   c00274c3 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 8b d4 01 00       	call   c0028537 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 74 ca 01 00       	call   c0027b40 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 df c3 01 00       	call   c00274c3 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 2c d4 01 00       	call   c0028537 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 15 ca 01 00       	call   c0027b40 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 80 c3 01 00       	call   c00274c3 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 cd d3 01 00       	call   c0028537 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 b6 c9 01 00       	call   c0027b40 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 21 c3 01 00       	call   c00274c3 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 2b bc 01 00       	call   c0026e58 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 02 d3 01 00       	call   c0028537 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 eb c8 01 00       	call   c0027b40 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 d2 d2 01 00       	call   c0028537 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 44 c2 01 00       	call   c00274c3 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 60 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd62a0]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 77 d2 01 00       	call   c0028537 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 60 c8 01 00       	call   c0027b40 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 cb c1 01 00       	call   c00274c3 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 17 d2 01 00       	call   c0028537 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 00 c8 01 00       	call   c0027b40 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 6b c1 01 00       	call   c00274c3 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 b7 d1 01 00       	call   c0028537 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 a0 c7 01 00       	call   c0027b40 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 0b c1 01 00       	call   c00274c3 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 57 d1 01 00       	call   c0028537 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 40 c7 01 00       	call   c0027b40 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 ab c0 01 00       	call   c00274c3 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 f7 d0 01 00       	call   c0028537 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 e0 c6 01 00       	call   c0027b40 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 4b c0 01 00       	call   c00274c3 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 97 d0 01 00       	call   c0028537 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 80 c6 01 00       	call   c0027b40 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 eb bf 01 00       	call   c00274c3 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 37 d0 01 00       	call   c0028537 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 20 c6 01 00       	call   c0027b40 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 8b bf 01 00       	call   c00274c3 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 d7 cf 01 00       	call   c0028537 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 c0 c5 01 00       	call   c0027b40 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 2b bf 01 00       	call   c00274c3 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 7c 9d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6284]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 d0 be 01 00       	call   c00274c3 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 2d c5 01 00       	call   c0027b40 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 e9 cd 01 00       	call   c0028413 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 73 be 01 00       	call   c00274c3 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 d0 c4 01 00       	call   c0027b40 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 8c cd 01 00       	call   c0028413 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 16 be 01 00       	call   c00274c3 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 73 c4 01 00       	call   c0027b40 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 2f cd 01 00       	call   c0028413 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 b9 bd 01 00       	call   c00274c3 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 16 c4 01 00       	call   c0027b40 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 d2 cc 01 00       	call   c0028413 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 5c bd 01 00       	call   c00274c3 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 b9 c3 01 00       	call   c0027b40 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 75 cc 01 00       	call   c0028413 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 ff bc 01 00       	call   c00274c3 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 5c c3 01 00       	call   c0027b40 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 18 cc 01 00       	call   c0028413 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 a2 bc 01 00       	call   c00274c3 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 ff c2 01 00       	call   c0027b40 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 bb cb 01 00       	call   c0028413 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 45 bc 01 00       	call   c00274c3 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 a2 c2 01 00       	call   c0027b40 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 5e cb 01 00       	call   c0028413 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 5a c2 01 00       	call   c0027b40 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 ca cc 01 00       	jmp    c00285c0 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 3c c9 01 00       	call   c002840f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 fa c8 01 00       	call   c00283f1 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 91 c6 01 00       	call   c00281a3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 92 b9 01 00       	call   c00274c3 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 61 c6 01 00       	call   c00281a3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 c8 c2 01 00       	call   c0027e24 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 67 c8 01 00       	call   c00283f1 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 6a c8 01 00       	call   c002840f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 3d c8 01 00       	call   c002840f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 36 c2 01 00       	call   c0027e24 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 b8 c9 01 00       	call   c00285c0 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 93 c9 01 00       	call   c00285c0 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 6d c5 01 00       	call   c00281a3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 c4 be 01 00       	call   c0027b14 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 a3 c7 01 00       	call   c002840f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 3c b8 01 00       	call   c00274c3 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 60 be 01 00       	call   c0027b14 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 fa c8 01 00       	call   c00285c0 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 3a c1 01 00       	call   c0027e24 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 b7 b7 01 00       	call   c00274c3 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 e3 c3 01 00       	call   c00281a3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 e3 b6 01 00       	call   c00274c3 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 c3 b6 01 00       	call   c00274c3 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 93 c3 01 00       	call   c00281a3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 e3 c5 01 00       	call   c002840d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 c2 bc 01 00       	call   c0027b14 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 3c c7 01 00       	call   c00285a0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 6b c5 01 00       	call   c00283f1 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 69 bc 01 00       	call   c0027b14 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 e7 c2 01 00       	call   c00281a3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 6a bc 01 00       	call   c0027b40 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 bc c2 01 00       	call   c00281a3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 23 bf 01 00       	call   c0027e24 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 a2 b5 01 00       	call   c00274c3 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 6c c2 01 00       	call   c00281a3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 b8 c4 01 00       	call   c002840f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 ad bb 01 00       	call   c0027b40 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 7f bb 01 00       	call   c0027b40 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 b8 c1 01 00       	call   c00281a3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 1c be 01 00       	call   c0027e24 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 e4 bd 01 00       	call   c0027e24 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 63 b4 01 00       	call   c00274c3 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 48 c5 01 00       	call   c00285c0 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 22 c1 01 00       	call   c00281a3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 79 ba 01 00       	call   c0027b14 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 58 c3 01 00       	call   c002840f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 f0 b3 01 00       	call   c00274c3 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 14 ba 01 00       	call   c0027b14 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 ae c4 01 00       	call   c00285c0 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 77 c2 01 00       	call   c002840f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 35 c2 01 00       	call   c00283f1 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 cc bf 01 00       	call   c00281a3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 cd b2 01 00       	call   c00274c3 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 9c bf 01 00       	call   c00281a3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 03 bc 01 00       	call   c0027e24 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 a2 c1 01 00       	call   c00283f1 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 a5 c1 01 00       	call   c002840f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 78 c1 01 00       	call   c002840f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 71 bb 01 00       	call   c0027e24 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 f3 c2 01 00       	call   c00285c0 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 ce c2 01 00       	call   c00285c0 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 a8 be 01 00       	call   c00281a3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 ff b7 01 00       	call   c0027b14 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 de c0 01 00       	call   c002840f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 77 b1 01 00       	call   c00274c3 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 9b b7 01 00       	call   c0027b14 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 35 c2 01 00       	call   c00285c0 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 75 ba 01 00       	call   c0027e24 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 f2 b0 01 00       	call   c00274c3 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 1d bd 01 00       	call   c00281a3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 1d b0 01 00       	call   c00274c3 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 fd af 01 00       	call   c00274c3 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 cd bc 01 00       	call   c00281a3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 1d bf 01 00       	call   c002840d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 fb b5 01 00       	call   c0027b14 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 75 c0 01 00       	call   c00285a0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 a4 be 01 00       	call   c00283f1 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 a1 b5 01 00       	call   c0027b14 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 1f bc 01 00       	call   c00281a3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 a2 b5 01 00       	call   c0027b40 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 f4 bb 01 00       	call   c00281a3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 5b b8 01 00       	call   c0027e24 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 da ae 01 00       	call   c00274c3 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 a4 bb 01 00       	call   c00281a3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 f0 bd 01 00       	call   c002840f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 e5 b4 01 00       	call   c0027b40 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 b7 b4 01 00       	call   c0027b40 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 ee ba 01 00       	call   c00281a3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 52 b7 01 00       	call   c0027e24 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 1f b7 01 00       	call   c0027e24 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 9e ad 01 00       	call   c00274c3 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 83 be 01 00       	call   c00285c0 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 5d ba 01 00       	call   c00281a3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 b4 b3 01 00       	call   c0027b14 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 93 bc 01 00       	call   c002840f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 2b ad 01 00       	call   c00274c3 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 4f b3 01 00       	call   c0027b14 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 e9 bd 01 00       	call   c00285c0 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 b2 bb 01 00       	call   c002840f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 70 bb 01 00       	call   c00283f1 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 07 b9 01 00       	call   c00281a3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 08 ac 01 00       	call   c00274c3 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 d7 b8 01 00       	call   c00281a3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 3e b5 01 00       	call   c0027e24 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 dd ba 01 00       	call   c00283f1 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 e0 ba 01 00       	call   c002840f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 b3 ba 01 00       	call   c002840f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 ac b4 01 00       	call   c0027e24 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 2e bc 01 00       	call   c00285c0 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 09 bc 01 00       	call   c00285c0 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 e3 b7 01 00       	call   c00281a3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 3a b1 01 00       	call   c0027b14 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 19 ba 01 00       	call   c002840f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 b2 aa 01 00       	call   c00274c3 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 d6 b0 01 00       	call   c0027b14 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 70 bb 01 00       	call   c00285c0 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 b0 b3 01 00       	call   c0027e24 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 2d aa 01 00       	call   c00274c3 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 58 b6 01 00       	call   c00281a3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 58 a9 01 00       	call   c00274c3 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 38 a9 01 00       	call   c00274c3 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 08 b6 01 00       	call   c00281a3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 58 b8 01 00       	call   c002840d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 36 af 01 00       	call   c0027b14 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 b0 b9 01 00       	call   c00285a0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 df b7 01 00       	call   c00283f1 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 dc ae 01 00       	call   c0027b14 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 5a b5 01 00       	call   c00281a3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 dd ae 01 00       	call   c0027b40 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 2f b5 01 00       	call   c00281a3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 96 b1 01 00       	call   c0027e24 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 15 a8 01 00       	call   c00274c3 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 df b4 01 00       	call   c00281a3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 2b b7 01 00       	call   c002840f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 20 ae 01 00       	call   c0027b40 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 f2 ad 01 00       	call   c0027b40 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 29 b4 01 00       	call   c00281a3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 8d b0 01 00       	call   c0027e24 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 5a b0 01 00       	call   c0027e24 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 d9 a6 01 00       	call   c00274c3 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 be b7 01 00       	call   c00285c0 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 98 b3 01 00       	call   c00281a3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 ef ac 01 00       	call   c0027b14 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 ce b5 01 00       	call   c002840f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 66 a6 01 00       	call   c00274c3 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 8a ac 01 00       	call   c0027b14 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 24 b7 01 00       	call   c00285c0 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 ed b4 01 00       	call   c002840f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 ab b4 01 00       	call   c00283f1 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 42 b2 01 00       	call   c00281a3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 43 a5 01 00       	call   c00274c3 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 12 b2 01 00       	call   c00281a3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 79 ae 01 00       	call   c0027e24 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 18 b4 01 00       	call   c00283f1 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 1b b4 01 00       	call   c002840f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 ee b3 01 00       	call   c002840f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 e7 ad 01 00       	call   c0027e24 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 69 b5 01 00       	call   c00285c0 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 44 b5 01 00       	call   c00285c0 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 1e b1 01 00       	call   c00281a3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 75 aa 01 00       	call   c0027b14 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 54 b3 01 00       	call   c002840f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 ed a3 01 00       	call   c00274c3 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 11 aa 01 00       	call   c0027b14 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 ab b4 01 00       	call   c00285c0 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 eb ac 01 00       	call   c0027e24 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 68 a3 01 00       	call   c00274c3 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 93 af 01 00       	call   c00281a3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 93 a2 01 00       	call   c00274c3 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 73 a2 01 00       	call   c00274c3 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 43 af 01 00       	call   c00281a3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 93 b1 01 00       	call   c002840d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 71 a8 01 00       	call   c0027b14 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 eb b2 01 00       	call   c00285a0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 1a b1 01 00       	call   c00283f1 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 17 a8 01 00       	call   c0027b14 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 95 ae 01 00       	call   c00281a3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 18 a8 01 00       	call   c0027b40 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 6a ae 01 00       	call   c00281a3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 d1 aa 01 00       	call   c0027e24 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 50 a1 01 00       	call   c00274c3 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 1a ae 01 00       	call   c00281a3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 66 b0 01 00       	call   c002840f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 5b a7 01 00       	call   c0027b40 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 2d a7 01 00       	call   c0027b40 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 64 ad 01 00       	call   c00281a3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 c8 a9 01 00       	call   c0027e24 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 95 a9 01 00       	call   c0027e24 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 14 a0 01 00       	call   c00274c3 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 f9 b0 01 00       	call   c00285c0 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 d3 ac 01 00       	call   c00281a3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 2a a6 01 00       	call   c0027b14 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 09 af 01 00       	call   c002840f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 a1 9f 01 00       	call   c00274c3 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 c5 a5 01 00       	call   c0027b14 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 5f b0 01 00       	call   c00285c0 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 25 ae 01 00       	call   c002840f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 e3 ad 01 00       	call   c00283f1 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 7a ab 01 00       	call   c00281a3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 7b 9e 01 00       	call   c00274c3 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 4a ab 01 00       	call   c00281a3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 b1 a7 01 00       	call   c0027e24 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 50 ad 01 00       	call   c00283f1 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 53 ad 01 00       	call   c002840f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 26 ad 01 00       	call   c002840f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 1f a7 01 00       	call   c0027e24 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 a1 ae 01 00       	call   c00285c0 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 78 ae 01 00       	call   c00285c0 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 52 aa 01 00       	call   c00281a3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 a9 a3 01 00       	call   c0027b14 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 88 ac 01 00       	call   c002840f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 21 9d 01 00       	call   c00274c3 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 49 a3 01 00       	call   c0027b14 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 e3 ad 01 00       	call   c00285c0 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 24 a6 01 00       	call   c0027e24 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 a1 9c 01 00       	call   c00274c3 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 cd a8 01 00       	call   c00281a3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 cd 9b 01 00       	call   c00274c3 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 ad 9b 01 00       	call   c00274c3 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 7d a8 01 00       	call   c00281a3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 b1 aa 01 00       	call   c00283f1 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 a8 a1 01 00       	call   c0027b14 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 22 ac 01 00       	call   c00285a0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 51 aa 01 00       	call   c00283f1 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 4b a1 01 00       	call   c0027b14 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 c9 a7 01 00       	call   c00281a3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 4c a1 01 00       	call   c0027b40 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 9e a7 01 00       	call   c00281a3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 05 a4 01 00       	call   c0027e24 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 84 9a 01 00       	call   c00274c3 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 4e a7 01 00       	call   c00281a3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 9a a9 01 00       	call   c002840f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 8f a0 01 00       	call   c0027b40 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 61 a0 01 00       	call   c0027b40 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 a5 a6 01 00       	call   c00281a3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 0c a3 01 00       	call   c0027e24 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 f5 9f 01 00       	call   c0027b40 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 b1 a8 01 00       	call   c0028413 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 a4 a2 01 00       	call   c0027e24 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 23 99 01 00       	call   c00274c3 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 08 aa 01 00       	call   c00285c0 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 e2 a5 01 00       	call   c00281a3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 39 9f 01 00       	call   c0027b14 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 18 a8 01 00       	call   c002840f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 b0 98 01 00       	call   c00274c3 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 d8 9e 01 00       	call   c0027b14 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 72 a9 01 00       	call   c00285c0 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 a4 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd625c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 98 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6268]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 a2 1b 00 00       	call   c000f853 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 2d a6 01 00       	call   c002840f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 eb a5 01 00       	call   c00283f1 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 d7 a5 01 00       	call   c002840f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 49 a3 01 00       	call   c00281a3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 c7 9c 01 00       	call   c0027b40 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 19 a3 01 00       	call   c00281a3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 1f 96 01 00       	call   c00274c3 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 ee a2 01 00       	call   c00281a3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 3e a5 01 00       	call   c002840d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 1f 9c 01 00       	call   c0027b14 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 99 a6 01 00       	call   c00285a0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 c8 a4 01 00       	call   c00283f1 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 c7 9b 01 00       	call   c0027b14 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 45 a2 01 00       	call   c00281a3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 c8 9b 01 00       	call   c0027b40 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 1a a2 01 00       	call   c00281a3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 81 9e 01 00       	call   c0027e24 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 00 95 01 00       	call   c00274c3 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 28 9e 01 00       	call   c0027e24 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 ae 94 01 00       	call   c00274c3 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 94 a5 01 00       	call   c00285c0 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 6e a1 01 00       	call   c00281a3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 c5 9a 01 00       	call   c0027b14 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 a4 a3 01 00       	call   c002840f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 3d 94 01 00       	call   c00274c3 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 69 9a 01 00       	call   c0027b14 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 03 a5 01 00       	call   c00285c0 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 b8 a0 01 00       	call   c00281a3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 35 9a 01 00       	call   c0027b40 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 86 a0 01 00       	call   c00281a3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 8c 93 01 00       	call   c00274c3 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 5c a0 01 00       	call   c00281a3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 b0 a2 01 00       	call   c0028411 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 89 99 01 00       	call   c0027b14 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 03 a4 01 00       	call   c00285a0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 32 a2 01 00       	call   c00283f1 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 30 99 01 00       	call   c0027b14 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 ae 9f 01 00       	call   c00281a3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 31 99 01 00       	call   c0027b40 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 83 9f 01 00       	call   c00281a3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 ea 9b 01 00       	call   c0027e24 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 69 92 01 00       	call   c00274c3 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 85 9b 01 00       	call   c0027e24 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 04 92 01 00       	call   c00274c3 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 ea a2 01 00       	call   c00285c0 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 c4 9e 01 00       	call   c00281a3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 1b 98 01 00       	call   c0027b14 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 fa a0 01 00       	call   c002840f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 93 91 01 00       	call   c00274c3 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 bf 97 01 00       	call   c0027b14 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 30 9e 01 00       	call   c00281a3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 36 91 01 00       	call   c00274c3 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 be 9e 02 c0       	mov    eax,0xc0029ebe
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 cf 9e 02 c0       	mov    eax,0xc0029ecf
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e4 13 00 00       	call   c000f853 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e6 13 00 00       	call   c000f873 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 55 13 00 00       	call   c000f843 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 06 9f 02 c0       	push   0xc0029f06
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 68 e3 02 c0       	mov    eax,0xc002e368
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 0f 9f 02 c0       	push   0xc0029f0f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 3c 69 02 c0       	mov    eax,0xc002693c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 19 9f 02 c0       	push   0xc0029f19
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 70 66 02 c0       	mov    eax,0xc0026670
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 22 9f 02 c0       	push   0xc0029f22
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 3c 6a 02 c0       	mov    eax,0xc0026a3c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 2c 9f 02 c0       	push   0xc0029f2c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 bc 67 02 c0       	mov    eax,0xc00267bc
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 35 9f 02 c0       	push   0xc0029f35
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 6c e3 02 c0       	mov    eax,0xc002e36c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 42 9f 02 c0       	push   0xc0029f42
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 6d e3 02 c0       	mov    eax,0xc002e36d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 17 5e 00 00       	call   c001443a <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 ea 11 00 00       	call   c000f843 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 d4 18 03 c0    	push   DWORD PTR ds:0xc00318d4
c000e668:	68 4f 9f 02 c0       	push   0xc0029f4f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 23 f5 00 00       	call   c001db98 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 0c f8 00 00       	call   c001de96 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 f4 e6 01 c0       	push   0xc001e6f4
c000e693:	ff 35 d4 18 03 c0    	push   DWORD PTR ds:0xc00318d4
c000e699:	e8 f8 f7 00 00       	call   c001de96 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 88 18 03 c0       	mov    ds:0xc0031888,eax
c000e6a6:	c6 05 6d e3 02 c0 01 	mov    BYTE PTR ds:0xc002e36d,0x1
c000e6ad:	e8 c3 03 01 00       	call   c001ea75 <Vm::initialise8086()>
c000e6b2:	e8 6b 4b 00 00       	call   c0013222 <Fs::initVFS()>
c000e6b7:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 55 de 00 00       	call   c001c528 <Sys::loadSyscalls()>
c000e6d3:	e8 78 bd 00 00       	call   c001a450 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 5c 9f 02 c0       	push   0xc0029f5c
c000e6e2:	68 65 9f 02 c0       	push   0xc0029f65
c000e6e7:	e8 8a ca 00 00       	call   c001b176 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 16 56 00 00       	call   c0013d0a <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 09 5d 00 00       	call   c001440e <Device::loadDriversForAll()>
c000e705:	e8 8c b8 00 00       	call   c0019f96 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 68 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e368
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 6d 9f 02 c0       	push   0xc0029f6d
c000e719:	e8 9e ef 00 00       	call   c001d6bc <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 c9 f1 00 00       	call   c001d8f0 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 c6 fa 00 00       	call   c001e1fa <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 89 9f 02 c0       	push   0xc0029f89
c000e749:	50                   	push   eax
c000e74a:	e8 65 5d 00 00       	call   c00144b4 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 28 a1 02 c0       	mov    edx,0xc002a128
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 81 e3 02 c0 04 	test   BYTE PTR ds:0xc002e381,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 23 7d 01 00       	call   c0026606 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 8a a3 00 00       	call   c0018ca8 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 63 a3 00 00       	call   c0018ca8 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 41 a3 00 00       	call   c0018ca8 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 1f a3 00 00       	call   c0018ca8 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 80 e3 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e380,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 2d a2 00 00       	call   c0018c24 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 08 a2 00 00       	call   c0018c24 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 8d 7b 01 00       	call   c00265c0 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 4a 7b 01 00       	call   c00265a0 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 24 a2 00 00       	call   c0018ca8 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 99 9f 02 c0       	push   0xc0029f99
c000eaaf:	e8 e9 43 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 ac 9f 02 c0       	push   0xc0029fac
c000ead2:	e8 c6 43 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 bd 9f 02 c0       	push   0xc0029fbd
c000eaf5:	e8 a3 43 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 ce 9f 02 c0       	push   0xc0029fce
c000eb18:	e8 80 43 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 df 9f 02 c0       	push   0xc0029fdf
c000eb3b:	e8 5d 43 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 f0 9f 02 c0       	push   0xc0029ff0
c000eb5e:	e8 3a 43 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 01 a0 02 c0       	push   0xc002a001
c000eb81:	e8 17 43 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 12 a0 02 c0       	push   0xc002a012
c000eba4:	e8 f4 42 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 23 a0 02 c0       	push   0xc002a023
c000ebc7:	e8 d1 42 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 34 a0 02 c0       	push   0xc002a034
c000ebea:	e8 ae 42 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 45 a0 02 c0       	push   0xc002a045
c000ec0d:	e8 8b 42 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 56 a0 02 c0       	push   0xc002a056
c000ec30:	e8 68 42 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 67 a0 02 c0       	push   0xc002a067
c000ec53:	e8 45 42 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 78 a0 02 c0       	push   0xc002a078
c000ec76:	e8 22 42 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 89 a0 02 c0       	push   0xc002a089
c000ec99:	e8 ff 41 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 9a a0 02 c0       	push   0xc002a09a
c000ecbc:	e8 dc 41 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 ab a0 02 c0       	push   0xc002a0ab
c000ecdf:	e8 b9 41 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 bc a0 02 c0       	push   0xc002a0bc
c000ed02:	e8 96 41 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 cd a0 02 c0       	push   0xc002a0cd
c000ed21:	e8 77 41 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 54 ba 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ba54
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 66 41 00 00       	jmp    c0012e9d <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 de a0 02 c0       	push   0xc002a0de
c000ee0a:	e8 7a b7 00 00       	call   c001a589 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 e4 a0 02 c0       	push   0xc002a0e4
c000ee42:	e8 42 b7 00 00       	call   c001a589 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 80 e3 02 c0 04 	test   BYTE PTR ds:0xc002e380,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 a4 d2 02 c0 	sete   BYTE PTR ds:0xc002d2a4
c000eea6:	e8 98 09 00 00       	call   c000f843 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 c3 92 00 00       	call   c0018178 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 00 54 00 00       	call   c00142c4 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 59 09 00 00       	call   c000f843 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 6c 9e 00 00       	call   c0018d60 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 c1 53 00 00       	call   c00142c4 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 2b 59 00 00       	call   c001484a <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 91 53 00 00       	call   c00142c4 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 41 f0 00 00       	call   c001df96 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 ea a0 02 c0       	push   0xc002a0ea
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 fa 3e 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 fb a0 02 c0       	push   0xc002a0fb
c000efc0:	e8 c4 b5 00 00       	call   c001a589 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 08 a1 02 c0       	push   0xc002a108
c000efd5:	e8 af b5 00 00       	call   c001a589 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 12 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a112
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 98 b5 00 00       	jmp    c001a589 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 4c a1 02 c0       	push   0xc002a14c
c000f086:	e8 12 3e 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 72 e3 02 c0       	mov    ds:0xc002e372,eax
c000f0c7:	66 89 15 70 e3 02 c0 	mov    WORD PTR ds:0xc002e370,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 88 eb 00 00       	call   c001dd66 <unlockScheduler()>
c000f1de:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 68 e3 02 c0    	push   DWORD PTR ds:0xc002e368
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 14 94 01 00       	call   c0028640 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 0b 94 01 00       	call   c0028640 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 78 e3 02 c0 ff 07 	mov    WORD PTR ds:0xc002e378,0x7ff
c000f323:	a3 7a e3 02 c0       	mov    ds:0xc002e37a,eax
c000f328:	0f 01 1d 78 e3 02 c0 	lidtd  ds:0xc002e378
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 c9 27 00 00       	call   c0011dde <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 10 2e 00 00       	call   c0012430 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 15 02 00 00       	call   c000f843 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 36 1e 00 00       	call   c0011474 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 67 1e 00 00       	call   c00114b4 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 68 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e368
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 84 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d284
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 84 d2 02 c0       	mov    eax,ds:0xc002d284
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 68 a1 02 c0       	push   0xc002a168
c000f6f4:	e8 a4 37 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 84 d2 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d284,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 bf 26 00 00       	call   c0011dde <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 84 d2 02 c0    	mov    ebp,DWORD PTR ds:0xc002d284
c000f727:	e8 b9 07 00 00       	call   c000fee5 <Phys::allocatePage()>
c000f72c:	68 01 0c 00 00       	push   0xc01
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 f7 2b 00 00       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 84 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d284
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 98 a1 02 c0       	push   0xc002a198
c000f7ad:	e8 d7 ad 00 00       	call   c001a589 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 9d a1 02 c0       	push   0xc002a19d
c000f7c3:	e8 c1 ad 00 00       	call   c001a589 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 8b e5 00 00       	call   c001dd64 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 7c e5 00 00       	call   c001dd66 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 e3 25 00 00       	call   c0011dde <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	68 01 08 00 00       	push   0x801
c000f803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f807:	50                   	push   eax
c000f808:	e8 23 2c 00 00       	call   c0012430 <VAS::allocatePages(int, int)>
c000f80d:	83 c4 1c             	add    esp,0x1c
c000f810:	c3                   	ret    

c000f811 <liballoc_free(void*, int)>:
c000f811:	83 ec 0c             	sub    esp,0xc
c000f814:	e8 c5 25 00 00       	call   c0011dde <Virt::getAKernelVAS()>
c000f819:	83 ec 08             	sub    esp,0x8
c000f81c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f820:	50                   	push   eax
c000f821:	e8 c6 28 00 00       	call   c00120ec <VAS::freeAllocatedPages(unsigned long)>
c000f826:	b8 00 00 00 00       	mov    eax,0x0
c000f82b:	83 c4 1c             	add    esp,0x1c
c000f82e:	c3                   	ret    

c000f82f <realloc>:
c000f82f:	83 ec 14             	sub    esp,0x14
c000f832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83a:	e8 15 1e ff ff       	call   c0001654 <dlrealloc>
c000f83f:	83 c4 1c             	add    esp,0x1c
c000f842:	c3                   	ret    

c000f843 <malloc>:
c000f843:	83 ec 18             	sub    esp,0x18
c000f846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84a:	e8 c8 18 ff ff       	call   c0001117 <dlmalloc>
c000f84f:	83 c4 1c             	add    esp,0x1c
c000f852:	c3                   	ret    

c000f853 <free>:
c000f853:	83 ec 18             	sub    esp,0x18
c000f856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85a:	e8 5d 15 ff ff       	call   c0000dbc <dlfree>
c000f85f:	83 c4 1c             	add    esp,0x1c
c000f862:	c3                   	ret    

c000f863 <rfree>:
c000f863:	83 ec 18             	sub    esp,0x18
c000f866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f86a:	e8 4d 15 ff ff       	call   c0000dbc <dlfree>
c000f86f:	83 c4 1c             	add    esp,0x1c
c000f872:	c3                   	ret    

c000f873 <calloc>:
c000f873:	56                   	push   esi
c000f874:	53                   	push   ebx
c000f875:	83 ec 10             	sub    esp,0x10
c000f878:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f87c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f881:	53                   	push   ebx
c000f882:	e8 bc ff ff ff       	call   c000f843 <malloc>
c000f887:	89 c6                	mov    esi,eax
c000f889:	83 c4 0c             	add    esp,0xc
c000f88c:	53                   	push   ebx
c000f88d:	6a 00                	push   0x0
c000f88f:	50                   	push   eax
c000f890:	e8 e3 0e ff ff       	call   c0000778 <memset>
c000f895:	89 f0                	mov    eax,esi
c000f897:	83 c4 14             	add    esp,0x14
c000f89a:	5b                   	pop    ebx
c000f89b:	5e                   	pop    esi
c000f89c:	c3                   	ret    

c000f89d <hwTextMode_loadInData(VgaText*)>:
c000f89d:	55                   	push   ebp
c000f89e:	a1 a0 d2 02 c0       	mov    eax,ds:0xc002d2a0
c000f8a3:	57                   	push   edi
c000f8a4:	56                   	push   esi
c000f8a5:	53                   	push   ebx
c000f8a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8aa:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b0:	85 d2                	test   edx,edx
c000f8b2:	7e 2f                	jle    c000f8e3 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b4:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8ba:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8bd:	31 f6                	xor    esi,esi
c000f8bf:	29 fd                	sub    ebp,edi
c000f8c1:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c4:	31 c0                	xor    eax,eax
c000f8c6:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8ca:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8ce:	40                   	inc    eax
c000f8cf:	83 f8 50             	cmp    eax,0x50
c000f8d2:	75 f2                	jne    c000f8c6 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d4:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8da:	46                   	inc    esi
c000f8db:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e1:	7f de                	jg     c000f8c1 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	5f                   	pop    edi
c000f8e6:	5d                   	pop    ebp
c000f8e7:	c3                   	ret    

c000f8e8 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e8:	55                   	push   ebp
c000f8e9:	80 3d 00 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e400,0x0
c000f8f0:	57                   	push   edi
c000f8f1:	56                   	push   esi
c000f8f2:	53                   	push   ebx
c000f8f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f7:	75 50                	jne    c000f949 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f9:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8ff:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f905:	8b 15 a0 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2a0
c000f90b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90f:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f915:	eb 0e                	jmp    c000f925 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f917:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91d:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f923:	89 da                	mov    edx,ebx
c000f925:	83 e5 0f             	and    ebp,0xf
c000f928:	c1 e0 04             	shl    eax,0x4
c000f92b:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92e:	0f b6 c0             	movzx  eax,al
c000f931:	41                   	inc    ecx
c000f932:	09 e8                	or     eax,ebp
c000f934:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f938:	c1 e0 08             	shl    eax,0x8
c000f93b:	09 e8                	or     eax,ebp
c000f93d:	39 fb                	cmp    ebx,edi
c000f93f:	66 89 02             	mov    WORD PTR [edx],ax
c000f942:	75 d3                	jne    c000f917 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f944:	5b                   	pop    ebx
c000f945:	5e                   	pop    esi
c000f946:	5f                   	pop    edi
c000f947:	5d                   	pop    ebp
c000f948:	c3                   	ret    
c000f949:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f953:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95d:	31 c0                	xor    eax,eax
c000f95f:	bd 02 00 00 00       	mov    ebp,0x2
c000f964:	eb 9f                	jmp    c000f905 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f966 <hwTextMode_showCursor(VgaText*, bool)>:
c000f966:	56                   	push   esi
c000f967:	80 3d 00 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e400,0x0
c000f96e:	53                   	push   ebx
c000f96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f973:	75 39                	jne    c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f975:	84 c0                	test   al,al
c000f977:	74 38                	je     c000f9b1 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f979:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97e:	b0 0a                	mov    al,0xa
c000f980:	89 da                	mov    edx,ebx
c000f982:	ee                   	out    dx,al
c000f983:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f988:	89 ca                	mov    edx,ecx
c000f98a:	ec                   	in     al,dx
c000f98b:	b2 0f                	mov    dl,0xf
c000f98d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f991:	83 e0 c0             	and    eax,0xffffffc0
c000f994:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f99a:	09 d0                	or     eax,edx
c000f99c:	89 ca                	mov    edx,ecx
c000f99e:	ee                   	out    dx,al
c000f99f:	b0 0b                	mov    al,0xb
c000f9a1:	89 da                	mov    edx,ebx
c000f9a3:	ee                   	out    dx,al
c000f9a4:	89 ca                	mov    edx,ecx
c000f9a6:	ec                   	in     al,dx
c000f9a7:	83 e0 e0             	and    eax,0xffffffe0
c000f9aa:	83 c8 0f             	or     eax,0xf
c000f9ad:	ee                   	out    dx,al
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	c3                   	ret    
c000f9b1:	b0 0a                	mov    al,0xa
c000f9b3:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b8:	ee                   	out    dx,al
c000f9b9:	b0 20                	mov    al,0x20
c000f9bb:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c0:	ee                   	out    dx,al
c000f9c1:	5b                   	pop    ebx
c000f9c2:	5e                   	pop    esi
c000f9c3:	c3                   	ret    

c000f9c4 <hwTextMode_update(VgaText*)>:
c000f9c4:	c3                   	ret    

c000f9c5 <hwTextMode_updateCursor(VgaText*)>:
c000f9c5:	56                   	push   esi
c000f9c6:	80 3d 00 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e400,0x0
c000f9cd:	53                   	push   ebx
c000f9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9d2:	75 3f                	jne    c000fa13 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d4:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d9:	b9 19 00 00 00       	mov    ecx,0x19
c000f9de:	89 f2                	mov    edx,esi
c000f9e0:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e6:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9ec:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ef:	c1 e1 04             	shl    ecx,0x4
c000f9f2:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f8:	b0 0f                	mov    al,0xf
c000f9fa:	ee                   	out    dx,al
c000f9fb:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa00:	88 c8                	mov    al,cl
c000fa02:	89 da                	mov    edx,ebx
c000fa04:	ee                   	out    dx,al
c000fa05:	b0 0e                	mov    al,0xe
c000fa07:	89 f2                	mov    edx,esi
c000fa09:	ee                   	out    dx,al
c000fa0a:	89 c8                	mov    eax,ecx
c000fa0c:	89 da                	mov    edx,ebx
c000fa0e:	66 c1 e8 08          	shr    ax,0x8
c000fa12:	ee                   	out    dx,al
c000fa13:	5b                   	pop    ebx
c000fa14:	5e                   	pop    esi
c000fa15:	c3                   	ret    

c000fa16 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa1a:	80 3d 00 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e400,0x0
c000fa21:	75 38                	jne    c000fa5b <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa23:	ba da 03 00 00       	mov    edx,0x3da
c000fa28:	84 c0                	test   al,al
c000fa2a:	75 18                	jne    c000fa44 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa2c:	ec                   	in     al,dx
c000fa2d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa32:	b0 30                	mov    al,0x30
c000fa34:	89 ca                	mov    edx,ecx
c000fa36:	ee                   	out    dx,al
c000fa37:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa3c:	ec                   	in     al,dx
c000fa3d:	83 c8 08             	or     eax,0x8
c000fa40:	89 ca                	mov    edx,ecx
c000fa42:	ee                   	out    dx,al
c000fa43:	c3                   	ret    
c000fa44:	ec                   	in     al,dx
c000fa45:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa4a:	b0 30                	mov    al,0x30
c000fa4c:	89 ca                	mov    edx,ecx
c000fa4e:	ee                   	out    dx,al
c000fa4f:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa54:	ec                   	in     al,dx
c000fa55:	83 e0 f7             	and    eax,0xfffffff7
c000fa58:	89 ca                	mov    edx,ecx
c000fa5a:	ee                   	out    dx,al
c000fa5b:	c3                   	ret    

c000fa5c <hwTextMode_scrollScreen(VgaText*)>:
c000fa5c:	55                   	push   ebp
c000fa5d:	57                   	push   edi
c000fa5e:	56                   	push   esi
c000fa5f:	53                   	push   ebx
c000fa60:	83 ec 1c             	sub    esp,0x1c
c000fa63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa67:	80 3d 00 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e400,0x0
c000fa6e:	74 14                	je     c000fa84 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa70:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa7a:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa84:	a1 a0 d2 02 c0       	mov    eax,ds:0xc002d2a0
c000fa89:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8e:	05 a0 00 00 00       	add    eax,0xa0
c000fa93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa9b:	31 c0                	xor    eax,eax
c000fa9d:	eb 0b                	jmp    c000faaa <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9f:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa5:	74 57                	je     c000fafe <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa7:	43                   	inc    ebx
c000faa8:	89 f0                	mov    eax,esi
c000faaa:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab0:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab6:	88 13                	mov    BYTE PTR [ebx],dl
c000fab8:	8d 70 01             	lea    esi,[eax+0x1]
c000fabb:	83 fd 18             	cmp    ebp,0x18
c000fabe:	75 df                	jne    c000fa9f <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac0:	a8 01                	test   al,0x1
c000fac2:	75 13                	jne    c000fad7 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac4:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000facd:	75 d8                	jne    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facf:	83 c4 1c             	add    esp,0x1c
c000fad2:	5b                   	pop    ebx
c000fad3:	5e                   	pop    esi
c000fad4:	5f                   	pop    edi
c000fad5:	5d                   	pop    ebp
c000fad6:	c3                   	ret    
c000fad7:	83 ec 08             	sub    esp,0x8
c000fada:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae1:	50                   	push   eax
c000fae2:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae6:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faed:	50                   	push   eax
c000faee:	e8 53 0c 00 00       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf3:	83 c4 10             	add    esp,0x10
c000faf6:	88 07                	mov    BYTE PTR [edi],al
c000faf8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fafc:	eb c9                	jmp    c000fac7 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafe:	45                   	inc    ebp
c000faff:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb07:	eb 8e                	jmp    c000fa97 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb09 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb09:	57                   	push   edi
c000fb0a:	80 3d 00 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e400,0x0
c000fb11:	56                   	push   esi
c000fb12:	53                   	push   ebx
c000fb13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb17:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb1b:	75 65                	jne    c000fb82 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1d:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb22:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb27:	83 ec 08             	sub    esp,0x8
c000fb2a:	52                   	push   edx
c000fb2b:	50                   	push   eax
c000fb2c:	e8 15 0c 00 00       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb31:	5a                   	pop    edx
c000fb32:	0f b6 c0             	movzx  eax,al
c000fb35:	59                   	pop    ecx
c000fb36:	50                   	push   eax
c000fb37:	0f be c3             	movsx  eax,bl
c000fb3a:	50                   	push   eax
c000fb3b:	e8 ac 0c 00 00       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	8b 35 a0 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2a0
c000fb49:	80 3d 00 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e400,0x0
c000fb50:	74 07                	je     c000fb59 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb52:	66 0f be c3          	movsx  ax,bl
c000fb56:	80 cc 02             	or     ah,0x2
c000fb59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5d:	ba 19 00 00 00       	mov    edx,0x19
c000fb62:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb68:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb6b:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6e:	c1 e1 04             	shl    ecx,0x4
c000fb71:	c1 e2 04             	shl    edx,0x4
c000fb74:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb78:	01 ca                	add    edx,ecx
c000fb7a:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7e:	5b                   	pop    ebx
c000fb7f:	5e                   	pop    esi
c000fb80:	5f                   	pop    edi
c000fb81:	c3                   	ret    
c000fb82:	b8 02 00 00 00       	mov    eax,0x2
c000fb87:	31 d2                	xor    edx,edx
c000fb89:	eb 9c                	jmp    c000fb27 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb8b <setupTextMode()>:
c000fb8b:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb90:	83 e0 30             	and    eax,0x30
c000fb93:	66 83 f8 30          	cmp    ax,0x30
c000fb97:	75 11                	jne    c000fbaa <setupTextMode()+0x1f>
c000fb99:	81 2d a0 d2 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d2a0,0x8000
c000fba3:	c6 05 00 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e400,0x1
c000fbaa:	c7 05 38 e4 02 c0 16 fa 00 c0 	mov    DWORD PTR ds:0xc002e438,0xc000fa16
c000fbb4:	c7 05 24 e4 02 c0 9d f8 00 c0 	mov    DWORD PTR ds:0xc002e424,0xc000f89d
c000fbbe:	c7 05 20 e4 02 c0 e8 f8 00 c0 	mov    DWORD PTR ds:0xc002e420,0xc000f8e8
c000fbc8:	c7 05 2c e4 02 c0 5c fa 00 c0 	mov    DWORD PTR ds:0xc002e42c,0xc000fa5c
c000fbd2:	c7 05 34 e4 02 c0 66 f9 00 c0 	mov    DWORD PTR ds:0xc002e434,0xc000f966
c000fbdc:	c7 05 28 e4 02 c0 c4 f9 00 c0 	mov    DWORD PTR ds:0xc002e428,0xc000f9c4
c000fbe6:	c7 05 30 e4 02 c0 c5 f9 00 c0 	mov    DWORD PTR ds:0xc002e430,0xc000f9c5
c000fbf0:	c7 05 3c e4 02 c0 09 fb 00 c0 	mov    DWORD PTR ds:0xc002e43c,0xc000fb09
c000fbfa:	c3                   	ret    

c000fbfb <kernel_main>:
c000fbfb:	57                   	push   edi
c000fbfc:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc01:	56                   	push   esi
c000fc02:	31 f6                	xor    esi,esi
c000fc04:	53                   	push   ebx
c000fc05:	83 ec 20             	sub    esp,0x20
c000fc08:	e8 93 09 00 00       	call   c00105a0 <installVgaTextImplementation()>
c000fc0d:	e8 79 ff ff ff       	call   c000fb8b <setupTextMode()>
c000fc12:	89 f0                	mov    eax,esi
c000fc14:	89 fa                	mov    edx,edi
c000fc16:	ee                   	out    dx,al
c000fc17:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc1c:	b0 80                	mov    al,0x80
c000fc1e:	89 da                	mov    edx,ebx
c000fc20:	ee                   	out    dx,al
c000fc21:	b1 03                	mov    cl,0x3
c000fc23:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc28:	88 c8                	mov    al,cl
c000fc2a:	ee                   	out    dx,al
c000fc2b:	89 f0                	mov    eax,esi
c000fc2d:	89 fa                	mov    edx,edi
c000fc2f:	ee                   	out    dx,al
c000fc30:	88 c8                	mov    al,cl
c000fc32:	89 da                	mov    edx,ebx
c000fc34:	ee                   	out    dx,al
c000fc35:	b0 c7                	mov    al,0xc7
c000fc37:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc3c:	ee                   	out    dx,al
c000fc3d:	b0 0b                	mov    al,0xb
c000fc3f:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc44:	ee                   	out    dx,al
c000fc45:	83 ec 0c             	sub    esp,0xc
c000fc48:	68 a4 a1 02 c0       	push   0xc002a1a4
c000fc4d:	e8 4b 32 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000fc52:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc57:	05 ff 0f 00 00       	add    eax,0xfff
c000fc5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc61:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc64:	e8 f3 03 00 00       	call   c001005c <Phys::physicalMemorySetup(unsigned int)>
c000fc69:	e8 94 20 00 00       	call   c0011d02 <Virt::virtualMemorySetup()>
c000fc6e:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7d:	75 0e                	jne    c000fc8d <kernel_main+0x92>
c000fc7f:	89 d8                	mov    eax,ebx
c000fc81:	25 48 03 00 00       	and    eax,0x348
c000fc86:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8b:	74 10                	je     c000fc9d <kernel_main+0xa2>
c000fc8d:	83 ec 0c             	sub    esp,0xc
c000fc90:	68 55 ba 02 c0       	push   0xc002ba55
c000fc95:	e8 ef a8 00 00       	call   c001a589 <Krnl::panic(char const*)>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	83 ec 0c             	sub    esp,0xc
c000fca0:	89 1d 80 e3 02 c0    	mov    DWORD PTR ds:0xc002e380,ebx
c000fca6:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcaa:	53                   	push   ebx
c000fcab:	e8 64 22 00 00       	call   c0011f14 <VAS::VAS()>
c000fcb0:	89 1d ec e4 02 c0    	mov    DWORD PTR ds:0xc002e4ec,ebx
c000fcb6:	e8 65 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcbb:	c7 04 24 bb a1 02 c0 	mov    DWORD PTR [esp],0xc002a1bb
c000fcc2:	e8 d6 31 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000fcc7:	e8 b5 20 00 00       	call   c0011d81 <Virt::swappingSetup()>
c000fccc:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd3:	e8 6b fb ff ff       	call   c000f843 <malloc>
c000fcd8:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcdb:	89 c6                	mov    esi,eax
c000fcdd:	e8 58 ea ff ff       	call   c000e73a <Computer::Computer()>
c000fce2:	58                   	pop    eax
c000fce3:	89 35 68 e3 02 c0    	mov    DWORD PTR ds:0xc002e368,esi
c000fce9:	5a                   	pop    edx
c000fcea:	56                   	push   esi
c000fceb:	68 d8 a1 02 c0       	push   0xc002a1d8
c000fcf0:	e8 a8 31 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000fcf5:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c000fcfa:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcfc:	6a 00                	push   0x0
c000fcfe:	6a 00                	push   0x0
c000fd00:	6a 00                	push   0x0
c000fd02:	50                   	push   eax
c000fd03:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd06:	83 c4 14             	add    esp,0x14
c000fd09:	53                   	push   ebx
c000fd0a:	e8 b5 24 00 00       	call   c00121c4 <VAS::~VAS()>
c000fd0f:	c7 04 24 eb a1 02 c0 	mov    DWORD PTR [esp],0xc002a1eb
c000fd16:	e8 6e a8 00 00       	call   c001a589 <Krnl::panic(char const*)>
c000fd1b:	83 c4 30             	add    esp,0x30
c000fd1e:	5b                   	pop    ebx
c000fd1f:	5e                   	pop    esi
c000fd20:	5f                   	pop    edi
c000fd21:	c3                   	ret    

c000fd22 <Phys::allocateDMA(unsigned long)>:
c000fd22:	55                   	push   ebp
c000fd23:	31 d2                	xor    edx,edx
c000fd25:	57                   	push   edi
c000fd26:	31 ed                	xor    ebp,ebp
c000fd28:	56                   	push   esi
c000fd29:	31 c9                	xor    ecx,ecx
c000fd2b:	53                   	push   ebx
c000fd2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd30:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd36:	31 c0                	xor    eax,eax
c000fd38:	c1 ee 0c             	shr    esi,0xc
c000fd3b:	eb 17                	jmp    c000fd54 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3d:	85 c9                	test   ecx,ecx
c000fd3f:	75 04                	jne    c000fd45 <Phys::allocateDMA(unsigned long)+0x23>
c000fd41:	89 d5                	mov    ebp,edx
c000fd43:	89 d0                	mov    eax,edx
c000fd45:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd48:	39 de                	cmp    esi,ebx
c000fd4a:	74 20                	je     c000fd6c <Phys::allocateDMA(unsigned long)+0x4a>
c000fd4c:	42                   	inc    edx
c000fd4d:	89 d9                	mov    ecx,ebx
c000fd4f:	83 fa 2f             	cmp    edx,0x2f
c000fd52:	7f 11                	jg     c000fd65 <Phys::allocateDMA(unsigned long)+0x43>
c000fd54:	80 ba c0 e3 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1c40],0x0
c000fd5b:	74 e0                	je     c000fd3d <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5d:	31 c9                	xor    ecx,ecx
c000fd5f:	42                   	inc    edx
c000fd60:	83 fa 2f             	cmp    edx,0x2f
c000fd63:	7e ef                	jle    c000fd54 <Phys::allocateDMA(unsigned long)+0x32>
c000fd65:	5b                   	pop    ebx
c000fd66:	31 c0                	xor    eax,eax
c000fd68:	5e                   	pop    esi
c000fd69:	5f                   	pop    edi
c000fd6a:	5d                   	pop    ebp
c000fd6b:	c3                   	ret    
c000fd6c:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6f:	89 d7                	mov    edi,edx
c000fd71:	4f                   	dec    edi
c000fd72:	79 03                	jns    c000fd77 <Phys::allocateDMA(unsigned long)+0x55>
c000fd74:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd77:	c1 ff 04             	sar    edi,0x4
c000fd7a:	89 c2                	mov    edx,eax
c000fd7c:	c1 fa 04             	sar    edx,0x4
c000fd7f:	39 fa                	cmp    edx,edi
c000fd81:	75 2f                	jne    c000fdb2 <Phys::allocateDMA(unsigned long)+0x90>
c000fd83:	85 db                	test   ebx,ebx
c000fd85:	74 1a                	je     c000fda1 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd87:	be c0 e3 02 c0       	mov    esi,0xc002e3c0
c000fd8c:	8d 90 c0 e3 02 c0    	lea    edx,[eax-0x3ffd1c40]
c000fd92:	f7 d6                	not    esi
c000fd94:	29 c6                	sub    esi,eax
c000fd96:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd99:	42                   	inc    edx
c000fd9a:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9d:	39 d9                	cmp    ecx,ebx
c000fd9f:	7f f5                	jg     c000fd96 <Phys::allocateDMA(unsigned long)+0x74>
c000fda1:	85 ff                	test   edi,edi
c000fda3:	74 13                	je     c000fdb8 <Phys::allocateDMA(unsigned long)+0x96>
c000fda5:	5b                   	pop    ebx
c000fda6:	05 50 20 0c 00       	add    eax,0xc2050
c000fdab:	5e                   	pop    esi
c000fdac:	c1 e0 0c             	shl    eax,0xc
c000fdaf:	5f                   	pop    edi
c000fdb0:	5d                   	pop    ebp
c000fdb1:	c3                   	ret    
c000fdb2:	89 ea                	mov    edx,ebp
c000fdb4:	31 c9                	xor    ecx,ecx
c000fdb6:	eb a7                	jmp    c000fd5f <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb8:	5b                   	pop    ebx
c000fdb9:	c1 e0 0c             	shl    eax,0xc
c000fdbc:	5e                   	pop    esi
c000fdbd:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdc2:	5f                   	pop    edi
c000fdc3:	5d                   	pop    ebp
c000fdc4:	c3                   	ret    

c000fdc5 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdcd:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd3:	c1 e9 0c             	shr    ecx,0xc
c000fdd6:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fddb:	76 25                	jbe    c000fe02 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fddd:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fde2:	c1 e8 0c             	shr    eax,0xc
c000fde5:	8d 50 10             	lea    edx,[eax+0x10]
c000fde8:	85 c9                	test   ecx,ecx
c000fdea:	74 15                	je     c000fe01 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdec:	8d 82 c0 e3 02 c0    	lea    eax,[edx-0x3ffd1c40]
c000fdf2:	8d 94 11 c0 e3 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1c40]
c000fdf9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdfc:	40                   	inc    eax
c000fdfd:	39 d0                	cmp    eax,edx
c000fdff:	75 f8                	jne    c000fdf9 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe01:	c3                   	ret    
c000fe02:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe08:	c1 ea 0c             	shr    edx,0xc
c000fe0b:	eb db                	jmp    c000fde8 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0d <Phys::setPageState(unsigned long, bool)>:
c000fe0d:	56                   	push   esi
c000fe0e:	ba 01 00 00 00       	mov    edx,0x1
c000fe13:	53                   	push   ebx
c000fe14:	8b 35 88 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d288
c000fe1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe22:	89 c8                	mov    eax,ecx
c000fe24:	83 e1 07             	and    ecx,0x7
c000fe27:	c1 e8 03             	shr    eax,0x3
c000fe2a:	d3 e3                	shl    ebx,cl
c000fe2c:	01 c6                	add    esi,eax
c000fe2e:	d3 e2                	shl    edx,cl
c000fe30:	f7 d2                	not    edx
c000fe32:	20 16                	and    BYTE PTR [esi],dl
c000fe34:	03 05 88 d2 02 c0    	add    eax,DWORD PTR ds:0xc002d288
c000fe3a:	08 18                	or     BYTE PTR [eax],bl
c000fe3c:	5b                   	pop    ebx
c000fe3d:	5e                   	pop    esi
c000fe3e:	c3                   	ret    

c000fe3f <Phys::getPageState(unsigned long)>:
c000fe3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe43:	8b 15 88 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d288
c000fe49:	89 c8                	mov    eax,ecx
c000fe4b:	83 e1 07             	and    ecx,0x7
c000fe4e:	c1 e8 03             	shr    eax,0x3
c000fe51:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe55:	d3 f8                	sar    eax,cl
c000fe57:	83 e0 01             	and    eax,0x1
c000fe5a:	c3                   	ret    

c000fe5b <Phys::freePage(unsigned long)>:
c000fe5b:	53                   	push   ebx
c000fe5c:	83 ec 08             	sub    esp,0x8
c000fe5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe63:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe69:	76 57                	jbe    c000fec2 <Phys::freePage(unsigned long)+0x67>
c000fe6b:	c1 eb 0c             	shr    ebx,0xc
c000fe6e:	53                   	push   ebx
c000fe6f:	e8 cb ff ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000fe74:	5a                   	pop    edx
c000fe75:	84 c0                	test   al,al
c000fe77:	74 5b                	je     c000fed4 <Phys::freePage(unsigned long)+0x79>
c000fe79:	a1 b0 e3 02 c0       	mov    eax,ds:0xc002e3b0
c000fe7e:	48                   	dec    eax
c000fe7f:	a3 b0 e3 02 c0       	mov    ds:0xc002e3b0,eax
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe8a:	c1 e0 02             	shl    eax,0x2
c000fe8d:	99                   	cdq    
c000fe8e:	f7 3d b4 e3 02 c0    	idiv   DWORD PTR ds:0xc002e3b4
c000fe94:	39 05 ac e3 02 c0    	cmp    DWORD PTR ds:0xc002e3ac,eax
c000fe9a:	75 13                	jne    c000feaf <Phys::freePage(unsigned long)+0x54>
c000fe9c:	83 ec 08             	sub    esp,0x8
c000fe9f:	6a 00                	push   0x0
c000fea1:	53                   	push   ebx
c000fea2:	e8 66 ff ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c000fea7:	83 c4 10             	add    esp,0x10
c000feaa:	83 c4 08             	add    esp,0x8
c000fead:	5b                   	pop    ebx
c000feae:	c3                   	ret    
c000feaf:	83 ec 0c             	sub    esp,0xc
c000feb2:	a3 ac e3 02 c0       	mov    ds:0xc002e3ac,eax
c000feb7:	50                   	push   eax
c000feb8:	e8 77 0a 00 00       	call   c0010934 <VgaText::updateRAMUsageDisplay(int)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	eb da                	jmp    c000fe9c <Phys::freePage(unsigned long)+0x41>
c000fec2:	68 00 10 00 00       	push   0x1000
c000fec7:	53                   	push   ebx
c000fec8:	e8 f8 fe ff ff       	call   c000fdc5 <Phys::freeDMA(unsigned long, unsigned long)>
c000fecd:	59                   	pop    ecx
c000fece:	5b                   	pop    ebx
c000fecf:	83 c4 08             	add    esp,0x8
c000fed2:	5b                   	pop    ebx
c000fed3:	c3                   	ret    
c000fed4:	c7 44 24 10 06 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a206
c000fedc:	83 c4 08             	add    esp,0x8
c000fedf:	5b                   	pop    ebx
c000fee0:	e9 a4 a6 00 00       	jmp    c001a589 <Krnl::panic(char const*)>

c000fee5 <Phys::allocatePage()>:
c000fee5:	56                   	push   esi
c000fee6:	53                   	push   ebx
c000fee7:	51                   	push   ecx
c000fee8:	8b 35 a4 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3a4
c000feee:	89 f3                	mov    ebx,esi
c000fef0:	eb 0a                	jmp    c000fefc <Phys::allocatePage()+0x17>
c000fef2:	89 1d a4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a4,ebx
c000fef8:	39 de                	cmp    esi,ebx
c000fefa:	74 24                	je     c000ff20 <Phys::allocatePage()+0x3b>
c000fefc:	53                   	push   ebx
c000fefd:	e8 3d ff ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000ff02:	5a                   	pop    edx
c000ff03:	84 c0                	test   al,al
c000ff05:	74 77                	je     c000ff7e <Phys::allocatePage()+0x99>
c000ff07:	43                   	inc    ebx
c000ff08:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0e:	75 e2                	jne    c000fef2 <Phys::allocatePage()+0xd>
c000ff10:	31 db                	xor    ebx,ebx
c000ff12:	c7 05 a4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3a4,0x0
c000ff1c:	39 de                	cmp    esi,ebx
c000ff1e:	75 dc                	jne    c000fefc <Phys::allocatePage()+0x17>
c000ff20:	83 ec 0c             	sub    esp,0xc
c000ff23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff2b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff31:	e8 a8 2c 00 00       	call   c0012bde <VAS::scanForEviction()>
c000ff36:	83 c4 10             	add    esp,0x10
c000ff39:	85 c0                	test   eax,eax
c000ff3b:	75 76                	jne    c000ffb3 <Phys::allocatePage()+0xce>
c000ff3d:	83 ec 0c             	sub    esp,0xc
c000ff40:	68 1c a2 02 c0       	push   0xc002a21c
c000ff45:	e8 53 2f 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c000ff4a:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff51:	e8 cc fd ff ff       	call   c000fd22 <Phys::allocateDMA(unsigned long)>
c000ff56:	83 c4 10             	add    esp,0x10
c000ff59:	85 c0                	test   eax,eax
c000ff5b:	75 56                	jne    c000ffb3 <Phys::allocatePage()+0xce>
c000ff5d:	83 ec 0c             	sub    esp,0xc
c000ff60:	68 2d a2 02 c0       	push   0xc002a22d
c000ff65:	e8 1f a6 00 00       	call   c001a589 <Krnl::panic(char const*)>
c000ff6a:	83 c4 10             	add    esp,0x10
c000ff6d:	8b 1d a4 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3a4
c000ff73:	53                   	push   ebx
c000ff74:	e8 c6 fe ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000ff79:	5a                   	pop    edx
c000ff7a:	84 c0                	test   al,al
c000ff7c:	75 89                	jne    c000ff07 <Phys::allocatePage()+0x22>
c000ff7e:	6a 01                	push   0x1
c000ff80:	53                   	push   ebx
c000ff81:	e8 87 fe ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c000ff86:	a1 b0 e3 02 c0       	mov    eax,ds:0xc002e3b0
c000ff8b:	59                   	pop    ecx
c000ff8c:	40                   	inc    eax
c000ff8d:	5b                   	pop    ebx
c000ff8e:	a3 b0 e3 02 c0       	mov    ds:0xc002e3b0,eax
c000ff93:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff96:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff99:	c1 e0 02             	shl    eax,0x2
c000ff9c:	99                   	cdq    
c000ff9d:	f7 3d b4 e3 02 c0    	idiv   DWORD PTR ds:0xc002e3b4
c000ffa3:	39 05 ac e3 02 c0    	cmp    DWORD PTR ds:0xc002e3ac,eax
c000ffa9:	75 0c                	jne    c000ffb7 <Phys::allocatePage()+0xd2>
c000ffab:	a1 a4 e3 02 c0       	mov    eax,ds:0xc002e3a4
c000ffb0:	c1 e0 0c             	shl    eax,0xc
c000ffb3:	5a                   	pop    edx
c000ffb4:	5b                   	pop    ebx
c000ffb5:	5e                   	pop    esi
c000ffb6:	c3                   	ret    
c000ffb7:	83 ec 0c             	sub    esp,0xc
c000ffba:	a3 ac e3 02 c0       	mov    ds:0xc002e3ac,eax
c000ffbf:	50                   	push   eax
c000ffc0:	e8 6f 09 00 00       	call   c0010934 <VgaText::updateRAMUsageDisplay(int)>
c000ffc5:	83 c4 10             	add    esp,0x10
c000ffc8:	eb e1                	jmp    c000ffab <Phys::allocatePage()+0xc6>

c000ffca <Phys::allocateContiguousPages(int)>:
c000ffca:	57                   	push   edi
c000ffcb:	56                   	push   esi
c000ffcc:	53                   	push   ebx
c000ffcd:	31 db                	xor    ebx,ebx
c000ffcf:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffd3:	e8 8c dd 00 00       	call   c001dd64 <lockScheduler()>
c000ffd8:	85 db                	test   ebx,ebx
c000ffda:	75 11                	jne    c000ffed <Phys::allocateContiguousPages(int)+0x23>
c000ffdc:	e8 04 ff ff ff       	call   c000fee5 <Phys::allocatePage()>
c000ffe1:	83 ff 01             	cmp    edi,0x1
c000ffe4:	89 c6                	mov    esi,eax
c000ffe6:	74 21                	je     c0010009 <Phys::allocateContiguousPages(int)+0x3f>
c000ffe8:	bb 01 00 00 00       	mov    ebx,0x1
c000ffed:	e8 f3 fe ff ff       	call   c000fee5 <Phys::allocatePage()>
c000fff2:	89 da                	mov    edx,ebx
c000fff4:	c1 e2 0c             	shl    edx,0xc
c000fff7:	01 f2                	add    edx,esi
c000fff9:	39 c2                	cmp    edx,eax
c000fffb:	74 17                	je     c0010014 <Phys::allocateContiguousPages(int)+0x4a>
c000fffd:	bb 01 00 00 00       	mov    ebx,0x1
c0010002:	89 c6                	mov    esi,eax
c0010004:	83 ff 01             	cmp    edi,0x1
c0010007:	75 e4                	jne    c000ffed <Phys::allocateContiguousPages(int)+0x23>
c0010009:	e8 58 dd 00 00       	call   c001dd66 <unlockScheduler()>
c001000e:	89 f0                	mov    eax,esi
c0010010:	5b                   	pop    ebx
c0010011:	5e                   	pop    esi
c0010012:	5f                   	pop    edi
c0010013:	c3                   	ret    
c0010014:	43                   	inc    ebx
c0010015:	39 fb                	cmp    ebx,edi
c0010017:	75 bf                	jne    c000ffd8 <Phys::allocateContiguousPages(int)+0xe>
c0010019:	e8 48 dd 00 00       	call   c001dd66 <unlockScheduler()>
c001001e:	89 f0                	mov    eax,esi
c0010020:	5b                   	pop    ebx
c0010021:	5e                   	pop    esi
c0010022:	5f                   	pop    edi
c0010023:	c3                   	ret    

c0010024 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010024:	56                   	push   esi
c0010025:	53                   	push   ebx
c0010026:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001002a:	39 1d a8 e3 02 c0    	cmp    DWORD PTR ds:0xc002e3a8,ebx
c0010030:	73 06                	jae    c0010038 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010032:	89 1d a8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3a8,ebx
c0010038:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001003c:	c1 eb 0c             	shr    ebx,0xc
c001003f:	c1 e8 0c             	shr    eax,0xc
c0010042:	39 d8                	cmp    eax,ebx
c0010044:	73 13                	jae    c0010059 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010046:	6a 00                	push   0x0
c0010048:	8d 70 01             	lea    esi,[eax+0x1]
c001004b:	50                   	push   eax
c001004c:	e8 bc fd ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c0010051:	5a                   	pop    edx
c0010052:	89 f0                	mov    eax,esi
c0010054:	59                   	pop    ecx
c0010055:	39 f3                	cmp    ebx,esi
c0010057:	75 ed                	jne    c0010046 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010059:	5b                   	pop    ebx
c001005a:	5e                   	pop    esi
c001005b:	c3                   	ret    

c001005c <Phys::physicalMemorySetup(unsigned int)>:
c001005c:	55                   	push   ebp
c001005d:	57                   	push   edi
c001005e:	56                   	push   esi
c001005f:	53                   	push   ebx
c0010060:	31 db                	xor    ebx,ebx
c0010062:	83 ec 40             	sub    esp,0x40
c0010065:	6a 30                	push   0x30
c0010067:	6a 00                	push   0x0
c0010069:	68 c0 e3 02 c0       	push   0xc002e3c0
c001006e:	e8 05 07 ff ff       	call   c0000778 <memset>
c0010073:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010077:	25 00 f0 ff ff       	and    eax,0xfffff000
c001007c:	05 00 10 00 00       	add    eax,0x1000
c0010081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010085:	83 c4 10             	add    esp,0x10
c0010088:	83 ec 08             	sub    esp,0x8
c001008b:	6a 01                	push   0x1
c001008d:	53                   	push   ebx
c001008e:	43                   	inc    ebx
c001008f:	e8 79 fd ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c0010094:	83 c4 10             	add    esp,0x10
c0010097:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001009d:	75 e9                	jne    c0010088 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c001009f:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100a6:	66 85 c0             	test   ax,ax
c00100a9:	0f 84 8e 01 00 00    	je     c001023d <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100af:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100b3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100bf:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100c8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100d0:	eb 15                	jmp    c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100d2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100d6:	83 c3 18             	add    ebx,0x18
c00100d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100dd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100e1:	0f 84 66 01 00 00    	je     c001024d <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100ed:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100f4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100f8:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100fa:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100fd:	01 f0                	add    eax,esi
c00100ff:	55                   	push   ebp
c0010100:	11 fa                	adc    edx,edi
c0010102:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010106:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001010a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001010e:	56                   	push   esi
c001010f:	68 68 a2 02 c0       	push   0xc002a268
c0010114:	e8 84 2d 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0010119:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001011d:	83 c4 10             	add    esp,0x10
c0010120:	09 f8                	or     eax,edi
c0010122:	0f 85 25 01 00 00    	jne    c001024d <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010128:	4d                   	dec    ebp
c0010129:	75 a7                	jne    c00100d2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001012b:	ba 00 00 08 00       	mov    edx,0x80000
c0010130:	89 c1                	mov    ecx,eax
c0010132:	39 f2                	cmp    edx,esi
c0010134:	19 f9                	sbb    ecx,edi
c0010136:	0f 82 a7 00 00 00    	jb     c00101e3 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001013c:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010140:	89 c1                	mov    ecx,eax
c0010142:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010146:	0f 83 97 00 00 00    	jae    c00101e3 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001014c:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010151:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010155:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010159:	39 fa                	cmp    edx,edi
c001015b:	19 e8                	sbb    eax,ebp
c001015d:	0f 82 14 01 00 00    	jb     c0010277 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010163:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010167:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001016b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010171:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010176:	83 d5 ff             	adc    ebp,0xffffffff
c0010179:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001017d:	31 c0                	xor    eax,eax
c001017f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010183:	39 fa                	cmp    edx,edi
c0010185:	89 c1                	mov    ecx,eax
c0010187:	19 e9                	sbb    ecx,ebp
c0010189:	0f 83 43 ff ff ff    	jae    c00100d2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001018f:	be 00 00 08 00       	mov    esi,0x80000
c0010194:	50                   	push   eax
c0010195:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010199:	57                   	push   edi
c001019a:	56                   	push   esi
c001019b:	68 8c a2 02 c0       	push   0xc002a28c
c00101a0:	e8 f8 2c 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00101a5:	5a                   	pop    edx
c00101a6:	59                   	pop    ecx
c00101a7:	57                   	push   edi
c00101a8:	56                   	push   esi
c00101a9:	e8 76 fe ff ff       	call   c0010024 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101ae:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101b6:	83 c4 0c             	add    esp,0xc
c00101b9:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101bd:	03 05 b4 e3 02 c0    	add    eax,DWORD PTR ds:0xc002e3b4
c00101c3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101ca:	a3 b4 e3 02 c0       	mov    ds:0xc002e3b4,eax
c00101cf:	52                   	push   edx
c00101d0:	50                   	push   eax
c00101d1:	68 49 a2 02 c0       	push   0xc002a249
c00101d6:	e8 c2 2c 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00101db:	83 c4 10             	add    esp,0x10
c00101de:	e9 ef fe ff ff       	jmp    c00100d2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101e3:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101ef:	39 ea                	cmp    edx,ebp
c00101f1:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101f5:	0f 82 d7 fe ff ff    	jb     c00100d2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101fb:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010200:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010204:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010208:	0f 83 c4 fe ff ff    	jae    c00100d2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001020e:	39 ee                	cmp    esi,ebp
c0010210:	89 f8                	mov    eax,edi
c0010212:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010216:	0f 83 78 ff ff ff    	jae    c0010194 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001021c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010220:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010224:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010228:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001022c:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010230:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010234:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010238:	e9 57 ff ff ff       	jmp    c0010194 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001023d:	83 ec 0c             	sub    esp,0xc
c0010240:	68 3b a2 02 c0       	push   0xc002a23b
c0010245:	e8 3f a3 00 00       	call   c001a589 <Krnl::panic(char const*)>
c001024a:	83 c4 10             	add    esp,0x10
c001024d:	bb 40 01 00 00       	mov    ebx,0x140
c0010252:	83 ec 08             	sub    esp,0x8
c0010255:	6a 00                	push   0x0
c0010257:	53                   	push   ebx
c0010258:	43                   	inc    ebx
c0010259:	e8 af fb ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c001025e:	ff 05 b4 e3 02 c0    	inc    DWORD PTR ds:0xc002e3b4
c0010264:	83 c4 10             	add    esp,0x10
c0010267:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001026d:	75 e3                	jne    c0010252 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001026f:	83 c4 3c             	add    esp,0x3c
c0010272:	5b                   	pop    ebx
c0010273:	5e                   	pop    esi
c0010274:	5f                   	pop    edi
c0010275:	5d                   	pop    ebp
c0010276:	c3                   	ret    
c0010277:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001027f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010287:	e9 d7 fe ff ff       	jmp    c0010163 <Phys::physicalMemorySetup(unsigned int)+0x107>

c001028c <Pipe::isAtty()>:
c001028c:	31 c0                	xor    eax,eax
c001028e:	c3                   	ret    
c001028f:	90                   	nop

c0010290 <Pipe::~Pipe()>:
c0010290:	83 ec 0c             	sub    esp,0xc
c0010293:	ba f8 a2 02 c0       	mov    edx,0xc002a2f8
c0010298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001029c:	89 10                	mov    DWORD PTR [eax],edx
c001029e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a2:	83 ec 0c             	sub    esp,0xc
c00102a5:	50                   	push   eax
c00102a6:	e8 37 16 00 00       	call   c00118e2 <UnixFile::~UnixFile()>
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	90                   	nop
c00102af:	83 c4 0c             	add    esp,0xc
c00102b2:	c3                   	ret    
c00102b3:	90                   	nop

c00102b4 <Pipe::~Pipe()>:
c00102b4:	83 ec 0c             	sub    esp,0xc
c00102b7:	83 ec 0c             	sub    esp,0xc
c00102ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102be:	e8 cd ff ff ff       	call   c0010290 <Pipe::~Pipe()>
c00102c3:	83 c4 10             	add    esp,0x10
c00102c6:	83 ec 08             	sub    esp,0x8
c00102c9:	6a 20                	push   0x20
c00102cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102cf:	e8 e9 2a 00 00       	call   c0012dbd <operator delete(void*, unsigned long)>
c00102d4:	83 c4 10             	add    esp,0x10
c00102d7:	83 c4 0c             	add    esp,0xc
c00102da:	c3                   	ret    
c00102db:	90                   	nop

c00102dc <Pipe::read(unsigned long long, void*, int*)>:
c00102dc:	55                   	push   ebp
c00102dd:	57                   	push   edi
c00102de:	56                   	push   esi
c00102df:	53                   	push   ebx
c00102e0:	83 ec 1c             	sub    esp,0x1c
c00102e3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102e7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102eb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102ef:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102f2:	89 c8                	mov    eax,ecx
c00102f4:	99                   	cdq    
c00102f5:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102f9:	74 19                	je     c0010314 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102fb:	39 f9                	cmp    ecx,edi
c00102fd:	89 d1                	mov    ecx,edx
c00102ff:	19 f1                	sbb    ecx,esi
c0010301:	73 11                	jae    c0010314 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010303:	e8 5c da 00 00       	call   c001dd64 <lockScheduler()>
c0010308:	e8 93 dd 00 00       	call   c001e0a0 <schedule()>
c001030d:	e8 54 da 00 00       	call   c001dd66 <unlockScheduler()>
c0010312:	eb db                	jmp    c00102ef <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010314:	39 f8                	cmp    eax,edi
c0010316:	89 d1                	mov    ecx,edx
c0010318:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001031c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010320:	19 f1                	sbb    ecx,esi
c0010322:	73 08                	jae    c001032c <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010324:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010328:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001032c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001032f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010332:	29 c6                	sub    esi,eax
c0010334:	89 f1                	mov    ecx,esi
c0010336:	c1 f9 1f             	sar    ecx,0x1f
c0010339:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001033d:	89 ca                	mov    edx,ecx
c001033f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010343:	19 d1                	sbb    ecx,edx
c0010345:	73 04                	jae    c001034b <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010347:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001034b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001034f:	89 fd                	mov    ebp,edi
c0010351:	29 f5                	sub    ebp,esi
c0010353:	85 f6                	test   esi,esi
c0010355:	74 12                	je     c0010369 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010357:	52                   	push   edx
c0010358:	56                   	push   esi
c0010359:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001035c:	50                   	push   eax
c001035d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010361:	e8 de 03 ff ff       	call   c0000744 <memcpy>
c0010366:	83 c4 10             	add    esp,0x10
c0010369:	85 ed                	test   ebp,ebp
c001036b:	74 12                	je     c001037f <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001036d:	50                   	push   eax
c001036e:	55                   	push   ebp
c001036f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010372:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010376:	56                   	push   esi
c0010377:	e8 c8 03 ff ff       	call   c0000744 <memcpy>
c001037c:	83 c4 10             	add    esp,0x10
c001037f:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010382:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010385:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010388:	99                   	cdq    
c0010389:	89 f7                	mov    edi,esi
c001038b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001038f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010393:	c1 ff 1f             	sar    edi,0x1f
c0010396:	57                   	push   edi
c0010397:	56                   	push   esi
c0010398:	52                   	push   edx
c0010399:	50                   	push   eax
c001039a:	e8 9d 66 01 00       	call   c0026a3c <__umoddi3>
c001039f:	83 c4 10             	add    esp,0x10
c00103a2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103a5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103aa:	75 10                	jne    c00103bc <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103ac:	83 ec 0c             	sub    esp,0xc
c00103af:	68 b5 a2 02 c0       	push   0xc002a2b5
c00103b4:	e8 d0 a1 00 00       	call   c001a589 <Krnl::panic(char const*)>
c00103b9:	83 c4 10             	add    esp,0x10
c00103bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103c4:	89 10                	mov    DWORD PTR [eax],edx
c00103c6:	83 c4 1c             	add    esp,0x1c
c00103c9:	31 c0                	xor    eax,eax
c00103cb:	5b                   	pop    ebx
c00103cc:	5e                   	pop    esi
c00103cd:	5f                   	pop    edi
c00103ce:	5d                   	pop    ebp
c00103cf:	c3                   	ret    

c00103d0 <Pipe::write(unsigned long long, void*, int*)>:
c00103d0:	55                   	push   ebp
c00103d1:	57                   	push   edi
c00103d2:	56                   	push   esi
c00103d3:	53                   	push   ebx
c00103d4:	83 ec 1c             	sub    esp,0x1c
c00103d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103db:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00103e6:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103e9:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103ec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103f0:	89 de                	mov    esi,ebx
c00103f2:	89 df                	mov    edi,ebx
c00103f4:	c1 ff 1f             	sar    edi,0x1f
c00103f7:	01 c6                	add    esi,eax
c00103f9:	89 c8                	mov    eax,ecx
c00103fb:	11 d7                	adc    edi,edx
c00103fd:	99                   	cdq    
c00103fe:	39 f1                	cmp    ecx,esi
c0010400:	89 d0                	mov    eax,edx
c0010402:	19 f8                	sbb    eax,edi
c0010404:	b8 01 00 00 00       	mov    eax,0x1
c0010409:	0f 82 80 00 00 00    	jb     c001048f <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001040f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010412:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010415:	01 d8                	add    eax,ebx
c0010417:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001041b:	99                   	cdq    
c001041c:	f7 f9                	idiv   ecx
c001041e:	29 d1                	sub    ecx,edx
c0010420:	89 d7                	mov    edi,edx
c0010422:	89 c8                	mov    eax,ecx
c0010424:	99                   	cdq    
c0010425:	39 ce                	cmp    esi,ecx
c0010427:	19 d3                	sbb    ebx,edx
c0010429:	bb 00 00 00 00       	mov    ebx,0x0
c001042e:	72 04                	jb     c0010434 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010430:	89 f3                	mov    ebx,esi
c0010432:	29 cb                	sub    ebx,ecx
c0010434:	89 f1                	mov    ecx,esi
c0010436:	29 d9                	sub    ecx,ebx
c0010438:	74 1a                	je     c0010454 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001043a:	52                   	push   edx
c001043b:	51                   	push   ecx
c001043c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010440:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010444:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010447:	57                   	push   edi
c0010448:	e8 f7 02 ff ff       	call   c0000744 <memcpy>
c001044d:	83 c4 10             	add    esp,0x10
c0010450:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010454:	85 db                	test   ebx,ebx
c0010456:	74 12                	je     c001046a <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010458:	50                   	push   eax
c0010459:	53                   	push   ebx
c001045a:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001045e:	51                   	push   ecx
c001045f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010462:	e8 dd 02 ff ff       	call   c0000744 <memcpy>
c0010467:	83 c4 10             	add    esp,0x10
c001046a:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001046d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010472:	75 10                	jne    c0010484 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010474:	83 ec 0c             	sub    esp,0xc
c0010477:	68 d1 a2 02 c0       	push   0xc002a2d1
c001047c:	e8 08 a1 00 00       	call   c001a589 <Krnl::panic(char const*)>
c0010481:	83 c4 10             	add    esp,0x10
c0010484:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010488:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001048b:	89 38                	mov    DWORD PTR [eax],edi
c001048d:	31 c0                	xor    eax,eax
c001048f:	83 c4 1c             	add    esp,0x1c
c0010492:	5b                   	pop    ebx
c0010493:	5e                   	pop    esi
c0010494:	5f                   	pop    edi
c0010495:	5d                   	pop    ebp
c0010496:	c3                   	ret    
c0010497:	90                   	nop

c0010498 <Pipe::Pipe(int)>:
c0010498:	83 ec 0c             	sub    esp,0xc
c001049b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001049f:	83 ec 08             	sub    esp,0x8
c00104a2:	6a 00                	push   0x0
c00104a4:	50                   	push   eax
c00104a5:	e8 56 12 00 00       	call   c0011700 <UnixFile::UnixFile(int)>
c00104aa:	83 c4 10             	add    esp,0x10
c00104ad:	ba f8 a2 02 c0       	mov    edx,0xc002a2f8
c00104b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b6:	89 10                	mov    DWORD PTR [eax],edx
c00104b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104c0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104dd:	83 ec 0c             	sub    esp,0xc
c00104e0:	50                   	push   eax
c00104e1:	e8 5d f3 ff ff       	call   c000f843 <malloc>
c00104e6:	83 c4 10             	add    esp,0x10
c00104e9:	89 c2                	mov    edx,eax
c00104eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104fa:	90                   	nop
c00104fb:	83 c4 0c             	add    esp,0xc
c00104fe:	c3                   	ret    
c00104ff:	90                   	nop

c0010500 <VgaText::isAtty()>:
c0010500:	b0 01                	mov    al,0x1
c0010502:	c3                   	ret    
c0010503:	90                   	nop

c0010504 <VgaText::~VgaText()>:
c0010504:	83 ec 0c             	sub    esp,0xc
c0010507:	ba b4 a3 02 c0       	mov    edx,0xc002a3b4
c001050c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010510:	89 10                	mov    DWORD PTR [eax],edx
c0010512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010516:	83 ec 0c             	sub    esp,0xc
c0010519:	50                   	push   eax
c001051a:	e8 c3 13 00 00       	call   c00118e2 <UnixFile::~UnixFile()>
c001051f:	83 c4 10             	add    esp,0x10
c0010522:	90                   	nop
c0010523:	83 c4 0c             	add    esp,0xc
c0010526:	c3                   	ret    
c0010527:	90                   	nop

c0010528 <VgaText::~VgaText()>:
c0010528:	83 ec 0c             	sub    esp,0xc
c001052b:	83 ec 0c             	sub    esp,0xc
c001052e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010532:	e8 cd ff ff ff       	call   c0010504 <VgaText::~VgaText()>
c0010537:	83 c4 10             	add    esp,0x10
c001053a:	83 ec 08             	sub    esp,0x8
c001053d:	68 60 12 00 00       	push   0x1260
c0010542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010546:	e8 72 28 00 00       	call   c0012dbd <operator delete(void*, unsigned long)>
c001054b:	83 c4 10             	add    esp,0x10
c001054e:	83 c4 0c             	add    esp,0xc
c0010551:	c3                   	ret    

c0010552 <VgaText::read(unsigned long long, void*, int*)>:
c0010552:	83 ec 10             	sub    esp,0x10
c0010555:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010559:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001055d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010561:	e8 14 5d 00 00       	call   c001627a <readKeyboard(VgaText*, char*, unsigned long)>
c0010566:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001056a:	89 02                	mov    DWORD PTR [edx],eax
c001056c:	31 c0                	xor    eax,eax
c001056e:	83 c4 1c             	add    esp,0x1c
c0010571:	c3                   	ret    

c0010572 <setTerminalScrollLock(bool)>:
c0010572:	c3                   	ret    

c0010573 <addToTerminalCycle(VgaText*)>:
c0010573:	8b 15 40 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e440
c0010579:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001057d:	85 d2                	test   edx,edx
c001057f:	75 0c                	jne    c001058d <addToTerminalCycle(VgaText*)+0x1a>
c0010581:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010587:	a3 40 e4 02 c0       	mov    ds:0xc002e440,eax
c001058c:	c3                   	ret    
c001058d:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010593:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010599:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001059f:	c3                   	ret    

c00105a0 <installVgaTextImplementation()>:
c00105a0:	83 ec 10             	sub    esp,0x10
c00105a3:	6a 20                	push   0x20
c00105a5:	6a 00                	push   0x0
c00105a7:	68 20 e4 02 c0       	push   0xc002e420
c00105ac:	e8 c7 01 ff ff       	call   c0000778 <memset>
c00105b1:	83 c4 1c             	add    esp,0x1c
c00105b4:	c3                   	ret    

c00105b5 <scrollTerminalScrollLock(int)>:
c00105b5:	c3                   	ret    

c00105b6 <VgaText::load()>:
c00105b6:	53                   	push   ebx
c00105b7:	31 c0                	xor    eax,eax
c00105b9:	83 ec 58             	sub    esp,0x58
c00105bc:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105c0:	89 e2                	mov    edx,esp
c00105c2:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105c6:	40                   	inc    eax
c00105c7:	83 f8 50             	cmp    eax,0x50
c00105ca:	75 f6                	jne    c00105c2 <VgaText::load()+0xc>
c00105cc:	31 c0                	xor    eax,eax
c00105ce:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105d5:	84 c9                	test   cl,cl
c00105d7:	74 06                	je     c00105df <VgaText::load()+0x29>
c00105d9:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105dc:	40                   	inc    eax
c00105dd:	eb ef                	jmp    c00105ce <VgaText::load()+0x18>
c00105df:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105e5:	85 c0                	test   eax,eax
c00105e7:	74 09                	je     c00105f2 <VgaText::load()+0x3c>
c00105e9:	51                   	push   ecx
c00105ea:	51                   	push   ecx
c00105eb:	52                   	push   edx
c00105ec:	53                   	push   ebx
c00105ed:	ff d0                	call   eax
c00105ef:	83 c4 10             	add    esp,0x10
c00105f2:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00105f8:	85 c0                	test   eax,eax
c00105fa:	74 09                	je     c0010605 <VgaText::load()+0x4f>
c00105fc:	83 ec 0c             	sub    esp,0xc
c00105ff:	53                   	push   ebx
c0010600:	ff d0                	call   eax
c0010602:	83 c4 10             	add    esp,0x10
c0010605:	83 c4 58             	add    esp,0x58
c0010608:	5b                   	pop    ebx
c0010609:	c3                   	ret    

c001060a <VgaText::updateCursor()>:
c001060a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001060e:	39 05 44 e4 02 c0    	cmp    DWORD PTR ds:0xc002e444,eax
c0010614:	75 0c                	jne    c0010622 <VgaText::updateCursor()+0x18>
c0010616:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c001061c:	85 c0                	test   eax,eax
c001061e:	74 02                	je     c0010622 <VgaText::updateCursor()+0x18>
c0010620:	ff e0                	jmp    eax
c0010622:	c3                   	ret    
c0010623:	90                   	nop

c0010624 <VgaText::showCursor(bool)>:
c0010624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010628:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001062c:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010632:	c3                   	ret    
c0010633:	90                   	nop

c0010634 <VgaText::disableBlink(bool)>:
c0010634:	56                   	push   esi
c0010635:	53                   	push   ebx
c0010636:	51                   	push   ecx
c0010637:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001063f:	39 1d 44 e4 02 c0    	cmp    DWORD PTR ds:0xc002e444,ebx
c0010645:	75 18                	jne    c001065f <VgaText::disableBlink(bool)+0x2b>
c0010647:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001064d:	85 c0                	test   eax,eax
c001064f:	74 0e                	je     c001065f <VgaText::disableBlink(bool)+0x2b>
c0010651:	89 f1                	mov    ecx,esi
c0010653:	52                   	push   edx
c0010654:	52                   	push   edx
c0010655:	0f b6 d1             	movzx  edx,cl
c0010658:	52                   	push   edx
c0010659:	53                   	push   ebx
c001065a:	ff d0                	call   eax
c001065c:	83 c4 10             	add    esp,0x10
c001065f:	89 f0                	mov    eax,esi
c0010661:	83 f0 01             	xor    eax,0x1
c0010664:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001066a:	58                   	pop    eax
c001066b:	5b                   	pop    ebx
c001066c:	5e                   	pop    esi
c001066d:	c3                   	ret    

c001066e <VgaText::doANSI_SGR(int)>:
c001066e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010676:	85 d2                	test   edx,edx
c0010678:	75 14                	jne    c001068e <VgaText::doANSI_SGR(int)+0x20>
c001067a:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010680:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010686:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001068c:	eb 65                	jmp    c00106f3 <VgaText::doANSI_SGR(int)+0x85>
c001068e:	83 fa 07             	cmp    edx,0x7
c0010691:	75 14                	jne    c00106a7 <VgaText::doANSI_SGR(int)+0x39>
c0010693:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010699:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001069f:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106a5:	eb 4c                	jmp    c00106f3 <VgaText::doANSI_SGR(int)+0x85>
c00106a7:	83 fa 1b             	cmp    edx,0x1b
c00106aa:	74 ce                	je     c001067a <VgaText::doANSI_SGR(int)+0xc>
c00106ac:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106af:	83 f9 07             	cmp    ecx,0x7
c00106b2:	77 09                	ja     c00106bd <VgaText::doANSI_SGR(int)+0x4f>
c00106b4:	8b 14 8d c0 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2d40]
c00106bb:	eb 20                	jmp    c00106dd <VgaText::doANSI_SGR(int)+0x6f>
c00106bd:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106c0:	83 f9 07             	cmp    ecx,0x7
c00106c3:	77 09                	ja     c00106ce <VgaText::doANSI_SGR(int)+0x60>
c00106c5:	8b 14 8d c0 d2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2d40]
c00106cc:	eb 25                	jmp    c00106f3 <VgaText::doANSI_SGR(int)+0x85>
c00106ce:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106d1:	83 f9 07             	cmp    ecx,0x7
c00106d4:	77 0e                	ja     c00106e4 <VgaText::doANSI_SGR(int)+0x76>
c00106d6:	8b 14 95 78 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e88]
c00106dd:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106e3:	c3                   	ret    
c00106e4:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106e7:	83 f9 07             	cmp    ecx,0x7
c00106ea:	77 0d                	ja     c00106f9 <VgaText::doANSI_SGR(int)+0x8b>
c00106ec:	8b 14 95 50 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2eb0]
c00106f3:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106f9:	c3                   	ret    

c00106fa <VgaText::setDefaultBgColour(VgaColour)>:
c00106fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010702:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010708:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001070e:	c3                   	ret    
c001070f:	90                   	nop

c0010710 <VgaText::setDefaultFgColour(VgaColour)>:
c0010710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010714:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010718:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001071e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010724:	c3                   	ret    
c0010725:	90                   	nop

c0010726 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010726:	53                   	push   ebx
c0010727:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001072b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001072f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010733:	51                   	push   ecx
c0010734:	e8 c1 ff ff ff       	call   c00106fa <VgaText::setDefaultBgColour(VgaColour)>
c0010739:	58                   	pop    eax
c001073a:	5a                   	pop    edx
c001073b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001073f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010743:	5b                   	pop    ebx
c0010744:	eb ca                	jmp    c0010710 <VgaText::setDefaultFgColour(VgaColour)>

c0010746 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010746:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001074a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001074f:	83 e0 0f             	and    eax,0xf
c0010752:	c1 e2 04             	shl    edx,0x4
c0010755:	09 d0                	or     eax,edx
c0010757:	c3                   	ret    

c0010758 <VgaText::scrollScreen()>:
c0010758:	57                   	push   edi
c0010759:	56                   	push   esi
c001075a:	be 01 00 00 00       	mov    esi,0x1
c001075f:	53                   	push   ebx
c0010760:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010764:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001076a:	31 ff                	xor    edi,edi
c001076c:	01 d9                	add    ecx,ebx
c001076e:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010771:	83 fe 17             	cmp    esi,0x17
c0010774:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001077a:	75 28                	jne    c00107a4 <VgaText::scrollScreen()+0x4c>
c001077c:	f7 c7 01 00 00 00    	test   edi,0x1
c0010782:	74 1c                	je     c00107a0 <VgaText::scrollScreen()+0x48>
c0010784:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001078b:	50                   	push   eax
c001078c:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010793:	50                   	push   eax
c0010794:	e8 ad ff ff ff       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c0010799:	5a                   	pop    edx
c001079a:	5a                   	pop    edx
c001079b:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001079e:	eb 04                	jmp    c00107a4 <VgaText::scrollScreen()+0x4c>
c00107a0:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107a4:	47                   	inc    edi
c00107a5:	41                   	inc    ecx
c00107a6:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107ac:	75 c0                	jne    c001076e <VgaText::scrollScreen()+0x16>
c00107ae:	46                   	inc    esi
c00107af:	83 fe 18             	cmp    esi,0x18
c00107b2:	75 b0                	jne    c0010764 <VgaText::scrollScreen()+0xc>
c00107b4:	39 1d 44 e4 02 c0    	cmp    DWORD PTR ds:0xc002e444,ebx
c00107ba:	75 24                	jne    c00107e0 <VgaText::scrollScreen()+0x88>
c00107bc:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107c3:	74 08                	je     c00107cd <VgaText::scrollScreen()+0x75>
c00107c5:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107cb:	eb 13                	jmp    c00107e0 <VgaText::scrollScreen()+0x88>
c00107cd:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107d3:	85 c0                	test   eax,eax
c00107d5:	74 09                	je     c00107e0 <VgaText::scrollScreen()+0x88>
c00107d7:	83 ec 0c             	sub    esp,0xc
c00107da:	53                   	push   ebx
c00107db:	ff d0                	call   eax
c00107dd:	83 c4 10             	add    esp,0x10
c00107e0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107e4:	5b                   	pop    ebx
c00107e5:	5e                   	pop    esi
c00107e6:	5f                   	pop    edi
c00107e7:	e9 1e fe ff ff       	jmp    c001060a <VgaText::updateCursor()>

c00107ec <VgaText::combineCharAndColour(char, unsigned char)>:
c00107ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107f1:	c1 e0 08             	shl    eax,0x8
c00107f4:	89 c2                	mov    edx,eax
c00107f6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107fb:	09 d0                	or     eax,edx
c00107fd:	c3                   	ret    

c00107fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107fe:	53                   	push   ebx
c00107ff:	83 ec 08             	sub    esp,0x8
c0010802:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010806:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001080b:	50                   	push   eax
c001080c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010811:	50                   	push   eax
c0010812:	e8 2f ff ff ff       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c0010817:	5a                   	pop    edx
c0010818:	0f b6 c0             	movzx  eax,al
c001081b:	5b                   	pop    ebx
c001081c:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010821:	50                   	push   eax
c0010822:	53                   	push   ebx
c0010823:	e8 c4 ff ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010828:	5a                   	pop    edx
c0010829:	5a                   	pop    edx
c001082a:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010830:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010834:	0f b7 d2             	movzx  edx,dx
c0010837:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001083c:	39 0d 44 e4 02 c0    	cmp    DWORD PTR ds:0xc002e444,ecx
c0010842:	75 14                	jne    c0010858 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010844:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001084a:	85 c0                	test   eax,eax
c001084c:	74 0a                	je     c0010858 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001084e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010852:	83 c4 08             	add    esp,0x8
c0010855:	5b                   	pop    ebx
c0010856:	ff e0                	jmp    eax
c0010858:	83 c4 08             	add    esp,0x8
c001085b:	5b                   	pop    ebx
c001085c:	c3                   	ret    
c001085d:	90                   	nop

c001085e <VgaText::getCursorX()>:
c001085e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010862:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010868:	c3                   	ret    
c0010869:	90                   	nop

c001086a <VgaText::getCursorY()>:
c001086a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001086e:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010874:	c3                   	ret    
c0010875:	90                   	nop

c0010876 <VgaText::setCursor(int, int)>:
c0010876:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001087a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001087e:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010884:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010888:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001088e:	e9 77 fd ff ff       	jmp    c001060a <VgaText::updateCursor()>
c0010893:	90                   	nop

c0010894 <VgaText::setCursorX(int)>:
c0010894:	83 ec 10             	sub    esp,0x10
c0010897:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001089b:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a5:	50                   	push   eax
c00108a6:	e8 cb ff ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c00108ab:	83 c4 1c             	add    esp,0x1c
c00108ae:	c3                   	ret    
c00108af:	90                   	nop

c00108b0 <VgaText::setCursorY(int)>:
c00108b0:	83 ec 10             	sub    esp,0x10
c00108b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108bb:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108c1:	50                   	push   eax
c00108c2:	e8 af ff ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c00108c7:	83 c4 1c             	add    esp,0x1c
c00108ca:	c3                   	ret    
c00108cb:	90                   	nop

c00108cc <VgaText::incrementCursor(bool)>:
c00108cc:	56                   	push   esi
c00108cd:	53                   	push   ebx
c00108ce:	51                   	push   ecx
c00108cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108d7:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108dd:	40                   	inc    eax
c00108de:	83 f8 50             	cmp    eax,0x50
c00108e1:	74 08                	je     c00108eb <VgaText::incrementCursor(bool)+0x1f>
c00108e3:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108e9:	eb 33                	jmp    c001091e <VgaText::incrementCursor(bool)+0x52>
c00108eb:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108f1:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108fb:	8d 50 01             	lea    edx,[eax+0x1]
c00108fe:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010904:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001090a:	75 12                	jne    c001091e <VgaText::incrementCursor(bool)+0x52>
c001090c:	83 ec 0c             	sub    esp,0xc
c001090f:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010915:	53                   	push   ebx
c0010916:	e8 3d fe ff ff       	call   c0010758 <VgaText::scrollScreen()>
c001091b:	83 c4 10             	add    esp,0x10
c001091e:	89 f0                	mov    eax,esi
c0010920:	84 c0                	test   al,al
c0010922:	74 0c                	je     c0010930 <VgaText::incrementCursor(bool)+0x64>
c0010924:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010928:	5a                   	pop    edx
c0010929:	5b                   	pop    ebx
c001092a:	5e                   	pop    esi
c001092b:	e9 da fc ff ff       	jmp    c001060a <VgaText::updateCursor()>
c0010930:	58                   	pop    eax
c0010931:	5b                   	pop    ebx
c0010932:	5e                   	pop    esi
c0010933:	c3                   	ret    

c0010934 <VgaText::updateRAMUsageDisplay(int)>:
c0010934:	56                   	push   esi
c0010935:	8b 35 a0 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d2a0
c001093b:	53                   	push   ebx
c001093c:	bb 0a 00 00 00       	mov    ebx,0xa
c0010941:	6a 0f                	push   0xf
c0010943:	6a 00                	push   0x0
c0010945:	e8 fc fd ff ff       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c001094a:	5a                   	pop    edx
c001094b:	59                   	pop    ecx
c001094c:	0f b6 c8             	movzx  ecx,al
c001094f:	51                   	push   ecx
c0010950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010954:	99                   	cdq    
c0010955:	f7 fb                	idiv   ebx
c0010957:	89 d3                	mov    ebx,edx
c0010959:	83 c0 30             	add    eax,0x30
c001095c:	83 c3 30             	add    ebx,0x30
c001095f:	0f be c0             	movsx  eax,al
c0010962:	0f b6 db             	movzx  ebx,bl
c0010965:	50                   	push   eax
c0010966:	e8 81 fe ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c001096b:	5a                   	pop    edx
c001096c:	5a                   	pop    edx
c001096d:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010974:	51                   	push   ecx
c0010975:	53                   	push   ebx
c0010976:	e8 71 fe ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c001097b:	5b                   	pop    ebx
c001097c:	5a                   	pop    edx
c001097d:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010984:	51                   	push   ecx
c0010985:	6a 25                	push   0x25
c0010987:	e8 60 fe ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c001098c:	59                   	pop    ecx
c001098d:	5b                   	pop    ebx
c001098e:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010995:	5b                   	pop    ebx
c0010996:	5e                   	pop    esi
c0010997:	c3                   	ret    

c0010998 <VgaText::updateDiskUsage()>:
c0010998:	55                   	push   ebp
c0010999:	bd 10 27 00 00       	mov    ebp,0x2710
c001099e:	57                   	push   edi
c001099f:	8b 3d a0 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d2a0
c00109a5:	56                   	push   esi
c00109a6:	53                   	push   ebx
c00109a7:	6a 0f                	push   0xf
c00109a9:	6a 00                	push   0x0
c00109ab:	e8 96 fd ff ff       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c00109b0:	5a                   	pop    edx
c00109b1:	0f b6 d8             	movzx  ebx,al
c00109b4:	59                   	pop    ecx
c00109b5:	8b 35 c8 26 03 c0    	mov    esi,DWORD PTR ds:0xc00326c8
c00109bb:	53                   	push   ebx
c00109bc:	b9 0a 00 00 00       	mov    ecx,0xa
c00109c1:	89 f0                	mov    eax,esi
c00109c3:	99                   	cdq    
c00109c4:	f7 fd                	idiv   ebp
c00109c6:	99                   	cdq    
c00109c7:	f7 f9                	idiv   ecx
c00109c9:	8d 42 30             	lea    eax,[edx+0x30]
c00109cc:	0f b6 c0             	movzx  eax,al
c00109cf:	50                   	push   eax
c00109d0:	e8 17 fe ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c00109d5:	5d                   	pop    ebp
c00109d6:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109db:	5a                   	pop    edx
c00109dc:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109e0:	53                   	push   ebx
c00109e1:	89 f0                	mov    eax,esi
c00109e3:	99                   	cdq    
c00109e4:	f7 fd                	idiv   ebp
c00109e6:	99                   	cdq    
c00109e7:	f7 f9                	idiv   ecx
c00109e9:	8d 42 30             	lea    eax,[edx+0x30]
c00109ec:	0f b6 c0             	movzx  eax,al
c00109ef:	50                   	push   eax
c00109f0:	e8 f7 fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c00109f5:	5d                   	pop    ebp
c00109f6:	bd 64 00 00 00       	mov    ebp,0x64
c00109fb:	5a                   	pop    edx
c00109fc:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a03:	53                   	push   ebx
c0010a04:	89 f0                	mov    eax,esi
c0010a06:	99                   	cdq    
c0010a07:	f7 fd                	idiv   ebp
c0010a09:	99                   	cdq    
c0010a0a:	f7 f9                	idiv   ecx
c0010a0c:	8d 42 30             	lea    eax,[edx+0x30]
c0010a0f:	0f b6 c0             	movzx  eax,al
c0010a12:	50                   	push   eax
c0010a13:	e8 d4 fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010a18:	5d                   	pop    ebp
c0010a19:	5a                   	pop    edx
c0010a1a:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a21:	53                   	push   ebx
c0010a22:	89 f0                	mov    eax,esi
c0010a24:	99                   	cdq    
c0010a25:	f7 f9                	idiv   ecx
c0010a27:	89 d6                	mov    esi,edx
c0010a29:	99                   	cdq    
c0010a2a:	f7 f9                	idiv   ecx
c0010a2c:	8d 42 30             	lea    eax,[edx+0x30]
c0010a2f:	0f b6 c0             	movzx  eax,al
c0010a32:	50                   	push   eax
c0010a33:	e8 b4 fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010a38:	5d                   	pop    ebp
c0010a39:	5a                   	pop    edx
c0010a3a:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a41:	53                   	push   ebx
c0010a42:	8d 46 30             	lea    eax,[esi+0x30]
c0010a45:	0f b6 f0             	movzx  esi,al
c0010a48:	56                   	push   esi
c0010a49:	e8 9e fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010a4e:	5e                   	pop    esi
c0010a4f:	8b 35 c4 26 03 c0    	mov    esi,DWORD PTR ds:0xc00326c4
c0010a55:	5d                   	pop    ebp
c0010a56:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a5d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a62:	53                   	push   ebx
c0010a63:	89 f0                	mov    eax,esi
c0010a65:	99                   	cdq    
c0010a66:	f7 fd                	idiv   ebp
c0010a68:	99                   	cdq    
c0010a69:	f7 f9                	idiv   ecx
c0010a6b:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6e:	0f b6 c0             	movzx  eax,al
c0010a71:	50                   	push   eax
c0010a72:	e8 75 fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010a77:	5a                   	pop    edx
c0010a78:	5d                   	pop    ebp
c0010a79:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a80:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a85:	53                   	push   ebx
c0010a86:	89 f0                	mov    eax,esi
c0010a88:	99                   	cdq    
c0010a89:	f7 fd                	idiv   ebp
c0010a8b:	99                   	cdq    
c0010a8c:	f7 f9                	idiv   ecx
c0010a8e:	8d 42 30             	lea    eax,[edx+0x30]
c0010a91:	0f b6 c0             	movzx  eax,al
c0010a94:	50                   	push   eax
c0010a95:	e8 52 fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010a9a:	5a                   	pop    edx
c0010a9b:	5d                   	pop    ebp
c0010a9c:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aa3:	bd 64 00 00 00       	mov    ebp,0x64
c0010aa8:	53                   	push   ebx
c0010aa9:	89 f0                	mov    eax,esi
c0010aab:	99                   	cdq    
c0010aac:	f7 fd                	idiv   ebp
c0010aae:	99                   	cdq    
c0010aaf:	f7 f9                	idiv   ecx
c0010ab1:	83 c2 30             	add    edx,0x30
c0010ab4:	0f b6 d2             	movzx  edx,dl
c0010ab7:	52                   	push   edx
c0010ab8:	e8 2f fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010abd:	5a                   	pop    edx
c0010abe:	5d                   	pop    ebp
c0010abf:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010ac6:	53                   	push   ebx
c0010ac7:	89 f0                	mov    eax,esi
c0010ac9:	99                   	cdq    
c0010aca:	f7 f9                	idiv   ecx
c0010acc:	89 d6                	mov    esi,edx
c0010ace:	99                   	cdq    
c0010acf:	f7 f9                	idiv   ecx
c0010ad1:	8d 42 30             	lea    eax,[edx+0x30]
c0010ad4:	0f b6 c0             	movzx  eax,al
c0010ad7:	50                   	push   eax
c0010ad8:	e8 0f fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010add:	5a                   	pop    edx
c0010ade:	59                   	pop    ecx
c0010adf:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ae6:	53                   	push   ebx
c0010ae7:	8d 46 30             	lea    eax,[esi+0x30]
c0010aea:	0f b6 f0             	movzx  esi,al
c0010aed:	56                   	push   esi
c0010aee:	e8 f9 fc ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010af3:	5b                   	pop    ebx
c0010af4:	5e                   	pop    esi
c0010af5:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010afc:	5b                   	pop    ebx
c0010afd:	5e                   	pop    esi
c0010afe:	5f                   	pop    edi
c0010aff:	5d                   	pop    ebp
c0010b00:	c3                   	ret    
c0010b01:	90                   	nop

c0010b02 <VgaText::updateTitle()>:
c0010b02:	53                   	push   ebx
c0010b03:	31 c0                	xor    eax,eax
c0010b05:	83 ec 58             	sub    esp,0x58
c0010b08:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b0c:	89 e1                	mov    ecx,esp
c0010b0e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b12:	40                   	inc    eax
c0010b13:	83 f8 50             	cmp    eax,0x50
c0010b16:	75 f6                	jne    c0010b0e <VgaText::updateTitle()+0xc>
c0010b18:	31 c0                	xor    eax,eax
c0010b1a:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b21:	84 db                	test   bl,bl
c0010b23:	74 06                	je     c0010b2b <VgaText::updateTitle()+0x29>
c0010b25:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b28:	40                   	inc    eax
c0010b29:	eb ef                	jmp    c0010b1a <VgaText::updateTitle()+0x18>
c0010b2b:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b31:	85 c0                	test   eax,eax
c0010b33:	74 09                	je     c0010b3e <VgaText::updateTitle()+0x3c>
c0010b35:	53                   	push   ebx
c0010b36:	53                   	push   ebx
c0010b37:	51                   	push   ecx
c0010b38:	52                   	push   edx
c0010b39:	ff d0                	call   eax
c0010b3b:	83 c4 10             	add    esp,0x10
c0010b3e:	e8 55 fe ff ff       	call   c0010998 <VgaText::updateDiskUsage()>
c0010b43:	83 c4 58             	add    esp,0x58
c0010b46:	5b                   	pop    ebx
c0010b47:	c3                   	ret    

c0010b48 <VgaText::setTitleTextColour(VgaColour)>:
c0010b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b50:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b56:	eb aa                	jmp    c0010b02 <VgaText::updateTitle()>

c0010b58 <VgaText::setTitleColour(VgaColour)>:
c0010b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b60:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b66:	eb 9a                	jmp    c0010b02 <VgaText::updateTitle()>

c0010b68 <VgaText::setTitle(char*)>:
c0010b68:	53                   	push   ebx
c0010b69:	83 ec 10             	sub    esp,0x10
c0010b6c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b74:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b7a:	50                   	push   eax
c0010b7b:	e8 b4 fc fe ff       	call   c0000834 <strcpy>
c0010b80:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b84:	83 c4 18             	add    esp,0x18
c0010b87:	5b                   	pop    ebx
c0010b88:	e9 75 ff ff ff       	jmp    c0010b02 <VgaText::updateTitle()>
c0010b8d:	90                   	nop

c0010b8e <VgaText::decrementCursor(bool)>:
c0010b8e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b92:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b96:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010b9c:	85 c0                	test   eax,eax
c0010b9e:	74 07                	je     c0010ba7 <VgaText::decrementCursor(bool)+0x19>
c0010ba0:	48                   	dec    eax
c0010ba1:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010ba7:	84 c9                	test   cl,cl
c0010ba9:	74 09                	je     c0010bb4 <VgaText::decrementCursor(bool)+0x26>
c0010bab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010baf:	e9 56 fa ff ff       	jmp    c001060a <VgaText::updateCursor()>
c0010bb4:	c3                   	ret    
c0010bb5:	90                   	nop

c0010bb6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bb6:	53                   	push   ebx
c0010bb7:	83 ec 08             	sub    esp,0x8
c0010bba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bbe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bc2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bc6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bca:	3c 07                	cmp    al,0x7
c0010bcc:	75 2a                	jne    c0010bf8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bce:	a1 f4 e4 02 c0       	mov    eax,ds:0xc002e4f4
c0010bd3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bdb:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010be3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010beb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bef:	83 c4 08             	add    esp,0x8
c0010bf2:	5b                   	pop    ebx
c0010bf3:	e9 a4 30 00 00       	jmp    c0013c9c <Buzzer::beep(int, int, bool)>
c0010bf8:	3c 0d                	cmp    al,0xd
c0010bfa:	75 0c                	jne    c0010c08 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010bfc:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c06:	eb 3b                	jmp    c0010c43 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c08:	3c 0a                	cmp    al,0xa
c0010c0a:	75 40                	jne    c0010c4c <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c0c:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c12:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c1c:	8d 50 01             	lea    edx,[eax+0x1]
c0010c1f:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c25:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c2b:	75 12                	jne    c0010c3f <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c2d:	83 ec 0c             	sub    esp,0xc
c0010c30:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c36:	53                   	push   ebx
c0010c37:	e8 1c fb ff ff       	call   c0010758 <VgaText::scrollScreen()>
c0010c3c:	83 c4 10             	add    esp,0x10
c0010c3f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c43:	83 c4 08             	add    esp,0x8
c0010c46:	5b                   	pop    ebx
c0010c47:	e9 be f9 ff ff       	jmp    c001060a <VgaText::updateCursor()>
c0010c4c:	3c 08                	cmp    al,0x8
c0010c4e:	75 31                	jne    c0010c81 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c50:	50                   	push   eax
c0010c51:	50                   	push   eax
c0010c52:	6a 01                	push   0x1
c0010c54:	53                   	push   ebx
c0010c55:	e8 34 ff ff ff       	call   c0010b8e <VgaText::decrementCursor(bool)>
c0010c5a:	5a                   	pop    edx
c0010c5b:	59                   	pop    ecx
c0010c5c:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c62:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c68:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c6e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c74:	6a 20                	push   0x20
c0010c76:	53                   	push   ebx
c0010c77:	e8 82 fb ff ff       	call   c00107fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c7c:	83 c4 28             	add    esp,0x28
c0010c7f:	5b                   	pop    ebx
c0010c80:	c3                   	ret    
c0010c81:	83 ec 08             	sub    esp,0x8
c0010c84:	0f be c0             	movsx  eax,al
c0010c87:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c8d:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c93:	51                   	push   ecx
c0010c94:	52                   	push   edx
c0010c95:	50                   	push   eax
c0010c96:	53                   	push   ebx
c0010c97:	e8 62 fb ff ff       	call   c00107fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c9c:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010ca0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010ca8:	83 c4 28             	add    esp,0x28
c0010cab:	5b                   	pop    ebx
c0010cac:	e9 1b fc ff ff       	jmp    c00108cc <VgaText::incrementCursor(bool)>
c0010cb1:	90                   	nop

c0010cb2 <VgaText::isShowingCursor()>:
c0010cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cb6:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cbc:	c3                   	ret    
c0010cbd:	90                   	nop

c0010cbe <VgaText::isBlinkDisabled()>:
c0010cbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cc2:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010cc8:	83 f0 01             	xor    eax,0x1
c0010ccb:	c3                   	ret    

c0010ccc <VgaText::setCursorHeight(int)>:
c0010ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cd4:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010cda:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010ce1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ce5:	e9 3a f9 ff ff       	jmp    c0010624 <VgaText::showCursor(bool)>

c0010cea <VgaText::getCursorHeight()>:
c0010cea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cee:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cf4:	c3                   	ret    

c0010cf5 <setActiveTerminal(VgaText*)>:
c0010cf5:	53                   	push   ebx
c0010cf6:	83 ec 08             	sub    esp,0x8
c0010cf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cfd:	85 db                	test   ebx,ebx
c0010cff:	75 11                	jne    c0010d12 <setActiveTerminal(VgaText*)+0x1d>
c0010d01:	c7 44 24 10 0c a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a30c
c0010d09:	83 c4 08             	add    esp,0x8
c0010d0c:	5b                   	pop    ebx
c0010d0d:	e9 77 98 00 00       	jmp    c001a589 <Krnl::panic(char const*)>
c0010d12:	50                   	push   eax
c0010d13:	50                   	push   eax
c0010d14:	53                   	push   ebx
c0010d15:	68 1a a3 02 c0       	push   0xc002a31a
c0010d1a:	e8 7e 21 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0010d1f:	a1 44 e4 02 c0       	mov    eax,ds:0xc002e444
c0010d24:	83 c4 10             	add    esp,0x10
c0010d27:	85 c0                	test   eax,eax
c0010d29:	74 0c                	je     c0010d37 <setActiveTerminal(VgaText*)+0x42>
c0010d2b:	83 ec 0c             	sub    esp,0xc
c0010d2e:	50                   	push   eax
c0010d2f:	e8 d6 f8 ff ff       	call   c001060a <VgaText::updateCursor()>
c0010d34:	83 c4 10             	add    esp,0x10
c0010d37:	89 1d 44 e4 02 c0    	mov    DWORD PTR ds:0xc002e444,ebx
c0010d3d:	51                   	push   ecx
c0010d3e:	51                   	push   ecx
c0010d3f:	53                   	push   ebx
c0010d40:	68 32 a3 02 c0       	push   0xc002a332
c0010d45:	e8 53 21 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0010d4a:	83 c4 0c             	add    esp,0xc
c0010d4d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d53:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d59:	53                   	push   ebx
c0010d5a:	e8 17 fb ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c0010d5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d62:	e8 57 ff ff ff       	call   c0010cbe <VgaText::isBlinkDisabled()>
c0010d67:	5a                   	pop    edx
c0010d68:	0f b6 c0             	movzx  eax,al
c0010d6b:	59                   	pop    ecx
c0010d6c:	50                   	push   eax
c0010d6d:	53                   	push   ebx
c0010d6e:	e8 c1 f8 ff ff       	call   c0010634 <VgaText::disableBlink(bool)>
c0010d73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d76:	e8 6f ff ff ff       	call   c0010cea <VgaText::getCursorHeight()>
c0010d7b:	5a                   	pop    edx
c0010d7c:	59                   	pop    ecx
c0010d7d:	50                   	push   eax
c0010d7e:	53                   	push   ebx
c0010d7f:	e8 48 ff ff ff       	call   c0010ccc <VgaText::setCursorHeight(int)>
c0010d84:	83 c4 10             	add    esp,0x10
c0010d87:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d8e:	75 0a                	jne    c0010d9a <setActiveTerminal(VgaText*)+0xa5>
c0010d90:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010d9a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d9e:	83 c4 08             	add    esp,0x8
c0010da1:	5b                   	pop    ebx
c0010da2:	e9 0f f8 ff ff       	jmp    c00105b6 <VgaText::load()>

c0010da7 <doTerminalCycle()>:
c0010da7:	83 ec 18             	sub    esp,0x18
c0010daa:	a1 40 e4 02 c0       	mov    eax,ds:0xc002e440
c0010daf:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010db5:	50                   	push   eax
c0010db6:	a3 40 e4 02 c0       	mov    ds:0xc002e440,eax
c0010dbb:	e8 35 ff ff ff       	call   c0010cf5 <setActiveTerminal(VgaText*)>
c0010dc0:	83 c4 1c             	add    esp,0x1c
c0010dc3:	c3                   	ret    

c0010dc4 <VgaText::doUpdate()>:
c0010dc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dc8:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010dce:	85 c0                	test   eax,eax
c0010dd0:	74 02                	je     c0010dd4 <VgaText::doUpdate()+0x10>
c0010dd2:	ff e0                	jmp    eax
c0010dd4:	c3                   	ret    
c0010dd5:	90                   	nop

c0010dd6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dd6:	55                   	push   ebp
c0010dd7:	57                   	push   edi
c0010dd8:	56                   	push   esi
c0010dd9:	53                   	push   ebx
c0010dda:	83 ec 1c             	sub    esp,0x1c
c0010ddd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010de1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010de6:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010ded:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010df0:	50                   	push   eax
c0010df1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010df6:	50                   	push   eax
c0010df7:	e8 4a f9 ff ff       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c0010dfc:	59                   	pop    ecx
c0010dfd:	0f b6 c0             	movzx  eax,al
c0010e00:	5b                   	pop    ebx
c0010e01:	31 c9                	xor    ecx,ecx
c0010e03:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e0b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e0f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e19:	0f b7 db             	movzx  ebx,bx
c0010e1c:	01 db                	add    ebx,ebx
c0010e1e:	01 fb                	add    ebx,edi
c0010e20:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e23:	84 c0                	test   al,al
c0010e25:	0f 84 38 01 00 00    	je     c0010f63 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e2b:	3c 0d                	cmp    al,0xd
c0010e2d:	75 0f                	jne    c0010e3e <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e2f:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e39:	e9 1f 01 00 00       	jmp    c0010f5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e3e:	3c 0a                	cmp    al,0xa
c0010e40:	75 5b                	jne    c0010e9d <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e42:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e48:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e52:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e55:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e5b:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e61:	75 12                	jne    c0010e75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e63:	83 ec 0c             	sub    esp,0xc
c0010e66:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e6c:	55                   	push   ebp
c0010e6d:	e8 e6 f8 ff ff       	call   c0010758 <VgaText::scrollScreen()>
c0010e72:	83 c4 10             	add    esp,0x10
c0010e75:	83 ec 0c             	sub    esp,0xc
c0010e78:	55                   	push   ebp
c0010e79:	e8 8c f7 ff ff       	call   c001060a <VgaText::updateCursor()>
c0010e7e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e86:	83 c4 10             	add    esp,0x10
c0010e89:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e8f:	31 c9                	xor    ecx,ecx
c0010e91:	0f b7 db             	movzx  ebx,bx
c0010e94:	01 db                	add    ebx,ebx
c0010e96:	01 fb                	add    ebx,edi
c0010e98:	e9 c0 00 00 00       	jmp    c0010f5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e9d:	3c 08                	cmp    al,0x8
c0010e9f:	75 4e                	jne    c0010eef <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ea1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ea5:	53                   	push   ebx
c0010ea6:	53                   	push   ebx
c0010ea7:	6a 01                	push   0x1
c0010ea9:	55                   	push   ebp
c0010eaa:	e8 df fc ff ff       	call   c0010b8e <VgaText::decrementCursor(bool)>
c0010eaf:	58                   	pop    eax
c0010eb0:	5a                   	pop    edx
c0010eb1:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eb7:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ebd:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ec3:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ec9:	6a 20                	push   0x20
c0010ecb:	55                   	push   ebp
c0010ecc:	e8 2d f9 ff ff       	call   c00107fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ed1:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ed9:	83 c4 20             	add    esp,0x20
c0010edc:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ee2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ee6:	0f b7 db             	movzx  ebx,bx
c0010ee9:	01 db                	add    ebx,ebx
c0010eeb:	01 fb                	add    ebx,edi
c0010eed:	eb 6e                	jmp    c0010f5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010eef:	51                   	push   ecx
c0010ef0:	51                   	push   ecx
c0010ef1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ef5:	50                   	push   eax
c0010ef6:	e8 f1 f8 ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010efb:	83 c4 10             	add    esp,0x10
c0010efe:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f01:	39 2d 44 e4 02 c0    	cmp    DWORD PTR ds:0xc002e444,ebp
c0010f07:	75 2a                	jne    c0010f33 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f09:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f0f:	85 c0                	test   eax,eax
c0010f11:	74 20                	je     c0010f33 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f13:	52                   	push   edx
c0010f14:	52                   	push   edx
c0010f15:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f1b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f29:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f2c:	51                   	push   ecx
c0010f2d:	55                   	push   ebp
c0010f2e:	ff d0                	call   eax
c0010f30:	83 c4 20             	add    esp,0x20
c0010f33:	83 c3 02             	add    ebx,0x2
c0010f36:	50                   	push   eax
c0010f37:	50                   	push   eax
c0010f38:	6a 00                	push   0x0
c0010f3a:	55                   	push   ebp
c0010f3b:	e8 8c f9 ff ff       	call   c00108cc <VgaText::incrementCursor(bool)>
c0010f40:	83 c4 10             	add    esp,0x10
c0010f43:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f4a:	75 0f                	jne    c0010f5b <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f4c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f54:	0f b7 db             	movzx  ebx,bx
c0010f57:	01 db                	add    ebx,ebx
c0010f59:	01 fb                	add    ebx,edi
c0010f5b:	b1 01                	mov    cl,0x1
c0010f5d:	46                   	inc    esi
c0010f5e:	e9 bd fe ff ff       	jmp    c0010e20 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f63:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f67:	83 ec 0c             	sub    esp,0xc
c0010f6a:	55                   	push   ebp
c0010f6b:	e8 9a f6 ff ff       	call   c001060a <VgaText::updateCursor()>
c0010f70:	83 c4 10             	add    esp,0x10
c0010f73:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f77:	84 c9                	test   cl,cl
c0010f79:	74 0c                	je     c0010f87 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f7b:	83 ec 0c             	sub    esp,0xc
c0010f7e:	55                   	push   ebp
c0010f7f:	e8 40 fe ff ff       	call   c0010dc4 <VgaText::doUpdate()>
c0010f84:	83 c4 10             	add    esp,0x10
c0010f87:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f8e:	83 c4 1c             	add    esp,0x1c
c0010f91:	5b                   	pop    ebx
c0010f92:	5e                   	pop    esi
c0010f93:	5f                   	pop    edi
c0010f94:	5d                   	pop    ebp
c0010f95:	c3                   	ret    

c0010f96 <VgaText::clearScreen()>:
c0010f96:	57                   	push   edi
c0010f97:	56                   	push   esi
c0010f98:	31 f6                	xor    esi,esi
c0010f9a:	53                   	push   ebx
c0010f9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f9f:	52                   	push   edx
c0010fa0:	6a 00                	push   0x0
c0010fa2:	6a 00                	push   0x0
c0010fa4:	53                   	push   ebx
c0010fa5:	e8 cc f8 ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c0010faa:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fb1:	83 c4 10             	add    esp,0x10
c0010fb4:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010fba:	7e 26                	jle    c0010fe2 <VgaText::clearScreen()+0x4c>
c0010fbc:	31 ff                	xor    edi,edi
c0010fbe:	50                   	push   eax
c0010fbf:	50                   	push   eax
c0010fc0:	56                   	push   esi
c0010fc1:	57                   	push   edi
c0010fc2:	47                   	inc    edi
c0010fc3:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fc9:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fcf:	6a 20                	push   0x20
c0010fd1:	53                   	push   ebx
c0010fd2:	e8 27 f8 ff ff       	call   c00107fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fd7:	83 c4 20             	add    esp,0x20
c0010fda:	83 ff 50             	cmp    edi,0x50
c0010fdd:	75 df                	jne    c0010fbe <VgaText::clearScreen()+0x28>
c0010fdf:	46                   	inc    esi
c0010fe0:	eb d2                	jmp    c0010fb4 <VgaText::clearScreen()+0x1e>
c0010fe2:	83 ec 0c             	sub    esp,0xc
c0010fe5:	53                   	push   ebx
c0010fe6:	e8 d9 fd ff ff       	call   c0010dc4 <VgaText::doUpdate()>
c0010feb:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010ff2:	83 c4 10             	add    esp,0x10
c0010ff5:	5b                   	pop    ebx
c0010ff6:	5e                   	pop    esi
c0010ff7:	5f                   	pop    edi
c0010ff8:	c3                   	ret    
c0010ff9:	90                   	nop

c0010ffa <VgaText::putchar(char)>:
c0010ffa:	56                   	push   esi
c0010ffb:	53                   	push   ebx
c0010ffc:	83 ec 14             	sub    esp,0x14
c0010fff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011003:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011007:	3c 5b                	cmp    al,0x5b
c0011009:	75 21                	jne    c001102c <VgaText::putchar(char)+0x32>
c001100b:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0011012:	74 28                	je     c001103c <VgaText::putchar(char)+0x42>
c0011014:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c001101d:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011027:	e9 e2 00 00 00       	jmp    c001110e <VgaText::putchar(char)+0x114>
c001102c:	3c 1b                	cmp    al,0x1b
c001102e:	75 0c                	jne    c001103c <VgaText::putchar(char)+0x42>
c0011030:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011037:	e9 d2 00 00 00       	jmp    c001110e <VgaText::putchar(char)+0x114>
c001103c:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011042:	84 c9                	test   cl,cl
c0011044:	0f 84 ab 00 00 00    	je     c00110f5 <VgaText::putchar(char)+0xfb>
c001104a:	8d 50 c0             	lea    edx,[eax-0x40]
c001104d:	80 fa 3e             	cmp    dl,0x3e
c0011050:	0f 87 82 00 00 00    	ja     c00110d8 <VgaText::putchar(char)+0xde>
c0011056:	3c 6d                	cmp    al,0x6d
c0011058:	75 4d                	jne    c00110a7 <VgaText::putchar(char)+0xad>
c001105a:	31 f6                	xor    esi,esi
c001105c:	31 d2                	xor    edx,edx
c001105e:	31 c0                	xor    eax,eax
c0011060:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0011066:	7e 30                	jle    c0011098 <VgaText::putchar(char)+0x9e>
c0011068:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011070:	80 fa 3b             	cmp    dl,0x3b
c0011073:	75 17                	jne    c001108c <VgaText::putchar(char)+0x92>
c0011075:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011079:	50                   	push   eax
c001107a:	53                   	push   ebx
c001107b:	e8 ee f5 ff ff       	call   c001066e <VgaText::doANSI_SGR(int)>
c0011080:	59                   	pop    ecx
c0011081:	31 d2                	xor    edx,edx
c0011083:	58                   	pop    eax
c0011084:	31 c0                	xor    eax,eax
c0011086:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001108a:	eb 09                	jmp    c0011095 <VgaText::putchar(char)+0x9b>
c001108c:	6b c0 0a             	imul   eax,eax,0xa
c001108f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011093:	88 ca                	mov    dl,cl
c0011095:	46                   	inc    esi
c0011096:	eb c8                	jmp    c0011060 <VgaText::putchar(char)+0x66>
c0011098:	84 d2                	test   dl,dl
c001109a:	74 31                	je     c00110cd <VgaText::putchar(char)+0xd3>
c001109c:	50                   	push   eax
c001109d:	53                   	push   ebx
c001109e:	e8 cb f5 ff ff       	call   c001066e <VgaText::doANSI_SGR(int)>
c00110a3:	58                   	pop    eax
c00110a4:	5a                   	pop    edx
c00110a5:	eb 26                	jmp    c00110cd <VgaText::putchar(char)+0xd3>
c00110a7:	3c 4a                	cmp    al,0x4a
c00110a9:	75 22                	jne    c00110cd <VgaText::putchar(char)+0xd3>
c00110ab:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110b2:	75 19                	jne    c00110cd <VgaText::putchar(char)+0xd3>
c00110b4:	83 ec 0c             	sub    esp,0xc
c00110b7:	53                   	push   ebx
c00110b8:	e8 d9 fe ff ff       	call   c0010f96 <VgaText::clearScreen()>
c00110bd:	83 c4 0c             	add    esp,0xc
c00110c0:	6a 00                	push   0x0
c00110c2:	6a 00                	push   0x0
c00110c4:	53                   	push   ebx
c00110c5:	e8 ac f7 ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c00110ca:	83 c4 10             	add    esp,0x10
c00110cd:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110d6:	eb 36                	jmp    c001110e <VgaText::putchar(char)+0x114>
c00110d8:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110de:	83 fa 0e             	cmp    edx,0xe
c00110e1:	7f 2b                	jg     c001110e <VgaText::putchar(char)+0x114>
c00110e3:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110e6:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110ec:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110f3:	eb 19                	jmp    c001110e <VgaText::putchar(char)+0x114>
c00110f5:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110fb:	0f be c0             	movsx  eax,al
c00110fe:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011104:	50                   	push   eax
c0011105:	53                   	push   ebx
c0011106:	e8 ab fa ff ff       	call   c0010bb6 <VgaText::putchar(char, VgaColour, VgaColour)>
c001110b:	83 c4 10             	add    esp,0x10
c001110e:	83 c4 14             	add    esp,0x14
c0011111:	5b                   	pop    ebx
c0011112:	5e                   	pop    esi
c0011113:	c3                   	ret    

c0011114 <VgaText::puts(char const*)>:
c0011114:	53                   	push   ebx
c0011115:	83 ec 08             	sub    esp,0x8
c0011118:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001111c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001111f:	84 c0                	test   al,al
c0011121:	74 12                	je     c0011135 <VgaText::puts(char const*)+0x21>
c0011123:	43                   	inc    ebx
c0011124:	51                   	push   ecx
c0011125:	51                   	push   ecx
c0011126:	50                   	push   eax
c0011127:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001112b:	e8 ca fe ff ff       	call   c0010ffa <VgaText::putchar(char)>
c0011130:	83 c4 10             	add    esp,0x10
c0011133:	eb e7                	jmp    c001111c <VgaText::puts(char const*)+0x8>
c0011135:	83 c4 08             	add    esp,0x8
c0011138:	5b                   	pop    ebx
c0011139:	c3                   	ret    

c001113a <VgaText::putx(unsigned int)>:
c001113a:	57                   	push   edi
c001113b:	b9 11 00 00 00       	mov    ecx,0x11
c0011140:	56                   	push   esi
c0011141:	be 4e a3 02 c0       	mov    esi,0xc002a34e
c0011146:	53                   	push   ebx
c0011147:	83 ec 20             	sub    esp,0x20
c001114a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001114e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011152:	fc                   	cld    
c0011153:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011155:	be 08 00 00 00       	mov    esi,0x8
c001115a:	50                   	push   eax
c001115b:	50                   	push   eax
c001115c:	89 d8                	mov    eax,ebx
c001115e:	c1 e3 04             	shl    ebx,0x4
c0011161:	c1 e8 1c             	shr    eax,0x1c
c0011164:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011169:	50                   	push   eax
c001116a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001116e:	e8 87 fe ff ff       	call   c0010ffa <VgaText::putchar(char)>
c0011173:	83 c4 10             	add    esp,0x10
c0011176:	4e                   	dec    esi
c0011177:	75 e1                	jne    c001115a <VgaText::putx(unsigned int)+0x20>
c0011179:	83 c4 20             	add    esp,0x20
c001117c:	5b                   	pop    ebx
c001117d:	5e                   	pop    esi
c001117e:	5f                   	pop    edi
c001117f:	c3                   	ret    

c0011180 <VgaText::VgaText(char const*)>:
c0011180:	57                   	push   edi
c0011181:	56                   	push   esi
c0011182:	53                   	push   ebx
c0011183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011187:	83 ec 08             	sub    esp,0x8
c001118a:	6a 00                	push   0x0
c001118c:	50                   	push   eax
c001118d:	e8 6e 05 00 00       	call   c0011700 <UnixFile::UnixFile(int)>
c0011192:	83 c4 10             	add    esp,0x10
c0011195:	ba b4 a3 02 c0       	mov    edx,0xc002a3b4
c001119a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119e:	89 10                	mov    DWORD PTR [eax],edx
c00111a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a4:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b2:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c0:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111cb:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d6:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e4:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f2:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00111f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fd:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011208:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001120e:	bb 20 e4 02 c0       	mov    ebx,0xc002e420
c0011213:	b8 08 00 00 00       	mov    eax,0x8
c0011218:	fc                   	cld    
c0011219:	89 d7                	mov    edi,edx
c001121b:	89 de                	mov    esi,ebx
c001121d:	89 c1                	mov    ecx,eax
c001121f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011225:	05 1e 10 00 00       	add    eax,0x101e
c001122a:	83 ec 08             	sub    esp,0x8
c001122d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011231:	50                   	push   eax
c0011232:	e8 fd f5 fe ff       	call   c0000834 <strcpy>
c0011237:	83 c4 10             	add    esp,0x10
c001123a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123e:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001124c:	83 c0 0c             	add    eax,0xc
c001124f:	83 ec 04             	sub    esp,0x4
c0011252:	68 00 0f 00 00       	push   0xf00
c0011257:	6a 00                	push   0x0
c0011259:	50                   	push   eax
c001125a:	e8 19 f5 fe ff       	call   c0000778 <memset>
c001125f:	83 c4 10             	add    esp,0x10
c0011262:	83 ec 04             	sub    esp,0x4
c0011265:	6a 00                	push   0x0
c0011267:	6a 07                	push   0x7
c0011269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001126d:	e8 b4 f4 ff ff       	call   c0010726 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011272:	83 c4 10             	add    esp,0x10
c0011275:	83 ec 08             	sub    esp,0x8
c0011278:	6a 02                	push   0x2
c001127a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001127e:	e8 49 fa ff ff       	call   c0010ccc <VgaText::setCursorHeight(int)>
c0011283:	83 c4 10             	add    esp,0x10
c0011286:	83 ec 04             	sub    esp,0x4
c0011289:	6a 00                	push   0x0
c001128b:	6a 00                	push   0x0
c001128d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011291:	e8 e0 f5 ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c0011296:	83 c4 10             	add    esp,0x10
c0011299:	83 ec 08             	sub    esp,0x8
c001129c:	6a 01                	push   0x1
c001129e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a2:	e8 7d f3 ff ff       	call   c0010624 <VgaText::showCursor(bool)>
c00112a7:	83 c4 10             	add    esp,0x10
c00112aa:	83 ec 08             	sub    esp,0x8
c00112ad:	6a 01                	push   0x1
c00112af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112b3:	e8 7c f3 ff ff       	call   c0010634 <VgaText::disableBlink(bool)>
c00112b8:	83 c4 10             	add    esp,0x10
c00112bb:	83 ec 0c             	sub    esp,0xc
c00112be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c2:	e8 cf fc ff ff       	call   c0010f96 <VgaText::clearScreen()>
c00112c7:	83 c4 10             	add    esp,0x10
c00112ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ce:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d9:	05 9e 10 00 00       	add    eax,0x109e
c00112de:	83 ec 04             	sub    esp,0x4
c00112e1:	68 96 00 00 00       	push   0x96
c00112e6:	6a 00                	push   0x0
c00112e8:	50                   	push   eax
c00112e9:	e8 8a f4 fe ff       	call   c0000778 <memset>
c00112ee:	83 c4 10             	add    esp,0x10
c00112f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112f5:	05 34 11 00 00       	add    eax,0x1134
c00112fa:	83 ec 04             	sub    esp,0x4
c00112fd:	68 2c 01 00 00       	push   0x12c
c0011302:	6a 00                	push   0x0
c0011304:	50                   	push   eax
c0011305:	e8 6e f4 fe ff       	call   c0000778 <memset>
c001130a:	83 c4 10             	add    esp,0x10
c001130d:	90                   	nop
c001130e:	5b                   	pop    ebx
c001130f:	5e                   	pop    esi
c0011310:	5f                   	pop    edi
c0011311:	c3                   	ret    

c0011312 <VgaText::receiveKey(unsigned char)>:
c0011312:	55                   	push   ebp
c0011313:	57                   	push   edi
c0011314:	56                   	push   esi
c0011315:	53                   	push   ebx
c0011316:	83 ec 1c             	sub    esp,0x1c
c0011319:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001131d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011321:	84 db                	test   bl,bl
c0011323:	0f 84 c9 00 00 00    	je     c00113f2 <VgaText::receiveKey(unsigned char)+0xe0>
c0011329:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001132f:	80 fb 08             	cmp    bl,0x8
c0011332:	75 2c                	jne    c0011360 <VgaText::receiveKey(unsigned char)+0x4e>
c0011334:	83 ec 0c             	sub    esp,0xc
c0011337:	57                   	push   edi
c0011338:	e8 57 f4 fe ff       	call   c0000794 <strlen>
c001133d:	83 c4 10             	add    esp,0x10
c0011340:	85 c0                	test   eax,eax
c0011342:	74 41                	je     c0011385 <VgaText::receiveKey(unsigned char)+0x73>
c0011344:	50                   	push   eax
c0011345:	50                   	push   eax
c0011346:	6a 08                	push   0x8
c0011348:	56                   	push   esi
c0011349:	e8 ac fc ff ff       	call   c0010ffa <VgaText::putchar(char)>
c001134e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011351:	e8 3e f4 fe ff       	call   c0000794 <strlen>
c0011356:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001135e:	eb 22                	jmp    c0011382 <VgaText::receiveKey(unsigned char)+0x70>
c0011360:	0f be c3             	movsx  eax,bl
c0011363:	52                   	push   edx
c0011364:	52                   	push   edx
c0011365:	50                   	push   eax
c0011366:	56                   	push   esi
c0011367:	e8 8e fc ff ff       	call   c0010ffa <VgaText::putchar(char)>
c001136c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011370:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011375:	59                   	pop    ecx
c0011376:	5d                   	pop    ebp
c0011377:	8d 44 24 16          	lea    eax,[esp+0x16]
c001137b:	50                   	push   eax
c001137c:	57                   	push   edi
c001137d:	e8 f2 f5 fe ff       	call   c0000974 <strcat>
c0011382:	83 c4 10             	add    esp,0x10
c0011385:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001138c:	75 05                	jne    c0011393 <VgaText::receiveKey(unsigned char)+0x81>
c001138e:	80 fb 0a             	cmp    bl,0xa
c0011391:	75 53                	jne    c00113e6 <VgaText::receiveKey(unsigned char)+0xd4>
c0011393:	83 ec 0c             	sub    esp,0xc
c0011396:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001139c:	53                   	push   ebx
c001139d:	e8 f2 f3 fe ff       	call   c0000794 <strlen>
c00113a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113a5:	89 c5                	mov    ebp,eax
c00113a7:	e8 e8 f3 fe ff       	call   c0000794 <strlen>
c00113ac:	83 c4 10             	add    esp,0x10
c00113af:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113b3:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113b8:	76 10                	jbe    c00113ca <VgaText::receiveKey(unsigned char)+0xb8>
c00113ba:	83 ec 0c             	sub    esp,0xc
c00113bd:	68 5f a3 02 c0       	push   0xc002a35f
c00113c2:	e8 c2 91 00 00       	call   c001a589 <Krnl::panic(char const*)>
c00113c7:	83 c4 10             	add    esp,0x10
c00113ca:	50                   	push   eax
c00113cb:	50                   	push   eax
c00113cc:	57                   	push   edi
c00113cd:	53                   	push   ebx
c00113ce:	e8 a1 f5 fe ff       	call   c0000974 <strcat>
c00113d3:	83 c4 0c             	add    esp,0xc
c00113d6:	68 96 00 00 00       	push   0x96
c00113db:	6a 00                	push   0x0
c00113dd:	57                   	push   edi
c00113de:	e8 95 f3 fe ff       	call   c0000778 <memset>
c00113e3:	83 c4 10             	add    esp,0x10
c00113e6:	83 ec 0c             	sub    esp,0xc
c00113e9:	56                   	push   esi
c00113ea:	e8 d5 f9 ff ff       	call   c0010dc4 <VgaText::doUpdate()>
c00113ef:	83 c4 10             	add    esp,0x10
c00113f2:	83 c4 1c             	add    esp,0x1c
c00113f5:	5b                   	pop    ebx
c00113f6:	5e                   	pop    esi
c00113f7:	5f                   	pop    edi
c00113f8:	5d                   	pop    ebp
c00113f9:	c3                   	ret    

c00113fa <VgaText::write(unsigned long long, void*, int*)>:
c00113fa:	55                   	push   ebp
c00113fb:	57                   	push   edi
c00113fc:	56                   	push   esi
c00113fd:	53                   	push   ebx
c00113fe:	83 ec 0c             	sub    esp,0xc
c0011401:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011405:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011409:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001140d:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011414:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011417:	39 eb                	cmp    ebx,ebp
c0011419:	74 13                	je     c001142e <VgaText::write(unsigned long long, void*, int*)+0x34>
c001141b:	43                   	inc    ebx
c001141c:	50                   	push   eax
c001141d:	50                   	push   eax
c001141e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011422:	50                   	push   eax
c0011423:	56                   	push   esi
c0011424:	e8 d1 fb ff ff       	call   c0010ffa <VgaText::putchar(char)>
c0011429:	83 c4 10             	add    esp,0x10
c001142c:	eb e9                	jmp    c0011417 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001142e:	83 ec 0c             	sub    esp,0xc
c0011431:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011438:	56                   	push   esi
c0011439:	e8 86 f9 ff ff       	call   c0010dc4 <VgaText::doUpdate()>
c001143e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011442:	89 38                	mov    DWORD PTR [eax],edi
c0011444:	83 c4 1c             	add    esp,0x1c
c0011447:	31 c0                	xor    eax,eax
c0011449:	5b                   	pop    ebx
c001144a:	5e                   	pop    esi
c001144b:	5f                   	pop    edi
c001144c:	5d                   	pop    ebp
c001144d:	c3                   	ret    

c001144e <newTerminal(char*)>:
c001144e:	83 ec 28             	sub    esp,0x28
c0011451:	68 60 12 00 00       	push   0x1260
c0011456:	e8 e8 e3 ff ff       	call   c000f843 <malloc>
c001145b:	5a                   	pop    edx
c001145c:	59                   	pop    ecx
c001145d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011461:	50                   	push   eax
c0011462:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011466:	e8 15 fd ff ff       	call   c0011180 <VgaText::VgaText(char const*)>
c001146b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001146f:	83 c4 2c             	add    esp,0x2c
c0011472:	c3                   	ret    
c0011473:	90                   	nop

c0011474 <TSS::TSS()>:
c0011474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011478:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001147f:	90                   	nop
c0011480:	c3                   	ret    
c0011481:	90                   	nop

c0011482 <TSS::setESP(unsigned long)>:
c0011482:	55                   	push   ebp
c0011483:	89 e5                	mov    ebp,esp
c0011485:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011488:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001148b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001148e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011491:	90                   	nop
c0011492:	5d                   	pop    ebp
c0011493:	c3                   	ret    

c0011494 <TSS::flush()>:
c0011494:	55                   	push   ebp
c0011495:	89 e5                	mov    ebp,esp
c0011497:	83 ec 10             	sub    esp,0x10
c001149a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001149d:	8b 00                	mov    eax,DWORD PTR [eax]
c001149f:	83 c8 03             	or     eax,0x3
c00114a2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114a6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114aa:	66 89 d0             	mov    ax,dx
c00114ad:	0f 00 d8             	ltr    ax
c00114b0:	90                   	nop
c00114b1:	c9                   	leave  
c00114b2:	c3                   	ret    
c00114b3:	90                   	nop

c00114b4 <TSS::setup(unsigned long, unsigned long)>:
c00114b4:	55                   	push   ebp
c00114b5:	89 e5                	mov    ebp,esp
c00114b7:	83 ec 18             	sub    esp,0x18
c00114ba:	83 ec 0c             	sub    esp,0xc
c00114bd:	6a 68                	push   0x68
c00114bf:	e8 7f e3 ff ff       	call   c000f843 <malloc>
c00114c4:	83 c4 10             	add    esp,0x10
c00114c7:	89 c2                	mov    edx,eax
c00114c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114cc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d5:	83 ec 04             	sub    esp,0x4
c00114d8:	6a 68                	push   0x68
c00114da:	6a 00                	push   0x0
c00114dc:	50                   	push   eax
c00114dd:	e8 96 f2 fe ff       	call   c0000778 <memset>
c00114e2:	83 c4 10             	add    esp,0x10
c00114e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114eb:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00114fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011500:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011503:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011506:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011518:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011524:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011527:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001152d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011533:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011557:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001155a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001155d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011563:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011566:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011579:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157c:	0f 20 da             	mov    edx,cr3
c001157f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011582:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011585:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158e:	83 ec 08             	sub    esp,0x8
c0011591:	50                   	push   eax
c0011592:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011595:	50                   	push   eax
c0011596:	e8 83 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c001159b:	83 c4 10             	add    esp,0x10
c001159e:	83 ec 08             	sub    esp,0x8
c00115a1:	6a 68                	push   0x68
c00115a3:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115a6:	50                   	push   eax
c00115a7:	e8 8e da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115ac:	83 c4 10             	add    esp,0x10
c00115af:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115b3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115b6:	83 e0 0f             	and    eax,0xf
c00115b9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115bc:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115bf:	83 c8 40             	or     eax,0x40
c00115c2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115c5:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00115ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115d0:	05 78 01 00 00       	add    eax,0x178
c00115d5:	83 ec 04             	sub    esp,0x4
c00115d8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115db:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115de:	50                   	push   eax
c00115df:	e8 8a da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c00115e4:	83 c4 10             	add    esp,0x10
c00115e7:	89 c2                	mov    edx,eax
c00115e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ec:	89 10                	mov    DWORD PTR [eax],edx
c00115ee:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00115f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115f9:	05 78 01 00 00       	add    eax,0x178
c00115fe:	83 ec 0c             	sub    esp,0xc
c0011601:	50                   	push   eax
c0011602:	e8 ab da ff ff       	call   c000f0b2 <GDT::flush()>
c0011607:	83 c4 10             	add    esp,0x10
c001160a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001160d:	8b 00                	mov    eax,DWORD PTR [eax]
c001160f:	83 ec 08             	sub    esp,0x8
c0011612:	50                   	push   eax
c0011613:	68 c8 a3 02 c0       	push   0xc002a3c8
c0011618:	e8 80 18 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001161d:	83 c4 10             	add    esp,0x10
c0011620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011623:	8b 00                	mov    eax,DWORD PTR [eax]
c0011625:	c9                   	leave  
c0011626:	c3                   	ret    
c0011627:	90                   	nop

c0011628 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001162c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011630:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011633:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011638:	75 08                	jne    c0011642 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001163a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011640:	eb 38                	jmp    c001167a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011642:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011647:	75 17                	jne    c0011660 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011649:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001164e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011651:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011657:	8b 10                	mov    edx,DWORD PTR [eax]
c0011659:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001165d:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011660:	89 c1                	mov    ecx,eax
c0011662:	83 e1 fd             	and    ecx,0xfffffffd
c0011665:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001166b:	74 cd                	je     c001163a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001166d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011672:	83 e0 ef             	and    eax,0xffffffef
c0011675:	83 f8 08             	cmp    eax,0x8
c0011678:	76 c0                	jbe    c001163a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001167a:	31 c0                	xor    eax,eax
c001167c:	c3                   	ret    
c001167d:	90                   	nop

c001167e <ReservedFilename::isAtty()>:
c001167e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011682:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011685:	31 c0                	xor    eax,eax
c0011687:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001168d:	74 09                	je     c0011698 <ReservedFilename::isAtty()+0x1a>
c001168f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011695:	0f 94 c0             	sete   al
c0011698:	c3                   	ret    
c0011699:	90                   	nop

c001169a <ReservedFilename::write(unsigned long long, void*, int*)>:
c001169a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001169e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116a9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116ae:	75 08                	jne    c00116b8 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116b0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116b6:	eb 3d                	jmp    c00116f5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116b8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116bd:	75 17                	jne    c00116d6 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116c7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00116cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116d3:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116d6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116db:	75 04                	jne    c00116e1 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116dd:	89 0a                	mov    DWORD PTR [edx],ecx
c00116df:	eb 14                	jmp    c00116f5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116e1:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116e6:	74 c8                	je     c00116b0 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116e8:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116ed:	83 e0 ef             	and    eax,0xffffffef
c00116f0:	83 f8 08             	cmp    eax,0x8
c00116f3:	76 bb                	jbe    c00116b0 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116f5:	31 c0                	xor    eax,eax
c00116f7:	c3                   	ret    

c00116f8 <UnixFile::getFileDescriptor()>:
c00116f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116ff:	c3                   	ret    

c0011700 <UnixFile::UnixFile(int)>:
c0011700:	53                   	push   ebx
c0011701:	83 ec 28             	sub    esp,0x28
c0011704:	ba b4 a4 02 c0       	mov    edx,0xc002a4b4
c0011709:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001170d:	89 10                	mov    DWORD PTR [eax],edx
c001170f:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011717:	0f 8f 8c 01 00 00    	jg     c00118a9 <UnixFile::UnixFile(int)+0x1a9>
c001171d:	a1 00 d3 02 c0       	mov    eax,ds:0xc002d300
c0011722:	8d 50 01             	lea    edx,[eax+0x1]
c0011725:	89 15 00 d3 02 c0    	mov    DWORD PTR ds:0xc002d300,edx
c001172b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001172f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011732:	83 ec 08             	sub    esp,0x8
c0011735:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011739:	68 d8 e4 02 c0       	push   0xc002e4d8
c001173e:	e8 6d 6f 01 00       	call   c00286b0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011743:	83 c4 10             	add    esp,0x10
c0011746:	a0 d4 e4 02 c0       	mov    al,ds:0xc002e4d4
c001174b:	83 f0 01             	xor    eax,0x1
c001174e:	84 c0                	test   al,al
c0011750:	0f 84 54 01 00 00    	je     c00118aa <UnixFile::UnixFile(int)+0x1aa>
c0011756:	c6 05 d4 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4d4,0x1
c001175d:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011765:	83 ec 0c             	sub    esp,0xc
c0011768:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001176c:	e8 d2 e0 ff ff       	call   c000f843 <malloc>
c0011771:	83 c4 10             	add    esp,0x10
c0011774:	89 c3                	mov    ebx,eax
c0011776:	83 ec 08             	sub    esp,0x8
c0011779:	68 03 ff ff 0f       	push   0xfffff03
c001177e:	53                   	push   ebx
c001177f:	e8 2c 01 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c0011784:	83 c4 10             	add    esp,0x10
c0011787:	89 1d cc e4 02 c0    	mov    DWORD PTR ds:0xc002e4cc,ebx
c001178d:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011795:	83 ec 0c             	sub    esp,0xc
c0011798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001179c:	e8 a2 e0 ff ff       	call   c000f843 <malloc>
c00117a1:	83 c4 10             	add    esp,0x10
c00117a4:	89 c3                	mov    ebx,eax
c00117a6:	83 ec 08             	sub    esp,0x8
c00117a9:	68 01 ff ff 0f       	push   0xfffff01
c00117ae:	53                   	push   ebx
c00117af:	e8 fc 00 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c00117b4:	83 c4 10             	add    esp,0x10
c00117b7:	89 1d d0 e4 02 c0    	mov    DWORD PTR ds:0xc002e4d0,ebx
c00117bd:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117c5:	83 ec 0c             	sub    esp,0xc
c00117c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117cc:	e8 72 e0 ff ff       	call   c000f843 <malloc>
c00117d1:	83 c4 10             	add    esp,0x10
c00117d4:	89 c3                	mov    ebx,eax
c00117d6:	83 ec 08             	sub    esp,0x8
c00117d9:	68 00 ff ff 0f       	push   0xfffff00
c00117de:	53                   	push   ebx
c00117df:	e8 cc 00 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c00117e4:	83 c4 10             	add    esp,0x10
c00117e7:	89 1d c4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4c4,ebx
c00117ed:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117f5:	83 ec 0c             	sub    esp,0xc
c00117f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117fc:	e8 42 e0 ff ff       	call   c000f843 <malloc>
c0011801:	83 c4 10             	add    esp,0x10
c0011804:	89 c3                	mov    ebx,eax
c0011806:	83 ec 08             	sub    esp,0x8
c0011809:	68 02 ff ff 0f       	push   0xfffff02
c001180e:	53                   	push   ebx
c001180f:	e8 9c 00 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c0011814:	83 c4 10             	add    esp,0x10
c0011817:	89 1d c8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4c8,ebx
c001181d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011825:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001182a:	7f 7e                	jg     c00118aa <UnixFile::UnixFile(int)+0x1aa>
c001182c:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011834:	83 ec 0c             	sub    esp,0xc
c0011837:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001183b:	e8 03 e0 ff ff       	call   c000f843 <malloc>
c0011840:	83 c4 10             	add    esp,0x10
c0011843:	89 c3                	mov    ebx,eax
c0011845:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011849:	05 10 ff ff 0f       	add    eax,0xfffff10
c001184e:	83 ec 08             	sub    esp,0x8
c0011851:	50                   	push   eax
c0011852:	53                   	push   ebx
c0011853:	e8 58 00 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c0011858:	83 c4 10             	add    esp,0x10
c001185b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001185f:	89 1c 85 a0 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b60],ebx
c0011866:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001186e:	83 ec 0c             	sub    esp,0xc
c0011871:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011875:	e8 c9 df ff ff       	call   c000f843 <malloc>
c001187a:	83 c4 10             	add    esp,0x10
c001187d:	89 c3                	mov    ebx,eax
c001187f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011883:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011888:	83 ec 08             	sub    esp,0x8
c001188b:	50                   	push   eax
c001188c:	53                   	push   ebx
c001188d:	e8 1e 00 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c0011892:	83 c4 10             	add    esp,0x10
c0011895:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011899:	89 1c 85 60 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ba0],ebx
c00118a0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118a4:	e9 7c ff ff ff       	jmp    c0011825 <UnixFile::UnixFile(int)+0x125>
c00118a9:	90                   	nop
c00118aa:	83 c4 28             	add    esp,0x28
c00118ad:	5b                   	pop    ebx
c00118ae:	c3                   	ret    
c00118af:	90                   	nop

c00118b0 <ReservedFilename::ReservedFilename(int)>:
c00118b0:	83 ec 0c             	sub    esp,0xc
c00118b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b7:	83 ec 08             	sub    esp,0x8
c00118ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118be:	50                   	push   eax
c00118bf:	e8 3c fe ff ff       	call   c0011700 <UnixFile::UnixFile(int)>
c00118c4:	83 c4 10             	add    esp,0x10
c00118c7:	ba d0 a4 02 c0       	mov    edx,0xc002a4d0
c00118cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d0:	89 10                	mov    DWORD PTR [eax],edx
c00118d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118da:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118dd:	90                   	nop
c00118de:	83 c4 0c             	add    esp,0xc
c00118e1:	c3                   	ret    

c00118e2 <UnixFile::~UnixFile()>:
c00118e2:	83 ec 1c             	sub    esp,0x1c
c00118e5:	ba b4 a4 02 c0       	mov    edx,0xc002a4b4
c00118ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118ee:	89 10                	mov    DWORD PTR [eax],edx
c00118f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118f7:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00118fc:	7f 73                	jg     c0011971 <UnixFile::~UnixFile()+0x8f>
c00118fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011906:	83 ec 0c             	sub    esp,0xc
c0011909:	68 d8 e4 02 c0       	push   0xc002e4d8
c001190e:	e8 71 6e 01 00       	call   c0028784 <LinkedList<UnixFile>::getFirstElement()>
c0011913:	83 c4 10             	add    esp,0x10
c0011916:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001191a:	83 ec 0c             	sub    esp,0xc
c001191d:	68 d8 e4 02 c0       	push   0xc002e4d8
c0011922:	e8 65 6e 01 00       	call   c002878c <LinkedList<UnixFile>::removeFirst()>
c0011927:	83 c4 10             	add    esp,0x10
c001192a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001192e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011932:	74 40                	je     c0011974 <UnixFile::~UnixFile()+0x92>
c0011934:	83 ec 08             	sub    esp,0x8
c0011937:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001193b:	68 d8 e4 02 c0       	push   0xc002e4d8
c0011940:	e8 6b 6d 01 00       	call   c00286b0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011945:	83 c4 10             	add    esp,0x10
c0011948:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001194c:	8d 50 01             	lea    edx,[eax+0x1]
c001194f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011953:	3d 88 13 00 00       	cmp    eax,0x1388
c0011958:	0f 94 c0             	sete   al
c001195b:	84 c0                	test   al,al
c001195d:	74 a7                	je     c0011906 <UnixFile::~UnixFile()+0x24>
c001195f:	83 ec 0c             	sub    esp,0xc
c0011962:	68 8c a4 02 c0       	push   0xc002a48c
c0011967:	e8 1d 8c 00 00       	call   c001a589 <Krnl::panic(char const*)>
c001196c:	83 c4 10             	add    esp,0x10
c001196f:	eb 95                	jmp    c0011906 <UnixFile::~UnixFile()+0x24>
c0011971:	90                   	nop
c0011972:	eb 01                	jmp    c0011975 <UnixFile::~UnixFile()+0x93>
c0011974:	90                   	nop
c0011975:	90                   	nop
c0011976:	83 c4 1c             	add    esp,0x1c
c0011979:	c3                   	ret    

c001197a <UnixFile::~UnixFile()>:
c001197a:	83 ec 0c             	sub    esp,0xc
c001197d:	83 ec 0c             	sub    esp,0xc
c0011980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011984:	e8 59 ff ff ff       	call   c00118e2 <UnixFile::~UnixFile()>
c0011989:	83 c4 10             	add    esp,0x10
c001198c:	83 ec 08             	sub    esp,0x8
c001198f:	6a 0c                	push   0xc
c0011991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011995:	e8 23 14 00 00       	call   c0012dbd <operator delete(void*, unsigned long)>
c001199a:	83 c4 10             	add    esp,0x10
c001199d:	83 c4 0c             	add    esp,0xc
c00119a0:	c3                   	ret    
c00119a1:	90                   	nop

c00119a2 <ReservedFilename::~ReservedFilename()>:
c00119a2:	83 ec 0c             	sub    esp,0xc
c00119a5:	ba d0 a4 02 c0       	mov    edx,0xc002a4d0
c00119aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ae:	89 10                	mov    DWORD PTR [eax],edx
c00119b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119b4:	83 ec 0c             	sub    esp,0xc
c00119b7:	50                   	push   eax
c00119b8:	e8 25 ff ff ff       	call   c00118e2 <UnixFile::~UnixFile()>
c00119bd:	83 c4 10             	add    esp,0x10
c00119c0:	90                   	nop
c00119c1:	83 c4 0c             	add    esp,0xc
c00119c4:	c3                   	ret    
c00119c5:	90                   	nop

c00119c6 <ReservedFilename::~ReservedFilename()>:
c00119c6:	83 ec 0c             	sub    esp,0xc
c00119c9:	83 ec 0c             	sub    esp,0xc
c00119cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d0:	e8 cd ff ff ff       	call   c00119a2 <ReservedFilename::~ReservedFilename()>
c00119d5:	83 c4 10             	add    esp,0x10
c00119d8:	83 ec 08             	sub    esp,0x8
c00119db:	6a 0c                	push   0xc
c00119dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e1:	e8 d7 13 00 00       	call   c0012dbd <operator delete(void*, unsigned long)>
c00119e6:	83 c4 10             	add    esp,0x10
c00119e9:	83 c4 0c             	add    esp,0xc
c00119ec:	c3                   	ret    

c00119ed <getFromFileDescriptor(int)>:
c00119ed:	53                   	push   ebx
c00119ee:	83 ec 08             	sub    esp,0x8
c00119f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119f5:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00119fb:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a01:	7f 2c                	jg     c0011a2f <getFromFileDescriptor(int)+0x42>
c0011a03:	83 ec 0c             	sub    esp,0xc
c0011a06:	68 d8 e4 02 c0       	push   0xc002e4d8
c0011a0b:	e8 74 6d 01 00       	call   c0028784 <LinkedList<UnixFile>::getFirstElement()>
c0011a10:	83 c4 10             	add    esp,0x10
c0011a13:	85 c0                	test   eax,eax
c0011a15:	75 04                	jne    c0011a1b <getFromFileDescriptor(int)+0x2e>
c0011a17:	31 c0                	xor    eax,eax
c0011a19:	eb 6e                	jmp    c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a1b:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a1e:	74 69                	je     c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a20:	52                   	push   edx
c0011a21:	52                   	push   edx
c0011a22:	50                   	push   eax
c0011a23:	68 d8 e4 02 c0       	push   0xc002e4d8
c0011a28:	e8 01 6e 01 00       	call   c002882e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a2d:	eb e1                	jmp    c0011a10 <getFromFileDescriptor(int)+0x23>
c0011a2f:	a1 cc e4 02 c0       	mov    eax,ds:0xc002e4cc
c0011a34:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a3a:	74 4d                	je     c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a3c:	a1 d0 e4 02 c0       	mov    eax,ds:0xc002e4d0
c0011a41:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a47:	74 40                	je     c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a49:	a1 c8 e4 02 c0       	mov    eax,ds:0xc002e4c8
c0011a4e:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a54:	74 33                	je     c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a56:	a1 c4 e4 02 c0       	mov    eax,ds:0xc002e4c4
c0011a5b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a61:	74 26                	je     c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a63:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a69:	83 f8 08             	cmp    eax,0x8
c0011a6c:	77 09                	ja     c0011a77 <getFromFileDescriptor(int)+0x8a>
c0011a6e:	8b 04 85 a0 e4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1b60]
c0011a75:	eb 12                	jmp    c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a77:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a7d:	83 fb 08             	cmp    ebx,0x8
c0011a80:	77 95                	ja     c0011a17 <getFromFileDescriptor(int)+0x2a>
c0011a82:	8b 04 9d 60 e4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1ba0]
c0011a89:	83 c4 08             	add    esp,0x8
c0011a8c:	5b                   	pop    ebx
c0011a8d:	c3                   	ret    

c0011a8e <__static_initialization_and_destruction_0(int, int)>:
c0011a8e:	83 ec 0c             	sub    esp,0xc
c0011a91:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a96:	75 34                	jne    c0011acc <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a98:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011aa0:	75 2a                	jne    c0011acc <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aa2:	83 ec 0c             	sub    esp,0xc
c0011aa5:	68 d8 e4 02 c0       	push   0xc002e4d8
c0011aaa:	e8 a9 6b 01 00       	call   c0028658 <LinkedList<UnixFile>::LinkedList()>
c0011aaf:	83 c4 10             	add    esp,0x10
c0011ab2:	83 ec 04             	sub    esp,0x4
c0011ab5:	68 80 d2 02 c0       	push   0xc002d280
c0011aba:	68 d8 e4 02 c0       	push   0xc002e4d8
c0011abf:	68 56 86 02 c0       	push   0xc0028656
c0011ac4:	e8 6e 12 00 00       	call   c0012d37 <__cxa_atexit>
c0011ac9:	83 c4 10             	add    esp,0x10
c0011acc:	90                   	nop
c0011acd:	83 c4 0c             	add    esp,0xc
c0011ad0:	c3                   	ret    

c0011ad1 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011ad1:	83 ec 0c             	sub    esp,0xc
c0011ad4:	83 ec 08             	sub    esp,0x8
c0011ad7:	68 ff ff 00 00       	push   0xffff
c0011adc:	6a 01                	push   0x1
c0011ade:	e8 ab ff ff ff       	call   c0011a8e <__static_initialization_and_destruction_0(int, int)>
c0011ae3:	83 c4 10             	add    esp,0x10
c0011ae6:	83 c4 0c             	add    esp,0xc
c0011ae9:	c3                   	ret    

c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011aea:	53                   	push   ebx
c0011aeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011aef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011af3:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011af9:	89 c8                	mov    eax,ecx
c0011afb:	d1 e8                	shr    eax,1
c0011afd:	03 05 08 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d308
c0011b03:	83 e1 01             	and    ecx,0x1
c0011b06:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b08:	75 09                	jne    c0011b13 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b0a:	83 e2 f0             	and    edx,0xfffffff0
c0011b0d:	09 da                	or     edx,ebx
c0011b0f:	88 10                	mov    BYTE PTR [eax],dl
c0011b11:	5b                   	pop    ebx
c0011b12:	c3                   	ret    
c0011b13:	c1 e3 04             	shl    ebx,0x4
c0011b16:	83 e2 0f             	and    edx,0xf
c0011b19:	09 da                	or     edx,ebx
c0011b1b:	88 10                	mov    BYTE PTR [eax],dl
c0011b1d:	5b                   	pop    ebx
c0011b1e:	c3                   	ret    

c0011b1f <Virt::getPageState(unsigned long)>:
c0011b1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b23:	8b 0d 08 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d308
c0011b29:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b2f:	89 d0                	mov    eax,edx
c0011b31:	d1 e8                	shr    eax,1
c0011b33:	83 e2 01             	and    edx,0x1
c0011b36:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b39:	75 04                	jne    c0011b3f <Virt::getPageState(unsigned long)+0x20>
c0011b3b:	83 e0 0f             	and    eax,0xf
c0011b3e:	c3                   	ret    
c0011b3f:	c0 e8 04             	shr    al,0x4
c0011b42:	c3                   	ret    

c0011b43 <Virt::allocateKernelVirtualPages(int)>:
c0011b43:	55                   	push   ebp
c0011b44:	31 ed                	xor    ebp,ebp
c0011b46:	57                   	push   edi
c0011b47:	56                   	push   esi
c0011b48:	53                   	push   ebx
c0011b49:	31 db                	xor    ebx,ebx
c0011b4b:	83 ec 1c             	sub    esp,0x1c
c0011b4e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b52:	8b 3d 04 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d304
c0011b58:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b5d:	57                   	push   edi
c0011b5e:	e8 bc ff ff ff       	call   c0011b1f <Virt::getPageState(unsigned long)>
c0011b63:	5a                   	pop    edx
c0011b64:	84 c0                	test   al,al
c0011b66:	75 3a                	jne    c0011ba2 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b68:	85 db                	test   ebx,ebx
c0011b6a:	75 02                	jne    c0011b6e <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b6c:	89 fd                	mov    ebp,edi
c0011b6e:	43                   	inc    ebx
c0011b6f:	39 f3                	cmp    ebx,esi
c0011b71:	74 5a                	je     c0011bcd <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b73:	47                   	inc    edi
c0011b74:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b7a:	76 31                	jbe    c0011bad <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b7c:	c7 05 04 d3 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d304,0xc8000
c0011b86:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b8b:	75 28                	jne    c0011bb5 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b8d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b92:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b97:	57                   	push   edi
c0011b98:	e8 82 ff ff ff       	call   c0011b1f <Virt::getPageState(unsigned long)>
c0011b9d:	5a                   	pop    edx
c0011b9e:	84 c0                	test   al,al
c0011ba0:	74 c6                	je     c0011b68 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011ba2:	31 db                	xor    ebx,ebx
c0011ba4:	47                   	inc    edi
c0011ba5:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bab:	77 cf                	ja     c0011b7c <Virt::allocateKernelVirtualPages(int)+0x39>
c0011bad:	89 3d 04 d3 02 c0    	mov    DWORD PTR ds:0xc002d304,edi
c0011bb3:	eb a8                	jmp    c0011b5d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bb5:	83 ec 0c             	sub    esp,0xc
c0011bb8:	68 e4 a4 02 c0       	push   0xc002a4e4
c0011bbd:	e8 c7 89 00 00       	call   c001a589 <Krnl::panic(char const*)>
c0011bc2:	8b 3d 04 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d304
c0011bc8:	83 c4 10             	add    esp,0x10
c0011bcb:	eb 90                	jmp    c0011b5d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bcd:	89 2d 04 d3 02 c0    	mov    DWORD PTR ds:0xc002d304,ebp
c0011bd3:	4b                   	dec    ebx
c0011bd4:	74 5f                	je     c0011c35 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bd6:	85 f6                	test   esi,esi
c0011bd8:	74 3d                	je     c0011c17 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bda:	89 e8                	mov    eax,ebp
c0011bdc:	31 db                	xor    ebx,ebx
c0011bde:	8d 7e ff             	lea    edi,[esi-0x1]
c0011be1:	eb 14                	jmp    c0011bf7 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011be3:	6a 01                	push   0x1
c0011be5:	43                   	inc    ebx
c0011be6:	50                   	push   eax
c0011be7:	e8 fe fe ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bec:	58                   	pop    eax
c0011bed:	39 f3                	cmp    ebx,esi
c0011bef:	5a                   	pop    edx
c0011bf0:	74 25                	je     c0011c17 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bf2:	a1 04 d3 02 c0       	mov    eax,ds:0xc002d304
c0011bf7:	8d 50 01             	lea    edx,[eax+0x1]
c0011bfa:	85 db                	test   ebx,ebx
c0011bfc:	89 15 04 d3 02 c0    	mov    DWORD PTR ds:0xc002d304,edx
c0011c02:	74 20                	je     c0011c24 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c04:	39 df                	cmp    edi,ebx
c0011c06:	75 db                	jne    c0011be3 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c08:	6a 03                	push   0x3
c0011c0a:	43                   	inc    ebx
c0011c0b:	50                   	push   eax
c0011c0c:	e8 d9 fe ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c11:	59                   	pop    ecx
c0011c12:	39 f3                	cmp    ebx,esi
c0011c14:	58                   	pop    eax
c0011c15:	75 db                	jne    c0011bf2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c17:	83 c4 1c             	add    esp,0x1c
c0011c1a:	89 e8                	mov    eax,ebp
c0011c1c:	5b                   	pop    ebx
c0011c1d:	c1 e0 0c             	shl    eax,0xc
c0011c20:	5e                   	pop    esi
c0011c21:	5f                   	pop    edi
c0011c22:	5d                   	pop    ebp
c0011c23:	c3                   	ret    
c0011c24:	6a 02                	push   0x2
c0011c26:	bb 01 00 00 00       	mov    ebx,0x1
c0011c2b:	50                   	push   eax
c0011c2c:	e8 b9 fe ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c31:	58                   	pop    eax
c0011c32:	5a                   	pop    edx
c0011c33:	eb bd                	jmp    c0011bf2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c35:	6a 04                	push   0x4
c0011c37:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c3a:	55                   	push   ebp
c0011c3b:	a3 04 d3 02 c0       	mov    ds:0xc002d304,eax
c0011c40:	e8 a5 fe ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c45:	59                   	pop    ecx
c0011c46:	89 e8                	mov    eax,ebp
c0011c48:	5b                   	pop    ebx
c0011c49:	c1 e0 0c             	shl    eax,0xc
c0011c4c:	83 c4 1c             	add    esp,0x1c
c0011c4f:	5b                   	pop    ebx
c0011c50:	5e                   	pop    esi
c0011c51:	5f                   	pop    edi
c0011c52:	5d                   	pop    ebp
c0011c53:	c3                   	ret    

c0011c54 <Virt::freeSwapfilePage(unsigned long)>:
c0011c54:	53                   	push   ebx
c0011c55:	8b 15 e8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4e8
c0011c5b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c5f:	b8 01 00 00 00       	mov    eax,0x1
c0011c64:	89 cb                	mov    ebx,ecx
c0011c66:	d3 e0                	shl    eax,cl
c0011c68:	c1 eb 05             	shr    ebx,0x5
c0011c6b:	f7 d0                	not    eax
c0011c6d:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011c70:	5b                   	pop    ebx
c0011c71:	c3                   	ret    

c0011c72 <Virt::swapIDToSector(unsigned long)>:
c0011c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c76:	0f af 05 0c d3 02 c0 	imul   eax,DWORD PTR ds:0xc002d30c
c0011c7d:	03 05 14 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d314
c0011c83:	c3                   	ret    

c0011c84 <Virt::allocateSwapfilePage()>:
c0011c84:	55                   	push   ebp
c0011c85:	31 d2                	xor    edx,edx
c0011c87:	57                   	push   edi
c0011c88:	56                   	push   esi
c0011c89:	53                   	push   ebx
c0011c8a:	83 ec 0c             	sub    esp,0xc
c0011c8d:	8b 0d 0c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d30c
c0011c93:	a1 10 d3 02 c0       	mov    eax,ds:0xc002d310
c0011c98:	f7 f1                	div    ecx
c0011c9a:	39 0d 10 d3 02 c0    	cmp    DWORD PTR ds:0xc002d310,ecx
c0011ca0:	72 2d                	jb     c0011ccf <Virt::allocateSwapfilePage()+0x4b>
c0011ca2:	8b 35 e8 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4e8
c0011ca8:	8b 16                	mov    edx,DWORD PTR [esi]
c0011caa:	f6 c2 01             	test   dl,0x1
c0011cad:	74 3c                	je     c0011ceb <Virt::allocateSwapfilePage()+0x67>
c0011caf:	31 c9                	xor    ecx,ecx
c0011cb1:	bf 01 00 00 00       	mov    edi,0x1
c0011cb6:	eb 12                	jmp    c0011cca <Virt::allocateSwapfilePage()+0x46>
c0011cb8:	89 fd                	mov    ebp,edi
c0011cba:	89 ca                	mov    edx,ecx
c0011cbc:	d3 e5                	shl    ebp,cl
c0011cbe:	c1 ea 05             	shr    edx,0x5
c0011cc1:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011cc4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cc6:	85 ea                	test   edx,ebp
c0011cc8:	74 2a                	je     c0011cf4 <Virt::allocateSwapfilePage()+0x70>
c0011cca:	41                   	inc    ecx
c0011ccb:	39 c8                	cmp    eax,ecx
c0011ccd:	77 e9                	ja     c0011cb8 <Virt::allocateSwapfilePage()+0x34>
c0011ccf:	83 ec 0c             	sub    esp,0xc
c0011cd2:	68 6b a6 02 c0       	push   0xc002a66b
c0011cd7:	e8 ad 88 00 00       	call   c001a589 <Krnl::panic(char const*)>
c0011cdc:	83 c4 10             	add    esp,0x10
c0011cdf:	31 c9                	xor    ecx,ecx
c0011ce1:	83 c4 0c             	add    esp,0xc
c0011ce4:	89 c8                	mov    eax,ecx
c0011ce6:	5b                   	pop    ebx
c0011ce7:	5e                   	pop    esi
c0011ce8:	5f                   	pop    edi
c0011ce9:	5d                   	pop    ebp
c0011cea:	c3                   	ret    
c0011ceb:	89 f3                	mov    ebx,esi
c0011ced:	bd 01 00 00 00       	mov    ebp,0x1
c0011cf2:	31 c9                	xor    ecx,ecx
c0011cf4:	09 ea                	or     edx,ebp
c0011cf6:	89 c8                	mov    eax,ecx
c0011cf8:	89 13                	mov    DWORD PTR [ebx],edx
c0011cfa:	83 c4 0c             	add    esp,0xc
c0011cfd:	5b                   	pop    ebx
c0011cfe:	5e                   	pop    esi
c0011cff:	5f                   	pop    edi
c0011d00:	5d                   	pop    ebp
c0011d01:	c3                   	ret    

c0011d02 <Virt::virtualMemorySetup()>:
c0011d02:	53                   	push   ebx
c0011d03:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d08:	83 ec 08             	sub    esp,0x8
c0011d0b:	6a 0f                	push   0xf
c0011d0d:	53                   	push   ebx
c0011d0e:	43                   	inc    ebx
c0011d0f:	e8 d6 fd ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d14:	59                   	pop    ecx
c0011d15:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d1b:	58                   	pop    eax
c0011d1c:	75 ed                	jne    c0011d0b <Virt::virtualMemorySetup()+0x9>
c0011d1e:	83 ec 08             	sub    esp,0x8
c0011d21:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d26:	68 00 00 00 c8       	push   0xc8000000
c0011d2b:	68 82 a6 02 c0       	push   0xc002a682
c0011d30:	e8 68 11 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0011d35:	58                   	pop    eax
c0011d36:	5a                   	pop    edx
c0011d37:	68 00 f0 ff ef       	push   0xeffff000
c0011d3c:	68 96 a6 02 c0       	push   0xc002a696
c0011d41:	e8 57 11 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0011d46:	83 c4 10             	add    esp,0x10
c0011d49:	83 ec 08             	sub    esp,0x8
c0011d4c:	6a 00                	push   0x0
c0011d4e:	53                   	push   ebx
c0011d4f:	43                   	inc    ebx
c0011d50:	e8 95 fd ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d55:	83 c4 10             	add    esp,0x10
c0011d58:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d5e:	75 e9                	jne    c0011d49 <Virt::virtualMemorySetup()+0x47>
c0011d60:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011d65:	83 ec 08             	sub    esp,0x8
c0011d68:	6a 0f                	push   0xf
c0011d6a:	53                   	push   ebx
c0011d6b:	43                   	inc    ebx
c0011d6c:	e8 79 fd ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d71:	83 c4 10             	add    esp,0x10
c0011d74:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011d7a:	75 e9                	jne    c0011d65 <Virt::virtualMemorySetup()+0x63>
c0011d7c:	83 c4 08             	add    esp,0x8
c0011d7f:	5b                   	pop    ebx
c0011d80:	c3                   	ret    

c0011d81 <Virt::swappingSetup()>:
c0011d81:	83 ec 14             	sub    esp,0x14
c0011d84:	31 d2                	xor    edx,edx
c0011d86:	a1 10 d3 02 c0       	mov    eax,ds:0xc002d310
c0011d8b:	f7 35 0c d3 02 c0    	div    DWORD PTR ds:0xc002d30c
c0011d91:	c1 e8 05             	shr    eax,0x5
c0011d94:	50                   	push   eax
c0011d95:	68 aa a6 02 c0       	push   0xc002a6aa
c0011d9a:	e8 fe 10 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0011d9f:	a1 10 d3 02 c0       	mov    eax,ds:0xc002d310
c0011da4:	31 d2                	xor    edx,edx
c0011da6:	f7 35 0c d3 02 c0    	div    DWORD PTR ds:0xc002d30c
c0011dac:	c1 e8 05             	shr    eax,0x5
c0011daf:	89 04 24             	mov    DWORD PTR [esp],eax
c0011db2:	e8 8c da ff ff       	call   c000f843 <malloc>
c0011db7:	83 c4 0c             	add    esp,0xc
c0011dba:	89 c1                	mov    ecx,eax
c0011dbc:	a3 e8 e4 02 c0       	mov    ds:0xc002e4e8,eax
c0011dc1:	31 d2                	xor    edx,edx
c0011dc3:	a1 10 d3 02 c0       	mov    eax,ds:0xc002d310
c0011dc8:	f7 35 0c d3 02 c0    	div    DWORD PTR ds:0xc002d30c
c0011dce:	c1 e8 05             	shr    eax,0x5
c0011dd1:	50                   	push   eax
c0011dd2:	6a 00                	push   0x0
c0011dd4:	51                   	push   ecx
c0011dd5:	e8 9e e9 fe ff       	call   c0000778 <memset>
c0011dda:	83 c4 1c             	add    esp,0x1c
c0011ddd:	c3                   	ret    

c0011dde <Virt::getAKernelVAS()>:
c0011dde:	a1 ec e4 02 c0       	mov    eax,ds:0xc002e4ec
c0011de3:	c3                   	ret    

c0011de4 <Virt::setupPageSwapping(int)>:
c0011de4:	57                   	push   edi
c0011de5:	56                   	push   esi
c0011de6:	53                   	push   ebx
c0011de7:	83 ec 1c             	sub    esp,0x1c
c0011dea:	68 14 01 00 00       	push   0x114
c0011def:	e8 4f da ff ff       	call   c000f843 <malloc>
c0011df4:	83 c4 0c             	add    esp,0xc
c0011df7:	89 c6                	mov    esi,eax
c0011df9:	ff 35 d4 18 03 c0    	push   DWORD PTR ds:0xc00318d4
c0011dff:	68 c5 a6 02 c0       	push   0xc002a6c5
c0011e04:	50                   	push   eax
c0011e05:	e8 ec 15 00 00       	call   c00133f6 <File::File(char const*, Process*)>
c0011e0a:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e0d:	e8 c0 17 00 00       	call   c00135d2 <File::unlink()>
c0011e12:	58                   	pop    eax
c0011e13:	5a                   	pop    edx
c0011e14:	6a 12                	push   0x12
c0011e16:	56                   	push   esi
c0011e17:	e8 3e 16 00 00       	call   c001345a <File::open(FileOpenMode)>
c0011e1c:	83 c4 10             	add    esp,0x10
c0011e1f:	85 c0                	test   eax,eax
c0011e21:	0f 85 ca 00 00 00    	jne    c0011ef1 <Virt::setupPageSwapping(int)+0x10d>
c0011e27:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e2b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e33:	c1 e3 08             	shl    ebx,0x8
c0011e36:	83 ec 0c             	sub    esp,0xc
c0011e39:	68 00 00 01 00       	push   0x10000
c0011e3e:	e8 00 da ff ff       	call   c000f843 <malloc>
c0011e43:	83 c4 0c             	add    esp,0xc
c0011e46:	89 c7                	mov    edi,eax
c0011e48:	68 00 00 01 00       	push   0x10000
c0011e4d:	6a 00                	push   0x0
c0011e4f:	50                   	push   eax
c0011e50:	e8 23 e9 fe ff       	call   c0000778 <memset>
c0011e55:	83 c4 10             	add    esp,0x10
c0011e58:	85 db                	test   ebx,ebx
c0011e5a:	79 03                	jns    c0011e5f <Virt::setupPageSwapping(int)+0x7b>
c0011e5c:	83 c3 0f             	add    ebx,0xf
c0011e5f:	c1 fb 04             	sar    ebx,0x4
c0011e62:	4b                   	dec    ebx
c0011e63:	83 fb ff             	cmp    ebx,0xffffffff
c0011e66:	74 4b                	je     c0011eb3 <Virt::setupPageSwapping(int)+0xcf>
c0011e68:	83 ec 0c             	sub    esp,0xc
c0011e6b:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e6d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011e71:	52                   	push   edx
c0011e72:	57                   	push   edi
c0011e73:	6a 00                	push   0x0
c0011e75:	68 00 00 01 00       	push   0x10000
c0011e7a:	56                   	push   esi
c0011e7b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011e7e:	83 c4 20             	add    esp,0x20
c0011e81:	85 c0                	test   eax,eax
c0011e83:	75 59                	jne    c0011ede <Virt::setupPageSwapping(int)+0xfa>
c0011e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e89:	3d 00 00 01 00       	cmp    eax,0x10000
c0011e8e:	74 d2                	je     c0011e62 <Virt::setupPageSwapping(int)+0x7e>
c0011e90:	83 ec 08             	sub    esp,0x8
c0011e93:	4b                   	dec    ebx
c0011e94:	50                   	push   eax
c0011e95:	68 18 a7 02 c0       	push   0xc002a718
c0011e9a:	e8 fe 0f 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0011e9f:	c7 04 24 21 a7 02 c0 	mov    DWORD PTR [esp],0xc002a721
c0011ea6:	e8 de 86 00 00       	call   c001a589 <Krnl::panic(char const*)>
c0011eab:	83 c4 10             	add    esp,0x10
c0011eae:	83 fb ff             	cmp    ebx,0xffffffff
c0011eb1:	75 b5                	jne    c0011e68 <Virt::setupPageSwapping(int)+0x84>
c0011eb3:	83 ec 0c             	sub    esp,0xc
c0011eb6:	56                   	push   esi
c0011eb7:	e8 fc 15 00 00       	call   c00134b8 <File::close()>
c0011ebc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ebf:	e8 9f d9 ff ff       	call   c000f863 <rfree>
c0011ec4:	83 c4 10             	add    esp,0x10
c0011ec7:	85 f6                	test   esi,esi
c0011ec9:	74 0c                	je     c0011ed7 <Virt::setupPageSwapping(int)+0xf3>
c0011ecb:	83 ec 0c             	sub    esp,0xc
c0011ece:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ed0:	56                   	push   esi
c0011ed1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ed4:	83 c4 10             	add    esp,0x10
c0011ed7:	83 c4 10             	add    esp,0x10
c0011eda:	5b                   	pop    ebx
c0011edb:	5e                   	pop    esi
c0011edc:	5f                   	pop    edi
c0011edd:	c3                   	ret    
c0011ede:	83 ec 08             	sub    esp,0x8
c0011ee1:	50                   	push   eax
c0011ee2:	68 00 a7 02 c0       	push   0xc002a700
c0011ee7:	e8 b1 0f 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0011eec:	83 c4 10             	add    esp,0x10
c0011eef:	eb 94                	jmp    c0011e85 <Virt::setupPageSwapping(int)+0xa1>
c0011ef1:	83 ec 08             	sub    esp,0x8
c0011ef4:	50                   	push   eax
c0011ef5:	68 dc a6 02 c0       	push   0xc002a6dc
c0011efa:	e8 9e 0f 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0011eff:	c7 04 24 e5 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6e5
c0011f06:	e8 7e 86 00 00       	call   c001a589 <Krnl::panic(char const*)>
c0011f0b:	83 c4 10             	add    esp,0x10
c0011f0e:	e9 14 ff ff ff       	jmp    c0011e27 <Virt::setupPageSwapping(int)+0x43>
c0011f13:	90                   	nop

c0011f14 <VAS::VAS()>:
c0011f14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f18:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f23:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f2e:	a3 ec e4 02 c0       	mov    ds:0xc002e4ec,eax
c0011f33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f37:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f3f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f46:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011f4d:	90                   	nop
c0011f4e:	c3                   	ret    
c0011f4f:	90                   	nop

c0011f50 <VAS::VAS(VAS*)>:
c0011f50:	83 ec 0c             	sub    esp,0xc
c0011f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f62:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f69:	83 ec 0c             	sub    esp,0xc
c0011f6c:	68 04 a5 02 c0       	push   0xc002a504
c0011f71:	e8 13 86 00 00       	call   c001a589 <Krnl::panic(char const*)>
c0011f76:	83 c4 10             	add    esp,0x10
c0011f79:	90                   	nop
c0011f7a:	83 c4 0c             	add    esp,0xc
c0011f7d:	c3                   	ret    

c0011f7e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011f7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f82:	89 c2                	mov    edx,eax
c0011f84:	c1 e8 0a             	shr    eax,0xa
c0011f87:	c1 ea 16             	shr    edx,0x16
c0011f8a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011f8f:	19 c9                	sbb    ecx,ecx
c0011f91:	c1 e2 0c             	shl    edx,0xc
c0011f94:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011f9a:	25 fc 0f 00 00       	and    eax,0xffc
c0011f9f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fa6:	01 d0                	add    eax,edx
c0011fa8:	c3                   	ret    
c0011fa9:	90                   	nop

c0011faa <VAS::getPageTableEntry(unsigned long)>:
c0011faa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fae:	89 ca                	mov    edx,ecx
c0011fb0:	c1 e9 0a             	shr    ecx,0xa
c0011fb3:	c1 ea 16             	shr    edx,0x16
c0011fb6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011fbc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011fc2:	c1 e0 0c             	shl    eax,0xc
c0011fc5:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011fc8:	c3                   	ret    

c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011fc9:	57                   	push   edi
c0011fca:	56                   	push   esi
c0011fcb:	be 01 00 00 00       	mov    esi,0x1
c0011fd0:	53                   	push   ebx
c0011fd1:	83 ec 10             	sub    esp,0x10
c0011fd4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fd8:	c1 eb 0c             	shr    ebx,0xc
c0011fdb:	eb 3f                	jmp    c001201c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011fdd:	e8 fc fd ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0011fe2:	83 ec 08             	sub    esp,0x8
c0011fe5:	57                   	push   edi
c0011fe6:	50                   	push   eax
c0011fe7:	e8 be ff ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0011fec:	83 c4 10             	add    esp,0x10
c0011fef:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ff1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ff5:	f6 c4 04             	test   ah,0x4
c0011ff8:	75 5f                	jne    c0012059 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011ffa:	80 fa 04             	cmp    dl,0x4
c0011ffd:	74 78                	je     c0012077 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011fff:	80 fa 02             	cmp    dl,0x2
c0012002:	0f 84 88 00 00 00    	je     c0012090 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012008:	80 fa 03             	cmp    dl,0x3
c001200b:	0f 84 ad 00 00 00    	je     c00120be <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012011:	fe ca                	dec    dl
c0012013:	0f 84 92 00 00 00    	je     c00120ab <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012019:	43                   	inc    ebx
c001201a:	31 f6                	xor    esi,esi
c001201c:	53                   	push   ebx
c001201d:	e8 fd fa ff ff       	call   c0011b1f <Virt::getPageState(unsigned long)>
c0012022:	5f                   	pop    edi
c0012023:	89 df                	mov    edi,ebx
c0012025:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012029:	c1 e7 0c             	shl    edi,0xc
c001202c:	84 c0                	test   al,al
c001202e:	75 ad                	jne    c0011fdd <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012030:	83 ec 0c             	sub    esp,0xc
c0012033:	68 27 a7 02 c0       	push   0xc002a727
c0012038:	e8 4c 85 00 00       	call   c001a589 <Krnl::panic(char const*)>
c001203d:	e8 9c fd ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0012042:	5a                   	pop    edx
c0012043:	59                   	pop    ecx
c0012044:	57                   	push   edi
c0012045:	50                   	push   eax
c0012046:	e8 5f ff ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c001204b:	83 c4 10             	add    esp,0x10
c001204e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012050:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012054:	f6 c4 04             	test   ah,0x4
c0012057:	74 c0                	je     c0012019 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012059:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001205d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012062:	83 ec 0c             	sub    esp,0xc
c0012065:	50                   	push   eax
c0012066:	e8 f0 dd ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c001206b:	83 c4 10             	add    esp,0x10
c001206e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012072:	80 fa 04             	cmp    dl,0x4
c0012075:	75 88                	jne    c0011fff <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0012077:	89 f0                	mov    eax,esi
c0012079:	84 c0                	test   al,al
c001207b:	75 47                	jne    c00120c4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001207d:	c7 44 24 20 28 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a528
c0012085:	83 c4 10             	add    esp,0x10
c0012088:	5b                   	pop    ebx
c0012089:	5e                   	pop    esi
c001208a:	5f                   	pop    edi
c001208b:	e9 f9 84 00 00       	jmp    c001a589 <Krnl::panic(char const*)>
c0012090:	89 f0                	mov    eax,esi
c0012092:	84 c0                	test   al,al
c0012094:	75 15                	jne    c00120ab <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012096:	83 ec 0c             	sub    esp,0xc
c0012099:	68 43 a7 02 c0       	push   0xc002a743
c001209e:	e8 e6 84 00 00       	call   c001a589 <Krnl::panic(char const*)>
c00120a3:	83 c4 10             	add    esp,0x10
c00120a6:	e9 6e ff ff ff       	jmp    c0012019 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120ab:	83 ec 08             	sub    esp,0x8
c00120ae:	6a 00                	push   0x0
c00120b0:	53                   	push   ebx
c00120b1:	e8 34 fa ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120b6:	83 c4 10             	add    esp,0x10
c00120b9:	e9 5b ff ff ff       	jmp    c0012019 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120be:	89 f0                	mov    eax,esi
c00120c0:	84 c0                	test   al,al
c00120c2:	75 15                	jne    c00120d9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00120c4:	83 ec 08             	sub    esp,0x8
c00120c7:	6a 00                	push   0x0
c00120c9:	53                   	push   ebx
c00120ca:	e8 1b fa ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120cf:	83 c4 10             	add    esp,0x10
c00120d2:	83 c4 10             	add    esp,0x10
c00120d5:	5b                   	pop    ebx
c00120d6:	5e                   	pop    esi
c00120d7:	5f                   	pop    edi
c00120d8:	c3                   	ret    
c00120d9:	c7 44 24 20 5f a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a75f
c00120e1:	83 c4 10             	add    esp,0x10
c00120e4:	5b                   	pop    ebx
c00120e5:	5e                   	pop    esi
c00120e6:	5f                   	pop    edi
c00120e7:	e9 9d 84 00 00       	jmp    c001a589 <Krnl::panic(char const*)>

c00120ec <VAS::freeAllocatedPages(unsigned long)>:
c00120ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120f4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00120f8:	74 09                	je     c0012103 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00120fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00120fe:	e9 c6 fe ff ff       	jmp    c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012103:	c7 44 24 04 4c a5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a54c
c001210b:	e9 8d 0d 00 00       	jmp    c0012e9d <Dbg::kprintf(char const*, ...)>

c0012110 <VAS::virtualToPhysical(unsigned long)>:
c0012110:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012114:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012118:	e8 8d fe ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c001211d:	5a                   	pop    edx
c001211e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012120:	59                   	pop    ecx
c0012121:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012126:	c3                   	ret    
c0012127:	90                   	nop

c0012128 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012128:	55                   	push   ebp
c0012129:	57                   	push   edi
c001212a:	56                   	push   esi
c001212b:	53                   	push   ebx
c001212c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012130:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012134:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012138:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001213c:	85 db                	test   ebx,ebx
c001213e:	7e 22                	jle    c0012162 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012140:	c1 e3 0c             	shl    ebx,0xc
c0012143:	01 f3                	add    ebx,esi
c0012145:	56                   	push   esi
c0012146:	81 c6 00 10 00 00    	add    esi,0x1000
c001214c:	55                   	push   ebp
c001214d:	e8 58 fe ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0012152:	5a                   	pop    edx
c0012153:	59                   	pop    ecx
c0012154:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012156:	21 f9                	and    ecx,edi
c0012158:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001215c:	39 f3                	cmp    ebx,esi
c001215e:	89 08                	mov    DWORD PTR [eax],ecx
c0012160:	75 e3                	jne    c0012145 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012162:	5b                   	pop    ebx
c0012163:	5e                   	pop    esi
c0012164:	5f                   	pop    edi
c0012165:	5d                   	pop    ebp
c0012166:	c3                   	ret    
c0012167:	90                   	nop

c0012168 <VAS::setToWriteCombining(unsigned long, int)>:
c0012168:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c001216d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012173:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001217a:	75 01                	jne    c001217d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001217c:	c3                   	ret    
c001217d:	68 80 00 00 00       	push   0x80
c0012182:	6a ff                	push   0xffffffff
c0012184:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012188:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001218c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012190:	e8 93 ff ff ff       	call   c0012128 <VAS::reflagRange(unsigned long, int, int, int)>
c0012195:	83 c4 14             	add    esp,0x14
c0012198:	c3                   	ret    
c0012199:	90                   	nop

c001219a <VAS::mapOtherVASIn(bool, VAS*)>:
c001219a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001219f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00121a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00121ad:	19 c0                	sbb    eax,eax
c00121af:	83 ca 03             	or     edx,0x3
c00121b2:	83 e0 fc             	and    eax,0xfffffffc
c00121b5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121bc:	0f 20 d8             	mov    eax,cr3
c00121bf:	0f 22 d8             	mov    cr3,eax
c00121c2:	c3                   	ret    
c00121c3:	90                   	nop

c00121c4 <VAS::~VAS()>:
c00121c4:	83 ec 2c             	sub    esp,0x2c
c00121c7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00121cf:	e8 90 bb 00 00       	call   c001dd64 <lockScheduler()>
c00121d4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00121db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121de:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121e4:	83 ec 04             	sub    esp,0x4
c00121e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00121eb:	6a 01                	push   0x1
c00121ed:	50                   	push   eax
c00121ee:	e8 a7 ff ff ff       	call   c001219a <VAS::mapOtherVASIn(bool, VAS*)>
c00121f3:	83 c4 10             	add    esp,0x10
c00121f6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00121fe:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012206:	0f 8f d7 00 00 00    	jg     c00122e3 <VAS::~VAS()+0x11f>
c001220c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012210:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012213:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012217:	c1 e2 02             	shl    edx,0x2
c001221a:	01 d0                	add    eax,edx
c001221c:	8b 00                	mov    eax,DWORD PTR [eax]
c001221e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012226:	83 e0 01             	and    eax,0x1
c0012229:	0f 84 ab 00 00 00    	je     c00122da <VAS::~VAS()+0x116>
c001222f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012237:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001223f:	7f 75                	jg     c00122b6 <VAS::~VAS()+0xf2>
c0012241:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012245:	c1 e0 0a             	shl    eax,0xa
c0012248:	89 c2                	mov    edx,eax
c001224a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001224e:	01 d0                	add    eax,edx
c0012250:	c1 e0 0c             	shl    eax,0xc
c0012253:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012257:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001225c:	8b 00                	mov    eax,DWORD PTR [eax]
c001225e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012261:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012267:	83 ec 04             	sub    esp,0x4
c001226a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001226e:	6a 01                	push   0x1
c0012270:	50                   	push   eax
c0012271:	e8 08 fd ff ff       	call   c0011f7e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012276:	83 c4 10             	add    esp,0x10
c0012279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001227d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012281:	8b 00                	mov    eax,DWORD PTR [eax]
c0012283:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012287:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001228b:	25 01 04 00 00       	and    eax,0x401
c0012290:	3d 01 04 00 00       	cmp    eax,0x401
c0012295:	75 19                	jne    c00122b0 <VAS::~VAS()+0xec>
c0012297:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001229b:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122a0:	83 ec 0c             	sub    esp,0xc
c00122a3:	50                   	push   eax
c00122a4:	e8 b2 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c00122a9:	83 c4 10             	add    esp,0x10
c00122ac:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122b0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122b4:	eb 81                	jmp    c0012237 <VAS::~VAS()+0x73>
c00122b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ba:	25 00 04 00 00       	and    eax,0x400
c00122bf:	74 19                	je     c00122da <VAS::~VAS()+0x116>
c00122c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122c5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122ca:	83 ec 0c             	sub    esp,0xc
c00122cd:	50                   	push   eax
c00122ce:	e8 88 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c00122d3:	83 c4 10             	add    esp,0x10
c00122d6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122da:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122de:	e9 1b ff ff ff       	jmp    c00121fe <VAS::~VAS()+0x3a>
c00122e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122e7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122ea:	83 ec 0c             	sub    esp,0xc
c00122ed:	50                   	push   eax
c00122ee:	e8 d6 fc ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c00122f3:	83 c4 10             	add    esp,0x10
c00122f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122fa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00122fd:	83 ec 0c             	sub    esp,0xc
c0012300:	50                   	push   eax
c0012301:	e8 55 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c0012306:	83 c4 10             	add    esp,0x10
c0012309:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001230d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012311:	c1 e0 02             	shl    eax,0x2
c0012314:	83 ec 08             	sub    esp,0x8
c0012317:	50                   	push   eax
c0012318:	68 70 a5 02 c0       	push   0xc002a570
c001231d:	e8 7b 0b 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0012322:	83 c4 10             	add    esp,0x10
c0012325:	e8 3c ba 00 00       	call   c001dd66 <unlockScheduler()>
c001232a:	90                   	nop
c001232b:	83 c4 2c             	add    esp,0x2c
c001232e:	c3                   	ret    
c001232f:	90                   	nop

c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012330:	55                   	push   ebp
c0012331:	57                   	push   edi
c0012332:	56                   	push   esi
c0012333:	53                   	push   ebx
c0012334:	83 ec 1c             	sub    esp,0x1c
c0012337:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001233b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001233f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012345:	77 08                	ja     c001234f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012347:	0f 20 d8             	mov    eax,cr3
c001234a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001234d:	75 47                	jne    c0012396 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001234f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012353:	09 d8                	or     eax,ebx
c0012355:	a9 ff 0f 00 00       	test   eax,0xfff
c001235a:	75 57                	jne    c00123b3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001235c:	89 de                	mov    esi,ebx
c001235e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012361:	c1 ee 16             	shr    esi,0x16
c0012364:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001236b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001236f:	74 54                	je     c00123c5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012371:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012375:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001237b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001237f:	c1 e6 0c             	shl    esi,0xc
c0012382:	c1 eb 0a             	shr    ebx,0xa
c0012385:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001238b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001238e:	83 c4 1c             	add    esp,0x1c
c0012391:	5b                   	pop    ebx
c0012392:	5e                   	pop    esi
c0012393:	5f                   	pop    edi
c0012394:	5d                   	pop    ebp
c0012395:	c3                   	ret    
c0012396:	83 ec 0c             	sub    esp,0xc
c0012399:	68 90 a5 02 c0       	push   0xc002a590
c001239e:	e8 fa 0a 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00123a3:	83 c4 10             	add    esp,0x10
c00123a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123aa:	09 d8                	or     eax,ebx
c00123ac:	a9 ff 0f 00 00       	test   eax,0xfff
c00123b1:	74 a9                	je     c001235c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123b3:	83 ec 0c             	sub    esp,0xc
c00123b6:	68 f8 a5 02 c0       	push   0xc002a5f8
c00123bb:	e8 c9 81 00 00       	call   c001a589 <Krnl::panic(char const*)>
c00123c0:	83 c4 10             	add    esp,0x10
c00123c3:	eb 97                	jmp    c001235c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123c9:	e8 17 db ff ff       	call   c000fee5 <Phys::allocatePage()>
c00123ce:	89 c5                	mov    ebp,eax
c00123d0:	e8 09 fa ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c00123d5:	83 ec 0c             	sub    esp,0xc
c00123d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00123dc:	6a 01                	push   0x1
c00123de:	e8 60 f7 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c00123e3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00123ea:	6a 01                	push   0x1
c00123ec:	50                   	push   eax
c00123ed:	55                   	push   ebp
c00123ee:	81 cd 07 04 00 00    	or     ebp,0x407
c00123f4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00123f8:	51                   	push   ecx
c00123f9:	e8 26 02 00 00       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123fe:	83 c4 1c             	add    esp,0x1c
c0012401:	68 00 10 00 00       	push   0x1000
c0012406:	6a 00                	push   0x0
c0012408:	50                   	push   eax
c0012409:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001240d:	e8 66 e3 fe ff       	call   c0000778 <memset>
c0012412:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012416:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012419:	e8 ab fb ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c001241e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012422:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012425:	83 c4 10             	add    esp,0x10
c0012428:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001242b:	e9 41 ff ff ff       	jmp    c0012371 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012430 <VAS::allocatePages(int, int)>:
c0012430:	55                   	push   ebp
c0012431:	57                   	push   edi
c0012432:	56                   	push   esi
c0012433:	53                   	push   ebx
c0012434:	83 ec 1c             	sub    esp,0x1c
c0012437:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001243b:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0012440:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012446:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001244c:	83 e0 01             	and    eax,0x1
c001244f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012453:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012457:	0f 85 cc 00 00 00    	jne    c0012529 <VAS::allocatePages(int, int)+0xf9>
c001245d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012460:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012464:	85 c0                	test   eax,eax
c0012466:	0f 84 a1 00 00 00    	je     c001250d <VAS::allocatePages(int, int)+0xdd>
c001246c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012470:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012474:	c1 e6 0c             	shl    esi,0xc
c0012477:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001247b:	85 c0                	test   eax,eax
c001247d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012480:	7e 33                	jle    c00124b5 <VAS::allocatePages(int, int)+0x85>
c0012482:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012486:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001248a:	81 cd 00 04 00 00    	or     ebp,0x400
c0012490:	e8 50 da ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012495:	55                   	push   ebp
c0012496:	53                   	push   ebx
c0012497:	50                   	push   eax
c0012498:	57                   	push   edi
c0012499:	e8 92 fe ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c001249e:	83 c4 10             	add    esp,0x10
c00124a1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124a6:	74 03                	je     c00124ab <VAS::allocatePages(int, int)+0x7b>
c00124a8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124ab:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124b1:	39 de                	cmp    esi,ebx
c00124b3:	75 db                	jne    c0012490 <VAS::allocatePages(int, int)+0x60>
c00124b5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ba:	75 12                	jne    c00124ce <VAS::allocatePages(int, int)+0x9e>
c00124bc:	0f 20 d8             	mov    eax,cr3
c00124bf:	0f 22 d8             	mov    cr3,eax
c00124c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124c6:	83 c4 1c             	add    esp,0x1c
c00124c9:	5b                   	pop    ebx
c00124ca:	5e                   	pop    esi
c00124cb:	5f                   	pop    edi
c00124cc:	5d                   	pop    ebp
c00124cd:	c3                   	ret    
c00124ce:	c1 ee 0a             	shr    esi,0xa
c00124d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124d5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00124db:	c1 eb 0a             	shr    ebx,0xa
c00124de:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00124e4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124ea:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124f0:	39 c3                	cmp    ebx,eax
c00124f2:	77 ce                	ja     c00124c2 <VAS::allocatePages(int, int)+0x92>
c00124f4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124f7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124fd:	39 d8                	cmp    eax,ebx
c00124ff:	73 f3                	jae    c00124f4 <VAS::allocatePages(int, int)+0xc4>
c0012501:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012505:	83 c4 1c             	add    esp,0x1c
c0012508:	5b                   	pop    ebx
c0012509:	5e                   	pop    esi
c001250a:	5f                   	pop    edi
c001250b:	5d                   	pop    ebp
c001250c:	c3                   	ret    
c001250d:	83 ec 0c             	sub    esp,0xc
c0012510:	68 1c a6 02 c0       	push   0xc002a61c
c0012515:	e8 6f 80 00 00       	call   c001a589 <Krnl::panic(char const*)>
c001251a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001251d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012521:	83 c4 10             	add    esp,0x10
c0012524:	e9 43 ff ff ff       	jmp    c001246c <VAS::allocatePages(int, int)+0x3c>
c0012529:	83 ec 0c             	sub    esp,0xc
c001252c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012530:	e8 0e f6 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0012535:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012539:	83 c4 10             	add    esp,0x10
c001253c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012541:	0f 87 9b 00 00 00    	ja     c00125e2 <VAS::allocatePages(int, int)+0x1b2>
c0012547:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001254b:	85 d2                	test   edx,edx
c001254d:	7e 3c                	jle    c001258b <VAS::allocatePages(int, int)+0x15b>
c001254f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012553:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012557:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001255b:	c1 e5 0c             	shl    ebp,0xc
c001255e:	81 ce 00 04 00 00    	or     esi,0x400
c0012564:	01 dd                	add    ebp,ebx
c0012566:	e8 7a d9 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001256b:	56                   	push   esi
c001256c:	53                   	push   ebx
c001256d:	50                   	push   eax
c001256e:	57                   	push   edi
c001256f:	e8 bc fd ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012574:	83 c4 10             	add    esp,0x10
c0012577:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001257c:	74 03                	je     c0012581 <VAS::allocatePages(int, int)+0x151>
c001257e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012581:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012587:	39 dd                	cmp    ebp,ebx
c0012589:	75 db                	jne    c0012566 <VAS::allocatePages(int, int)+0x136>
c001258b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012590:	0f 84 26 ff ff ff    	je     c00124bc <VAS::allocatePages(int, int)+0x8c>
c0012596:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001259a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001259e:	89 d3                	mov    ebx,edx
c00125a0:	c1 e0 0c             	shl    eax,0xc
c00125a3:	c1 eb 0a             	shr    ebx,0xa
c00125a6:	01 d0                	add    eax,edx
c00125a8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125ae:	c1 e8 0a             	shr    eax,0xa
c00125b1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125b7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125bc:	2d 00 00 40 00       	sub    eax,0x400000
c00125c1:	39 c3                	cmp    ebx,eax
c00125c3:	0f 87 f9 fe ff ff    	ja     c00124c2 <VAS::allocatePages(int, int)+0x92>
c00125c9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125cc:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125d2:	39 d8                	cmp    eax,ebx
c00125d4:	73 f3                	jae    c00125c9 <VAS::allocatePages(int, int)+0x199>
c00125d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125da:	83 c4 1c             	add    esp,0x1c
c00125dd:	5b                   	pop    ebx
c00125de:	5e                   	pop    esi
c00125df:	5f                   	pop    edi
c00125e0:	5d                   	pop    ebp
c00125e1:	c3                   	ret    
c00125e2:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00125e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125ed:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00125f4:	0f 84 4d ff ff ff    	je     c0012547 <VAS::allocatePages(int, int)+0x117>
c00125fa:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012602:	e9 40 ff ff ff       	jmp    c0012547 <VAS::allocatePages(int, int)+0x117>
c0012607:	90                   	nop

c0012608 <VAS::setCPUSpecific(unsigned long)>:
c0012608:	83 ec 0c             	sub    esp,0xc
c001260b:	6a 05                	push   0x5
c001260d:	68 00 00 40 c2       	push   0xc2400000
c0012612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001261a:	e8 11 fd ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c001261f:	83 c4 1c             	add    esp,0x1c
c0012622:	c3                   	ret    
c0012623:	90                   	nop

c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012624:	55                   	push   ebp
c0012625:	57                   	push   edi
c0012626:	56                   	push   esi
c0012627:	53                   	push   ebx
c0012628:	83 ec 1c             	sub    esp,0x1c
c001262b:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0012630:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012634:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001263a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001263e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012644:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012648:	83 e0 01             	and    eax,0x1
c001264b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001264f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012653:	85 c0                	test   eax,eax
c0012655:	7e 39                	jle    c0012690 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012657:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001265b:	89 f3                	mov    ebx,esi
c001265d:	c1 e0 0c             	shl    eax,0xc
c0012660:	01 f0                	add    eax,esi
c0012662:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012666:	55                   	push   ebp
c0012667:	53                   	push   ebx
c0012668:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001266c:	29 f0                	sub    eax,esi
c001266e:	01 d8                	add    eax,ebx
c0012670:	50                   	push   eax
c0012671:	57                   	push   edi
c0012672:	e8 b9 fc ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012677:	83 c4 10             	add    esp,0x10
c001267a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001267f:	74 03                	je     c0012684 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012681:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012684:	81 c3 00 10 00 00    	add    ebx,0x1000
c001268a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001268e:	75 d6                	jne    c0012666 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012690:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012695:	75 10                	jne    c00126a7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012697:	0f 20 d8             	mov    eax,cr3
c001269a:	0f 22 d8             	mov    cr3,eax
c001269d:	83 c4 1c             	add    esp,0x1c
c00126a0:	89 f0                	mov    eax,esi
c00126a2:	5b                   	pop    ebx
c00126a3:	5e                   	pop    esi
c00126a4:	5f                   	pop    edi
c00126a5:	5d                   	pop    ebp
c00126a6:	c3                   	ret    
c00126a7:	89 f3                	mov    ebx,esi
c00126a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126ad:	c1 eb 0a             	shr    ebx,0xa
c00126b0:	c1 e0 0c             	shl    eax,0xc
c00126b3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126b9:	01 f0                	add    eax,esi
c00126bb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126c1:	c1 e8 0a             	shr    eax,0xa
c00126c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126c9:	2d 00 00 40 00       	sub    eax,0x400000
c00126ce:	39 c3                	cmp    ebx,eax
c00126d0:	77 cb                	ja     c001269d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00126d2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126d5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126db:	39 d8                	cmp    eax,ebx
c00126dd:	73 f3                	jae    c00126d2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00126df:	83 c4 1c             	add    esp,0x1c
c00126e2:	89 f0                	mov    eax,esi
c00126e4:	5b                   	pop    ebx
c00126e5:	5e                   	pop    esi
c00126e6:	5f                   	pop    edi
c00126e7:	5d                   	pop    ebp
c00126e8:	c3                   	ret    
c00126e9:	90                   	nop

c00126ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00126ea:	55                   	push   ebp
c00126eb:	57                   	push   edi
c00126ec:	56                   	push   esi
c00126ed:	53                   	push   ebx
c00126ee:	83 ec 1c             	sub    esp,0x1c
c00126f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126f5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00126f9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00126fd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012701:	a9 ff 0f 00 00       	test   eax,0xfff
c0012706:	75 4a                	jne    c0012752 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012708:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001270c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001270f:	c1 eb 16             	shr    ebx,0x16
c0012712:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012719:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001271d:	74 4d                	je     c001276c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001271f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012723:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012727:	c1 e8 0a             	shr    eax,0xa
c001272a:	80 fa 01             	cmp    dl,0x1
c001272d:	19 d2                	sbb    edx,edx
c001272f:	c1 e3 0c             	shl    ebx,0xc
c0012732:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012736:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001273c:	25 fc 0f 00 00       	and    eax,0xffc
c0012741:	01 d8                	add    eax,ebx
c0012743:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001274a:	83 c4 1c             	add    esp,0x1c
c001274d:	5b                   	pop    ebx
c001274e:	5e                   	pop    esi
c001274f:	5f                   	pop    edi
c0012750:	5d                   	pop    ebp
c0012751:	c3                   	ret    
c0012752:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012756:	83 ec 0c             	sub    esp,0xc
c0012759:	68 48 a6 02 c0       	push   0xc002a648
c001275e:	e8 26 7e 00 00       	call   c001a589 <Krnl::panic(char const*)>
c0012763:	83 c4 10             	add    esp,0x10
c0012766:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001276a:	eb 9c                	jmp    c0012708 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001276c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012770:	e8 70 d7 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012775:	89 c5                	mov    ebp,eax
c0012777:	e8 62 f6 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c001277c:	83 ec 0c             	sub    esp,0xc
c001277f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012783:	6a 01                	push   0x1
c0012785:	e8 b9 f3 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c001278a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012791:	6a 01                	push   0x1
c0012793:	50                   	push   eax
c0012794:	55                   	push   ebp
c0012795:	81 cd 07 04 00 00    	or     ebp,0x407
c001279b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001279f:	51                   	push   ecx
c00127a0:	e8 7f fe ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127a5:	83 c4 1c             	add    esp,0x1c
c00127a8:	68 00 10 00 00       	push   0x1000
c00127ad:	6a 00                	push   0x0
c00127af:	50                   	push   eax
c00127b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127b4:	e8 bf df fe ff       	call   c0000778 <memset>
c00127b9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127bd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127c0:	e8 04 f8 ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c00127c5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00127c8:	83 c4 10             	add    esp,0x10
c00127cb:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00127ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00127d2:	e9 48 ff ff ff       	jmp    c001271f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00127d7:	90                   	nop

c00127d8 <VAS::VAS(bool)>:
c00127d8:	53                   	push   ebx
c00127d9:	83 ec 28             	sub    esp,0x28
c00127dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00127e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00127ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00127fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127fe:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012802:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012805:	e8 db d6 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001280a:	89 c2                	mov    edx,eax
c001280c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012810:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012813:	e8 c6 f5 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0012818:	89 c3                	mov    ebx,eax
c001281a:	83 ec 0c             	sub    esp,0xc
c001281d:	6a 01                	push   0x1
c001281f:	e8 1f f3 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0012824:	83 c4 10             	add    esp,0x10
c0012827:	89 c2                	mov    edx,eax
c0012829:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012830:	83 ec 0c             	sub    esp,0xc
c0012833:	6a 03                	push   0x3
c0012835:	6a 01                	push   0x1
c0012837:	52                   	push   edx
c0012838:	50                   	push   eax
c0012839:	53                   	push   ebx
c001283a:	e8 e5 fd ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001283f:	83 c4 20             	add    esp,0x20
c0012842:	89 c2                	mov    edx,eax
c0012844:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012848:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001284b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012853:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001285b:	7f 1c                	jg     c0012879 <VAS::VAS(bool)+0xa1>
c001285d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012861:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012864:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012868:	c1 e2 02             	shl    edx,0x2
c001286b:	01 d0                	add    eax,edx
c001286d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012873:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012877:	eb da                	jmp    c0012853 <VAS::VAS(bool)+0x7b>
c0012879:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012881:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012889:	7f 7a                	jg     c0012905 <VAS::VAS(bool)+0x12d>
c001288b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001288f:	2d 00 02 00 00       	sub    eax,0x200
c0012894:	c1 e0 0c             	shl    eax,0xc
c0012897:	83 c8 03             	or     eax,0x3
c001289a:	89 c2                	mov    edx,eax
c001289c:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00128a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128a7:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128ad:	83 e0 10             	and    eax,0x10
c00128b0:	84 c0                	test   al,al
c00128b2:	74 07                	je     c00128bb <VAS::VAS(bool)+0xe3>
c00128b4:	b8 00 01 00 00       	mov    eax,0x100
c00128b9:	eb 05                	jmp    c00128c0 <VAS::VAS(bool)+0xe8>
c00128bb:	b8 00 00 00 00       	mov    eax,0x0
c00128c0:	09 d0                	or     eax,edx
c00128c2:	89 c1                	mov    ecx,eax
c00128c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128cf:	c1 e2 02             	shl    edx,0x2
c00128d2:	01 d0                	add    eax,edx
c00128d4:	89 ca                	mov    edx,ecx
c00128d6:	89 10                	mov    DWORD PTR [eax],edx
c00128d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128dc:	2d 40 03 00 00       	sub    eax,0x340
c00128e1:	83 f8 7f             	cmp    eax,0x7f
c00128e4:	77 16                	ja     c00128fc <VAS::VAS(bool)+0x124>
c00128e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128f1:	c1 e2 02             	shl    edx,0x2
c00128f4:	01 d0                	add    eax,edx
c00128f6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128fc:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012900:	e9 7c ff ff ff       	jmp    c0012881 <VAS::VAS(bool)+0xa9>
c0012905:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c001290a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012910:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012916:	83 e0 10             	and    eax,0x10
c0012919:	84 c0                	test   al,al
c001291b:	74 07                	je     c0012924 <VAS::VAS(bool)+0x14c>
c001291d:	b8 03 41 00 00       	mov    eax,0x4103
c0012922:	eb 05                	jmp    c0012929 <VAS::VAS(bool)+0x151>
c0012924:	b8 03 40 00 00       	mov    eax,0x4003
c0012929:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001292d:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012930:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012936:	89 02                	mov    DWORD PTR [edx],eax
c0012938:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c001293d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012943:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012949:	83 ec 08             	sub    esp,0x8
c001294c:	50                   	push   eax
c001294d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012951:	e8 b2 fc ff ff       	call   c0012608 <VAS::setCPUSpecific(unsigned long)>
c0012956:	83 c4 10             	add    esp,0x10
c0012959:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001295d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012960:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0012965:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001296b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012971:	83 e0 10             	and    eax,0x10
c0012974:	84 c0                	test   al,al
c0012976:	74 07                	je     c001297f <VAS::VAS(bool)+0x1a7>
c0012978:	b8 00 01 00 00       	mov    eax,0x100
c001297d:	eb 05                	jmp    c0012984 <VAS::VAS(bool)+0x1ac>
c001297f:	b8 00 00 00 00       	mov    eax,0x0
c0012984:	09 c2                	or     edx,eax
c0012986:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001298a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001298d:	05 fc 0f 00 00       	add    eax,0xffc
c0012992:	83 ca 03             	or     edx,0x3
c0012995:	89 10                	mov    DWORD PTR [eax],edx
c0012997:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c001299c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129a2:	83 ec 0c             	sub    esp,0xc
c00129a5:	50                   	push   eax
c00129a6:	e8 05 1c 00 00       	call   c00145b0 <Device::getName()>
c00129ab:	83 c4 10             	add    esp,0x10
c00129ae:	83 ec 08             	sub    esp,0x8
c00129b1:	68 79 a7 02 c0       	push   0xc002a779
c00129b6:	50                   	push   eax
c00129b7:	e8 04 df fe ff       	call   c00008c0 <strcmp>
c00129bc:	83 c4 10             	add    esp,0x10
c00129bf:	85 c0                	test   eax,eax
c00129c1:	0f 94 c0             	sete   al
c00129c4:	84 c0                	test   al,al
c00129c6:	74 70                	je     c0012a38 <VAS::VAS(bool)+0x260>
c00129c8:	e8 7a b3 00 00       	call   c001dd47 <disableIRQs()>
c00129cd:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00129d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129d8:	05 7c 09 00 00       	add    eax,0x97c
c00129dd:	83 ec 0c             	sub    esp,0xc
c00129e0:	50                   	push   eax
c00129e1:	e8 d6 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129e6:	83 c4 10             	add    esp,0x10
c00129e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129ee:	89 c3                	mov    ebx,eax
c00129f0:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00129f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129fb:	05 7c 09 00 00       	add    eax,0x97c
c0012a00:	83 ec 0c             	sub    esp,0xc
c0012a03:	50                   	push   eax
c0012a04:	e8 b3 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a09:	83 c4 10             	add    esp,0x10
c0012a0c:	83 ec 08             	sub    esp,0x8
c0012a0f:	50                   	push   eax
c0012a10:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a14:	e8 91 f5 ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0012a19:	83 c4 10             	add    esp,0x10
c0012a1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a23:	6a 11                	push   0x11
c0012a25:	53                   	push   ebx
c0012a26:	50                   	push   eax
c0012a27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a2b:	e8 00 f9 ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a30:	83 c4 10             	add    esp,0x10
c0012a33:	e8 1d b3 00 00       	call   c001dd55 <enableIRQs()>
c0012a38:	90                   	nop
c0012a39:	83 c4 28             	add    esp,0x28
c0012a3c:	5b                   	pop    ebx
c0012a3d:	c3                   	ret    

c0012a3e <VAS::evict(unsigned long)>:
c0012a3e:	55                   	push   ebp
c0012a3f:	57                   	push   edi
c0012a40:	56                   	push   esi
c0012a41:	53                   	push   ebx
c0012a42:	83 ec 0c             	sub    esp,0xc
c0012a45:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0012a49:	e8 36 f2 ff ff       	call   c0011c84 <Virt::allocateSwapfilePage()>
c0012a4e:	89 c7                	mov    edi,eax
c0012a50:	a1 0c d3 02 c0       	mov    eax,ds:0xc002d30c
c0012a55:	85 c0                	test   eax,eax
c0012a57:	7e 3d                	jle    c0012a96 <VAS::evict(unsigned long)+0x58>
c0012a59:	89 ee                	mov    esi,ebp
c0012a5b:	31 db                	xor    ebx,ebx
c0012a5d:	83 ec 0c             	sub    esp,0xc
c0012a60:	57                   	push   edi
c0012a61:	e8 0c f2 ff ff       	call   c0011c72 <Virt::swapIDToSector(unsigned long)>
c0012a66:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a69:	01 d8                	add    eax,ebx
c0012a6b:	6a 01                	push   0x1
c0012a6d:	31 d2                	xor    edx,edx
c0012a6f:	43                   	inc    ebx
c0012a70:	52                   	push   edx
c0012a71:	81 c6 00 02 00 00    	add    esi,0x200
c0012a77:	50                   	push   eax
c0012a78:	0f be 05 18 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d318
c0012a7f:	ff 34 85 7c e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1784]
c0012a86:	e8 c9 3c 00 00       	call   c0016754 <LogicalDisk::write(unsigned long long, int, void*)>
c0012a8b:	83 c4 20             	add    esp,0x20
c0012a8e:	39 1d 0c d3 02 c0    	cmp    DWORD PTR ds:0xc002d30c,ebx
c0012a94:	7f c7                	jg     c0012a5d <VAS::evict(unsigned long)+0x1f>
c0012a96:	83 ec 08             	sub    esp,0x8
c0012a99:	c1 e7 0b             	shl    edi,0xb
c0012a9c:	55                   	push   ebp
c0012a9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012aa1:	e8 04 f5 ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0012aa6:	83 c4 0c             	add    esp,0xc
c0012aa9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012aab:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012ab1:	09 d7                	or     edi,edx
c0012ab3:	89 38                	mov    DWORD PTR [eax],edi
c0012ab5:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c0012aba:	40                   	inc    eax
c0012abb:	a3 e4 e4 02 c0       	mov    ds:0xc002e4e4,eax
c0012ac0:	0f 20 da             	mov    edx,cr3
c0012ac3:	0f 22 da             	mov    cr3,edx
c0012ac6:	50                   	push   eax
c0012ac7:	55                   	push   ebp
c0012ac8:	68 87 a7 02 c0       	push   0xc002a787
c0012acd:	e8 cb 03 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0012ad2:	83 c4 1c             	add    esp,0x1c
c0012ad5:	5b                   	pop    ebx
c0012ad6:	5e                   	pop    esi
c0012ad7:	5f                   	pop    edi
c0012ad8:	5d                   	pop    ebp
c0012ad9:	c3                   	ret    

c0012ada <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012ada:	55                   	push   ebp
c0012adb:	57                   	push   edi
c0012adc:	56                   	push   esi
c0012add:	53                   	push   ebx
c0012ade:	83 ec 0c             	sub    esp,0xc
c0012ae1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012ae5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012aeb:	0f 84 d1 00 00 00    	je     c0012bc2 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012af1:	56                   	push   esi
c0012af2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012af6:	e8 af f4 ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0012afb:	5b                   	pop    ebx
c0012afc:	85 c0                	test   eax,eax
c0012afe:	5f                   	pop    edi
c0012aff:	89 c3                	mov    ebx,eax
c0012b01:	0f 84 bb 00 00 00    	je     c0012bc2 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012b07:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b09:	31 c0                	xor    eax,eax
c0012b0b:	89 fa                	mov    edx,edi
c0012b0d:	81 e2 01 04 00 00    	and    edx,0x401
c0012b13:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012b19:	0f 85 a5 00 00 00    	jne    c0012bc4 <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012b1f:	e8 c1 d3 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012b24:	c1 ef 0b             	shr    edi,0xb
c0012b27:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b29:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012b2f:	09 c2                	or     edx,eax
c0012b31:	81 ca 01 08 00 00    	or     edx,0x801
c0012b37:	89 13                	mov    DWORD PTR [ebx],edx
c0012b39:	8b 0d 0c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d30c
c0012b3f:	85 c9                	test   ecx,ecx
c0012b41:	7e 3d                	jle    c0012b80 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012b43:	89 f5                	mov    ebp,esi
c0012b45:	31 db                	xor    ebx,ebx
c0012b47:	83 ec 0c             	sub    esp,0xc
c0012b4a:	57                   	push   edi
c0012b4b:	e8 22 f1 ff ff       	call   c0011c72 <Virt::swapIDToSector(unsigned long)>
c0012b50:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b53:	01 d8                	add    eax,ebx
c0012b55:	6a 01                	push   0x1
c0012b57:	31 d2                	xor    edx,edx
c0012b59:	43                   	inc    ebx
c0012b5a:	52                   	push   edx
c0012b5b:	81 c5 00 02 00 00    	add    ebp,0x200
c0012b61:	50                   	push   eax
c0012b62:	0f be 05 18 d3 02 c0 	movsx  eax,BYTE PTR ds:0xc002d318
c0012b69:	ff 34 85 7c e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1784]
c0012b70:	e8 73 3b 00 00       	call   c00166e8 <LogicalDisk::read(unsigned long long, int, void*)>
c0012b75:	83 c4 20             	add    esp,0x20
c0012b78:	39 1d 0c d3 02 c0    	cmp    DWORD PTR ds:0xc002d30c,ebx
c0012b7e:	7f c7                	jg     c0012b47 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012b80:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c0012b85:	48                   	dec    eax
c0012b86:	52                   	push   edx
c0012b87:	a3 e4 e4 02 c0       	mov    ds:0xc002e4e4,eax
c0012b8c:	50                   	push   eax
c0012b8d:	56                   	push   esi
c0012b8e:	68 9c a7 02 c0       	push   0xc002a79c
c0012b93:	e8 05 03 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0012b98:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012b9b:	e8 b4 f0 ff ff       	call   c0011c54 <Virt::freeSwapfilePage(unsigned long)>
c0012ba0:	e8 c1 b1 00 00       	call   c001dd66 <unlockScheduler()>
c0012ba5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ba9:	83 c4 10             	add    esp,0x10
c0012bac:	25 ff 0f 00 00       	and    eax,0xfff
c0012bb1:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012bb6:	77 14                	ja     c0012bcc <VAS::tryLoadBackOffDisk(unsigned long)+0xf2>
c0012bb8:	0f 20 d8             	mov    eax,cr3
c0012bbb:	0f 22 d8             	mov    cr3,eax
c0012bbe:	b0 01                	mov    al,0x1
c0012bc0:	eb 02                	jmp    c0012bc4 <VAS::tryLoadBackOffDisk(unsigned long)+0xea>
c0012bc2:	31 c0                	xor    eax,eax
c0012bc4:	83 c4 0c             	add    esp,0xc
c0012bc7:	5b                   	pop    ebx
c0012bc8:	5e                   	pop    esi
c0012bc9:	5f                   	pop    edi
c0012bca:	5d                   	pop    ebp
c0012bcb:	c3                   	ret    
c0012bcc:	83 ec 0c             	sub    esp,0xc
c0012bcf:	68 b1 a7 02 c0       	push   0xc002a7b1
c0012bd4:	e8 c4 02 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0012bd9:	83 c4 10             	add    esp,0x10
c0012bdc:	eb da                	jmp    c0012bb8 <VAS::tryLoadBackOffDisk(unsigned long)+0xde>

c0012bde <VAS::scanForEviction()>:
c0012bde:	57                   	push   edi
c0012bdf:	56                   	push   esi
c0012be0:	53                   	push   ebx
c0012be1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012be5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012be8:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012bee:	75 0e                	jne    c0012bfe <VAS::scanForEviction()+0x20>
c0012bf0:	89 da                	mov    edx,ebx
c0012bf2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012bf5:	c1 ea 16             	shr    edx,0x16
c0012bf8:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012bfc:	74 46                	je     c0012c44 <VAS::scanForEviction()+0x66>
c0012bfe:	53                   	push   ebx
c0012bff:	56                   	push   esi
c0012c00:	e8 a5 f3 ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0012c05:	5a                   	pop    edx
c0012c06:	8b 38                	mov    edi,DWORD PTR [eax]
c0012c08:	59                   	pop    ecx
c0012c09:	89 f8                	mov    eax,edi
c0012c0b:	25 00 0c 00 00       	and    eax,0xc00
c0012c10:	3d 00 0c 00 00       	cmp    eax,0xc00
c0012c15:	74 3d                	je     c0012c54 <VAS::scanForEviction()+0x76>
c0012c17:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012c1d:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012c23:	76 2a                	jbe    c0012c4f <VAS::scanForEviction()+0x71>
c0012c25:	31 db                	xor    ebx,ebx
c0012c27:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012c2e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c34:	75 c8                	jne    c0012bfe <VAS::scanForEviction()+0x20>
c0012c36:	89 da                	mov    edx,ebx
c0012c38:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c3b:	c1 ea 16             	shr    edx,0x16
c0012c3e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c42:	75 ba                	jne    c0012bfe <VAS::scanForEviction()+0x20>
c0012c44:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012c4a:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c4d:	eb 99                	jmp    c0012be8 <VAS::scanForEviction()+0xa>
c0012c4f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c52:	eb 94                	jmp    c0012be8 <VAS::scanForEviction()+0xa>
c0012c54:	f7 c7 01 00 00 00    	test   edi,0x1
c0012c5a:	74 bb                	je     c0012c17 <VAS::scanForEviction()+0x39>
c0012c5c:	83 ec 08             	sub    esp,0x8
c0012c5f:	53                   	push   ebx
c0012c60:	56                   	push   esi
c0012c61:	e8 d8 fd ff ff       	call   c0012a3e <VAS::evict(unsigned long)>
c0012c66:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012c6d:	83 c4 10             	add    esp,0x10
c0012c70:	89 f8                	mov    eax,edi
c0012c72:	5b                   	pop    ebx
c0012c73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c78:	5e                   	pop    esi
c0012c79:	5f                   	pop    edi
c0012c7a:	c3                   	ret    

c0012c7b <mapVASFirstTime>:
c0012c7b:	55                   	push   ebp
c0012c7c:	57                   	push   edi
c0012c7d:	56                   	push   esi
c0012c7e:	53                   	push   ebx
c0012c7f:	83 ec 0c             	sub    esp,0xc
c0012c82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c87:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012c8a:	4a                   	dec    edx
c0012c8b:	0f 84 8e 00 00 00    	je     c0012d1f <mapVASFirstTime+0xa4>
c0012c91:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012c94:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012c97:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012c9c:	c1 e5 15             	shl    ebp,0x15
c0012c9f:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012ca4:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012caa:	29 eb                	sub    ebx,ebp
c0012cac:	29 ee                	sub    esi,ebp
c0012cae:	e8 32 d2 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012cb3:	83 ec 0c             	sub    esp,0xc
c0012cb6:	68 03 04 00 00       	push   0x403
c0012cbb:	6a 01                	push   0x1
c0012cbd:	53                   	push   ebx
c0012cbe:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012cc4:	50                   	push   eax
c0012cc5:	57                   	push   edi
c0012cc6:	e8 59 f9 ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ccb:	83 c4 20             	add    esp,0x20
c0012cce:	39 f3                	cmp    ebx,esi
c0012cd0:	75 dc                	jne    c0012cae <mapVASFirstTime+0x33>
c0012cd2:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012cd7:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012cdc:	29 ee                	sub    esi,ebp
c0012cde:	29 e8                	sub    eax,ebp
c0012ce0:	89 c5                	mov    ebp,eax
c0012ce2:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012ce6:	19 db                	sbb    ebx,ebx
c0012ce8:	e8 f8 d1 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012ced:	83 e3 04             	and    ebx,0x4
c0012cf0:	83 ec 0c             	sub    esp,0xc
c0012cf3:	81 c3 03 04 00 00    	add    ebx,0x403
c0012cf9:	53                   	push   ebx
c0012cfa:	6a 01                	push   0x1
c0012cfc:	56                   	push   esi
c0012cfd:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d03:	50                   	push   eax
c0012d04:	57                   	push   edi
c0012d05:	e8 1a f9 ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d0a:	83 c4 20             	add    esp,0x20
c0012d0d:	39 f5                	cmp    ebp,esi
c0012d0f:	75 d1                	jne    c0012ce2 <mapVASFirstTime+0x67>
c0012d11:	0f 20 d8             	mov    eax,cr3
c0012d14:	0f 22 d8             	mov    cr3,eax
c0012d17:	83 c4 0c             	add    esp,0xc
c0012d1a:	5b                   	pop    ebx
c0012d1b:	5e                   	pop    esi
c0012d1c:	5f                   	pop    edi
c0012d1d:	5d                   	pop    ebp
c0012d1e:	c3                   	ret    
c0012d1f:	83 ec 0c             	sub    esp,0xc
c0012d22:	68 c1 a7 02 c0       	push   0xc002a7c1
c0012d27:	e8 71 01 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0012d2c:	83 c4 10             	add    esp,0x10
c0012d2f:	83 c4 0c             	add    esp,0xc
c0012d32:	5b                   	pop    ebx
c0012d33:	5e                   	pop    esi
c0012d34:	5f                   	pop    edi
c0012d35:	5d                   	pop    ebp
c0012d36:	c3                   	ret    

c0012d37 <__cxa_atexit>:
c0012d37:	31 c0                	xor    eax,eax
c0012d39:	c3                   	ret    

c0012d3a <__cxa_finalize>:
c0012d3a:	c3                   	ret    

c0012d3b <__stack_chk_fail>:
c0012d3b:	55                   	push   ebp
c0012d3c:	89 e5                	mov    ebp,esp
c0012d3e:	83 ec 14             	sub    esp,0x14
c0012d41:	68 da a7 02 c0       	push   0xc002a7da
c0012d46:	e8 52 01 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0012d4b:	58                   	pop    eax
c0012d4c:	5a                   	pop    edx
c0012d4d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d50:	68 2a a8 02 c0       	push   0xc002a82a
c0012d55:	e8 43 01 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0012d5a:	59                   	pop    ecx
c0012d5b:	58                   	pop    eax
c0012d5c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d5f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d62:	68 2a a8 02 c0       	push   0xc002a82a
c0012d67:	e8 31 01 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0012d6c:	5a                   	pop    edx
c0012d6d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d70:	59                   	pop    ecx
c0012d71:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d73:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d76:	68 2a a8 02 c0       	push   0xc002a82a
c0012d7b:	e8 1d 01 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0012d80:	5a                   	pop    edx
c0012d81:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d84:	59                   	pop    ecx
c0012d85:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d87:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d89:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d8c:	68 2a a8 02 c0       	push   0xc002a82a
c0012d91:	e8 07 01 00 00       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0012d96:	c7 04 24 32 a8 02 c0 	mov    DWORD PTR [esp],0xc002a832
c0012d9d:	e8 e7 77 00 00       	call   c001a589 <Krnl::panic(char const*)>
c0012da2:	83 c4 10             	add    esp,0x10
c0012da5:	c9                   	leave  
c0012da6:	c3                   	ret    

c0012da7 <__cxa_pure_virtual>:
c0012da7:	83 ec 18             	sub    esp,0x18
c0012daa:	68 4a a8 02 c0       	push   0xc002a84a
c0012daf:	e8 d5 77 00 00       	call   c001a589 <Krnl::panic(char const*)>
c0012db4:	83 c4 1c             	add    esp,0x1c
c0012db7:	c3                   	ret    

c0012db8 <operator new[](unsigned long)>:
c0012db8:	e9 86 ca ff ff       	jmp    c000f843 <malloc>

c0012dbd <operator delete(void*, unsigned long)>:
c0012dbd:	e9 a1 ca ff ff       	jmp    c000f863 <rfree>

c0012dc2 <operator delete[](void*)>:
c0012dc2:	e9 9c ca ff ff       	jmp    c000f863 <rfree>

c0012dc7 <operator delete[](void*, unsigned long)>:
c0012dc7:	e9 97 ca ff ff       	jmp    c000f863 <rfree>

c0012dcc <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012dcc:	57                   	push   edi
c0012dcd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012dd2:	56                   	push   esi
c0012dd3:	be 60 a8 02 c0       	mov    esi,0xc002a860
c0012dd8:	53                   	push   ebx
c0012dd9:	83 ec 40             	sub    esp,0x40
c0012ddc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012de0:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012de4:	fc                   	cld    
c0012de5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012de7:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012deb:	83 f9 3e             	cmp    ecx,0x3e
c0012dee:	7e 05                	jle    c0012df5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012df0:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012df5:	89 df                	mov    edi,ebx
c0012df7:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012dfb:	eb 02                	jmp    c0012dff <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012dfd:	89 c7                	mov    edi,eax
c0012dff:	31 d2                	xor    edx,edx
c0012e01:	46                   	inc    esi
c0012e02:	89 f8                	mov    eax,edi
c0012e04:	f7 f1                	div    ecx
c0012e06:	39 cf                	cmp    edi,ecx
c0012e08:	73 f3                	jae    c0012dfd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e0a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e0d:	eb 02                	jmp    c0012e11 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e0f:	89 c3                	mov    ebx,eax
c0012e11:	31 d2                	xor    edx,edx
c0012e13:	4e                   	dec    esi
c0012e14:	89 d8                	mov    eax,ebx
c0012e16:	f7 f1                	div    ecx
c0012e18:	39 cb                	cmp    ebx,ecx
c0012e1a:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e1e:	88 16                	mov    BYTE PTR [esi],dl
c0012e20:	73 ed                	jae    c0012e0f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e22:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e26:	83 c4 40             	add    esp,0x40
c0012e29:	5b                   	pop    ebx
c0012e2a:	5e                   	pop    esi
c0012e2b:	5f                   	pop    edi
c0012e2c:	c3                   	ret    

c0012e2d <Dbg::logc(char)>:
c0012e2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e31:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e36:	ec                   	in     al,dx
c0012e37:	a8 20                	test   al,0x20
c0012e39:	74 fb                	je     c0012e36 <Dbg::logc(char)+0x9>
c0012e3b:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e40:	88 c8                	mov    al,cl
c0012e42:	ee                   	out    dx,al
c0012e43:	c3                   	ret    

c0012e44 <Dbg::logs(char*)>:
c0012e44:	53                   	push   ebx
c0012e45:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e49:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e4c:	84 c0                	test   al,al
c0012e4e:	74 0f                	je     c0012e5f <Dbg::logs(char*)+0x1b>
c0012e50:	50                   	push   eax
c0012e51:	43                   	inc    ebx
c0012e52:	e8 d6 ff ff ff       	call   c0012e2d <Dbg::logc(char)>
c0012e57:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e5a:	5a                   	pop    edx
c0012e5b:	84 c0                	test   al,al
c0012e5d:	75 f1                	jne    c0012e50 <Dbg::logs(char*)+0xc>
c0012e5f:	5b                   	pop    ebx
c0012e60:	c3                   	ret    

c0012e61 <Dbg::logWriteInt(unsigned int)>:
c0012e61:	83 ec 10             	sub    esp,0x10
c0012e64:	6a 0a                	push   0xa
c0012e66:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e6a:	50                   	push   eax
c0012e6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e6f:	e8 58 ff ff ff       	call   c0012dcc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e74:	50                   	push   eax
c0012e75:	e8 ca ff ff ff       	call   c0012e44 <Dbg::logs(char*)>
c0012e7a:	83 c4 20             	add    esp,0x20
c0012e7d:	c3                   	ret    

c0012e7e <Dbg::logWriteIntBase(unsigned int, int)>:
c0012e7e:	83 ec 10             	sub    esp,0x10
c0012e81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e85:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e89:	50                   	push   eax
c0012e8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e8e:	e8 39 ff ff ff       	call   c0012dcc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e93:	50                   	push   eax
c0012e94:	e8 ab ff ff ff       	call   c0012e44 <Dbg::logs(char*)>
c0012e99:	83 c4 20             	add    esp,0x20
c0012e9c:	c3                   	ret    

c0012e9d <Dbg::kprintf(char const*, ...)>:
c0012e9d:	55                   	push   ebp
c0012e9e:	57                   	push   edi
c0012e9f:	56                   	push   esi
c0012ea0:	53                   	push   ebx
c0012ea1:	83 ec 0c             	sub    esp,0xc
c0012ea4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ea8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012eac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012eb0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012eb3:	84 c0                	test   al,al
c0012eb5:	74 4a                	je     c0012f01 <Dbg::kprintf(char const*, ...)+0x64>
c0012eb7:	31 db                	xor    ebx,ebx
c0012eb9:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012ebc:	3c 25                	cmp    al,0x25
c0012ebe:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012ec1:	0f 85 e4 00 00 00    	jne    c0012fab <Dbg::kprintf(char const*, ...)+0x10e>
c0012ec7:	83 c3 02             	add    ebx,0x2
c0012eca:	8a 07                	mov    al,BYTE PTR [edi]
c0012ecc:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012ecf:	83 e8 25             	sub    eax,0x25
c0012ed2:	3c 53                	cmp    al,0x53
c0012ed4:	0f 87 ba 00 00 00    	ja     c0012f94 <Dbg::kprintf(char const*, ...)+0xf7>
c0012eda:	0f b6 c0             	movzx  eax,al
c0012edd:	ff 24 85 a0 a8 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5760]
c0012ee4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ee8:	89 c8                	mov    eax,ecx
c0012eea:	83 c1 04             	add    ecx,0x4
c0012eed:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ef1:	ff 30                	push   DWORD PTR [eax]
c0012ef3:	e8 4c ff ff ff       	call   c0012e44 <Dbg::logs(char*)>
c0012ef8:	58                   	pop    eax
c0012ef9:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012efd:	84 c0                	test   al,al
c0012eff:	75 b8                	jne    c0012eb9 <Dbg::kprintf(char const*, ...)+0x1c>
c0012f01:	83 c4 0c             	add    esp,0xc
c0012f04:	5b                   	pop    ebx
c0012f05:	5e                   	pop    esi
c0012f06:	5f                   	pop    edi
c0012f07:	5d                   	pop    ebp
c0012f08:	c3                   	ret    
c0012f09:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f0d:	89 d0                	mov    eax,edx
c0012f0f:	83 c2 04             	add    edx,0x4
c0012f12:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f16:	ff 30                	push   DWORD PTR [eax]
c0012f18:	e8 44 ff ff ff       	call   c0012e61 <Dbg::logWriteInt(unsigned int)>
c0012f1d:	58                   	pop    eax
c0012f1e:	eb d9                	jmp    c0012ef9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f20:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f24:	89 d0                	mov    eax,edx
c0012f26:	83 c2 04             	add    edx,0x4
c0012f29:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f30:	50                   	push   eax
c0012f31:	e8 f7 fe ff ff       	call   c0012e2d <Dbg::logc(char)>
c0012f36:	58                   	pop    eax
c0012f37:	eb c0                	jmp    c0012ef9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f39:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f3d:	89 c8                	mov    eax,ecx
c0012f3f:	83 c1 04             	add    ecx,0x4
c0012f42:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f46:	ff 30                	push   DWORD PTR [eax]
c0012f48:	e8 14 ff ff ff       	call   c0012e61 <Dbg::logWriteInt(unsigned int)>
c0012f4d:	5f                   	pop    edi
c0012f4e:	eb a9                	jmp    c0012ef9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f50:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f54:	89 c8                	mov    eax,ecx
c0012f56:	83 c1 04             	add    ecx,0x4
c0012f59:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f5d:	6a 10                	push   0x10
c0012f5f:	ff 30                	push   DWORD PTR [eax]
c0012f61:	e8 18 ff ff ff       	call   c0012e7e <Dbg::logWriteIntBase(unsigned int, int)>
c0012f66:	59                   	pop    ecx
c0012f67:	5f                   	pop    edi
c0012f68:	eb 8f                	jmp    c0012ef9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f6e:	89 d0                	mov    eax,edx
c0012f70:	83 c2 08             	add    edx,0x8
c0012f73:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f77:	6a 10                	push   0x10
c0012f79:	ff 30                	push   DWORD PTR [eax]
c0012f7b:	e8 fe fe ff ff       	call   c0012e7e <Dbg::logWriteIntBase(unsigned int, int)>
c0012f80:	58                   	pop    eax
c0012f81:	5a                   	pop    edx
c0012f82:	e9 72 ff ff ff       	jmp    c0012ef9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f87:	6a 25                	push   0x25
c0012f89:	e8 9f fe ff ff       	call   c0012e2d <Dbg::logc(char)>
c0012f8e:	58                   	pop    eax
c0012f8f:	e9 65 ff ff ff       	jmp    c0012ef9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f94:	6a 25                	push   0x25
c0012f96:	e8 92 fe ff ff       	call   c0012e2d <Dbg::logc(char)>
c0012f9b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012f9e:	50                   	push   eax
c0012f9f:	e8 89 fe ff ff       	call   c0012e2d <Dbg::logc(char)>
c0012fa4:	5a                   	pop    edx
c0012fa5:	59                   	pop    ecx
c0012fa6:	e9 4e ff ff ff       	jmp    c0012ef9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fab:	50                   	push   eax
c0012fac:	89 eb                	mov    ebx,ebp
c0012fae:	e8 7a fe ff ff       	call   c0012e2d <Dbg::logc(char)>
c0012fb3:	89 fd                	mov    ebp,edi
c0012fb5:	58                   	pop    eax
c0012fb6:	e9 3e ff ff ff       	jmp    c0012ef9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012fbb:	90                   	nop

c0012fbc <File::read(unsigned long long, void*, int*)>:
c0012fbc:	53                   	push   ebx
c0012fbd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fc1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fc5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fcc:	3c 19                	cmp    al,0x19
c0012fce:	77 35                	ja     c0013005 <File::read(unsigned long long, void*, int*)+0x49>
c0012fd0:	8b 04 85 80 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1680]
c0012fd7:	85 c0                	test   eax,eax
c0012fd9:	74 2a                	je     c0013005 <File::read(unsigned long long, void*, int*)+0x49>
c0012fdb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fe1:	85 c0                	test   eax,eax
c0012fe3:	74 20                	je     c0013005 <File::read(unsigned long long, void*, int*)+0x49>
c0012fe5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fe9:	74 21                	je     c001300c <File::read(unsigned long long, void*, int*)+0x50>
c0012feb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ff1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012ff7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fff:	5b                   	pop    ebx
c0013000:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013003:	ff e0                	jmp    eax
c0013005:	b8 0b 00 00 00       	mov    eax,0xb
c001300a:	eb 05                	jmp    c0013011 <File::read(unsigned long long, void*, int*)+0x55>
c001300c:	b8 05 00 00 00       	mov    eax,0x5
c0013011:	5b                   	pop    ebx
c0013012:	c3                   	ret    
c0013013:	90                   	nop

c0013014 <File::write(unsigned long long, void*, int*)>:
c0013014:	53                   	push   ebx
c0013015:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013019:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001301d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013024:	3c 19                	cmp    al,0x19
c0013026:	77 35                	ja     c001305d <File::write(unsigned long long, void*, int*)+0x49>
c0013028:	8b 04 85 80 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1680]
c001302f:	85 c0                	test   eax,eax
c0013031:	74 2a                	je     c001305d <File::write(unsigned long long, void*, int*)+0x49>
c0013033:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013039:	85 c0                	test   eax,eax
c001303b:	74 20                	je     c001305d <File::write(unsigned long long, void*, int*)+0x49>
c001303d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013041:	74 21                	je     c0013064 <File::write(unsigned long long, void*, int*)+0x50>
c0013043:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013045:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013049:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001304f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013053:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013057:	5b                   	pop    ebx
c0013058:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001305b:	ff e0                	jmp    eax
c001305d:	b8 0b 00 00 00       	mov    eax,0xb
c0013062:	eb 05                	jmp    c0013069 <File::write(unsigned long long, void*, int*)+0x55>
c0013064:	b8 05 00 00 00       	mov    eax,0x5
c0013069:	5b                   	pop    ebx
c001306a:	c3                   	ret    
c001306b:	90                   	nop

c001306c <Directory::read(unsigned long long, void*, int*)>:
c001306c:	53                   	push   ebx
c001306d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013071:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013075:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001307c:	3c 19                	cmp    al,0x19
c001307e:	77 35                	ja     c00130b5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013080:	8b 04 85 80 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1680]
c0013087:	85 c0                	test   eax,eax
c0013089:	74 2a                	je     c00130b5 <Directory::read(unsigned long long, void*, int*)+0x49>
c001308b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013091:	85 c0                	test   eax,eax
c0013093:	74 20                	je     c00130b5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013095:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013099:	74 21                	je     c00130bc <Directory::read(unsigned long long, void*, int*)+0x50>
c001309b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001309d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130a1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130af:	5b                   	pop    ebx
c00130b0:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00130b3:	ff e0                	jmp    eax
c00130b5:	b8 0b 00 00 00       	mov    eax,0xb
c00130ba:	eb 05                	jmp    c00130c1 <Directory::read(unsigned long long, void*, int*)+0x55>
c00130bc:	b8 05 00 00 00       	mov    eax,0x5
c00130c1:	5b                   	pop    ebx
c00130c2:	c3                   	ret    
c00130c3:	90                   	nop

c00130c4 <Directory::write(unsigned long long, void*, int*)>:
c00130c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130c8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00130cf:	b8 0b 00 00 00       	mov    eax,0xb
c00130d4:	80 fa 19             	cmp    dl,0x19
c00130d7:	77 18                	ja     c00130f1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00130d9:	8b 14 95 80 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1680]
c00130e0:	85 d2                	test   edx,edx
c00130e2:	74 0d                	je     c00130f1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00130e4:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00130eb:	19 c0                	sbb    eax,eax
c00130ed:	83 e0 0a             	and    eax,0xa
c00130f0:	40                   	inc    eax
c00130f1:	c3                   	ret    

c00130f2 <File::isAtty()>:
c00130f2:	31 c0                	xor    eax,eax
c00130f4:	c3                   	ret    
c00130f5:	90                   	nop

c00130f6 <Directory::isAtty()>:
c00130f6:	31 c0                	xor    eax,eax
c00130f8:	c3                   	ret    
c00130f9:	90                   	nop

c00130fa <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00130fa:	b8 0a 00 00 00       	mov    eax,0xa
c00130ff:	c3                   	ret    

c0013100 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013100:	b8 0a 00 00 00       	mov    eax,0xa
c0013105:	c3                   	ret    

c0013106 <File::~File()>:
c0013106:	83 ec 0c             	sub    esp,0xc
c0013109:	ba 5c aa 02 c0       	mov    edx,0xc002aa5c
c001310e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013112:	89 10                	mov    DWORD PTR [eax],edx
c0013114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013118:	83 ec 0c             	sub    esp,0xc
c001311b:	50                   	push   eax
c001311c:	e8 c1 e7 ff ff       	call   c00118e2 <UnixFile::~UnixFile()>
c0013121:	83 c4 10             	add    esp,0x10
c0013124:	90                   	nop
c0013125:	83 c4 0c             	add    esp,0xc
c0013128:	c3                   	ret    
c0013129:	90                   	nop

c001312a <File::~File()>:
c001312a:	83 ec 0c             	sub    esp,0xc
c001312d:	83 ec 0c             	sub    esp,0xc
c0013130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013134:	e8 cd ff ff ff       	call   c0013106 <File::~File()>
c0013139:	83 c4 10             	add    esp,0x10
c001313c:	83 ec 08             	sub    esp,0x8
c001313f:	68 14 01 00 00       	push   0x114
c0013144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013148:	e8 70 fc ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c001314d:	83 c4 10             	add    esp,0x10
c0013150:	83 c4 0c             	add    esp,0xc
c0013153:	c3                   	ret    

c0013154 <Directory::~Directory()>:
c0013154:	83 ec 0c             	sub    esp,0xc
c0013157:	ba 78 aa 02 c0       	mov    edx,0xc002aa78
c001315c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013160:	89 10                	mov    DWORD PTR [eax],edx
c0013162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013166:	83 ec 0c             	sub    esp,0xc
c0013169:	50                   	push   eax
c001316a:	e8 73 e7 ff ff       	call   c00118e2 <UnixFile::~UnixFile()>
c001316f:	83 c4 10             	add    esp,0x10
c0013172:	90                   	nop
c0013173:	83 c4 0c             	add    esp,0xc
c0013176:	c3                   	ret    
c0013177:	90                   	nop

c0013178 <Directory::~Directory()>:
c0013178:	83 ec 0c             	sub    esp,0xc
c001317b:	83 ec 0c             	sub    esp,0xc
c001317e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013182:	e8 cd ff ff ff       	call   c0013154 <Directory::~Directory()>
c0013187:	83 c4 10             	add    esp,0x10
c001318a:	83 ec 08             	sub    esp,0x8
c001318d:	68 14 01 00 00       	push   0x114
c0013192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013196:	e8 22 fc ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c001319b:	83 c4 10             	add    esp,0x10
c001319e:	83 c4 0c             	add    esp,0xc
c00131a1:	c3                   	ret    

c00131a2 <Filesystem::Filesystem()>:
c00131a2:	ba f8 a9 02 c0       	mov    edx,0xc002a9f8
c00131a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131ab:	89 10                	mov    DWORD PTR [eax],edx
c00131ad:	8b 15 f0 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4f0
c00131b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00131ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131be:	a3 f0 e4 02 c0       	mov    ds:0xc002e4f0,eax
c00131c3:	90                   	nop
c00131c4:	c3                   	ret    
c00131c5:	90                   	nop

c00131c6 <Filesystem::~Filesystem()>:
c00131c6:	ba f8 a9 02 c0       	mov    edx,0xc002a9f8
c00131cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131cf:	89 10                	mov    DWORD PTR [eax],edx
c00131d1:	90                   	nop
c00131d2:	c3                   	ret    
c00131d3:	90                   	nop

c00131d4 <Filesystem::~Filesystem()>:
c00131d4:	83 ec 0c             	sub    esp,0xc
c00131d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00131db:	e8 e6 ff ff ff       	call   c00131c6 <Filesystem::~Filesystem()>
c00131e0:	83 c4 04             	add    esp,0x4
c00131e3:	83 ec 08             	sub    esp,0x8
c00131e6:	6a 08                	push   0x8
c00131e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131ec:	e8 cc fb ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c00131f1:	83 c4 10             	add    esp,0x10
c00131f4:	83 c4 0c             	add    esp,0xc
c00131f7:	c3                   	ret    

c00131f8 <Fs::getcwd(Process*, char*, int)>:
c00131f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131fc:	31 c0                	xor    eax,eax
c00131fe:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013201:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013205:	7d 15                	jge    c001321c <Fs::getcwd(Process*, char*, int)+0x24>
c0013207:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001320b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013212:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013215:	84 c9                	test   cl,cl
c0013217:	74 06                	je     c001321f <Fs::getcwd(Process*, char*, int)+0x27>
c0013219:	40                   	inc    eax
c001321a:	eb e2                	jmp    c00131fe <Fs::getcwd(Process*, char*, int)+0x6>
c001321c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001321f:	31 c0                	xor    eax,eax
c0013221:	c3                   	ret    

c0013222 <Fs::initVFS()>:
c0013222:	83 ec 18             	sub    esp,0x18
c0013225:	6a 08                	push   0x8
c0013227:	e8 17 c6 ff ff       	call   c000f843 <malloc>
c001322c:	89 04 24             	mov    DWORD PTR [esp],eax
c001322f:	e8 a4 dc 00 00       	call   c0020ed8 <FAT::FAT()>
c0013234:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001323b:	e8 03 c6 ff ff       	call   c000f843 <malloc>
c0013240:	89 04 24             	mov    DWORD PTR [esp],eax
c0013243:	e8 e8 ee 00 00       	call   c0022130 <ISO9660::ISO9660()>
c0013248:	83 c4 1c             	add    esp,0x1c
c001324b:	c3                   	ret    

c001324c <Fs::standardiseFiles(char*, char const*, char const*)>:
c001324c:	55                   	push   ebp
c001324d:	57                   	push   edi
c001324e:	56                   	push   esi
c001324f:	53                   	push   ebx
c0013250:	81 ec 10 04 00 00    	sub    esp,0x410
c0013256:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001325d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013264:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001326b:	68 00 04 00 00       	push   0x400
c0013270:	6a 00                	push   0x0
c0013272:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013276:	56                   	push   esi
c0013277:	e8 fc d4 fe ff       	call   c0000778 <memset>
c001327c:	83 c4 10             	add    esp,0x10
c001327f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013283:	75 0b                	jne    c0013290 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013285:	50                   	push   eax
c0013286:	50                   	push   eax
c0013287:	57                   	push   edi
c0013288:	56                   	push   esi
c0013289:	e8 a6 d5 fe ff       	call   c0000834 <strcpy>
c001328e:	eb 41                	jmp    c00132d1 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013290:	8a 07                	mov    al,BYTE PTR [edi]
c0013292:	3c 5c                	cmp    al,0x5c
c0013294:	74 04                	je     c001329a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013296:	3c 2f                	cmp    al,0x2f
c0013298:	75 18                	jne    c00132b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001329a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001329d:	3c 60                	cmp    al,0x60
c001329f:	7e 03                	jle    c00132a4 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00132a1:	83 e8 20             	sub    eax,0x20
c00132a4:	88 04 24             	mov    BYTE PTR [esp],al
c00132a7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132ae:	50                   	push   eax
c00132af:	50                   	push   eax
c00132b0:	eb 18                	jmp    c00132ca <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00132b2:	50                   	push   eax
c00132b3:	50                   	push   eax
c00132b4:	55                   	push   ebp
c00132b5:	56                   	push   esi
c00132b6:	e8 79 d5 fe ff       	call   c0000834 <strcpy>
c00132bb:	5a                   	pop    edx
c00132bc:	59                   	pop    ecx
c00132bd:	68 45 c1 02 c0       	push   0xc002c145
c00132c2:	56                   	push   esi
c00132c3:	e8 ac d6 fe ff       	call   c0000974 <strcat>
c00132c8:	5d                   	pop    ebp
c00132c9:	58                   	pop    eax
c00132ca:	57                   	push   edi
c00132cb:	56                   	push   esi
c00132cc:	e8 a3 d6 fe ff       	call   c0000974 <strcat>
c00132d1:	83 c4 10             	add    esp,0x10
c00132d4:	8a 04 24             	mov    al,BYTE PTR [esp]
c00132d7:	3c 60                	cmp    al,0x60
c00132d9:	7e 03                	jle    c00132de <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00132db:	83 e8 20             	sub    eax,0x20
c00132de:	88 04 24             	mov    BYTE PTR [esp],al
c00132e1:	88 03                	mov    BYTE PTR [ebx],al
c00132e3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132ea:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00132f0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00132f4:	bf 03 00 00 00       	mov    edi,0x3
c00132f9:	b8 03 00 00 00       	mov    eax,0x3
c00132fe:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013301:	84 d2                	test   dl,dl
c0013303:	0f 84 91 00 00 00    	je     c001339a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013309:	8d 4f 01             	lea    ecx,[edi+0x1]
c001330c:	80 fa 5c             	cmp    dl,0x5c
c001330f:	74 05                	je     c0013316 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013311:	80 fa 2f             	cmp    dl,0x2f
c0013314:	75 12                	jne    c0013328 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013316:	89 c5                	mov    ebp,eax
c0013318:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001331d:	74 09                	je     c0013328 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001331f:	40                   	inc    eax
c0013320:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013324:	89 cf                	mov    edi,ecx
c0013326:	eb d6                	jmp    c00132fe <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013328:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001332d:	75 5b                	jne    c001338a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001332f:	80 fa 2e             	cmp    dl,0x2e
c0013332:	75 56                	jne    c001338a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013334:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013338:	74 19                	je     c0013353 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c001333a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001333f:	74 53                	je     c0013394 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013341:	89 f9                	mov    ecx,edi
c0013343:	41                   	inc    ecx
c0013344:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013347:	80 fa 2f             	cmp    dl,0x2f
c001334a:	74 f7                	je     c0013343 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001334c:	80 fa 5c             	cmp    dl,0x5c
c001334f:	74 f2                	je     c0013343 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013351:	eb d1                	jmp    c0013324 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013353:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013358:	74 3a                	je     c0013394 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001335a:	83 f8 03             	cmp    eax,0x3
c001335d:	74 c5                	je     c0013324 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001335f:	41                   	inc    ecx
c0013360:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013363:	80 fa 2f             	cmp    dl,0x2f
c0013366:	74 f7                	je     c001335f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013368:	80 fa 5c             	cmp    dl,0x5c
c001336b:	74 f2                	je     c001335f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001336d:	48                   	dec    eax
c001336e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013372:	75 06                	jne    c001337a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013374:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013378:	eb f3                	jmp    c001336d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c001337a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001337e:	74 07                	je     c0013387 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013380:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013384:	48                   	dec    eax
c0013385:	eb f3                	jmp    c001337a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013387:	40                   	inc    eax
c0013388:	eb 9a                	jmp    c0013324 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001338a:	80 fa 2f             	cmp    dl,0x2f
c001338d:	74 95                	je     c0013324 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001338f:	80 fa 5c             	cmp    dl,0x5c
c0013392:	74 90                	je     c0013324 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013394:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013397:	40                   	inc    eax
c0013398:	eb 8a                	jmp    c0013324 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001339a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001339e:	83 ec 0c             	sub    esp,0xc
c00133a1:	53                   	push   ebx
c00133a2:	e8 ed d3 fe ff       	call   c0000794 <strlen>
c00133a7:	83 c4 10             	add    esp,0x10
c00133aa:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00133af:	75 26                	jne    c00133d7 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00133b1:	83 ec 0c             	sub    esp,0xc
c00133b4:	53                   	push   ebx
c00133b5:	e8 da d3 fe ff       	call   c0000794 <strlen>
c00133ba:	83 c4 10             	add    esp,0x10
c00133bd:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00133c2:	74 26                	je     c00133ea <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00133c4:	83 ec 0c             	sub    esp,0xc
c00133c7:	53                   	push   ebx
c00133c8:	e8 c7 d3 fe ff       	call   c0000794 <strlen>
c00133cd:	83 c4 10             	add    esp,0x10
c00133d0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00133d5:	eb c7                	jmp    c001339e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00133d7:	83 ec 0c             	sub    esp,0xc
c00133da:	53                   	push   ebx
c00133db:	e8 b4 d3 fe ff       	call   c0000794 <strlen>
c00133e0:	83 c4 10             	add    esp,0x10
c00133e3:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133e8:	74 c7                	je     c00133b1 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00133ea:	81 c4 0c 04 00 00    	add    esp,0x40c
c00133f0:	5b                   	pop    ebx
c00133f1:	5e                   	pop    esi
c00133f2:	5f                   	pop    edi
c00133f3:	5d                   	pop    ebp
c00133f4:	c3                   	ret    
c00133f5:	90                   	nop

c00133f6 <File::File(char const*, Process*)>:
c00133f6:	83 ec 0c             	sub    esp,0xc
c00133f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fd:	83 ec 08             	sub    esp,0x8
c0013400:	6a 00                	push   0x0
c0013402:	50                   	push   eax
c0013403:	e8 f8 e2 ff ff       	call   c0011700 <UnixFile::UnixFile(int)>
c0013408:	83 c4 10             	add    esp,0x10
c001340b:	ba 5c aa 02 c0       	mov    edx,0xc002aa5c
c0013410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013414:	89 10                	mov    DWORD PTR [eax],edx
c0013416:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001341a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013424:	83 c0 0d             	add    eax,0xd
c0013427:	83 ec 04             	sub    esp,0x4
c001342a:	52                   	push   edx
c001342b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001342f:	50                   	push   eax
c0013430:	e8 17 fe ff ff       	call   c001324c <Fs::standardiseFiles(char*, char const*, char const*)>
c0013435:	83 c4 10             	add    esp,0x10
c0013438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001343c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001343f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013446:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001344c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013450:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013454:	90                   	nop
c0013455:	83 c4 0c             	add    esp,0xc
c0013458:	c3                   	ret    
c0013459:	90                   	nop

c001345a <File::open(FileOpenMode)>:
c001345a:	53                   	push   ebx
c001345b:	b8 0b 00 00 00       	mov    eax,0xb
c0013460:	83 ec 08             	sub    esp,0x8
c0013463:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013467:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001346e:	80 fa 19             	cmp    dl,0x19
c0013471:	77 40                	ja     c00134b3 <File::open(FileOpenMode)+0x59>
c0013473:	8b 14 95 80 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1680]
c001347a:	85 d2                	test   edx,edx
c001347c:	74 35                	je     c00134b3 <File::open(FileOpenMode)+0x59>
c001347e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013484:	85 d2                	test   edx,edx
c0013486:	74 2b                	je     c00134b3 <File::open(FileOpenMode)+0x59>
c0013488:	b8 06 00 00 00       	mov    eax,0x6
c001348d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013491:	75 20                	jne    c00134b3 <File::open(FileOpenMode)+0x59>
c0013493:	8b 02                	mov    eax,DWORD PTR [edx]
c0013495:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001349b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001349f:	51                   	push   ecx
c00134a0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00134a3:	51                   	push   ecx
c00134a4:	52                   	push   edx
c00134a5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00134a8:	83 c4 10             	add    esp,0x10
c00134ab:	85 c0                	test   eax,eax
c00134ad:	75 04                	jne    c00134b3 <File::open(FileOpenMode)+0x59>
c00134af:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00134b3:	83 c4 08             	add    esp,0x8
c00134b6:	5b                   	pop    ebx
c00134b7:	c3                   	ret    

c00134b8 <File::close()>:
c00134b8:	53                   	push   ebx
c00134b9:	b8 0b 00 00 00       	mov    eax,0xb
c00134be:	83 ec 08             	sub    esp,0x8
c00134c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134c5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134cc:	80 fa 19             	cmp    dl,0x19
c00134cf:	77 41                	ja     c0013512 <File::close()+0x5a>
c00134d1:	8b 1c 95 80 e9 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1680]
c00134d8:	85 db                	test   ebx,ebx
c00134da:	74 36                	je     c0013512 <File::close()+0x5a>
c00134dc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00134e3:	74 2d                	je     c0013512 <File::close()+0x5a>
c00134e5:	b8 05 00 00 00       	mov    eax,0x5
c00134ea:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134ee:	74 22                	je     c0013512 <File::close()+0x5a>
c00134f0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00134f4:	8b 04 95 80 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1680]
c00134fb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013501:	53                   	push   ebx
c0013502:	53                   	push   ebx
c0013503:	8b 10                	mov    edx,DWORD PTR [eax]
c0013505:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001350b:	50                   	push   eax
c001350c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001350f:	83 c4 10             	add    esp,0x10
c0013512:	83 c4 08             	add    esp,0x8
c0013515:	5b                   	pop    ebx
c0013516:	c3                   	ret    
c0013517:	90                   	nop

c0013518 <File::seek(unsigned long long)>:
c0013518:	56                   	push   esi
c0013519:	53                   	push   ebx
c001351a:	b8 0b 00 00 00       	mov    eax,0xb
c001351f:	51                   	push   ecx
c0013520:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013524:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013528:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001352f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013533:	80 fa 19             	cmp    dl,0x19
c0013536:	77 31                	ja     c0013569 <File::seek(unsigned long long)+0x51>
c0013538:	8b 14 95 80 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1680]
c001353f:	85 d2                	test   edx,edx
c0013541:	74 26                	je     c0013569 <File::seek(unsigned long long)+0x51>
c0013543:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013549:	85 d2                	test   edx,edx
c001354b:	74 1c                	je     c0013569 <File::seek(unsigned long long)+0x51>
c001354d:	b8 05 00 00 00       	mov    eax,0x5
c0013552:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013556:	74 11                	je     c0013569 <File::seek(unsigned long long)+0x51>
c0013558:	8b 02                	mov    eax,DWORD PTR [edx]
c001355a:	53                   	push   ebx
c001355b:	51                   	push   ecx
c001355c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013562:	52                   	push   edx
c0013563:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013566:	83 c4 10             	add    esp,0x10
c0013569:	5a                   	pop    edx
c001356a:	5b                   	pop    ebx
c001356b:	5e                   	pop    esi
c001356c:	c3                   	ret    
c001356d:	90                   	nop

c001356e <File::tell(unsigned long long*)>:
c001356e:	83 ec 0c             	sub    esp,0xc
c0013571:	b8 0b 00 00 00       	mov    eax,0xb
c0013576:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001357a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013581:	80 fa 19             	cmp    dl,0x19
c0013584:	77 34                	ja     c00135ba <File::tell(unsigned long long*)+0x4c>
c0013586:	8b 14 95 80 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1680]
c001358d:	85 d2                	test   edx,edx
c001358f:	74 29                	je     c00135ba <File::tell(unsigned long long*)+0x4c>
c0013591:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013597:	85 d2                	test   edx,edx
c0013599:	74 1f                	je     c00135ba <File::tell(unsigned long long*)+0x4c>
c001359b:	b8 05 00 00 00       	mov    eax,0x5
c00135a0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135a4:	74 14                	je     c00135ba <File::tell(unsigned long long*)+0x4c>
c00135a6:	50                   	push   eax
c00135a7:	8b 02                	mov    eax,DWORD PTR [edx]
c00135a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135ad:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135b3:	52                   	push   edx
c00135b4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00135b7:	83 c4 10             	add    esp,0x10
c00135ba:	83 c4 0c             	add    esp,0xc
c00135bd:	c3                   	ret    

c00135be <File::rewind()>:
c00135be:	83 ec 10             	sub    esp,0x10
c00135c1:	6a 00                	push   0x0
c00135c3:	6a 00                	push   0x0
c00135c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135c9:	e8 4a ff ff ff       	call   c0013518 <File::seek(unsigned long long)>
c00135ce:	83 c4 1c             	add    esp,0x1c
c00135d1:	c3                   	ret    

c00135d2 <File::unlink()>:
c00135d2:	83 ec 0c             	sub    esp,0xc
c00135d5:	b8 0b 00 00 00       	mov    eax,0xb
c00135da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135de:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135e5:	80 f9 19             	cmp    cl,0x19
c00135e8:	77 2f                	ja     c0013619 <File::unlink()+0x47>
c00135ea:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c00135f1:	85 c9                	test   ecx,ecx
c00135f3:	74 24                	je     c0013619 <File::unlink()+0x47>
c00135f5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135fb:	85 c9                	test   ecx,ecx
c00135fd:	74 1a                	je     c0013619 <File::unlink()+0x47>
c00135ff:	b8 06 00 00 00       	mov    eax,0x6
c0013604:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013608:	75 0f                	jne    c0013619 <File::unlink()+0x47>
c001360a:	83 c2 0d             	add    edx,0xd
c001360d:	50                   	push   eax
c001360e:	50                   	push   eax
c001360f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013611:	52                   	push   edx
c0013612:	51                   	push   ecx
c0013613:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013616:	83 c4 10             	add    esp,0x10
c0013619:	83 c4 0c             	add    esp,0xc
c001361c:	c3                   	ret    
c001361d:	90                   	nop

c001361e <File::rename(char const*)>:
c001361e:	83 ec 0c             	sub    esp,0xc
c0013621:	b8 0b 00 00 00       	mov    eax,0xb
c0013626:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001362a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013631:	80 f9 19             	cmp    cl,0x19
c0013634:	77 32                	ja     c0013668 <File::rename(char const*)+0x4a>
c0013636:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c001363d:	85 c9                	test   ecx,ecx
c001363f:	74 27                	je     c0013668 <File::rename(char const*)+0x4a>
c0013641:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013647:	85 c9                	test   ecx,ecx
c0013649:	74 1d                	je     c0013668 <File::rename(char const*)+0x4a>
c001364b:	b8 06 00 00 00       	mov    eax,0x6
c0013650:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013654:	75 12                	jne    c0013668 <File::rename(char const*)+0x4a>
c0013656:	83 c2 0d             	add    edx,0xd
c0013659:	50                   	push   eax
c001365a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001365c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013660:	52                   	push   edx
c0013661:	51                   	push   ecx
c0013662:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013665:	83 c4 10             	add    esp,0x10
c0013668:	83 c4 0c             	add    esp,0xc
c001366b:	c3                   	ret    

c001366c <File::chfatattr(unsigned char, unsigned char)>:
c001366c:	57                   	push   edi
c001366d:	b8 0b 00 00 00       	mov    eax,0xb
c0013672:	56                   	push   esi
c0013673:	53                   	push   ebx
c0013674:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013678:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001367c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013687:	80 f9 19             	cmp    cl,0x19
c001368a:	77 37                	ja     c00136c3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001368c:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c0013693:	85 c9                	test   ecx,ecx
c0013695:	74 2c                	je     c00136c3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013697:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001369d:	85 c9                	test   ecx,ecx
c001369f:	74 22                	je     c00136c3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136a1:	b8 06 00 00 00       	mov    eax,0x6
c00136a6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136aa:	75 17                	jne    c00136c3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136ac:	8b 39                	mov    edi,DWORD PTR [ecx]
c00136ae:	89 f0                	mov    eax,esi
c00136b0:	83 c2 0d             	add    edx,0xd
c00136b3:	0f b6 f0             	movzx  esi,al
c00136b6:	0f b6 db             	movzx  ebx,bl
c00136b9:	56                   	push   esi
c00136ba:	53                   	push   ebx
c00136bb:	52                   	push   edx
c00136bc:	51                   	push   ecx
c00136bd:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00136c0:	83 c4 10             	add    esp,0x10
c00136c3:	5b                   	pop    ebx
c00136c4:	5e                   	pop    esi
c00136c5:	5f                   	pop    edi
c00136c6:	c3                   	ret    
c00136c7:	90                   	nop

c00136c8 <File::exists()>:
c00136c8:	83 ec 0c             	sub    esp,0xc
c00136cb:	31 c0                	xor    eax,eax
c00136cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136d1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136d8:	80 f9 19             	cmp    cl,0x19
c00136db:	77 24                	ja     c0013701 <File::exists()+0x39>
c00136dd:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c00136e4:	85 c9                	test   ecx,ecx
c00136e6:	74 19                	je     c0013701 <File::exists()+0x39>
c00136e8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136ee:	85 c9                	test   ecx,ecx
c00136f0:	74 0f                	je     c0013701 <File::exists()+0x39>
c00136f2:	83 c2 0d             	add    edx,0xd
c00136f5:	50                   	push   eax
c00136f6:	50                   	push   eax
c00136f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136f9:	52                   	push   edx
c00136fa:	51                   	push   ecx
c00136fb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00136fe:	83 c4 10             	add    esp,0x10
c0013701:	83 c4 0c             	add    esp,0xc
c0013704:	c3                   	ret    
c0013705:	90                   	nop

c0013706 <File::stat(unsigned long long*, bool*)>:
c0013706:	56                   	push   esi
c0013707:	53                   	push   ebx
c0013708:	50                   	push   eax
c0013709:	b8 0b 00 00 00       	mov    eax,0xb
c001370e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013712:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013716:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001371d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013721:	80 f9 19             	cmp    cl,0x19
c0013724:	77 3d                	ja     c0013763 <File::stat(unsigned long long*, bool*)+0x5d>
c0013726:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c001372d:	85 c9                	test   ecx,ecx
c001372f:	74 32                	je     c0013763 <File::stat(unsigned long long*, bool*)+0x5d>
c0013731:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013737:	85 c9                	test   ecx,ecx
c0013739:	74 28                	je     c0013763 <File::stat(unsigned long long*, bool*)+0x5d>
c001373b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001373d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013741:	74 13                	je     c0013756 <File::stat(unsigned long long*, bool*)+0x50>
c0013743:	83 ec 04             	sub    esp,0x4
c0013746:	56                   	push   esi
c0013747:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001374d:	51                   	push   ecx
c001374e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013751:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013754:	eb 0a                	jmp    c0013760 <File::stat(unsigned long long*, bool*)+0x5a>
c0013756:	53                   	push   ebx
c0013757:	83 c2 0d             	add    edx,0xd
c001375a:	56                   	push   esi
c001375b:	52                   	push   edx
c001375c:	51                   	push   ecx
c001375d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013760:	83 c4 10             	add    esp,0x10
c0013763:	5a                   	pop    edx
c0013764:	5b                   	pop    ebx
c0013765:	5e                   	pop    esi
c0013766:	c3                   	ret    

c0013767 <Fs::setcwd(Process*, char*)>:
c0013767:	55                   	push   ebp
c0013768:	57                   	push   edi
c0013769:	56                   	push   esi
c001376a:	53                   	push   ebx
c001376b:	81 ec 20 02 00 00    	sub    esp,0x220
c0013771:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013778:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001377e:	57                   	push   edi
c001377f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013786:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001378a:	56                   	push   esi
c001378b:	e8 bc fa ff ff       	call   c001324c <Fs::standardiseFiles(char*, char const*, char const*)>
c0013790:	89 34 24             	mov    DWORD PTR [esp],esi
c0013793:	e8 fc cf fe ff       	call   c0000794 <strlen>
c0013798:	83 c4 10             	add    esp,0x10
c001379b:	83 f8 02             	cmp    eax,0x2
c001379e:	77 17                	ja     c00137b7 <Fs::setcwd(Process*, char*)+0x50>
c00137a0:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00137a5:	83 e8 41             	sub    eax,0x41
c00137a8:	83 f8 19             	cmp    eax,0x19
c00137ab:	76 24                	jbe    c00137d1 <Fs::setcwd(Process*, char*)+0x6a>
c00137ad:	b8 03 00 00 00       	mov    eax,0x3
c00137b2:	e9 e0 00 00 00       	jmp    c0013897 <Fs::setcwd(Process*, char*)+0x130>
c00137b7:	83 ec 0c             	sub    esp,0xc
c00137ba:	56                   	push   esi
c00137bb:	e8 d4 cf fe ff       	call   c0000794 <strlen>
c00137c0:	83 c4 10             	add    esp,0x10
c00137c3:	83 f8 03             	cmp    eax,0x3
c00137c6:	75 34                	jne    c00137fc <Fs::setcwd(Process*, char*)+0x95>
c00137c8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00137cd:	75 2d                	jne    c00137fc <Fs::setcwd(Process*, char*)+0x95>
c00137cf:	eb cf                	jmp    c00137a0 <Fs::setcwd(Process*, char*)+0x39>
c00137d1:	8b 14 85 80 e9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1680]
c00137d8:	b8 05 00 00 00       	mov    eax,0x5
c00137dd:	85 d2                	test   edx,edx
c00137df:	0f 84 b2 00 00 00    	je     c0013897 <Fs::setcwd(Process*, char*)+0x130>
c00137e5:	b8 06 00 00 00       	mov    eax,0x6
c00137ea:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00137f1:	0f 85 92 00 00 00    	jne    c0013889 <Fs::setcwd(Process*, char*)+0x122>
c00137f7:	e9 9b 00 00 00       	jmp    c0013897 <Fs::setcwd(Process*, char*)+0x130>
c00137fc:	83 ec 0c             	sub    esp,0xc
c00137ff:	68 14 01 00 00       	push   0x114
c0013804:	e8 3a c0 ff ff       	call   c000f843 <malloc>
c0013809:	83 c4 0c             	add    esp,0xc
c001380c:	89 c3                	mov    ebx,eax
c001380e:	55                   	push   ebp
c001380f:	56                   	push   esi
c0013810:	50                   	push   eax
c0013811:	e8 e0 fb ff ff       	call   c00133f6 <File::File(char const*, Process*)>
c0013816:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001381b:	83 c4 0c             	add    esp,0xc
c001381e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013822:	50                   	push   eax
c0013823:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013827:	50                   	push   eax
c0013828:	53                   	push   ebx
c0013829:	e8 d8 fe ff ff       	call   c0013706 <File::stat(unsigned long long*, bool*)>
c001382e:	83 c4 10             	add    esp,0x10
c0013831:	83 f8 02             	cmp    eax,0x2
c0013834:	74 04                	je     c001383a <Fs::setcwd(Process*, char*)+0xd3>
c0013836:	85 c0                	test   eax,eax
c0013838:	74 1c                	je     c0013856 <Fs::setcwd(Process*, char*)+0xef>
c001383a:	b8 01 00 00 00       	mov    eax,0x1
c001383f:	85 db                	test   ebx,ebx
c0013841:	74 54                	je     c0013897 <Fs::setcwd(Process*, char*)+0x130>
c0013843:	83 ec 0c             	sub    esp,0xc
c0013846:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013848:	53                   	push   ebx
c0013849:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001384c:	83 c4 10             	add    esp,0x10
c001384f:	b8 01 00 00 00       	mov    eax,0x1
c0013854:	eb 41                	jmp    c0013897 <Fs::setcwd(Process*, char*)+0x130>
c0013856:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001385b:	75 1c                	jne    c0013879 <Fs::setcwd(Process*, char*)+0x112>
c001385d:	b8 02 00 00 00       	mov    eax,0x2
c0013862:	85 db                	test   ebx,ebx
c0013864:	74 31                	je     c0013897 <Fs::setcwd(Process*, char*)+0x130>
c0013866:	83 ec 0c             	sub    esp,0xc
c0013869:	8b 03                	mov    eax,DWORD PTR [ebx]
c001386b:	53                   	push   ebx
c001386c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001386f:	83 c4 10             	add    esp,0x10
c0013872:	b8 02 00 00 00       	mov    eax,0x2
c0013877:	eb 1e                	jmp    c0013897 <Fs::setcwd(Process*, char*)+0x130>
c0013879:	85 db                	test   ebx,ebx
c001387b:	74 0c                	je     c0013889 <Fs::setcwd(Process*, char*)+0x122>
c001387d:	83 ec 0c             	sub    esp,0xc
c0013880:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013882:	53                   	push   ebx
c0013883:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013886:	83 c4 10             	add    esp,0x10
c0013889:	50                   	push   eax
c001388a:	50                   	push   eax
c001388b:	56                   	push   esi
c001388c:	57                   	push   edi
c001388d:	e8 a2 cf fe ff       	call   c0000834 <strcpy>
c0013892:	83 c4 10             	add    esp,0x10
c0013895:	31 c0                	xor    eax,eax
c0013897:	81 c4 1c 02 00 00    	add    esp,0x21c
c001389d:	5b                   	pop    ebx
c001389e:	5e                   	pop    esi
c001389f:	5f                   	pop    edi
c00138a0:	5d                   	pop    ebp
c00138a1:	c3                   	ret    

c00138a2 <Directory::Directory(char const*, Process*)>:
c00138a2:	83 ec 0c             	sub    esp,0xc
c00138a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a9:	83 ec 08             	sub    esp,0x8
c00138ac:	6a 00                	push   0x0
c00138ae:	50                   	push   eax
c00138af:	e8 4c de ff ff       	call   c0011700 <UnixFile::UnixFile(int)>
c00138b4:	83 c4 10             	add    esp,0x10
c00138b7:	ba 78 aa 02 c0       	mov    edx,0xc002aa78
c00138bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c0:	89 10                	mov    DWORD PTR [eax],edx
c00138c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138c6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00138cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d0:	83 c0 0d             	add    eax,0xd
c00138d3:	83 ec 04             	sub    esp,0x4
c00138d6:	52                   	push   edx
c00138d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138db:	50                   	push   eax
c00138dc:	e8 6b f9 ff ff       	call   c001324c <Fs::standardiseFiles(char*, char const*, char const*)>
c00138e1:	83 c4 10             	add    esp,0x10
c00138e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00138eb:	8d 50 bf             	lea    edx,[eax-0x41]
c00138ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00138f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138fc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013900:	90                   	nop
c0013901:	83 c4 0c             	add    esp,0xc
c0013904:	c3                   	ret    
c0013905:	90                   	nop

c0013906 <Directory::open()>:
c0013906:	53                   	push   ebx
c0013907:	b8 0b 00 00 00       	mov    eax,0xb
c001390c:	83 ec 08             	sub    esp,0x8
c001390f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013913:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001391a:	80 fa 19             	cmp    dl,0x19
c001391d:	77 3d                	ja     c001395c <Directory::open()+0x56>
c001391f:	8b 14 95 80 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1680]
c0013926:	85 d2                	test   edx,edx
c0013928:	74 32                	je     c001395c <Directory::open()+0x56>
c001392a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013930:	85 d2                	test   edx,edx
c0013932:	74 28                	je     c001395c <Directory::open()+0x56>
c0013934:	b8 06 00 00 00       	mov    eax,0x6
c0013939:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001393d:	75 1d                	jne    c001395c <Directory::open()+0x56>
c001393f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013945:	50                   	push   eax
c0013946:	8b 02                	mov    eax,DWORD PTR [edx]
c0013948:	51                   	push   ecx
c0013949:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001394c:	51                   	push   ecx
c001394d:	52                   	push   edx
c001394e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013951:	83 c4 10             	add    esp,0x10
c0013954:	85 c0                	test   eax,eax
c0013956:	75 04                	jne    c001395c <Directory::open()+0x56>
c0013958:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001395c:	83 c4 08             	add    esp,0x8
c001395f:	5b                   	pop    ebx
c0013960:	c3                   	ret    
c0013961:	90                   	nop

c0013962 <Directory::close()>:
c0013962:	53                   	push   ebx
c0013963:	b8 0b 00 00 00       	mov    eax,0xb
c0013968:	83 ec 08             	sub    esp,0x8
c001396b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001396f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013976:	80 fa 19             	cmp    dl,0x19
c0013979:	77 41                	ja     c00139bc <Directory::close()+0x5a>
c001397b:	8b 1c 95 80 e9 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1680]
c0013982:	85 db                	test   ebx,ebx
c0013984:	74 36                	je     c00139bc <Directory::close()+0x5a>
c0013986:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001398d:	74 2d                	je     c00139bc <Directory::close()+0x5a>
c001398f:	b8 05 00 00 00       	mov    eax,0x5
c0013994:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013998:	74 22                	je     c00139bc <Directory::close()+0x5a>
c001399a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001399e:	8b 04 95 80 e9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1680]
c00139a5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00139ab:	53                   	push   ebx
c00139ac:	53                   	push   ebx
c00139ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00139af:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00139b5:	50                   	push   eax
c00139b6:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00139b9:	83 c4 10             	add    esp,0x10
c00139bc:	83 c4 08             	add    esp,0x8
c00139bf:	5b                   	pop    ebx
c00139c0:	c3                   	ret    
c00139c1:	90                   	nop

c00139c2 <Directory::unlink()>:
c00139c2:	83 ec 0c             	sub    esp,0xc
c00139c5:	b8 0b 00 00 00       	mov    eax,0xb
c00139ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139d5:	80 f9 19             	cmp    cl,0x19
c00139d8:	77 2f                	ja     c0013a09 <Directory::unlink()+0x47>
c00139da:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c00139e1:	85 c9                	test   ecx,ecx
c00139e3:	74 24                	je     c0013a09 <Directory::unlink()+0x47>
c00139e5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139eb:	85 c9                	test   ecx,ecx
c00139ed:	74 1a                	je     c0013a09 <Directory::unlink()+0x47>
c00139ef:	b8 06 00 00 00       	mov    eax,0x6
c00139f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139f8:	75 0f                	jne    c0013a09 <Directory::unlink()+0x47>
c00139fa:	83 c2 0d             	add    edx,0xd
c00139fd:	50                   	push   eax
c00139fe:	50                   	push   eax
c00139ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a01:	52                   	push   edx
c0013a02:	51                   	push   ecx
c0013a03:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a06:	83 c4 10             	add    esp,0x10
c0013a09:	83 c4 0c             	add    esp,0xc
c0013a0c:	c3                   	ret    
c0013a0d:	90                   	nop

c0013a0e <Directory::rename(char const*)>:
c0013a0e:	83 ec 0c             	sub    esp,0xc
c0013a11:	b8 0b 00 00 00       	mov    eax,0xb
c0013a16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a1a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a21:	80 f9 19             	cmp    cl,0x19
c0013a24:	77 32                	ja     c0013a58 <Directory::rename(char const*)+0x4a>
c0013a26:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c0013a2d:	85 c9                	test   ecx,ecx
c0013a2f:	74 27                	je     c0013a58 <Directory::rename(char const*)+0x4a>
c0013a31:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a37:	85 c9                	test   ecx,ecx
c0013a39:	74 1d                	je     c0013a58 <Directory::rename(char const*)+0x4a>
c0013a3b:	b8 06 00 00 00       	mov    eax,0x6
c0013a40:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a44:	75 12                	jne    c0013a58 <Directory::rename(char const*)+0x4a>
c0013a46:	83 c2 0d             	add    edx,0xd
c0013a49:	50                   	push   eax
c0013a4a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a50:	52                   	push   edx
c0013a51:	51                   	push   ecx
c0013a52:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a55:	83 c4 10             	add    esp,0x10
c0013a58:	83 c4 0c             	add    esp,0xc
c0013a5b:	c3                   	ret    

c0013a5c <Directory::exists()>:
c0013a5c:	83 ec 0c             	sub    esp,0xc
c0013a5f:	31 c0                	xor    eax,eax
c0013a61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a65:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a6c:	80 f9 19             	cmp    cl,0x19
c0013a6f:	77 24                	ja     c0013a95 <Directory::exists()+0x39>
c0013a71:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c0013a78:	85 c9                	test   ecx,ecx
c0013a7a:	74 19                	je     c0013a95 <Directory::exists()+0x39>
c0013a7c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a82:	85 c9                	test   ecx,ecx
c0013a84:	74 0f                	je     c0013a95 <Directory::exists()+0x39>
c0013a86:	83 c2 0d             	add    edx,0xd
c0013a89:	50                   	push   eax
c0013a8a:	50                   	push   eax
c0013a8b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a8d:	52                   	push   edx
c0013a8e:	51                   	push   ecx
c0013a8f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013a92:	83 c4 10             	add    esp,0x10
c0013a95:	83 c4 0c             	add    esp,0xc
c0013a98:	c3                   	ret    
c0013a99:	90                   	nop

c0013a9a <Directory::read(dirent*)>:
c0013a9a:	83 ec 1c             	sub    esp,0x1c
c0013a9d:	b8 0b 00 00 00       	mov    eax,0xb
c0013aa2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013aa6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013aad:	80 fa 19             	cmp    dl,0x19
c0013ab0:	77 30                	ja     c0013ae2 <Directory::read(dirent*)+0x48>
c0013ab2:	8b 14 95 80 e9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1680]
c0013ab9:	85 d2                	test   edx,edx
c0013abb:	74 25                	je     c0013ae2 <Directory::read(dirent*)+0x48>
c0013abd:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013ac4:	74 1c                	je     c0013ae2 <Directory::read(dirent*)+0x48>
c0013ac6:	83 ec 0c             	sub    esp,0xc
c0013ac9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013acb:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013acf:	52                   	push   edx
c0013ad0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013ad4:	6a 00                	push   0x0
c0013ad6:	68 10 01 00 00       	push   0x110
c0013adb:	51                   	push   ecx
c0013adc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013adf:	83 c4 20             	add    esp,0x20
c0013ae2:	83 c4 1c             	add    esp,0x1c
c0013ae5:	c3                   	ret    

c0013ae6 <Directory::create()>:
c0013ae6:	83 ec 0c             	sub    esp,0xc
c0013ae9:	b8 0b 00 00 00       	mov    eax,0xb
c0013aee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013af2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013af9:	80 f9 19             	cmp    cl,0x19
c0013afc:	77 2f                	ja     c0013b2d <Directory::create()+0x47>
c0013afe:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c0013b05:	85 c9                	test   ecx,ecx
c0013b07:	74 24                	je     c0013b2d <Directory::create()+0x47>
c0013b09:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b0f:	85 c9                	test   ecx,ecx
c0013b11:	74 1a                	je     c0013b2d <Directory::create()+0x47>
c0013b13:	b8 06 00 00 00       	mov    eax,0x6
c0013b18:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b1c:	75 0f                	jne    c0013b2d <Directory::create()+0x47>
c0013b1e:	83 c2 0d             	add    edx,0xd
c0013b21:	50                   	push   eax
c0013b22:	50                   	push   eax
c0013b23:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b25:	52                   	push   edx
c0013b26:	51                   	push   ecx
c0013b27:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b2a:	83 c4 10             	add    esp,0x10
c0013b2d:	83 c4 0c             	add    esp,0xc
c0013b30:	c3                   	ret    
c0013b31:	90                   	nop

c0013b32 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b32:	b8 0a 00 00 00       	mov    eax,0xa
c0013b37:	c3                   	ret    

c0013b38 <Bus::Bus(char const*)>:
c0013b38:	83 ec 0c             	sub    esp,0xc
c0013b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b3f:	83 ec 08             	sub    esp,0x8
c0013b42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b46:	50                   	push   eax
c0013b47:	e8 68 09 00 00       	call   c00144b4 <Device::Device(char const*)>
c0013b4c:	83 c4 10             	add    esp,0x10
c0013b4f:	ba 94 aa 02 c0       	mov    edx,0xc002aa94
c0013b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b58:	89 10                	mov    DWORD PTR [eax],edx
c0013b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b5e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b68:	90                   	nop
c0013b69:	83 c4 0c             	add    esp,0xc
c0013b6c:	c3                   	ret    
c0013b6d:	90                   	nop

c0013b6e <Bus::~Bus()>:
c0013b6e:	83 ec 0c             	sub    esp,0xc
c0013b71:	ba 94 aa 02 c0       	mov    edx,0xc002aa94
c0013b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b7a:	89 10                	mov    DWORD PTR [eax],edx
c0013b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b80:	83 ec 0c             	sub    esp,0xc
c0013b83:	50                   	push   eax
c0013b84:	e8 0d 06 00 00       	call   c0014196 <Device::~Device()>
c0013b89:	83 c4 10             	add    esp,0x10
c0013b8c:	90                   	nop
c0013b8d:	83 c4 0c             	add    esp,0xc
c0013b90:	c3                   	ret    
c0013b91:	90                   	nop

c0013b92 <Bus::~Bus()>:
c0013b92:	83 ec 0c             	sub    esp,0xc
c0013b95:	83 ec 0c             	sub    esp,0xc
c0013b98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b9c:	e8 cd ff ff ff       	call   c0013b6e <Bus::~Bus()>
c0013ba1:	83 c4 10             	add    esp,0x10
c0013ba4:	83 ec 08             	sub    esp,0x8
c0013ba7:	68 58 01 00 00       	push   0x158
c0013bac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb0:	e8 08 f2 ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0013bb5:	83 c4 10             	add    esp,0x10
c0013bb8:	83 c4 0c             	add    esp,0xc
c0013bbb:	c3                   	ret    

c0013bbc <Buzzer::Buzzer(char const*)>:
c0013bbc:	83 ec 0c             	sub    esp,0xc
c0013bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bc3:	83 ec 08             	sub    esp,0x8
c0013bc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bca:	50                   	push   eax
c0013bcb:	e8 e4 08 00 00       	call   c00144b4 <Device::Device(char const*)>
c0013bd0:	83 c4 10             	add    esp,0x10
c0013bd3:	ba c0 aa 02 c0       	mov    edx,0xc002aac0
c0013bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bdc:	89 10                	mov    DWORD PTR [eax],edx
c0013bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013be2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf0:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013bfa:	90                   	nop
c0013bfb:	83 c4 0c             	add    esp,0xc
c0013bfe:	c3                   	ret    
c0013bff:	90                   	nop

c0013c00 <Buzzer::~Buzzer()>:
c0013c00:	83 ec 0c             	sub    esp,0xc
c0013c03:	ba c0 aa 02 c0       	mov    edx,0xc002aac0
c0013c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c0c:	89 10                	mov    DWORD PTR [eax],edx
c0013c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c12:	83 ec 0c             	sub    esp,0xc
c0013c15:	50                   	push   eax
c0013c16:	e8 7b 05 00 00       	call   c0014196 <Device::~Device()>
c0013c1b:	83 c4 10             	add    esp,0x10
c0013c1e:	90                   	nop
c0013c1f:	83 c4 0c             	add    esp,0xc
c0013c22:	c3                   	ret    
c0013c23:	90                   	nop

c0013c24 <Buzzer::~Buzzer()>:
c0013c24:	83 ec 0c             	sub    esp,0xc
c0013c27:	83 ec 0c             	sub    esp,0xc
c0013c2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c2e:	e8 cd ff ff ff       	call   c0013c00 <Buzzer::~Buzzer()>
c0013c33:	83 c4 10             	add    esp,0x10
c0013c36:	83 ec 08             	sub    esp,0x8
c0013c39:	68 5c 01 00 00       	push   0x15c
c0013c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c42:	e8 76 f1 ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0013c47:	83 c4 10             	add    esp,0x10
c0013c4a:	83 c4 0c             	add    esp,0xc
c0013c4d:	c3                   	ret    

c0013c4e <Buzzer::stop()>:
c0013c4e:	83 ec 14             	sub    esp,0x14
c0013c51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c55:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c57:	6a 00                	push   0x0
c0013c59:	50                   	push   eax
c0013c5a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c5d:	83 c4 1c             	add    esp,0x1c
c0013c60:	c3                   	ret    

c0013c61 <beepThread(void*)>:
c0013c61:	53                   	push   ebx
c0013c62:	83 ec 08             	sub    esp,0x8
c0013c65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c69:	e8 f8 a0 00 00       	call   c001dd66 <unlockScheduler()>
c0013c6e:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c73:	52                   	push   edx
c0013c74:	52                   	push   edx
c0013c75:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013c7b:	52                   	push   edx
c0013c7c:	50                   	push   eax
c0013c7d:	e8 32 a6 00 00       	call   c001e2b4 <nanoSleep(unsigned long long)>
c0013c82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c85:	e8 c4 ff ff ff       	call   c0013c4e <Buzzer::stop()>
c0013c8a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013c92:	83 c4 18             	add    esp,0x18
c0013c95:	5b                   	pop    ebx
c0013c96:	e9 5f a5 00 00       	jmp    c001e1fa <blockTask(TaskState)>
c0013c9b:	90                   	nop

c0013c9c <Buzzer::beep(int, int, bool)>:
c0013c9c:	57                   	push   edi
c0013c9d:	56                   	push   esi
c0013c9e:	53                   	push   ebx
c0013c9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ca3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ca7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cab:	52                   	push   edx
c0013cac:	52                   	push   edx
c0013cad:	8b 06                	mov    eax,DWORD PTR [esi]
c0013caf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cb3:	56                   	push   esi
c0013cb4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013cb7:	83 c4 10             	add    esp,0x10
c0013cba:	89 f8                	mov    eax,edi
c0013cbc:	84 c0                	test   al,al
c0013cbe:	74 1f                	je     c0013cdf <Buzzer::beep(int, int, bool)+0x43>
c0013cc0:	50                   	push   eax
c0013cc1:	50                   	push   eax
c0013cc2:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013cc8:	99                   	cdq    
c0013cc9:	52                   	push   edx
c0013cca:	50                   	push   eax
c0013ccb:	e8 e4 a5 00 00       	call   c001e2b4 <nanoSleep(unsigned long long)>
c0013cd0:	83 c4 10             	add    esp,0x10
c0013cd3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013cd7:	5b                   	pop    ebx
c0013cd8:	5e                   	pop    esi
c0013cd9:	5f                   	pop    edi
c0013cda:	e9 6f ff ff ff       	jmp    c0013c4e <Buzzer::stop()>
c0013cdf:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013ce5:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0013cea:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013cf2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013cf6:	c7 44 24 14 61 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c61
c0013cfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d02:	5b                   	pop    ebx
c0013d03:	5e                   	pop    esi
c0013d04:	5f                   	pop    edi
c0013d05:	e9 8c a1 00 00       	jmp    c001de96 <Process::createThread(void (*)(void*), void*, int)>

c0013d0a <User::loadClockSettings(int)>:
c0013d0a:	53                   	push   ebx
c0013d0b:	83 ec 14             	sub    esp,0x14
c0013d0e:	68 14 01 00 00       	push   0x114
c0013d13:	e8 2b bb ff ff       	call   c000f843 <malloc>
c0013d18:	83 c4 0c             	add    esp,0xc
c0013d1b:	89 c3                	mov    ebx,eax
c0013d1d:	ff 35 d4 18 03 c0    	push   DWORD PTR ds:0xc00318d4
c0013d23:	68 e8 aa 02 c0       	push   0xc002aae8
c0013d28:	50                   	push   eax
c0013d29:	e8 c8 f6 ff ff       	call   c00133f6 <File::File(char const*, Process*)>
c0013d2e:	58                   	pop    eax
c0013d2f:	5a                   	pop    edx
c0013d30:	6a 01                	push   0x1
c0013d32:	53                   	push   ebx
c0013d33:	e8 22 f7 ff ff       	call   c001345a <File::open(FileOpenMode)>
c0013d38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d3b:	e8 78 f7 ff ff       	call   c00134b8 <File::close()>
c0013d40:	83 c4 10             	add    esp,0x10
c0013d43:	85 db                	test   ebx,ebx
c0013d45:	74 0f                	je     c0013d56 <User::loadClockSettings(int)+0x4c>
c0013d47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d49:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d4d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d50:	83 c4 08             	add    esp,0x8
c0013d53:	5b                   	pop    ebx
c0013d54:	ff e0                	jmp    eax
c0013d56:	83 c4 08             	add    esp,0x8
c0013d59:	5b                   	pop    ebx
c0013d5a:	c3                   	ret    
c0013d5b:	90                   	nop

c0013d5c <Clock::Clock(char const*)>:
c0013d5c:	83 ec 0c             	sub    esp,0xc
c0013d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d63:	83 ec 08             	sub    esp,0x8
c0013d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d6a:	50                   	push   eax
c0013d6b:	e8 44 07 00 00       	call   c00144b4 <Device::Device(char const*)>
c0013d70:	83 c4 10             	add    esp,0x10
c0013d73:	ba 10 ab 02 c0       	mov    edx,0xc002ab10
c0013d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d7c:	89 10                	mov    DWORD PTR [eax],edx
c0013d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d82:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013d8c:	90                   	nop
c0013d8d:	83 c4 0c             	add    esp,0xc
c0013d90:	c3                   	ret    
c0013d91:	90                   	nop

c0013d92 <Clock::~Clock()>:
c0013d92:	83 ec 0c             	sub    esp,0xc
c0013d95:	ba 10 ab 02 c0       	mov    edx,0xc002ab10
c0013d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d9e:	89 10                	mov    DWORD PTR [eax],edx
c0013da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013da4:	83 ec 0c             	sub    esp,0xc
c0013da7:	50                   	push   eax
c0013da8:	e8 e9 03 00 00       	call   c0014196 <Device::~Device()>
c0013dad:	83 c4 10             	add    esp,0x10
c0013db0:	90                   	nop
c0013db1:	83 c4 0c             	add    esp,0xc
c0013db4:	c3                   	ret    
c0013db5:	90                   	nop

c0013db6 <Clock::~Clock()>:
c0013db6:	83 ec 0c             	sub    esp,0xc
c0013db9:	83 ec 0c             	sub    esp,0xc
c0013dbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dc0:	e8 cd ff ff ff       	call   c0013d92 <Clock::~Clock()>
c0013dc5:	83 c4 10             	add    esp,0x10
c0013dc8:	83 ec 08             	sub    esp,0x8
c0013dcb:	68 58 01 00 00       	push   0x158
c0013dd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dd4:	e8 e4 ef ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0013dd9:	83 c4 10             	add    esp,0x10
c0013ddc:	83 c4 0c             	add    esp,0xc
c0013ddf:	c3                   	ret    

c0013de0 <Clock::timeInSecondsLocal()>:
c0013de0:	53                   	push   ebx
c0013de1:	83 ec 14             	sub    esp,0x14
c0013de4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013de8:	8b 10                	mov    edx,DWORD PTR [eax]
c0013dea:	50                   	push   eax
c0013deb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013dee:	0f b6 0d f8 e4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e4f8
c0013df5:	03 0d fc e4 02 c0    	add    ecx,DWORD PTR ds:0xc002e4fc
c0013dfb:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e01:	89 cb                	mov    ebx,ecx
c0013e03:	c1 fb 1f             	sar    ebx,0x1f
c0013e06:	01 c8                	add    eax,ecx
c0013e08:	11 da                	adc    edx,ebx
c0013e0a:	83 c4 10             	add    esp,0x10
c0013e0d:	31 c9                	xor    ecx,ecx
c0013e0f:	80 3d f9 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4f9,0x0
c0013e16:	74 05                	je     c0013e1d <Clock::timeInSecondsLocal()+0x3d>
c0013e18:	b9 08 07 00 00       	mov    ecx,0x708
c0013e1d:	31 db                	xor    ebx,ebx
c0013e1f:	01 c8                	add    eax,ecx
c0013e21:	11 da                	adc    edx,ebx
c0013e23:	83 c4 08             	add    esp,0x8
c0013e26:	5b                   	pop    ebx
c0013e27:	c3                   	ret    

c0013e28 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e28:	57                   	push   edi
c0013e29:	56                   	push   esi
c0013e2a:	53                   	push   ebx
c0013e2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e33:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e35:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e39:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e3c:	0f b6 05 f8 e4 02 c0 	movzx  eax,BYTE PTR ds:0xc002e4f8
c0013e43:	03 05 fc e4 02 c0    	add    eax,DWORD PTR ds:0xc002e4fc
c0013e49:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e4f:	99                   	cdq    
c0013e50:	29 c6                	sub    esi,eax
c0013e52:	19 d7                	sbb    edi,edx
c0013e54:	89 f0                	mov    eax,esi
c0013e56:	89 fa                	mov    edx,edi
c0013e58:	31 f6                	xor    esi,esi
c0013e5a:	80 3d f9 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4f9,0x0
c0013e61:	74 05                	je     c0013e68 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e63:	be 08 07 00 00       	mov    esi,0x708
c0013e68:	31 ff                	xor    edi,edi
c0013e6a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e6e:	29 f0                	sub    eax,esi
c0013e70:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e74:	19 fa                	sbb    edx,edi
c0013e76:	89 d8                	mov    eax,ebx
c0013e78:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013e7c:	5b                   	pop    ebx
c0013e7d:	5e                   	pop    esi
c0013e7e:	5f                   	pop    edi
c0013e7f:	ff e0                	jmp    eax

c0013e81 <datetimeToSeconds(datetime_t)>:
c0013e81:	55                   	push   ebp
c0013e82:	57                   	push   edi
c0013e83:	56                   	push   esi
c0013e84:	53                   	push   ebx
c0013e85:	83 ec 14             	sub    esp,0x14
c0013e88:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013e8c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e90:	89 d3                	mov    ebx,edx
c0013e92:	0f b6 c6             	movzx  eax,dh
c0013e95:	c1 eb 10             	shr    ebx,0x10
c0013e98:	48                   	dec    eax
c0013e99:	66 81 eb 6c 07       	sub    bx,0x76c
c0013e9e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013ea2:	0f b6 f5             	movzx  esi,ch
c0013ea5:	89 cf                	mov    edi,ecx
c0013ea7:	6b f6 3c             	imul   esi,esi,0x3c
c0013eaa:	c1 ef 10             	shr    edi,0x10
c0013ead:	0f b6 c9             	movzx  ecx,cl
c0013eb0:	89 f8                	mov    eax,edi
c0013eb2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013eb8:	0f b6 f8             	movzx  edi,al
c0013ebb:	0f b6 d2             	movzx  edx,dl
c0013ebe:	01 fe                	add    esi,edi
c0013ec0:	01 f1                	add    ecx,esi
c0013ec2:	0f b7 f3             	movzx  esi,bx
c0013ec5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013ec9:	c1 f9 1f             	sar    ecx,0x1f
c0013ecc:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013ed1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ed5:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013eda:	8b 0c 8d 60 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd54a0]
c0013ee1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013ee5:	76 29                	jbe    c0013f10 <datetimeToSeconds(datetime_t)+0x8f>
c0013ee7:	f6 c3 03             	test   bl,0x3
c0013eea:	75 24                	jne    c0013f10 <datetimeToSeconds(datetime_t)+0x8f>
c0013eec:	31 d2                	xor    edx,edx
c0013eee:	bf 64 00 00 00       	mov    edi,0x64
c0013ef3:	89 d8                	mov    eax,ebx
c0013ef5:	66 f7 f7             	div    di
c0013ef8:	66 85 d2             	test   dx,dx
c0013efb:	75 12                	jne    c0013f0f <datetimeToSeconds(datetime_t)+0x8e>
c0013efd:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f03:	bf 90 01 00 00       	mov    edi,0x190
c0013f08:	99                   	cdq    
c0013f09:	f7 ff                	idiv   edi
c0013f0b:	85 d2                	test   edx,edx
c0013f0d:	75 01                	jne    c0013f10 <datetimeToSeconds(datetime_t)+0x8f>
c0013f0f:	41                   	inc    ecx
c0013f10:	66 83 fb 46          	cmp    bx,0x46
c0013f14:	76 45                	jbe    c0013f5b <datetimeToSeconds(datetime_t)+0xda>
c0013f16:	bb 46 00 00 00       	mov    ebx,0x46
c0013f1b:	bf 64 00 00 00       	mov    edi,0x64
c0013f20:	bd 90 01 00 00       	mov    ebp,0x190
c0013f25:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f2a:	f6 c3 03             	test   bl,0x3
c0013f2d:	75 23                	jne    c0013f52 <datetimeToSeconds(datetime_t)+0xd1>
c0013f2f:	89 d8                	mov    eax,ebx
c0013f31:	99                   	cdq    
c0013f32:	f7 ff                	idiv   edi
c0013f34:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f39:	85 d2                	test   edx,edx
c0013f3b:	75 15                	jne    c0013f52 <datetimeToSeconds(datetime_t)+0xd1>
c0013f3d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f43:	99                   	cdq    
c0013f44:	f7 fd                	idiv   ebp
c0013f46:	83 fa 01             	cmp    edx,0x1
c0013f49:	19 c0                	sbb    eax,eax
c0013f4b:	f7 d0                	not    eax
c0013f4d:	05 6e 01 00 00       	add    eax,0x16e
c0013f52:	01 c1                	add    ecx,eax
c0013f54:	43                   	inc    ebx
c0013f55:	39 f3                	cmp    ebx,esi
c0013f57:	7c cc                	jl     c0013f25 <datetimeToSeconds(datetime_t)+0xa4>
c0013f59:	eb 35                	jmp    c0013f90 <datetimeToSeconds(datetime_t)+0x10f>
c0013f5b:	74 33                	je     c0013f90 <datetimeToSeconds(datetime_t)+0x10f>
c0013f5d:	b8 45 00 00 00       	mov    eax,0x45
c0013f62:	89 c2                	mov    edx,eax
c0013f64:	83 e2 03             	and    edx,0x3
c0013f67:	39 f0                	cmp    eax,esi
c0013f69:	7e 0f                	jle    c0013f7a <datetimeToSeconds(datetime_t)+0xf9>
c0013f6b:	83 fa 01             	cmp    edx,0x1
c0013f6e:	19 d2                	sbb    edx,edx
c0013f70:	48                   	dec    eax
c0013f71:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013f78:	eb e8                	jmp    c0013f62 <datetimeToSeconds(datetime_t)+0xe1>
c0013f7a:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f7f:	85 d2                	test   edx,edx
c0013f81:	75 0b                	jne    c0013f8e <datetimeToSeconds(datetime_t)+0x10d>
c0013f83:	66 83 fb 01          	cmp    bx,0x1
c0013f87:	19 c0                	sbb    eax,eax
c0013f89:	05 6e 01 00 00       	add    eax,0x16e
c0013f8e:	29 c1                	sub    ecx,eax
c0013f90:	b8 80 51 01 00       	mov    eax,0x15180
c0013f95:	f7 e9                	imul   ecx
c0013f97:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013f9b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013f9f:	83 c4 14             	add    esp,0x14
c0013fa2:	5b                   	pop    ebx
c0013fa3:	5e                   	pop    esi
c0013fa4:	5f                   	pop    edi
c0013fa5:	5d                   	pop    ebp
c0013fa6:	c3                   	ret    
c0013fa7:	90                   	nop

c0013fa8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013fa8:	57                   	push   edi
c0013fa9:	56                   	push   esi
c0013faa:	53                   	push   ebx
c0013fab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013faf:	8b 06                	mov    eax,DWORD PTR [esi]
c0013fb1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013fb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fbc:	e8 c0 fe ff ff       	call   c0013e81 <datetimeToSeconds(datetime_t)>
c0013fc1:	59                   	pop    ecx
c0013fc2:	0f b6 0d f8 e4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e4f8
c0013fc9:	5b                   	pop    ebx
c0013fca:	03 0d fc e4 02 c0    	add    ecx,DWORD PTR ds:0xc002e4fc
c0013fd0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013fd6:	89 cb                	mov    ebx,ecx
c0013fd8:	c1 fb 1f             	sar    ebx,0x1f
c0013fdb:	29 c8                	sub    eax,ecx
c0013fdd:	19 da                	sbb    edx,ebx
c0013fdf:	31 c9                	xor    ecx,ecx
c0013fe1:	80 3d f9 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4f9,0x0
c0013fe8:	74 05                	je     c0013fef <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013fea:	b9 08 07 00 00       	mov    ecx,0x708
c0013fef:	31 db                	xor    ebx,ebx
c0013ff1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013ff5:	29 c8                	sub    eax,ecx
c0013ff7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ffb:	19 da                	sbb    edx,ebx
c0013ffd:	89 f8                	mov    eax,edi
c0013fff:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014003:	5b                   	pop    ebx
c0014004:	5e                   	pop    esi
c0014005:	5f                   	pop    edi
c0014006:	ff e0                	jmp    eax

c0014008 <secondsToDatetime(unsigned long long)>:
c0014008:	55                   	push   ebp
c0014009:	57                   	push   edi
c001400a:	56                   	push   esi
c001400b:	53                   	push   ebx
c001400c:	83 ec 1c             	sub    esp,0x1c
c001400f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014013:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014017:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001401b:	6a 00                	push   0x0
c001401d:	68 80 51 01 00       	push   0x15180
c0014022:	55                   	push   ebp
c0014023:	57                   	push   edi
c0014024:	e8 13 29 01 00       	call   c002693c <__udivdi3>
c0014029:	83 c4 10             	add    esp,0x10
c001402c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014032:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014036:	6a 00                	push   0x0
c0014038:	68 80 51 01 00       	push   0x15180
c001403d:	55                   	push   ebp
c001403e:	57                   	push   edi
c001403f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014044:	e8 f3 29 01 00       	call   c0026a3c <__umoddi3>
c0014049:	83 c4 10             	add    esp,0x10
c001404c:	99                   	cdq    
c001404d:	f7 ff                	idiv   edi
c001404f:	bf 3c 00 00 00       	mov    edi,0x3c
c0014054:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014057:	89 d0                	mov    eax,edx
c0014059:	99                   	cdq    
c001405a:	f7 ff                	idiv   edi
c001405c:	85 db                	test   ebx,ebx
c001405e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014061:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014064:	79 11                	jns    c0014077 <secondsToDatetime(unsigned long long)+0x6f>
c0014066:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001406a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014070:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014075:	eb 07                	jmp    c001407e <secondsToDatetime(unsigned long long)+0x76>
c0014077:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001407c:	89 d8                	mov    eax,ebx
c001407e:	bf b4 05 00 00       	mov    edi,0x5b4
c0014083:	99                   	cdq    
c0014084:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014089:	f7 f9                	idiv   ecx
c001408b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014090:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014094:	31 d2                	xor    edx,edx
c0014096:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001409e:	01 c3                	add    ebx,eax
c00140a0:	89 d8                	mov    eax,ebx
c00140a2:	f7 f1                	div    ecx
c00140a4:	31 d2                	xor    edx,edx
c00140a6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00140a9:	89 d8                	mov    eax,ebx
c00140ab:	f7 f7                	div    edi
c00140ad:	31 d2                	xor    edx,edx
c00140af:	29 c1                	sub    ecx,eax
c00140b1:	89 d8                	mov    eax,ebx
c00140b3:	f7 f5                	div    ebp
c00140b5:	bd 6d 01 00 00       	mov    ebp,0x16d
c00140ba:	29 c1                	sub    ecx,eax
c00140bc:	31 d2                	xor    edx,edx
c00140be:	89 c8                	mov    eax,ecx
c00140c0:	f7 f5                	div    ebp
c00140c2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00140c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140cb:	31 d2                	xor    edx,edx
c00140cd:	89 c8                	mov    eax,ecx
c00140cf:	f7 f5                	div    ebp
c00140d1:	31 d2                	xor    edx,edx
c00140d3:	01 c3                	add    ebx,eax
c00140d5:	89 c8                	mov    eax,ecx
c00140d7:	f7 f7                	div    edi
c00140d9:	bf 99 00 00 00       	mov    edi,0x99
c00140de:	29 c3                	sub    ebx,eax
c00140e0:	31 d2                	xor    edx,edx
c00140e2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00140ea:	29 c3                	sub    ebx,eax
c00140ec:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00140ef:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00140f2:	bb 05 00 00 00       	mov    ebx,0x5
c00140f7:	83 c1 02             	add    ecx,0x2
c00140fa:	89 c8                	mov    eax,ecx
c00140fc:	f7 f7                	div    edi
c00140fe:	31 d2                	xor    edx,edx
c0014100:	89 c7                	mov    edi,eax
c0014102:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0014108:	83 c0 02             	add    eax,0x2
c001410b:	f7 f3                	div    ebx
c001410d:	89 eb                	mov    ebx,ebp
c001410f:	29 c3                	sub    ebx,eax
c0014111:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014117:	88 1e                	mov    BYTE PTR [esi],bl
c0014119:	19 c0                	sbb    eax,eax
c001411b:	31 d2                	xor    edx,edx
c001411d:	83 e0 0c             	and    eax,0xc
c0014120:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014124:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001412c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014130:	83 f9 01             	cmp    ecx,0x1
c0014133:	0f 96 c2             	setbe  dl
c0014136:	41                   	inc    ecx
c0014137:	01 d0                	add    eax,edx
c0014139:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001413c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014140:	83 c4 1c             	add    esp,0x1c
c0014143:	89 f0                	mov    eax,esi
c0014145:	5b                   	pop    ebx
c0014146:	5e                   	pop    esi
c0014147:	5f                   	pop    edi
c0014148:	5d                   	pop    ebp
c0014149:	c2 04 00             	ret    0x4

c001414c <Clock::timeInDatetimeLocal()>:
c001414c:	53                   	push   ebx
c001414d:	83 ec 14             	sub    esp,0x14
c0014150:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014154:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014158:	e8 83 fc ff ff       	call   c0013de0 <Clock::timeInSecondsLocal()>
c001415d:	83 c4 0c             	add    esp,0xc
c0014160:	52                   	push   edx
c0014161:	50                   	push   eax
c0014162:	53                   	push   ebx
c0014163:	e8 a0 fe ff ff       	call   c0014008 <secondsToDatetime(unsigned long long)>
c0014168:	89 d8                	mov    eax,ebx
c001416a:	83 c4 14             	add    esp,0x14
c001416d:	5b                   	pop    ebx
c001416e:	c2 04 00             	ret    0x4
c0014171:	90                   	nop

c0014172 <Device::hibernate()>:
c0014172:	c3                   	ret    
c0014173:	90                   	nop

c0014174 <Device::wake()>:
c0014174:	c3                   	ret    
c0014175:	90                   	nop

c0014176 <Device::detect()>:
c0014176:	c3                   	ret    
c0014177:	90                   	nop

c0014178 <Device::disableLegacy()>:
c0014178:	c3                   	ret    
c0014179:	90                   	nop

c001417a <Device::powerSaving(PowerSavingLevel)>:
c001417a:	c3                   	ret    
c001417b:	90                   	nop

c001417c <DriverlessDevice::close(int, int, void*)>:
c001417c:	31 c0                	xor    eax,eax
c001417e:	c3                   	ret    
c001417f:	90                   	nop

c0014180 <DriverlessDevice::detect()>:
c0014180:	c3                   	ret    
c0014181:	90                   	nop

c0014182 <DriverlessDevice::open(int, int, void*)>:
c0014182:	83 ec 18             	sub    esp,0x18
c0014185:	68 90 ab 02 c0       	push   0xc002ab90
c001418a:	e8 fa 63 00 00       	call   c001a589 <Krnl::panic(char const*)>
c001418f:	83 c8 ff             	or     eax,0xffffffff
c0014192:	83 c4 1c             	add    esp,0x1c
c0014195:	c3                   	ret    

c0014196 <Device::~Device()>:
c0014196:	ba b8 ab 02 c0       	mov    edx,0xc002abb8
c001419b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001419f:	89 10                	mov    DWORD PTR [eax],edx
c00141a1:	90                   	nop
c00141a2:	c3                   	ret    
c00141a3:	90                   	nop

c00141a4 <Device::~Device()>:
c00141a4:	83 ec 0c             	sub    esp,0xc
c00141a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00141ab:	e8 e6 ff ff ff       	call   c0014196 <Device::~Device()>
c00141b0:	83 c4 04             	add    esp,0x4
c00141b3:	83 ec 08             	sub    esp,0x8
c00141b6:	68 58 01 00 00       	push   0x158
c00141bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141bf:	e8 f9 eb ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c00141c4:	83 c4 10             	add    esp,0x10
c00141c7:	83 c4 0c             	add    esp,0xc
c00141ca:	c3                   	ret    
c00141cb:	90                   	nop

c00141cc <Device::findAndLoadDriver()>:
c00141cc:	c3                   	ret    
c00141cd:	90                   	nop

c00141ce <Device::preOpenPCI(PCIDeviceInfo)>:
c00141ce:	57                   	push   edi
c00141cf:	b9 09 00 00 00       	mov    ecx,0x9
c00141d4:	56                   	push   esi
c00141d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00141d9:	8d 74 24 10          	lea    esi,[esp+0x10]
c00141dd:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00141e7:	81 c7 18 01 00 00    	add    edi,0x118
c00141ed:	fc                   	cld    
c00141ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00141f0:	5e                   	pop    esi
c00141f1:	5f                   	pop    edi
c00141f2:	c3                   	ret    
c00141f3:	90                   	nop

c00141f4 <Device::preOpenACPI(void*, char*, char*)>:
c00141f4:	56                   	push   esi
c00141f5:	53                   	push   ebx
c00141f6:	83 ec 08             	sub    esp,0x8
c00141f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141fd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014201:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001420b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001420f:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014215:	6a 1e                	push   0x1e
c0014217:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001421d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014221:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014227:	50                   	push   eax
c0014228:	e8 17 c5 fe ff       	call   c0000744 <memcpy>
c001422d:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014231:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014235:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001423d:	83 c4 14             	add    esp,0x14
c0014240:	5b                   	pop    ebx
c0014241:	5e                   	pop    esi
c0014242:	e9 fd c4 fe ff       	jmp    c0000744 <memcpy>
c0014247:	90                   	nop

c0014248 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001424c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014251:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014258:	75 0b                	jne    c0014265 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c001425a:	8b 00                	mov    eax,DWORD PTR [eax]
c001425c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014260:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014263:	eb 1e                	jmp    c0014283 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014265:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c001426a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014270:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014276:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014278:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001427c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014280:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014283:	ff e0                	jmp    eax
c0014285:	90                   	nop

c0014286 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001428a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001428f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014296:	75 0b                	jne    c00142a3 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014298:	8b 00                	mov    eax,DWORD PTR [eax]
c001429a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001429e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00142a1:	eb 1e                	jmp    c00142c1 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00142a3:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00142a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142ae:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142b4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142b6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142be:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00142c1:	ff e0                	jmp    eax
c00142c3:	90                   	nop

c00142c4 <Device::addChild(Device*)>:
c00142c4:	53                   	push   ebx
c00142c5:	83 ec 08             	sub    esp,0x8
c00142c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00142cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142d0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00142d6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00142dc:	8b 13                	mov    edx,DWORD PTR [ebx]
c00142de:	85 d2                	test   edx,edx
c00142e0:	74 04                	je     c00142e6 <Device::addChild(Device*)+0x22>
c00142e2:	89 d3                	mov    ebx,edx
c00142e4:	eb f6                	jmp    c00142dc <Device::addChild(Device*)+0x18>
c00142e6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00142e9:	83 ec 0c             	sub    esp,0xc
c00142ec:	6a 08                	push   0x8
c00142ee:	e8 50 b5 ff ff       	call   c000f843 <malloc>
c00142f3:	89 03                	mov    DWORD PTR [ebx],eax
c00142f5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142fb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014302:	83 c4 18             	add    esp,0x18
c0014305:	5b                   	pop    ebx
c0014306:	c3                   	ret    
c0014307:	90                   	nop

c0014308 <Device::removeAllChildren()>:
c0014308:	56                   	push   esi
c0014309:	53                   	push   ebx
c001430a:	52                   	push   edx
c001430b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001430f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014315:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014318:	74 17                	je     c0014331 <Device::removeAllChildren()+0x29>
c001431a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001431d:	85 c0                	test   eax,eax
c001431f:	74 0c                	je     c001432d <Device::removeAllChildren()+0x25>
c0014321:	83 ec 0c             	sub    esp,0xc
c0014324:	8b 10                	mov    edx,DWORD PTR [eax]
c0014326:	50                   	push   eax
c0014327:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001432a:	83 c4 10             	add    esp,0x10
c001432d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001432f:	eb e4                	jmp    c0014315 <Device::removeAllChildren()+0xd>
c0014331:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014337:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001433d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014343:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001434a:	58                   	pop    eax
c001434b:	5b                   	pop    ebx
c001434c:	5e                   	pop    esi
c001434d:	c3                   	ret    

c001434e <Device::hibernateAll()>:
c001434e:	53                   	push   ebx
c001434f:	83 ec 14             	sub    esp,0x14
c0014352:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014356:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014358:	53                   	push   ebx
c0014359:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001435c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014362:	83 c4 10             	add    esp,0x10
c0014365:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014368:	74 0f                	je     c0014379 <Device::hibernateAll()+0x2b>
c001436a:	83 ec 0c             	sub    esp,0xc
c001436d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014370:	e8 d9 ff ff ff       	call   c001434e <Device::hibernateAll()>
c0014375:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014377:	eb e9                	jmp    c0014362 <Device::hibernateAll()+0x14>
c0014379:	83 c4 08             	add    esp,0x8
c001437c:	5b                   	pop    ebx
c001437d:	c3                   	ret    

c001437e <Device::wakeAll()>:
c001437e:	53                   	push   ebx
c001437f:	83 ec 14             	sub    esp,0x14
c0014382:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014386:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014388:	53                   	push   ebx
c0014389:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001438c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014392:	83 c4 10             	add    esp,0x10
c0014395:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014398:	74 0f                	je     c00143a9 <Device::wakeAll()+0x2b>
c001439a:	83 ec 0c             	sub    esp,0xc
c001439d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143a0:	e8 d9 ff ff ff       	call   c001437e <Device::wakeAll()>
c00143a5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143a7:	eb e9                	jmp    c0014392 <Device::wakeAll()+0x14>
c00143a9:	83 c4 08             	add    esp,0x8
c00143ac:	5b                   	pop    ebx
c00143ad:	c3                   	ret    

c00143ae <Device::detectAll()>:
c00143ae:	53                   	push   ebx
c00143af:	83 ec 14             	sub    esp,0x14
c00143b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143b8:	53                   	push   ebx
c00143b9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00143bc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143c2:	83 c4 10             	add    esp,0x10
c00143c5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143c8:	74 0f                	je     c00143d9 <Device::detectAll()+0x2b>
c00143ca:	83 ec 0c             	sub    esp,0xc
c00143cd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143d0:	e8 d9 ff ff ff       	call   c00143ae <Device::detectAll()>
c00143d5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143d7:	eb e9                	jmp    c00143c2 <Device::detectAll()+0x14>
c00143d9:	83 c4 08             	add    esp,0x8
c00143dc:	5b                   	pop    ebx
c00143dd:	c3                   	ret    

c00143de <Device::disableLegacyAll()>:
c00143de:	53                   	push   ebx
c00143df:	83 ec 14             	sub    esp,0x14
c00143e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143e8:	53                   	push   ebx
c00143e9:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00143ec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143f2:	83 c4 10             	add    esp,0x10
c00143f5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143f8:	74 0f                	je     c0014409 <Device::disableLegacyAll()+0x2b>
c00143fa:	83 ec 0c             	sub    esp,0xc
c00143fd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014400:	e8 d9 ff ff ff       	call   c00143de <Device::disableLegacyAll()>
c0014405:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014407:	eb e9                	jmp    c00143f2 <Device::disableLegacyAll()+0x14>
c0014409:	83 c4 08             	add    esp,0x8
c001440c:	5b                   	pop    ebx
c001440d:	c3                   	ret    

c001440e <Device::loadDriversForAll()>:
c001440e:	53                   	push   ebx
c001440f:	83 ec 08             	sub    esp,0x8
c0014412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014416:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001441c:	8b 18                	mov    ebx,DWORD PTR [eax]
c001441e:	85 db                	test   ebx,ebx
c0014420:	74 12                	je     c0014434 <Device::loadDriversForAll()+0x26>
c0014422:	83 ec 0c             	sub    esp,0xc
c0014425:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014428:	e8 e1 ff ff ff       	call   c001440e <Device::loadDriversForAll()>
c001442d:	83 c4 10             	add    esp,0x10
c0014430:	89 d8                	mov    eax,ebx
c0014432:	eb e8                	jmp    c001441c <Device::loadDriversForAll()+0xe>
c0014434:	83 c4 08             	add    esp,0x8
c0014437:	5b                   	pop    ebx
c0014438:	c3                   	ret    
c0014439:	90                   	nop

c001443a <Device::closeAll()>:
c001443a:	53                   	push   ebx
c001443b:	83 ec 08             	sub    esp,0x8
c001443e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014442:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014444:	6a 00                	push   0x0
c0014446:	6a 00                	push   0x0
c0014448:	6a 00                	push   0x0
c001444a:	53                   	push   ebx
c001444b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001444e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014454:	83 c4 10             	add    esp,0x10
c0014457:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001445a:	74 0f                	je     c001446b <Device::closeAll()+0x31>
c001445c:	83 ec 0c             	sub    esp,0xc
c001445f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014462:	e8 d3 ff ff ff       	call   c001443a <Device::closeAll()>
c0014467:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014469:	eb e9                	jmp    c0014454 <Device::closeAll()+0x1a>
c001446b:	83 c4 08             	add    esp,0x8
c001446e:	5b                   	pop    ebx
c001446f:	c3                   	ret    

c0014470 <Device::powerSavingAll(PowerSavingLevel)>:
c0014470:	56                   	push   esi
c0014471:	53                   	push   ebx
c0014472:	83 ec 0c             	sub    esp,0xc
c0014475:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014479:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001447d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001447f:	56                   	push   esi
c0014480:	53                   	push   ebx
c0014481:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014484:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001448a:	83 c4 10             	add    esp,0x10
c001448d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014490:	74 0f                	je     c00144a1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014492:	52                   	push   edx
c0014493:	52                   	push   edx
c0014494:	56                   	push   esi
c0014495:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014498:	e8 d3 ff ff ff       	call   c0014470 <Device::powerSavingAll(PowerSavingLevel)>
c001449d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001449f:	eb e9                	jmp    c001448a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00144a1:	58                   	pop    eax
c00144a2:	5b                   	pop    ebx
c00144a3:	5e                   	pop    esi
c00144a4:	c3                   	ret    
c00144a5:	90                   	nop

c00144a6 <Device::setName(char const*)>:
c00144a6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00144ae:	e9 81 c3 fe ff       	jmp    c0000834 <strcpy>
c00144b3:	90                   	nop

c00144b4 <Device::Device(char const*)>:
c00144b4:	83 ec 1c             	sub    esp,0x1c
c00144b7:	ba b8 ab 02 c0       	mov    edx,0xc002abb8
c00144bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c0:	89 10                	mov    DWORD PTR [eax],edx
c00144c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00144d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00144de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144e2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144f0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144fa:	83 ec 08             	sub    esp,0x8
c00144fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014501:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014505:	e8 9c ff ff ff       	call   c00144a6 <Device::setName(char const*)>
c001450a:	83 c4 10             	add    esp,0x10
c001450d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014515:	83 ec 0c             	sub    esp,0xc
c0014518:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001451c:	e8 22 b3 ff ff       	call   c000f843 <malloc>
c0014521:	83 c4 10             	add    esp,0x10
c0014524:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001452a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014531:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014535:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001453b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001453f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014545:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001454b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001454f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014555:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001455c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014560:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001456b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014572:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014576:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014584:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001458e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014592:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001459c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a0:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00145aa:	90                   	nop
c00145ab:	83 c4 1c             	add    esp,0x1c
c00145ae:	c3                   	ret    
c00145af:	90                   	nop

c00145b0 <Device::getName()>:
c00145b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145b4:	05 d0 00 00 00       	add    eax,0xd0
c00145b9:	c3                   	ret    

c00145ba <DriverlessDevice::DriverlessDevice(char const*)>:
c00145ba:	83 ec 0c             	sub    esp,0xc
c00145bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145c1:	83 ec 08             	sub    esp,0x8
c00145c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145c8:	50                   	push   eax
c00145c9:	e8 e6 fe ff ff       	call   c00144b4 <Device::Device(char const*)>
c00145ce:	83 c4 10             	add    esp,0x10
c00145d1:	ba e4 ab 02 c0       	mov    edx,0xc002abe4
c00145d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145da:	89 10                	mov    DWORD PTR [eax],edx
c00145dc:	90                   	nop
c00145dd:	83 c4 0c             	add    esp,0xc
c00145e0:	c3                   	ret    
c00145e1:	90                   	nop

c00145e2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00145e2:	57                   	push   edi
c00145e3:	56                   	push   esi
c00145e4:	53                   	push   ebx
c00145e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145e9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00145ed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145f1:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00145f7:	75 0c                	jne    c0014605 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00145f9:	52                   	push   edx
c00145fa:	52                   	push   edx
c00145fb:	53                   	push   ebx
c00145fc:	56                   	push   esi
c00145fd:	e8 78 42 01 00       	call   c002887a <LinkedList<Device>::addElement(Device*)>
c0014602:	83 c4 10             	add    esp,0x10
c0014605:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001460b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001460e:	74 12                	je     c0014622 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014610:	50                   	push   eax
c0014611:	57                   	push   edi
c0014612:	56                   	push   esi
c0014613:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014616:	e8 c7 ff ff ff       	call   c00145e2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001461b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001461d:	83 c4 10             	add    esp,0x10
c0014620:	eb e9                	jmp    c001460b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014622:	5b                   	pop    ebx
c0014623:	5e                   	pop    esi
c0014624:	5f                   	pop    edi
c0014625:	c3                   	ret    

c0014626 <getDevicesOfType(DeviceType)>:
c0014626:	53                   	push   ebx
c0014627:	83 ec 14             	sub    esp,0x14
c001462a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001462e:	53                   	push   ebx
c001462f:	e8 22 43 01 00       	call   c0028956 <LinkedList<Device>::LinkedList()>
c0014634:	83 c4 0c             	add    esp,0xc
c0014637:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001463b:	53                   	push   ebx
c001463c:	ff 35 68 e3 02 c0    	push   DWORD PTR ds:0xc002e368
c0014642:	e8 9b ff ff ff       	call   c00145e2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014647:	89 d8                	mov    eax,ebx
c0014649:	83 c4 18             	add    esp,0x18
c001464c:	5b                   	pop    ebx
c001464d:	c2 04 00             	ret    0x4

c0014650 <HardDiskController::HardDiskController(char const*)>:
c0014650:	83 ec 0c             	sub    esp,0xc
c0014653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014657:	83 ec 08             	sub    esp,0x8
c001465a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001465e:	50                   	push   eax
c001465f:	e8 50 fe ff ff       	call   c00144b4 <Device::Device(char const*)>
c0014664:	83 c4 10             	add    esp,0x10
c0014667:	ba 10 ac 02 c0       	mov    edx,0xc002ac10
c001466c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014670:	89 10                	mov    DWORD PTR [eax],edx
c0014672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014676:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014680:	90                   	nop
c0014681:	83 c4 0c             	add    esp,0xc
c0014684:	c3                   	ret    
c0014685:	90                   	nop

c0014686 <HardDiskController::~HardDiskController()>:
c0014686:	83 ec 0c             	sub    esp,0xc
c0014689:	ba 10 ac 02 c0       	mov    edx,0xc002ac10
c001468e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014692:	89 10                	mov    DWORD PTR [eax],edx
c0014694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014698:	83 ec 0c             	sub    esp,0xc
c001469b:	50                   	push   eax
c001469c:	e8 f5 fa ff ff       	call   c0014196 <Device::~Device()>
c00146a1:	83 c4 10             	add    esp,0x10
c00146a4:	90                   	nop
c00146a5:	83 c4 0c             	add    esp,0xc
c00146a8:	c3                   	ret    
c00146a9:	90                   	nop

c00146aa <HardDiskController::~HardDiskController()>:
c00146aa:	83 ec 0c             	sub    esp,0xc
c00146ad:	83 ec 0c             	sub    esp,0xc
c00146b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146b4:	e8 cd ff ff ff       	call   c0014686 <HardDiskController::~HardDiskController()>
c00146b9:	83 c4 10             	add    esp,0x10
c00146bc:	83 ec 08             	sub    esp,0x8
c00146bf:	68 58 01 00 00       	push   0x158
c00146c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146c8:	e8 f0 e6 ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c00146cd:	83 c4 10             	add    esp,0x10
c00146d0:	83 c4 0c             	add    esp,0xc
c00146d3:	c3                   	ret    

c00146d4 <PhysicalDisk::eject()>:
c00146d4:	83 ec 18             	sub    esp,0x18
c00146d7:	68 34 ac 02 c0       	push   0xc002ac34
c00146dc:	e8 bc e7 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00146e1:	83 c8 ff             	or     eax,0xffffffff
c00146e4:	83 c4 1c             	add    esp,0x1c
c00146e7:	c3                   	ret    

c00146e8 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00146e8:	83 ec 0c             	sub    esp,0xc
c00146eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ef:	83 ec 08             	sub    esp,0x8
c00146f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146f6:	50                   	push   eax
c00146f7:	e8 b8 fd ff ff       	call   c00144b4 <Device::Device(char const*)>
c00146fc:	83 c4 10             	add    esp,0x10
c00146ff:	ba 64 ac 02 c0       	mov    edx,0xc002ac64
c0014704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014708:	89 10                	mov    DWORD PTR [eax],edx
c001470a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001470e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014719:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014724:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001472e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014732:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014736:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001473c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014740:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001474a:	90                   	nop
c001474b:	83 c4 0c             	add    esp,0xc
c001474e:	c3                   	ret    
c001474f:	90                   	nop

c0014750 <PhysicalDisk::startCache()>:
c0014750:	56                   	push   esi
c0014751:	53                   	push   ebx
c0014752:	83 ec 10             	sub    esp,0x10
c0014755:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014759:	6a 44                	push   0x44
c001475b:	e8 e3 b0 ff ff       	call   c000f843 <malloc>
c0014760:	89 c6                	mov    esi,eax
c0014762:	58                   	pop    eax
c0014763:	5a                   	pop    edx
c0014764:	53                   	push   ebx
c0014765:	56                   	push   esi
c0014766:	e8 63 27 00 00       	call   c0016ece <VCache::VCache(PhysicalDisk*)>
c001476b:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014771:	83 c4 14             	add    esp,0x14
c0014774:	5b                   	pop    ebx
c0014775:	5e                   	pop    esi
c0014776:	c3                   	ret    
c0014777:	90                   	nop

c0014778 <PhysicalDisk::~PhysicalDisk()>:
c0014778:	83 ec 0c             	sub    esp,0xc
c001477b:	ba 64 ac 02 c0       	mov    edx,0xc002ac64
c0014780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014784:	89 10                	mov    DWORD PTR [eax],edx
c0014786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001478a:	83 ec 0c             	sub    esp,0xc
c001478d:	50                   	push   eax
c001478e:	e8 03 fa ff ff       	call   c0014196 <Device::~Device()>
c0014793:	83 c4 10             	add    esp,0x10
c0014796:	90                   	nop
c0014797:	83 c4 0c             	add    esp,0xc
c001479a:	c3                   	ret    
c001479b:	90                   	nop

c001479c <PhysicalDisk::~PhysicalDisk()>:
c001479c:	83 ec 0c             	sub    esp,0xc
c001479f:	83 ec 0c             	sub    esp,0xc
c00147a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147a6:	e8 cd ff ff ff       	call   c0014778 <PhysicalDisk::~PhysicalDisk()>
c00147ab:	83 c4 10             	add    esp,0x10
c00147ae:	83 ec 08             	sub    esp,0x8
c00147b1:	68 6c 01 00 00       	push   0x16c
c00147b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147ba:	e8 fe e5 ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c00147bf:	83 c4 10             	add    esp,0x10
c00147c2:	83 c4 0c             	add    esp,0xc
c00147c5:	c3                   	ret    

c00147c6 <FPU::FPU(char const*)>:
c00147c6:	83 ec 0c             	sub    esp,0xc
c00147c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147cd:	83 ec 08             	sub    esp,0x8
c00147d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147d4:	50                   	push   eax
c00147d5:	e8 da fc ff ff       	call   c00144b4 <Device::Device(char const*)>
c00147da:	83 c4 10             	add    esp,0x10
c00147dd:	ba a8 ac 02 c0       	mov    edx,0xc002aca8
c00147e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e6:	89 10                	mov    DWORD PTR [eax],edx
c00147e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ec:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00147f6:	90                   	nop
c00147f7:	83 c4 0c             	add    esp,0xc
c00147fa:	c3                   	ret    
c00147fb:	90                   	nop

c00147fc <FPU::~FPU()>:
c00147fc:	83 ec 0c             	sub    esp,0xc
c00147ff:	ba a8 ac 02 c0       	mov    edx,0xc002aca8
c0014804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014808:	89 10                	mov    DWORD PTR [eax],edx
c001480a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001480e:	83 ec 0c             	sub    esp,0xc
c0014811:	50                   	push   eax
c0014812:	e8 7f f9 ff ff       	call   c0014196 <Device::~Device()>
c0014817:	83 c4 10             	add    esp,0x10
c001481a:	90                   	nop
c001481b:	83 c4 0c             	add    esp,0xc
c001481e:	c3                   	ret    
c001481f:	90                   	nop

c0014820 <FPU::~FPU()>:
c0014820:	83 ec 0c             	sub    esp,0xc
c0014823:	83 ec 0c             	sub    esp,0xc
c0014826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001482a:	e8 cd ff ff ff       	call   c00147fc <FPU::~FPU()>
c001482f:	83 c4 10             	add    esp,0x10
c0014832:	83 ec 08             	sub    esp,0x8
c0014835:	68 58 01 00 00       	push   0x158
c001483a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001483e:	e8 7a e5 ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0014843:	83 c4 10             	add    esp,0x10
c0014846:	83 c4 0c             	add    esp,0xc
c0014849:	c3                   	ret    

c001484a <setupFPU()>:
c001484a:	53                   	push   ebx
c001484b:	83 ec 08             	sub    esp,0x8
c001484e:	8b 15 68 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e368
c0014854:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001485b:	74 19                	je     c0014876 <setupFPU()+0x2c>
c001485d:	83 ec 0c             	sub    esp,0xc
c0014860:	68 58 01 00 00       	push   0x158
c0014865:	e8 d9 af ff ff       	call   c000f843 <malloc>
c001486a:	89 c3                	mov    ebx,eax
c001486c:	89 04 24             	mov    DWORD PTR [esp],eax
c001486f:	e8 56 0c 01 00       	call   c00254ca <AVX::AVX()>
c0014874:	eb 5b                	jmp    c00148d1 <setupFPU()+0x87>
c0014876:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001487c:	84 c0                	test   al,al
c001487e:	79 19                	jns    c0014899 <setupFPU()+0x4f>
c0014880:	83 ec 0c             	sub    esp,0xc
c0014883:	68 58 01 00 00       	push   0x158
c0014888:	e8 b6 af ff ff       	call   c000f843 <malloc>
c001488d:	89 c3                	mov    ebx,eax
c001488f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014892:	e8 59 0d 01 00       	call   c00255f0 <SSE::SSE()>
c0014897:	eb 38                	jmp    c00148d1 <setupFPU()+0x87>
c0014899:	a8 20                	test   al,0x20
c001489b:	74 19                	je     c00148b6 <setupFPU()+0x6c>
c001489d:	83 ec 0c             	sub    esp,0xc
c00148a0:	68 58 01 00 00       	push   0x158
c00148a5:	e8 99 af ff ff       	call   c000f843 <malloc>
c00148aa:	89 c3                	mov    ebx,eax
c00148ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00148af:	e8 a6 0c 01 00       	call   c002555a <MMX::MMX()>
c00148b4:	eb 1b                	jmp    c00148d1 <setupFPU()+0x87>
c00148b6:	a8 10                	test   al,0x10
c00148b8:	74 1c                	je     c00148d6 <setupFPU()+0x8c>
c00148ba:	83 ec 0c             	sub    esp,0xc
c00148bd:	68 58 01 00 00       	push   0x158
c00148c2:	e8 7c af ff ff       	call   c000f843 <malloc>
c00148c7:	89 c3                	mov    ebx,eax
c00148c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00148cc:	e8 ad 0d 01 00       	call   c002567e <x87::x87()>
c00148d1:	83 c4 10             	add    esp,0x10
c00148d4:	eb 24                	jmp    c00148fa <setupFPU()+0xb0>
c00148d6:	83 e0 ef             	and    eax,0xffffffef
c00148d9:	83 ec 0c             	sub    esp,0xc
c00148dc:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00148e2:	68 94 ac 02 c0       	push   0xc002ac94
c00148e7:	e8 b1 e5 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00148ec:	0f 20 c0             	mov    eax,cr0
c00148ef:	83 c8 04             	or     eax,0x4
c00148f2:	0f 22 c0             	mov    cr0,eax
c00148f5:	31 db                	xor    ebx,ebx
c00148f7:	83 c4 10             	add    esp,0x10
c00148fa:	89 d8                	mov    eax,ebx
c00148fc:	83 c4 08             	add    esp,0x8
c00148ff:	5b                   	pop    ebx
c0014900:	c3                   	ret    
c0014901:	90                   	nop

c0014902 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014902:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014906:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001490a:	c1 e0 04             	shl    eax,0x4
c001490d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014911:	8d 50 10             	lea    edx,[eax+0x10]
c0014914:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001491a:	74 08                	je     c0014924 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001491c:	83 c0 04             	add    eax,0x4
c001491f:	39 d0                	cmp    eax,edx
c0014921:	75 f1                	jne    c0014914 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014923:	c3                   	ret    
c0014924:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001492e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014938:	eb e2                	jmp    c001491c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001493a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001493a:	57                   	push   edi
c001493b:	31 c0                	xor    eax,eax
c001493d:	56                   	push   esi
c001493e:	53                   	push   ebx
c001493f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014943:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014947:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001494b:	89 da                	mov    edx,ebx
c001494d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014951:	c1 e2 04             	shl    edx,0x4
c0014954:	01 ca                	add    edx,ecx
c0014956:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001495e:	74 16                	je     c0014976 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014960:	40                   	inc    eax
c0014961:	83 f8 04             	cmp    eax,0x4
c0014964:	75 f0                	jne    c0014956 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014966:	c7 44 24 10 d8 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002acd8
c001496e:	5b                   	pop    ebx
c001496f:	5e                   	pop    esi
c0014970:	5f                   	pop    edi
c0014971:	e9 13 5c 00 00       	jmp    c001a589 <Krnl::panic(char const*)>
c0014976:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014979:	8d 04 81             	lea    eax,[ecx+eax*4]
c001497c:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014982:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014988:	5b                   	pop    ebx
c0014989:	5e                   	pop    esi
c001498a:	5f                   	pop    edi
c001498b:	c3                   	ret    

c001498c <doubleFault(regs*, void*)>:
c001498c:	55                   	push   ebp
c001498d:	89 e5                	mov    ebp,esp
c001498f:	83 ec 08             	sub    esp,0x8
c0014992:	83 ec 0c             	sub    esp,0xc
c0014995:	68 13 ad 02 c0       	push   0xc002ad13
c001499a:	e8 ea 5b 00 00       	call   c001a589 <Krnl::panic(char const*)>
c001499f:	83 c4 10             	add    esp,0x10
c00149a2:	90                   	nop
c00149a3:	c9                   	leave  
c00149a4:	c3                   	ret    
c00149a5:	90                   	nop

c00149a6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00149a6:	56                   	push   esi
c00149a7:	53                   	push   ebx
c00149a8:	50                   	push   eax
c00149a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149ad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149b1:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00149b6:	75 35                	jne    c00149ed <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00149b8:	8d 43 20             	lea    eax,[ebx+0x20]
c00149bb:	31 d2                	xor    edx,edx
c00149bd:	89 c1                	mov    ecx,eax
c00149bf:	c1 e1 04             	shl    ecx,0x4
c00149c2:	01 f1                	add    ecx,esi
c00149c4:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00149cc:	74 3e                	je     c0014a0c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00149ce:	42                   	inc    edx
c00149cf:	83 fa 04             	cmp    edx,0x4
c00149d2:	75 f0                	jne    c00149c4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00149d4:	83 ec 0c             	sub    esp,0xc
c00149d7:	68 58 ad 02 c0       	push   0xc002ad58
c00149dc:	e8 a8 5b 00 00       	call   c001a589 <Krnl::panic(char const*)>
c00149e1:	83 c4 10             	add    esp,0x10
c00149e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00149e9:	5a                   	pop    edx
c00149ea:	5b                   	pop    ebx
c00149eb:	5e                   	pop    esi
c00149ec:	c3                   	ret    
c00149ed:	83 ec 0c             	sub    esp,0xc
c00149f0:	56                   	push   esi
c00149f1:	e8 ba fb ff ff       	call   c00145b0 <Device::getName()>
c00149f6:	83 c4 10             	add    esp,0x10
c00149f9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149fc:	75 ba                	jne    c00149b8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149fe:	83 fb 0f             	cmp    ebx,0xf
c0014a01:	7f 29                	jg     c0014a2c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a03:	0f b6 9b c0 d5 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2a40]
c0014a0a:	eb ac                	jmp    c00149b8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a0c:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a13:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a16:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a1c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a20:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a26:	89 d8                	mov    eax,ebx
c0014a28:	5a                   	pop    edx
c0014a29:	5b                   	pop    ebx
c0014a2a:	5e                   	pop    esi
c0014a2b:	c3                   	ret    
c0014a2c:	83 ec 0c             	sub    esp,0xc
c0014a2f:	68 20 ad 02 c0       	push   0xc002ad20
c0014a34:	e8 50 5b 00 00       	call   c001a589 <Krnl::panic(char const*)>
c0014a39:	83 c4 10             	add    esp,0x10
c0014a3c:	e9 77 ff ff ff       	jmp    c00149b8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a41:	90                   	nop

c0014a42 <InterruptController::clearAllHandlers(int, bool)>:
c0014a42:	56                   	push   esi
c0014a43:	53                   	push   ebx
c0014a44:	52                   	push   edx
c0014a45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a49:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a4d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a52:	75 61                	jne    c0014ab5 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a54:	8d 46 20             	lea    eax,[esi+0x20]
c0014a57:	c1 e6 04             	shl    esi,0x4
c0014a5a:	c1 e0 04             	shl    eax,0x4
c0014a5d:	01 de                	add    esi,ebx
c0014a5f:	01 d8                	add    eax,ebx
c0014a61:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a6b:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a75:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014a7f:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a89:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a93:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014a9d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014aa7:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014ab1:	58                   	pop    eax
c0014ab2:	5b                   	pop    ebx
c0014ab3:	5e                   	pop    esi
c0014ab4:	c3                   	ret    
c0014ab5:	83 ec 0c             	sub    esp,0xc
c0014ab8:	53                   	push   ebx
c0014ab9:	e8 f2 fa ff ff       	call   c00145b0 <Device::getName()>
c0014abe:	83 c4 10             	add    esp,0x10
c0014ac1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014ac4:	75 8e                	jne    c0014a54 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ac6:	83 fe 0f             	cmp    esi,0xf
c0014ac9:	7f 09                	jg     c0014ad4 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014acb:	0f b6 b6 c0 d5 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2a40]
c0014ad2:	eb 80                	jmp    c0014a54 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ad4:	83 ec 0c             	sub    esp,0xc
c0014ad7:	68 94 ad 02 c0       	push   0xc002ad94
c0014adc:	e8 a8 5a 00 00       	call   c001a589 <Krnl::panic(char const*)>
c0014ae1:	83 c4 10             	add    esp,0x10
c0014ae4:	e9 6b ff ff ff       	jmp    c0014a54 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ae9:	90                   	nop

c0014aea <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014aea:	56                   	push   esi
c0014aeb:	53                   	push   ebx
c0014aec:	52                   	push   edx
c0014aed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014af1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014af5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014afa:	75 3a                	jne    c0014b36 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014afc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b00:	8d 50 20             	lea    edx,[eax+0x20]
c0014b03:	c1 e2 04             	shl    edx,0x4
c0014b06:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b09:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b0d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b13:	74 0b                	je     c0014b20 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b15:	83 c0 04             	add    eax,0x4
c0014b18:	39 d0                	cmp    eax,edx
c0014b1a:	75 f1                	jne    c0014b0d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b1c:	58                   	pop    eax
c0014b1d:	5b                   	pop    ebx
c0014b1e:	5e                   	pop    esi
c0014b1f:	c3                   	ret    
c0014b20:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b2a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b34:	eb df                	jmp    c0014b15 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b36:	83 ec 0c             	sub    esp,0xc
c0014b39:	56                   	push   esi
c0014b3a:	e8 71 fa ff ff       	call   c00145b0 <Device::getName()>
c0014b3f:	83 c4 10             	add    esp,0x10
c0014b42:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b45:	75 b5                	jne    c0014afc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b47:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b4c:	7f 11                	jg     c0014b5f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b52:	0f b6 80 c0 d5 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2a40]
c0014b59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b5d:	eb 9d                	jmp    c0014afc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b5f:	83 ec 0c             	sub    esp,0xc
c0014b62:	68 94 ad 02 c0       	push   0xc002ad94
c0014b67:	e8 1d 5a 00 00       	call   c001a589 <Krnl::panic(char const*)>
c0014b6c:	83 c4 10             	add    esp,0x10
c0014b6f:	eb 8b                	jmp    c0014afc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b71 <nmiHandler(regs*, void*)>:
c0014b71:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0014b76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b7a:	e9 0d a4 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014b7f <int_handler>:
c0014b7f:	55                   	push   ebp
c0014b80:	57                   	push   edi
c0014b81:	56                   	push   esi
c0014b82:	53                   	push   ebx
c0014b83:	83 ec 0c             	sub    esp,0xc
c0014b86:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b8a:	80 3d c4 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030ec4,0x0
c0014b91:	74 0b                	je     c0014b9e <int_handler+0x1f>
c0014b93:	fa                   	cli    
c0014b94:	f4                   	hlt    
c0014b95:	80 3d c4 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030ec4,0x0
c0014b9c:	75 f5                	jne    c0014b93 <int_handler+0x14>
c0014b9e:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0014ba3:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014ba6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014bac:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014bb2:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bb5:	83 f8 17             	cmp    eax,0x17
c0014bb8:	77 13                	ja     c0014bcd <int_handler+0x4e>
c0014bba:	83 ec 08             	sub    esp,0x8
c0014bbd:	8b 17                	mov    edx,DWORD PTR [edi]
c0014bbf:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014bc2:	0f b6 c0             	movzx  eax,al
c0014bc5:	50                   	push   eax
c0014bc6:	57                   	push   edi
c0014bc7:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014bca:	83 c4 10             	add    esp,0x10
c0014bcd:	83 c3 15             	add    ebx,0x15
c0014bd0:	c1 e3 04             	shl    ebx,0x4
c0014bd3:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014bd7:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014bde:	31 db                	xor    ebx,ebx
c0014be0:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014be4:	85 c0                	test   eax,eax
c0014be6:	74 13                	je     c0014bfb <int_handler+0x7c>
c0014be8:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014beb:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014bef:	74 1c                	je     c0014c0d <int_handler+0x8e>
c0014bf1:	83 ec 08             	sub    esp,0x8
c0014bf4:	52                   	push   edx
c0014bf5:	56                   	push   esi
c0014bf6:	ff d0                	call   eax
c0014bf8:	83 c4 10             	add    esp,0x10
c0014bfb:	43                   	inc    ebx
c0014bfc:	83 fb 04             	cmp    ebx,0x4
c0014bff:	75 df                	jne    c0014be0 <int_handler+0x61>
c0014c01:	83 c4 0c             	add    esp,0xc
c0014c04:	31 c0                	xor    eax,eax
c0014c06:	5b                   	pop    ebx
c0014c07:	31 d2                	xor    edx,edx
c0014c09:	5e                   	pop    esi
c0014c0a:	5f                   	pop    edi
c0014c0b:	5d                   	pop    ebp
c0014c0c:	c3                   	ret    
c0014c0d:	83 ec 08             	sub    esp,0x8
c0014c10:	52                   	push   edx
c0014c11:	56                   	push   esi
c0014c12:	ff d0                	call   eax
c0014c14:	83 c4 10             	add    esp,0x10
c0014c17:	83 c4 0c             	add    esp,0xc
c0014c1a:	5b                   	pop    ebx
c0014c1b:	5e                   	pop    esi
c0014c1c:	5f                   	pop    edi
c0014c1d:	5d                   	pop    ebp
c0014c1e:	c3                   	ret    
c0014c1f:	90                   	nop

c0014c20 <InterruptController::InterruptController(char const*)>:
c0014c20:	83 ec 1c             	sub    esp,0x1c
c0014c23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c27:	83 ec 08             	sub    esp,0x8
c0014c2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c2e:	50                   	push   eax
c0014c2f:	e8 80 f8 ff ff       	call   c00144b4 <Device::Device(char const*)>
c0014c34:	83 c4 10             	add    esp,0x10
c0014c37:	ba 48 b0 02 c0       	mov    edx,0xc002b048
c0014c3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c40:	89 10                	mov    DWORD PTR [eax],edx
c0014c42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c46:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c50:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c58:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c60:	7f 5e                	jg     c0014cc0 <InterruptController::InterruptController(char const*)+0xa0>
c0014c62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c6a:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c6f:	7f 49                	jg     c0014cba <InterruptController::InterruptController(char const*)+0x9a>
c0014c71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c79:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c84:	01 ca                	add    edx,ecx
c0014c86:	83 c2 54             	add    edx,0x54
c0014c89:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c99:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014ca0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014ca4:	01 ca                	add    edx,ecx
c0014ca6:	81 c2 54 04 00 00    	add    edx,0x454
c0014cac:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014cb4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014cb8:	eb b0                	jmp    c0014c6a <InterruptController::InterruptController(char const*)+0x4a>
c0014cba:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014cbe:	eb 98                	jmp    c0014c58 <InterruptController::InterruptController(char const*)+0x38>
c0014cc0:	90                   	nop
c0014cc1:	83 c4 1c             	add    esp,0x1c
c0014cc4:	c3                   	ret    
c0014cc5:	90                   	nop

c0014cc6 <InterruptController::~InterruptController()>:
c0014cc6:	83 ec 0c             	sub    esp,0xc
c0014cc9:	ba 48 b0 02 c0       	mov    edx,0xc002b048
c0014cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cd2:	89 10                	mov    DWORD PTR [eax],edx
c0014cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cd8:	83 ec 0c             	sub    esp,0xc
c0014cdb:	50                   	push   eax
c0014cdc:	e8 b5 f4 ff ff       	call   c0014196 <Device::~Device()>
c0014ce1:	83 c4 10             	add    esp,0x10
c0014ce4:	90                   	nop
c0014ce5:	83 c4 0c             	add    esp,0xc
c0014ce8:	c3                   	ret    
c0014ce9:	90                   	nop

c0014cea <InterruptController::~InterruptController()>:
c0014cea:	83 ec 0c             	sub    esp,0xc
c0014ced:	83 ec 0c             	sub    esp,0xc
c0014cf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cf4:	e8 cd ff ff ff       	call   c0014cc6 <InterruptController::~InterruptController()>
c0014cf9:	83 c4 10             	add    esp,0x10
c0014cfc:	83 ec 08             	sub    esp,0x8
c0014cff:	68 58 21 00 00       	push   0x2158
c0014d04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d08:	e8 b0 e0 ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0014d0d:	83 c4 10             	add    esp,0x10
c0014d10:	83 c4 0c             	add    esp,0xc
c0014d13:	c3                   	ret    

c0014d14 <displayDebugInfo(regs*)>:
c0014d14:	55                   	push   ebp
c0014d15:	57                   	push   edi
c0014d16:	56                   	push   esi
c0014d17:	53                   	push   ebx
c0014d18:	83 ec 24             	sub    esp,0x24
c0014d1b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d1f:	0f 20 c2             	mov    edx,cr0
c0014d22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d26:	0f 20 d7             	mov    edi,cr2
c0014d29:	0f 20 de             	mov    esi,cr3
c0014d2c:	0f 20 e5             	mov    ebp,cr4
c0014d2f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d32:	68 ce ad 02 c0       	push   0xc002adce
c0014d37:	e8 61 e1 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0014d3c:	59                   	pop    ecx
c0014d3d:	58                   	pop    eax
c0014d3e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d41:	68 d9 ad 02 c0       	push   0xc002add9
c0014d46:	e8 52 e1 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0014d4b:	58                   	pop    eax
c0014d4c:	5a                   	pop    edx
c0014d4d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d50:	68 e4 ad 02 c0       	push   0xc002ade4
c0014d55:	e8 43 e1 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0014d5a:	59                   	pop    ecx
c0014d5b:	58                   	pop    eax
c0014d5c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d5f:	68 ef ad 02 c0       	push   0xc002adef
c0014d64:	e8 34 e1 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0014d69:	58                   	pop    eax
c0014d6a:	5a                   	pop    edx
c0014d6b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d6e:	68 fa ad 02 c0       	push   0xc002adfa
c0014d73:	e8 25 e1 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0014d78:	59                   	pop    ecx
c0014d79:	58                   	pop    eax
c0014d7a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014d7d:	68 05 ae 02 c0       	push   0xc002ae05
c0014d82:	e8 16 e1 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0014d87:	58                   	pop    eax
c0014d88:	5a                   	pop    edx
c0014d89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d8c:	68 10 ae 02 c0       	push   0xc002ae10
c0014d91:	e8 07 e1 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0014d96:	59                   	pop    ecx
c0014d97:	58                   	pop    eax
c0014d98:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014d9b:	68 1b ae 02 c0       	push   0xc002ae1b
c0014da0:	e8 f8 e0 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0014da5:	58                   	pop    eax
c0014da6:	5a                   	pop    edx
c0014da7:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014daa:	68 26 ae 02 c0       	push   0xc002ae26
c0014daf:	e8 e9 e0 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0014db4:	59                   	pop    ecx
c0014db5:	58                   	pop    eax
c0014db6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014db9:	68 35 ae 02 c0       	push   0xc002ae35
c0014dbe:	e8 da e0 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0014dc3:	58                   	pop    eax
c0014dc4:	5a                   	pop    edx
c0014dc5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014dc8:	68 40 ae 02 c0       	push   0xc002ae40
c0014dcd:	e8 cb e0 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0014dd2:	59                   	pop    ecx
c0014dd3:	58                   	pop    eax
c0014dd4:	57                   	push   edi
c0014dd5:	68 4b ae 02 c0       	push   0xc002ae4b
c0014dda:	e8 be e0 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0014ddf:	58                   	pop    eax
c0014de0:	5a                   	pop    edx
c0014de1:	56                   	push   esi
c0014de2:	68 56 ae 02 c0       	push   0xc002ae56
c0014de7:	e8 b1 e0 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0014dec:	59                   	pop    ecx
c0014ded:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014df2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014df8:	e8 f8 be ff ff       	call   c0010cf5 <setActiveTerminal(VgaText*)>
c0014dfd:	58                   	pop    eax
c0014dfe:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e01:	5a                   	pop    edx
c0014e02:	c1 e0 05             	shl    eax,0x5
c0014e05:	05 20 d3 02 c0       	add    eax,0xc002d320
c0014e0a:	50                   	push   eax
c0014e0b:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014e10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e16:	e8 f9 c2 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014e1b:	59                   	pop    ecx
c0014e1c:	58                   	pop    eax
c0014e1d:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014e22:	68 61 ae 02 c0       	push   0xc002ae61
c0014e27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e2d:	e8 e2 c2 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014e32:	58                   	pop    eax
c0014e33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e38:	5a                   	pop    edx
c0014e39:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e3c:	83 c0 0c             	add    eax,0xc
c0014e3f:	50                   	push   eax
c0014e40:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014e45:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e4b:	e8 c4 c2 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014e50:	59                   	pop    ecx
c0014e51:	58                   	pop    eax
c0014e52:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014e57:	68 6a ae 02 c0       	push   0xc002ae6a
c0014e5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e62:	e8 ad c2 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014e67:	58                   	pop    eax
c0014e68:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014e6d:	5a                   	pop    edx
c0014e6e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e77:	e8 be c2 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014e7c:	59                   	pop    ecx
c0014e7d:	58                   	pop    eax
c0014e7e:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014e83:	68 72 ae 02 c0       	push   0xc002ae72
c0014e88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e8e:	e8 81 c2 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014e93:	58                   	pop    eax
c0014e94:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014e99:	5a                   	pop    edx
c0014e9a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ea3:	e8 92 c2 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014ea8:	59                   	pop    ecx
c0014ea9:	58                   	pop    eax
c0014eaa:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014eaf:	68 7a ae 02 c0       	push   0xc002ae7a
c0014eb4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eba:	e8 55 c2 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014ebf:	58                   	pop    eax
c0014ec0:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014ec5:	5a                   	pop    edx
c0014ec6:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ec9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ecf:	e8 66 c2 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014ed4:	59                   	pop    ecx
c0014ed5:	58                   	pop    eax
c0014ed6:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014edb:	68 82 ae 02 c0       	push   0xc002ae82
c0014ee0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ee6:	e8 29 c2 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014eeb:	58                   	pop    eax
c0014eec:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014ef1:	5a                   	pop    edx
c0014ef2:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014ef5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014efb:	e8 3a c2 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014f00:	59                   	pop    ecx
c0014f01:	58                   	pop    eax
c0014f02:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014f07:	68 8a ae 02 c0       	push   0xc002ae8a
c0014f0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f12:	e8 fd c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014f17:	58                   	pop    eax
c0014f18:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014f1d:	5a                   	pop    edx
c0014f1e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f21:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f27:	e8 0e c2 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014f2c:	59                   	pop    ecx
c0014f2d:	58                   	pop    eax
c0014f2e:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014f33:	68 92 ae 02 c0       	push   0xc002ae92
c0014f38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f3e:	e8 d1 c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014f43:	58                   	pop    eax
c0014f44:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014f49:	5a                   	pop    edx
c0014f4a:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f53:	e8 e2 c1 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014f58:	59                   	pop    ecx
c0014f59:	58                   	pop    eax
c0014f5a:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014f5f:	68 9a ae 02 c0       	push   0xc002ae9a
c0014f64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f6a:	e8 a5 c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014f6f:	58                   	pop    eax
c0014f70:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014f75:	5a                   	pop    edx
c0014f76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f7a:	52                   	push   edx
c0014f7b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f81:	e8 b4 c1 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014f86:	59                   	pop    ecx
c0014f87:	58                   	pop    eax
c0014f88:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014f8d:	68 a3 ae 02 c0       	push   0xc002aea3
c0014f92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f98:	e8 77 c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014f9d:	58                   	pop    eax
c0014f9e:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014fa3:	5a                   	pop    edx
c0014fa4:	57                   	push   edi
c0014fa5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fab:	e8 8a c1 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014fb0:	59                   	pop    ecx
c0014fb1:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014fb6:	5f                   	pop    edi
c0014fb7:	68 ab ae 02 c0       	push   0xc002aeab
c0014fbc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc2:	e8 4d c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014fc7:	58                   	pop    eax
c0014fc8:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014fcd:	5a                   	pop    edx
c0014fce:	56                   	push   esi
c0014fcf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd5:	e8 60 c1 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014fda:	59                   	pop    ecx
c0014fdb:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014fe0:	5e                   	pop    esi
c0014fe1:	68 b3 ae 02 c0       	push   0xc002aeb3
c0014fe6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fec:	e8 23 c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014ff1:	5f                   	pop    edi
c0014ff2:	58                   	pop    eax
c0014ff3:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0014ff8:	55                   	push   ebp
c0014ff9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fff:	e8 36 c1 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0015004:	58                   	pop    eax
c0015005:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001500a:	5a                   	pop    edx
c001500b:	68 bb ae 02 c0       	push   0xc002aebb
c0015010:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015016:	e8 f9 c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001501b:	0f 21 c0             	mov    eax,db0
c001501e:	59                   	pop    ecx
c001501f:	5e                   	pop    esi
c0015020:	50                   	push   eax
c0015021:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0015026:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001502c:	e8 09 c1 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0015031:	5f                   	pop    edi
c0015032:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0015037:	5d                   	pop    ebp
c0015038:	68 c4 ae 02 c0       	push   0xc002aec4
c001503d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015043:	e8 cc c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0015048:	0f 21 c8             	mov    eax,db1
c001504b:	5a                   	pop    edx
c001504c:	59                   	pop    ecx
c001504d:	50                   	push   eax
c001504e:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0015053:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015059:	e8 dc c0 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001505e:	5e                   	pop    esi
c001505f:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0015064:	5f                   	pop    edi
c0015065:	68 cc ae 02 c0       	push   0xc002aecc
c001506a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015070:	e8 9f c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0015075:	0f 21 d0             	mov    eax,db2
c0015078:	5d                   	pop    ebp
c0015079:	5a                   	pop    edx
c001507a:	50                   	push   eax
c001507b:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0015080:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015086:	e8 af c0 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001508b:	59                   	pop    ecx
c001508c:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0015091:	5e                   	pop    esi
c0015092:	68 d4 ae 02 c0       	push   0xc002aed4
c0015097:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001509d:	e8 72 c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c00150a2:	0f 21 d8             	mov    eax,db3
c00150a5:	5f                   	pop    edi
c00150a6:	5d                   	pop    ebp
c00150a7:	50                   	push   eax
c00150a8:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c00150ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b3:	e8 82 c0 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c00150b8:	58                   	pop    eax
c00150b9:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c00150be:	5a                   	pop    edx
c00150bf:	68 dc ae 02 c0       	push   0xc002aedc
c00150c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ca:	e8 45 c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c00150cf:	0f 21 f0             	mov    eax,db6
c00150d2:	59                   	pop    ecx
c00150d3:	5e                   	pop    esi
c00150d4:	50                   	push   eax
c00150d5:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c00150da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e0:	e8 55 c0 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c00150e5:	5f                   	pop    edi
c00150e6:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c00150eb:	5d                   	pop    ebp
c00150ec:	68 e4 ae 02 c0       	push   0xc002aee4
c00150f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f7:	e8 18 c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c00150fc:	0f 21 f8             	mov    eax,db7
c00150ff:	5a                   	pop    edx
c0015100:	59                   	pop    ecx
c0015101:	50                   	push   eax
c0015102:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0015107:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001510d:	e8 28 c0 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0015112:	5e                   	pop    esi
c0015113:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015116:	e8 50 85 00 00       	call   c001d66b <Thr::getDriverNameFromAddress(unsigned long)>
c001511b:	83 c4 10             	add    esp,0x10
c001511e:	85 c0                	test   eax,eax
c0015120:	74 7d                	je     c001519f <displayDebugInfo(regs*)+0x48b>
c0015122:	89 c6                	mov    esi,eax
c0015124:	50                   	push   eax
c0015125:	50                   	push   eax
c0015126:	56                   	push   esi
c0015127:	68 ec ae 02 c0       	push   0xc002aeec
c001512c:	e8 6c dd ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0015131:	5a                   	pop    edx
c0015132:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0015137:	59                   	pop    ecx
c0015138:	68 fa ae 02 c0       	push   0xc002aefa
c001513d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015143:	e8 cc bf ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0015148:	5f                   	pop    edi
c0015149:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001514e:	5d                   	pop    ebp
c001514f:	56                   	push   esi
c0015150:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015156:	e8 b9 bf ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001515b:	58                   	pop    eax
c001515c:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0015161:	5a                   	pop    edx
c0015162:	68 06 af 02 c0       	push   0xc002af06
c0015167:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001516d:	e8 a2 bf ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0015172:	59                   	pop    ecx
c0015173:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c0015178:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001517e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015181:	e8 1c 85 00 00       	call   c001d6a2 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015186:	5b                   	pop    ebx
c0015187:	5d                   	pop    ebp
c0015188:	50                   	push   eax
c0015189:	57                   	push   edi
c001518a:	e8 ab bf ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001518f:	58                   	pop    eax
c0015190:	5a                   	pop    edx
c0015191:	56                   	push   esi
c0015192:	68 12 af 02 c0       	push   0xc002af12
c0015197:	e8 01 dd ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001519c:	83 c4 10             	add    esp,0x10
c001519f:	fa                   	cli    
c00151a0:	f4                   	hlt    
c00151a1:	eb fe                	jmp    c00151a1 <displayDebugInfo(regs*)+0x48d>

c00151a3 <x87EmulHandler(regs*, void*)>:
c00151a3:	53                   	push   ebx
c00151a4:	83 ec 14             	sub    esp,0x14
c00151a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00151ab:	0f 20 c0             	mov    eax,cr0
c00151ae:	53                   	push   ebx
c00151af:	e8 44 a8 00 00       	call   c001f9f8 <Vm::x87Handler(regs*)>
c00151b4:	83 c4 10             	add    esp,0x10
c00151b7:	84 c0                	test   al,al
c00151b9:	74 05                	je     c00151c0 <x87EmulHandler(regs*, void*)+0x1d>
c00151bb:	83 c4 08             	add    esp,0x8
c00151be:	5b                   	pop    ebx
c00151bf:	c3                   	ret    
c00151c0:	83 ec 0c             	sub    esp,0xc
c00151c3:	68 22 af 02 c0       	push   0xc002af22
c00151c8:	e8 d0 dc ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00151cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151d0:	e8 3f fb ff ff       	call   c0014d14 <displayDebugInfo(regs*)>

c00151d5 <gpFault(regs*, void*)>:
c00151d5:	53                   	push   ebx
c00151d6:	83 ec 14             	sub    esp,0x14
c00151d9:	c7 05 00 e5 02 c0 75 ed 01 c0 	mov    DWORD PTR ds:0xc002e500,0xc001ed75
c00151e3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00151e7:	53                   	push   ebx
c00151e8:	e8 88 9b 00 00       	call   c001ed75 <Vm::faultHandler(regs*)>
c00151ed:	83 c4 10             	add    esp,0x10
c00151f0:	84 c0                	test   al,al
c00151f2:	74 05                	je     c00151f9 <gpFault(regs*, void*)+0x24>
c00151f4:	83 c4 08             	add    esp,0x8
c00151f7:	5b                   	pop    ebx
c00151f8:	c3                   	ret    
c00151f9:	83 ec 0c             	sub    esp,0xc
c00151fc:	68 38 af 02 c0       	push   0xc002af38
c0015201:	e8 97 dc ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0015206:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015209:	e8 06 fb ff ff       	call   c0014d14 <displayDebugInfo(regs*)>

c001520e <pgFault(regs*, void*)>:
c001520e:	83 ec 14             	sub    esp,0x14
c0015211:	0f 20 d0             	mov    eax,cr2
c0015214:	50                   	push   eax
c0015215:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001521a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001521d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015223:	e8 b2 d8 ff ff       	call   c0012ada <VAS::tryLoadBackOffDisk(unsigned long)>
c0015228:	83 c4 10             	add    esp,0x10
c001522b:	84 c0                	test   al,al
c001522d:	74 04                	je     c0015233 <pgFault(regs*, void*)+0x25>
c001522f:	83 c4 0c             	add    esp,0xc
c0015232:	c3                   	ret    
c0015233:	83 ec 0c             	sub    esp,0xc
c0015236:	68 53 af 02 c0       	push   0xc002af53
c001523b:	e8 5d dc ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0015240:	58                   	pop    eax
c0015241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015245:	e8 ca fa ff ff       	call   c0014d14 <displayDebugInfo(regs*)>

c001524a <otherISRHandler(regs*, void*)>:
c001524a:	53                   	push   ebx
c001524b:	83 ec 0c             	sub    esp,0xc
c001524e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015252:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015255:	50                   	push   eax
c0015256:	50                   	push   eax
c0015257:	68 60 af 02 c0       	push   0xc002af60
c001525c:	e8 3c dc ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0015261:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015264:	e8 ab fa ff ff       	call   c0014d14 <displayDebugInfo(regs*)>

c0015269 <opcodeFault(regs*, void*)>:
c0015269:	55                   	push   ebp
c001526a:	89 e5                	mov    ebp,esp
c001526c:	56                   	push   esi
c001526d:	53                   	push   ebx
c001526e:	83 ec 40             	sub    esp,0x40
c0015271:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0015276:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001527c:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015282:	84 c0                	test   al,al
c0015284:	74 24                	je     c00152aa <opcodeFault(regs*, void*)+0x41>
c0015286:	83 ec 0c             	sub    esp,0xc
c0015289:	68 80 af 02 c0       	push   0xc002af80
c001528e:	e8 0a dc ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0015293:	83 c4 10             	add    esp,0x10
c0015296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015299:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001529c:	8d 50 19             	lea    edx,[eax+0x19]
c001529f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152a5:	e9 be 05 00 00       	jmp    c0015868 <opcodeFault(regs*, void*)+0x5ff>
c00152aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152b0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00152b3:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00152b7:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00152bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152be:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152c1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00152c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c7:	8a 00                	mov    al,BYTE PTR [eax]
c00152c9:	3c f0                	cmp    al,0xf0
c00152cb:	75 17                	jne    c00152e4 <opcodeFault(regs*, void*)+0x7b>
c00152cd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152d6:	8d 50 01             	lea    edx,[eax+0x1]
c00152d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152dc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152df:	e9 da 00 00 00       	jmp    c00153be <opcodeFault(regs*, void*)+0x155>
c00152e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e7:	8a 00                	mov    al,BYTE PTR [eax]
c00152e9:	3c f2                	cmp    al,0xf2
c00152eb:	74 09                	je     c00152f6 <opcodeFault(regs*, void*)+0x8d>
c00152ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f0:	8a 00                	mov    al,BYTE PTR [eax]
c00152f2:	3c f3                	cmp    al,0xf3
c00152f4:	75 1b                	jne    c0015311 <opcodeFault(regs*, void*)+0xa8>
c00152f6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152fa:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015300:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015303:	8d 50 01             	lea    edx,[eax+0x1]
c0015306:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015309:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001530c:	e9 ad 00 00 00       	jmp    c00153be <opcodeFault(regs*, void*)+0x155>
c0015311:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015314:	8a 00                	mov    al,BYTE PTR [eax]
c0015316:	3c 66                	cmp    al,0x66
c0015318:	75 1f                	jne    c0015339 <opcodeFault(regs*, void*)+0xd0>
c001531a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001531e:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015322:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015328:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001532b:	8d 50 01             	lea    edx,[eax+0x1]
c001532e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015331:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015334:	e9 85 00 00 00       	jmp    c00153be <opcodeFault(regs*, void*)+0x155>
c0015339:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001533c:	8a 00                	mov    al,BYTE PTR [eax]
c001533e:	3c 67                	cmp    al,0x67
c0015340:	75 18                	jne    c001535a <opcodeFault(regs*, void*)+0xf1>
c0015342:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015346:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001534f:	8d 50 01             	lea    edx,[eax+0x1]
c0015352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015355:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015358:	eb 64                	jmp    c00153be <opcodeFault(regs*, void*)+0x155>
c001535a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535d:	8a 00                	mov    al,BYTE PTR [eax]
c001535f:	3c 2e                	cmp    al,0x2e
c0015361:	74 09                	je     c001536c <opcodeFault(regs*, void*)+0x103>
c0015363:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015366:	8a 00                	mov    al,BYTE PTR [eax]
c0015368:	3c 3e                	cmp    al,0x3e
c001536a:	75 18                	jne    c0015384 <opcodeFault(regs*, void*)+0x11b>
c001536c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015370:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015376:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015379:	8d 50 01             	lea    edx,[eax+0x1]
c001537c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015382:	eb 3a                	jmp    c00153be <opcodeFault(regs*, void*)+0x155>
c0015384:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015387:	8a 00                	mov    al,BYTE PTR [eax]
c0015389:	3c 36                	cmp    al,0x36
c001538b:	74 1b                	je     c00153a8 <opcodeFault(regs*, void*)+0x13f>
c001538d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015390:	8a 00                	mov    al,BYTE PTR [eax]
c0015392:	3c 26                	cmp    al,0x26
c0015394:	74 12                	je     c00153a8 <opcodeFault(regs*, void*)+0x13f>
c0015396:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015399:	8a 00                	mov    al,BYTE PTR [eax]
c001539b:	3c 64                	cmp    al,0x64
c001539d:	74 09                	je     c00153a8 <opcodeFault(regs*, void*)+0x13f>
c001539f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a2:	8a 00                	mov    al,BYTE PTR [eax]
c00153a4:	3c 65                	cmp    al,0x65
c00153a6:	75 16                	jne    c00153be <opcodeFault(regs*, void*)+0x155>
c00153a8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153ac:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b5:	8d 50 01             	lea    edx,[eax+0x1]
c00153b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c1:	8a 00                	mov    al,BYTE PTR [eax]
c00153c3:	3c 0f                	cmp    al,0xf
c00153c5:	0f 85 ad 00 00 00    	jne    c0015478 <opcodeFault(regs*, void*)+0x20f>
c00153cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ce:	40                   	inc    eax
c00153cf:	8a 00                	mov    al,BYTE PTR [eax]
c00153d1:	3c c2                	cmp    al,0xc2
c00153d3:	74 0e                	je     c00153e3 <opcodeFault(regs*, void*)+0x17a>
c00153d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d8:	40                   	inc    eax
c00153d9:	8a 00                	mov    al,BYTE PTR [eax]
c00153db:	3c c3                	cmp    al,0xc3
c00153dd:	0f 85 95 00 00 00    	jne    c0015478 <opcodeFault(regs*, void*)+0x20f>
c00153e3:	83 ec 0c             	sub    esp,0xc
c00153e6:	68 a3 af 02 c0       	push   0xc002afa3
c00153eb:	e8 ad da ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00153f0:	83 c4 10             	add    esp,0x10
c00153f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f9:	8d 50 01             	lea    edx,[eax+0x1]
c00153fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ff:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015402:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015405:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015408:	8a 00                	mov    al,BYTE PTR [eax]
c001540a:	8d 50 fe             	lea    edx,[eax-0x2]
c001540d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015410:	88 10                	mov    BYTE PTR [eax],dl
c0015412:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015415:	50                   	push   eax
c0015416:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015419:	50                   	push   eax
c001541a:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001541d:	50                   	push   eax
c001541e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015421:	e8 2a 48 00 00       	call   c0019c50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015426:	83 c4 10             	add    esp,0x10
c0015429:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001542f:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015432:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015435:	01 d0                	add    eax,edx
c0015437:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001543a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015440:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015443:	48                   	dec    eax
c0015444:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015447:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001544d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015453:	83 ec 04             	sub    esp,0x4
c0015456:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015459:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001545c:	50                   	push   eax
c001545d:	e8 52 ad fe ff       	call   c00001b4 <voodooXADD>
c0015462:	83 c4 10             	add    esp,0x10
c0015465:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015468:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001546b:	01 c2                	add    edx,eax
c001546d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015470:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015473:	e9 f0 03 00 00       	jmp    c0015868 <opcodeFault(regs*, void*)+0x5ff>
c0015478:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547b:	8a 00                	mov    al,BYTE PTR [eax]
c001547d:	3c 0f                	cmp    al,0xf
c001547f:	0f 85 8b 01 00 00    	jne    c0015610 <opcodeFault(regs*, void*)+0x3a7>
c0015485:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015488:	40                   	inc    eax
c0015489:	8a 00                	mov    al,BYTE PTR [eax]
c001548b:	3c c7                	cmp    al,0xc7
c001548d:	0f 86 7d 01 00 00    	jbe    c0015610 <opcodeFault(regs*, void*)+0x3a7>
c0015493:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015496:	40                   	inc    eax
c0015497:	8a 00                	mov    al,BYTE PTR [eax]
c0015499:	3c cf                	cmp    al,0xcf
c001549b:	0f 87 6f 01 00 00    	ja     c0015610 <opcodeFault(regs*, void*)+0x3a7>
c00154a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a4:	40                   	inc    eax
c00154a5:	8a 00                	mov    al,BYTE PTR [eax]
c00154a7:	83 c0 38             	add    eax,0x38
c00154aa:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00154ad:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154b1:	75 0b                	jne    c00154be <opcodeFault(regs*, void*)+0x255>
c00154b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b6:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00154b9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154bc:	eb 75                	jmp    c0015533 <opcodeFault(regs*, void*)+0x2ca>
c00154be:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154c2:	75 0b                	jne    c00154cf <opcodeFault(regs*, void*)+0x266>
c00154c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00154ca:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154cd:	eb 64                	jmp    c0015533 <opcodeFault(regs*, void*)+0x2ca>
c00154cf:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00154d3:	75 0b                	jne    c00154e0 <opcodeFault(regs*, void*)+0x277>
c00154d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00154db:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154de:	eb 53                	jmp    c0015533 <opcodeFault(regs*, void*)+0x2ca>
c00154e0:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00154e4:	75 0b                	jne    c00154f1 <opcodeFault(regs*, void*)+0x288>
c00154e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154ec:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154ef:	eb 42                	jmp    c0015533 <opcodeFault(regs*, void*)+0x2ca>
c00154f1:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00154f5:	75 0b                	jne    c0015502 <opcodeFault(regs*, void*)+0x299>
c00154f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fa:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00154fd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015500:	eb 31                	jmp    c0015533 <opcodeFault(regs*, void*)+0x2ca>
c0015502:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015506:	75 0b                	jne    c0015513 <opcodeFault(regs*, void*)+0x2aa>
c0015508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001550e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015511:	eb 20                	jmp    c0015533 <opcodeFault(regs*, void*)+0x2ca>
c0015513:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015517:	75 0b                	jne    c0015524 <opcodeFault(regs*, void*)+0x2bb>
c0015519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001551f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015522:	eb 0f                	jmp    c0015533 <opcodeFault(regs*, void*)+0x2ca>
c0015524:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015528:	75 09                	jne    c0015533 <opcodeFault(regs*, void*)+0x2ca>
c001552a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015530:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015533:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015537:	74 10                	je     c0015549 <opcodeFault(regs*, void*)+0x2e0>
c0015539:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015540:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015547:	eb 2d                	jmp    c0015576 <opcodeFault(regs*, void*)+0x30d>
c0015549:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001554c:	c1 e0 18             	shl    eax,0x18
c001554f:	89 c2                	mov    edx,eax
c0015551:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015554:	c1 e0 08             	shl    eax,0x8
c0015557:	25 00 00 ff 00       	and    eax,0xff0000
c001555c:	09 c2                	or     edx,eax
c001555e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015561:	c1 e8 08             	shr    eax,0x8
c0015564:	25 00 ff 00 00       	and    eax,0xff00
c0015569:	09 c2                	or     edx,eax
c001556b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001556e:	c1 e8 18             	shr    eax,0x18
c0015571:	09 d0                	or     eax,edx
c0015573:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015576:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001557a:	75 0b                	jne    c0015587 <opcodeFault(regs*, void*)+0x31e>
c001557c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015582:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015585:	eb 75                	jmp    c00155fc <opcodeFault(regs*, void*)+0x393>
c0015587:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001558b:	75 0b                	jne    c0015598 <opcodeFault(regs*, void*)+0x32f>
c001558d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015590:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015593:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015596:	eb 64                	jmp    c00155fc <opcodeFault(regs*, void*)+0x393>
c0015598:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001559c:	75 0b                	jne    c00155a9 <opcodeFault(regs*, void*)+0x340>
c001559e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155a4:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00155a7:	eb 53                	jmp    c00155fc <opcodeFault(regs*, void*)+0x393>
c00155a9:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155ad:	75 0b                	jne    c00155ba <opcodeFault(regs*, void*)+0x351>
c00155af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155b5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00155b8:	eb 42                	jmp    c00155fc <opcodeFault(regs*, void*)+0x393>
c00155ba:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155be:	75 0b                	jne    c00155cb <opcodeFault(regs*, void*)+0x362>
c00155c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155c6:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00155c9:	eb 31                	jmp    c00155fc <opcodeFault(regs*, void*)+0x393>
c00155cb:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155cf:	75 0b                	jne    c00155dc <opcodeFault(regs*, void*)+0x373>
c00155d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155d7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00155da:	eb 20                	jmp    c00155fc <opcodeFault(regs*, void*)+0x393>
c00155dc:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155e0:	75 0b                	jne    c00155ed <opcodeFault(regs*, void*)+0x384>
c00155e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00155eb:	eb 0f                	jmp    c00155fc <opcodeFault(regs*, void*)+0x393>
c00155ed:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155f1:	75 09                	jne    c00155fc <opcodeFault(regs*, void*)+0x393>
c00155f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00155fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015602:	8d 50 02             	lea    edx,[eax+0x2]
c0015605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015608:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001560b:	e9 58 02 00 00       	jmp    c0015868 <opcodeFault(regs*, void*)+0x5ff>
c0015610:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015613:	8a 00                	mov    al,BYTE PTR [eax]
c0015615:	3c 0f                	cmp    al,0xf
c0015617:	0f 85 76 01 00 00    	jne    c0015793 <opcodeFault(regs*, void*)+0x52a>
c001561d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015620:	40                   	inc    eax
c0015621:	8a 00                	mov    al,BYTE PTR [eax]
c0015623:	3c c7                	cmp    al,0xc7
c0015625:	0f 85 68 01 00 00    	jne    c0015793 <opcodeFault(regs*, void*)+0x52a>
c001562b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001562e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015631:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015634:	8d 50 01             	lea    edx,[eax+0x1]
c0015637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001563d:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015640:	50                   	push   eax
c0015641:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015644:	50                   	push   eax
c0015645:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015648:	50                   	push   eax
c0015649:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001564c:	e8 ff 45 00 00       	call   c0019c50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015651:	83 c4 10             	add    esp,0x10
c0015654:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015657:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001565a:	83 f0 01             	xor    eax,0x1
c001565d:	84 c0                	test   al,al
c001565f:	0f 84 2e 01 00 00    	je     c0015793 <opcodeFault(regs*, void*)+0x52a>
c0015665:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015668:	3c 01                	cmp    al,0x1
c001566a:	0f 85 23 01 00 00    	jne    c0015793 <opcodeFault(regs*, void*)+0x52a>
c0015670:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015673:	83 f0 01             	xor    eax,0x1
c0015676:	84 c0                	test   al,al
c0015678:	0f 84 15 01 00 00    	je     c0015793 <opcodeFault(regs*, void*)+0x52a>
c001567e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015681:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015684:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015687:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001568e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015691:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015694:	89 c2                	mov    edx,eax
c0015696:	b8 00 00 00 00       	mov    eax,0x0
c001569b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001569e:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00156a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00156a7:	ba 00 00 00 00       	mov    edx,0x0
c00156ac:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00156af:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00156b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00156b8:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156bb:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00156c2:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156c5:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156c8:	89 c2                	mov    edx,eax
c00156ca:	b8 00 00 00 00       	mov    eax,0x0
c00156cf:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156d2:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00156d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156db:	ba 00 00 00 00       	mov    edx,0x0
c00156e0:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00156e3:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00156e6:	e8 79 86 00 00       	call   c001dd64 <lockScheduler()>
c00156eb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00156ee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00156f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f3:	89 c1                	mov    ecx,eax
c00156f5:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00156f8:	89 cb                	mov    ebx,ecx
c00156fa:	89 d0                	mov    eax,edx
c00156fc:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00156ff:	89 c6                	mov    esi,eax
c0015701:	89 f0                	mov    eax,esi
c0015703:	09 d8                	or     eax,ebx
c0015705:	85 c0                	test   eax,eax
c0015707:	75 21                	jne    c001572a <opcodeFault(regs*, void*)+0x4c1>
c0015709:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001570c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001570f:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015712:	89 01                	mov    DWORD PTR [ecx],eax
c0015714:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015717:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001571d:	83 c8 40             	or     eax,0x40
c0015720:	89 c2                	mov    edx,eax
c0015722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015725:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015728:	eb 3e                	jmp    c0015768 <opcodeFault(regs*, void*)+0x4ff>
c001572a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001572d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015730:	8b 00                	mov    eax,DWORD PTR [eax]
c0015732:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015735:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015738:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001573b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015741:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015744:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015747:	89 d0                	mov    eax,edx
c0015749:	31 d2                	xor    edx,edx
c001574b:	89 c3                	mov    ebx,eax
c001574d:	89 d6                	mov    esi,edx
c001574f:	89 da                	mov    edx,ebx
c0015751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015754:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015757:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001575d:	83 e0 bf             	and    eax,0xffffffbf
c0015760:	89 c2                	mov    edx,eax
c0015762:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015765:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015768:	e8 f9 85 00 00       	call   c001dd66 <unlockScheduler()>
c001576d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015770:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015773:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015776:	01 c2                	add    edx,eax
c0015778:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001577e:	83 ec 0c             	sub    esp,0xc
c0015781:	68 b2 af 02 c0       	push   0xc002afb2
c0015786:	e8 12 d7 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001578b:	83 c4 10             	add    esp,0x10
c001578e:	e9 d5 00 00 00       	jmp    c0015868 <opcodeFault(regs*, void*)+0x5ff>
c0015793:	83 ec 0c             	sub    esp,0xc
c0015796:	68 c5 af 02 c0       	push   0xc002afc5
c001579b:	e8 fd d6 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00157a0:	83 c4 10             	add    esp,0x10
c00157a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157af:	c1 e0 04             	shl    eax,0x4
c00157b2:	01 d0                	add    eax,edx
c00157b4:	83 c0 03             	add    eax,0x3
c00157b7:	8a 00                	mov    al,BYTE PTR [eax]
c00157b9:	0f b6 d8             	movzx  ebx,al
c00157bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bf:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157c8:	c1 e0 04             	shl    eax,0x4
c00157cb:	01 d0                	add    eax,edx
c00157cd:	83 c0 02             	add    eax,0x2
c00157d0:	8a 00                	mov    al,BYTE PTR [eax]
c00157d2:	0f b6 c8             	movzx  ecx,al
c00157d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157e1:	c1 e0 04             	shl    eax,0x4
c00157e4:	01 d0                	add    eax,edx
c00157e6:	40                   	inc    eax
c00157e7:	8a 00                	mov    al,BYTE PTR [eax]
c00157e9:	0f b6 d0             	movzx  edx,al
c00157ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ef:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00157f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157f8:	c1 e0 04             	shl    eax,0x4
c00157fb:	01 f0                	add    eax,esi
c00157fd:	8a 00                	mov    al,BYTE PTR [eax]
c00157ff:	0f b6 c0             	movzx  eax,al
c0015802:	83 ec 0c             	sub    esp,0xc
c0015805:	53                   	push   ebx
c0015806:	51                   	push   ecx
c0015807:	52                   	push   edx
c0015808:	50                   	push   eax
c0015809:	68 d8 af 02 c0       	push   0xc002afd8
c001580e:	e8 8a d6 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0015813:	83 c4 20             	add    esp,0x20
c0015816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015819:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001581c:	83 c0 03             	add    eax,0x3
c001581f:	8a 00                	mov    al,BYTE PTR [eax]
c0015821:	0f b6 d8             	movzx  ebx,al
c0015824:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015827:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001582a:	83 c0 02             	add    eax,0x2
c001582d:	8a 00                	mov    al,BYTE PTR [eax]
c001582f:	0f b6 c8             	movzx  ecx,al
c0015832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015835:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015838:	40                   	inc    eax
c0015839:	8a 00                	mov    al,BYTE PTR [eax]
c001583b:	0f b6 d0             	movzx  edx,al
c001583e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015841:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015844:	8a 00                	mov    al,BYTE PTR [eax]
c0015846:	0f b6 c0             	movzx  eax,al
c0015849:	83 ec 0c             	sub    esp,0xc
c001584c:	53                   	push   ebx
c001584d:	51                   	push   ecx
c001584e:	52                   	push   edx
c001584f:	50                   	push   eax
c0015850:	68 00 b0 02 c0       	push   0xc002b000
c0015855:	e8 43 d6 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001585a:	83 c4 20             	add    esp,0x20
c001585d:	83 ec 0c             	sub    esp,0xc
c0015860:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015863:	e8 ac f4 ff ff       	call   c0014d14 <displayDebugInfo(regs*)>
c0015868:	8d 65 f8             	lea    esp,[ebp-0x8]
c001586b:	5b                   	pop    ebx
c001586c:	5e                   	pop    esi
c001586d:	5d                   	pop    ebp
c001586e:	c3                   	ret    

c001586f <displayProgramFault(char const*)>:
c001586f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015874:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015877:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001587d:	85 c0                	test   eax,eax
c001587f:	74 15                	je     c0015896 <displayProgramFault(char const*)+0x27>
c0015881:	83 ec 0c             	sub    esp,0xc
c0015884:	6a 04                	push   0x4
c0015886:	6a 0f                	push   0xf
c0015888:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001588c:	50                   	push   eax
c001588d:	e8 44 b5 ff ff       	call   c0010dd6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015892:	83 c4 1c             	add    esp,0x1c
c0015895:	c3                   	ret    
c0015896:	c3                   	ret    

c0015897 <setupInterruptController()>:
c0015897:	55                   	push   ebp
c0015898:	89 e5                	mov    ebp,esp
c001589a:	53                   	push   ebx
c001589b:	83 ec 24             	sub    esp,0x24
c001589e:	b8 00 00 00 00       	mov    eax,0x0
c00158a3:	85 c0                	test   eax,eax
c00158a5:	0f 95 c0             	setne  al
c00158a8:	84 c0                	test   al,al
c00158aa:	74 5b                	je     c0015907 <setupInterruptController()+0x70>
c00158ac:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00158b3:	83 ec 0c             	sub    esp,0xc
c00158b6:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00158b9:	e8 85 9f ff ff       	call   c000f843 <malloc>
c00158be:	83 c4 10             	add    esp,0x10
c00158c1:	89 c3                	mov    ebx,eax
c00158c3:	83 ec 0c             	sub    esp,0xc
c00158c6:	53                   	push   ebx
c00158c7:	e8 f0 ff 00 00       	call   c00258bc <APIC::APIC()>
c00158cc:	83 c4 10             	add    esp,0x10
c00158cf:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00158d2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00158d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00158da:	83 c0 08             	add    eax,0x8
c00158dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00158df:	6a 00                	push   0x0
c00158e1:	6a 00                	push   0x0
c00158e3:	6a 00                	push   0x0
c00158e5:	52                   	push   edx
c00158e6:	ff d0                	call   eax
c00158e8:	83 c4 10             	add    esp,0x10
c00158eb:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00158f0:	83 ec 08             	sub    esp,0x8
c00158f3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00158f6:	50                   	push   eax
c00158f7:	e8 c8 e9 ff ff       	call   c00142c4 <Device::addChild(Device*)>
c00158fc:	83 c4 10             	add    esp,0x10
c00158ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015902:	e9 89 03 00 00       	jmp    c0015c90 <setupInterruptController()+0x3f9>
c0015907:	a0 00 0d 03 c0       	mov    al,ds:0xc0030d00
c001590c:	84 c0                	test   al,al
c001590e:	75 24                	jne    c0015934 <setupInterruptController()+0x9d>
c0015910:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0015915:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001591b:	83 e2 fe             	and    edx,0xfffffffe
c001591e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015924:	83 ec 0c             	sub    esp,0xc
c0015927:	68 25 b0 02 c0       	push   0xc002b025
c001592c:	e8 6c d5 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0015931:	83 c4 10             	add    esp,0x10
c0015934:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0015939:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001593f:	83 e0 01             	and    eax,0x1
c0015942:	84 c0                	test   al,al
c0015944:	0f 95 c0             	setne  al
c0015947:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001594a:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015951:	83 ec 0c             	sub    esp,0xc
c0015954:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015957:	e8 e7 9e ff ff       	call   c000f843 <malloc>
c001595c:	83 c4 10             	add    esp,0x10
c001595f:	89 c3                	mov    ebx,eax
c0015961:	83 ec 0c             	sub    esp,0xc
c0015964:	53                   	push   ebx
c0015965:	e8 aa 04 01 00       	call   c0025e14 <PIC::PIC()>
c001596a:	83 c4 10             	add    esp,0x10
c001596d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015970:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015973:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015976:	8b 00                	mov    eax,DWORD PTR [eax]
c0015978:	83 c0 08             	add    eax,0x8
c001597b:	8b 00                	mov    eax,DWORD PTR [eax]
c001597d:	6a 00                	push   0x0
c001597f:	6a 00                	push   0x0
c0015981:	6a 00                	push   0x0
c0015983:	52                   	push   edx
c0015984:	ff d0                	call   eax
c0015986:	83 c4 10             	add    esp,0x10
c0015989:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001598d:	74 73                	je     c0015a02 <setupInterruptController()+0x16b>
c001598f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015992:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015995:	8b 00                	mov    eax,DWORD PTR [eax]
c0015997:	83 c0 0c             	add    eax,0xc
c001599a:	8b 00                	mov    eax,DWORD PTR [eax]
c001599c:	6a 00                	push   0x0
c001599e:	6a 00                	push   0x0
c00159a0:	6a 00                	push   0x0
c00159a2:	52                   	push   edx
c00159a3:	ff d0                	call   eax
c00159a5:	83 c4 10             	add    esp,0x10
c00159a8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159ac:	74 15                	je     c00159c3 <setupInterruptController()+0x12c>
c00159ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b3:	83 c0 04             	add    eax,0x4
c00159b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b8:	83 ec 0c             	sub    esp,0xc
c00159bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159be:	ff d0                	call   eax
c00159c0:	83 c4 10             	add    esp,0x10
c00159c3:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00159ca:	83 ec 0c             	sub    esp,0xc
c00159cd:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00159d0:	e8 6e 9e ff ff       	call   c000f843 <malloc>
c00159d5:	83 c4 10             	add    esp,0x10
c00159d8:	89 c3                	mov    ebx,eax
c00159da:	83 ec 0c             	sub    esp,0xc
c00159dd:	53                   	push   ebx
c00159de:	e8 d9 fe 00 00       	call   c00258bc <APIC::APIC()>
c00159e3:	83 c4 10             	add    esp,0x10
c00159e6:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159e9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f1:	83 c0 08             	add    eax,0x8
c00159f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f6:	6a 00                	push   0x0
c00159f8:	6a 00                	push   0x0
c00159fa:	6a 00                	push   0x0
c00159fc:	52                   	push   edx
c00159fd:	ff d0                	call   eax
c00159ff:	83 c4 10             	add    esp,0x10
c0015a02:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0015a07:	83 ec 08             	sub    esp,0x8
c0015a0a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a0d:	50                   	push   eax
c0015a0e:	e8 b1 e8 ff ff       	call   c00142c4 <Device::addChild(Device*)>
c0015a13:	83 c4 10             	add    esp,0x10
c0015a16:	c7 05 04 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e504,0x0
c0015a20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a23:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a25:	83 c0 24             	add    eax,0x24
c0015a28:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2a:	6a 00                	push   0x0
c0015a2c:	68 4a 52 01 c0       	push   0xc001524a
c0015a31:	6a 00                	push   0x0
c0015a33:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a36:	ff d0                	call   eax
c0015a38:	83 c4 10             	add    esp,0x10
c0015a3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a40:	83 c0 24             	add    eax,0x24
c0015a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a45:	6a 00                	push   0x0
c0015a47:	68 4a 52 01 c0       	push   0xc001524a
c0015a4c:	6a 01                	push   0x1
c0015a4e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a51:	ff d0                	call   eax
c0015a53:	83 c4 10             	add    esp,0x10
c0015a56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a59:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5b:	83 c0 24             	add    eax,0x24
c0015a5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a60:	6a 00                	push   0x0
c0015a62:	68 71 4b 01 c0       	push   0xc0014b71
c0015a67:	6a 02                	push   0x2
c0015a69:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a6c:	ff d0                	call   eax
c0015a6e:	83 c4 10             	add    esp,0x10
c0015a71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a74:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a76:	83 c0 24             	add    eax,0x24
c0015a79:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7b:	6a 00                	push   0x0
c0015a7d:	68 4a 52 01 c0       	push   0xc001524a
c0015a82:	6a 03                	push   0x3
c0015a84:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a87:	ff d0                	call   eax
c0015a89:	83 c4 10             	add    esp,0x10
c0015a8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a91:	83 c0 24             	add    eax,0x24
c0015a94:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a96:	6a 00                	push   0x0
c0015a98:	68 4a 52 01 c0       	push   0xc001524a
c0015a9d:	6a 04                	push   0x4
c0015a9f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa2:	ff d0                	call   eax
c0015aa4:	83 c4 10             	add    esp,0x10
c0015aa7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aac:	83 c0 24             	add    eax,0x24
c0015aaf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab1:	6a 00                	push   0x0
c0015ab3:	68 4a 52 01 c0       	push   0xc001524a
c0015ab8:	6a 05                	push   0x5
c0015aba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015abd:	ff d0                	call   eax
c0015abf:	83 c4 10             	add    esp,0x10
c0015ac2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac7:	83 c0 24             	add    eax,0x24
c0015aca:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acc:	6a 00                	push   0x0
c0015ace:	68 69 52 01 c0       	push   0xc0015269
c0015ad3:	6a 06                	push   0x6
c0015ad5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad8:	ff d0                	call   eax
c0015ada:	83 c4 10             	add    esp,0x10
c0015add:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae2:	83 c0 24             	add    eax,0x24
c0015ae5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae7:	6a 00                	push   0x0
c0015ae9:	68 a3 51 01 c0       	push   0xc00151a3
c0015aee:	6a 07                	push   0x7
c0015af0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af3:	ff d0                	call   eax
c0015af5:	83 c4 10             	add    esp,0x10
c0015af8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015afb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afd:	83 c0 24             	add    eax,0x24
c0015b00:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b02:	6a 00                	push   0x0
c0015b04:	68 8c 49 01 c0       	push   0xc001498c
c0015b09:	6a 08                	push   0x8
c0015b0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b0e:	ff d0                	call   eax
c0015b10:	83 c4 10             	add    esp,0x10
c0015b13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b16:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b18:	83 c0 24             	add    eax,0x24
c0015b1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1d:	6a 00                	push   0x0
c0015b1f:	68 4a 52 01 c0       	push   0xc001524a
c0015b24:	6a 09                	push   0x9
c0015b26:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b29:	ff d0                	call   eax
c0015b2b:	83 c4 10             	add    esp,0x10
c0015b2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b31:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b33:	83 c0 24             	add    eax,0x24
c0015b36:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b38:	6a 00                	push   0x0
c0015b3a:	68 4a 52 01 c0       	push   0xc001524a
c0015b3f:	6a 0a                	push   0xa
c0015b41:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b44:	ff d0                	call   eax
c0015b46:	83 c4 10             	add    esp,0x10
c0015b49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4e:	83 c0 24             	add    eax,0x24
c0015b51:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b53:	6a 00                	push   0x0
c0015b55:	68 4a 52 01 c0       	push   0xc001524a
c0015b5a:	6a 0b                	push   0xb
c0015b5c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b5f:	ff d0                	call   eax
c0015b61:	83 c4 10             	add    esp,0x10
c0015b64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b67:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b69:	83 c0 24             	add    eax,0x24
c0015b6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6e:	6a 00                	push   0x0
c0015b70:	68 4a 52 01 c0       	push   0xc001524a
c0015b75:	6a 0c                	push   0xc
c0015b77:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b7a:	ff d0                	call   eax
c0015b7c:	83 c4 10             	add    esp,0x10
c0015b7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b82:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b84:	83 c0 24             	add    eax,0x24
c0015b87:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b89:	6a 00                	push   0x0
c0015b8b:	68 d5 51 01 c0       	push   0xc00151d5
c0015b90:	6a 0d                	push   0xd
c0015b92:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b95:	ff d0                	call   eax
c0015b97:	83 c4 10             	add    esp,0x10
c0015b9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9f:	83 c0 24             	add    eax,0x24
c0015ba2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba4:	6a 00                	push   0x0
c0015ba6:	68 0e 52 01 c0       	push   0xc001520e
c0015bab:	6a 0e                	push   0xe
c0015bad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb0:	ff d0                	call   eax
c0015bb2:	83 c4 10             	add    esp,0x10
c0015bb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bba:	83 c0 24             	add    eax,0x24
c0015bbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbf:	6a 00                	push   0x0
c0015bc1:	68 4a 52 01 c0       	push   0xc001524a
c0015bc6:	6a 0f                	push   0xf
c0015bc8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bcb:	ff d0                	call   eax
c0015bcd:	83 c4 10             	add    esp,0x10
c0015bd0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd5:	83 c0 24             	add    eax,0x24
c0015bd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bda:	6a 00                	push   0x0
c0015bdc:	68 4a 52 01 c0       	push   0xc001524a
c0015be1:	6a 10                	push   0x10
c0015be3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be6:	ff d0                	call   eax
c0015be8:	83 c4 10             	add    esp,0x10
c0015beb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf0:	83 c0 24             	add    eax,0x24
c0015bf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf5:	6a 00                	push   0x0
c0015bf7:	68 4a 52 01 c0       	push   0xc001524a
c0015bfc:	6a 11                	push   0x11
c0015bfe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c01:	ff d0                	call   eax
c0015c03:	83 c4 10             	add    esp,0x10
c0015c06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c09:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0b:	83 c0 24             	add    eax,0x24
c0015c0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c10:	6a 00                	push   0x0
c0015c12:	68 4a 52 01 c0       	push   0xc001524a
c0015c17:	6a 12                	push   0x12
c0015c19:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c1c:	ff d0                	call   eax
c0015c1e:	83 c4 10             	add    esp,0x10
c0015c21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c26:	83 c0 24             	add    eax,0x24
c0015c29:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2b:	6a 00                	push   0x0
c0015c2d:	68 4a 52 01 c0       	push   0xc001524a
c0015c32:	6a 13                	push   0x13
c0015c34:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c37:	ff d0                	call   eax
c0015c39:	83 c4 10             	add    esp,0x10
c0015c3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c41:	83 c0 24             	add    eax,0x24
c0015c44:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c46:	6a 00                	push   0x0
c0015c48:	68 4a 52 01 c0       	push   0xc001524a
c0015c4d:	6a 14                	push   0x14
c0015c4f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c52:	ff d0                	call   eax
c0015c54:	83 c4 10             	add    esp,0x10
c0015c57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5c:	83 c0 24             	add    eax,0x24
c0015c5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c61:	6a 00                	push   0x0
c0015c63:	68 4a 52 01 c0       	push   0xc001524a
c0015c68:	6a 1e                	push   0x1e
c0015c6a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c6d:	ff d0                	call   eax
c0015c6f:	83 c4 10             	add    esp,0x10
c0015c72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c75:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c77:	83 c0 24             	add    eax,0x24
c0015c7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7c:	6a 00                	push   0x0
c0015c7e:	68 13 c7 01 c0       	push   0xc001c713
c0015c83:	6a 60                	push   0x60
c0015c85:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c88:	ff d0                	call   eax
c0015c8a:	83 c4 10             	add    esp,0x10
c0015c8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c90:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c93:	c9                   	leave  
c0015c94:	c3                   	ret    
c0015c95:	90                   	nop

c0015c96 <InterruptController::convertLegacyIRQNumber(int)>:
c0015c96:	55                   	push   ebp
c0015c97:	89 e5                	mov    ebp,esp
c0015c99:	83 ec 08             	sub    esp,0x8
c0015c9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c9f:	83 ec 0c             	sub    esp,0xc
c0015ca2:	50                   	push   eax
c0015ca3:	e8 08 e9 ff ff       	call   c00145b0 <Device::getName()>
c0015ca8:	83 c4 10             	add    esp,0x10
c0015cab:	8a 00                	mov    al,BYTE PTR [eax]
c0015cad:	3c 41                	cmp    al,0x41
c0015caf:	0f 94 c0             	sete   al
c0015cb2:	84 c0                	test   al,al
c0015cb4:	74 28                	je     c0015cde <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cb6:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015cba:	7f 12                	jg     c0015cce <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015cbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cbf:	05 c0 d5 02 c0       	add    eax,0xc002d5c0
c0015cc4:	8a 00                	mov    al,BYTE PTR [eax]
c0015cc6:	0f b6 c0             	movzx  eax,al
c0015cc9:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015ccc:	eb 10                	jmp    c0015cde <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cce:	83 ec 0c             	sub    esp,0xc
c0015cd1:	68 20 ad 02 c0       	push   0xc002ad20
c0015cd6:	e8 ae 48 00 00       	call   c001a589 <Krnl::panic(char const*)>
c0015cdb:	83 c4 10             	add    esp,0x10
c0015cde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ce1:	c9                   	leave  
c0015ce2:	c3                   	ret    
c0015ce3:	90                   	nop

c0015ce4 <startGUI(void*)>:
c0015ce4:	55                   	push   ebp
c0015ce5:	89 e5                	mov    ebp,esp
c0015ce7:	53                   	push   ebx
c0015ce8:	83 ec 04             	sub    esp,0x4
c0015ceb:	e8 76 80 00 00       	call   c001dd66 <unlockScheduler()>
c0015cf0:	8b 1d 68 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e368
c0015cf6:	83 ec 08             	sub    esp,0x8
c0015cf9:	6a 01                	push   0x1
c0015cfb:	68 88 b0 02 c0       	push   0xc002b088
c0015d00:	e8 b7 79 00 00       	call   c001d6bc <Thr::loadDLL(char const*, bool)>
c0015d05:	83 c4 10             	add    esp,0x10
c0015d08:	83 ec 08             	sub    esp,0x8
c0015d0b:	53                   	push   ebx
c0015d0c:	50                   	push   eax
c0015d0d:	e8 de 7b 00 00       	call   c001d8f0 <Thr::executeDLL(unsigned long, void*)>
c0015d12:	83 c4 10             	add    esp,0x10
c0015d15:	8b 1d 68 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e368
c0015d1b:	83 ec 08             	sub    esp,0x8
c0015d1e:	6a 01                	push   0x1
c0015d20:	68 a2 b0 02 c0       	push   0xc002b0a2
c0015d25:	e8 92 79 00 00       	call   c001d6bc <Thr::loadDLL(char const*, bool)>
c0015d2a:	83 c4 10             	add    esp,0x10
c0015d2d:	83 ec 08             	sub    esp,0x8
c0015d30:	53                   	push   ebx
c0015d31:	50                   	push   eax
c0015d32:	e8 b9 7b 00 00       	call   c001d8f0 <Thr::executeDLL(unsigned long, void*)>
c0015d37:	83 c4 10             	add    esp,0x10
c0015d3a:	90                   	nop
c0015d3b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d3e:	c9                   	leave  
c0015d3f:	c3                   	ret    

c0015d40 <startGUIVESA(void*)>:
c0015d40:	55                   	push   ebp
c0015d41:	89 e5                	mov    ebp,esp
c0015d43:	53                   	push   ebx
c0015d44:	83 ec 04             	sub    esp,0x4
c0015d47:	e8 1a 80 00 00       	call   c001dd66 <unlockScheduler()>
c0015d4c:	8b 1d 68 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e368
c0015d52:	83 ec 08             	sub    esp,0x8
c0015d55:	6a 01                	push   0x1
c0015d57:	68 bc b0 02 c0       	push   0xc002b0bc
c0015d5c:	e8 5b 79 00 00       	call   c001d6bc <Thr::loadDLL(char const*, bool)>
c0015d61:	83 c4 10             	add    esp,0x10
c0015d64:	83 ec 08             	sub    esp,0x8
c0015d67:	53                   	push   ebx
c0015d68:	50                   	push   eax
c0015d69:	e8 82 7b 00 00       	call   c001d8f0 <Thr::executeDLL(unsigned long, void*)>
c0015d6e:	83 c4 10             	add    esp,0x10
c0015d71:	8b 1d 68 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e368
c0015d77:	83 ec 08             	sub    esp,0x8
c0015d7a:	6a 01                	push   0x1
c0015d7c:	68 a2 b0 02 c0       	push   0xc002b0a2
c0015d81:	e8 36 79 00 00       	call   c001d6bc <Thr::loadDLL(char const*, bool)>
c0015d86:	83 c4 10             	add    esp,0x10
c0015d89:	83 ec 08             	sub    esp,0x8
c0015d8c:	53                   	push   ebx
c0015d8d:	50                   	push   eax
c0015d8e:	e8 5d 7b 00 00       	call   c001d8f0 <Thr::executeDLL(unsigned long, void*)>
c0015d93:	83 c4 10             	add    esp,0x10
c0015d96:	90                   	nop
c0015d97:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d9a:	c9                   	leave  
c0015d9b:	c3                   	ret    

c0015d9c <sendKeyToTerminal(unsigned char)>:
c0015d9c:	55                   	push   ebp
c0015d9d:	89 e5                	mov    ebp,esp
c0015d9f:	83 ec 28             	sub    esp,0x28
c0015da2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015da8:	a1 44 e4 02 c0       	mov    eax,ds:0xc002e444
c0015dad:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015db1:	83 ec 08             	sub    esp,0x8
c0015db4:	52                   	push   edx
c0015db5:	50                   	push   eax
c0015db6:	e8 57 b5 ff ff       	call   c0011312 <VgaText::receiveKey(unsigned char)>
c0015dbb:	83 c4 10             	add    esp,0x10
c0015dbe:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015dc2:	75 41                	jne    c0015e05 <sendKeyToTerminal(unsigned char)+0x69>
c0015dc4:	e8 c2 7f 00 00       	call   c001dd8b <lockStuff()>
c0015dc9:	a1 20 e5 02 c0       	mov    eax,ds:0xc002e520
c0015dce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015dd1:	c7 05 20 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e520,0x0
c0015ddb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015ddf:	74 1f                	je     c0015e00 <sendKeyToTerminal(unsigned char)+0x64>
c0015de1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015de4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015de7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015dea:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ded:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015df0:	83 ec 0c             	sub    esp,0xc
c0015df3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015df6:	e8 81 85 00 00       	call   c001e37c <unblockTask(ThreadControlBlock*)>
c0015dfb:	83 c4 10             	add    esp,0x10
c0015dfe:	eb db                	jmp    c0015ddb <sendKeyToTerminal(unsigned char)+0x3f>
c0015e00:	e8 20 83 00 00       	call   c001e125 <unlockStuff()>
c0015e05:	90                   	nop
c0015e06:	c9                   	leave  
c0015e07:	c3                   	ret    

c0015e08 <sendKeyboardToken(KeyboardToken)>:
c0015e08:	55                   	push   ebp
c0015e09:	89 e5                	mov    ebp,esp
c0015e0b:	83 ec 18             	sub    esp,0x18
c0015e0e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e14:	0f b7 c0             	movzx  eax,ax
c0015e17:	83 f2 01             	xor    edx,0x1
c0015e1a:	88 90 40 e5 02 c0    	mov    BYTE PTR [eax-0x3ffd1ac0],dl
c0015e20:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0015e25:	85 c0                	test   eax,eax
c0015e27:	74 24                	je     c0015e4d <sendKeyboardToken(KeyboardToken)+0x45>
c0015e29:	8b 0d 28 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e528
c0015e2f:	83 ec 04             	sub    esp,0x4
c0015e32:	68 40 e5 02 c0       	push   0xc002e540
c0015e37:	83 ec 08             	sub    esp,0x8
c0015e3a:	89 e2                	mov    edx,esp
c0015e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e3f:	89 02                	mov    DWORD PTR [edx],eax
c0015e41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e44:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015e48:	ff d1                	call   ecx
c0015e4a:	83 c4 10             	add    esp,0x10
c0015e4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e50:	66 3d 03 02          	cmp    ax,0x203
c0015e54:	75 07                	jne    c0015e5d <sendKeyboardToken(KeyboardToken)+0x55>
c0015e56:	a0 40 e6 02 c0       	mov    al,ds:0xc002e640
c0015e5b:	84 c0                	test   al,al
c0015e5d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015e61:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015e64:	a0 48 e9 02 c0       	mov    al,ds:0xc002e948
c0015e69:	38 c2                	cmp    dl,al
c0015e6b:	74 1c                	je     c0015e89 <sendKeyboardToken(KeyboardToken)+0x81>
c0015e6d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015e70:	a2 48 e9 02 c0       	mov    ds:0xc002e948,al
c0015e75:	a0 48 e9 02 c0       	mov    al,ds:0xc002e948
c0015e7a:	0f b6 c0             	movzx  eax,al
c0015e7d:	83 ec 0c             	sub    esp,0xc
c0015e80:	50                   	push   eax
c0015e81:	e8 ec a6 ff ff       	call   c0010572 <setTerminalScrollLock(bool)>
c0015e86:	83 c4 10             	add    esp,0x10
c0015e89:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015e8c:	84 c0                	test   al,al
c0015e8e:	0f 84 ae 00 00 00    	je     c0015f42 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015e94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e97:	66 3d 10 03          	cmp    ax,0x310
c0015e9b:	75 06                	jne    c0015ea3 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015e9d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea6:	66 3d 11 03          	cmp    ax,0x311
c0015eaa:	75 06                	jne    c0015eb2 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015eac:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015eb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb5:	66 3d 12 03          	cmp    ax,0x312
c0015eb9:	75 06                	jne    c0015ec1 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015ebb:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015ec1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec4:	66 3d 13 03          	cmp    ax,0x313
c0015ec8:	75 06                	jne    c0015ed0 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015eca:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015ed0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed3:	66 3d 14 03          	cmp    ax,0x314
c0015ed7:	75 06                	jne    c0015edf <sendKeyboardToken(KeyboardToken)+0xd7>
c0015ed9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015edf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee2:	66 3d 15 03          	cmp    ax,0x315
c0015ee6:	75 06                	jne    c0015eee <sendKeyboardToken(KeyboardToken)+0xe6>
c0015ee8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015eee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef1:	66 3d 16 03          	cmp    ax,0x316
c0015ef5:	75 06                	jne    c0015efd <sendKeyboardToken(KeyboardToken)+0xf5>
c0015ef7:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015efd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f00:	66 3d 17 03          	cmp    ax,0x317
c0015f04:	75 06                	jne    c0015f0c <sendKeyboardToken(KeyboardToken)+0x104>
c0015f06:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0f:	66 3d 18 03          	cmp    ax,0x318
c0015f13:	75 06                	jne    c0015f1b <sendKeyboardToken(KeyboardToken)+0x113>
c0015f15:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f1e:	66 3d 19 03          	cmp    ax,0x319
c0015f22:	75 06                	jne    c0015f2a <sendKeyboardToken(KeyboardToken)+0x122>
c0015f24:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2d:	66 3d 1a 03          	cmp    ax,0x31a
c0015f31:	0f 85 c9 00 00 00    	jne    c0016000 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f37:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015f3d:	e9 be 00 00 00       	jmp    c0016000 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015f42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f45:	66 3d 10 03          	cmp    ax,0x310
c0015f49:	75 0a                	jne    c0015f55 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015f4b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015f51:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f58:	66 3d 11 03          	cmp    ax,0x311
c0015f5c:	75 0a                	jne    c0015f68 <sendKeyboardToken(KeyboardToken)+0x160>
c0015f5e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015f64:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6b:	66 3d 12 03          	cmp    ax,0x312
c0015f6f:	75 0a                	jne    c0015f7b <sendKeyboardToken(KeyboardToken)+0x173>
c0015f71:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015f77:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7e:	66 3d 13 03          	cmp    ax,0x313
c0015f82:	75 0a                	jne    c0015f8e <sendKeyboardToken(KeyboardToken)+0x186>
c0015f84:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015f8a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f91:	66 3d 14 03          	cmp    ax,0x314
c0015f95:	75 0a                	jne    c0015fa1 <sendKeyboardToken(KeyboardToken)+0x199>
c0015f97:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015f9d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa4:	66 3d 15 03          	cmp    ax,0x315
c0015fa8:	75 0a                	jne    c0015fb4 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015faa:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015fb0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb7:	66 3d 16 03          	cmp    ax,0x316
c0015fbb:	75 0a                	jne    c0015fc7 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015fbd:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015fc3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fca:	66 3d 17 03          	cmp    ax,0x317
c0015fce:	75 0a                	jne    c0015fda <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015fd0:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015fd6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fdd:	66 3d 18 03          	cmp    ax,0x318
c0015fe1:	75 0a                	jne    c0015fed <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015fe3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015fe9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff0:	66 3d 19 03          	cmp    ax,0x319
c0015ff4:	75 0a                	jne    c0016000 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ff6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015ffc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016003:	66 3d 00 02          	cmp    ax,0x200
c0016007:	75 2c                	jne    c0016035 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016009:	a0 40 e9 02 c0       	mov    al,ds:0xc002e940
c001600e:	83 f0 01             	xor    eax,0x1
c0016011:	84 c0                	test   al,al
c0016013:	74 20                	je     c0016035 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016015:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001601a:	6a 01                	push   0x1
c001601c:	6a 00                	push   0x0
c001601e:	68 e4 5c 01 c0       	push   0xc0015ce4
c0016023:	50                   	push   eax
c0016024:	e8 6d 7e 00 00       	call   c001de96 <Process::createThread(void (*)(void*), void*, int)>
c0016029:	83 c4 10             	add    esp,0x10
c001602c:	c6 05 40 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e940,0x1
c0016033:	eb 33                	jmp    c0016068 <sendKeyboardToken(KeyboardToken)+0x260>
c0016035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016038:	66 3d 01 02          	cmp    ax,0x201
c001603c:	75 2a                	jne    c0016068 <sendKeyboardToken(KeyboardToken)+0x260>
c001603e:	a0 40 e9 02 c0       	mov    al,ds:0xc002e940
c0016043:	83 f0 01             	xor    eax,0x1
c0016046:	84 c0                	test   al,al
c0016048:	74 1e                	je     c0016068 <sendKeyboardToken(KeyboardToken)+0x260>
c001604a:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001604f:	6a 01                	push   0x1
c0016051:	6a 00                	push   0x0
c0016053:	68 40 5d 01 c0       	push   0xc0015d40
c0016058:	50                   	push   eax
c0016059:	e8 38 7e 00 00       	call   c001de96 <Process::createThread(void (*)(void*), void*, int)>
c001605e:	83 c4 10             	add    esp,0x10
c0016061:	c6 05 40 e9 02 c0 01 	mov    BYTE PTR ds:0xc002e940,0x1
c0016068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606b:	66 3d 1d 03          	cmp    ax,0x31d
c001606f:	75 06                	jne    c0016077 <sendKeyboardToken(KeyboardToken)+0x26f>
c0016071:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607a:	66 3d 1c 03          	cmp    ax,0x31c
c001607e:	75 06                	jne    c0016086 <sendKeyboardToken(KeyboardToken)+0x27e>
c0016080:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016086:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016089:	66 3d 1b 03          	cmp    ax,0x31b
c001608d:	75 06                	jne    c0016095 <sendKeyboardToken(KeyboardToken)+0x28d>
c001608f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016098:	66 3d 1e 03          	cmp    ax,0x31e
c001609c:	75 06                	jne    c00160a4 <sendKeyboardToken(KeyboardToken)+0x29c>
c001609e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00160a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a7:	66 3d 1f 03          	cmp    ax,0x31f
c00160ab:	75 06                	jne    c00160b3 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00160ad:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00160b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b6:	66 3d 1a 03          	cmp    ax,0x31a
c00160ba:	75 06                	jne    c00160c2 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00160bc:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00160c2:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00160c6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160c9:	83 f0 01             	xor    eax,0x1
c00160cc:	84 c0                	test   al,al
c00160ce:	74 77                	je     c0016147 <sendKeyboardToken(KeyboardToken)+0x33f>
c00160d0:	a0 41 e6 02 c0       	mov    al,ds:0xc002e641
c00160d5:	84 c0                	test   al,al
c00160d7:	74 41                	je     c001611a <sendKeyboardToken(KeyboardToken)+0x312>
c00160d9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00160dd:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00160e1:	74 2b                	je     c001610e <sendKeyboardToken(KeyboardToken)+0x306>
c00160e3:	8b 15 44 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e944
c00160e9:	89 d0                	mov    eax,edx
c00160eb:	c1 e0 02             	shl    eax,0x2
c00160ee:	01 d0                	add    eax,edx
c00160f0:	01 c0                	add    eax,eax
c00160f2:	a3 44 e9 02 c0       	mov    ds:0xc002e944,eax
c00160f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160fa:	0f b7 c0             	movzx  eax,ax
c00160fd:	8d 50 d0             	lea    edx,[eax-0x30]
c0016100:	a1 44 e9 02 c0       	mov    eax,ds:0xc002e944
c0016105:	01 d0                	add    eax,edx
c0016107:	a3 44 e9 02 c0       	mov    ds:0xc002e944,eax
c001610c:	eb 6d                	jmp    c001617b <sendKeyboardToken(KeyboardToken)+0x373>
c001610e:	c7 05 44 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e944,0x0
c0016118:	eb 61                	jmp    c001617b <sendKeyboardToken(KeyboardToken)+0x373>
c001611a:	a1 44 e9 02 c0       	mov    eax,ds:0xc002e944
c001611f:	85 c0                	test   eax,eax
c0016121:	74 18                	je     c001613b <sendKeyboardToken(KeyboardToken)+0x333>
c0016123:	a1 44 e9 02 c0       	mov    eax,ds:0xc002e944
c0016128:	0f b6 c0             	movzx  eax,al
c001612b:	83 ec 0c             	sub    esp,0xc
c001612e:	50                   	push   eax
c001612f:	e8 68 fc ff ff       	call   c0015d9c <sendKeyToTerminal(unsigned char)>
c0016134:	83 c4 10             	add    esp,0x10
c0016137:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001613b:	c7 05 44 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e944,0x0
c0016145:	eb 34                	jmp    c001617b <sendKeyboardToken(KeyboardToken)+0x373>
c0016147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614a:	66 3d 01 01          	cmp    ax,0x101
c001614e:	75 2b                	jne    c001617b <sendKeyboardToken(KeyboardToken)+0x373>
c0016150:	a1 44 e9 02 c0       	mov    eax,ds:0xc002e944
c0016155:	85 c0                	test   eax,eax
c0016157:	74 18                	je     c0016171 <sendKeyboardToken(KeyboardToken)+0x369>
c0016159:	a1 44 e9 02 c0       	mov    eax,ds:0xc002e944
c001615e:	0f b6 c0             	movzx  eax,al
c0016161:	83 ec 0c             	sub    esp,0xc
c0016164:	50                   	push   eax
c0016165:	e8 32 fc ff ff       	call   c0015d9c <sendKeyToTerminal(unsigned char)>
c001616a:	83 c4 10             	add    esp,0x10
c001616d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016171:	c7 05 44 e9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e944,0x0
c001617b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001617e:	83 f0 01             	xor    eax,0x1
c0016181:	84 c0                	test   al,al
c0016183:	74 4c                	je     c00161d1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016185:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016188:	83 f0 01             	xor    eax,0x1
c001618b:	84 c0                	test   al,al
c001618d:	74 42                	je     c00161d1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001618f:	a0 40 e6 02 c0       	mov    al,ds:0xc002e640
c0016194:	83 f0 01             	xor    eax,0x1
c0016197:	84 c0                	test   al,al
c0016199:	74 36                	je     c00161d1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001619b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001619e:	66 83 f8 1f          	cmp    ax,0x1f
c00161a2:	76 09                	jbe    c00161ad <sendKeyboardToken(KeyboardToken)+0x3a5>
c00161a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a7:	66 83 f8 7e          	cmp    ax,0x7e
c00161ab:	76 12                	jbe    c00161bf <sendKeyboardToken(KeyboardToken)+0x3b7>
c00161ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b0:	66 83 f8 0a          	cmp    ax,0xa
c00161b4:	74 09                	je     c00161bf <sendKeyboardToken(KeyboardToken)+0x3b7>
c00161b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b9:	66 83 f8 08          	cmp    ax,0x8
c00161bd:	75 12                	jne    c00161d1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c2:	0f b6 c0             	movzx  eax,al
c00161c5:	83 ec 0c             	sub    esp,0xc
c00161c8:	50                   	push   eax
c00161c9:	e8 ce fb ff ff       	call   c0015d9c <sendKeyToTerminal(unsigned char)>
c00161ce:	83 c4 10             	add    esp,0x10
c00161d1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161d4:	83 f0 01             	xor    eax,0x1
c00161d7:	84 c0                	test   al,al
c00161d9:	74 4f                	je     c001622a <sendKeyboardToken(KeyboardToken)+0x422>
c00161db:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161de:	83 f0 01             	xor    eax,0x1
c00161e1:	84 c0                	test   al,al
c00161e3:	74 45                	je     c001622a <sendKeyboardToken(KeyboardToken)+0x422>
c00161e5:	a0 40 e6 02 c0       	mov    al,ds:0xc002e640
c00161ea:	84 c0                	test   al,al
c00161ec:	74 3c                	je     c001622a <sendKeyboardToken(KeyboardToken)+0x422>
c00161ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f1:	66 83 f8 3f          	cmp    ax,0x3f
c00161f5:	76 33                	jbe    c001622a <sendKeyboardToken(KeyboardToken)+0x422>
c00161f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161fa:	66 83 f8 7f          	cmp    ax,0x7f
c00161fe:	77 2a                	ja     c001622a <sendKeyboardToken(KeyboardToken)+0x422>
c0016200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016203:	88 c2                	mov    dl,al
c0016205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016208:	66 83 f8 5f          	cmp    ax,0x5f
c001620c:	76 04                	jbe    c0016212 <sendKeyboardToken(KeyboardToken)+0x40a>
c001620e:	b0 20                	mov    al,0x20
c0016210:	eb 02                	jmp    c0016214 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016212:	b0 00                	mov    al,0x0
c0016214:	29 c2                	sub    edx,eax
c0016216:	88 d0                	mov    al,dl
c0016218:	83 e8 40             	sub    eax,0x40
c001621b:	0f b6 c0             	movzx  eax,al
c001621e:	83 ec 0c             	sub    esp,0xc
c0016221:	50                   	push   eax
c0016222:	e8 75 fb ff ff       	call   c0015d9c <sendKeyToTerminal(unsigned char)>
c0016227:	83 c4 10             	add    esp,0x10
c001622a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001622d:	66 3d 00 03          	cmp    ax,0x300
c0016231:	75 0f                	jne    c0016242 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016233:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016236:	83 f0 01             	xor    eax,0x1
c0016239:	84 c0                	test   al,al
c001623b:	74 05                	je     c0016242 <sendKeyboardToken(KeyboardToken)+0x43a>
c001623d:	e8 65 ab ff ff       	call   c0010da7 <doTerminalCycle()>
c0016242:	90                   	nop
c0016243:	c9                   	leave  
c0016244:	c3                   	ret    

c0016245 <clearInternalKeybuffer(VgaText*)>:
c0016245:	55                   	push   ebp
c0016246:	89 e5                	mov    ebp,esp
c0016248:	83 ec 08             	sub    esp,0x8
c001624b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001624e:	05 34 11 00 00       	add    eax,0x1134
c0016253:	83 ec 0c             	sub    esp,0xc
c0016256:	50                   	push   eax
c0016257:	e8 38 a5 fe ff       	call   c0000794 <strlen>
c001625c:	83 c4 10             	add    esp,0x10
c001625f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016262:	81 c2 34 11 00 00    	add    edx,0x1134
c0016268:	83 ec 04             	sub    esp,0x4
c001626b:	50                   	push   eax
c001626c:	6a 00                	push   0x0
c001626e:	52                   	push   edx
c001626f:	e8 04 a5 fe ff       	call   c0000778 <memset>
c0016274:	83 c4 10             	add    esp,0x10
c0016277:	90                   	nop
c0016278:	c9                   	leave  
c0016279:	c3                   	ret    

c001627a <readKeyboard(VgaText*, char*, unsigned long)>:
c001627a:	55                   	push   ebp
c001627b:	89 e5                	mov    ebp,esp
c001627d:	83 ec 18             	sub    esp,0x18
c0016280:	fb                   	sti    
c0016281:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016288:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001628c:	0f 84 8a 00 00 00    	je     c001631c <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016292:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016295:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001629b:	84 c0                	test   al,al
c001629d:	75 11                	jne    c00162b0 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001629f:	e8 c0 7a 00 00       	call   c001dd64 <lockScheduler()>
c00162a4:	e8 f7 7d 00 00       	call   c001e0a0 <schedule()>
c00162a9:	e8 b8 7a 00 00       	call   c001dd66 <unlockScheduler()>
c00162ae:	eb e2                	jmp    c0016292 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00162b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00162b3:	8d 50 01             	lea    edx,[eax+0x1]
c00162b6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00162b9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162bc:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00162c2:	88 10                	mov    BYTE PTR [eax],dl
c00162c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c7:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00162cd:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00162d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d3:	05 34 11 00 00       	add    eax,0x1134
c00162d8:	83 ec 0c             	sub    esp,0xc
c00162db:	50                   	push   eax
c00162dc:	e8 b3 a4 fe ff       	call   c0000794 <strlen>
c00162e1:	83 c4 10             	add    esp,0x10
c00162e4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162e7:	81 c2 34 11 00 00    	add    edx,0x1134
c00162ed:	8d 4a 01             	lea    ecx,[edx+0x1]
c00162f0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162f3:	81 c2 34 11 00 00    	add    edx,0x1134
c00162f9:	83 ec 04             	sub    esp,0x4
c00162fc:	50                   	push   eax
c00162fd:	51                   	push   ecx
c00162fe:	52                   	push   edx
c00162ff:	e8 78 a3 fe ff       	call   c000067c <memmove>
c0016304:	83 c4 10             	add    esp,0x10
c0016307:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001630a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001630d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016311:	0f 85 71 ff ff ff    	jne    c0016288 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016317:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001631a:	eb 03                	jmp    c001631f <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001631c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001631f:	c9                   	leave  
c0016320:	c3                   	ret    
c0016321:	90                   	nop

c0016322 <Keyboard::Keyboard(char const*)>:
c0016322:	83 ec 0c             	sub    esp,0xc
c0016325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016329:	83 ec 08             	sub    esp,0x8
c001632c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016330:	50                   	push   eax
c0016331:	e8 7e e1 ff ff       	call   c00144b4 <Device::Device(char const*)>
c0016336:	83 c4 10             	add    esp,0x10
c0016339:	ba e0 b0 02 c0       	mov    edx,0xc002b0e0
c001633e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016342:	89 10                	mov    DWORD PTR [eax],edx
c0016344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016348:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016352:	c6 05 24 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e524,0x1
c0016359:	90                   	nop
c001635a:	83 c4 0c             	add    esp,0xc
c001635d:	c3                   	ret    

c001635e <Keyboard::~Keyboard()>:
c001635e:	83 ec 0c             	sub    esp,0xc
c0016361:	ba e0 b0 02 c0       	mov    edx,0xc002b0e0
c0016366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001636a:	89 10                	mov    DWORD PTR [eax],edx
c001636c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016370:	83 ec 0c             	sub    esp,0xc
c0016373:	50                   	push   eax
c0016374:	e8 1d de ff ff       	call   c0014196 <Device::~Device()>
c0016379:	83 c4 10             	add    esp,0x10
c001637c:	90                   	nop
c001637d:	83 c4 0c             	add    esp,0xc
c0016380:	c3                   	ret    
c0016381:	90                   	nop

c0016382 <Keyboard::~Keyboard()>:
c0016382:	83 ec 0c             	sub    esp,0xc
c0016385:	83 ec 0c             	sub    esp,0xc
c0016388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001638c:	e8 cd ff ff ff       	call   c001635e <Keyboard::~Keyboard()>
c0016391:	83 c4 10             	add    esp,0x10
c0016394:	83 ec 08             	sub    esp,0x8
c0016397:	68 5c 01 00 00       	push   0x15c
c001639c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163a0:	e8 18 ca ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c00163a5:	83 c4 10             	add    esp,0x10
c00163a8:	83 c4 0c             	add    esp,0xc
c00163ab:	c3                   	ret    

c00163ac <LogicalDisk::close(int, int, void*)>:
c00163ac:	83 c8 ff             	or     eax,0xffffffff
c00163af:	c3                   	ret    

c00163b0 <LogicalDisk::~LogicalDisk()>:
c00163b0:	83 ec 0c             	sub    esp,0xc
c00163b3:	ba 90 b1 02 c0       	mov    edx,0xc002b190
c00163b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163bc:	89 10                	mov    DWORD PTR [eax],edx
c00163be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163c2:	83 ec 0c             	sub    esp,0xc
c00163c5:	50                   	push   eax
c00163c6:	e8 cb dd ff ff       	call   c0014196 <Device::~Device()>
c00163cb:	83 c4 10             	add    esp,0x10
c00163ce:	90                   	nop
c00163cf:	83 c4 0c             	add    esp,0xc
c00163d2:	c3                   	ret    
c00163d3:	90                   	nop

c00163d4 <LogicalDisk::~LogicalDisk()>:
c00163d4:	83 ec 0c             	sub    esp,0xc
c00163d7:	83 ec 0c             	sub    esp,0xc
c00163da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163de:	e8 cd ff ff ff       	call   c00163b0 <LogicalDisk::~LogicalDisk()>
c00163e3:	83 c4 10             	add    esp,0x10
c00163e6:	83 ec 08             	sub    esp,0x8
c00163e9:	68 74 01 00 00       	push   0x174
c00163ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163f2:	e8 c6 c9 ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c00163f7:	83 c4 10             	add    esp,0x10
c00163fa:	83 c4 0c             	add    esp,0xc
c00163fd:	c3                   	ret    

c00163fe <LogicalDisk::open(int, int, void*)>:
c00163fe:	83 ec 18             	sub    esp,0x18
c0016401:	68 0c b1 02 c0       	push   0xc002b10c
c0016406:	e8 7e 41 00 00       	call   c001a589 <Krnl::panic(char const*)>
c001640b:	83 c8 ff             	or     eax,0xffffffff
c001640e:	83 c4 1c             	add    esp,0x1c
c0016411:	c3                   	ret    

c0016412 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016412:	53                   	push   ebx
c0016413:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016417:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001641b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001641f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016425:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001642b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016431:	77 10                	ja     c0016443 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016433:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016439:	89 d3                	mov    ebx,edx
c001643b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016441:	72 05                	jb     c0016448 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016443:	83 c8 ff             	or     eax,0xffffffff
c0016446:	89 c2                	mov    edx,eax
c0016448:	5b                   	pop    ebx
c0016449:	c3                   	ret    

c001644a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001644a:	56                   	push   esi
c001644b:	83 c8 ff             	or     eax,0xffffffff
c001644e:	53                   	push   ebx
c001644f:	89 c2                	mov    edx,eax
c0016451:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016455:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016459:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001645d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016463:	77 27                	ja     c001648c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016465:	89 d8                	mov    eax,ebx
c0016467:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001646d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016473:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016478:	89 c2                	mov    edx,eax
c001647a:	73 10                	jae    c001648c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001647c:	89 c8                	mov    eax,ecx
c001647e:	89 da                	mov    edx,ebx
c0016480:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016486:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001648c:	5b                   	pop    ebx
c001648d:	5e                   	pop    esi
c001648e:	c3                   	ret    
c001648f:	90                   	nop

c0016490 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016490:	83 ec 1c             	sub    esp,0x1c
c0016493:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016497:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001649b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001649f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00164a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00164aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00164ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00164b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164b6:	83 ec 08             	sub    esp,0x8
c00164b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164bd:	50                   	push   eax
c00164be:	e8 f1 df ff ff       	call   c00144b4 <Device::Device(char const*)>
c00164c3:	83 c4 10             	add    esp,0x10
c00164c6:	ba 90 b1 02 c0       	mov    edx,0xc002b190
c00164cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164cf:	89 10                	mov    DWORD PTR [eax],edx
c00164d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164d5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00164dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164e0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00164e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164eb:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00164f5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00164f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00164fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016501:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016507:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001650d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016511:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016518:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001651e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016528:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001652c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016536:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016540:	90                   	nop
c0016541:	83 c4 1c             	add    esp,0x1c
c0016544:	c3                   	ret    
c0016545:	90                   	nop

c0016546 <LogicalDisk::assignDriveLetter()>:
c0016546:	55                   	push   ebp
c0016547:	57                   	push   edi
c0016548:	56                   	push   esi
c0016549:	53                   	push   ebx
c001654a:	83 ec 14             	sub    esp,0x14
c001654d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016551:	8b 3d 60 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e960
c0016557:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001655d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016561:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016567:	8b 3d 64 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e964
c001656d:	3c 01                	cmp    al,0x1
c001656f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016573:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016577:	19 c0                	sbb    eax,eax
c0016579:	83 e0 02             	and    eax,0x2
c001657c:	83 c0 41             	add    eax,0x41
c001657f:	0f be e8             	movsx  ebp,al
c0016582:	3c 43                	cmp    al,0x43
c0016584:	75 10                	jne    c0016596 <LogicalDisk::assignDriveLetter()+0x50>
c0016586:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001658d:	75 5d                	jne    c00165ec <LogicalDisk::assignDriveLetter()+0xa6>
c001658f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016594:	75 56                	jne    c00165ec <LogicalDisk::assignDriveLetter()+0xa6>
c0016596:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016599:	ba 01 00 00 00       	mov    edx,0x1
c001659e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00165a2:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00165a6:	d3 e2                	shl    edx,cl
c00165a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165ac:	89 d7                	mov    edi,edx
c00165ae:	89 d6                	mov    esi,edx
c00165b0:	c1 ff 1f             	sar    edi,0x1f
c00165b3:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00165b7:	21 f9                	and    ecx,edi
c00165b9:	09 d1                	or     ecx,edx
c00165bb:	75 2f                	jne    c00165ec <LogicalDisk::assignDriveLetter()+0xa6>
c00165bd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00165c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00165c5:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00165cb:	09 f2                	or     edx,esi
c00165cd:	89 15 60 e9 02 c0    	mov    DWORD PTR ds:0xc002e960,edx
c00165d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165d7:	09 fa                	or     edx,edi
c00165d9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00165dd:	89 15 64 e9 02 c0    	mov    DWORD PTR ds:0xc002e964,edx
c00165e3:	89 1c bd 80 e9 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1680],ebx
c00165ea:	eb 08                	jmp    c00165f4 <LogicalDisk::assignDriveLetter()+0xae>
c00165ec:	45                   	inc    ebp
c00165ed:	40                   	inc    eax
c00165ee:	3c 5b                	cmp    al,0x5b
c00165f0:	75 90                	jne    c0016582 <LogicalDisk::assignDriveLetter()+0x3c>
c00165f2:	31 c0                	xor    eax,eax
c00165f4:	83 c4 14             	add    esp,0x14
c00165f7:	5b                   	pop    ebx
c00165f8:	5e                   	pop    esi
c00165f9:	5f                   	pop    edi
c00165fa:	5d                   	pop    ebp
c00165fb:	c3                   	ret    

c00165fc <LogicalDisk::mount()>:
c00165fc:	56                   	push   esi
c00165fd:	53                   	push   ebx
c00165fe:	51                   	push   ecx
c00165ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016603:	8b 1d f0 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4f0
c0016609:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016613:	85 db                	test   ebx,ebx
c0016615:	74 50                	je     c0016667 <LogicalDisk::mount()+0x6b>
c0016617:	e8 33 77 00 00       	call   c001dd4f <getIRQNestingLevel()>
c001661c:	52                   	push   edx
c001661d:	52                   	push   edx
c001661e:	50                   	push   eax
c001661f:	68 30 b1 02 c0       	push   0xc002b130
c0016624:	e8 74 c8 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0016629:	83 c4 0c             	add    esp,0xc
c001662c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016633:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016635:	83 e8 41             	sub    eax,0x41
c0016638:	50                   	push   eax
c0016639:	56                   	push   esi
c001663a:	53                   	push   ebx
c001663b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001663e:	83 c4 10             	add    esp,0x10
c0016641:	84 c0                	test   al,al
c0016643:	74 08                	je     c001664d <LogicalDisk::mount()+0x51>
c0016645:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001664b:	eb 1c                	jmp    c0016669 <LogicalDisk::mount()+0x6d>
c001664d:	e8 fd 76 00 00       	call   c001dd4f <getIRQNestingLevel()>
c0016652:	51                   	push   ecx
c0016653:	51                   	push   ecx
c0016654:	50                   	push   eax
c0016655:	68 4b b1 02 c0       	push   0xc002b14b
c001665a:	e8 3e c8 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001665f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016662:	83 c4 10             	add    esp,0x10
c0016665:	eb ac                	jmp    c0016613 <LogicalDisk::mount()+0x17>
c0016667:	31 c0                	xor    eax,eax
c0016669:	5a                   	pop    edx
c001666a:	5b                   	pop    ebx
c001666b:	5e                   	pop    esi
c001666c:	c3                   	ret    
c001666d:	90                   	nop

c001666e <LogicalDisk::unmount()>:
c001666e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016672:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001667c:	c3                   	ret    
c001667d:	90                   	nop

c001667e <LogicalDisk::eject()>:
c001667e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016682:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016688:	8b 10                	mov    edx,DWORD PTR [eax]
c001668a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001668e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016691:	90                   	nop

c0016692 <LogicalDisk::unassignDriveLetter()>:
c0016692:	57                   	push   edi
c0016693:	56                   	push   esi
c0016694:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016698:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001669f:	84 c9                	test   cl,cl
c00166a1:	75 0f                	jne    c00166b2 <LogicalDisk::unassignDriveLetter()+0x20>
c00166a3:	c7 44 24 0c 66 b1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b166
c00166ab:	5e                   	pop    esi
c00166ac:	5f                   	pop    edi
c00166ad:	e9 d7 3e 00 00       	jmp    c001a589 <Krnl::panic(char const*)>
c00166b2:	83 e9 41             	sub    ecx,0x41
c00166b5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00166bc:	b8 01 00 00 00       	mov    eax,0x1
c00166c1:	c7 04 8d 80 e9 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1680],0x0
c00166cc:	d3 e0                	shl    eax,cl
c00166ce:	89 c7                	mov    edi,eax
c00166d0:	f7 d0                	not    eax
c00166d2:	c1 ff 1f             	sar    edi,0x1f
c00166d5:	21 05 60 e9 02 c0    	and    DWORD PTR ds:0xc002e960,eax
c00166db:	89 fe                	mov    esi,edi
c00166dd:	f7 d6                	not    esi
c00166df:	21 35 64 e9 02 c0    	and    DWORD PTR ds:0xc002e964,esi
c00166e5:	5e                   	pop    esi
c00166e6:	5f                   	pop    edi
c00166e7:	c3                   	ret    

c00166e8 <LogicalDisk::read(unsigned long long, int, void*)>:
c00166e8:	57                   	push   edi
c00166e9:	56                   	push   esi
c00166ea:	53                   	push   ebx
c00166eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00166ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00166f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166fb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016701:	77 41                	ja     c0016744 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016703:	99                   	cdq    
c0016704:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001670a:	01 c8                	add    eax,ecx
c001670c:	11 da                	adc    edx,ebx
c001670e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016714:	19 d7                	sbb    edi,edx
c0016716:	72 33                	jb     c001674b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016718:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001671e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016724:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016728:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001672c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016732:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016738:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001673c:	5b                   	pop    ebx
c001673d:	5e                   	pop    esi
c001673e:	5f                   	pop    edi
c001673f:	e9 b0 0a 00 00       	jmp    c00171f4 <VCache::read(unsigned long long, int, void*)>
c0016744:	b8 05 00 00 00       	mov    eax,0x5
c0016749:	eb 05                	jmp    c0016750 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001674b:	b8 07 00 00 00       	mov    eax,0x7
c0016750:	5b                   	pop    ebx
c0016751:	5e                   	pop    esi
c0016752:	5f                   	pop    edi
c0016753:	c3                   	ret    

c0016754 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016754:	57                   	push   edi
c0016755:	56                   	push   esi
c0016756:	53                   	push   ebx
c0016757:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001675b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001675f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016767:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001676d:	77 41                	ja     c00167b0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001676f:	99                   	cdq    
c0016770:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016776:	01 c8                	add    eax,ecx
c0016778:	11 da                	adc    edx,ebx
c001677a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016780:	19 d7                	sbb    edi,edx
c0016782:	72 33                	jb     c00167b7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016784:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001678a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016790:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016794:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016798:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001679e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167a8:	5b                   	pop    ebx
c00167a9:	5e                   	pop    esi
c00167aa:	5f                   	pop    edi
c00167ab:	e9 4e 09 00 00       	jmp    c00170fe <VCache::write(unsigned long long, int, void*)>
c00167b0:	b8 05 00 00 00       	mov    eax,0x5
c00167b5:	eb 05                	jmp    c00167bc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00167b7:	b8 07 00 00 00       	mov    eax,0x7
c00167bc:	5b                   	pop    ebx
c00167bd:	5e                   	pop    esi
c00167be:	5f                   	pop    edi
c00167bf:	c3                   	ret    

c00167c0 <Mouse::Mouse(char const*)>:
c00167c0:	83 ec 0c             	sub    esp,0xc
c00167c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c7:	83 ec 08             	sub    esp,0x8
c00167ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167ce:	50                   	push   eax
c00167cf:	e8 e0 dc ff ff       	call   c00144b4 <Device::Device(char const*)>
c00167d4:	83 c4 10             	add    esp,0x10
c00167d7:	ba bc b1 02 c0       	mov    edx,0xc002b1bc
c00167dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167e0:	89 10                	mov    DWORD PTR [eax],edx
c00167e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167e6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00167f0:	90                   	nop
c00167f1:	83 c4 0c             	add    esp,0xc
c00167f4:	c3                   	ret    
c00167f5:	90                   	nop

c00167f6 <Mouse::~Mouse()>:
c00167f6:	83 ec 0c             	sub    esp,0xc
c00167f9:	ba bc b1 02 c0       	mov    edx,0xc002b1bc
c00167fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016802:	89 10                	mov    DWORD PTR [eax],edx
c0016804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016808:	83 ec 0c             	sub    esp,0xc
c001680b:	50                   	push   eax
c001680c:	e8 85 d9 ff ff       	call   c0014196 <Device::~Device()>
c0016811:	83 c4 10             	add    esp,0x10
c0016814:	90                   	nop
c0016815:	83 c4 0c             	add    esp,0xc
c0016818:	c3                   	ret    
c0016819:	90                   	nop

c001681a <Mouse::~Mouse()>:
c001681a:	83 ec 0c             	sub    esp,0xc
c001681d:	83 ec 0c             	sub    esp,0xc
c0016820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016824:	e8 cd ff ff ff       	call   c00167f6 <Mouse::~Mouse()>
c0016829:	83 c4 10             	add    esp,0x10
c001682c:	83 ec 08             	sub    esp,0x8
c001682f:	68 58 01 00 00       	push   0x158
c0016834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016838:	e8 80 c5 ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c001683d:	83 c4 10             	add    esp,0x10
c0016840:	83 c4 0c             	add    esp,0xc
c0016843:	c3                   	ret    

c0016844 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016844:	55                   	push   ebp
c0016845:	57                   	push   edi
c0016846:	56                   	push   esi
c0016847:	53                   	push   ebx
c0016848:	81 ec 28 01 00 00    	sub    esp,0x128
c001684e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016855:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001685c:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016863:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001686a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001686e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016872:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016879:	e8 32 dd ff ff       	call   c00145b0 <Device::getName()>
c001687e:	5a                   	pop    edx
c001687f:	59                   	pop    ecx
c0016880:	50                   	push   eax
c0016881:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016885:	55                   	push   ebp
c0016886:	e8 a9 9f fe ff       	call   c0000834 <strcpy>
c001688b:	5b                   	pop    ebx
c001688c:	58                   	pop    eax
c001688d:	68 e0 b1 02 c0       	push   0xc002b1e0
c0016892:	55                   	push   ebp
c0016893:	e8 dc a0 fe ff       	call   c0000974 <strcat>
c0016898:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001689f:	e8 9f 8f ff ff       	call   c000f843 <malloc>
c00168a4:	83 c4 0c             	add    esp,0xc
c00168a7:	89 c3                	mov    ebx,eax
c00168a9:	57                   	push   edi
c00168aa:	56                   	push   esi
c00168ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168b3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00168ba:	55                   	push   ebp
c00168bb:	50                   	push   eax
c00168bc:	e8 cf fb ff ff       	call   c0016490 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00168c1:	83 c4 14             	add    esp,0x14
c00168c4:	53                   	push   ebx
c00168c5:	e8 7c fc ff ff       	call   c0016546 <LogicalDisk::assignDriveLetter()>
c00168ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168cd:	89 c6                	mov    esi,eax
c00168cf:	e8 28 fd ff ff       	call   c00165fc <LogicalDisk::mount()>
c00168d4:	58                   	pop    eax
c00168d5:	5a                   	pop    edx
c00168d6:	53                   	push   ebx
c00168d7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00168de:	e8 e1 d9 ff ff       	call   c00142c4 <Device::addChild(Device*)>
c00168e3:	59                   	pop    ecx
c00168e4:	89 f0                	mov    eax,esi
c00168e6:	5b                   	pop    ebx
c00168e7:	0f be f0             	movsx  esi,al
c00168ea:	56                   	push   esi
c00168eb:	68 eb b1 02 c0       	push   0xc002b1eb
c00168f0:	e8 a8 c5 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00168f5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00168fb:	5b                   	pop    ebx
c00168fc:	5e                   	pop    esi
c00168fd:	5f                   	pop    edi
c00168fe:	5d                   	pop    ebp
c00168ff:	c3                   	ret    

c0016900 <createPartitionsForDisk(PhysicalDisk*)>:
c0016900:	55                   	push   ebp
c0016901:	57                   	push   edi
c0016902:	56                   	push   esi
c0016903:	53                   	push   ebx
c0016904:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001690a:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016911:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016917:	3d 00 02 00 00       	cmp    eax,0x200
c001691c:	74 27                	je     c0016945 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001691e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016924:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001692a:	83 ec 10             	sub    esp,0x10
c001692d:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016931:	99                   	cdq    
c0016932:	c1 e6 0a             	shl    esi,0xa
c0016935:	52                   	push   edx
c0016936:	89 fd                	mov    ebp,edi
c0016938:	50                   	push   eax
c0016939:	55                   	push   ebp
c001693a:	56                   	push   esi
c001693b:	e8 fc ff 00 00       	call   c002693c <__udivdi3>
c0016940:	e9 b1 00 00 00       	jmp    c00169f6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016945:	83 ec 0c             	sub    esp,0xc
c0016948:	8b 03                	mov    eax,DWORD PTR [ebx]
c001694a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001694e:	56                   	push   esi
c001694f:	6a 01                	push   0x1
c0016951:	6a 00                	push   0x0
c0016953:	6a 00                	push   0x0
c0016955:	53                   	push   ebx
c0016956:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016959:	83 c4 20             	add    esp,0x20
c001695c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016964:	75 0a                	jne    c0016970 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016966:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001696e:	74 2c                	je     c001699c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016970:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016976:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001697c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016982:	83 ec 10             	sub    esp,0x10
c0016985:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016989:	89 f7                	mov    edi,esi
c001698b:	c1 e0 0a             	shl    eax,0xa
c001698e:	c1 ff 1f             	sar    edi,0x1f
c0016991:	57                   	push   edi
c0016992:	56                   	push   esi
c0016993:	52                   	push   edx
c0016994:	50                   	push   eax
c0016995:	e8 a2 ff 00 00       	call   c002693c <__udivdi3>
c001699a:	eb 5a                	jmp    c00169f6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001699c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00169a3:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00169aa:	83 e1 7f             	and    ecx,0x7f
c00169ad:	83 e0 7f             	and    eax,0x7f
c00169b0:	01 c1                	add    ecx,eax
c00169b2:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00169b9:	83 e0 7f             	and    eax,0x7f
c00169bc:	01 c1                	add    ecx,eax
c00169be:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00169c5:	83 e0 7f             	and    eax,0x7f
c00169c8:	00 c1                	add    cl,al
c00169ca:	74 41                	je     c0016a0d <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00169cc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169d2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169d8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169de:	83 ec 10             	sub    esp,0x10
c00169e1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169e5:	89 f7                	mov    edi,esi
c00169e7:	c1 e0 0a             	shl    eax,0xa
c00169ea:	c1 ff 1f             	sar    edi,0x1f
c00169ed:	57                   	push   edi
c00169ee:	56                   	push   esi
c00169ef:	52                   	push   edx
c00169f0:	50                   	push   eax
c00169f1:	e8 46 ff 00 00       	call   c002693c <__udivdi3>
c00169f6:	83 c4 14             	add    esp,0x14
c00169f9:	52                   	push   edx
c00169fa:	50                   	push   eax
c00169fb:	6a 00                	push   0x0
c00169fd:	6a 00                	push   0x0
c00169ff:	53                   	push   ebx
c0016a00:	e8 3f fe ff ff       	call   c0016844 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a05:	83 c4 20             	add    esp,0x20
c0016a08:	e9 79 01 00 00       	jmp    c0016b86 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016a0d:	89 f0                	mov    eax,esi
c0016a0f:	31 f6                	xor    esi,esi
c0016a11:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016a18:	75 02                	jne    c0016a1c <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016a1a:	89 f1                	mov    ecx,esi
c0016a1c:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016a23:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016a2a:	c1 e2 08             	shl    edx,0x8
c0016a2d:	c1 e7 10             	shl    edi,0x10
c0016a30:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016a38:	09 fa                	or     edx,edi
c0016a3a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016a42:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016a49:	83 c0 10             	add    eax,0x10
c0016a4c:	09 fa                	or     edx,edi
c0016a4e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016a55:	c1 e7 18             	shl    edi,0x18
c0016a58:	09 fa                	or     edx,edi
c0016a5a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016a61:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016a65:	c1 e7 10             	shl    edi,0x10
c0016a68:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016a6f:	c1 e2 08             	shl    edx,0x8
c0016a72:	09 fa                	or     edx,edi
c0016a74:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016a7b:	09 fa                	or     edx,edi
c0016a7d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016a84:	c1 e7 18             	shl    edi,0x18
c0016a87:	09 fa                	or     edx,edi
c0016a89:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016a8d:	46                   	inc    esi
c0016a8e:	83 fe 04             	cmp    esi,0x4
c0016a91:	0f 85 7a ff ff ff    	jne    c0016a11 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a9b:	83 f0 01             	xor    eax,0x1
c0016a9e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016aa2:	75 57                	jne    c0016afb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016aa4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016aa8:	83 f0 01             	xor    eax,0x1
c0016aab:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016aaf:	75 4a                	jne    c0016afb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016ab1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016ab5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016abd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016ac5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016acb:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ad1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ad7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016adb:	89 f7                	mov    edi,esi
c0016add:	c1 e0 0a             	shl    eax,0xa
c0016ae0:	c1 ff 1f             	sar    edi,0x1f
c0016ae3:	57                   	push   edi
c0016ae4:	56                   	push   esi
c0016ae5:	52                   	push   edx
c0016ae6:	50                   	push   eax
c0016ae7:	e8 50 fe 00 00       	call   c002693c <__udivdi3>
c0016aec:	83 c4 10             	add    esp,0x10
c0016aef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016af3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016af7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016afb:	84 c9                	test   cl,cl
c0016afd:	74 53                	je     c0016b52 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016aff:	0f b6 c9             	movzx  ecx,cl
c0016b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b0a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b0e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b1a:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016b1e:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016b22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b26:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016b2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b32:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016b36:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016b3a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016b3e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016b42:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b46:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b4a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016b4e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016b52:	31 ed                	xor    ebp,ebp
c0016b54:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016b58:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016b5c:	89 f8                	mov    eax,edi
c0016b5e:	09 f0                	or     eax,esi
c0016b60:	74 1e                	je     c0016b80 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016b62:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016b66:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016b6a:	89 d1                	mov    ecx,edx
c0016b6c:	09 c1                	or     ecx,eax
c0016b6e:	74 10                	je     c0016b80 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016b70:	83 ec 0c             	sub    esp,0xc
c0016b73:	57                   	push   edi
c0016b74:	56                   	push   esi
c0016b75:	52                   	push   edx
c0016b76:	50                   	push   eax
c0016b77:	53                   	push   ebx
c0016b78:	e8 c7 fc ff ff       	call   c0016844 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b7d:	83 c4 20             	add    esp,0x20
c0016b80:	45                   	inc    ebp
c0016b81:	83 fd 04             	cmp    ebp,0x4
c0016b84:	75 ce                	jne    c0016b54 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016b86:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016b8c:	5b                   	pop    ebx
c0016b8d:	5e                   	pop    esi
c0016b8e:	5f                   	pop    edi
c0016b8f:	5d                   	pop    ebp
c0016b90:	c3                   	ret    
c0016b91:	90                   	nop

c0016b92 <Serial::Serial(char const*)>:
c0016b92:	83 ec 0c             	sub    esp,0xc
c0016b95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b99:	83 ec 08             	sub    esp,0x8
c0016b9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ba0:	50                   	push   eax
c0016ba1:	e8 0e d9 ff ff       	call   c00144b4 <Device::Device(char const*)>
c0016ba6:	83 c4 10             	add    esp,0x10
c0016ba9:	ba 18 b2 02 c0       	mov    edx,0xc002b218
c0016bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bb2:	89 10                	mov    DWORD PTR [eax],edx
c0016bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bb8:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016bc2:	90                   	nop
c0016bc3:	83 c4 0c             	add    esp,0xc
c0016bc6:	c3                   	ret    
c0016bc7:	90                   	nop

c0016bc8 <Serial::~Serial()>:
c0016bc8:	83 ec 0c             	sub    esp,0xc
c0016bcb:	ba 18 b2 02 c0       	mov    edx,0xc002b218
c0016bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bd4:	89 10                	mov    DWORD PTR [eax],edx
c0016bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bda:	83 ec 0c             	sub    esp,0xc
c0016bdd:	50                   	push   eax
c0016bde:	e8 b3 d5 ff ff       	call   c0014196 <Device::~Device()>
c0016be3:	83 c4 10             	add    esp,0x10
c0016be6:	90                   	nop
c0016be7:	83 c4 0c             	add    esp,0xc
c0016bea:	c3                   	ret    
c0016beb:	90                   	nop

c0016bec <Serial::~Serial()>:
c0016bec:	83 ec 0c             	sub    esp,0xc
c0016bef:	83 ec 0c             	sub    esp,0xc
c0016bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bf6:	e8 cd ff ff ff       	call   c0016bc8 <Serial::~Serial()>
c0016bfb:	83 c4 10             	add    esp,0x10
c0016bfe:	83 ec 08             	sub    esp,0x8
c0016c01:	68 58 01 00 00       	push   0x158
c0016c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c0a:	e8 ae c1 ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0016c0f:	83 c4 10             	add    esp,0x10
c0016c12:	83 c4 0c             	add    esp,0xc
c0016c15:	c3                   	ret    

c0016c16 <Timer::Timer(char const*)>:
c0016c16:	83 ec 0c             	sub    esp,0xc
c0016c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c1d:	83 ec 08             	sub    esp,0x8
c0016c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c24:	50                   	push   eax
c0016c25:	e8 8a d8 ff ff       	call   c00144b4 <Device::Device(char const*)>
c0016c2a:	83 c4 10             	add    esp,0x10
c0016c2d:	ba 5c b2 02 c0       	mov    edx,0xc002b25c
c0016c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c36:	89 10                	mov    DWORD PTR [eax],edx
c0016c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c3c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016c46:	90                   	nop
c0016c47:	83 c4 0c             	add    esp,0xc
c0016c4a:	c3                   	ret    
c0016c4b:	90                   	nop

c0016c4c <Timer::~Timer()>:
c0016c4c:	83 ec 0c             	sub    esp,0xc
c0016c4f:	ba 5c b2 02 c0       	mov    edx,0xc002b25c
c0016c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c58:	89 10                	mov    DWORD PTR [eax],edx
c0016c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5e:	83 ec 0c             	sub    esp,0xc
c0016c61:	50                   	push   eax
c0016c62:	e8 2f d5 ff ff       	call   c0014196 <Device::~Device()>
c0016c67:	83 c4 10             	add    esp,0x10
c0016c6a:	90                   	nop
c0016c6b:	83 c4 0c             	add    esp,0xc
c0016c6e:	c3                   	ret    
c0016c6f:	90                   	nop

c0016c70 <Timer::~Timer()>:
c0016c70:	83 ec 0c             	sub    esp,0xc
c0016c73:	83 ec 0c             	sub    esp,0xc
c0016c76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c7a:	e8 cd ff ff ff       	call   c0016c4c <Timer::~Timer()>
c0016c7f:	83 c4 10             	add    esp,0x10
c0016c82:	83 ec 08             	sub    esp,0x8
c0016c85:	68 5c 01 00 00       	push   0x15c
c0016c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c8e:	e8 2a c1 ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0016c93:	83 c4 10             	add    esp,0x10
c0016c96:	83 c4 0c             	add    esp,0xc
c0016c99:	c3                   	ret    

c0016c9a <Timer::read()>:
c0016c9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c9e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016ca4:	c3                   	ret    

c0016ca5 <timerHandler(unsigned long long)>:
c0016ca5:	55                   	push   ebp
c0016ca6:	57                   	push   edi
c0016ca7:	56                   	push   esi
c0016ca8:	53                   	push   ebx
c0016ca9:	83 ec 0c             	sub    esp,0xc
c0016cac:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016cb0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016cb4:	01 35 f0 e9 02 c0    	add    DWORD PTR ds:0xc002e9f0,esi
c0016cba:	11 3d f4 e9 02 c0    	adc    DWORD PTR ds:0xc002e9f4,edi
c0016cc0:	80 3d 6d e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e36d,0x0
c0016cc7:	0f 84 07 01 00 00    	je     c0016dd4 <timerHandler(unsigned long long)+0x12f>
c0016ccd:	e8 b9 70 00 00       	call   c001dd8b <lockStuff()>
c0016cd2:	83 ec 0c             	sub    esp,0xc
c0016cd5:	68 bc 18 03 c0       	push   0xc00318bc
c0016cda:	e8 cf 1c 01 00       	call   c00289ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016cdf:	c7 04 24 bc 18 03 c0 	mov    DWORD PTR [esp],0xc00318bc
c0016ce6:	89 c3                	mov    ebx,eax
c0016ce8:	e8 c9 1c 01 00       	call   c00289b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016ced:	83 c4 10             	add    esp,0x10
c0016cf0:	84 c0                	test   al,al
c0016cf2:	74 60                	je     c0016d54 <timerHandler(unsigned long long)+0xaf>
c0016cf4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016cfa:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016cfd:	85 c0                	test   eax,eax
c0016cff:	0f 85 91 00 00 00    	jne    c0016d96 <timerHandler(unsigned long long)+0xf1>
c0016d05:	e9 be 00 00 00       	jmp    c0016dc8 <timerHandler(unsigned long long)+0x123>
c0016d0a:	83 ec 0c             	sub    esp,0xc
c0016d0d:	55                   	push   ebp
c0016d0e:	e8 69 76 00 00       	call   c001e37c <unblockTask(ThreadControlBlock*)>
c0016d13:	83 c4 10             	add    esp,0x10
c0016d16:	39 eb                	cmp    ebx,ebp
c0016d18:	75 12                	jne    c0016d2c <timerHandler(unsigned long long)+0x87>
c0016d1a:	83 ec 0c             	sub    esp,0xc
c0016d1d:	68 bc 18 03 c0       	push   0xc00318bc
c0016d22:	e8 87 1c 01 00       	call   c00289ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d27:	89 c3                	mov    ebx,eax
c0016d29:	83 c4 10             	add    esp,0x10
c0016d2c:	83 ec 0c             	sub    esp,0xc
c0016d2f:	68 bc 18 03 c0       	push   0xc00318bc
c0016d34:	e8 7d 1c 01 00       	call   c00289b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d39:	83 c4 10             	add    esp,0x10
c0016d3c:	84 c0                	test   al,al
c0016d3e:	75 b4                	jne    c0016cf4 <timerHandler(unsigned long long)+0x4f>
c0016d40:	83 ec 0c             	sub    esp,0xc
c0016d43:	68 bc 18 03 c0       	push   0xc00318bc
c0016d48:	e8 61 1c 01 00       	call   c00289ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d4d:	83 c4 10             	add    esp,0x10
c0016d50:	39 d8                	cmp    eax,ebx
c0016d52:	74 a0                	je     c0016cf4 <timerHandler(unsigned long long)+0x4f>
c0016d54:	83 ec 0c             	sub    esp,0xc
c0016d57:	68 bc 18 03 c0       	push   0xc00318bc
c0016d5c:	e8 4d 1c 01 00       	call   c00289ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d61:	c7 04 24 bc 18 03 c0 	mov    DWORD PTR [esp],0xc00318bc
c0016d68:	89 c5                	mov    ebp,eax
c0016d6a:	e8 63 1c 01 00       	call   c00289d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016d6f:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016d72:	83 c4 10             	add    esp,0x10
c0016d75:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016d78:	39 15 f0 e9 02 c0    	cmp    DWORD PTR ds:0xc002e9f0,edx
c0016d7e:	a1 f4 e9 02 c0       	mov    eax,ds:0xc002e9f4
c0016d83:	19 c8                	sbb    eax,ecx
c0016d85:	73 83                	jae    c0016d0a <timerHandler(unsigned long long)+0x65>
c0016d87:	50                   	push   eax
c0016d88:	50                   	push   eax
c0016d89:	55                   	push   ebp
c0016d8a:	68 bc 18 03 c0       	push   0xc00318bc
c0016d8f:	e8 ec 1c 01 00       	call   c0028a80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016d94:	eb 93                	jmp    c0016d29 <timerHandler(unsigned long long)+0x84>
c0016d96:	80 3d 6c e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e36c,0x0
c0016d9d:	74 29                	je     c0016dc8 <timerHandler(unsigned long long)+0x123>
c0016d9f:	39 c6                	cmp    esi,eax
c0016da1:	bb 00 00 00 00       	mov    ebx,0x0
c0016da6:	19 df                	sbb    edi,ebx
c0016da8:	72 19                	jb     c0016dc3 <timerHandler(unsigned long long)+0x11e>
c0016daa:	e8 b5 6f 00 00       	call   c001dd64 <lockScheduler()>
c0016daf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016db4:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016db7:	e8 e4 72 00 00       	call   c001e0a0 <schedule()>
c0016dbc:	e8 a5 6f 00 00       	call   c001dd66 <unlockScheduler()>
c0016dc1:	eb 05                	jmp    c0016dc8 <timerHandler(unsigned long long)+0x123>
c0016dc3:	29 f0                	sub    eax,esi
c0016dc5:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016dc8:	83 c4 0c             	add    esp,0xc
c0016dcb:	5b                   	pop    ebx
c0016dcc:	5e                   	pop    esi
c0016dcd:	5f                   	pop    edi
c0016dce:	5d                   	pop    ebp
c0016dcf:	e9 51 73 00 00       	jmp    c001e125 <unlockStuff()>
c0016dd4:	83 c4 0c             	add    esp,0xc
c0016dd7:	5b                   	pop    ebx
c0016dd8:	5e                   	pop    esi
c0016dd9:	5f                   	pop    edi
c0016dda:	5d                   	pop    ebp
c0016ddb:	c3                   	ret    

c0016ddc <setupTimer(int)>:
c0016ddc:	57                   	push   edi
c0016ddd:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0016de2:	56                   	push   esi
c0016de3:	53                   	push   ebx
c0016de4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016de8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016dee:	83 ec 0c             	sub    esp,0xc
c0016df1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016df7:	e8 b4 d7 ff ff       	call   c00145b0 <Device::getName()>
c0016dfc:	83 c4 10             	add    esp,0x10
c0016dff:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016e02:	0f 85 8d 00 00 00    	jne    c0016e95 <setupTimer(int)+0xb9>
c0016e08:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0016e0d:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016e14:	74 7f                	je     c0016e95 <setupTimer(int)+0xb9>
c0016e16:	83 ec 0c             	sub    esp,0xc
c0016e19:	68 5c 01 00 00       	push   0x15c
c0016e1e:	e8 20 8a ff ff       	call   c000f843 <malloc>
c0016e23:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e26:	89 c3                	mov    ebx,eax
c0016e28:	e8 f1 f6 00 00       	call   c002651e <PIT::PIT()>
c0016e2d:	59                   	pop    ecx
c0016e2e:	5f                   	pop    edi
c0016e2f:	53                   	push   ebx
c0016e30:	ff 35 68 e3 02 c0    	push   DWORD PTR ds:0xc002e368
c0016e36:	e8 89 d4 ff ff       	call   c00142c4 <Device::addChild(Device*)>
c0016e3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e3d:	6a 00                	push   0x0
c0016e3f:	6a 00                	push   0x0
c0016e41:	56                   	push   esi
c0016e42:	53                   	push   ebx
c0016e43:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e46:	83 c4 14             	add    esp,0x14
c0016e49:	68 60 01 00 00       	push   0x160
c0016e4e:	e8 f0 89 ff ff       	call   c000f843 <malloc>
c0016e53:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e56:	89 c7                	mov    edi,eax
c0016e58:	e8 71 f5 00 00       	call   c00263ce <APICTimer::APICTimer()>
c0016e5d:	6a 00                	push   0x0
c0016e5f:	6a 00                	push   0x0
c0016e61:	56                   	push   esi
c0016e62:	57                   	push   edi
c0016e63:	e8 68 f4 00 00       	call   c00262d0 <APICTimer::open(int, int, void*)>
c0016e68:	83 c4 20             	add    esp,0x20
c0016e6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e6d:	6a 00                	push   0x0
c0016e6f:	6a 00                	push   0x0
c0016e71:	6a 00                	push   0x0
c0016e73:	53                   	push   ebx
c0016e74:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e77:	58                   	pop    eax
c0016e78:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0016e7d:	5a                   	pop    edx
c0016e7e:	57                   	push   edi
c0016e7f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e85:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e8b:	e8 34 d4 ff ff       	call   c00142c4 <Device::addChild(Device*)>
c0016e90:	83 c4 10             	add    esp,0x10
c0016e93:	eb 33                	jmp    c0016ec8 <setupTimer(int)+0xec>
c0016e95:	83 ec 0c             	sub    esp,0xc
c0016e98:	68 5c 01 00 00       	push   0x15c
c0016e9d:	e8 a1 89 ff ff       	call   c000f843 <malloc>
c0016ea2:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ea5:	89 c3                	mov    ebx,eax
c0016ea7:	e8 72 f6 00 00       	call   c002651e <PIT::PIT()>
c0016eac:	58                   	pop    eax
c0016ead:	5a                   	pop    edx
c0016eae:	53                   	push   ebx
c0016eaf:	ff 35 68 e3 02 c0    	push   DWORD PTR ds:0xc002e368
c0016eb5:	e8 0a d4 ff ff       	call   c00142c4 <Device::addChild(Device*)>
c0016eba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ebc:	6a 00                	push   0x0
c0016ebe:	6a 00                	push   0x0
c0016ec0:	56                   	push   esi
c0016ec1:	53                   	push   ebx
c0016ec2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ec5:	83 c4 20             	add    esp,0x20
c0016ec8:	89 d8                	mov    eax,ebx
c0016eca:	5b                   	pop    ebx
c0016ecb:	5e                   	pop    esi
c0016ecc:	5f                   	pop    edi
c0016ecd:	c3                   	ret    

c0016ece <VCache::VCache(PhysicalDisk*)>:
c0016ece:	53                   	push   ebx
c0016ecf:	83 ec 18             	sub    esp,0x18
c0016ed2:	ba 8c b2 02 c0       	mov    edx,0xc002b28c
c0016ed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016edb:	89 10                	mov    DWORD PTR [eax],edx
c0016edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ee1:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016ee8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eec:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016ef3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ef7:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016efe:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f09:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016f10:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016f17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f1b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016f22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f26:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f2e:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016f35:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016f3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f40:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f48:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016f4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f50:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f58:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016f5f:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016f67:	83 ec 0c             	sub    esp,0xc
c0016f6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f6e:	e8 d0 88 ff ff       	call   c000f843 <malloc>
c0016f73:	83 c4 10             	add    esp,0x10
c0016f76:	89 c3                	mov    ebx,eax
c0016f78:	83 ec 0c             	sub    esp,0xc
c0016f7b:	53                   	push   ebx
c0016f7c:	e8 03 6f 00 00       	call   c001de84 <Mutex::Mutex()>
c0016f81:	83 c4 10             	add    esp,0x10
c0016f84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f88:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016f8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f8f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016f93:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016f96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9a:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016fa1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fa5:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016fab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016faf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016fb2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fb6:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016fbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fc2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016fc6:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016fc9:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd0:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fd8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016fde:	05 00 01 00 00       	add    eax,0x100
c0016fe3:	c1 e0 04             	shl    eax,0x4
c0016fe6:	83 ec 0c             	sub    esp,0xc
c0016fe9:	50                   	push   eax
c0016fea:	e8 54 88 ff ff       	call   c000f843 <malloc>
c0016fef:	83 c4 10             	add    esp,0x10
c0016ff2:	89 c2                	mov    edx,eax
c0016ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fff:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001700e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017012:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017018:	c1 e0 07             	shl    eax,0x7
c001701b:	83 ec 0c             	sub    esp,0xc
c001701e:	50                   	push   eax
c001701f:	e8 1f 88 ff ff       	call   c000f843 <malloc>
c0017024:	83 c4 10             	add    esp,0x10
c0017027:	89 c2                	mov    edx,eax
c0017029:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001702d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017030:	90                   	nop
c0017031:	83 c4 18             	add    esp,0x18
c0017034:	5b                   	pop    ebx
c0017035:	c3                   	ret    

c0017036 <VCache::invalidateReadBuffer()>:
c0017036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001703a:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017040:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017044:	c3                   	ret    
c0017045:	90                   	nop

c0017046 <VCache::writeWriteBuffer()>:
c0017046:	53                   	push   ebx
c0017047:	83 ec 14             	sub    esp,0x14
c001704a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001704e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017051:	8b 10                	mov    edx,DWORD PTR [eax]
c0017053:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017056:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017059:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001705c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001705f:	50                   	push   eax
c0017060:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017063:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001706a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017071:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017075:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001707c:	83 c4 28             	add    esp,0x28
c001707f:	5b                   	pop    ebx
c0017080:	c3                   	ret    
c0017081:	90                   	nop

c0017082 <VCache::~VCache()>:
c0017082:	83 ec 0c             	sub    esp,0xc
c0017085:	ba 8c b2 02 c0       	mov    edx,0xc002b28c
c001708a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001708e:	89 10                	mov    DWORD PTR [eax],edx
c0017090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017094:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017097:	84 c0                	test   al,al
c0017099:	74 0f                	je     c00170aa <VCache::~VCache()+0x28>
c001709b:	83 ec 0c             	sub    esp,0xc
c001709e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170a2:	e8 9f ff ff ff       	call   c0017046 <VCache::writeWriteBuffer()>
c00170a7:	83 c4 10             	add    esp,0x10
c00170aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170ae:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00170b1:	83 ec 0c             	sub    esp,0xc
c00170b4:	50                   	push   eax
c00170b5:	e8 99 87 ff ff       	call   c000f853 <free>
c00170ba:	83 c4 10             	add    esp,0x10
c00170bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170c1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00170c4:	83 ec 0c             	sub    esp,0xc
c00170c7:	50                   	push   eax
c00170c8:	e8 86 87 ff ff       	call   c000f853 <free>
c00170cd:	83 c4 10             	add    esp,0x10
c00170d0:	90                   	nop
c00170d1:	83 c4 0c             	add    esp,0xc
c00170d4:	c3                   	ret    
c00170d5:	90                   	nop

c00170d6 <VCache::~VCache()>:
c00170d6:	83 ec 0c             	sub    esp,0xc
c00170d9:	83 ec 0c             	sub    esp,0xc
c00170dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170e0:	e8 9d ff ff ff       	call   c0017082 <VCache::~VCache()>
c00170e5:	83 c4 10             	add    esp,0x10
c00170e8:	83 ec 08             	sub    esp,0x8
c00170eb:	6a 44                	push   0x44
c00170ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170f1:	e8 c7 bc ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c00170f6:	83 c4 10             	add    esp,0x10
c00170f9:	83 c4 0c             	add    esp,0xc
c00170fc:	c3                   	ret    
c00170fd:	90                   	nop

c00170fe <VCache::write(unsigned long long, int, void*)>:
c00170fe:	55                   	push   ebp
c00170ff:	57                   	push   edi
c0017100:	56                   	push   esi
c0017101:	53                   	push   ebx
c0017102:	83 ec 28             	sub    esp,0x28
c0017105:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017109:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001710d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017111:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017115:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017118:	e8 c9 71 00 00       	call   c001e2e6 <Semaphore::acquire()>
c001711d:	83 c4 10             	add    esp,0x10
c0017120:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017124:	74 0c                	je     c0017132 <VCache::write(unsigned long long, int, void*)+0x34>
c0017126:	83 ec 0c             	sub    esp,0xc
c0017129:	53                   	push   ebx
c001712a:	e8 07 ff ff ff       	call   c0017036 <VCache::invalidateReadBuffer()>
c001712f:	83 c4 10             	add    esp,0x10
c0017132:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017136:	74 66                	je     c001719e <VCache::write(unsigned long long, int, void*)+0xa0>
c0017138:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001713b:	99                   	cdq    
c001713c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017140:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017143:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017146:	89 c1                	mov    ecx,eax
c0017148:	89 d0                	mov    eax,edx
c001714a:	31 f1                	xor    ecx,esi
c001714c:	31 f8                	xor    eax,edi
c001714e:	89 ca                	mov    edx,ecx
c0017150:	09 c2                	or     edx,eax
c0017152:	75 3e                	jne    c0017192 <VCache::write(unsigned long long, int, void*)+0x94>
c0017154:	83 fd 01             	cmp    ebp,0x1
c0017157:	75 39                	jne    c0017192 <VCache::write(unsigned long long, int, void*)+0x94>
c0017159:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001715c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017162:	51                   	push   ecx
c0017163:	50                   	push   eax
c0017164:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017168:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001716c:	0f af c8             	imul   ecx,eax
c001716f:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017172:	51                   	push   ecx
c0017173:	e8 cc 95 fe ff       	call   c0000744 <memcpy>
c0017178:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001717b:	83 c4 10             	add    esp,0x10
c001717e:	40                   	inc    eax
c001717f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017182:	83 c0 80             	add    eax,0xffffff80
c0017185:	75 57                	jne    c00171de <VCache::write(unsigned long long, int, void*)+0xe0>
c0017187:	83 ec 0c             	sub    esp,0xc
c001718a:	53                   	push   ebx
c001718b:	e8 b6 fe ff ff       	call   c0017046 <VCache::writeWriteBuffer()>
c0017190:	eb 34                	jmp    c00171c6 <VCache::write(unsigned long long, int, void*)+0xc8>
c0017192:	83 ec 0c             	sub    esp,0xc
c0017195:	53                   	push   ebx
c0017196:	e8 ab fe ff ff       	call   c0017046 <VCache::writeWriteBuffer()>
c001719b:	83 c4 10             	add    esp,0x10
c001719e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171a1:	83 fd 7f             	cmp    ebp,0x7f
c00171a4:	7f 25                	jg     c00171cb <VCache::write(unsigned long long, int, void*)+0xcd>
c00171a6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00171a9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00171ac:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00171af:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00171b3:	52                   	push   edx
c00171b4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00171ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171be:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00171c1:	e8 7e 95 fe ff       	call   c0000744 <memcpy>
c00171c6:	83 c4 10             	add    esp,0x10
c00171c9:	eb 13                	jmp    c00171de <VCache::write(unsigned long long, int, void*)+0xe0>
c00171cb:	83 ec 0c             	sub    esp,0xc
c00171ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00171d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00171d4:	55                   	push   ebp
c00171d5:	57                   	push   edi
c00171d6:	56                   	push   esi
c00171d7:	50                   	push   eax
c00171d8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00171db:	83 c4 20             	add    esp,0x20
c00171de:	83 ec 0c             	sub    esp,0xc
c00171e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171e4:	e8 ab 76 00 00       	call   c001e894 <Semaphore::release()>
c00171e9:	83 c4 2c             	add    esp,0x2c
c00171ec:	31 c0                	xor    eax,eax
c00171ee:	5b                   	pop    ebx
c00171ef:	5e                   	pop    esi
c00171f0:	5f                   	pop    edi
c00171f1:	5d                   	pop    ebp
c00171f2:	c3                   	ret    
c00171f3:	90                   	nop

c00171f4 <VCache::read(unsigned long long, int, void*)>:
c00171f4:	55                   	push   ebp
c00171f5:	57                   	push   edi
c00171f6:	56                   	push   esi
c00171f7:	53                   	push   ebx
c00171f8:	83 ec 28             	sub    esp,0x28
c00171fb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017203:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017207:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001720b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001720f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017213:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017217:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001721a:	e8 c7 70 00 00       	call   c001e2e6 <Semaphore::acquire()>
c001721f:	83 c4 10             	add    esp,0x10
c0017222:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017226:	74 0c                	je     c0017234 <VCache::read(unsigned long long, int, void*)+0x40>
c0017228:	83 ec 0c             	sub    esp,0xc
c001722b:	53                   	push   ebx
c001722c:	e8 15 fe ff ff       	call   c0017046 <VCache::writeWriteBuffer()>
c0017231:	83 c4 10             	add    esp,0x10
c0017234:	83 fe 01             	cmp    esi,0x1
c0017237:	0f 85 80 00 00 00    	jne    c00172bd <VCache::read(unsigned long long, int, void*)+0xc9>
c001723d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017240:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017247:	75 74                	jne    c00172bd <VCache::read(unsigned long long, int, void*)+0xc9>
c0017249:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001724c:	89 d1                	mov    ecx,edx
c001724e:	f7 d9                	neg    ecx
c0017250:	89 cf                	mov    edi,ecx
c0017252:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017256:	c1 ff 1f             	sar    edi,0x1f
c0017259:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001725c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017260:	89 ce                	mov    esi,ecx
c0017262:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017266:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001726a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001726e:	89 cf                	mov    edi,ecx
c0017270:	74 0a                	je     c001727c <VCache::read(unsigned long long, int, void*)+0x88>
c0017272:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017275:	75 05                	jne    c001727c <VCache::read(unsigned long long, int, void*)+0x88>
c0017277:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001727a:	74 1c                	je     c0017298 <VCache::read(unsigned long long, int, void*)+0xa4>
c001727c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017280:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017283:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017286:	83 ec 0c             	sub    esp,0xc
c0017289:	8b 08                	mov    ecx,DWORD PTR [eax]
c001728b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001728e:	52                   	push   edx
c001728f:	57                   	push   edi
c0017290:	56                   	push   esi
c0017291:	50                   	push   eax
c0017292:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017295:	83 c4 20             	add    esp,0x20
c0017298:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001729b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00172a1:	50                   	push   eax
c00172a2:	52                   	push   edx
c00172a3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172a6:	48                   	dec    eax
c00172a7:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00172ab:	0f af c2             	imul   eax,edx
c00172ae:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00172b1:	50                   	push   eax
c00172b2:	55                   	push   ebp
c00172b3:	e8 8c 94 fe ff       	call   c0000744 <memcpy>
c00172b8:	83 c4 10             	add    esp,0x10
c00172bb:	eb 21                	jmp    c00172de <VCache::read(unsigned long long, int, void*)+0xea>
c00172bd:	83 ec 0c             	sub    esp,0xc
c00172c0:	53                   	push   ebx
c00172c1:	e8 70 fd ff ff       	call   c0017036 <VCache::invalidateReadBuffer()>
c00172c6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00172cb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00172ce:	56                   	push   esi
c00172cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172d7:	50                   	push   eax
c00172d8:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00172db:	83 c4 20             	add    esp,0x20
c00172de:	83 ec 0c             	sub    esp,0xc
c00172e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172e4:	e8 ab 75 00 00       	call   c001e894 <Semaphore::release()>
c00172e9:	83 c4 2c             	add    esp,0x2c
c00172ec:	31 c0                	xor    eax,eax
c00172ee:	5b                   	pop    ebx
c00172ef:	5e                   	pop    esi
c00172f0:	5f                   	pop    edi
c00172f1:	5d                   	pop    ebp
c00172f2:	c3                   	ret    
c00172f3:	90                   	nop

c00172f4 <Video::putrect(int, int, int, int, unsigned int)>:
c00172f4:	55                   	push   ebp
c00172f5:	57                   	push   edi
c00172f6:	56                   	push   esi
c00172f7:	53                   	push   ebx
c00172f8:	83 ec 1c             	sub    esp,0x1c
c00172fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00172ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017303:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017307:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001730b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001730f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017313:	01 df                	add    edi,ebx
c0017315:	39 fb                	cmp    ebx,edi
c0017317:	7d 1f                	jge    c0017338 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017319:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001731d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017321:	7d 12                	jge    c0017335 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017323:	8b 16                	mov    edx,DWORD PTR [esi]
c0017325:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017329:	53                   	push   ebx
c001732a:	55                   	push   ebp
c001732b:	45                   	inc    ebp
c001732c:	56                   	push   esi
c001732d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017330:	83 c4 10             	add    esp,0x10
c0017333:	eb e8                	jmp    c001731d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017335:	43                   	inc    ebx
c0017336:	eb dd                	jmp    c0017315 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017338:	83 c4 1c             	add    esp,0x1c
c001733b:	5b                   	pop    ebx
c001733c:	5e                   	pop    esi
c001733d:	5f                   	pop    edi
c001733e:	5d                   	pop    ebp
c001733f:	c3                   	ret    

c0017340 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017340:	55                   	push   ebp
c0017341:	57                   	push   edi
c0017342:	31 ff                	xor    edi,edi
c0017344:	56                   	push   esi
c0017345:	53                   	push   ebx
c0017346:	83 ec 1c             	sub    esp,0x1c
c0017349:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001734d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017351:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017358:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001735d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017361:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017365:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017369:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001736c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017370:	01 f9                	add    ecx,edi
c0017372:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017376:	7d 2f                	jge    c00173a7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017378:	31 f6                	xor    esi,esi
c001737a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001737e:	01 f2                	add    edx,esi
c0017380:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017384:	7d 1a                	jge    c00173a0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017386:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017389:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001738c:	46                   	inc    esi
c001738d:	51                   	push   ecx
c001738e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017392:	52                   	push   edx
c0017393:	55                   	push   ebp
c0017394:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017397:	83 c4 10             	add    esp,0x10
c001739a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001739e:	eb da                	jmp    c001737a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00173a0:	47                   	inc    edi
c00173a1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00173a5:	eb c5                	jmp    c001736c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00173a7:	83 c4 1c             	add    esp,0x1c
c00173aa:	5b                   	pop    ebx
c00173ab:	5e                   	pop    esi
c00173ac:	5f                   	pop    edi
c00173ad:	5d                   	pop    ebp
c00173ae:	c3                   	ret    
c00173af:	90                   	nop

c00173b0 <Video::blit(unsigned int*, int, int, int, int)>:
c00173b0:	55                   	push   ebp
c00173b1:	57                   	push   edi
c00173b2:	56                   	push   esi
c00173b3:	53                   	push   ebx
c00173b4:	83 ec 1c             	sub    esp,0x1c
c00173b7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173bf:	85 c0                	test   eax,eax
c00173c1:	79 02                	jns    c00173c5 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00173c3:	31 c0                	xor    eax,eax
c00173c5:	c1 e0 02             	shl    eax,0x2
c00173c8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00173cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173d0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173d4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00173d8:	39 d8                	cmp    eax,ebx
c00173da:	7e 49                	jle    c0017425 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00173dc:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00173e2:	7c 41                	jl     c0017425 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00173e4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00173e8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173ec:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00173f0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00173f4:	39 f9                	cmp    ecx,edi
c00173f6:	7e 22                	jle    c001741a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00173f8:	83 c5 04             	add    ebp,0x4
c00173fb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017401:	7c 14                	jl     c0017417 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017403:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017405:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017408:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001740c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017410:	56                   	push   esi
c0017411:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017414:	83 c4 10             	add    esp,0x10
c0017417:	47                   	inc    edi
c0017418:	eb d2                	jmp    c00173ec <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001741a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001741e:	43                   	inc    ebx
c001741f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017423:	eb ab                	jmp    c00173d0 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017425:	83 c4 1c             	add    esp,0x1c
c0017428:	5b                   	pop    ebx
c0017429:	5e                   	pop    esi
c001742a:	5f                   	pop    edi
c001742b:	5d                   	pop    ebp
c001742c:	c3                   	ret    
c001742d:	90                   	nop

c001742e <Video::clearScreen(unsigned int)>:
c001742e:	57                   	push   edi
c001742f:	56                   	push   esi
c0017430:	53                   	push   ebx
c0017431:	31 db                	xor    ebx,ebx
c0017433:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017437:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001743d:	7e 1f                	jle    c001745e <Video::clearScreen(unsigned int)+0x30>
c001743f:	31 ff                	xor    edi,edi
c0017441:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017447:	7e 12                	jle    c001745b <Video::clearScreen(unsigned int)+0x2d>
c0017449:	8b 06                	mov    eax,DWORD PTR [esi]
c001744b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001744f:	53                   	push   ebx
c0017450:	57                   	push   edi
c0017451:	47                   	inc    edi
c0017452:	56                   	push   esi
c0017453:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017456:	83 c4 10             	add    esp,0x10
c0017459:	eb e6                	jmp    c0017441 <Video::clearScreen(unsigned int)+0x13>
c001745b:	43                   	inc    ebx
c001745c:	eb d9                	jmp    c0017437 <Video::clearScreen(unsigned int)+0x9>
c001745e:	5b                   	pop    ebx
c001745f:	5e                   	pop    esi
c0017460:	5f                   	pop    edi
c0017461:	c3                   	ret    

c0017462 <Video::putpixel(int, int, unsigned int)>:
c0017462:	c7 44 24 04 94 b2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b294
c001746a:	e9 1a 31 00 00       	jmp    c001a589 <Krnl::panic(char const*)>
c001746f:	90                   	nop

c0017470 <Video::Video(char const*)>:
c0017470:	83 ec 0c             	sub    esp,0xc
c0017473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017477:	83 ec 08             	sub    esp,0x8
c001747a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001747e:	50                   	push   eax
c001747f:	e8 30 d0 ff ff       	call   c00144b4 <Device::Device(char const*)>
c0017484:	83 c4 10             	add    esp,0x10
c0017487:	ba 18 b3 02 c0       	mov    edx,0xc002b318
c001748c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017490:	89 10                	mov    DWORD PTR [eax],edx
c0017492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017496:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00174a0:	90                   	nop
c00174a1:	83 c4 0c             	add    esp,0xc
c00174a4:	c3                   	ret    
c00174a5:	90                   	nop

c00174a6 <Video::~Video()>:
c00174a6:	83 ec 0c             	sub    esp,0xc
c00174a9:	ba 18 b3 02 c0       	mov    edx,0xc002b318
c00174ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174b2:	89 10                	mov    DWORD PTR [eax],edx
c00174b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174b8:	83 ec 0c             	sub    esp,0xc
c00174bb:	50                   	push   eax
c00174bc:	e8 d5 cc ff ff       	call   c0014196 <Device::~Device()>
c00174c1:	83 c4 10             	add    esp,0x10
c00174c4:	90                   	nop
c00174c5:	83 c4 0c             	add    esp,0xc
c00174c8:	c3                   	ret    
c00174c9:	90                   	nop

c00174ca <Video::~Video()>:
c00174ca:	83 ec 0c             	sub    esp,0xc
c00174cd:	83 ec 0c             	sub    esp,0xc
c00174d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174d4:	e8 cd ff ff ff       	call   c00174a6 <Video::~Video()>
c00174d9:	83 c4 10             	add    esp,0x10
c00174dc:	83 ec 08             	sub    esp,0x8
c00174df:	68 64 01 00 00       	push   0x164
c00174e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174e8:	e8 d0 b8 ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c00174ed:	83 c4 10             	add    esp,0x10
c00174f0:	83 c4 0c             	add    esp,0xc
c00174f3:	c3                   	ret    

c00174f4 <Video::isMonochrome()>:
c00174f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174f8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00174fe:	c3                   	ret    
c00174ff:	90                   	nop

c0017500 <Video::getWidth()>:
c0017500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017504:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001750a:	c3                   	ret    
c001750b:	90                   	nop

c001750c <Video::getHeight()>:
c001750c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017510:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017516:	c3                   	ret    
c0017517:	90                   	nop

c0017518 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017518:	55                   	push   ebp
c0017519:	57                   	push   edi
c001751a:	56                   	push   esi
c001751b:	53                   	push   ebx
c001751c:	83 ec 2c             	sub    esp,0x2c
c001751f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017523:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017527:	83 f8 01             	cmp    eax,0x1
c001752a:	19 c9                	sbb    ecx,ecx
c001752c:	31 db                	xor    ebx,ebx
c001752e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017532:	89 cd                	mov    ebp,ecx
c0017534:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001753c:	f7 d5                	not    ebp
c001753e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017544:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017548:	01 d8                	add    eax,ebx
c001754a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001754e:	56                   	push   esi
c001754f:	e8 b8 ff ff ff       	call   c001750c <Video::getHeight()>
c0017554:	59                   	pop    ecx
c0017555:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017559:	7e 70                	jle    c00175cb <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001755b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001755f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017563:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017566:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001756a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001756e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017579:	89 f8                	mov    eax,edi
c001757b:	83 c0 20             	add    eax,0x20
c001757e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017582:	56                   	push   esi
c0017583:	e8 78 ff ff ff       	call   c0017500 <Video::getWidth()>
c0017588:	5a                   	pop    edx
c0017589:	39 c7                	cmp    edi,eax
c001758b:	7d 34                	jge    c00175c1 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001758d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017592:	74 05                	je     c0017599 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017594:	8b 06                	mov    eax,DWORD PTR [esi]
c0017596:	55                   	push   ebp
c0017597:	eb 0d                	jmp    c00175a6 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017599:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001759e:	74 12                	je     c00175b2 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00175a0:	8b 06                	mov    eax,DWORD PTR [esi]
c00175a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175a6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00175aa:	57                   	push   edi
c00175ab:	56                   	push   esi
c00175ac:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00175af:	83 c4 10             	add    esp,0x10
c00175b2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00175b6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00175ba:	47                   	inc    edi
c00175bb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00175bf:	75 c1                	jne    c0017582 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00175c1:	43                   	inc    ebx
c00175c2:	83 fb 20             	cmp    ebx,0x20
c00175c5:	0f 85 79 ff ff ff    	jne    c0017544 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00175cb:	83 c4 2c             	add    esp,0x2c
c00175ce:	5b                   	pop    ebx
c00175cf:	5e                   	pop    esi
c00175d0:	5f                   	pop    edi
c00175d1:	5d                   	pop    ebp
c00175d2:	c3                   	ret    
c00175d3:	90                   	nop

c00175d4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00175d4:	55                   	push   ebp
c00175d5:	57                   	push   edi
c00175d6:	56                   	push   esi
c00175d7:	53                   	push   ebx
c00175d8:	83 ec 28             	sub    esp,0x28
c00175db:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00175df:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00175e3:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00175e7:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00175eb:	c1 e7 08             	shl    edi,0x8
c00175ee:	01 c7                	add    edi,eax
c00175f0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00175f4:	c1 e0 08             	shl    eax,0x8
c00175f7:	01 d0                	add    eax,edx
c00175f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017601:	0f af c7             	imul   eax,edi
c0017604:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001760b:	50                   	push   eax
c001760c:	e8 32 82 ff ff       	call   c000f843 <malloc>
c0017611:	83 c4 10             	add    esp,0x10
c0017614:	89 c5                	mov    ebp,eax
c0017616:	85 c0                	test   eax,eax
c0017618:	75 15                	jne    c001762f <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001761a:	83 ec 0c             	sub    esp,0xc
c001761d:	68 b5 b2 02 c0       	push   0xc002b2b5
c0017622:	e8 76 b8 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0017627:	83 c4 10             	add    esp,0x10
c001762a:	e9 1c 01 00 00       	jmp    c001774b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001762f:	be 12 00 00 00       	mov    esi,0x12
c0017634:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017638:	74 11                	je     c001764b <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001763a:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001763e:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017642:	c1 fe 03             	sar    esi,0x3
c0017645:	0f af f0             	imul   esi,eax
c0017648:	83 c6 12             	add    esi,0x12
c001764b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001764f:	74 04                	je     c0017655 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017651:	85 ff                	test   edi,edi
c0017653:	75 12                	jne    c0017667 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017655:	83 ec 0c             	sub    esp,0xc
c0017658:	68 cc b2 02 c0       	push   0xc002b2cc
c001765d:	e8 3b b8 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0017662:	e9 ce 00 00 00       	jmp    c0017735 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017667:	52                   	push   edx
c0017668:	52                   	push   edx
c0017669:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001766d:	50                   	push   eax
c001766e:	68 e1 b2 02 c0       	push   0xc002b2e1
c0017673:	e8 25 b8 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0017678:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001767c:	83 c4 10             	add    esp,0x10
c001767f:	80 fa 02             	cmp    dl,0x2
c0017682:	0f 85 98 00 00 00    	jne    c0017720 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017688:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001768d:	75 10                	jne    c001769f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001768f:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017693:	75 0a                	jne    c001769f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017695:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017698:	83 e8 18             	sub    eax,0x18
c001769b:	a8 f7                	test   al,0xf7
c001769d:	74 0a                	je     c00176a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001769f:	83 ec 0c             	sub    esp,0xc
c00176a2:	68 ee b2 02 c0       	push   0xc002b2ee
c00176a7:	eb 7f                	jmp    c0017728 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00176a9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00176b1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00176b9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00176bd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00176c5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00176c9:	75 0c                	jne    c00176d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00176cb:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00176d0:	c1 e0 18             	shl    eax,0x18
c00176d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176d7:	41                   	inc    ecx
c00176d8:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00176dd:	c1 e2 10             	shl    edx,0x10
c00176e0:	89 d0                	mov    eax,edx
c00176e2:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00176e7:	c1 e2 08             	shl    edx,0x8
c00176ea:	09 c2                	or     edx,eax
c00176ec:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00176f0:	09 c2                	or     edx,eax
c00176f2:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00176f6:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00176fa:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00176fe:	c1 f8 03             	sar    eax,0x3
c0017701:	01 c6                	add    esi,eax
c0017703:	89 c8                	mov    eax,ecx
c0017705:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017709:	39 c7                	cmp    edi,eax
c001770b:	7f b0                	jg     c00176bd <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001770d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017711:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017715:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017718:	7e 22                	jle    c001773c <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001771a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001771e:	eb 99                	jmp    c00176b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017720:	50                   	push   eax
c0017721:	50                   	push   eax
c0017722:	52                   	push   edx
c0017723:	68 fc b2 02 c0       	push   0xc002b2fc
c0017728:	e8 70 b7 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001772d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017730:	e8 1e 81 ff ff       	call   c000f853 <free>
c0017735:	83 c4 10             	add    esp,0x10
c0017738:	31 ed                	xor    ebp,ebp
c001773a:	eb 0f                	jmp    c001774b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001773c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017740:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017743:	89 38                	mov    DWORD PTR [eax],edi
c0017745:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017749:	89 08                	mov    DWORD PTR [eax],ecx
c001774b:	83 c4 1c             	add    esp,0x1c
c001774e:	89 e8                	mov    eax,ebp
c0017750:	5b                   	pop    ebx
c0017751:	5e                   	pop    esi
c0017752:	5f                   	pop    edi
c0017753:	5d                   	pop    ebp
c0017754:	c3                   	ret    
c0017755:	90                   	nop

c0017756 <Video::putTGA(int, int, unsigned char*, int)>:
c0017756:	55                   	push   ebp
c0017757:	57                   	push   edi
c0017758:	56                   	push   esi
c0017759:	53                   	push   ebx
c001775a:	83 ec 28             	sub    esp,0x28
c001775d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017761:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017765:	50                   	push   eax
c0017766:	8d 44 24 18          	lea    eax,[esp+0x18]
c001776a:	50                   	push   eax
c001776b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001776f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017773:	56                   	push   esi
c0017774:	e8 5b fe ff ff       	call   c00175d4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017779:	83 c4 20             	add    esp,0x20
c001777c:	85 c0                	test   eax,eax
c001777e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017782:	74 35                	je     c00177b9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017784:	89 c7                	mov    edi,eax
c0017786:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001778a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001778e:	39 d8                	cmp    eax,ebx
c0017790:	7e 27                	jle    c00177b9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017792:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017796:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001779a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001779e:	39 e8                	cmp    eax,ebp
c00177a0:	7e 14                	jle    c00177b6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00177a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00177a4:	83 c7 04             	add    edi,0x4
c00177a7:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00177aa:	53                   	push   ebx
c00177ab:	55                   	push   ebp
c00177ac:	45                   	inc    ebp
c00177ad:	56                   	push   esi
c00177ae:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00177b1:	83 c4 10             	add    esp,0x10
c00177b4:	eb e0                	jmp    c0017796 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00177b6:	43                   	inc    ebx
c00177b7:	eb cd                	jmp    c0017786 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00177b9:	83 c4 1c             	add    esp,0x1c
c00177bc:	5b                   	pop    ebx
c00177bd:	5e                   	pop    esi
c00177be:	5f                   	pop    edi
c00177bf:	5d                   	pop    ebp
c00177c0:	c3                   	ret    
c00177c1:	90                   	nop

c00177c2 <ACPI::close(int, int, void*)>:
c00177c2:	83 ec 1c             	sub    esp,0x1c
c00177c5:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00177cd:	74 0a                	je     c00177d9 <ACPI::close(int, int, void*)+0x17>
c00177cf:	b8 00 00 00 00       	mov    eax,0x0
c00177d4:	e9 9a 00 00 00       	jmp    c0017873 <ACPI::close(int, int, void*)+0xb1>
c00177d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00177de:	75 37                	jne    c0017817 <ACPI::close(int, int, void*)+0x55>
c00177e0:	83 ec 0c             	sub    esp,0xc
c00177e3:	68 58 b3 02 c0       	push   0xc002b358
c00177e8:	e8 b0 b6 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00177ed:	83 c4 10             	add    esp,0x10
c00177f0:	a1 28 0a 03 c0       	mov    eax,ds:0xc0030a28
c00177f5:	85 c0                	test   eax,eax
c00177f7:	74 07                	je     c0017800 <ACPI::close(int, int, void*)+0x3e>
c00177f9:	a1 28 0a 03 c0       	mov    eax,ds:0xc0030a28
c00177fe:	ff d0                	call   eax
c0017800:	83 ec 0c             	sub    esp,0xc
c0017803:	68 88 b4 02 c0       	push   0xc002b488
c0017808:	e8 7c 2d 00 00       	call   c001a589 <Krnl::panic(char const*)>
c001780d:	83 c4 10             	add    esp,0x10
c0017810:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017815:	eb 5c                	jmp    c0017873 <ACPI::close(int, int, void*)+0xb1>
c0017817:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001781c:	75 50                	jne    c001786e <ACPI::close(int, int, void*)+0xac>
c001781e:	a1 24 0a 03 c0       	mov    eax,ds:0xc0030a24
c0017823:	85 c0                	test   eax,eax
c0017825:	74 07                	je     c001782e <ACPI::close(int, int, void*)+0x6c>
c0017827:	a1 24 0a 03 c0       	mov    eax,ds:0xc0030a24
c001782c:	ff d0                	call   eax
c001782e:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017833:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017838:	83 e0 02             	and    eax,0x2
c001783b:	74 1c                	je     c0017859 <ACPI::close(int, int, void*)+0x97>
c001783d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017844:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017848:	89 c2                	mov    edx,eax
c001784a:	ec                   	in     al,dx
c001784b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001784f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017853:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017857:	eb da                	jmp    c0017833 <ACPI::close(int, int, void*)+0x71>
c0017859:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017860:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017865:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017869:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001786d:	ee                   	out    dx,al
c001786e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017873:	83 c4 1c             	add    esp,0x1c
c0017876:	c3                   	ret    

c0017877 <findRSDP()>:
c0017877:	83 ec 1c             	sub    esp,0x1c
c001787a:	83 ec 0c             	sub    esp,0xc
c001787d:	68 65 b3 02 c0       	push   0xc002b365
c0017882:	e8 16 b6 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0017887:	83 c4 10             	add    esp,0x10
c001788a:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c001788f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017895:	83 e0 04             	and    eax,0x4
c0017898:	84 c0                	test   al,al
c001789a:	75 07                	jne    c00178a3 <findRSDP()+0x2c>
c001789c:	b8 00 00 00 00       	mov    eax,0x0
c00178a1:	eb 6a                	jmp    c001790d <findRSDP()+0x96>
c00178a3:	a1 b4 e3 02 c0       	mov    eax,ds:0xc002e3b4
c00178a8:	3d ff 07 00 00       	cmp    eax,0x7ff
c00178ad:	7f 1b                	jg     c00178ca <findRSDP()+0x53>
c00178af:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00178b4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00178ba:	83 e2 fb             	and    edx,0xfffffffb
c00178bd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00178c3:	b8 00 00 00 00       	mov    eax,0x0
c00178c8:	eb 43                	jmp    c001790d <findRSDP()+0x96>
c00178ca:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00178d2:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00178da:	77 2c                	ja     c0017908 <findRSDP()+0x91>
c00178dc:	83 ec 04             	sub    esp,0x4
c00178df:	6a 08                	push   0x8
c00178e1:	68 73 b3 02 c0       	push   0xc002b373
c00178e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178ea:	e8 51 8d fe ff       	call   c0000640 <memcmp>
c00178ef:	83 c4 10             	add    esp,0x10
c00178f2:	85 c0                	test   eax,eax
c00178f4:	0f 94 c0             	sete   al
c00178f7:	84 c0                	test   al,al
c00178f9:	74 06                	je     c0017901 <findRSDP()+0x8a>
c00178fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178ff:	eb 0c                	jmp    c001790d <findRSDP()+0x96>
c0017901:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017906:	eb ca                	jmp    c00178d2 <findRSDP()+0x5b>
c0017908:	b8 00 00 00 00       	mov    eax,0x0
c001790d:	83 c4 1c             	add    esp,0x1c
c0017910:	c3                   	ret    

c0017911 <loadACPITables(unsigned char*)>:
c0017911:	56                   	push   esi
c0017912:	53                   	push   ebx
c0017913:	83 ec 44             	sub    esp,0x44
c0017916:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c001791b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017921:	83 e0 04             	and    eax,0x4
c0017924:	84 c0                	test   al,al
c0017926:	0f 84 05 02 00 00    	je     c0017b31 <loadACPITables(unsigned char*)+0x220>
c001792c:	a0 40 0c 03 c0       	mov    al,ds:0xc0030c40
c0017931:	84 c0                	test   al,al
c0017933:	74 75                	je     c00179aa <loadACPITables(unsigned char*)+0x99>
c0017935:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017939:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001793d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017941:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017944:	83 e8 24             	sub    eax,0x24
c0017947:	c1 e8 03             	shr    eax,0x3
c001794a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001794e:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017956:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001795a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001795e:	0f 8d b2 00 00 00    	jge    c0017a16 <loadACPITables(unsigned char*)+0x105>
c0017964:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017968:	83 c0 24             	add    eax,0x24
c001796b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001796f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017973:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017977:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001797b:	c1 e0 03             	shl    eax,0x3
c001797e:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017982:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017986:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017989:	8b 00                	mov    eax,DWORD PTR [eax]
c001798b:	89 c1                	mov    ecx,eax
c001798d:	a1 2c 0a 03 c0       	mov    eax,ds:0xc0030a2c
c0017992:	8d 50 01             	lea    edx,[eax+0x1]
c0017995:	89 15 2c 0a 03 c0    	mov    DWORD PTR ds:0xc0030a2c,edx
c001799b:	89 ca                	mov    edx,ecx
c001799d:	89 14 c5 44 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf5bc],edx
c00179a4:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00179a8:	eb ac                	jmp    c0017956 <loadACPITables(unsigned char*)+0x45>
c00179aa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00179b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179b9:	83 e8 24             	sub    eax,0x24
c00179bc:	c1 e8 02             	shr    eax,0x2
c00179bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179c3:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00179cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179cf:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00179d3:	7d 41                	jge    c0017a16 <loadACPITables(unsigned char*)+0x105>
c00179d5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179d9:	83 c0 24             	add    eax,0x24
c00179dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179e8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179ec:	c1 e0 02             	shl    eax,0x2
c00179ef:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00179f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179f7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00179f9:	a1 2c 0a 03 c0       	mov    eax,ds:0xc0030a2c
c00179fe:	8d 50 01             	lea    edx,[eax+0x1]
c0017a01:	89 15 2c 0a 03 c0    	mov    DWORD PTR ds:0xc0030a2c,edx
c0017a07:	89 ca                	mov    edx,ecx
c0017a09:	89 14 c5 44 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf5bc],edx
c0017a10:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017a14:	eb b5                	jmp    c00179cb <loadACPITables(unsigned char*)+0xba>
c0017a16:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017a1e:	a1 2c 0a 03 c0       	mov    eax,ds:0xc0030a2c
c0017a23:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017a27:	0f 8d 05 01 00 00    	jge    c0017b32 <loadACPITables(unsigned char*)+0x221>
c0017a2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a31:	8b 04 c5 44 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf5bc]
c0017a38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a48:	25 ff 0f 00 00       	and    eax,0xfff
c0017a4d:	89 c6                	mov    esi,eax
c0017a4f:	e8 8a a3 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0017a54:	89 c3                	mov    ebx,eax
c0017a56:	83 ec 0c             	sub    esp,0xc
c0017a59:	6a 01                	push   0x1
c0017a5b:	e8 e3 a0 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0017a60:	83 c4 10             	add    esp,0x10
c0017a63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a67:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a6d:	83 ec 0c             	sub    esp,0xc
c0017a70:	6a 01                	push   0x1
c0017a72:	6a 01                	push   0x1
c0017a74:	50                   	push   eax
c0017a75:	52                   	push   edx
c0017a76:	53                   	push   ebx
c0017a77:	e8 a8 ab ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a7c:	83 c4 20             	add    esp,0x20
c0017a7f:	09 f0                	or     eax,esi
c0017a81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a85:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a89:	c1 e0 03             	shl    eax,0x3
c0017a8c:	05 40 0a 03 c0       	add    eax,0xc0030a40
c0017a91:	83 ec 04             	sub    esp,0x4
c0017a94:	6a 04                	push   0x4
c0017a96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a9a:	50                   	push   eax
c0017a9b:	e8 a4 8c fe ff       	call   c0000744 <memcpy>
c0017aa0:	83 c4 10             	add    esp,0x10
c0017aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aa7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aaa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017aae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ab2:	05 00 10 00 00       	add    eax,0x1000
c0017ab7:	c1 e8 0c             	shr    eax,0xc
c0017aba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ac2:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ac9:	25 ff 0f 00 00       	and    eax,0xfff
c0017ace:	89 c6                	mov    esi,eax
c0017ad0:	e8 09 a3 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0017ad5:	89 c3                	mov    ebx,eax
c0017ad7:	83 ec 0c             	sub    esp,0xc
c0017ada:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ade:	e8 60 a0 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0017ae3:	83 c4 10             	add    esp,0x10
c0017ae6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017aea:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017af0:	83 ec 0c             	sub    esp,0xc
c0017af3:	6a 01                	push   0x1
c0017af5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017af9:	50                   	push   eax
c0017afa:	52                   	push   edx
c0017afb:	53                   	push   ebx
c0017afc:	e8 23 ab ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b01:	83 c4 20             	add    esp,0x20
c0017b04:	09 f0                	or     eax,esi
c0017b06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b0a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017b0d:	83 ec 0c             	sub    esp,0xc
c0017b10:	50                   	push   eax
c0017b11:	e8 b3 a4 ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c0017b16:	83 c4 10             	add    esp,0x10
c0017b19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b21:	89 14 c5 44 0a 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf5bc],edx
c0017b28:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017b2c:	e9 ed fe ff ff       	jmp    c0017a1e <loadACPITables(unsigned char*)+0x10d>
c0017b31:	90                   	nop
c0017b32:	83 c4 44             	add    esp,0x44
c0017b35:	5b                   	pop    ebx
c0017b36:	5e                   	pop    esi
c0017b37:	c3                   	ret    

c0017b38 <findRSDT(unsigned char*)>:
c0017b38:	56                   	push   esi
c0017b39:	53                   	push   ebx
c0017b3a:	83 ec 44             	sub    esp,0x44
c0017b3d:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0017b42:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b48:	83 e0 04             	and    eax,0x4
c0017b4b:	84 c0                	test   al,al
c0017b4d:	75 0a                	jne    c0017b59 <findRSDT(unsigned char*)+0x21>
c0017b4f:	b8 00 00 00 00       	mov    eax,0x0
c0017b54:	e9 f7 00 00 00       	jmp    c0017c50 <findRSDT(unsigned char*)+0x118>
c0017b59:	83 ec 04             	sub    esp,0x4
c0017b5c:	6a 24                	push   0x24
c0017b5e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017b62:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017b66:	50                   	push   eax
c0017b67:	e8 d8 8b fe ff       	call   c0000744 <memcpy>
c0017b6c:	83 c4 10             	add    esp,0x10
c0017b6f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017b73:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017b77:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017b7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b83:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b87:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b8f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b97:	25 ff 0f 00 00       	and    eax,0xfff
c0017b9c:	89 c6                	mov    esi,eax
c0017b9e:	e8 3b a2 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0017ba3:	89 c3                	mov    ebx,eax
c0017ba5:	83 ec 0c             	sub    esp,0xc
c0017ba8:	6a 02                	push   0x2
c0017baa:	e8 94 9f ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0017baf:	83 c4 10             	add    esp,0x10
c0017bb2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017bb6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bbc:	83 ec 0c             	sub    esp,0xc
c0017bbf:	6a 01                	push   0x1
c0017bc1:	6a 02                	push   0x2
c0017bc3:	50                   	push   eax
c0017bc4:	52                   	push   edx
c0017bc5:	53                   	push   ebx
c0017bc6:	e8 59 aa ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bcb:	83 c4 20             	add    esp,0x20
c0017bce:	09 f0                	or     eax,esi
c0017bd0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017bd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bd8:	25 ff 0f 00 00       	and    eax,0xfff
c0017bdd:	89 c6                	mov    esi,eax
c0017bdf:	e8 fa a1 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0017be4:	89 c3                	mov    ebx,eax
c0017be6:	83 ec 0c             	sub    esp,0xc
c0017be9:	6a 02                	push   0x2
c0017beb:	e8 53 9f ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0017bf0:	83 c4 10             	add    esp,0x10
c0017bf3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bf7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bfd:	83 ec 0c             	sub    esp,0xc
c0017c00:	6a 01                	push   0x1
c0017c02:	6a 02                	push   0x2
c0017c04:	50                   	push   eax
c0017c05:	52                   	push   edx
c0017c06:	53                   	push   ebx
c0017c07:	e8 18 aa ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c0c:	83 c4 20             	add    esp,0x20
c0017c0f:	09 f0                	or     eax,esi
c0017c11:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c15:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017c1a:	75 11                	jne    c0017c2d <findRSDT(unsigned char*)+0xf5>
c0017c1c:	c6 05 40 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030c40,0x0
c0017c23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c27:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c2b:	eb 1f                	jmp    c0017c4c <findRSDT(unsigned char*)+0x114>
c0017c2d:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017c32:	75 11                	jne    c0017c45 <findRSDT(unsigned char*)+0x10d>
c0017c34:	c6 05 40 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030c40,0x1
c0017c3b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c3f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c43:	eb 07                	jmp    c0017c4c <findRSDT(unsigned char*)+0x114>
c0017c45:	b8 00 00 00 00       	mov    eax,0x0
c0017c4a:	eb 04                	jmp    c0017c50 <findRSDT(unsigned char*)+0x118>
c0017c4c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c50:	83 c4 44             	add    esp,0x44
c0017c53:	5b                   	pop    ebx
c0017c54:	5e                   	pop    esi
c0017c55:	c3                   	ret    

c0017c56 <findDataTable(unsigned char*, char*)>:
c0017c56:	83 ec 1c             	sub    esp,0x1c
c0017c59:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0017c5e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c64:	83 e0 04             	and    eax,0x4
c0017c67:	84 c0                	test   al,al
c0017c69:	75 07                	jne    c0017c72 <findDataTable(unsigned char*, char*)+0x1c>
c0017c6b:	b8 00 00 00 00       	mov    eax,0x0
c0017c70:	eb 7c                	jmp    c0017cee <findDataTable(unsigned char*, char*)+0x98>
c0017c72:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017c7a:	a1 2c 0a 03 c0       	mov    eax,ds:0xc0030a2c
c0017c7f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017c83:	7d 3a                	jge    c0017cbf <findDataTable(unsigned char*, char*)+0x69>
c0017c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c89:	c1 e0 03             	shl    eax,0x3
c0017c8c:	05 40 0a 03 c0       	add    eax,0xc0030a40
c0017c91:	83 ec 04             	sub    esp,0x4
c0017c94:	6a 04                	push   0x4
c0017c96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c9a:	50                   	push   eax
c0017c9b:	e8 a0 89 fe ff       	call   c0000640 <memcmp>
c0017ca0:	83 c4 10             	add    esp,0x10
c0017ca3:	85 c0                	test   eax,eax
c0017ca5:	0f 94 c0             	sete   al
c0017ca8:	84 c0                	test   al,al
c0017caa:	74 0d                	je     c0017cb9 <findDataTable(unsigned char*, char*)+0x63>
c0017cac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cb0:	8b 04 c5 44 0a 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf5bc]
c0017cb7:	eb 35                	jmp    c0017cee <findDataTable(unsigned char*, char*)+0x98>
c0017cb9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017cbd:	eb bb                	jmp    c0017c7a <findDataTable(unsigned char*, char*)+0x24>
c0017cbf:	a0 40 0c 03 c0       	mov    al,ds:0xc0030c40
c0017cc4:	84 c0                	test   al,al
c0017cc6:	74 07                	je     c0017ccf <findDataTable(unsigned char*, char*)+0x79>
c0017cc8:	b8 58 00 00 00       	mov    eax,0x58
c0017ccd:	eb 05                	jmp    c0017cd4 <findDataTable(unsigned char*, char*)+0x7e>
c0017ccf:	b8 52 00 00 00       	mov    eax,0x52
c0017cd4:	83 ec 04             	sub    esp,0x4
c0017cd7:	50                   	push   eax
c0017cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017cdc:	68 ac b4 02 c0       	push   0xc002b4ac
c0017ce1:	e8 b7 b1 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0017ce6:	83 c4 10             	add    esp,0x10
c0017ce9:	b8 00 00 00 00       	mov    eax,0x0
c0017cee:	83 c4 1c             	add    esp,0x1c
c0017cf1:	c3                   	ret    

c0017cf2 <scanMADT()>:
c0017cf2:	53                   	push   ebx
c0017cf3:	83 ec 38             	sub    esp,0x38
c0017cf6:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0017cfb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d01:	83 e0 04             	and    eax,0x4
c0017d04:	84 c0                	test   al,al
c0017d06:	0f 84 63 04 00 00    	je     c001816f <scanMADT()+0x47d>
c0017d0c:	e8 66 fb ff ff       	call   c0017877 <findRSDP()>
c0017d11:	a3 4c 0c 03 c0       	mov    ds:0xc0030c4c,eax
c0017d16:	a1 4c 0c 03 c0       	mov    eax,ds:0xc0030c4c
c0017d1b:	85 c0                	test   eax,eax
c0017d1d:	75 19                	jne    c0017d38 <scanMADT()+0x46>
c0017d1f:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0017d24:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d2a:	83 e2 fb             	and    edx,0xfffffffb
c0017d2d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d33:	e9 3b 04 00 00       	jmp    c0018173 <scanMADT()+0x481>
c0017d38:	a1 4c 0c 03 c0       	mov    eax,ds:0xc0030c4c
c0017d3d:	83 ec 0c             	sub    esp,0xc
c0017d40:	50                   	push   eax
c0017d41:	e8 f2 fd ff ff       	call   c0017b38 <findRSDT(unsigned char*)>
c0017d46:	83 c4 10             	add    esp,0x10
c0017d49:	a3 48 0c 03 c0       	mov    ds:0xc0030c48,eax
c0017d4e:	a1 48 0c 03 c0       	mov    eax,ds:0xc0030c48
c0017d53:	85 c0                	test   eax,eax
c0017d55:	75 19                	jne    c0017d70 <scanMADT()+0x7e>
c0017d57:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0017d5c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017d62:	83 e2 fb             	and    edx,0xfffffffb
c0017d65:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017d6b:	e9 03 04 00 00       	jmp    c0018173 <scanMADT()+0x481>
c0017d70:	a1 48 0c 03 c0       	mov    eax,ds:0xc0030c48
c0017d75:	83 ec 0c             	sub    esp,0xc
c0017d78:	50                   	push   eax
c0017d79:	e8 93 fb ff ff       	call   c0017911 <loadACPITables(unsigned char*)>
c0017d7e:	83 c4 10             	add    esp,0x10
c0017d81:	a1 48 0c 03 c0       	mov    eax,ds:0xc0030c48
c0017d86:	83 ec 08             	sub    esp,0x8
c0017d89:	68 7c b3 02 c0       	push   0xc002b37c
c0017d8e:	50                   	push   eax
c0017d8f:	e8 c2 fe ff ff       	call   c0017c56 <findDataTable(unsigned char*, char*)>
c0017d94:	83 c4 10             	add    esp,0x10
c0017d97:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017d9b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017da0:	75 19                	jne    c0017dbb <scanMADT()+0xc9>
c0017da2:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0017da7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dad:	83 e2 fe             	and    edx,0xfffffffe
c0017db0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017db6:	e9 b8 03 00 00       	jmp    c0018173 <scanMADT()+0x481>
c0017dbb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017dc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017dca:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017dce:	0f 87 9f 03 00 00    	ja     c0018173 <scanMADT()+0x481>
c0017dd4:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017ddc:	0f 87 91 03 00 00    	ja     c0018173 <scanMADT()+0x481>
c0017de2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017de6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017dea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dee:	8d 50 01             	lea    edx,[eax+0x1]
c0017df1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017df5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017df9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017dfd:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017e01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e05:	8d 50 01             	lea    edx,[eax+0x1]
c0017e08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e0c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e10:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e14:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017e18:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017e1d:	0f 86 4f 03 00 00    	jbe    c0018172 <scanMADT()+0x480>
c0017e23:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017e28:	75 57                	jne    c0017e81 <scanMADT()+0x18f>
c0017e2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e2e:	8d 50 01             	lea    edx,[eax+0x1]
c0017e31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e35:	8a 15 40 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e40
c0017e3b:	0f b6 d2             	movzx  edx,dl
c0017e3e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e42:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e46:	88 82 80 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf180],al
c0017e4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e50:	8d 50 01             	lea    edx,[eax+0x1]
c0017e53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e57:	8a 15 40 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e40
c0017e5d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e60:	88 0d 40 0e 03 c0    	mov    BYTE PTR ds:0xc0030e40,cl
c0017e66:	0f b6 d2             	movzx  edx,dl
c0017e69:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017e6d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017e71:	88 82 60 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf1a0],al
c0017e77:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e7c:	e9 da 02 00 00       	jmp    c001815b <scanMADT()+0x469>
c0017e81:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017e86:	0f 85 14 01 00 00    	jne    c0017fa0 <scanMADT()+0x2ae>
c0017e8c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e90:	8d 50 01             	lea    edx,[eax+0x1]
c0017e93:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e97:	8a 15 00 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d00
c0017e9d:	0f b6 d2             	movzx  edx,dl
c0017ea0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ea4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ea8:	88 82 20 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf2e0],al
c0017eae:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017eb2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eba:	01 d0                	add    eax,edx
c0017ebc:	83 c0 2c             	add    eax,0x2c
c0017ebf:	8a 00                	mov    al,BYTE PTR [eax]
c0017ec1:	0f b6 d0             	movzx  edx,al
c0017ec4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ec8:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ecb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ecf:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ed3:	0f b6 c0             	movzx  eax,al
c0017ed6:	c1 e0 08             	shl    eax,0x8
c0017ed9:	89 d1                	mov    ecx,edx
c0017edb:	09 c1                	or     ecx,eax
c0017edd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ee1:	8d 50 02             	lea    edx,[eax+0x2]
c0017ee4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ee8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017eec:	0f b6 c0             	movzx  eax,al
c0017eef:	c1 e0 10             	shl    eax,0x10
c0017ef2:	09 c1                	or     ecx,eax
c0017ef4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ef8:	8d 50 03             	lea    edx,[eax+0x3]
c0017efb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017eff:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f03:	0f b6 c0             	movzx  eax,al
c0017f06:	c1 e0 18             	shl    eax,0x18
c0017f09:	09 c1                	or     ecx,eax
c0017f0b:	89 ca                	mov    edx,ecx
c0017f0d:	a0 00 0d 03 c0       	mov    al,ds:0xc0030d00
c0017f12:	0f b6 c0             	movzx  eax,al
c0017f15:	89 14 85 40 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2c0],edx
c0017f1c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f29:	01 d0                	add    eax,edx
c0017f2b:	83 c0 2c             	add    eax,0x2c
c0017f2e:	8a 00                	mov    al,BYTE PTR [eax]
c0017f30:	0f b6 d0             	movzx  edx,al
c0017f33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f37:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f3e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f42:	0f b6 c0             	movzx  eax,al
c0017f45:	c1 e0 08             	shl    eax,0x8
c0017f48:	89 d1                	mov    ecx,edx
c0017f4a:	09 c1                	or     ecx,eax
c0017f4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f50:	8d 50 02             	lea    edx,[eax+0x2]
c0017f53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f57:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f5b:	0f b6 c0             	movzx  eax,al
c0017f5e:	c1 e0 10             	shl    eax,0x10
c0017f61:	09 c1                	or     ecx,eax
c0017f63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f67:	8d 50 03             	lea    edx,[eax+0x3]
c0017f6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f6e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f72:	0f b6 c0             	movzx  eax,al
c0017f75:	c1 e0 18             	shl    eax,0x18
c0017f78:	09 c1                	or     ecx,eax
c0017f7a:	89 ca                	mov    edx,ecx
c0017f7c:	a0 00 0d 03 c0       	mov    al,ds:0xc0030d00
c0017f81:	0f b6 c0             	movzx  eax,al
c0017f84:	89 14 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],edx
c0017f8b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f90:	a0 00 0d 03 c0       	mov    al,ds:0xc0030d00
c0017f95:	40                   	inc    eax
c0017f96:	a2 00 0d 03 c0       	mov    ds:0xc0030d00,al
c0017f9b:	e9 bb 01 00 00       	jmp    c001815b <scanMADT()+0x469>
c0017fa0:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017fa5:	0f 85 e9 00 00 00    	jne    c0018094 <scanMADT()+0x3a2>
c0017fab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017faf:	8d 50 01             	lea    edx,[eax+0x1]
c0017fb2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fb6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fba:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fbe:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017fc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fc6:	8d 50 01             	lea    edx,[eax+0x1]
c0017fc9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fcd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fd1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fd5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017fd9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fdd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe1:	01 d0                	add    eax,edx
c0017fe3:	83 c0 2c             	add    eax,0x2c
c0017fe6:	8a 00                	mov    al,BYTE PTR [eax]
c0017fe8:	0f b6 d0             	movzx  edx,al
c0017feb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fef:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ff2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ff6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ffa:	0f b6 c0             	movzx  eax,al
c0017ffd:	c1 e0 08             	shl    eax,0x8
c0018000:	89 d1                	mov    ecx,edx
c0018002:	09 c1                	or     ecx,eax
c0018004:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018008:	8d 50 02             	lea    edx,[eax+0x2]
c001800b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001800f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018013:	0f b6 c0             	movzx  eax,al
c0018016:	c1 e0 10             	shl    eax,0x10
c0018019:	09 c1                	or     ecx,eax
c001801b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001801f:	8d 50 03             	lea    edx,[eax+0x3]
c0018022:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018026:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001802a:	0f b6 c0             	movzx  eax,al
c001802d:	c1 e0 18             	shl    eax,0x18
c0018030:	09 c8                	or     eax,ecx
c0018032:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018036:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001803b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001803f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018043:	01 d0                	add    eax,edx
c0018045:	83 c0 2c             	add    eax,0x2c
c0018048:	8a 00                	mov    al,BYTE PTR [eax]
c001804a:	0f b6 c0             	movzx  eax,al
c001804d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018051:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018054:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018058:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001805c:	0f b6 d2             	movzx  edx,dl
c001805f:	c1 e2 08             	shl    edx,0x8
c0018062:	09 d0                	or     eax,edx
c0018064:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018069:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001806e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018073:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018077:	88 90 c0 d5 02 c0    	mov    BYTE PTR [eax-0x3ffd2a40],dl
c001807d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018082:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018087:	66 89 84 12 e0 0c 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf320],ax
c001808f:	e9 c7 00 00 00       	jmp    c001815b <scanMADT()+0x469>
c0018094:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018099:	0f 85 b0 00 00 00    	jne    c001814f <scanMADT()+0x45d>
c001809f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a3:	8d 50 01             	lea    edx,[eax+0x1]
c00180a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180ae:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180b2:	0f b6 c0             	movzx  eax,al
c00180b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c1:	01 d0                	add    eax,edx
c00180c3:	83 c0 2c             	add    eax,0x2c
c00180c6:	8a 00                	mov    al,BYTE PTR [eax]
c00180c8:	0f b6 d0             	movzx  edx,al
c00180cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180cf:	8d 48 01             	lea    ecx,[eax+0x1]
c00180d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180d6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180da:	0f b6 c0             	movzx  eax,al
c00180dd:	c1 e0 08             	shl    eax,0x8
c00180e0:	09 d0                	or     eax,edx
c00180e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00180e6:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00180eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ef:	8d 50 01             	lea    edx,[eax+0x1]
c00180f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180fa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180fe:	0f b6 c0             	movzx  eax,al
c0018101:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018109:	c1 e0 08             	shl    eax,0x8
c001810c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018110:	89 c1                	mov    ecx,eax
c0018112:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018116:	c1 e0 18             	shl    eax,0x18
c0018119:	89 c3                	mov    ebx,eax
c001811b:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0018120:	8d 50 01             	lea    edx,[eax+0x1]
c0018123:	89 15 50 0c 03 c0    	mov    DWORD PTR ds:0xc0030c50,edx
c0018129:	09 d9                	or     ecx,ebx
c001812b:	89 ca                	mov    edx,ecx
c001812d:	89 14 85 60 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3a0],edx
c0018134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018138:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001813c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018140:	68 dc b4 02 c0       	push   0xc002b4dc
c0018145:	e8 53 ad ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001814a:	83 c4 10             	add    esp,0x10
c001814d:	eb 0c                	jmp    c001815b <scanMADT()+0x469>
c001814f:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018154:	75 05                	jne    c001815b <scanMADT()+0x469>
c0018156:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001815b:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018160:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018164:	01 d0                	add    eax,edx
c0018166:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001816a:	e9 54 fc ff ff       	jmp    c0017dc3 <scanMADT()+0xd1>
c001816f:	90                   	nop
c0018170:	eb 01                	jmp    c0018173 <scanMADT()+0x481>
c0018172:	90                   	nop
c0018173:	83 c4 38             	add    esp,0x38
c0018176:	5b                   	pop    ebx
c0018177:	c3                   	ret    

c0018178 <ACPI::ACPI()>:
c0018178:	83 ec 0c             	sub    esp,0xc
c001817b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001817f:	83 ec 08             	sub    esp,0x8
c0018182:	68 81 b3 02 c0       	push   0xc002b381
c0018187:	50                   	push   eax
c0018188:	e8 27 c3 ff ff       	call   c00144b4 <Device::Device(char const*)>
c001818d:	83 c4 10             	add    esp,0x10
c0018190:	ba 50 b5 02 c0       	mov    edx,0xc002b550
c0018195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018199:	89 10                	mov    DWORD PTR [eax],edx
c001819b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001819f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00181a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181aa:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00181b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00181c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c6:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00181cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d1:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00181d8:	e8 15 fb ff ff       	call   c0017cf2 <scanMADT()>
c00181dd:	90                   	nop
c00181de:	83 c4 0c             	add    esp,0xc
c00181e1:	c3                   	ret    

c00181e2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00181e2:	83 ec 2c             	sub    esp,0x2c
c00181e5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00181e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00181ed:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00181f1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00181f5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00181fa:	88 d0                	mov    al,dl
c00181fc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018200:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018205:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001820d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018211:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018217:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001821b:	0f 8d 97 00 00 00    	jge    c00182b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018221:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018225:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018229:	83 c2 2a             	add    edx,0x2a
c001822c:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018230:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018235:	75 78                	jne    c00182af <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018237:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001823b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001823f:	83 c2 2a             	add    edx,0x2a
c0018242:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018246:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001824a:	75 63                	jne    c00182af <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001824c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018251:	74 3a                	je     c001828d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018253:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018257:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001825b:	83 c2 2a             	add    edx,0x2a
c001825e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018262:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018266:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018269:	39 c2                	cmp    edx,eax
c001826b:	74 10                	je     c001827d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001826d:	83 ec 0c             	sub    esp,0xc
c0018270:	68 18 b5 02 c0       	push   0xc002b518
c0018275:	e8 0f 23 00 00       	call   c001a589 <Krnl::panic(char const*)>
c001827a:	83 c4 10             	add    esp,0x10
c001827d:	83 ec 0c             	sub    esp,0xc
c0018280:	68 86 b3 02 c0       	push   0xc002b386
c0018285:	e8 ff 22 00 00       	call   c001a589 <Krnl::panic(char const*)>
c001828a:	83 c4 10             	add    esp,0x10
c001828d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018291:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018295:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018299:	83 c2 2a             	add    edx,0x2a
c001829c:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00182a0:	8b 02                	mov    eax,DWORD PTR [edx]
c00182a2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00182a5:	89 01                	mov    DWORD PTR [ecx],eax
c00182a7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00182aa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00182af:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00182b3:	e9 55 ff ff ff       	jmp    c001820d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00182b8:	90                   	nop
c00182b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182bd:	83 c4 2c             	add    esp,0x2c
c00182c0:	c2 04 00             	ret    0x4
c00182c3:	90                   	nop

c00182c4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00182c4:	83 ec 1c             	sub    esp,0x1c
c00182c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182cb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00182cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00182d3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00182d8:	88 c8                	mov    al,cl
c00182da:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00182de:	88 d0                	mov    al,dl
c00182e0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00182e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182e8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00182ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182f2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00182f5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00182f9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00182fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018301:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018307:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001830b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001830e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018312:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018317:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001831b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018321:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018325:	8d 48 01             	lea    ecx,[eax+0x1]
c0018328:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001832c:	83 c2 2a             	add    edx,0x2a
c001832f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018333:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018337:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001833d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018341:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018344:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018348:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001834c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018350:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018356:	8d 50 01             	lea    edx,[eax+0x1]
c0018359:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001835d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018363:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018367:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001836d:	3d 00 02 00 00       	cmp    eax,0x200
c0018372:	75 10                	jne    c0018384 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018374:	83 ec 0c             	sub    esp,0xc
c0018377:	68 95 b3 02 c0       	push   0xc002b395
c001837c:	e8 08 22 00 00       	call   c001a589 <Krnl::panic(char const*)>
c0018381:	83 c4 10             	add    esp,0x10
c0018384:	90                   	nop
c0018385:	83 c4 1c             	add    esp,0x1c
c0018388:	c3                   	ret    
c0018389:	90                   	nop

c001838a <ACPI::setScreenBrightnessLevel(void*, int)>:
c001838a:	b8 00 00 00 00       	mov    eax,0x0
c001838f:	c3                   	ret    

c0018390 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018390:	83 ec 1c             	sub    esp,0x1c
c0018393:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018397:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001839a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001839e:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00183a3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183a8:	83 ec 08             	sub    esp,0x8
c00183ab:	52                   	push   edx
c00183ac:	50                   	push   eax
c00183ad:	e8 a6 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c00183b2:	83 c4 10             	add    esp,0x10
c00183b5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00183b9:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00183be:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00183c3:	83 ec 04             	sub    esp,0x4
c00183c6:	6a 01                	push   0x1
c00183c8:	52                   	push   edx
c00183c9:	50                   	push   eax
c00183ca:	e8 9f 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c00183cf:	83 c4 10             	add    esp,0x10
c00183d2:	90                   	nop
c00183d3:	83 c4 1c             	add    esp,0x1c
c00183d6:	c3                   	ret    
c00183d7:	90                   	nop

c00183d8 <ACPI::open(int, int, void*)>:
c00183d8:	53                   	push   ebx
c00183d9:	83 ec 28             	sub    esp,0x28
c00183dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183e0:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00183e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183eb:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00183f2:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00183f7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00183fd:	83 e0 04             	and    eax,0x4
c0018400:	84 c0                	test   al,al
c0018402:	74 47                	je     c001844b <ACPI::open(int, int, void*)+0x73>
c0018404:	a1 48 0c 03 c0       	mov    eax,ds:0xc0030c48
c0018409:	83 ec 08             	sub    esp,0x8
c001840c:	68 b2 b3 02 c0       	push   0xc002b3b2
c0018411:	50                   	push   eax
c0018412:	e8 3f f8 ff ff       	call   c0017c56 <findDataTable(unsigned char*, char*)>
c0018417:	83 c4 10             	add    esp,0x10
c001841a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001841e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018423:	74 26                	je     c001844b <ACPI::open(int, int, void*)+0x73>
c0018425:	83 ec 0c             	sub    esp,0xc
c0018428:	68 b7 b3 02 c0       	push   0xc002b3b7
c001842d:	e8 6b aa ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018432:	83 c4 10             	add    esp,0x10
c0018435:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018439:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018440:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018444:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001844b:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018453:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018457:	8a 00                	mov    al,BYTE PTR [eax]
c0018459:	3c 01                	cmp    al,0x1
c001845b:	75 28                	jne    c0018485 <ACPI::open(int, int, void*)+0xad>
c001845d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018461:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018468:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001846c:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018473:	83 ec 0c             	sub    esp,0xc
c0018476:	68 c8 b3 02 c0       	push   0xc002b3c8
c001847b:	e8 1d aa ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018480:	83 c4 10             	add    esp,0x10
c0018483:	eb 25                	jmp    c00184aa <ACPI::open(int, int, void*)+0xd2>
c0018485:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018489:	8a 00                	mov    al,BYTE PTR [eax]
c001848b:	3c 02                	cmp    al,0x2
c001848d:	75 1b                	jne    c00184aa <ACPI::open(int, int, void*)+0xd2>
c001848f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018493:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001849a:	83 ec 0c             	sub    esp,0xc
c001849d:	68 d0 b3 02 c0       	push   0xc002b3d0
c00184a2:	e8 f6 a9 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00184a7:	83 c4 10             	add    esp,0x10
c00184aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ae:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00184b4:	83 f0 01             	xor    eax,0x1
c00184b7:	84 c0                	test   al,al
c00184b9:	74 6a                	je     c0018525 <ACPI::open(int, int, void*)+0x14d>
c00184bb:	83 ec 0c             	sub    esp,0xc
c00184be:	68 d8 b3 02 c0       	push   0xc002b3d8
c00184c3:	e8 d5 a9 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00184c8:	83 c4 10             	add    esp,0x10
c00184cb:	e8 80 7c fe ff       	call   c0000150 <manualPCIProbe>
c00184d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00184d4:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00184d9:	75 28                	jne    c0018503 <ACPI::open(int, int, void*)+0x12b>
c00184db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184df:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ea:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184f1:	83 ec 0c             	sub    esp,0xc
c00184f4:	68 e6 b3 02 c0       	push   0xc002b3e6
c00184f9:	e8 9f a9 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00184fe:	83 c4 10             	add    esp,0x10
c0018501:	eb 22                	jmp    c0018525 <ACPI::open(int, int, void*)+0x14d>
c0018503:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0018508:	75 1b                	jne    c0018525 <ACPI::open(int, int, void*)+0x14d>
c001850a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001850e:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018515:	83 ec 0c             	sub    esp,0xc
c0018518:	68 f0 b3 02 c0       	push   0xc002b3f0
c001851d:	e8 7b a9 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018522:	83 c4 10             	add    esp,0x10
c0018525:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018529:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001852f:	84 c0                	test   al,al
c0018531:	74 13                	je     c0018546 <ACPI::open(int, int, void*)+0x16e>
c0018533:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018537:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001853d:	83 f0 01             	xor    eax,0x1
c0018540:	0f b6 c0             	movzx  eax,al
c0018543:	40                   	inc    eax
c0018544:	eb 05                	jmp    c001854b <ACPI::open(int, int, void*)+0x173>
c0018546:	b8 00 00 00 00       	mov    eax,0x0
c001854b:	83 ec 08             	sub    esp,0x8
c001854e:	50                   	push   eax
c001854f:	68 fa b3 02 c0       	push   0xc002b3fa
c0018554:	e8 44 a9 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018559:	83 c4 10             	add    esp,0x10
c001855c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018560:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018566:	84 c0                	test   al,al
c0018568:	74 67                	je     c00185d1 <ACPI::open(int, int, void*)+0x1f9>
c001856a:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018572:	83 ec 0c             	sub    esp,0xc
c0018575:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018579:	e8 c5 72 ff ff       	call   c000f843 <malloc>
c001857e:	83 c4 10             	add    esp,0x10
c0018581:	89 c3                	mov    ebx,eax
c0018583:	83 ec 0c             	sub    esp,0xc
c0018586:	53                   	push   ebx
c0018587:	e8 dc a2 00 00       	call   c0022868 <PCI::PCI()>
c001858c:	83 c4 10             	add    esp,0x10
c001858f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018593:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018597:	83 ec 08             	sub    esp,0x8
c001859a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001859e:	50                   	push   eax
c001859f:	e8 20 bd ff ff       	call   c00142c4 <Device::addChild(Device*)>
c00185a4:	83 c4 10             	add    esp,0x10
c00185a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00185ad:	83 c0 08             	add    eax,0x8
c00185b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00185b2:	6a 00                	push   0x0
c00185b4:	6a 00                	push   0x0
c00185b6:	6a 00                	push   0x0
c00185b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00185bc:	ff d0                	call   eax
c00185be:	83 c4 10             	add    esp,0x10
c00185c1:	83 ec 0c             	sub    esp,0xc
c00185c4:	68 03 b4 02 c0       	push   0xc002b403
c00185c9:	e8 cf a8 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00185ce:	83 c4 10             	add    esp,0x10
c00185d1:	83 ec 0c             	sub    esp,0xc
c00185d4:	68 0e b4 02 c0       	push   0xc002b40e
c00185d9:	e8 81 46 00 00       	call   c001cc5f <Thr::loadKernelSymbolTable(char const*)>
c00185de:	83 c4 10             	add    esp,0x10
c00185e1:	8b 1d 68 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e368
c00185e7:	83 ec 08             	sub    esp,0x8
c00185ea:	6a 01                	push   0x1
c00185ec:	68 2c b4 02 c0       	push   0xc002b42c
c00185f1:	e8 c6 50 00 00       	call   c001d6bc <Thr::loadDLL(char const*, bool)>
c00185f6:	83 c4 10             	add    esp,0x10
c00185f9:	83 ec 08             	sub    esp,0x8
c00185fc:	53                   	push   ebx
c00185fd:	50                   	push   eax
c00185fe:	e8 ed 52 00 00       	call   c001d8f0 <Thr::executeDLL(unsigned long, void*)>
c0018603:	83 c4 10             	add    esp,0x10
c0018606:	8b 1d 68 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e368
c001860c:	83 ec 08             	sub    esp,0x8
c001860f:	6a 01                	push   0x1
c0018611:	68 49 b4 02 c0       	push   0xc002b449
c0018616:	e8 a1 50 00 00       	call   c001d6bc <Thr::loadDLL(char const*, bool)>
c001861b:	83 c4 10             	add    esp,0x10
c001861e:	83 ec 08             	sub    esp,0x8
c0018621:	53                   	push   ebx
c0018622:	50                   	push   eax
c0018623:	e8 c8 52 00 00       	call   c001d8f0 <Thr::executeDLL(unsigned long, void*)>
c0018628:	83 c4 10             	add    esp,0x10
c001862b:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0018630:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018636:	83 e0 04             	and    eax,0x4
c0018639:	84 c0                	test   al,al
c001863b:	0f 84 d2 00 00 00    	je     c0018713 <ACPI::open(int, int, void*)+0x33b>
c0018641:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018648:	83 ec 0c             	sub    esp,0xc
c001864b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001864f:	e8 ef 71 ff ff       	call   c000f843 <malloc>
c0018654:	83 c4 10             	add    esp,0x10
c0018657:	89 c3                	mov    ebx,eax
c0018659:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001865e:	83 ec 04             	sub    esp,0x4
c0018661:	50                   	push   eax
c0018662:	68 66 b4 02 c0       	push   0xc002b466
c0018667:	53                   	push   ebx
c0018668:	e8 89 ad ff ff       	call   c00133f6 <File::File(char const*, Process*)>
c001866d:	83 c4 10             	add    esp,0x10
c0018670:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018674:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018679:	74 17                	je     c0018692 <ACPI::open(int, int, void*)+0x2ba>
c001867b:	83 ec 0c             	sub    esp,0xc
c001867e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018682:	e8 41 b0 ff ff       	call   c00136c8 <File::exists()>
c0018687:	83 c4 10             	add    esp,0x10
c001868a:	84 c0                	test   al,al
c001868c:	74 04                	je     c0018692 <ACPI::open(int, int, void*)+0x2ba>
c001868e:	b0 01                	mov    al,0x1
c0018690:	eb 02                	jmp    c0018694 <ACPI::open(int, int, void*)+0x2bc>
c0018692:	b0 00                	mov    al,0x0
c0018694:	84 c0                	test   al,al
c0018696:	74 22                	je     c00186ba <ACPI::open(int, int, void*)+0x2e2>
c0018698:	83 ec 08             	sub    esp,0x8
c001869b:	6a 01                	push   0x1
c001869d:	68 66 b4 02 c0       	push   0xc002b466
c00186a2:	e8 15 50 00 00       	call   c001d6bc <Thr::loadDLL(char const*, bool)>
c00186a7:	83 c4 10             	add    esp,0x10
c00186aa:	83 ec 08             	sub    esp,0x8
c00186ad:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00186b1:	50                   	push   eax
c00186b2:	e8 39 52 00 00       	call   c001d8f0 <Thr::executeDLL(unsigned long, void*)>
c00186b7:	83 c4 10             	add    esp,0x10
c00186ba:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186bf:	74 1e                	je     c00186df <ACPI::open(int, int, void*)+0x307>
c00186c1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00186c6:	74 17                	je     c00186df <ACPI::open(int, int, void*)+0x307>
c00186c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00186ce:	83 c0 08             	add    eax,0x8
c00186d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00186d3:	83 ec 0c             	sub    esp,0xc
c00186d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186da:	ff d0                	call   eax
c00186dc:	83 c4 10             	add    esp,0x10
c00186df:	a1 48 0c 03 c0       	mov    eax,ds:0xc0030c48
c00186e4:	83 ec 08             	sub    esp,0x8
c00186e7:	68 83 b4 02 c0       	push   0xc002b483
c00186ec:	50                   	push   eax
c00186ed:	e8 64 f5 ff ff       	call   c0017c56 <findDataTable(unsigned char*, char*)>
c00186f2:	83 c4 10             	add    esp,0x10
c00186f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00186f9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00186fe:	74 13                	je     c0018713 <ACPI::open(int, int, void*)+0x33b>
c0018700:	83 ec 08             	sub    esp,0x8
c0018703:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018707:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001870b:	e8 80 fc ff ff       	call   c0018390 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018710:	83 c4 10             	add    esp,0x10
c0018713:	b8 00 00 00 00       	mov    eax,0x0
c0018718:	83 c4 28             	add    esp,0x28
c001871b:	5b                   	pop    ebx
c001871c:	c3                   	ret    
c001871d:	90                   	nop

c001871e <ACPI::sleep()>:
c001871e:	83 ec 0c             	sub    esp,0xc
c0018721:	a1 20 0a 03 c0       	mov    eax,ds:0xc0030a20
c0018726:	85 c0                	test   eax,eax
c0018728:	74 07                	je     c0018731 <ACPI::sleep()+0x13>
c001872a:	a1 20 0a 03 c0       	mov    eax,ds:0xc0030a20
c001872f:	ff d0                	call   eax
c0018731:	90                   	nop
c0018732:	83 c4 0c             	add    esp,0xc
c0018735:	c3                   	ret    

c0018736 <CPU::close(int, int, void*)>:
c0018736:	31 c0                	xor    eax,eax
c0018738:	c3                   	ret    
c0018739:	90                   	nop

c001873a <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001873a:	55                   	push   ebp
c001873b:	57                   	push   edi
c001873c:	56                   	push   esi
c001873d:	53                   	push   ebx
c001873e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018742:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018746:	89 ce                	mov    esi,ecx
c0018748:	89 d5                	mov    ebp,edx
c001874a:	80 f9 04             	cmp    cl,0x4
c001874d:	75 28                	jne    c0018777 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001874f:	8d 42 f9             	lea    eax,[edx-0x7]
c0018752:	3c 03                	cmp    al,0x3
c0018754:	0f 86 63 01 00 00    	jbe    c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001875a:	80 fa 03             	cmp    dl,0x3
c001875d:	0f 84 5a 01 00 00    	je     c00188bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018763:	8d 7a f2             	lea    edi,[edx-0xe]
c0018766:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c001876b:	89 fb                	mov    ebx,edi
c001876d:	80 fb 01             	cmp    bl,0x1
c0018770:	77 4e                	ja     c00187c0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018772:	e9 52 01 00 00       	jmp    c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018777:	80 f9 05             	cmp    cl,0x5
c001877a:	75 4d                	jne    c00187c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001877c:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018781:	80 fa 03             	cmp    dl,0x3
c0018784:	0f 86 3f 01 00 00    	jbe    c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001878a:	8d 7a fa             	lea    edi,[edx-0x6]
c001878d:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018792:	89 fb                	mov    ebx,edi
c0018794:	80 fb 01             	cmp    bl,0x1
c0018797:	0f 86 2c 01 00 00    	jbe    c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001879d:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c00187a2:	80 fa 08             	cmp    dl,0x8
c00187a5:	0f 84 1e 01 00 00    	je     c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187ab:	89 d7                	mov    edi,edx
c00187ad:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c00187b2:	83 e7 fb             	and    edi,0xfffffffb
c00187b5:	89 fb                	mov    ebx,edi
c00187b7:	80 fb 09             	cmp    bl,0x9
c00187ba:	0f 84 09 01 00 00    	je     c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187c0:	31 c0                	xor    eax,eax
c00187c2:	89 eb                	mov    ebx,ebp
c00187c4:	0f b6 fb             	movzx  edi,bl
c00187c7:	eb 30                	jmp    c00187f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00187c9:	31 c0                	xor    eax,eax
c00187cb:	80 f9 06             	cmp    cl,0x6
c00187ce:	75 f2                	jne    c00187c2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187d0:	80 fa 0a             	cmp    dl,0xa
c00187d3:	77 ed                	ja     c00187c2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187d5:	bf de 05 00 00       	mov    edi,0x5de
c00187da:	0f a3 d7             	bt     edi,edx
c00187dd:	73 e3                	jae    c00187c2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00187df:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c00187e4:	e9 e0 00 00 00       	jmp    c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187e9:	39 c7                	cmp    edi,eax
c00187eb:	0f 84 d3 00 00 00    	je     c00188c4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00187f1:	40                   	inc    eax
c00187f2:	3d d0 00 00 00       	cmp    eax,0xd0
c00187f7:	74 09                	je     c0018802 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00187f9:	89 f3                	mov    ebx,esi
c00187fb:	80 fb 0f             	cmp    bl,0xf
c00187fe:	75 f1                	jne    c00187f1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018800:	eb e7                	jmp    c00187e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018802:	80 f9 10             	cmp    cl,0x10
c0018805:	75 14                	jne    c001881b <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018807:	8d 42 fc             	lea    eax,[edx-0x4]
c001880a:	83 e0 fb             	and    eax,0xfffffffb
c001880d:	3c 02                	cmp    al,0x2
c001880f:	76 34                	jbe    c0018845 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018811:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018816:	80 fa 02             	cmp    dl,0x2
c0018819:	eb 24                	jmp    c001883f <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001881b:	80 f9 11             	cmp    cl,0x11
c001881e:	75 13                	jne    c0018833 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018820:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018825:	80 fa 03             	cmp    dl,0x3
c0018828:	0f 85 9b 00 00 00    	jne    c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001882e:	e9 91 00 00 00       	jmp    c00188c4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018833:	80 f9 12             	cmp    cl,0x12
c0018836:	75 14                	jne    c001884c <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018838:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c001883d:	fe ca                	dec    dl
c001883f:	0f 85 84 00 00 00    	jne    c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018845:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c001884a:	eb 7d                	jmp    c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001884c:	80 f9 14             	cmp    cl,0x14
c001884f:	75 12                	jne    c0018863 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018851:	4a                   	dec    edx
c0018852:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018857:	80 fa 01             	cmp    dl,0x1
c001885a:	77 6d                	ja     c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001885c:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018861:	eb 66                	jmp    c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018863:	80 f9 15             	cmp    cl,0x15
c0018866:	75 31                	jne    c0018899 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018868:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c001886d:	80 fa 01             	cmp    dl,0x1
c0018870:	74 57                	je     c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018872:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018877:	80 fa 13             	cmp    dl,0x13
c001887a:	76 0c                	jbe    c0018888 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001887c:	80 fa 30             	cmp    dl,0x30
c001887f:	75 48                	jne    c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018881:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018886:	eb 41                	jmp    c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018888:	b9 04 00 09 00       	mov    ecx,0x90004
c001888d:	0f a3 d1             	bt     ecx,edx
c0018890:	73 37                	jae    c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018892:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018897:	eb 30                	jmp    c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018899:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c001889e:	80 f9 16             	cmp    cl,0x16
c00188a1:	75 26                	jne    c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188a3:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c00188a8:	84 d2                	test   dl,dl
c00188aa:	74 1d                	je     c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ac:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c00188b1:	80 fa 30             	cmp    dl,0x30
c00188b4:	75 13                	jne    c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b6:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c00188bb:	eb 0c                	jmp    c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188bd:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c00188c2:	eb 05                	jmp    c00188c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c4:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c00188c9:	5b                   	pop    ebx
c00188ca:	5e                   	pop    esi
c00188cb:	5f                   	pop    edi
c00188cc:	5d                   	pop    ebp
c00188cd:	c3                   	ret    

c00188ce <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00188ce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00188d6:	80 f9 04             	cmp    cl,0x4
c00188d9:	75 6b                	jne    c0018946 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00188db:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c00188e0:	80 fa 01             	cmp    dl,0x1
c00188e3:	0f 86 92 02 00 00    	jbe    c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188e9:	b8 f0 d5 02 c0       	mov    eax,0xc002d5f0
c00188ee:	80 fa 02             	cmp    dl,0x2
c00188f1:	0f 84 84 02 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f7:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c00188fc:	80 fa 03             	cmp    dl,0x3
c00188ff:	0f 84 76 02 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018905:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c001890a:	80 fa 04             	cmp    dl,0x4
c001890d:	0f 84 68 02 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018913:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c0018918:	80 fa 05             	cmp    dl,0x5
c001891b:	0f 84 5a 02 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018921:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0018926:	80 fa 07             	cmp    dl,0x7
c0018929:	0f 84 4c 02 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001892f:	83 ea 08             	sub    edx,0x8
c0018932:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018937:	80 fa 01             	cmp    dl,0x1
c001893a:	0f 87 3b 02 00 00    	ja     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018940:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c0018945:	c3                   	ret    
c0018946:	80 f9 05             	cmp    cl,0x5
c0018949:	75 45                	jne    c0018990 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001894b:	8d 4a ff             	lea    ecx,[edx-0x1]
c001894e:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c0018953:	80 f9 02             	cmp    cl,0x2
c0018956:	0f 86 1f 02 00 00    	jbe    c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001895c:	80 fa 04             	cmp    dl,0x4
c001895f:	0f 84 f3 01 00 00    	je     c0018b58 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018965:	80 fa 07             	cmp    dl,0x7
c0018968:	0f 84 0d 02 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001896e:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c0018973:	80 fa 08             	cmp    dl,0x8
c0018976:	0f 84 ff 01 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001897c:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018981:	80 fa 09             	cmp    dl,0x9
c0018984:	0f 85 f1 01 00 00    	jne    c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001898a:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c001898f:	c3                   	ret    
c0018990:	80 f9 06             	cmp    cl,0x6
c0018993:	0f 85 85 01 00 00    	jne    c0018b1e <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018999:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c001899e:	80 fa 01             	cmp    dl,0x1
c00189a1:	0f 84 d4 01 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a7:	8d 42 fb             	lea    eax,[edx-0x5]
c00189aa:	3c 01                	cmp    al,0x1
c00189ac:	0f 86 ac 01 00 00    	jbe    c0018b5e <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189b2:	80 fa 03             	cmp    dl,0x3
c00189b5:	0f 84 a3 01 00 00    	je     c0018b5e <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00189bb:	8d 4a f9             	lea    ecx,[edx-0x7]
c00189be:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c00189c3:	80 f9 01             	cmp    cl,0x1
c00189c6:	0f 86 af 01 00 00    	jbe    c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189cc:	80 fa 09             	cmp    dl,0x9
c00189cf:	0f 84 8f 01 00 00    	je     c0018b64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00189d5:	8d 4a f6             	lea    ecx,[edx-0xa]
c00189d8:	80 f9 01             	cmp    cl,0x1
c00189db:	0f 86 9a 01 00 00    	jbe    c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e1:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c00189e6:	80 fa 0d             	cmp    dl,0xd
c00189e9:	0f 84 8c 01 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ef:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c00189f4:	80 fa 0e             	cmp    dl,0xe
c00189f7:	0f 84 7e 01 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fd:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018a02:	80 fa 0f             	cmp    dl,0xf
c0018a05:	0f 84 70 01 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0b:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0018a10:	80 fa 15             	cmp    dl,0x15
c0018a13:	0f 84 62 01 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a19:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018a1c:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018a21:	80 f9 01             	cmp    cl,0x1
c0018a24:	0f 86 51 01 00 00    	jbe    c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2a:	80 fa 1a             	cmp    dl,0x1a
c0018a2d:	0f 84 37 01 00 00    	je     c0018b6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018a33:	80 fa 1c             	cmp    dl,0x1c
c0018a36:	0f 84 34 01 00 00    	je     c0018b70 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018a3c:	80 fa 1d             	cmp    dl,0x1d
c0018a3f:	0f 84 36 01 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a45:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018a4a:	80 fa 25             	cmp    dl,0x25
c0018a4d:	0f 84 28 01 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a53:	8d 4a da             	lea    ecx,[edx-0x26]
c0018a56:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018a5b:	80 f9 01             	cmp    cl,0x1
c0018a5e:	0f 86 17 01 00 00    	jbe    c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a64:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018a69:	80 fa 2a             	cmp    dl,0x2a
c0018a6c:	0f 84 09 01 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a72:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018a77:	80 fa 2c             	cmp    dl,0x2c
c0018a7a:	0f 84 fb 00 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a80:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018a85:	80 fa 2d             	cmp    dl,0x2d
c0018a88:	0f 84 ed 00 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a8e:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c0018a93:	80 fa 2e             	cmp    dl,0x2e
c0018a96:	0f 84 df 00 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9c:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018aa1:	80 fa 2f             	cmp    dl,0x2f
c0018aa4:	0f 84 d1 00 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aaa:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018aad:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018ab2:	80 f9 01             	cmp    cl,0x1
c0018ab5:	0f 86 c0 00 00 00    	jbe    c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018abb:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018ac0:	80 fa 37             	cmp    dl,0x37
c0018ac3:	0f 84 b2 00 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac9:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018ace:	80 fa 3a             	cmp    dl,0x3a
c0018ad1:	0f 84 a4 00 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ad7:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018adc:	80 fa 3c             	cmp    dl,0x3c
c0018adf:	0f 84 96 00 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae5:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018aea:	80 fa 3d             	cmp    dl,0x3d
c0018aed:	0f 84 88 00 00 00    	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af3:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018af8:	80 fa 3e             	cmp    dl,0x3e
c0018afb:	74 7e                	je     c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018afd:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b00:	3c 01                	cmp    al,0x1
c0018b02:	76 72                	jbe    c0018b76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b04:	80 fa 3f             	cmp    dl,0x3f
c0018b07:	74 6d                	je     c0018b76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b09:	80 fa 4a             	cmp    dl,0x4a
c0018b0c:	74 0a                	je     c0018b18 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018b0e:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018b13:	80 fa 4d             	cmp    dl,0x4d
c0018b16:	75 63                	jne    c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b18:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c0018b1d:	c3                   	ret    
c0018b1e:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018b23:	80 f9 0b             	cmp    cl,0xb
c0018b26:	75 0a                	jne    c0018b32 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018b28:	fe ca                	dec    dl
c0018b2a:	75 4f                	jne    c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2c:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c0018b31:	c3                   	ret    
c0018b32:	80 f9 0f             	cmp    cl,0xf
c0018b35:	75 44                	jne    c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b37:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c0018b3c:	80 fa 02             	cmp    dl,0x2
c0018b3f:	76 3a                	jbe    c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b41:	8d 42 fd             	lea    eax,[edx-0x3]
c0018b44:	3c 01                	cmp    al,0x1
c0018b46:	76 0a                	jbe    c0018b52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018b48:	b8 66 b8 02 c0       	mov    eax,0xc002b866
c0018b4d:	80 fa 06             	cmp    dl,0x6
c0018b50:	75 29                	jne    c0018b7b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b52:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c0018b57:	c3                   	ret    
c0018b58:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c0018b5d:	c3                   	ret    
c0018b5e:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c0018b63:	c3                   	ret    
c0018b64:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0018b69:	c3                   	ret    
c0018b6a:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c0018b6f:	c3                   	ret    
c0018b70:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018b75:	c3                   	ret    
c0018b76:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018b7b:	c3                   	ret    

c0018b7c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018b7c:	60                   	pusha  
c0018b7d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b89:	9c                   	pushf  
c0018b8a:	fa                   	cli    
c0018b8b:	0f 09                	wbinvd 
c0018b8d:	0f 30                	wrmsr  
c0018b8f:	9d                   	popf   
c0018b90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018b94:	89 02                	mov    DWORD PTR [edx],eax
c0018b96:	61                   	popa   
c0018b97:	c3                   	ret    

c0018b98 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018b98:	60                   	pusha  
c0018b99:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b9d:	9c                   	pushf  
c0018b9e:	fa                   	cli    
c0018b9f:	0f 09                	wbinvd 
c0018ba1:	31 c0                	xor    eax,eax
c0018ba3:	31 d2                	xor    edx,edx
c0018ba5:	0f 32                	rdmsr  
c0018ba7:	9d                   	popf   
c0018ba8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018bac:	89 02                	mov    DWORD PTR [edx],eax
c0018bae:	61                   	popa   
c0018baf:	c3                   	ret    

c0018bb0 <CPU::AMD_K6_writeback(int, int, int)>:
c0018bb0:	56                   	push   esi
c0018bb1:	53                   	push   ebx
c0018bb2:	83 ec 10             	sub    esp,0x10
c0018bb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bb9:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018bbe:	75 5d                	jne    c0018c1d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bc0:	83 f8 08             	cmp    eax,0x8
c0018bc3:	75 09                	jne    c0018bce <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018bc5:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018bca:	7e 13                	jle    c0018bdf <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018bcc:	eb 30                	jmp    c0018bfe <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018bce:	83 f8 06             	cmp    eax,0x6
c0018bd1:	7c 4a                	jl     c0018c1d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bd3:	83 f8 07             	cmp    eax,0x7
c0018bd6:	7e 07                	jle    c0018bdf <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018bd8:	83 f8 09             	cmp    eax,0x9
c0018bdb:	74 21                	je     c0018bfe <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018bdd:	eb 3e                	jmp    c0018c1d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018bdf:	89 e6                	mov    esi,esp
c0018be1:	8b 1d a8 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3a8
c0018be7:	56                   	push   esi
c0018be8:	c1 eb 15             	shr    ebx,0x15
c0018beb:	68 82 00 00 c0       	push   0xc0000082
c0018bf0:	83 e3 7e             	and    ebx,0x7e
c0018bf3:	e8 a0 ff ff ff       	call   c0018b98 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018bf8:	56                   	push   esi
c0018bf9:	6a 00                	push   0x0
c0018bfb:	53                   	push   ebx
c0018bfc:	eb 12                	jmp    c0018c10 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018bfe:	89 e3                	mov    ebx,esp
c0018c00:	53                   	push   ebx
c0018c01:	68 82 00 00 c0       	push   0xc0000082
c0018c06:	e8 8d ff ff ff       	call   c0018b98 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c0b:	53                   	push   ebx
c0018c0c:	6a 00                	push   0x0
c0018c0e:	6a 00                	push   0x0
c0018c10:	68 82 00 00 c0       	push   0xc0000082
c0018c15:	e8 62 ff ff ff       	call   c0018b7c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018c1a:	83 c4 18             	add    esp,0x18
c0018c1d:	83 c4 10             	add    esp,0x10
c0018c20:	5b                   	pop    ebx
c0018c21:	5e                   	pop    esi
c0018c22:	c3                   	ret    
c0018c23:	90                   	nop

c0018c24 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c24:	55                   	push   ebp
c0018c25:	57                   	push   edi
c0018c26:	56                   	push   esi
c0018c27:	53                   	push   ebx
c0018c28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c2c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c30:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c34:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c38:	39 05 80 d8 02 c0    	cmp    DWORD PTR ds:0xc002d880,eax
c0018c3e:	75 23                	jne    c0018c63 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c40:	a1 ac 0e 03 c0       	mov    eax,ds:0xc0030eac
c0018c45:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018c49:	89 06                	mov    DWORD PTR [esi],eax
c0018c4b:	a1 a8 0e 03 c0       	mov    eax,ds:0xc0030ea8
c0018c50:	89 07                	mov    DWORD PTR [edi],eax
c0018c52:	a1 a4 0e 03 c0       	mov    eax,ds:0xc0030ea4
c0018c57:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018c5a:	a1 a0 0e 03 c0       	mov    eax,ds:0xc0030ea0
c0018c5f:	89 02                	mov    DWORD PTR [edx],eax
c0018c61:	eb 3f                	jmp    c0018ca2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018c63:	31 c9                	xor    ecx,ecx
c0018c65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c69:	0f a2                	cpuid  
c0018c6b:	89 06                	mov    DWORD PTR [esi],eax
c0018c6d:	89 1f                	mov    DWORD PTR [edi],ebx
c0018c6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c73:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018c76:	89 10                	mov    DWORD PTR [eax],edx
c0018c78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c7c:	a3 80 d8 02 c0       	mov    ds:0xc002d880,eax
c0018c81:	8b 06                	mov    eax,DWORD PTR [esi]
c0018c83:	a3 ac 0e 03 c0       	mov    ds:0xc0030eac,eax
c0018c88:	8b 07                	mov    eax,DWORD PTR [edi]
c0018c8a:	a3 a8 0e 03 c0       	mov    ds:0xc0030ea8,eax
c0018c8f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c92:	a3 a4 0e 03 c0       	mov    ds:0xc0030ea4,eax
c0018c97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c9d:	a3 a0 0e 03 c0       	mov    ds:0xc0030ea0,eax
c0018ca2:	5b                   	pop    ebx
c0018ca3:	5e                   	pop    esi
c0018ca4:	5f                   	pop    edi
c0018ca5:	5d                   	pop    ebp
c0018ca6:	c3                   	ret    
c0018ca7:	90                   	nop

c0018ca8 <CPU::cpuidCheckEDX(unsigned int)>:
c0018ca8:	83 ec 10             	sub    esp,0x10
c0018cab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018caf:	50                   	push   eax
c0018cb0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cb4:	50                   	push   eax
c0018cb5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cb9:	50                   	push   eax
c0018cba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cbe:	50                   	push   eax
c0018cbf:	6a 01                	push   0x1
c0018cc1:	e8 5e ff ff ff       	call   c0018c24 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cc6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cca:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018cce:	0f 95 c0             	setne  al
c0018cd1:	83 c4 24             	add    esp,0x24
c0018cd4:	c3                   	ret    
c0018cd5:	90                   	nop

c0018cd6 <CPU::cpuidCheckECX(unsigned int)>:
c0018cd6:	83 ec 10             	sub    esp,0x10
c0018cd9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cdd:	50                   	push   eax
c0018cde:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ce2:	50                   	push   eax
c0018ce3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ce7:	50                   	push   eax
c0018ce8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018cec:	50                   	push   eax
c0018ced:	6a 01                	push   0x1
c0018cef:	e8 30 ff ff ff       	call   c0018c24 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cf4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cf8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018cfc:	0f 95 c0             	setne  al
c0018cff:	83 c4 24             	add    esp,0x24
c0018d02:	c3                   	ret    
c0018d03:	90                   	nop

c0018d04 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d04:	83 ec 10             	sub    esp,0x10
c0018d07:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d0b:	50                   	push   eax
c0018d0c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d10:	50                   	push   eax
c0018d11:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d15:	50                   	push   eax
c0018d16:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d1a:	50                   	push   eax
c0018d1b:	6a 07                	push   0x7
c0018d1d:	e8 02 ff ff ff       	call   c0018c24 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d26:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018d2a:	0f 95 c0             	setne  al
c0018d2d:	83 c4 24             	add    esp,0x24
c0018d30:	c3                   	ret    
c0018d31:	90                   	nop

c0018d32 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018d32:	83 ec 10             	sub    esp,0x10
c0018d35:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d39:	50                   	push   eax
c0018d3a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d3e:	50                   	push   eax
c0018d3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d43:	50                   	push   eax
c0018d44:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d48:	50                   	push   eax
c0018d49:	6a 07                	push   0x7
c0018d4b:	e8 d4 fe ff ff       	call   c0018c24 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d54:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d58:	0f 95 c0             	setne  al
c0018d5b:	83 c4 24             	add    esp,0x24
c0018d5e:	c3                   	ret    
c0018d5f:	90                   	nop

c0018d60 <CPU::CPU()>:
c0018d60:	83 ec 0c             	sub    esp,0xc
c0018d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d67:	83 ec 08             	sub    esp,0x8
c0018d6a:	68 66 b8 02 c0       	push   0xc002b866
c0018d6f:	50                   	push   eax
c0018d70:	e8 3f b7 ff ff       	call   c00144b4 <Device::Device(char const*)>
c0018d75:	83 c4 10             	add    esp,0x10
c0018d78:	ba 40 b9 02 c0       	mov    edx,0xc002b940
c0018d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d81:	89 10                	mov    DWORD PTR [eax],edx
c0018d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d87:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018d91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d95:	05 78 01 00 00       	add    eax,0x178
c0018d9a:	83 ec 0c             	sub    esp,0xc
c0018d9d:	50                   	push   eax
c0018d9e:	e8 b5 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018da3:	83 c4 10             	add    esp,0x10
c0018da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018daa:	05 7c 09 00 00       	add    eax,0x97c
c0018daf:	83 ec 0c             	sub    esp,0xc
c0018db2:	50                   	push   eax
c0018db3:	e8 02 65 ff ff       	call   c000f2ba <IDT::IDT()>
c0018db8:	83 c4 10             	add    esp,0x10
c0018dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dbf:	05 7c 11 00 00       	add    eax,0x117c
c0018dc4:	83 ec 0c             	sub    esp,0xc
c0018dc7:	50                   	push   eax
c0018dc8:	e8 a7 86 ff ff       	call   c0011474 <TSS::TSS()>
c0018dcd:	83 c4 10             	add    esp,0x10
c0018dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dd4:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018ddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ddf:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018de9:	90                   	nop
c0018dea:	83 c4 0c             	add    esp,0xc
c0018ded:	c3                   	ret    

c0018dee <CPU::displayFeatures()>:
c0018dee:	53                   	push   ebx
c0018def:	83 ec 10             	sub    esp,0x10
c0018df2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018df6:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018dfc:	68 74 b5 02 c0       	push   0xc002b574
c0018e01:	e8 97 a0 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018e06:	59                   	pop    ecx
c0018e07:	58                   	pop    eax
c0018e08:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018e0e:	50                   	push   eax
c0018e0f:	68 85 b5 02 c0       	push   0xc002b585
c0018e14:	e8 84 a0 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018e19:	58                   	pop    eax
c0018e1a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e20:	5a                   	pop    edx
c0018e21:	c1 e8 0e             	shr    eax,0xe
c0018e24:	0f b6 c0             	movzx  eax,al
c0018e27:	50                   	push   eax
c0018e28:	68 96 b5 02 c0       	push   0xc002b596
c0018e2d:	e8 6b a0 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018e32:	59                   	pop    ecx
c0018e33:	58                   	pop    eax
c0018e34:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e3a:	66 c1 e8 06          	shr    ax,0x6
c0018e3e:	0f b6 c0             	movzx  eax,al
c0018e41:	50                   	push   eax
c0018e42:	68 a7 b5 02 c0       	push   0xc002b5a7
c0018e47:	e8 51 a0 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018e4c:	c7 04 24 54 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba54
c0018e53:	e8 45 a0 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018e58:	83 c4 10             	add    esp,0x10
c0018e5b:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c0018e60:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018e67:	74 05                	je     c0018e6e <CPU::displayFeatures()+0x80>
c0018e69:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c0018e6e:	52                   	push   edx
c0018e6f:	52                   	push   edx
c0018e70:	50                   	push   eax
c0018e71:	68 b8 b5 02 c0       	push   0xc002b5b8
c0018e76:	e8 22 a0 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018e7b:	83 c4 10             	add    esp,0x10
c0018e7e:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c0018e83:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018e8a:	78 05                	js     c0018e91 <CPU::displayFeatures()+0xa3>
c0018e8c:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c0018e91:	51                   	push   ecx
c0018e92:	51                   	push   ecx
c0018e93:	50                   	push   eax
c0018e94:	68 cf b5 02 c0       	push   0xc002b5cf
c0018e99:	e8 ff 9f ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018e9e:	83 c4 10             	add    esp,0x10
c0018ea1:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c0018ea6:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018ead:	75 05                	jne    c0018eb4 <CPU::displayFeatures()+0xc6>
c0018eaf:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c0018eb4:	52                   	push   edx
c0018eb5:	52                   	push   edx
c0018eb6:	50                   	push   eax
c0018eb7:	68 e6 b5 02 c0       	push   0xc002b5e6
c0018ebc:	e8 dc 9f ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018ec1:	83 c4 10             	add    esp,0x10
c0018ec4:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c0018ec9:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018ed0:	75 05                	jne    c0018ed7 <CPU::displayFeatures()+0xe9>
c0018ed2:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c0018ed7:	51                   	push   ecx
c0018ed8:	51                   	push   ecx
c0018ed9:	50                   	push   eax
c0018eda:	68 fd b5 02 c0       	push   0xc002b5fd
c0018edf:	e8 b9 9f ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018ee4:	83 c4 10             	add    esp,0x10
c0018ee7:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c0018eec:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018ef3:	75 05                	jne    c0018efa <CPU::displayFeatures()+0x10c>
c0018ef5:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c0018efa:	52                   	push   edx
c0018efb:	52                   	push   edx
c0018efc:	50                   	push   eax
c0018efd:	68 14 b6 02 c0       	push   0xc002b614
c0018f02:	e8 96 9f ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018f07:	83 c4 10             	add    esp,0x10
c0018f0a:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c0018f0f:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018f16:	75 05                	jne    c0018f1d <CPU::displayFeatures()+0x12f>
c0018f18:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c0018f1d:	51                   	push   ecx
c0018f1e:	51                   	push   ecx
c0018f1f:	50                   	push   eax
c0018f20:	68 2b b6 02 c0       	push   0xc002b62b
c0018f25:	e8 73 9f ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018f2a:	83 c4 10             	add    esp,0x10
c0018f2d:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c0018f32:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018f39:	75 05                	jne    c0018f40 <CPU::displayFeatures()+0x152>
c0018f3b:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c0018f40:	52                   	push   edx
c0018f41:	52                   	push   edx
c0018f42:	50                   	push   eax
c0018f43:	68 42 b6 02 c0       	push   0xc002b642
c0018f48:	e8 50 9f ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018f4d:	83 c4 10             	add    esp,0x10
c0018f50:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c0018f55:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018f5c:	75 05                	jne    c0018f63 <CPU::displayFeatures()+0x175>
c0018f5e:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c0018f63:	51                   	push   ecx
c0018f64:	51                   	push   ecx
c0018f65:	50                   	push   eax
c0018f66:	68 59 b6 02 c0       	push   0xc002b659
c0018f6b:	e8 2d 9f ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018f70:	83 c4 10             	add    esp,0x10
c0018f73:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c0018f78:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018f7f:	75 05                	jne    c0018f86 <CPU::displayFeatures()+0x198>
c0018f81:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c0018f86:	52                   	push   edx
c0018f87:	52                   	push   edx
c0018f88:	50                   	push   eax
c0018f89:	68 70 b6 02 c0       	push   0xc002b670
c0018f8e:	e8 0a 9f ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018f93:	83 c4 10             	add    esp,0x10
c0018f96:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c0018f9b:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018fa2:	75 05                	jne    c0018fa9 <CPU::displayFeatures()+0x1bb>
c0018fa4:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c0018fa9:	51                   	push   ecx
c0018faa:	51                   	push   ecx
c0018fab:	50                   	push   eax
c0018fac:	68 87 b6 02 c0       	push   0xc002b687
c0018fb1:	e8 e7 9e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018fb6:	83 c4 10             	add    esp,0x10
c0018fb9:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c0018fbe:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018fc5:	75 05                	jne    c0018fcc <CPU::displayFeatures()+0x1de>
c0018fc7:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c0018fcc:	52                   	push   edx
c0018fcd:	52                   	push   edx
c0018fce:	50                   	push   eax
c0018fcf:	68 9e b6 02 c0       	push   0xc002b69e
c0018fd4:	e8 c4 9e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018fd9:	83 c4 10             	add    esp,0x10
c0018fdc:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c0018fe1:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018fe8:	75 05                	jne    c0018fef <CPU::displayFeatures()+0x201>
c0018fea:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c0018fef:	51                   	push   ecx
c0018ff0:	51                   	push   ecx
c0018ff1:	50                   	push   eax
c0018ff2:	68 b5 b6 02 c0       	push   0xc002b6b5
c0018ff7:	e8 a1 9e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0018ffc:	83 c4 10             	add    esp,0x10
c0018fff:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c0019004:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001900b:	75 05                	jne    c0019012 <CPU::displayFeatures()+0x224>
c001900d:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c0019012:	52                   	push   edx
c0019013:	52                   	push   edx
c0019014:	50                   	push   eax
c0019015:	68 cc b6 02 c0       	push   0xc002b6cc
c001901a:	e8 7e 9e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001901f:	83 c4 10             	add    esp,0x10
c0019022:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c0019027:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001902e:	78 05                	js     c0019035 <CPU::displayFeatures()+0x247>
c0019030:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c0019035:	51                   	push   ecx
c0019036:	51                   	push   ecx
c0019037:	50                   	push   eax
c0019038:	68 e3 b6 02 c0       	push   0xc002b6e3
c001903d:	e8 5b 9e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0019042:	83 c4 10             	add    esp,0x10
c0019045:	b8 92 9f 02 c0       	mov    eax,0xc0029f92
c001904a:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019051:	75 05                	jne    c0019058 <CPU::displayFeatures()+0x26a>
c0019053:	b8 96 9f 02 c0       	mov    eax,0xc0029f96
c0019058:	52                   	push   edx
c0019059:	52                   	push   edx
c001905a:	50                   	push   eax
c001905b:	68 fa b6 02 c0       	push   0xc002b6fa
c0019060:	e8 38 9e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0019065:	83 c4 18             	add    esp,0x18
c0019068:	5b                   	pop    ebx
c0019069:	c3                   	ret    

c001906a <CPU::detectFeatures()>:
c001906a:	55                   	push   ebp
c001906b:	57                   	push   edi
c001906c:	56                   	push   esi
c001906d:	53                   	push   ebx
c001906e:	83 ec 50             	sub    esp,0x50
c0019071:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019075:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001907f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019086:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001908c:	6a 0d                	push   0xd
c001908e:	6a 00                	push   0x0
c0019090:	57                   	push   edi
c0019091:	e8 e2 76 fe ff       	call   c0000778 <memset>
c0019096:	83 c4 10             	add    esp,0x10
c0019099:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c001909e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00190a5:	0f 84 20 09 00 00    	je     c00199cb <CPU::detectFeatures()+0x961>
c00190ab:	83 ec 0c             	sub    esp,0xc
c00190ae:	6a 10                	push   0x10
c00190b0:	e8 f3 fb ff ff       	call   c0018ca8 <CPU::cpuidCheckEDX(unsigned int)>
c00190b5:	83 e0 01             	and    eax,0x1
c00190b8:	8d 14 00             	lea    edx,[eax+eax*1]
c00190bb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190c1:	83 e0 fd             	and    eax,0xfffffffd
c00190c4:	09 d0                	or     eax,edx
c00190c6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190cc:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00190d3:	e8 d0 fb ff ff       	call   c0018ca8 <CPU::cpuidCheckEDX(unsigned int)>
c00190d8:	83 e0 01             	and    eax,0x1
c00190db:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00190e2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190e8:	83 e0 fb             	and    eax,0xfffffffb
c00190eb:	09 d0                	or     eax,edx
c00190ed:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190f3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00190fa:	e8 a9 fb ff ff       	call   c0018ca8 <CPU::cpuidCheckEDX(unsigned int)>
c00190ff:	83 e0 01             	and    eax,0x1
c0019102:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019109:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001910f:	83 e0 f7             	and    eax,0xfffffff7
c0019112:	09 d0                	or     eax,edx
c0019114:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001911a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019121:	e8 82 fb ff ff       	call   c0018ca8 <CPU::cpuidCheckEDX(unsigned int)>
c0019126:	83 e0 01             	and    eax,0x1
c0019129:	c1 e0 04             	shl    eax,0x4
c001912c:	88 c2                	mov    dl,al
c001912e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019134:	83 e0 ef             	and    eax,0xffffffef
c0019137:	09 d0                	or     eax,edx
c0019139:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001913f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019146:	e8 5d fb ff ff       	call   c0018ca8 <CPU::cpuidCheckEDX(unsigned int)>
c001914b:	83 e0 01             	and    eax,0x1
c001914e:	c1 e0 05             	shl    eax,0x5
c0019151:	88 c2                	mov    dl,al
c0019153:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019159:	83 e0 df             	and    eax,0xffffffdf
c001915c:	09 d0                	or     eax,edx
c001915e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019164:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001916b:	e8 38 fb ff ff       	call   c0018ca8 <CPU::cpuidCheckEDX(unsigned int)>
c0019170:	83 e0 01             	and    eax,0x1
c0019173:	8d 14 00             	lea    edx,[eax+eax*1]
c0019176:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001917c:	83 e0 fd             	and    eax,0xfffffffd
c001917f:	09 d0                	or     eax,edx
c0019181:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019187:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001918e:	e8 15 fb ff ff       	call   c0018ca8 <CPU::cpuidCheckEDX(unsigned int)>
c0019193:	83 e0 01             	and    eax,0x1
c0019196:	c1 e0 06             	shl    eax,0x6
c0019199:	88 c2                	mov    dl,al
c001919b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00191a1:	83 e0 bf             	and    eax,0xffffffbf
c00191a4:	09 d0                	or     eax,edx
c00191a6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00191ac:	58                   	pop    eax
c00191ad:	8d 74 24 28          	lea    esi,[esp+0x28]
c00191b1:	56                   	push   esi
c00191b2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00191b6:	55                   	push   ebp
c00191b7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00191bb:	50                   	push   eax
c00191bc:	8d 54 24 28          	lea    edx,[esp+0x28]
c00191c0:	52                   	push   edx
c00191c1:	6a 00                	push   0x0
c00191c3:	e8 5c fa ff ff       	call   c0018c24 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00191c8:	83 c4 1c             	add    esp,0x1c
c00191cb:	6a 04                	push   0x4
c00191cd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00191d1:	50                   	push   eax
c00191d2:	57                   	push   edi
c00191d3:	e8 6c 75 fe ff       	call   c0000744 <memcpy>
c00191d8:	83 c4 0c             	add    esp,0xc
c00191db:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00191e1:	6a 04                	push   0x4
c00191e3:	56                   	push   esi
c00191e4:	50                   	push   eax
c00191e5:	e8 5a 75 fe ff       	call   c0000744 <memcpy>
c00191ea:	83 c4 0c             	add    esp,0xc
c00191ed:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00191f3:	6a 04                	push   0x4
c00191f5:	55                   	push   ebp
c00191f6:	50                   	push   eax
c00191f7:	e8 48 75 fe ff       	call   c0000744 <memcpy>
c00191fc:	58                   	pop    eax
c00191fd:	5a                   	pop    edx
c00191fe:	68 11 b7 02 c0       	push   0xc002b711
c0019203:	57                   	push   edi
c0019204:	e8 b7 76 fe ff       	call   c00008c0 <strcmp>
c0019209:	83 c4 10             	add    esp,0x10
c001920c:	85 c0                	test   eax,eax
c001920e:	75 0f                	jne    c001921f <CPU::detectFeatures()+0x1b5>
c0019210:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001921a:	e9 22 02 00 00       	jmp    c0019441 <CPU::detectFeatures()+0x3d7>
c001921f:	50                   	push   eax
c0019220:	50                   	push   eax
c0019221:	68 1e b7 02 c0       	push   0xc002b71e
c0019226:	57                   	push   edi
c0019227:	e8 94 76 fe ff       	call   c00008c0 <strcmp>
c001922c:	83 c4 10             	add    esp,0x10
c001922f:	85 c0                	test   eax,eax
c0019231:	74 dd                	je     c0019210 <CPU::detectFeatures()+0x1a6>
c0019233:	51                   	push   ecx
c0019234:	51                   	push   ecx
c0019235:	68 2b b7 02 c0       	push   0xc002b72b
c001923a:	57                   	push   edi
c001923b:	e8 80 76 fe ff       	call   c00008c0 <strcmp>
c0019240:	83 c4 10             	add    esp,0x10
c0019243:	85 c0                	test   eax,eax
c0019245:	74 2a                	je     c0019271 <CPU::detectFeatures()+0x207>
c0019247:	52                   	push   edx
c0019248:	52                   	push   edx
c0019249:	68 38 b7 02 c0       	push   0xc002b738
c001924e:	57                   	push   edi
c001924f:	e8 6c 76 fe ff       	call   c00008c0 <strcmp>
c0019254:	83 c4 10             	add    esp,0x10
c0019257:	85 c0                	test   eax,eax
c0019259:	74 16                	je     c0019271 <CPU::detectFeatures()+0x207>
c001925b:	50                   	push   eax
c001925c:	50                   	push   eax
c001925d:	68 45 b7 02 c0       	push   0xc002b745
c0019262:	57                   	push   edi
c0019263:	e8 58 76 fe ff       	call   c00008c0 <strcmp>
c0019268:	83 c4 10             	add    esp,0x10
c001926b:	85 c0                	test   eax,eax
c001926d:	74 48                	je     c00192b7 <CPU::detectFeatures()+0x24d>
c001926f:	eb 0f                	jmp    c0019280 <CPU::detectFeatures()+0x216>
c0019271:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001927b:	e9 c1 01 00 00       	jmp    c0019441 <CPU::detectFeatures()+0x3d7>
c0019280:	50                   	push   eax
c0019281:	50                   	push   eax
c0019282:	68 52 b7 02 c0       	push   0xc002b752
c0019287:	57                   	push   edi
c0019288:	e8 33 76 fe ff       	call   c00008c0 <strcmp>
c001928d:	83 c4 10             	add    esp,0x10
c0019290:	85 c0                	test   eax,eax
c0019292:	74 23                	je     c00192b7 <CPU::detectFeatures()+0x24d>
c0019294:	50                   	push   eax
c0019295:	50                   	push   eax
c0019296:	68 5f b7 02 c0       	push   0xc002b75f
c001929b:	57                   	push   edi
c001929c:	e8 1f 76 fe ff       	call   c00008c0 <strcmp>
c00192a1:	83 c4 10             	add    esp,0x10
c00192a4:	85 c0                	test   eax,eax
c00192a6:	75 1e                	jne    c00192c6 <CPU::detectFeatures()+0x25c>
c00192a8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00192b2:	e9 8a 01 00 00       	jmp    c0019441 <CPU::detectFeatures()+0x3d7>
c00192b7:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00192c1:	e9 7b 01 00 00       	jmp    c0019441 <CPU::detectFeatures()+0x3d7>
c00192c6:	50                   	push   eax
c00192c7:	50                   	push   eax
c00192c8:	68 6c b7 02 c0       	push   0xc002b76c
c00192cd:	57                   	push   edi
c00192ce:	e8 ed 75 fe ff       	call   c00008c0 <strcmp>
c00192d3:	83 c4 10             	add    esp,0x10
c00192d6:	85 c0                	test   eax,eax
c00192d8:	75 0f                	jne    c00192e9 <CPU::detectFeatures()+0x27f>
c00192da:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00192e4:	e9 58 01 00 00       	jmp    c0019441 <CPU::detectFeatures()+0x3d7>
c00192e9:	50                   	push   eax
c00192ea:	50                   	push   eax
c00192eb:	68 2b b7 02 c0       	push   0xc002b72b
c00192f0:	57                   	push   edi
c00192f1:	e8 ca 75 fe ff       	call   c00008c0 <strcmp>
c00192f6:	83 c4 10             	add    esp,0x10
c00192f9:	85 c0                	test   eax,eax
c00192fb:	75 0f                	jne    c001930c <CPU::detectFeatures()+0x2a2>
c00192fd:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019307:	e9 35 01 00 00       	jmp    c0019441 <CPU::detectFeatures()+0x3d7>
c001930c:	50                   	push   eax
c001930d:	50                   	push   eax
c001930e:	68 79 b7 02 c0       	push   0xc002b779
c0019313:	57                   	push   edi
c0019314:	e8 a7 75 fe ff       	call   c00008c0 <strcmp>
c0019319:	83 c4 10             	add    esp,0x10
c001931c:	85 c0                	test   eax,eax
c001931e:	75 0f                	jne    c001932f <CPU::detectFeatures()+0x2c5>
c0019320:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001932a:	e9 12 01 00 00       	jmp    c0019441 <CPU::detectFeatures()+0x3d7>
c001932f:	51                   	push   ecx
c0019330:	51                   	push   ecx
c0019331:	68 86 b7 02 c0       	push   0xc002b786
c0019336:	57                   	push   edi
c0019337:	e8 84 75 fe ff       	call   c00008c0 <strcmp>
c001933c:	83 c4 10             	add    esp,0x10
c001933f:	85 c0                	test   eax,eax
c0019341:	75 0f                	jne    c0019352 <CPU::detectFeatures()+0x2e8>
c0019343:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001934d:	e9 ef 00 00 00       	jmp    c0019441 <CPU::detectFeatures()+0x3d7>
c0019352:	52                   	push   edx
c0019353:	52                   	push   edx
c0019354:	68 93 b7 02 c0       	push   0xc002b793
c0019359:	57                   	push   edi
c001935a:	e8 61 75 fe ff       	call   c00008c0 <strcmp>
c001935f:	83 c4 10             	add    esp,0x10
c0019362:	85 c0                	test   eax,eax
c0019364:	75 0f                	jne    c0019375 <CPU::detectFeatures()+0x30b>
c0019366:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019370:	e9 cc 00 00 00       	jmp    c0019441 <CPU::detectFeatures()+0x3d7>
c0019375:	50                   	push   eax
c0019376:	50                   	push   eax
c0019377:	68 a0 b7 02 c0       	push   0xc002b7a0
c001937c:	57                   	push   edi
c001937d:	e8 3e 75 fe ff       	call   c00008c0 <strcmp>
c0019382:	83 c4 10             	add    esp,0x10
c0019385:	85 c0                	test   eax,eax
c0019387:	75 0f                	jne    c0019398 <CPU::detectFeatures()+0x32e>
c0019389:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019393:	e9 a9 00 00 00       	jmp    c0019441 <CPU::detectFeatures()+0x3d7>
c0019398:	50                   	push   eax
c0019399:	50                   	push   eax
c001939a:	68 ad b7 02 c0       	push   0xc002b7ad
c001939f:	57                   	push   edi
c00193a0:	e8 1b 75 fe ff       	call   c00008c0 <strcmp>
c00193a5:	83 c4 10             	add    esp,0x10
c00193a8:	85 c0                	test   eax,eax
c00193aa:	75 0f                	jne    c00193bb <CPU::detectFeatures()+0x351>
c00193ac:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00193b6:	e9 86 00 00 00       	jmp    c0019441 <CPU::detectFeatures()+0x3d7>
c00193bb:	50                   	push   eax
c00193bc:	50                   	push   eax
c00193bd:	68 ba b7 02 c0       	push   0xc002b7ba
c00193c2:	57                   	push   edi
c00193c3:	e8 f8 74 fe ff       	call   c00008c0 <strcmp>
c00193c8:	83 c4 10             	add    esp,0x10
c00193cb:	85 c0                	test   eax,eax
c00193cd:	75 0c                	jne    c00193db <CPU::detectFeatures()+0x371>
c00193cf:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00193d9:	eb 66                	jmp    c0019441 <CPU::detectFeatures()+0x3d7>
c00193db:	50                   	push   eax
c00193dc:	50                   	push   eax
c00193dd:	68 c7 b7 02 c0       	push   0xc002b7c7
c00193e2:	57                   	push   edi
c00193e3:	e8 d8 74 fe ff       	call   c00008c0 <strcmp>
c00193e8:	83 c4 10             	add    esp,0x10
c00193eb:	85 c0                	test   eax,eax
c00193ed:	75 0c                	jne    c00193fb <CPU::detectFeatures()+0x391>
c00193ef:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00193f9:	eb 46                	jmp    c0019441 <CPU::detectFeatures()+0x3d7>
c00193fb:	50                   	push   eax
c00193fc:	50                   	push   eax
c00193fd:	68 d4 b7 02 c0       	push   0xc002b7d4
c0019402:	57                   	push   edi
c0019403:	e8 b8 74 fe ff       	call   c00008c0 <strcmp>
c0019408:	83 c4 10             	add    esp,0x10
c001940b:	85 c0                	test   eax,eax
c001940d:	74 e0                	je     c00193ef <CPU::detectFeatures()+0x385>
c001940f:	50                   	push   eax
c0019410:	50                   	push   eax
c0019411:	68 e1 b7 02 c0       	push   0xc002b7e1
c0019416:	57                   	push   edi
c0019417:	e8 a4 74 fe ff       	call   c00008c0 <strcmp>
c001941c:	83 c4 10             	add    esp,0x10
c001941f:	85 c0                	test   eax,eax
c0019421:	74 cc                	je     c00193ef <CPU::detectFeatures()+0x385>
c0019423:	51                   	push   ecx
c0019424:	51                   	push   ecx
c0019425:	68 ee b7 02 c0       	push   0xc002b7ee
c001942a:	57                   	push   edi
c001942b:	e8 90 74 fe ff       	call   c00008c0 <strcmp>
c0019430:	83 c4 10             	add    esp,0x10
c0019433:	85 c0                	test   eax,eax
c0019435:	74 b8                	je     c00193ef <CPU::detectFeatures()+0x385>
c0019437:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019441:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019446:	0f 86 be 00 00 00    	jbe    c001950a <CPU::detectFeatures()+0x4a0>
c001944c:	83 ec 0c             	sub    esp,0xc
c001944f:	68 80 00 00 00       	push   0x80
c0019454:	e8 ab f8 ff ff       	call   c0018d04 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019459:	83 e0 01             	and    eax,0x1
c001945c:	c1 e0 06             	shl    eax,0x6
c001945f:	88 c2                	mov    dl,al
c0019461:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019467:	83 e0 bf             	and    eax,0xffffffbf
c001946a:	09 d0                	or     eax,edx
c001946c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019472:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019479:	e8 86 f8 ff ff       	call   c0018d04 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001947e:	83 e0 01             	and    eax,0x1
c0019481:	c1 e0 04             	shl    eax,0x4
c0019484:	88 c2                	mov    dl,al
c0019486:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001948c:	83 e0 ef             	and    eax,0xffffffef
c001948f:	09 d0                	or     eax,edx
c0019491:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019497:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001949e:	e8 61 f8 ff ff       	call   c0018d04 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194a3:	c1 e0 07             	shl    eax,0x7
c00194a6:	88 c2                	mov    dl,al
c00194a8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194ae:	83 e0 7f             	and    eax,0x7f
c00194b1:	09 d0                	or     eax,edx
c00194b3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194b9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00194c0:	e8 6d f8 ff ff       	call   c0018d32 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00194c5:	83 e0 01             	and    eax,0x1
c00194c8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00194cf:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194d5:	83 e0 f7             	and    eax,0xfffffff7
c00194d8:	09 d0                	or     eax,edx
c00194da:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194e0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00194e7:	e8 46 f8 ff ff       	call   c0018d32 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00194ec:	83 c4 10             	add    esp,0x10
c00194ef:	83 e0 01             	and    eax,0x1
c00194f2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00194f9:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00194ff:	83 e0 fb             	and    eax,0xfffffffb
c0019502:	09 d0                	or     eax,edx
c0019504:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001950a:	83 ec 0c             	sub    esp,0xc
c001950d:	56                   	push   esi
c001950e:	55                   	push   ebp
c001950f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019513:	57                   	push   edi
c0019514:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019518:	50                   	push   eax
c0019519:	6a 01                	push   0x1
c001951b:	e8 04 f7 ff ff       	call   c0018c24 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019520:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019524:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001952a:	88 ca                	mov    dl,cl
c001952c:	83 e0 f0             	and    eax,0xfffffff0
c001952f:	83 e2 0f             	and    edx,0xf
c0019532:	09 d0                	or     eax,edx
c0019534:	88 ca                	mov    dl,cl
c0019536:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001953c:	c0 ea 04             	shr    dl,0x4
c001953f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019543:	0f b6 c2             	movzx  eax,dl
c0019546:	83 c4 20             	add    esp,0x20
c0019549:	c1 e0 06             	shl    eax,0x6
c001954c:	89 c5                	mov    ebp,eax
c001954e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019554:	66 25 3f c0          	and    ax,0xc03f
c0019558:	09 e8                	or     eax,ebp
c001955a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019561:	89 c8                	mov    eax,ecx
c0019563:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019569:	c1 e8 08             	shr    eax,0x8
c001956c:	83 e2 3f             	and    edx,0x3f
c001956f:	83 e0 0f             	and    eax,0xf
c0019572:	89 c5                	mov    ebp,eax
c0019574:	c1 e5 06             	shl    ebp,0x6
c0019577:	09 d5                	or     ebp,edx
c0019579:	89 ea                	mov    edx,ebp
c001957b:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019581:	88 c2                	mov    dl,al
c0019583:	c0 ea 02             	shr    dl,0x2
c0019586:	89 d5                	mov    ebp,edx
c0019588:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001958e:	83 e2 c0             	and    edx,0xffffffc0
c0019591:	09 d5                	or     ebp,edx
c0019593:	89 ea                	mov    edx,ebp
c0019595:	89 cd                	mov    ebp,ecx
c0019597:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001959d:	c1 ed 0c             	shr    ebp,0xc
c00195a0:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00195a6:	83 e5 03             	and    ebp,0x3
c00195a9:	83 e2 cf             	and    edx,0xffffffcf
c00195ac:	c1 e5 04             	shl    ebp,0x4
c00195af:	09 d5                	or     ebp,edx
c00195b1:	3c 06                	cmp    al,0x6
c00195b3:	89 ea                	mov    edx,ebp
c00195b5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00195bb:	74 04                	je     c00195c1 <CPU::detectFeatures()+0x557>
c00195bd:	3c 0f                	cmp    al,0xf
c00195bf:	75 5c                	jne    c001961d <CPU::detectFeatures()+0x5b3>
c00195c1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00195c5:	89 cd                	mov    ebp,ecx
c00195c7:	c1 ed 10             	shr    ebp,0x10
c00195ca:	c1 e5 04             	shl    ebp,0x4
c00195cd:	09 ea                	or     edx,ebp
c00195cf:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00195d5:	0f b6 d2             	movzx  edx,dl
c00195d8:	66 81 e5 3f c0       	and    bp,0xc03f
c00195dd:	c1 e2 06             	shl    edx,0x6
c00195e0:	09 ea                	or     edx,ebp
c00195e2:	3c 0f                	cmp    al,0xf
c00195e4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00195eb:	75 30                	jne    c001961d <CPU::detectFeatures()+0x5b3>
c00195ed:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00195f3:	c1 e9 14             	shr    ecx,0x14
c00195f6:	83 e0 3f             	and    eax,0x3f
c00195f9:	83 c1 0f             	add    ecx,0xf
c00195fc:	88 ca                	mov    dl,cl
c00195fe:	c0 e9 02             	shr    cl,0x2
c0019601:	c1 e2 06             	shl    edx,0x6
c0019604:	09 d0                	or     eax,edx
c0019606:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001960c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019612:	83 e0 c0             	and    eax,0xffffffc0
c0019615:	09 c1                	or     ecx,eax
c0019617:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001961d:	83 ec 0c             	sub    esp,0xc
c0019620:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019627:	56                   	push   esi
c0019628:	8d 44 24 28          	lea    eax,[esp+0x28]
c001962c:	50                   	push   eax
c001962d:	57                   	push   edi
c001962e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019632:	55                   	push   ebp
c0019633:	68 00 00 00 80       	push   0x80000000
c0019638:	e8 e7 f5 ff ff       	call   c0018c24 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001963d:	83 c4 20             	add    esp,0x20
c0019640:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019648:	8d 44 24 18          	lea    eax,[esp+0x18]
c001964c:	76 1e                	jbe    c001966c <CPU::detectFeatures()+0x602>
c001964e:	83 ec 0c             	sub    esp,0xc
c0019651:	56                   	push   esi
c0019652:	50                   	push   eax
c0019653:	57                   	push   edi
c0019654:	55                   	push   ebp
c0019655:	68 01 00 00 80       	push   0x80000001
c001965a:	e8 c5 f5 ff ff       	call   c0018c24 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001965f:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019669:	83 c4 20             	add    esp,0x20
c001966c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019672:	83 f8 01             	cmp    eax,0x1
c0019675:	75 6f                	jne    c00196e6 <CPU::detectFeatures()+0x67c>
c0019677:	51                   	push   ecx
c0019678:	51                   	push   ecx
c0019679:	68 fa b7 02 c0       	push   0xc002b7fa
c001967e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019682:	56                   	push   esi
c0019683:	e8 ac 71 fe ff       	call   c0000834 <strcpy>
c0019688:	5f                   	pop    edi
c0019689:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001968f:	5d                   	pop    ebp
c0019690:	66 c1 e8 06          	shr    ax,0x6
c0019694:	0f b6 c0             	movzx  eax,al
c0019697:	50                   	push   eax
c0019698:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001969e:	c1 e8 0e             	shr    eax,0xe
c00196a1:	0f b6 c0             	movzx  eax,al
c00196a4:	50                   	push   eax
c00196a5:	e8 24 f2 ff ff       	call   c00188ce <CPU::lookupIntelName(unsigned char, unsigned char)>
c00196aa:	5a                   	pop    edx
c00196ab:	59                   	pop    ecx
c00196ac:	50                   	push   eax
c00196ad:	56                   	push   esi
c00196ae:	e8 c1 72 fe ff       	call   c0000974 <strcat>
c00196b3:	5f                   	pop    edi
c00196b4:	5d                   	pop    ebp
c00196b5:	56                   	push   esi
c00196b6:	53                   	push   ebx
c00196b7:	e8 ea ad ff ff       	call   c00144a6 <Device::setName(char const*)>
c00196bc:	58                   	pop    eax
c00196bd:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00196c3:	5a                   	pop    edx
c00196c4:	68 01 b8 02 c0       	push   0xc002b801
c00196c9:	50                   	push   eax
c00196ca:	e8 f1 71 fe ff       	call   c00008c0 <strcmp>
c00196cf:	83 c4 10             	add    esp,0x10
c00196d2:	85 c0                	test   eax,eax
c00196d4:	0f 85 71 03 00 00    	jne    c0019a4b <CPU::detectFeatures()+0x9e1>
c00196da:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00196e1:	e9 65 03 00 00       	jmp    c0019a4b <CPU::detectFeatures()+0x9e1>
c00196e6:	83 f8 02             	cmp    eax,0x2
c00196e9:	0f 85 b5 00 00 00    	jne    c00197a4 <CPU::detectFeatures()+0x73a>
c00196ef:	57                   	push   edi
c00196f0:	57                   	push   edi
c00196f1:	68 13 b8 02 c0       	push   0xc002b813
c00196f6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00196fa:	56                   	push   esi
c00196fb:	e8 34 71 fe ff       	call   c0000834 <strcpy>
c0019700:	5d                   	pop    ebp
c0019701:	58                   	pop    eax
c0019702:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019708:	66 c1 e8 06          	shr    ax,0x6
c001970c:	0f b6 c0             	movzx  eax,al
c001970f:	50                   	push   eax
c0019710:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019716:	c1 e8 0e             	shr    eax,0xe
c0019719:	0f b6 c0             	movzx  eax,al
c001971c:	50                   	push   eax
c001971d:	e8 18 f0 ff ff       	call   c001873a <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019722:	5a                   	pop    edx
c0019723:	59                   	pop    ecx
c0019724:	50                   	push   eax
c0019725:	56                   	push   esi
c0019726:	e8 49 72 fe ff       	call   c0000974 <strcat>
c001972b:	5f                   	pop    edi
c001972c:	5d                   	pop    ebp
c001972d:	56                   	push   esi
c001972e:	53                   	push   ebx
c001972f:	e8 72 ad ff ff       	call   c00144a6 <Device::setName(char const*)>
c0019734:	58                   	pop    eax
c0019735:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001973b:	5a                   	pop    edx
c001973c:	68 18 b8 02 c0       	push   0xc002b818
c0019741:	50                   	push   eax
c0019742:	e8 79 71 fe ff       	call   c00008c0 <strcmp>
c0019747:	83 c4 10             	add    esp,0x10
c001974a:	85 c0                	test   eax,eax
c001974c:	75 20                	jne    c001976e <CPU::detectFeatures()+0x704>
c001974e:	8b 15 68 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e368
c0019754:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001975a:	a8 01                	test   al,0x1
c001975c:	74 10                	je     c001976e <CPU::detectFeatures()+0x704>
c001975e:	83 e0 fe             	and    eax,0xfffffffe
c0019761:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019767:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001976e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019774:	c1 e8 0e             	shr    eax,0xe
c0019777:	3c 05                	cmp    al,0x5
c0019779:	0f 85 cc 02 00 00    	jne    c0019a4b <CPU::detectFeatures()+0x9e1>
c001977f:	56                   	push   esi
c0019780:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019786:	83 e0 0f             	and    eax,0xf
c0019789:	50                   	push   eax
c001978a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019790:	66 c1 e8 06          	shr    ax,0x6
c0019794:	0f b6 c0             	movzx  eax,al
c0019797:	50                   	push   eax
c0019798:	6a 05                	push   0x5
c001979a:	e8 11 f4 ff ff       	call   c0018bb0 <CPU::AMD_K6_writeback(int, int, int)>
c001979f:	e9 1f 02 00 00       	jmp    c00199c3 <CPU::detectFeatures()+0x959>
c00197a4:	8d 50 fd             	lea    edx,[eax-0x3]
c00197a7:	83 fa 01             	cmp    edx,0x1
c00197aa:	76 09                	jbe    c00197b5 <CPU::detectFeatures()+0x74b>
c00197ac:	83 f8 06             	cmp    eax,0x6
c00197af:	0f 85 91 01 00 00    	jne    c0019946 <CPU::detectFeatures()+0x8dc>
c00197b5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197bb:	c1 ea 0e             	shr    edx,0xe
c00197be:	80 fa 05             	cmp    dl,0x5
c00197c1:	75 7b                	jne    c001983e <CPU::detectFeatures()+0x7d4>
c00197c3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00197c9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00197ce:	66 81 fa 00 01       	cmp    dx,0x100
c00197d3:	75 0c                	jne    c00197e1 <CPU::detectFeatures()+0x777>
c00197d5:	51                   	push   ecx
c00197d6:	51                   	push   ecx
c00197d7:	68 1f b8 02 c0       	push   0xc002b81f
c00197dc:	e9 dc 01 00 00       	jmp    c00199bd <CPU::detectFeatures()+0x953>
c00197e1:	66 81 fa 00 02       	cmp    dx,0x200
c00197e6:	75 0c                	jne    c00197f4 <CPU::detectFeatures()+0x78a>
c00197e8:	52                   	push   edx
c00197e9:	52                   	push   edx
c00197ea:	68 32 b8 02 c0       	push   0xc002b832
c00197ef:	e9 c9 01 00 00       	jmp    c00199bd <CPU::detectFeatures()+0x953>
c00197f4:	66 81 fa 40 02       	cmp    dx,0x240
c00197f9:	75 0c                	jne    c0019807 <CPU::detectFeatures()+0x79d>
c00197fb:	50                   	push   eax
c00197fc:	50                   	push   eax
c00197fd:	68 44 b8 02 c0       	push   0xc002b844
c0019802:	e9 b6 01 00 00       	jmp    c00199bd <CPU::detectFeatures()+0x953>
c0019807:	83 f8 06             	cmp    eax,0x6
c001980a:	75 0c                	jne    c0019818 <CPU::detectFeatures()+0x7ae>
c001980c:	50                   	push   eax
c001980d:	50                   	push   eax
c001980e:	68 56 b8 02 c0       	push   0xc002b856
c0019813:	e9 a5 01 00 00       	jmp    c00199bd <CPU::detectFeatures()+0x953>
c0019818:	83 f8 04             	cmp    eax,0x4
c001981b:	75 0c                	jne    c0019829 <CPU::detectFeatures()+0x7bf>
c001981d:	50                   	push   eax
c001981e:	50                   	push   eax
c001981f:	68 62 b8 02 c0       	push   0xc002b862
c0019824:	e9 94 01 00 00       	jmp    c00199bd <CPU::detectFeatures()+0x953>
c0019829:	83 f8 03             	cmp    eax,0x3
c001982c:	0f 85 19 02 00 00    	jne    c0019a4b <CPU::detectFeatures()+0x9e1>
c0019832:	50                   	push   eax
c0019833:	50                   	push   eax
c0019834:	68 6a b8 02 c0       	push   0xc002b86a
c0019839:	e9 7f 01 00 00       	jmp    c00199bd <CPU::detectFeatures()+0x953>
c001983e:	80 fa 06             	cmp    dl,0x6
c0019841:	0f 85 db 00 00 00    	jne    c0019922 <CPU::detectFeatures()+0x8b8>
c0019847:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001984d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019852:	66 81 fa 80 01       	cmp    dx,0x180
c0019857:	75 0c                	jne    c0019865 <CPU::detectFeatures()+0x7fb>
c0019859:	50                   	push   eax
c001985a:	50                   	push   eax
c001985b:	68 75 b8 02 c0       	push   0xc002b875
c0019860:	e9 58 01 00 00       	jmp    c00199bd <CPU::detectFeatures()+0x953>
c0019865:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001986b:	66 f7 c1 80 ff       	test   cx,0xff80
c0019870:	75 0c                	jne    c001987e <CPU::detectFeatures()+0x814>
c0019872:	50                   	push   eax
c0019873:	50                   	push   eax
c0019874:	68 85 b8 02 c0       	push   0xc002b885
c0019879:	e9 3f 01 00 00       	jmp    c00199bd <CPU::detectFeatures()+0x953>
c001987e:	66 81 fa 40 02       	cmp    dx,0x240
c0019883:	75 0c                	jne    c0019891 <CPU::detectFeatures()+0x827>
c0019885:	55                   	push   ebp
c0019886:	55                   	push   ebp
c0019887:	68 8c b8 02 c0       	push   0xc002b88c
c001988c:	e9 2c 01 00 00       	jmp    c00199bd <CPU::detectFeatures()+0x953>
c0019891:	66 81 fa 80 02       	cmp    dx,0x280
c0019896:	75 0c                	jne    c00198a4 <CPU::detectFeatures()+0x83a>
c0019898:	57                   	push   edi
c0019899:	57                   	push   edi
c001989a:	68 95 b8 02 c0       	push   0xc002b895
c001989f:	e9 19 01 00 00       	jmp    c00199bd <CPU::detectFeatures()+0x953>
c00198a4:	66 81 fa 40 03       	cmp    dx,0x340
c00198a9:	74 ed                	je     c0019898 <CPU::detectFeatures()+0x82e>
c00198ab:	66 81 fa c0 03       	cmp    dx,0x3c0
c00198b0:	75 0c                	jne    c00198be <CPU::detectFeatures()+0x854>
c00198b2:	56                   	push   esi
c00198b3:	56                   	push   esi
c00198b4:	68 9c b8 02 c0       	push   0xc002b89c
c00198b9:	e9 ff 00 00 00       	jmp    c00199bd <CPU::detectFeatures()+0x953>
c00198be:	83 f8 06             	cmp    eax,0x6
c00198c1:	0f 84 45 ff ff ff    	je     c001980c <CPU::detectFeatures()+0x7a2>
c00198c7:	83 f8 04             	cmp    eax,0x4
c00198ca:	0f 84 4d ff ff ff    	je     c001981d <CPU::detectFeatures()+0x7b3>
c00198d0:	83 f8 03             	cmp    eax,0x3
c00198d3:	0f 85 72 01 00 00    	jne    c0019a4b <CPU::detectFeatures()+0x9e1>
c00198d9:	51                   	push   ecx
c00198da:	51                   	push   ecx
c00198db:	68 a5 b8 02 c0       	push   0xc002b8a5
c00198e0:	53                   	push   ebx
c00198e1:	e8 c0 ab ff ff       	call   c00144a6 <Device::setName(char const*)>
c00198e6:	b1 c1                	mov    cl,0xc1
c00198e8:	88 c8                	mov    al,cl
c00198ea:	e6 22                	out    0x22,al
c00198ec:	e4 23                	in     al,0x23
c00198ee:	88 c2                	mov    dl,al
c00198f0:	88 c8                	mov    al,cl
c00198f2:	e6 22                	out    0x22,al
c00198f4:	88 d0                	mov    al,dl
c00198f6:	83 c8 10             	or     eax,0x10
c00198f9:	e6 23                	out    0x23,al
c00198fb:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019902:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019905:	89 d0                	mov    eax,edx
c0019907:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001990d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019911:	40                   	inc    eax
c0019912:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019918:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001991d:	e9 a1 00 00 00       	jmp    c00199c3 <CPU::detectFeatures()+0x959>
c0019922:	83 f8 06             	cmp    eax,0x6
c0019925:	0f 84 e1 fe ff ff    	je     c001980c <CPU::detectFeatures()+0x7a2>
c001992b:	83 f8 04             	cmp    eax,0x4
c001992e:	0f 84 e9 fe ff ff    	je     c001981d <CPU::detectFeatures()+0x7b3>
c0019934:	83 f8 03             	cmp    eax,0x3
c0019937:	0f 85 0e 01 00 00    	jne    c0019a4b <CPU::detectFeatures()+0x9e1>
c001993d:	52                   	push   edx
c001993e:	52                   	push   edx
c001993f:	68 b0 b8 02 c0       	push   0xc002b8b0
c0019944:	eb 77                	jmp    c00199bd <CPU::detectFeatures()+0x953>
c0019946:	83 f8 07             	cmp    eax,0x7
c0019949:	75 09                	jne    c0019954 <CPU::detectFeatures()+0x8ea>
c001994b:	50                   	push   eax
c001994c:	50                   	push   eax
c001994d:	68 ba b8 02 c0       	push   0xc002b8ba
c0019952:	eb 69                	jmp    c00199bd <CPU::detectFeatures()+0x953>
c0019954:	83 f8 0a             	cmp    eax,0xa
c0019957:	75 09                	jne    c0019962 <CPU::detectFeatures()+0x8f8>
c0019959:	50                   	push   eax
c001995a:	50                   	push   eax
c001995b:	68 c5 b8 02 c0       	push   0xc002b8c5
c0019960:	eb 5b                	jmp    c00199bd <CPU::detectFeatures()+0x953>
c0019962:	83 f8 0b             	cmp    eax,0xb
c0019965:	75 09                	jne    c0019970 <CPU::detectFeatures()+0x906>
c0019967:	50                   	push   eax
c0019968:	50                   	push   eax
c0019969:	68 cd b8 02 c0       	push   0xc002b8cd
c001996e:	eb 4d                	jmp    c00199bd <CPU::detectFeatures()+0x953>
c0019970:	83 f8 08             	cmp    eax,0x8
c0019973:	75 09                	jne    c001997e <CPU::detectFeatures()+0x914>
c0019975:	50                   	push   eax
c0019976:	50                   	push   eax
c0019977:	68 d6 b8 02 c0       	push   0xc002b8d6
c001997c:	eb 3f                	jmp    c00199bd <CPU::detectFeatures()+0x953>
c001997e:	83 f8 09             	cmp    eax,0x9
c0019981:	75 09                	jne    c001998c <CPU::detectFeatures()+0x922>
c0019983:	50                   	push   eax
c0019984:	50                   	push   eax
c0019985:	68 de b8 02 c0       	push   0xc002b8de
c001998a:	eb 31                	jmp    c00199bd <CPU::detectFeatures()+0x953>
c001998c:	83 f8 05             	cmp    eax,0x5
c001998f:	75 09                	jne    c001999a <CPU::detectFeatures()+0x930>
c0019991:	50                   	push   eax
c0019992:	50                   	push   eax
c0019993:	68 e6 b8 02 c0       	push   0xc002b8e6
c0019998:	eb 23                	jmp    c00199bd <CPU::detectFeatures()+0x953>
c001999a:	83 f8 0c             	cmp    eax,0xc
c001999d:	75 09                	jne    c00199a8 <CPU::detectFeatures()+0x93e>
c001999f:	55                   	push   ebp
c00199a0:	55                   	push   ebp
c00199a1:	68 f4 b8 02 c0       	push   0xc002b8f4
c00199a6:	eb 15                	jmp    c00199bd <CPU::detectFeatures()+0x953>
c00199a8:	83 f8 0d             	cmp    eax,0xd
c00199ab:	75 09                	jne    c00199b6 <CPU::detectFeatures()+0x94c>
c00199ad:	57                   	push   edi
c00199ae:	57                   	push   edi
c00199af:	68 ff b8 02 c0       	push   0xc002b8ff
c00199b4:	eb 07                	jmp    c00199bd <CPU::detectFeatures()+0x953>
c00199b6:	56                   	push   esi
c00199b7:	56                   	push   esi
c00199b8:	68 13 b9 02 c0       	push   0xc002b913
c00199bd:	53                   	push   ebx
c00199be:	e8 e3 aa ff ff       	call   c00144a6 <Device::setName(char const*)>
c00199c3:	83 c4 10             	add    esp,0x10
c00199c6:	e9 80 00 00 00       	jmp    c0019a4b <CPU::detectFeatures()+0x9e1>
c00199cb:	51                   	push   ecx
c00199cc:	51                   	push   ecx
c00199cd:	68 5f b7 02 c0       	push   0xc002b75f
c00199d2:	57                   	push   edi
c00199d3:	e8 5c 6e fe ff       	call   c0000834 <strcpy>
c00199d8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00199e2:	e8 c7 68 fe ff       	call   c00002ae <is486>
c00199e7:	83 c4 10             	add    esp,0x10
c00199ea:	85 c0                	test   eax,eax
c00199ec:	74 2b                	je     c0019a19 <CPU::detectFeatures()+0x9af>
c00199ee:	52                   	push   edx
c00199ef:	52                   	push   edx
c00199f0:	68 1f b9 02 c0       	push   0xc002b91f
c00199f5:	53                   	push   ebx
c00199f6:	e8 ab aa ff ff       	call   c00144a6 <Device::setName(char const*)>
c00199fb:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a02:	0f 20 c0             	mov    eax,cr0
c0019a05:	83 e0 14             	and    eax,0x14
c0019a08:	83 c4 10             	add    esp,0x10
c0019a0b:	83 f8 04             	cmp    eax,0x4
c0019a0e:	75 1f                	jne    c0019a2f <CPU::detectFeatures()+0x9c5>
c0019a10:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019a17:	eb 32                	jmp    c0019a4b <CPU::detectFeatures()+0x9e1>
c0019a19:	50                   	push   eax
c0019a1a:	50                   	push   eax
c0019a1b:	68 2a b9 02 c0       	push   0xc002b92a
c0019a20:	53                   	push   ebx
c0019a21:	e8 80 aa ff ff       	call   c00144a6 <Device::setName(char const*)>
c0019a26:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019a2d:	eb d3                	jmp    c0019a02 <CPU::detectFeatures()+0x998>
c0019a2f:	e8 55 68 fe ff       	call   c0000289 <hasLegacyFPU>
c0019a34:	83 e0 01             	and    eax,0x1
c0019a37:	8d 14 00             	lea    edx,[eax+eax*1]
c0019a3a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019a40:	83 e0 fd             	and    eax,0xfffffffd
c0019a43:	09 d0                	or     eax,edx
c0019a45:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019a4b:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019a52:	83 c4 4c             	add    esp,0x4c
c0019a55:	5b                   	pop    ebx
c0019a56:	5e                   	pop    esi
c0019a57:	5f                   	pop    edi
c0019a58:	5d                   	pop    ebp
c0019a59:	c3                   	ret    

c0019a5a <CPU::setupSMEP()>:
c0019a5a:	0f 20 e0             	mov    eax,cr4
c0019a5d:	0d 00 00 10 00       	or     eax,0x100000
c0019a62:	0f 22 e0             	mov    cr4,eax
c0019a65:	c3                   	ret    

c0019a66 <CPU::setupUMIP()>:
c0019a66:	0f 20 e0             	mov    eax,cr4
c0019a69:	80 cc 08             	or     ah,0x8
c0019a6c:	0f 22 e0             	mov    cr4,eax
c0019a6f:	c3                   	ret    

c0019a70 <CPU::setupTSC()>:
c0019a70:	0f 20 e0             	mov    eax,cr4
c0019a73:	83 c8 04             	or     eax,0x4
c0019a76:	0f 22 e0             	mov    cr4,eax
c0019a79:	c3                   	ret    

c0019a7a <CPU::setupLargePages()>:
c0019a7a:	0f 20 e0             	mov    eax,cr4
c0019a7d:	83 c8 10             	or     eax,0x10
c0019a80:	0f 22 e0             	mov    cr4,eax
c0019a83:	c3                   	ret    

c0019a84 <CPU::setupPAT()>:
c0019a84:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0019a89:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019a90:	74 2c                	je     c0019abe <CPU::setupPAT()+0x3a>
c0019a92:	53                   	push   ebx
c0019a93:	83 ec 10             	sub    esp,0x10
c0019a96:	68 77 02 00 00       	push   0x277
c0019a9b:	50                   	push   eax
c0019a9c:	e8 47 53 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019aa1:	83 e2 f8             	and    edx,0xfffffff8
c0019aa4:	83 ca 01             	or     edx,0x1
c0019aa7:	52                   	push   edx
c0019aa8:	50                   	push   eax
c0019aa9:	68 77 02 00 00       	push   0x277
c0019aae:	ff 35 68 e3 02 c0    	push   DWORD PTR ds:0xc002e368
c0019ab4:	e8 5b 53 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019ab9:	83 c4 28             	add    esp,0x28
c0019abc:	5b                   	pop    ebx
c0019abd:	c3                   	ret    
c0019abe:	c3                   	ret    
c0019abf:	90                   	nop

c0019ac0 <CPU::setupMTRR()>:
c0019ac0:	c3                   	ret    
c0019ac1:	90                   	nop

c0019ac2 <CPU::setupGlobalPages()>:
c0019ac2:	0f 20 e0             	mov    eax,cr4
c0019ac5:	0c 80                	or     al,0x80
c0019ac7:	0f 22 e0             	mov    cr4,eax
c0019aca:	c3                   	ret    
c0019acb:	90                   	nop

c0019acc <CPU::allowUsermodeDataAccess()>:
c0019acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ad0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019ad7:	74 03                	je     c0019adc <CPU::allowUsermodeDataAccess()+0x10>
c0019ad9:	0f 01 cb             	stac   
c0019adc:	c3                   	ret    
c0019add:	90                   	nop

c0019ade <CPU::prohibitUsermodeDataAccess()>:
c0019ade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ae2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019ae9:	74 03                	je     c0019aee <CPU::prohibitUsermodeDataAccess()+0x10>
c0019aeb:	0f 01 ca             	clac   
c0019aee:	c3                   	ret    
c0019aef:	90                   	nop

c0019af0 <CPU::setupSMAP()>:
c0019af0:	0f 20 e0             	mov    eax,cr4
c0019af3:	0d 00 00 20 00       	or     eax,0x200000
c0019af8:	0f 22 e0             	mov    cr4,eax
c0019afb:	eb e1                	jmp    c0019ade <CPU::prohibitUsermodeDataAccess()>
c0019afd:	90                   	nop

c0019afe <CPU::setupFeatures()>:
c0019afe:	83 ec 0c             	sub    esp,0xc
c0019b01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b05:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019b0c:	74 07                	je     c0019b15 <CPU::setupFeatures()+0x17>
c0019b0e:	52                   	push   edx
c0019b0f:	e8 46 ff ff ff       	call   c0019a5a <CPU::setupSMEP()>
c0019b14:	58                   	pop    eax
c0019b15:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019b1c:	74 07                	je     c0019b25 <CPU::setupFeatures()+0x27>
c0019b1e:	52                   	push   edx
c0019b1f:	e8 cc ff ff ff       	call   c0019af0 <CPU::setupSMAP()>
c0019b24:	58                   	pop    eax
c0019b25:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019b2c:	74 07                	je     c0019b35 <CPU::setupFeatures()+0x37>
c0019b2e:	52                   	push   edx
c0019b2f:	e8 32 ff ff ff       	call   c0019a66 <CPU::setupUMIP()>
c0019b34:	58                   	pop    eax
c0019b35:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019b3c:	74 07                	je     c0019b45 <CPU::setupFeatures()+0x47>
c0019b3e:	52                   	push   edx
c0019b3f:	e8 2c ff ff ff       	call   c0019a70 <CPU::setupTSC()>
c0019b44:	58                   	pop    eax
c0019b45:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019b4c:	74 07                	je     c0019b55 <CPU::setupFeatures()+0x57>
c0019b4e:	52                   	push   edx
c0019b4f:	e8 26 ff ff ff       	call   c0019a7a <CPU::setupLargePages()>
c0019b54:	59                   	pop    ecx
c0019b55:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019b5c:	74 07                	je     c0019b65 <CPU::setupFeatures()+0x67>
c0019b5e:	52                   	push   edx
c0019b5f:	e8 5e ff ff ff       	call   c0019ac2 <CPU::setupGlobalPages()>
c0019b64:	58                   	pop    eax
c0019b65:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019b6c:	74 0c                	je     c0019b7a <CPU::setupFeatures()+0x7c>
c0019b6e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019b72:	83 c4 0c             	add    esp,0xc
c0019b75:	e9 0a ff ff ff       	jmp    c0019a84 <CPU::setupPAT()>
c0019b7a:	83 c4 0c             	add    esp,0xc
c0019b7d:	c3                   	ret    

c0019b7e <CPU::open(int, int, void*)>:
c0019b7e:	57                   	push   edi
c0019b7f:	56                   	push   esi
c0019b80:	53                   	push   ebx
c0019b81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b85:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019b89:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019b8f:	83 ec 0c             	sub    esp,0xc
c0019b92:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019b98:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019b9e:	50                   	push   eax
c0019b9f:	e8 30 55 ff ff       	call   c000f0d4 <GDT::setup()>
c0019ba4:	83 c4 0c             	add    esp,0xc
c0019ba7:	6a 00                	push   0x0
c0019ba9:	68 ef be ad de       	push   0xdeadbeef
c0019bae:	57                   	push   edi
c0019baf:	e8 00 79 ff ff       	call   c00114b4 <TSS::setup(unsigned long, unsigned long)>
c0019bb4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019bb7:	e8 d8 78 ff ff       	call   c0011494 <TSS::flush()>
c0019bbc:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019bc2:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bc5:	e8 66 57 ff ff       	call   c000f330 <IDT::setup()>
c0019bca:	b8 00 04 00 00       	mov    eax,0x400
c0019bcf:	0f 23 f8             	mov    db7,eax
c0019bd2:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019bdc:	e8 04 63 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0019be1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019be7:	89 30                	mov    DWORD PTR [eax],esi
c0019be9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019bef:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019bf2:	58                   	pop    eax
c0019bf3:	5a                   	pop    edx
c0019bf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bfa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019bfe:	e8 05 8a ff ff       	call   c0012608 <VAS::setCPUSpecific(unsigned long)>
c0019c03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c06:	e8 5f f4 ff ff       	call   c001906a <CPU::detectFeatures()>
c0019c0b:	e8 87 bc ff ff       	call   c0015897 <setupInterruptController()>
c0019c10:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019c16:	a1 80 e3 02 c0       	mov    eax,ds:0xc002e380
c0019c1b:	83 e0 10             	and    eax,0x10
c0019c1e:	83 f8 01             	cmp    eax,0x1
c0019c21:	19 c0                	sbb    eax,eax
c0019c23:	83 e0 46             	and    eax,0x46
c0019c26:	83 c0 1e             	add    eax,0x1e
c0019c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c2c:	e8 ab d1 ff ff       	call   c0016ddc <setupTimer(int)>
c0019c31:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019c37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c3a:	e8 bf fe ff ff       	call   c0019afe <CPU::setupFeatures()>
c0019c3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c42:	e8 a7 f1 ff ff       	call   c0018dee <CPU::displayFeatures()>
c0019c47:	83 c4 10             	add    esp,0x10
c0019c4a:	31 c0                	xor    eax,eax
c0019c4c:	5b                   	pop    ebx
c0019c4d:	5e                   	pop    esi
c0019c4e:	5f                   	pop    edi
c0019c4f:	c3                   	ret    

c0019c50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019c50:	57                   	push   edi
c0019c51:	56                   	push   esi
c0019c52:	53                   	push   ebx
c0019c53:	51                   	push   ecx
c0019c54:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c58:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019c5b:	0f 02 c0             	lar    eax,ax
c0019c5e:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019c61:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019c65:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019c68:	88 ca                	mov    dl,cl
c0019c6a:	c0 ea 06             	shr    dl,0x6
c0019c6d:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019c71:	89 ca                	mov    edx,ecx
c0019c73:	66 c1 ea 03          	shr    dx,0x3
c0019c77:	83 e2 07             	and    edx,0x7
c0019c7a:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019c7f:	88 17                	mov    BYTE PTR [edi],dl
c0019c81:	0f 84 a6 01 00 00    	je     c0019e2d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019c87:	83 e1 07             	and    ecx,0x7
c0019c8a:	80 f9 04             	cmp    cl,0x4
c0019c8d:	0f 84 98 00 00 00    	je     c0019d2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019c93:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c98:	0f 95 c0             	setne  al
c0019c9b:	80 f9 05             	cmp    cl,0x5
c0019c9e:	0f 95 c2             	setne  dl
c0019ca1:	08 c2                	or     dl,al
c0019ca3:	74 79                	je     c0019d1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019ca5:	84 c9                	test   cl,cl
c0019ca7:	75 05                	jne    c0019cae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019ca9:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019cac:	eb 3c                	jmp    c0019cea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cae:	80 f9 01             	cmp    cl,0x1
c0019cb1:	75 05                	jne    c0019cb8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019cb3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019cb6:	eb 32                	jmp    c0019cea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cb8:	80 f9 02             	cmp    cl,0x2
c0019cbb:	75 05                	jne    c0019cc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019cbd:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019cc0:	eb 28                	jmp    c0019cea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cc2:	31 c0                	xor    eax,eax
c0019cc4:	80 f9 03             	cmp    cl,0x3
c0019cc7:	75 05                	jne    c0019cce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019cc9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019ccc:	eb 1c                	jmp    c0019cea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cce:	80 f9 05             	cmp    cl,0x5
c0019cd1:	75 05                	jne    c0019cd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019cd3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019cd6:	eb 12                	jmp    c0019cea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019cd8:	80 f9 06             	cmp    cl,0x6
c0019cdb:	75 05                	jne    c0019ce2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019cdd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019ce0:	eb 08                	jmp    c0019cea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ce2:	80 f9 07             	cmp    cl,0x7
c0019ce5:	75 03                	jne    c0019cea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ce7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019cea:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019cef:	75 10                	jne    c0019d01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019cf1:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019cf5:	b9 03 00 00 00       	mov    ecx,0x3
c0019cfa:	01 d0                	add    eax,edx
c0019cfc:	e9 37 01 00 00       	jmp    c0019e38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d01:	b9 02 00 00 00       	mov    ecx,0x2
c0019d06:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019d0b:	0f 85 27 01 00 00    	jne    c0019e38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d11:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019d14:	b9 06 00 00 00       	mov    ecx,0x6
c0019d19:	e9 1a 01 00 00       	jmp    c0019e38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d1e:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019d21:	b9 06 00 00 00       	mov    ecx,0x6
c0019d26:	e9 0f 01 00 00       	jmp    c0019e3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d2b:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019d2e:	88 ca                	mov    dl,cl
c0019d30:	c0 ea 06             	shr    dl,0x6
c0019d33:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019d37:	89 ca                	mov    edx,ecx
c0019d39:	66 c1 ea 03          	shr    dx,0x3
c0019d3d:	83 e2 07             	and    edx,0x7
c0019d40:	80 e1 07             	and    cl,0x7
c0019d43:	75 05                	jne    c0019d4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019d45:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019d48:	eb 4c                	jmp    c0019d96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d4a:	80 f9 01             	cmp    cl,0x1
c0019d4d:	75 05                	jne    c0019d54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019d4f:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019d52:	eb 42                	jmp    c0019d96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d54:	80 f9 02             	cmp    cl,0x2
c0019d57:	75 05                	jne    c0019d5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019d59:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019d5c:	eb 38                	jmp    c0019d96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d5e:	80 f9 03             	cmp    cl,0x3
c0019d61:	75 05                	jne    c0019d68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019d63:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019d66:	eb 2e                	jmp    c0019d96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d68:	80 f9 04             	cmp    cl,0x4
c0019d6b:	75 12                	jne    c0019d7f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019d6d:	f6 c4 60             	test   ah,0x60
c0019d70:	75 08                	jne    c0019d7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019d72:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019d75:	8d 78 14             	lea    edi,[eax+0x14]
c0019d78:	eb 1c                	jmp    c0019d96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d7a:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019d7d:	eb 17                	jmp    c0019d96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d7f:	80 f9 05             	cmp    cl,0x5
c0019d82:	75 05                	jne    c0019d89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019d84:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019d87:	eb 0d                	jmp    c0019d96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d89:	80 f9 06             	cmp    cl,0x6
c0019d8c:	75 05                	jne    c0019d93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019d8e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019d91:	eb 03                	jmp    c0019d96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019d93:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019d96:	84 d2                	test   dl,dl
c0019d98:	75 05                	jne    c0019d9f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019d9a:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d9d:	eb 3c                	jmp    c0019ddb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019d9f:	80 fa 01             	cmp    dl,0x1
c0019da2:	75 05                	jne    c0019da9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019da4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019da7:	eb 32                	jmp    c0019ddb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019da9:	80 fa 02             	cmp    dl,0x2
c0019dac:	75 05                	jne    c0019db3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019dae:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019db1:	eb 28                	jmp    c0019ddb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019db3:	80 fa 03             	cmp    dl,0x3
c0019db6:	75 05                	jne    c0019dbd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019db8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019dbb:	eb 1e                	jmp    c0019ddb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dbd:	31 c0                	xor    eax,eax
c0019dbf:	80 fa 04             	cmp    dl,0x4
c0019dc2:	74 17                	je     c0019ddb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dc4:	80 fa 05             	cmp    dl,0x5
c0019dc7:	75 05                	jne    c0019dce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019dc9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019dcc:	eb 0d                	jmp    c0019ddb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dce:	80 fa 06             	cmp    dl,0x6
c0019dd1:	75 05                	jne    c0019dd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019dd3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019dd6:	eb 03                	jmp    c0019ddb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019dd8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019ddb:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019de0:	0f 94 c2             	sete   dl
c0019de3:	80 f9 05             	cmp    cl,0x5
c0019de6:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019dea:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019def:	d3 e0                	shl    eax,cl
c0019df1:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019df5:	74 0a                	je     c0019e01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019df7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019dfa:	b9 07 00 00 00       	mov    ecx,0x7
c0019dff:	eb 37                	jmp    c0019e38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e01:	01 f8                	add    eax,edi
c0019e03:	b9 03 00 00 00       	mov    ecx,0x3
c0019e08:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e0d:	74 2b                	je     c0019e3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e0f:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e14:	75 0d                	jne    c0019e23 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019e16:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019e1a:	01 c8                	add    eax,ecx
c0019e1c:	b9 04 00 00 00       	mov    ecx,0x4
c0019e21:	eb 17                	jmp    c0019e3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e23:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e26:	b9 07 00 00 00       	mov    ecx,0x7
c0019e2b:	eb 0d                	jmp    c0019e3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e2d:	b9 02 00 00 00       	mov    ecx,0x2
c0019e32:	b2 01                	mov    dl,0x1
c0019e34:	31 c0                	xor    eax,eax
c0019e36:	eb 02                	jmp    c0019e3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e38:	31 d2                	xor    edx,edx
c0019e3a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e3e:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019e40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019e44:	88 11                	mov    BYTE PTR [ecx],dl
c0019e46:	5a                   	pop    edx
c0019e47:	5b                   	pop    ebx
c0019e48:	5e                   	pop    esi
c0019e49:	5f                   	pop    edi
c0019e4a:	c3                   	ret    

c0019e4b <Krnl::smpEntry()>:
c0019e4b:	eb fe                	jmp    c0019e4b <Krnl::smpEntry()>

c0019e4d <Krnl::startCPU(int)>:
c0019e4d:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0019e52:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019e59:	0f 84 36 01 00 00    	je     c0019f95 <Krnl::startCPU(int)+0x148>
c0019e5f:	53                   	push   ebx
c0019e60:	83 ec 08             	sub    esp,0x8
c0019e63:	e8 fc 3e 00 00       	call   c001dd64 <lockScheduler()>
c0019e68:	52                   	push   edx
c0019e69:	52                   	push   edx
c0019e6a:	6a 1b                	push   0x1b
c0019e6c:	ff 35 68 e3 02 c0    	push   DWORD PTR ds:0xc002e368
c0019e72:	e8 71 4f ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019e77:	59                   	pop    ecx
c0019e78:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019e7d:	89 c3                	mov    ebx,eax
c0019e7f:	58                   	pop    eax
c0019e80:	53                   	push   ebx
c0019e81:	68 64 b9 02 c0       	push   0xc002b964
c0019e86:	e8 12 90 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0019e8b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e99:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ea3:	c1 e0 18             	shl    eax,0x18
c0019ea6:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019eac:	83 c4 10             	add    esp,0x10
c0019eaf:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019eb5:	09 c2                	or     edx,eax
c0019eb7:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019ebd:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019ec3:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ec9:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019ecf:	80 cd c5             	or     ch,0xc5
c0019ed2:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ed8:	f3 90                	pause  
c0019eda:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019edc:	0f ba e1 0c          	bt     ecx,0xc
c0019ee0:	72 f6                	jb     c0019ed8 <Krnl::startCPU(int)+0x8b>
c0019ee2:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ee8:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019eee:	09 c1                	or     ecx,eax
c0019ef0:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019ef6:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019efc:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f02:	80 cd 85             	or     ch,0x85
c0019f05:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f0b:	f3 90                	pause  
c0019f0d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f0f:	0f ba e1 0c          	bt     ecx,0xc
c0019f13:	72 f6                	jb     c0019f0b <Krnl::startCPU(int)+0xbe>
c0019f15:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f1f:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f25:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f2b:	09 c1                	or     ecx,eax
c0019f2d:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f33:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f39:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019f3f:	81 c9 02 06 00 00    	or     ecx,0x602
c0019f45:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f4b:	f3 90                	pause  
c0019f4d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f4f:	0f ba e1 0c          	bt     ecx,0xc
c0019f53:	72 f6                	jb     c0019f4b <Krnl::startCPU(int)+0xfe>
c0019f55:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f5f:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f65:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f6b:	09 c8                	or     eax,ecx
c0019f6d:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019f73:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019f79:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019f7e:	0d 02 06 00 00       	or     eax,0x602
c0019f83:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019f89:	f3 90                	pause  
c0019f8b:	8b 02                	mov    eax,DWORD PTR [edx]
c0019f8d:	0f ba e0 0c          	bt     eax,0xc
c0019f91:	72 f6                	jb     c0019f89 <Krnl::startCPU(int)+0x13c>
c0019f93:	eb fe                	jmp    c0019f93 <Krnl::startCPU(int)+0x146>
c0019f95:	c3                   	ret    

c0019f96 <Krnl::startCPUs()>:
c0019f96:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0019f9b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019fa1:	88 c2                	mov    dl,al
c0019fa3:	83 e2 0a             	and    edx,0xa
c0019fa6:	80 fa 0a             	cmp    dl,0xa
c0019fa9:	75 09                	jne    c0019fb4 <Krnl::startCPUs()+0x1e>
c0019fab:	a8 01                	test   al,0x1
c0019fad:	74 05                	je     c0019fb4 <Krnl::startCPUs()+0x1e>
c0019faf:	e9 e7 61 fe ff       	jmp    c000019b <prepareTramp>
c0019fb4:	c3                   	ret    
c0019fb5:	90                   	nop

c0019fb6 <EnvVarContainer::getEnv(char const*)>:
c0019fb6:	57                   	push   edi
c0019fb7:	56                   	push   esi
c0019fb8:	53                   	push   ebx
c0019fb9:	31 db                	xor    ebx,ebx
c0019fbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fbf:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019fc1:	7e 2b                	jle    c0019fee <EnvVarContainer::getEnv(char const*)+0x38>
c0019fc3:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019fca:	50                   	push   eax
c0019fcb:	50                   	push   eax
c0019fcc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019fcf:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019fd2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019fd6:	e8 e5 68 fe ff       	call   c00008c0 <strcmp>
c0019fdb:	83 c4 10             	add    esp,0x10
c0019fde:	85 c0                	test   eax,eax
c0019fe0:	75 09                	jne    c0019feb <EnvVarContainer::getEnv(char const*)+0x35>
c0019fe2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019fe5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019fe9:	eb 05                	jmp    c0019ff0 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019feb:	43                   	inc    ebx
c0019fec:	eb d1                	jmp    c0019fbf <EnvVarContainer::getEnv(char const*)+0x9>
c0019fee:	31 c0                	xor    eax,eax
c0019ff0:	5b                   	pop    ebx
c0019ff1:	5e                   	pop    esi
c0019ff2:	5f                   	pop    edi
c0019ff3:	c3                   	ret    

c0019ff4 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019ff4:	57                   	push   edi
c0019ff5:	56                   	push   esi
c0019ff6:	53                   	push   ebx
c0019ff7:	83 ec 1c             	sub    esp,0x1c
c0019ffa:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019ffe:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a002:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a006:	57                   	push   edi
c001a007:	e8 88 67 fe ff       	call   c0000794 <strlen>
c001a00c:	40                   	inc    eax
c001a00d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a010:	e8 2e 58 ff ff       	call   c000f843 <malloc>
c001a015:	89 34 24             	mov    DWORD PTR [esp],esi
c001a018:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a01c:	e8 73 67 fe ff       	call   c0000794 <strlen>
c001a021:	40                   	inc    eax
c001a022:	89 04 24             	mov    DWORD PTR [esp],eax
c001a025:	e8 19 58 ff ff       	call   c000f843 <malloc>
c001a02a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a02d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a031:	e8 5e 67 fe ff       	call   c0000794 <strlen>
c001a036:	83 c4 0c             	add    esp,0xc
c001a039:	40                   	inc    eax
c001a03a:	50                   	push   eax
c001a03b:	6a 00                	push   0x0
c001a03d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a041:	e8 32 67 fe ff       	call   c0000778 <memset>
c001a046:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a049:	e8 46 67 fe ff       	call   c0000794 <strlen>
c001a04e:	83 c4 0c             	add    esp,0xc
c001a051:	40                   	inc    eax
c001a052:	50                   	push   eax
c001a053:	57                   	push   edi
c001a054:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a058:	e8 e7 66 fe ff       	call   c0000744 <memcpy>
c001a05d:	89 34 24             	mov    DWORD PTR [esp],esi
c001a060:	e8 2f 67 fe ff       	call   c0000794 <strlen>
c001a065:	83 c4 0c             	add    esp,0xc
c001a068:	40                   	inc    eax
c001a069:	50                   	push   eax
c001a06a:	6a 00                	push   0x0
c001a06c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a070:	e8 03 67 fe ff       	call   c0000778 <memset>
c001a075:	89 34 24             	mov    DWORD PTR [esp],esi
c001a078:	e8 17 67 fe ff       	call   c0000794 <strlen>
c001a07d:	83 c4 0c             	add    esp,0xc
c001a080:	40                   	inc    eax
c001a081:	50                   	push   eax
c001a082:	56                   	push   esi
c001a083:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a087:	e8 b8 66 fe ff       	call   c0000744 <memcpy>
c001a08c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a08e:	40                   	inc    eax
c001a08f:	89 03                	mov    DWORD PTR [ebx],eax
c001a091:	c1 e0 03             	shl    eax,0x3
c001a094:	5a                   	pop    edx
c001a095:	59                   	pop    ecx
c001a096:	50                   	push   eax
c001a097:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a09a:	e8 90 57 ff ff       	call   c000f82f <realloc>
c001a09f:	83 c4 0c             	add    esp,0xc
c001a0a2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a0a5:	6a 08                	push   0x8
c001a0a7:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a0ab:	52                   	push   edx
c001a0ac:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a0ae:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a0b2:	50                   	push   eax
c001a0b3:	e8 8c 66 fe ff       	call   c0000744 <memcpy>
c001a0b8:	83 c4 20             	add    esp,0x20
c001a0bb:	5b                   	pop    ebx
c001a0bc:	5e                   	pop    esi
c001a0bd:	5f                   	pop    edi
c001a0be:	c3                   	ret    
c001a0bf:	90                   	nop

c001a0c0 <EnvVarContainer::deleteEnv(char const*)>:
c001a0c0:	c3                   	ret    
c001a0c1:	90                   	nop

c001a0c2 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a0c2:	55                   	push   ebp
c001a0c3:	57                   	push   edi
c001a0c4:	56                   	push   esi
c001a0c5:	53                   	push   ebx
c001a0c6:	81 ec 38 01 00 00    	sub    esp,0x138
c001a0cc:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a0d3:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a0da:	68 14 01 00 00       	push   0x114
c001a0df:	e8 5f 57 ff ff       	call   c000f843 <malloc>
c001a0e4:	83 c4 0c             	add    esp,0xc
c001a0e7:	89 c7                	mov    edi,eax
c001a0e9:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a0ec:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a0f3:	50                   	push   eax
c001a0f4:	e8 fd 92 ff ff       	call   c00133f6 <File::File(char const*, Process*)>
c001a0f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0fc:	e8 c7 95 ff ff       	call   c00136c8 <File::exists()>
c001a101:	83 c4 10             	add    esp,0x10
c001a104:	84 c0                	test   al,al
c001a106:	75 31                	jne    c001a139 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a108:	51                   	push   ecx
c001a109:	51                   	push   ecx
c001a10a:	6a 12                	push   0x12
c001a10c:	57                   	push   edi
c001a10d:	e8 48 93 ff ff       	call   c001345a <File::open(FileOpenMode)>
c001a112:	8b 07                	mov    eax,DWORD PTR [edi]
c001a114:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a117:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a11a:	e8 75 66 fe ff       	call   c0000794 <strlen>
c001a11f:	5a                   	pop    edx
c001a120:	31 d2                	xor    edx,edx
c001a122:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a126:	51                   	push   ecx
c001a127:	55                   	push   ebp
c001a128:	52                   	push   edx
c001a129:	50                   	push   eax
c001a12a:	57                   	push   edi
c001a12b:	ff d3                	call   ebx
c001a12d:	83 c4 14             	add    esp,0x14
c001a130:	57                   	push   edi
c001a131:	e8 82 93 ff ff       	call   c00134b8 <File::close()>
c001a136:	83 c4 10             	add    esp,0x10
c001a139:	31 db                	xor    ebx,ebx
c001a13b:	50                   	push   eax
c001a13c:	31 ed                	xor    ebp,ebp
c001a13e:	68 00 01 00 00       	push   0x100
c001a143:	6a 00                	push   0x0
c001a145:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a149:	50                   	push   eax
c001a14a:	e8 29 66 fe ff       	call   c0000778 <memset>
c001a14f:	58                   	pop    eax
c001a150:	5a                   	pop    edx
c001a151:	6a 01                	push   0x1
c001a153:	57                   	push   edi
c001a154:	e8 01 93 ff ff       	call   c001345a <File::open(FileOpenMode)>
c001a159:	83 c4 10             	add    esp,0x10
c001a15c:	83 ec 0c             	sub    esp,0xc
c001a15f:	8b 07                	mov    eax,DWORD PTR [edi]
c001a161:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a165:	51                   	push   ecx
c001a166:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a16a:	52                   	push   edx
c001a16b:	6a 00                	push   0x0
c001a16d:	6a 01                	push   0x1
c001a16f:	57                   	push   edi
c001a170:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a173:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a177:	83 c4 20             	add    esp,0x20
c001a17a:	3c 0d                	cmp    al,0xd
c001a17c:	0f 84 12 01 00 00    	je     c001a294 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a182:	85 db                	test   ebx,ebx
c001a184:	0f 84 fd 00 00 00    	je     c001a287 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a18a:	3c 0a                	cmp    al,0xa
c001a18c:	74 13                	je     c001a1a1 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a18e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a193:	74 0c                	je     c001a1a1 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a195:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a19b:	0f 8e e6 00 00 00    	jle    c001a287 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a1a1:	83 ec 0c             	sub    esp,0xc
c001a1a4:	8d 53 01             	lea    edx,[ebx+0x1]
c001a1a7:	29 dd                	sub    ebp,ebx
c001a1a9:	52                   	push   edx
c001a1aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a1ae:	e8 90 56 ff ff       	call   c000f843 <malloc>
c001a1b3:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a1b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a1ba:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a1bd:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a1c1:	e8 7d 56 ff ff       	call   c000f843 <malloc>
c001a1c6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a1ca:	83 c4 0c             	add    esp,0xc
c001a1cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a1d1:	52                   	push   edx
c001a1d2:	6a 00                	push   0x0
c001a1d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1d8:	e8 9b 65 fe ff       	call   c0000778 <memset>
c001a1dd:	83 c4 0c             	add    esp,0xc
c001a1e0:	53                   	push   ebx
c001a1e1:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a1e5:	55                   	push   ebp
c001a1e6:	01 eb                	add    ebx,ebp
c001a1e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a1ec:	e8 53 65 fe ff       	call   c0000744 <memcpy>
c001a1f1:	83 c4 0c             	add    esp,0xc
c001a1f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a1f8:	51                   	push   ecx
c001a1f9:	6a 00                	push   0x0
c001a1fb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a1ff:	e8 74 65 fe ff       	call   c0000778 <memset>
c001a204:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a207:	e8 88 65 fe ff       	call   c0000794 <strlen>
c001a20c:	83 c4 0c             	add    esp,0xc
c001a20f:	50                   	push   eax
c001a210:	53                   	push   ebx
c001a211:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a215:	e8 2a 65 fe ff       	call   c0000744 <memcpy>
c001a21a:	5b                   	pop    ebx
c001a21b:	58                   	pop    eax
c001a21c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a220:	68 75 b9 02 c0       	push   0xc002b975
c001a225:	e8 73 8c ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001a22a:	8b 06                	mov    eax,DWORD PTR [esi]
c001a22c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a22f:	40                   	inc    eax
c001a230:	83 c4 10             	add    esp,0x10
c001a233:	89 06                	mov    DWORD PTR [esi],eax
c001a235:	85 d2                	test   edx,edx
c001a237:	75 0c                	jne    c001a245 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a239:	83 ec 0c             	sub    esp,0xc
c001a23c:	6a 08                	push   0x8
c001a23e:	e8 00 56 ff ff       	call   c000f843 <malloc>
c001a243:	eb 0c                	jmp    c001a251 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a245:	c1 e0 03             	shl    eax,0x3
c001a248:	51                   	push   ecx
c001a249:	51                   	push   ecx
c001a24a:	50                   	push   eax
c001a24b:	52                   	push   edx
c001a24c:	e8 de 55 ff ff       	call   c000f82f <realloc>
c001a251:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a254:	83 c4 10             	add    esp,0x10
c001a257:	31 db                	xor    ebx,ebx
c001a259:	52                   	push   edx
c001a25a:	6a 08                	push   0x8
c001a25c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a260:	50                   	push   eax
c001a261:	8b 16                	mov    edx,DWORD PTR [esi]
c001a263:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a266:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a26a:	50                   	push   eax
c001a26b:	e8 d4 64 fe ff       	call   c0000744 <memcpy>
c001a270:	83 c4 0c             	add    esp,0xc
c001a273:	68 00 01 00 00       	push   0x100
c001a278:	6a 00                	push   0x0
c001a27a:	55                   	push   ebp
c001a27b:	31 ed                	xor    ebp,ebp
c001a27d:	e8 f6 64 fe ff       	call   c0000778 <memset>
c001a282:	83 c4 10             	add    esp,0x10
c001a285:	eb 0d                	jmp    c001a294 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a287:	3c 3d                	cmp    al,0x3d
c001a289:	74 07                	je     c001a292 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a28b:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a28f:	45                   	inc    ebp
c001a290:	eb 02                	jmp    c001a294 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a292:	89 eb                	mov    ebx,ebp
c001a294:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a299:	0f 85 bd fe ff ff    	jne    c001a15c <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a29f:	50                   	push   eax
c001a2a0:	50                   	push   eax
c001a2a1:	ff 36                	push   DWORD PTR [esi]
c001a2a3:	68 83 b9 02 c0       	push   0xc002b983
c001a2a8:	e8 f0 8b ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001a2ad:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a2b3:	5b                   	pop    ebx
c001a2b4:	5e                   	pop    esi
c001a2b5:	5f                   	pop    edi
c001a2b6:	5d                   	pop    ebp
c001a2b7:	c3                   	ret    

c001a2b8 <EnvVarContainer::__loadSystem()>:
c001a2b8:	83 ec 10             	sub    esp,0x10
c001a2bb:	68 a0 d8 02 c0       	push   0xc002d8a0
c001a2c0:	68 ae b9 02 c0       	push   0xc002b9ae
c001a2c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2c9:	e8 f4 fd ff ff       	call   c001a0c2 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a2ce:	83 c4 1c             	add    esp,0x1c
c001a2d1:	c3                   	ret    

c001a2d2 <EnvVarContainer::__loadUser()>:
c001a2d2:	c3                   	ret    
c001a2d3:	90                   	nop

c001a2d4 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a2d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a2de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a2e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a2e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a2f4:	90                   	nop
c001a2f5:	c3                   	ret    

c001a2f6 <EnvVarContainer::~EnvVarContainer()>:
c001a2f6:	83 ec 0c             	sub    esp,0xc
c001a2f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a300:	85 c0                	test   eax,eax
c001a302:	74 1d                	je     c001a321 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a308:	8b 00                	mov    eax,DWORD PTR [eax]
c001a30a:	85 c0                	test   eax,eax
c001a30c:	74 13                	je     c001a321 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a30e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a312:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a315:	83 ec 0c             	sub    esp,0xc
c001a318:	50                   	push   eax
c001a319:	e8 35 55 ff ff       	call   c000f853 <free>
c001a31e:	83 c4 10             	add    esp,0x10
c001a321:	90                   	nop
c001a322:	83 c4 0c             	add    esp,0xc
c001a325:	c3                   	ret    

c001a326 <Krnl::getEnv(Process*, char const*)>:
c001a326:	53                   	push   ebx
c001a327:	83 ec 08             	sub    esp,0x8
c001a32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a32e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a332:	39 05 d4 18 03 c0    	cmp    DWORD PTR ds:0xc00318d4,eax
c001a338:	74 04                	je     c001a33e <Krnl::getEnv(Process*, char const*)+0x18>
c001a33a:	85 c0                	test   eax,eax
c001a33c:	75 0b                	jne    c001a349 <Krnl::getEnv(Process*, char const*)+0x23>
c001a33e:	a1 b4 0e 03 c0       	mov    eax,ds:0xc0030eb4
c001a343:	85 c0                	test   eax,eax
c001a345:	75 19                	jne    c001a360 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a347:	eb 27                	jmp    c001a370 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a349:	52                   	push   edx
c001a34a:	52                   	push   edx
c001a34b:	53                   	push   ebx
c001a34c:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a352:	e8 5f fc ff ff       	call   c0019fb6 <EnvVarContainer::getEnv(char const*)>
c001a357:	83 c4 10             	add    esp,0x10
c001a35a:	85 c0                	test   eax,eax
c001a35c:	75 28                	jne    c001a386 <Krnl::getEnv(Process*, char const*)+0x60>
c001a35e:	eb de                	jmp    c001a33e <Krnl::getEnv(Process*, char const*)+0x18>
c001a360:	52                   	push   edx
c001a361:	52                   	push   edx
c001a362:	53                   	push   ebx
c001a363:	50                   	push   eax
c001a364:	e8 4d fc ff ff       	call   c0019fb6 <EnvVarContainer::getEnv(char const*)>
c001a369:	83 c4 10             	add    esp,0x10
c001a36c:	85 c0                	test   eax,eax
c001a36e:	75 16                	jne    c001a386 <Krnl::getEnv(Process*, char const*)+0x60>
c001a370:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a374:	a1 b8 0e 03 c0       	mov    eax,ds:0xc0030eb8
c001a379:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a37d:	83 c4 08             	add    esp,0x8
c001a380:	5b                   	pop    ebx
c001a381:	e9 30 fc ff ff       	jmp    c0019fb6 <EnvVarContainer::getEnv(char const*)>
c001a386:	83 c4 08             	add    esp,0x8
c001a389:	5b                   	pop    ebx
c001a38a:	c3                   	ret    

c001a38b <Krnl::setEnvSystem(char const*, char const*)>:
c001a38b:	83 ec 10             	sub    esp,0x10
c001a38e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a392:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a396:	ff 35 b8 0e 03 c0    	push   DWORD PTR ds:0xc0030eb8
c001a39c:	e8 53 fc ff ff       	call   c0019ff4 <EnvVarContainer::setEnv(char const*, char const*)>
c001a3a1:	83 c4 1c             	add    esp,0x1c
c001a3a4:	c3                   	ret    

c001a3a5 <Krnl::setEnvUser(char const*, char const*)>:
c001a3a5:	a1 b4 0e 03 c0       	mov    eax,ds:0xc0030eb4
c001a3aa:	85 c0                	test   eax,eax
c001a3ac:	74 15                	je     c001a3c3 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a3ae:	83 ec 10             	sub    esp,0x10
c001a3b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3b9:	50                   	push   eax
c001a3ba:	e8 35 fc ff ff       	call   c0019ff4 <EnvVarContainer::setEnv(char const*, char const*)>
c001a3bf:	83 c4 1c             	add    esp,0x1c
c001a3c2:	c3                   	ret    
c001a3c3:	c3                   	ret    

c001a3c4 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a3c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3c8:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a3ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a3d2:	e9 1d fc ff ff       	jmp    c0019ff4 <EnvVarContainer::setEnv(char const*, char const*)>

c001a3d7 <Krnl::deleteEnvSystem(char const*)>:
c001a3d7:	c3                   	ret    

c001a3d8 <Krnl::deleteEnvUser(char const*)>:
c001a3d8:	c3                   	ret    

c001a3d9 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a3d9:	c3                   	ret    

c001a3da <Krnl::newProcessEnv(Process*)>:
c001a3da:	83 ec 28             	sub    esp,0x28
c001a3dd:	6a 0c                	push   0xc
c001a3df:	e8 5f 54 ff ff       	call   c000f843 <malloc>
c001a3e4:	5a                   	pop    edx
c001a3e5:	59                   	pop    ecx
c001a3e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a3ea:	50                   	push   eax
c001a3eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3ef:	e8 e0 fe ff ff       	call   c001a2d4 <EnvVarContainer::EnvVarContainer(Process*)>
c001a3f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3f8:	83 c4 2c             	add    esp,0x2c
c001a3fb:	c3                   	ret    

c001a3fc <Krnl::copyProcessEnv(Process*, Process*)>:
c001a3fc:	56                   	push   esi
c001a3fd:	53                   	push   ebx
c001a3fe:	83 ec 10             	sub    esp,0x10
c001a401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a405:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a40b:	6a 0c                	push   0xc
c001a40d:	e8 31 54 ff ff       	call   c000f843 <malloc>
c001a412:	89 c3                	mov    ebx,eax
c001a414:	58                   	pop    eax
c001a415:	5a                   	pop    edx
c001a416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a41a:	53                   	push   ebx
c001a41b:	e8 b4 fe ff ff       	call   c001a2d4 <EnvVarContainer::EnvVarContainer(Process*)>
c001a420:	8b 06                	mov    eax,DWORD PTR [esi]
c001a422:	89 03                	mov    DWORD PTR [ebx],eax
c001a424:	c1 e0 03             	shl    eax,0x3
c001a427:	89 04 24             	mov    DWORD PTR [esp],eax
c001a42a:	e8 14 54 ff ff       	call   c000f843 <malloc>
c001a42f:	83 c4 0c             	add    esp,0xc
c001a432:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a435:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a437:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a43e:	52                   	push   edx
c001a43f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a442:	50                   	push   eax
c001a443:	e8 fc 62 fe ff       	call   c0000744 <memcpy>
c001a448:	89 d8                	mov    eax,ebx
c001a44a:	83 c4 14             	add    esp,0x14
c001a44d:	5b                   	pop    ebx
c001a44e:	5e                   	pop    esi
c001a44f:	c3                   	ret    

c001a450 <Krnl::loadSystemEnv()>:
c001a450:	53                   	push   ebx
c001a451:	83 ec 14             	sub    esp,0x14
c001a454:	6a 0c                	push   0xc
c001a456:	e8 e8 53 ff ff       	call   c000f843 <malloc>
c001a45b:	89 c3                	mov    ebx,eax
c001a45d:	58                   	pop    eax
c001a45e:	5a                   	pop    edx
c001a45f:	ff 35 d4 18 03 c0    	push   DWORD PTR ds:0xc00318d4
c001a465:	53                   	push   ebx
c001a466:	e8 69 fe ff ff       	call   c001a2d4 <EnvVarContainer::EnvVarContainer(Process*)>
c001a46b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a46e:	89 1d b8 0e 03 c0    	mov    DWORD PTR ds:0xc0030eb8,ebx
c001a474:	e8 3f fe ff ff       	call   c001a2b8 <EnvVarContainer::__loadSystem()>
c001a479:	83 c4 18             	add    esp,0x18
c001a47c:	5b                   	pop    ebx
c001a47d:	c3                   	ret    

c001a47e <Krnl::loadUserEnv()>:
c001a47e:	53                   	push   ebx
c001a47f:	83 ec 14             	sub    esp,0x14
c001a482:	6a 0c                	push   0xc
c001a484:	e8 ba 53 ff ff       	call   c000f843 <malloc>
c001a489:	89 c3                	mov    ebx,eax
c001a48b:	58                   	pop    eax
c001a48c:	5a                   	pop    edx
c001a48d:	ff 35 d4 18 03 c0    	push   DWORD PTR ds:0xc00318d4
c001a493:	53                   	push   ebx
c001a494:	e8 3b fe ff ff       	call   c001a2d4 <EnvVarContainer::EnvVarContainer(Process*)>
c001a499:	89 1d b4 0e 03 c0    	mov    DWORD PTR ds:0xc0030eb4,ebx
c001a49f:	83 c4 18             	add    esp,0x18
c001a4a2:	5b                   	pop    ebx
c001a4a3:	c3                   	ret    

c001a4a4 <Krnl::flushEnv()>:
c001a4a4:	c3                   	ret    

c001a4a5 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a4a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4a9:	8b 15 b4 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030eb4
c001a4af:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a4b5:	a1 b8 0e 03 c0       	mov    eax,ds:0xc0030eb8
c001a4ba:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4bc:	03 01                	add    eax,DWORD PTR [ecx]
c001a4be:	85 d2                	test   edx,edx
c001a4c0:	74 02                	je     c001a4c4 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a4c2:	03 02                	add    eax,DWORD PTR [edx]
c001a4c4:	c3                   	ret    

c001a4c5 <Krnl::getProcessEnvPair(Process*, int)>:
c001a4c5:	57                   	push   edi
c001a4c6:	8b 0d b4 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030eb4
c001a4cc:	56                   	push   esi
c001a4cd:	85 c9                	test   ecx,ecx
c001a4cf:	53                   	push   ebx
c001a4d0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a4d4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4d8:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a4de:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a4e2:	8b 02                	mov    eax,DWORD PTR [edx]
c001a4e4:	75 47                	jne    c001a52d <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a4e6:	39 c3                	cmp    ebx,eax
c001a4e8:	7c 47                	jl     c001a531 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a4ea:	8b 15 b8 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030eb8
c001a4f0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a4f2:	01 c1                	add    ecx,eax
c001a4f4:	39 d9                	cmp    ecx,ebx
c001a4f6:	7e 6c                	jle    c001a564 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a4f8:	51                   	push   ecx
c001a4f9:	89 d9                	mov    ecx,ebx
c001a4fb:	29 c1                	sub    ecx,eax
c001a4fd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a500:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a504:	53                   	push   ebx
c001a505:	68 d0 b9 02 c0       	push   0xc002b9d0
c001a50a:	e8 8e 89 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001a50f:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a515:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a517:	a1 b8 0e 03 c0       	mov    eax,ds:0xc0030eb8
c001a51c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a51f:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a523:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a526:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a529:	89 06                	mov    DWORD PTR [esi],eax
c001a52b:	eb 51                	jmp    c001a57e <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a52d:	39 c3                	cmp    ebx,eax
c001a52f:	7d 05                	jge    c001a536 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a531:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a534:	eb 20                	jmp    c001a556 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a536:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a538:	8d 14 07             	lea    edx,[edi+eax*1]
c001a53b:	39 da                	cmp    edx,ebx
c001a53d:	7e 04                	jle    c001a543 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a53f:	29 c3                	sub    ebx,eax
c001a541:	eb 10                	jmp    c001a553 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a543:	8b 0d b8 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030eb8
c001a549:	03 11                	add    edx,DWORD PTR [ecx]
c001a54b:	39 da                	cmp    edx,ebx
c001a54d:	7e 15                	jle    c001a564 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a54f:	29 c3                	sub    ebx,eax
c001a551:	29 fb                	sub    ebx,edi
c001a553:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a556:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a55a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a55d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a560:	89 06                	mov    DWORD PTR [esi],eax
c001a562:	eb 1d                	jmp    c001a581 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a564:	83 ec 0c             	sub    esp,0xc
c001a567:	68 e4 b9 02 c0       	push   0xc002b9e4
c001a56c:	e8 18 00 00 00       	call   c001a589 <Krnl::panic(char const*)>
c001a571:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a577:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a57e:	83 c4 10             	add    esp,0x10
c001a581:	89 f0                	mov    eax,esi
c001a583:	5b                   	pop    ebx
c001a584:	5e                   	pop    esi
c001a585:	5f                   	pop    edi
c001a586:	c2 04 00             	ret    0x4

c001a589 <Krnl::panic(char const*)>:
c001a589:	55                   	push   ebp
c001a58a:	89 e5                	mov    ebp,esp
c001a58c:	53                   	push   ebx
c001a58d:	83 ec 0c             	sub    esp,0xc
c001a590:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a593:	fa                   	cli    
c001a594:	c6 05 c4 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ec4,0x1
c001a59b:	53                   	push   ebx
c001a59c:	c6 05 a4 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d2a4,0x0
c001a5a3:	68 fe b9 02 c0       	push   0xc002b9fe
c001a5a8:	e8 f0 88 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001a5ad:	58                   	pop    eax
c001a5ae:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a5b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5b9:	e8 37 67 ff ff       	call   c0010cf5 <setActiveTerminal(VgaText*)>
c001a5be:	83 c4 0c             	add    esp,0xc
c001a5c1:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a5c6:	6a 01                	push   0x1
c001a5c8:	6a 0f                	push   0xf
c001a5ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5d0:	e8 51 61 ff ff       	call   c0010726 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a5d5:	58                   	pop    eax
c001a5d6:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a5db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5e1:	e8 b0 69 ff ff       	call   c0010f96 <VgaText::clearScreen()>
c001a5e6:	58                   	pop    eax
c001a5e7:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a5ec:	5a                   	pop    edx
c001a5ed:	68 17 ba 02 c0       	push   0xc002ba17
c001a5f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5f8:	e8 17 6b ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a5fd:	59                   	pop    ecx
c001a5fe:	58                   	pop    eax
c001a5ff:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a604:	68 bc ba 02 c0       	push   0xc002babc
c001a609:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a60f:	e8 00 6b ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a614:	58                   	pop    eax
c001a615:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a61a:	5a                   	pop    edx
c001a61b:	68 33 ba 02 c0       	push   0xc002ba33
c001a620:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a626:	e8 e9 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a62b:	59                   	pop    ecx
c001a62c:	58                   	pop    eax
c001a62d:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a632:	53                   	push   ebx
c001a633:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a639:	e8 d6 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a63e:	58                   	pop    eax
c001a63f:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a644:	5a                   	pop    edx
c001a645:	68 53 ba 02 c0       	push   0xc002ba53
c001a64a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a650:	e8 bf 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a655:	a1 c0 0e 03 c0       	mov    eax,ds:0xc0030ec0
c001a65a:	83 c4 10             	add    esp,0x10
c001a65d:	85 c0                	test   eax,eax
c001a65f:	74 02                	je     c001a663 <Krnl::panic(char const*)+0xda>
c001a661:	ff d0                	call   eax
c001a663:	83 ec 0c             	sub    esp,0xc
c001a666:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a669:	e8 fd 2f 00 00       	call   c001d66b <Thr::getDriverNameFromAddress(unsigned long)>
c001a66e:	83 c4 10             	add    esp,0x10
c001a671:	89 c3                	mov    ebx,eax
c001a673:	85 c0                	test   eax,eax
c001a675:	0f 84 50 02 00 00    	je     c001a8cb <Krnl::panic(char const*)+0x342>
c001a67b:	83 ec 08             	sub    esp,0x8
c001a67e:	8b 15 d4 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318d4
c001a684:	68 f8 ba 02 c0       	push   0xc002baf8
c001a689:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a68f:	e8 80 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a694:	58                   	pop    eax
c001a695:	5a                   	pop    edx
c001a696:	8b 15 d4 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318d4
c001a69c:	68 33 ba 02 c0       	push   0xc002ba33
c001a6a1:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a6a7:	e8 68 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a6ac:	59                   	pop    ecx
c001a6ad:	58                   	pop    eax
c001a6ae:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a6b3:	53                   	push   ebx
c001a6b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ba:	e8 55 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a6bf:	83 c4 10             	add    esp,0x10
c001a6c2:	83 ec 08             	sub    esp,0x8
c001a6c5:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a6ca:	68 52 ba 02 c0       	push   0xc002ba52
c001a6cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6d5:	e8 3a 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a6da:	58                   	pop    eax
c001a6db:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a6e0:	5a                   	pop    edx
c001a6e1:	68 50 bb 02 c0       	push   0xc002bb50
c001a6e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ec:	e8 23 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a6f1:	59                   	pop    ecx
c001a6f2:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a6f7:	5b                   	pop    ebx
c001a6f8:	68 90 bb 02 c0       	push   0xc002bb90
c001a6fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a703:	e8 0c 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a708:	58                   	pop    eax
c001a709:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a70e:	5a                   	pop    edx
c001a70f:	68 3e ba 02 c0       	push   0xc002ba3e
c001a714:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a71a:	e8 f5 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a71f:	59                   	pop    ecx
c001a720:	5b                   	pop    ebx
c001a721:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a724:	68 56 ba 02 c0       	push   0xc002ba56
c001a729:	e8 6f 87 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001a72e:	58                   	pop    eax
c001a72f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a732:	5a                   	pop    edx
c001a733:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a736:	68 5f ba 02 c0       	push   0xc002ba5f
c001a73b:	e8 5d 87 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001a740:	59                   	pop    ecx
c001a741:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a744:	5b                   	pop    ebx
c001a745:	8b 00                	mov    eax,DWORD PTR [eax]
c001a747:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a74a:	68 68 ba 02 c0       	push   0xc002ba68
c001a74f:	e8 49 87 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001a754:	58                   	pop    eax
c001a755:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a75a:	5a                   	pop    edx
c001a75b:	68 d4 bb 02 c0       	push   0xc002bbd4
c001a760:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a766:	e8 a9 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a76b:	59                   	pop    ecx
c001a76c:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a771:	5b                   	pop    ebx
c001a772:	68 71 ba 02 c0       	push   0xc002ba71
c001a777:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a77d:	e8 92 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a782:	0f 20 c0             	mov    eax,cr0
c001a785:	5a                   	pop    edx
c001a786:	59                   	pop    ecx
c001a787:	50                   	push   eax
c001a788:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a78d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a793:	e8 a2 69 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a798:	5b                   	pop    ebx
c001a799:	58                   	pop    eax
c001a79a:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a79f:	68 7b ba 02 c0       	push   0xc002ba7b
c001a7a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7aa:	e8 65 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a7af:	0f 20 d0             	mov    eax,cr2
c001a7b2:	5a                   	pop    edx
c001a7b3:	59                   	pop    ecx
c001a7b4:	50                   	push   eax
c001a7b5:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a7ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7c0:	e8 75 69 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a7c5:	5b                   	pop    ebx
c001a7c6:	58                   	pop    eax
c001a7c7:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a7cc:	68 85 ba 02 c0       	push   0xc002ba85
c001a7d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7d7:	e8 38 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a7dc:	0f 20 d8             	mov    eax,cr3
c001a7df:	5a                   	pop    edx
c001a7e0:	59                   	pop    ecx
c001a7e1:	50                   	push   eax
c001a7e2:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a7e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ed:	e8 48 69 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a7f2:	5b                   	pop    ebx
c001a7f3:	58                   	pop    eax
c001a7f4:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a7f9:	68 98 ba 02 c0       	push   0xc002ba98
c001a7fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a804:	e8 0b 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a809:	0f 20 e0             	mov    eax,cr4
c001a80c:	5a                   	pop    edx
c001a80d:	59                   	pop    ecx
c001a80e:	50                   	push   eax
c001a80f:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a814:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a81a:	e8 1b 69 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a81f:	5b                   	pop    ebx
c001a820:	58                   	pop    eax
c001a821:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a826:	68 a2 ba 02 c0       	push   0xc002baa2
c001a82b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a831:	e8 de 68 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a836:	5a                   	pop    edx
c001a837:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a83c:	59                   	pop    ecx
c001a83d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a843:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a846:	50                   	push   eax
c001a847:	e8 ee 68 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a84c:	5b                   	pop    ebx
c001a84d:	58                   	pop    eax
c001a84e:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a853:	68 b9 ba 02 c0       	push   0xc002bab9
c001a858:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a85e:	e8 b1 68 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a863:	5a                   	pop    edx
c001a864:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a869:	59                   	pop    ecx
c001a86a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a870:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a873:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a876:	50                   	push   eax
c001a877:	e8 be 68 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a87c:	5b                   	pop    ebx
c001a87d:	58                   	pop    eax
c001a87e:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a883:	68 b9 ba 02 c0       	push   0xc002bab9
c001a888:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a88e:	e8 81 68 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a893:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a898:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a89b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8a1:	8b 12                	mov    edx,DWORD PTR [edx]
c001a8a3:	59                   	pop    ecx
c001a8a4:	5b                   	pop    ebx
c001a8a5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a8a8:	50                   	push   eax
c001a8a9:	e8 8c 68 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a8ae:	83 c4 10             	add    esp,0x10
c001a8b1:	b2 fe                	mov    dl,0xfe
c001a8b3:	e4 60                	in     al,0x60
c001a8b5:	3c 1c                	cmp    al,0x1c
c001a8b7:	74 04                	je     c001a8bd <Krnl::panic(char const*)+0x334>
c001a8b9:	3c 5a                	cmp    al,0x5a
c001a8bb:	75 f6                	jne    c001a8b3 <Krnl::panic(char const*)+0x32a>
c001a8bd:	e4 64                	in     al,0x64
c001a8bf:	a8 02                	test   al,0x2
c001a8c1:	75 fa                	jne    c001a8bd <Krnl::panic(char const*)+0x334>
c001a8c3:	88 d0                	mov    al,dl
c001a8c5:	e6 64                	out    0x64,al
c001a8c7:	fa                   	cli    
c001a8c8:	f4                   	hlt    
c001a8c9:	eb e8                	jmp    c001a8b3 <Krnl::panic(char const*)+0x32a>
c001a8cb:	50                   	push   eax
c001a8cc:	50                   	push   eax
c001a8cd:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a8d2:	68 24 bb 02 c0       	push   0xc002bb24
c001a8d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8dd:	e8 32 68 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a8e2:	58                   	pop    eax
c001a8e3:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a8e8:	5a                   	pop    edx
c001a8e9:	68 33 ba 02 c0       	push   0xc002ba33
c001a8ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8f4:	e8 1b 68 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a8f9:	59                   	pop    ecx
c001a8fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8ff:	5b                   	pop    ebx
c001a900:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a903:	83 c0 0c             	add    eax,0xc
c001a906:	50                   	push   eax
c001a907:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001a90c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a912:	e8 fd 67 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a917:	83 c4 10             	add    esp,0x10
c001a91a:	e9 a3 fd ff ff       	jmp    c001a6c2 <Krnl::panic(char const*)+0x139>

c001a91f <Net::switchEndian16(unsigned short)>:
c001a91f:	83 ec 04             	sub    esp,0x4
c001a922:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a926:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a92a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a92e:	c1 f8 08             	sar    eax,0x8
c001a931:	89 c2                	mov    edx,eax
c001a933:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a937:	c1 e0 08             	shl    eax,0x8
c001a93a:	09 d0                	or     eax,edx
c001a93c:	83 c4 04             	add    esp,0x4
c001a93f:	c3                   	ret    

c001a940 <Net::switchEndian32(unsigned int)>:
c001a940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a944:	c1 e8 18             	shr    eax,0x18
c001a947:	89 c2                	mov    edx,eax
c001a949:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a94d:	c1 e0 08             	shl    eax,0x8
c001a950:	25 00 00 ff 00       	and    eax,0xff0000
c001a955:	09 c2                	or     edx,eax
c001a957:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a95b:	c1 e8 08             	shr    eax,0x8
c001a95e:	25 00 ff 00 00       	and    eax,0xff00
c001a963:	09 c2                	or     edx,eax
c001a965:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a969:	c1 e0 18             	shl    eax,0x18
c001a96c:	09 d0                	or     eax,edx
c001a96e:	c3                   	ret    

c001a96f <Net::crc32Calc(unsigned char*, int)>:
c001a96f:	83 ec 10             	sub    esp,0x10
c001a972:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a977:	75 07                	jne    c001a980 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a979:	b8 00 00 00 00       	mov    eax,0x0
c001a97e:	eb 7c                	jmp    c001a9fc <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a980:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a985:	7f 07                	jg     c001a98e <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a987:	b8 00 00 00 00       	mov    eax,0x0
c001a98c:	eb 6e                	jmp    c001a9fc <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a98e:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a996:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a99e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9a2:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a9a6:	7d 4e                	jge    c001a9f6 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a9a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a9ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9b0:	01 d0                	add    eax,edx
c001a9b2:	8a 00                	mov    al,BYTE PTR [eax]
c001a9b4:	0f b6 c0             	movzx  eax,al
c001a9b7:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a9bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9c3:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a9c8:	7f 26                	jg     c001a9f0 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a9ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ce:	83 e0 01             	and    eax,0x1
c001a9d1:	74 0d                	je     c001a9e0 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a9d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9d7:	d1 e8                	shr    eax,1
c001a9d9:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a9de:	eb 06                	jmp    c001a9e6 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a9e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9e4:	d1 e8                	shr    eax,1
c001a9e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a9ea:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a9ee:	eb d3                	jmp    c001a9c3 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a9f0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a9f4:	eb a8                	jmp    c001a99e <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a9f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9fa:	f7 d0                	not    eax
c001a9fc:	83 c4 10             	add    esp,0x10
c001a9ff:	c3                   	ret    

c001aa00 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa00:	83 ec 1c             	sub    esp,0x1c
c001aa03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa0b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa13:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aa18:	7f 14                	jg     c001aa2e <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aa1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa1e:	8d 50 01             	lea    edx,[eax+0x1]
c001aa21:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa25:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aa28:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa2c:	eb e5                	jmp    c001aa13 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aa2e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa32:	8d 50 01             	lea    edx,[eax+0x1]
c001aa35:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa39:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aa3c:	83 ec 04             	sub    esp,0x4
c001aa3f:	6a 06                	push   0x6
c001aa41:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aa45:	50                   	push   eax
c001aa46:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa4a:	e8 f5 5c fe ff       	call   c0000744 <memcpy>
c001aa4f:	83 c4 10             	add    esp,0x10
c001aa52:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa57:	83 ec 04             	sub    esp,0x4
c001aa5a:	6a 06                	push   0x6
c001aa5c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aa60:	50                   	push   eax
c001aa61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aa65:	e8 da 5c fe ff       	call   c0000744 <memcpy>
c001aa6a:	83 c4 10             	add    esp,0x10
c001aa6d:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aa72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa76:	0f b7 c0             	movzx  eax,ax
c001aa79:	c1 f8 08             	sar    eax,0x8
c001aa7c:	89 c1                	mov    ecx,eax
c001aa7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa82:	8d 50 01             	lea    edx,[eax+0x1]
c001aa85:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa89:	88 ca                	mov    dl,cl
c001aa8b:	88 10                	mov    BYTE PTR [eax],dl
c001aa8d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aa91:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa95:	8d 48 01             	lea    ecx,[eax+0x1]
c001aa98:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001aa9c:	88 10                	mov    BYTE PTR [eax],dl
c001aa9e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aaa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaa6:	83 ec 04             	sub    esp,0x4
c001aaa9:	52                   	push   edx
c001aaaa:	50                   	push   eax
c001aaab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aaaf:	e8 90 5c fe ff       	call   c0000744 <memcpy>
c001aab4:	83 c4 10             	add    esp,0x10
c001aab7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aabb:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001aabf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aac3:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001aac7:	83 ec 08             	sub    esp,0x8
c001aaca:	50                   	push   eax
c001aacb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001aacf:	e8 9b fe ff ff       	call   c001a96f <Net::crc32Calc(unsigned char*, int)>
c001aad4:	83 c4 10             	add    esp,0x10
c001aad7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aadb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aadf:	c1 e8 18             	shr    eax,0x18
c001aae2:	89 c1                	mov    ecx,eax
c001aae4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aae8:	8d 50 01             	lea    edx,[eax+0x1]
c001aaeb:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aaef:	88 ca                	mov    dl,cl
c001aaf1:	88 10                	mov    BYTE PTR [eax],dl
c001aaf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaf7:	c1 e8 10             	shr    eax,0x10
c001aafa:	89 c1                	mov    ecx,eax
c001aafc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab00:	8d 50 01             	lea    edx,[eax+0x1]
c001ab03:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab07:	88 ca                	mov    dl,cl
c001ab09:	88 10                	mov    BYTE PTR [eax],dl
c001ab0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab0f:	c1 e8 08             	shr    eax,0x8
c001ab12:	89 c1                	mov    ecx,eax
c001ab14:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab18:	8d 50 01             	lea    edx,[eax+0x1]
c001ab1b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab1f:	88 ca                	mov    dl,cl
c001ab21:	88 10                	mov    BYTE PTR [eax],dl
c001ab23:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab27:	8d 50 01             	lea    edx,[eax+0x1]
c001ab2a:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab32:	88 10                	mov    BYTE PTR [eax],dl
c001ab34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab38:	83 c4 1c             	add    esp,0x1c
c001ab3b:	c3                   	ret    

c001ab3c <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ab3c:	83 ec 2c             	sub    esp,0x2c
c001ab3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab43:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab47:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ab4c:	83 ec 04             	sub    esp,0x4
c001ab4f:	6a 06                	push   0x6
c001ab51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab55:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab59:	83 c0 0e             	add    eax,0xe
c001ab5c:	50                   	push   eax
c001ab5d:	e8 e2 5b fe ff       	call   c0000744 <memcpy>
c001ab62:	83 c4 10             	add    esp,0x10
c001ab65:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab6a:	83 ec 04             	sub    esp,0x4
c001ab6d:	6a 06                	push   0x6
c001ab6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab77:	83 c0 08             	add    eax,0x8
c001ab7a:	50                   	push   eax
c001ab7b:	e8 c4 5b fe ff       	call   c0000744 <memcpy>
c001ab80:	83 c4 10             	add    esp,0x10
c001ab83:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ab88:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab8c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab8f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab93:	8a 00                	mov    al,BYTE PTR [eax]
c001ab95:	0f b6 c0             	movzx  eax,al
c001ab98:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ab9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aba1:	8d 50 01             	lea    edx,[eax+0x1]
c001aba4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aba8:	8a 00                	mov    al,BYTE PTR [eax]
c001abaa:	0f b6 c0             	movzx  eax,al
c001abad:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001abb2:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001abb7:	c1 e0 08             	shl    eax,0x8
c001abba:	89 c2                	mov    edx,eax
c001abbc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001abc0:	09 d0                	or     eax,edx
c001abc2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001abc6:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001abca:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001abcf:	75 3a                	jne    c001ac0b <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001abd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abd5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abd8:	66 3d dc 05          	cmp    ax,0x5dc
c001abdc:	77 10                	ja     c001abee <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001abde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abe2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abe5:	0f b7 c0             	movzx  eax,ax
c001abe8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001abec:	eb 1d                	jmp    c001ac0b <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001abee:	83 ec 0c             	sub    esp,0xc
c001abf1:	68 fc bb 02 c0       	push   0xc002bbfc
c001abf6:	e8 a2 82 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001abfb:	83 c4 10             	add    esp,0x10
c001abfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac02:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ac06:	e9 c0 00 00 00       	jmp    c001accb <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ac0b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac13:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac15:	83 ec 04             	sub    esp,0x4
c001ac18:	52                   	push   edx
c001ac19:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac1d:	50                   	push   eax
c001ac1e:	e8 21 5b fe ff       	call   c0000744 <memcpy>
c001ac23:	83 c4 10             	add    esp,0x10
c001ac26:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac2a:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ac2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac32:	8d 50 01             	lea    edx,[eax+0x1]
c001ac35:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac39:	8a 00                	mov    al,BYTE PTR [eax]
c001ac3b:	0f b6 c0             	movzx  eax,al
c001ac3e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac42:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac46:	8d 50 01             	lea    edx,[eax+0x1]
c001ac49:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac4d:	8a 00                	mov    al,BYTE PTR [eax]
c001ac4f:	0f b6 c0             	movzx  eax,al
c001ac52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ac56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac5a:	8d 50 01             	lea    edx,[eax+0x1]
c001ac5d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac61:	8a 00                	mov    al,BYTE PTR [eax]
c001ac63:	0f b6 c0             	movzx  eax,al
c001ac66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac6e:	8d 50 01             	lea    edx,[eax+0x1]
c001ac71:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac75:	8a 00                	mov    al,BYTE PTR [eax]
c001ac77:	0f b6 c0             	movzx  eax,al
c001ac7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac82:	c1 e0 18             	shl    eax,0x18
c001ac85:	89 c2                	mov    edx,eax
c001ac87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac8b:	c1 e0 10             	shl    eax,0x10
c001ac8e:	09 c2                	or     edx,eax
c001ac90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac94:	c1 e0 08             	shl    eax,0x8
c001ac97:	09 d0                	or     eax,edx
c001ac99:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ac9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aca1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aca5:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001aca9:	83 e8 04             	sub    eax,0x4
c001acac:	83 ec 08             	sub    esp,0x8
c001acaf:	50                   	push   eax
c001acb0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001acb4:	e8 b6 fc ff ff       	call   c001a96f <Net::crc32Calc(unsigned char*, int)>
c001acb9:	83 c4 10             	add    esp,0x10
c001acbc:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001acc0:	0f 94 c2             	sete   dl
c001acc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acc7:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001acca:	90                   	nop
c001accb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001accf:	83 c4 2c             	add    esp,0x2c
c001acd2:	c2 04 00             	ret    0x4

c001acd5 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001acd5:	55                   	push   ebp
c001acd6:	57                   	push   edi
c001acd7:	56                   	push   esi
c001acd8:	53                   	push   ebx
c001acd9:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001acdf:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ace6:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ace8:	8d 6e 01             	lea    ebp,[esi+0x1]
c001aceb:	80 fb 40             	cmp    bl,0x40
c001acee:	75 1b                	jne    c001ad0b <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001acf0:	8a 16                	mov    dl,BYTE PTR [esi]
c001acf2:	84 d2                	test   dl,dl
c001acf4:	0f 84 f1 00 00 00    	je     c001adeb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acfa:	8d 46 01             	lea    eax,[esi+0x1]
c001acfd:	80 fa 3a             	cmp    dl,0x3a
c001ad00:	74 04                	je     c001ad06 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad02:	89 c6                	mov    esi,eax
c001ad04:	eb ea                	jmp    c001acf0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad06:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad09:	89 c6                	mov    esi,eax
c001ad0b:	50                   	push   eax
c001ad0c:	6a 40                	push   0x40
c001ad0e:	6a 00                	push   0x0
c001ad10:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad14:	50                   	push   eax
c001ad15:	e8 5e 5a fe ff       	call   c0000778 <memset>
c001ad1a:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad21:	31 c0                	xor    eax,eax
c001ad23:	83 c4 10             	add    esp,0x10
c001ad26:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad28:	84 c9                	test   cl,cl
c001ad2a:	0f 84 bb 00 00 00    	je     c001adeb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad30:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad35:	0f 8f b0 00 00 00    	jg     c001adeb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad3b:	80 f9 0a             	cmp    cl,0xa
c001ad3e:	0f 85 98 00 00 00    	jne    c001addc <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad44:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ad49:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ad4d:	a8 df                	test   al,0xdf
c001ad4f:	0f 94 c1             	sete   cl
c001ad52:	3c 23                	cmp    al,0x23
c001ad54:	0f 94 c2             	sete   dl
c001ad57:	08 d1                	or     cl,dl
c001ad59:	75 4a                	jne    c001ada5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad5b:	8d 50 f7             	lea    edx,[eax-0x9]
c001ad5e:	80 fa 01             	cmp    dl,0x1
c001ad61:	76 42                	jbe    c001ada5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad63:	3c 5b                	cmp    al,0x5b
c001ad65:	75 42                	jne    c001ada9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ad67:	80 fb 40             	cmp    bl,0x40
c001ad6a:	75 39                	jne    c001ada5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad6c:	83 ec 0c             	sub    esp,0xc
c001ad6f:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ad73:	52                   	push   edx
c001ad74:	e8 1b 5a fe ff       	call   c0000794 <strlen>
c001ad79:	83 c4 10             	add    esp,0x10
c001ad7c:	83 f8 3f             	cmp    eax,0x3f
c001ad7f:	77 6a                	ja     c001adeb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad81:	50                   	push   eax
c001ad82:	50                   	push   eax
c001ad83:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ad87:	52                   	push   edx
c001ad88:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad8c:	52                   	push   edx
c001ad8d:	e8 a2 5a fe ff       	call   c0000834 <strcpy>
c001ad92:	58                   	pop    eax
c001ad93:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad97:	52                   	push   edx
c001ad98:	e8 f7 59 fe ff       	call   c0000794 <strlen>
c001ad9d:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ada2:	83 c4 10             	add    esp,0x10
c001ada5:	31 d2                	xor    edx,edx
c001ada7:	eb 3a                	jmp    c001ade3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ada9:	80 fb 40             	cmp    bl,0x40
c001adac:	74 06                	je     c001adb4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001adae:	8d 44 24 58          	lea    eax,[esp+0x58]
c001adb2:	eb 20                	jmp    c001add4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001adb4:	50                   	push   eax
c001adb5:	50                   	push   eax
c001adb6:	55                   	push   ebp
c001adb7:	8d 44 24 24          	lea    eax,[esp+0x24]
c001adbb:	50                   	push   eax
c001adbc:	e8 ff 5a fe ff       	call   c00008c0 <strcmp>
c001adc1:	83 c4 10             	add    esp,0x10
c001adc4:	85 c0                	test   eax,eax
c001adc6:	75 dd                	jne    c001ada5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adc8:	eb e4                	jmp    c001adae <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001adca:	8d 50 01             	lea    edx,[eax+0x1]
c001adcd:	80 f9 3d             	cmp    cl,0x3d
c001add0:	74 1d                	je     c001adef <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001add2:	89 d0                	mov    eax,edx
c001add4:	8a 08                	mov    cl,BYTE PTR [eax]
c001add6:	84 c9                	test   cl,cl
c001add8:	75 f0                	jne    c001adca <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001adda:	eb 0f                	jmp    c001adeb <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001addc:	8d 50 01             	lea    edx,[eax+0x1]
c001addf:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ade3:	47                   	inc    edi
c001ade4:	89 d0                	mov    eax,edx
c001ade6:	e9 3b ff ff ff       	jmp    c001ad26 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001adeb:	31 c0                	xor    eax,eax
c001aded:	eb 33                	jmp    c001ae22 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001adef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001adf3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001adf6:	50                   	push   eax
c001adf7:	50                   	push   eax
c001adf8:	8d 44 24 60          	lea    eax,[esp+0x60]
c001adfc:	50                   	push   eax
c001adfd:	56                   	push   esi
c001adfe:	e8 bd 5a fe ff       	call   c00008c0 <strcmp>
c001ae03:	83 c4 10             	add    esp,0x10
c001ae06:	85 c0                	test   eax,eax
c001ae08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae0c:	75 97                	jne    c001ada5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae0e:	51                   	push   ecx
c001ae0f:	51                   	push   ecx
c001ae10:	52                   	push   edx
c001ae11:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae18:	e8 17 5a fe ff       	call   c0000834 <strcpy>
c001ae1d:	83 c4 10             	add    esp,0x10
c001ae20:	b0 01                	mov    al,0x1
c001ae22:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae28:	5b                   	pop    ebx
c001ae29:	5e                   	pop    esi
c001ae2a:	5f                   	pop    edi
c001ae2b:	5d                   	pop    ebp
c001ae2c:	c3                   	ret    

c001ae2d <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae2d:	57                   	push   edi
c001ae2e:	56                   	push   esi
c001ae2f:	53                   	push   ebx
c001ae30:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae36:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae3d:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae44:	53                   	push   ebx
c001ae45:	e8 4a 59 fe ff       	call   c0000794 <strlen>
c001ae4a:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae4d:	89 c7                	mov    edi,eax
c001ae4f:	e8 40 59 fe ff       	call   c0000794 <strlen>
c001ae54:	83 c4 10             	add    esp,0x10
c001ae57:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ae5b:	3d ff 00 00 00       	cmp    eax,0xff
c001ae60:	0f 87 d3 00 00 00    	ja     c001af39 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae66:	57                   	push   edi
c001ae67:	57                   	push   edi
c001ae68:	56                   	push   esi
c001ae69:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ae6d:	56                   	push   esi
c001ae6e:	e8 c1 59 fe ff       	call   c0000834 <strcpy>
c001ae73:	58                   	pop    eax
c001ae74:	5a                   	pop    edx
c001ae75:	68 45 c1 02 c0       	push   0xc002c145
c001ae7a:	56                   	push   esi
c001ae7b:	e8 f4 5a fe ff       	call   c0000974 <strcat>
c001ae80:	59                   	pop    ecx
c001ae81:	5f                   	pop    edi
c001ae82:	53                   	push   ebx
c001ae83:	56                   	push   esi
c001ae84:	e8 eb 5a fe ff       	call   c0000974 <strcat>
c001ae89:	58                   	pop    eax
c001ae8a:	5a                   	pop    edx
c001ae8b:	68 48 bc 02 c0       	push   0xc002bc48
c001ae90:	56                   	push   esi
c001ae91:	e8 de 5a fe ff       	call   c0000974 <strcat>
c001ae96:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ae9d:	e8 a1 49 ff ff       	call   c000f843 <malloc>
c001aea2:	83 c4 0c             	add    esp,0xc
c001aea5:	89 c3                	mov    ebx,eax
c001aea7:	ff 35 d4 18 03 c0    	push   DWORD PTR ds:0xc00318d4
c001aead:	56                   	push   esi
c001aeae:	50                   	push   eax
c001aeaf:	e8 42 85 ff ff       	call   c00133f6 <File::File(char const*, Process*)>
c001aeb4:	83 c4 10             	add    esp,0x10
c001aeb7:	85 db                	test   ebx,ebx
c001aeb9:	74 7e                	je     c001af39 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aebb:	51                   	push   ecx
c001aebc:	51                   	push   ecx
c001aebd:	6a 01                	push   0x1
c001aebf:	53                   	push   ebx
c001aec0:	e8 95 85 ff ff       	call   c001345a <File::open(FileOpenMode)>
c001aec5:	83 c4 10             	add    esp,0x10
c001aec8:	85 c0                	test   eax,eax
c001aeca:	74 08                	je     c001aed4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aecc:	83 ec 0c             	sub    esp,0xc
c001aecf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aed1:	53                   	push   ebx
c001aed2:	eb 5f                	jmp    c001af33 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aed4:	52                   	push   edx
c001aed5:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aed9:	50                   	push   eax
c001aeda:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aede:	50                   	push   eax
c001aedf:	53                   	push   ebx
c001aee0:	e8 21 88 ff ff       	call   c0013706 <File::stat(unsigned long long*, bool*)>
c001aee5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aee9:	83 c4 10             	add    esp,0x10
c001aeec:	89 c1                	mov    ecx,eax
c001aeee:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aef2:	74 31                	je     c001af25 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aef4:	83 ec 0c             	sub    esp,0xc
c001aef7:	50                   	push   eax
c001aef8:	e8 46 49 ff ff       	call   c000f843 <malloc>
c001aefd:	89 c6                	mov    esi,eax
c001aeff:	58                   	pop    eax
c001af00:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af02:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af06:	52                   	push   edx
c001af07:	56                   	push   esi
c001af08:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af0c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af10:	53                   	push   ebx
c001af11:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af14:	83 c4 20             	add    esp,0x20
c001af17:	85 c0                	test   eax,eax
c001af19:	75 0a                	jne    c001af25 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af1f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af23:	74 18                	je     c001af3d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af25:	83 ec 0c             	sub    esp,0xc
c001af28:	53                   	push   ebx
c001af29:	e8 8a 85 ff ff       	call   c00134b8 <File::close()>
c001af2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af36:	83 c4 10             	add    esp,0x10
c001af39:	31 c0                	xor    eax,eax
c001af3b:	eb 3b                	jmp    c001af78 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af3d:	83 ec 0c             	sub    esp,0xc
c001af40:	53                   	push   ebx
c001af41:	e8 72 85 ff ff       	call   c00134b8 <File::close()>
c001af46:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af4b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af4e:	83 c4 0c             	add    esp,0xc
c001af51:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af58:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af5f:	56                   	push   esi
c001af60:	e8 70 fd ff ff       	call   c001acd5 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001af65:	89 34 24             	mov    DWORD PTR [esp],esi
c001af68:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af6c:	e8 e2 48 ff ff       	call   c000f853 <free>
c001af71:	83 c4 10             	add    esp,0x10
c001af74:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001af78:	81 c4 20 01 00 00    	add    esp,0x120
c001af7e:	5b                   	pop    ebx
c001af7f:	5e                   	pop    esi
c001af80:	5f                   	pop    edi
c001af81:	c3                   	ret    

c001af82 <Reg::getLine(char*, char*, char*)>:
c001af82:	57                   	push   edi
c001af83:	56                   	push   esi
c001af84:	53                   	push   ebx
c001af85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af89:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af8d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af91:	57                   	push   edi
c001af92:	56                   	push   esi
c001af93:	53                   	push   ebx
c001af94:	68 4d bc 02 c0       	push   0xc002bc4d
c001af99:	e8 8f fe ff ff       	call   c001ae2d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af9e:	83 c4 10             	add    esp,0x10
c001afa1:	84 c0                	test   al,al
c001afa3:	75 10                	jne    c001afb5 <Reg::getLine(char*, char*, char*)+0x33>
c001afa5:	57                   	push   edi
c001afa6:	56                   	push   esi
c001afa7:	53                   	push   ebx
c001afa8:	68 72 bc 02 c0       	push   0xc002bc72
c001afad:	e8 7b fe ff ff       	call   c001ae2d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001afb2:	83 c4 10             	add    esp,0x10
c001afb5:	5b                   	pop    ebx
c001afb6:	5e                   	pop    esi
c001afb7:	5f                   	pop    edi
c001afb8:	c3                   	ret    

c001afb9 <Reg::readInt(char*, char*, int*)>:
c001afb9:	55                   	push   ebp
c001afba:	57                   	push   edi
c001afbb:	56                   	push   esi
c001afbc:	53                   	push   ebx
c001afbd:	81 ec f0 00 00 00    	sub    esp,0xf0
c001afc3:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001afc7:	57                   	push   edi
c001afc8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afcf:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001afd6:	e8 a7 ff ff ff       	call   c001af82 <Reg::getLine(char*, char*, char*)>
c001afdb:	83 c4 10             	add    esp,0x10
c001afde:	84 c0                	test   al,al
c001afe0:	0f 84 b3 00 00 00    	je     c001b099 <Reg::readInt(char*, char*, int*)+0xe0>
c001afe6:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001afea:	80 fa 2b             	cmp    dl,0x2b
c001afed:	74 0c                	je     c001affb <Reg::readInt(char*, char*, int*)+0x42>
c001afef:	80 fa 2d             	cmp    dl,0x2d
c001aff2:	75 0e                	jne    c001b002 <Reg::readInt(char*, char*, int*)+0x49>
c001aff4:	ba 01 00 00 00       	mov    edx,0x1
c001aff9:	eb 0b                	jmp    c001b006 <Reg::readInt(char*, char*, int*)+0x4d>
c001affb:	ba 01 00 00 00       	mov    edx,0x1
c001b000:	eb 02                	jmp    c001b004 <Reg::readInt(char*, char*, int*)+0x4b>
c001b002:	31 d2                	xor    edx,edx
c001b004:	31 c0                	xor    eax,eax
c001b006:	be 0a 00 00 00       	mov    esi,0xa
c001b00b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b010:	75 20                	jne    c001b032 <Reg::readInt(char*, char*, int*)+0x79>
c001b012:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b016:	80 f9 78             	cmp    cl,0x78
c001b019:	75 0a                	jne    c001b025 <Reg::readInt(char*, char*, int*)+0x6c>
c001b01b:	83 c2 02             	add    edx,0x2
c001b01e:	be 10 00 00 00       	mov    esi,0x10
c001b023:	eb 0d                	jmp    c001b032 <Reg::readInt(char*, char*, int*)+0x79>
c001b025:	80 f9 62             	cmp    cl,0x62
c001b028:	75 08                	jne    c001b032 <Reg::readInt(char*, char*, int*)+0x79>
c001b02a:	83 c2 02             	add    edx,0x2
c001b02d:	be 02 00 00 00       	mov    esi,0x2
c001b032:	01 d7                	add    edi,edx
c001b034:	31 d2                	xor    edx,edx
c001b036:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b038:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b03c:	80 fb 0d             	cmp    bl,0xd
c001b03f:	0f 94 c3             	sete   bl
c001b042:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b047:	0f 94 c1             	sete   cl
c001b04a:	08 cb                	or     bl,cl
c001b04c:	75 3a                	jne    c001b088 <Reg::readInt(char*, char*, int*)+0xcf>
c001b04e:	0f af d6             	imul   edx,esi
c001b051:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b056:	83 fe 10             	cmp    esi,0x10
c001b059:	75 26                	jne    c001b081 <Reg::readInt(char*, char*, int*)+0xc8>
c001b05b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b05f:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b062:	89 e9                	mov    ecx,ebp
c001b064:	80 f9 05             	cmp    cl,0x5
c001b067:	77 06                	ja     c001b06f <Reg::readInt(char*, char*, int*)+0xb6>
c001b069:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b06d:	eb 16                	jmp    c001b085 <Reg::readInt(char*, char*, int*)+0xcc>
c001b06f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b073:	83 e9 61             	sub    ecx,0x61
c001b076:	80 f9 05             	cmp    cl,0x5
c001b079:	77 06                	ja     c001b081 <Reg::readInt(char*, char*, int*)+0xc8>
c001b07b:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b07f:	eb 04                	jmp    c001b085 <Reg::readInt(char*, char*, int*)+0xcc>
c001b081:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b085:	47                   	inc    edi
c001b086:	eb ae                	jmp    c001b036 <Reg::readInt(char*, char*, int*)+0x7d>
c001b088:	84 c0                	test   al,al
c001b08a:	74 02                	je     c001b08e <Reg::readInt(char*, char*, int*)+0xd5>
c001b08c:	f7 da                	neg    edx
c001b08e:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b095:	89 10                	mov    DWORD PTR [eax],edx
c001b097:	88 d8                	mov    al,bl
c001b099:	81 c4 ec 00 00 00    	add    esp,0xec
c001b09f:	5b                   	pop    ebx
c001b0a0:	5e                   	pop    esi
c001b0a1:	5f                   	pop    edi
c001b0a2:	5d                   	pop    ebp
c001b0a3:	c3                   	ret    

c001b0a4 <Reg::readString(char*, char*, char*, int)>:
c001b0a4:	57                   	push   edi
c001b0a5:	56                   	push   esi
c001b0a6:	53                   	push   ebx
c001b0a7:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b0ad:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b0b4:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b0b8:	57                   	push   edi
c001b0b9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0c0:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b0c7:	e8 b6 fe ff ff       	call   c001af82 <Reg::getLine(char*, char*, char*)>
c001b0cc:	83 c4 10             	add    esp,0x10
c001b0cf:	89 c6                	mov    esi,eax
c001b0d1:	84 c0                	test   al,al
c001b0d3:	74 44                	je     c001b119 <Reg::readString(char*, char*, char*, int)+0x75>
c001b0d5:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b0dc:	31 c0                	xor    eax,eax
c001b0de:	4a                   	dec    edx
c001b0df:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b0e2:	84 c9                	test   cl,cl
c001b0e4:	74 0f                	je     c001b0f5 <Reg::readString(char*, char*, char*, int)+0x51>
c001b0e6:	39 c2                	cmp    edx,eax
c001b0e8:	7e 0b                	jle    c001b0f5 <Reg::readString(char*, char*, char*, int)+0x51>
c001b0ea:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b0ed:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b0f2:	40                   	inc    eax
c001b0f3:	eb ea                	jmp    c001b0df <Reg::readString(char*, char*, char*, int)+0x3b>
c001b0f5:	83 ec 0c             	sub    esp,0xc
c001b0f8:	53                   	push   ebx
c001b0f9:	e8 96 56 fe ff       	call   c0000794 <strlen>
c001b0fe:	83 c4 10             	add    esp,0x10
c001b101:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b106:	75 11                	jne    c001b119 <Reg::readString(char*, char*, char*, int)+0x75>
c001b108:	83 ec 0c             	sub    esp,0xc
c001b10b:	53                   	push   ebx
c001b10c:	e8 83 56 fe ff       	call   c0000794 <strlen>
c001b111:	83 c4 10             	add    esp,0x10
c001b114:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b119:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b11f:	89 f0                	mov    eax,esi
c001b121:	5b                   	pop    ebx
c001b122:	5e                   	pop    esi
c001b123:	5f                   	pop    edi
c001b124:	c3                   	ret    

c001b125 <Reg::readBool(char*, char*, bool*)>:
c001b125:	83 ec 20             	sub    esp,0x20
c001b128:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b12c:	50                   	push   eax
c001b12d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b131:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b135:	e8 7f fe ff ff       	call   c001afb9 <Reg::readInt(char*, char*, int*)>
c001b13a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b13f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b143:	0f 95 02             	setne  BYTE PTR [edx]
c001b146:	83 c4 2c             	add    esp,0x2c
c001b149:	c3                   	ret    

c001b14a <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b14a:	53                   	push   ebx
c001b14b:	83 ec 1c             	sub    esp,0x1c
c001b14e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b152:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b156:	50                   	push   eax
c001b157:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b15b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b15f:	e8 c1 ff ff ff       	call   c001b125 <Reg::readBool(char*, char*, bool*)>
c001b164:	83 c4 10             	add    esp,0x10
c001b167:	84 c0                	test   al,al
c001b169:	74 04                	je     c001b16f <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b16b:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b16f:	88 d8                	mov    al,bl
c001b171:	83 c4 18             	add    esp,0x18
c001b174:	5b                   	pop    ebx
c001b175:	c3                   	ret    

c001b176 <Reg::readIntWithDefault(char*, char*, int)>:
c001b176:	53                   	push   ebx
c001b177:	83 ec 1c             	sub    esp,0x1c
c001b17a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b17e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b182:	50                   	push   eax
c001b183:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b187:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b18b:	e8 29 fe ff ff       	call   c001afb9 <Reg::readInt(char*, char*, int*)>
c001b190:	83 c4 10             	add    esp,0x10
c001b193:	84 c0                	test   al,al
c001b195:	74 04                	je     c001b19b <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b197:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b19b:	89 d8                	mov    eax,ebx
c001b19d:	83 c4 18             	add    esp,0x18
c001b1a0:	5b                   	pop    ebx
c001b1a1:	c3                   	ret    

c001b1a2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b1a2:	57                   	push   edi
c001b1a3:	56                   	push   esi
c001b1a4:	53                   	push   ebx
c001b1a5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b1a9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b1ad:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b1b1:	56                   	push   esi
c001b1b2:	53                   	push   ebx
c001b1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1bb:	e8 e4 fe ff ff       	call   c001b0a4 <Reg::readString(char*, char*, char*, int)>
c001b1c0:	83 c4 10             	add    esp,0x10
c001b1c3:	84 c0                	test   al,al
c001b1c5:	75 1b                	jne    c001b1e2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b1c7:	50                   	push   eax
c001b1c8:	56                   	push   esi
c001b1c9:	4e                   	dec    esi
c001b1ca:	6a 00                	push   0x0
c001b1cc:	53                   	push   ebx
c001b1cd:	e8 a6 55 fe ff       	call   c0000778 <memset>
c001b1d2:	83 c4 0c             	add    esp,0xc
c001b1d5:	56                   	push   esi
c001b1d6:	57                   	push   edi
c001b1d7:	53                   	push   ebx
c001b1d8:	89 fb                	mov    ebx,edi
c001b1da:	e8 65 55 fe ff       	call   c0000744 <memcpy>
c001b1df:	83 c4 10             	add    esp,0x10
c001b1e2:	89 d8                	mov    eax,ebx
c001b1e4:	5b                   	pop    ebx
c001b1e5:	5e                   	pop    esi
c001b1e6:	5f                   	pop    edi
c001b1e7:	c3                   	ret    

c001b1e8 <Sys::eject(regs*)>:
c001b1e8:	83 ec 0c             	sub    esp,0xc
c001b1eb:	83 ca ff             	or     edx,0xffffffff
c001b1ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1f2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b1f5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1fa:	83 e9 41             	sub    ecx,0x41
c001b1fd:	83 f9 19             	cmp    ecx,0x19
c001b200:	77 18                	ja     c001b21a <Sys::eject(regs*)+0x32>
c001b202:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c001b209:	85 c9                	test   ecx,ecx
c001b20b:	74 0d                	je     c001b21a <Sys::eject(regs*)+0x32>
c001b20d:	83 ec 0c             	sub    esp,0xc
c001b210:	51                   	push   ecx
c001b211:	e8 68 b4 ff ff       	call   c001667e <LogicalDisk::eject()>
c001b216:	83 c4 10             	add    esp,0x10
c001b219:	99                   	cdq    
c001b21a:	83 c4 0c             	add    esp,0xc
c001b21d:	c3                   	ret    

c001b21e <Sys::exit(regs*)>:
c001b21e:	83 ec 18             	sub    esp,0x18
c001b221:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b225:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b228:	e8 7a 35 00 00       	call   c001e7a7 <terminateTask(int)>
c001b22d:	83 c8 ff             	or     eax,0xffffffff
c001b230:	83 c4 1c             	add    esp,0x1c
c001b233:	89 c2                	mov    edx,eax
c001b235:	c3                   	ret    

c001b236 <Sys::getCwd(regs*)>:
c001b236:	83 ec 10             	sub    esp,0x10
c001b239:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b23d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b240:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b243:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b248:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b24b:	e8 a8 7f ff ff       	call   c00131f8 <Fs::getcwd(Process*, char*, int)>
c001b250:	83 c4 1c             	add    esp,0x1c
c001b253:	99                   	cdq    
c001b254:	c3                   	ret    

c001b255 <Sys::getPID(regs*)>:
c001b255:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b25a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b25d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b25f:	99                   	cdq    
c001b260:	c3                   	ret    

c001b261 <Sys::getRAMData(regs*)>:
c001b261:	8b 0d b4 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e3b4
c001b267:	6b 05 b0 e3 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e3b0,0x64
c001b26e:	99                   	cdq    
c001b26f:	f7 f9                	idiv   ecx
c001b271:	c1 e0 18             	shl    eax,0x18
c001b274:	09 c8                	or     eax,ecx
c001b276:	99                   	cdq    
c001b277:	c3                   	ret    

c001b278 <Sys::loadDLL(regs*)>:
c001b278:	56                   	push   esi
c001b279:	53                   	push   ebx
c001b27a:	31 d2                	xor    edx,edx
c001b27c:	51                   	push   ecx
c001b27d:	b8 01 00 00 00       	mov    eax,0x1
c001b282:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b286:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b28a:	0f 84 8c 00 00 00    	je     c001b31c <Sys::loadDLL(regs*)+0xa4>
c001b290:	83 ec 0c             	sub    esp,0xc
c001b293:	68 14 01 00 00       	push   0x114
c001b298:	e8 a6 45 ff ff       	call   c000f843 <malloc>
c001b29d:	83 c4 0c             	add    esp,0xc
c001b2a0:	89 c3                	mov    ebx,eax
c001b2a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2a7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2aa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2ad:	53                   	push   ebx
c001b2ae:	e8 43 81 ff ff       	call   c00133f6 <File::File(char const*, Process*)>
c001b2b3:	83 c4 10             	add    esp,0x10
c001b2b6:	31 d2                	xor    edx,edx
c001b2b8:	b8 02 00 00 00       	mov    eax,0x2
c001b2bd:	85 db                	test   ebx,ebx
c001b2bf:	74 5b                	je     c001b31c <Sys::loadDLL(regs*)+0xa4>
c001b2c1:	83 ec 0c             	sub    esp,0xc
c001b2c4:	53                   	push   ebx
c001b2c5:	e8 fe 83 ff ff       	call   c00136c8 <File::exists()>
c001b2ca:	83 c4 10             	add    esp,0x10
c001b2cd:	84 c0                	test   al,al
c001b2cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2d1:	75 11                	jne    c001b2e4 <Sys::loadDLL(regs*)+0x6c>
c001b2d3:	83 ec 0c             	sub    esp,0xc
c001b2d6:	53                   	push   ebx
c001b2d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2da:	83 c4 10             	add    esp,0x10
c001b2dd:	b8 03 00 00 00       	mov    eax,0x3
c001b2e2:	eb 36                	jmp    c001b31a <Sys::loadDLL(regs*)+0xa2>
c001b2e4:	83 ec 0c             	sub    esp,0xc
c001b2e7:	53                   	push   ebx
c001b2e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2eb:	58                   	pop    eax
c001b2ec:	5a                   	pop    edx
c001b2ed:	6a 00                	push   0x0
c001b2ef:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2f2:	e8 c5 23 00 00       	call   c001d6bc <Thr::loadDLL(char const*, bool)>
c001b2f7:	83 c4 10             	add    esp,0x10
c001b2fa:	89 c1                	mov    ecx,eax
c001b2fc:	31 d2                	xor    edx,edx
c001b2fe:	b8 04 00 00 00       	mov    eax,0x4
c001b303:	85 c9                	test   ecx,ecx
c001b305:	74 15                	je     c001b31c <Sys::loadDLL(regs*)+0xa4>
c001b307:	53                   	push   ebx
c001b308:	53                   	push   ebx
c001b309:	ff 35 68 e3 02 c0    	push   DWORD PTR ds:0xc002e368
c001b30f:	51                   	push   ecx
c001b310:	e8 db 25 00 00       	call   c001d8f0 <Thr::executeDLL(unsigned long, void*)>
c001b315:	83 c4 10             	add    esp,0x10
c001b318:	31 c0                	xor    eax,eax
c001b31a:	31 d2                	xor    edx,edx
c001b31c:	59                   	pop    ecx
c001b31d:	5b                   	pop    ebx
c001b31e:	5e                   	pop    esi
c001b31f:	c3                   	ret    

c001b320 <Sys::read(regs*)>:
c001b320:	57                   	push   edi
c001b321:	56                   	push   esi
c001b322:	53                   	push   ebx
c001b323:	83 ec 10             	sub    esp,0x10
c001b326:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b32a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b32d:	83 f8 02             	cmp    eax,0x2
c001b330:	77 10                	ja     c001b342 <Sys::read(regs*)+0x22>
c001b332:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b337:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b33a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b340:	eb 0e                	jmp    c001b350 <Sys::read(regs*)+0x30>
c001b342:	83 ec 0c             	sub    esp,0xc
c001b345:	50                   	push   eax
c001b346:	e8 a2 66 ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001b34b:	83 c4 10             	add    esp,0x10
c001b34e:	89 c1                	mov    ecx,eax
c001b350:	83 c8 ff             	or     eax,0xffffffff
c001b353:	85 c9                	test   ecx,ecx
c001b355:	89 c2                	mov    edx,eax
c001b357:	74 28                	je     c001b381 <Sys::read(regs*)+0x61>
c001b359:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b361:	31 ff                	xor    edi,edi
c001b363:	83 ec 0c             	sub    esp,0xc
c001b366:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b368:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b36c:	52                   	push   edx
c001b36d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b370:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b373:	57                   	push   edi
c001b374:	56                   	push   esi
c001b375:	51                   	push   ecx
c001b376:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b379:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b37d:	83 c4 20             	add    esp,0x20
c001b380:	99                   	cdq    
c001b381:	83 c4 10             	add    esp,0x10
c001b384:	5b                   	pop    ebx
c001b385:	5e                   	pop    esi
c001b386:	5f                   	pop    edi
c001b387:	c3                   	ret    

c001b388 <Sys::sbrk(regs*)>:
c001b388:	56                   	push   esi
c001b389:	53                   	push   ebx
c001b38a:	50                   	push   eax
c001b38b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b390:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b394:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b397:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b39a:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b3a0:	85 db                	test   ebx,ebx
c001b3a2:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b3a5:	74 02                	je     c001b3a9 <Sys::sbrk(regs*)+0x21>
c001b3a7:	79 06                	jns    c001b3af <Sys::sbrk(regs*)+0x27>
c001b3a9:	89 f0                	mov    eax,esi
c001b3ab:	31 d2                	xor    edx,edx
c001b3ad:	eb 2a                	jmp    c001b3d9 <Sys::sbrk(regs*)+0x51>
c001b3af:	83 c8 ff             	or     eax,0xffffffff
c001b3b2:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b3b8:	89 c2                	mov    edx,eax
c001b3ba:	77 1d                	ja     c001b3d9 <Sys::sbrk(regs*)+0x51>
c001b3bc:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b3c2:	50                   	push   eax
c001b3c3:	c1 ea 0c             	shr    edx,0xc
c001b3c6:	68 07 0c 00 00       	push   0xc07
c001b3cb:	52                   	push   edx
c001b3cc:	51                   	push   ecx
c001b3cd:	e8 5e 70 ff ff       	call   c0012430 <VAS::allocatePages(int, int)>
c001b3d2:	89 f0                	mov    eax,esi
c001b3d4:	31 d2                	xor    edx,edx
c001b3d6:	83 c4 10             	add    esp,0x10
c001b3d9:	59                   	pop    ecx
c001b3da:	5b                   	pop    ebx
c001b3db:	5e                   	pop    esi
c001b3dc:	c3                   	ret    

c001b3dd <Sys::setCwd(regs*)>:
c001b3dd:	83 ec 14             	sub    esp,0x14
c001b3e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b3e4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b3e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3ec:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3ef:	e8 73 83 ff ff       	call   c0013767 <Fs::setcwd(Process*, char*)>
c001b3f4:	83 c4 1c             	add    esp,0x1c
c001b3f7:	99                   	cdq    
c001b3f8:	c3                   	ret    

c001b3f9 <Sys::setTime(regs*)>:
c001b3f9:	55                   	push   ebp
c001b3fa:	31 d2                	xor    edx,edx
c001b3fc:	57                   	push   edi
c001b3fd:	bf 18 00 00 00       	mov    edi,0x18
c001b402:	56                   	push   esi
c001b403:	53                   	push   ebx
c001b404:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b409:	83 ec 30             	sub    esp,0x30
c001b40c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b410:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b413:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b416:	f7 f3                	div    ebx
c001b418:	89 d6                	mov    esi,edx
c001b41a:	31 d2                	xor    edx,edx
c001b41c:	f7 f3                	div    ebx
c001b41e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b421:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b425:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b42a:	31 d2                	xor    edx,edx
c001b42c:	f7 f3                	div    ebx
c001b42e:	31 d2                	xor    edx,edx
c001b430:	bb 0c 00 00 00       	mov    ebx,0xc
c001b435:	f7 f7                	div    edi
c001b437:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b43a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b43e:	0f b7 cd             	movzx  ecx,bp
c001b441:	56                   	push   esi
c001b442:	89 c7                	mov    edi,eax
c001b444:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b448:	c1 e6 10             	shl    esi,0x10
c001b44b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b44f:	83 e7 1f             	and    edi,0x1f
c001b452:	51                   	push   ecx
c001b453:	47                   	inc    edi
c001b454:	c1 e8 05             	shr    eax,0x5
c001b457:	31 d2                	xor    edx,edx
c001b459:	f7 f3                	div    ebx
c001b45b:	31 db                	xor    ebx,ebx
c001b45d:	52                   	push   edx
c001b45e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b462:	57                   	push   edi
c001b463:	68 8d bc 02 c0       	push   0xc002bc8d
c001b468:	e8 30 7a ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001b46d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b471:	89 f8                	mov    eax,edi
c001b473:	31 c9                	xor    ecx,ecx
c001b475:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b479:	88 c1                	mov    cl,al
c001b47b:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b481:	88 d5                	mov    ch,dl
c001b483:	c1 e0 10             	shl    eax,0x10
c001b486:	0f b7 d1             	movzx  edx,cx
c001b489:	09 c2                	or     edx,eax
c001b48b:	89 d8                	mov    eax,ebx
c001b48d:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b492:	09 f0                	or     eax,esi
c001b494:	89 c3                	mov    ebx,eax
c001b496:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b49a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b49e:	83 c4 18             	add    esp,0x18
c001b4a1:	53                   	push   ebx
c001b4a2:	52                   	push   edx
c001b4a3:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b4a7:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b4ab:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4af:	e8 cd 89 ff ff       	call   c0013e81 <datetimeToSeconds(datetime_t)>
c001b4b4:	83 c4 0c             	add    esp,0xc
c001b4b7:	52                   	push   edx
c001b4b8:	50                   	push   eax
c001b4b9:	56                   	push   esi
c001b4ba:	e8 49 8b ff ff       	call   c0014008 <secondsToDatetime(unsigned long long)>
c001b4bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b4c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b4c7:	51                   	push   ecx
c001b4c8:	89 d6                	mov    esi,edx
c001b4ca:	51                   	push   ecx
c001b4cb:	c1 ee 10             	shr    esi,0x10
c001b4ce:	89 f3                	mov    ebx,esi
c001b4d0:	0f b6 f3             	movzx  esi,bl
c001b4d3:	56                   	push   esi
c001b4d4:	0f b6 f6             	movzx  esi,dh
c001b4d7:	0f b6 d2             	movzx  edx,dl
c001b4da:	56                   	push   esi
c001b4db:	52                   	push   edx
c001b4dc:	89 c2                	mov    edx,eax
c001b4de:	c1 ea 10             	shr    edx,0x10
c001b4e1:	52                   	push   edx
c001b4e2:	0f b6 d4             	movzx  edx,ah
c001b4e5:	0f b6 c0             	movzx  eax,al
c001b4e8:	52                   	push   edx
c001b4e9:	50                   	push   eax
c001b4ea:	68 a9 bc 02 c0       	push   0xc002bca9
c001b4ef:	e8 a9 79 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001b4f4:	83 c4 2c             	add    esp,0x2c
c001b4f7:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c001b4fc:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b500:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b504:	53                   	push   ebx
c001b505:	51                   	push   ecx
c001b506:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b50c:	e8 97 8a ff ff       	call   c0013fa8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b511:	83 f0 01             	xor    eax,0x1
c001b514:	31 d2                	xor    edx,edx
c001b516:	0f b6 c0             	movzx  eax,al
c001b519:	83 c4 3c             	add    esp,0x3c
c001b51c:	5b                   	pop    ebx
c001b51d:	5e                   	pop    esi
c001b51e:	5f                   	pop    edi
c001b51f:	5d                   	pop    ebp
c001b520:	c3                   	ret    

c001b521 <Sys::timezone(regs*)>:
c001b521:	53                   	push   ebx
c001b522:	83 ec 08             	sub    esp,0x8
c001b525:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b529:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b52d:	75 17                	jne    c001b546 <Sys::timezone(regs*)+0x25>
c001b52f:	83 ec 0c             	sub    esp,0xc
c001b532:	68 c5 bc 02 c0       	push   0xc002bcc5
c001b537:	e8 61 79 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001b53c:	83 c8 ff             	or     eax,0xffffffff
c001b53f:	83 c4 10             	add    esp,0x10
c001b542:	89 c2                	mov    edx,eax
c001b544:	eb 20                	jmp    c001b566 <Sys::timezone(regs*)+0x45>
c001b546:	83 ec 0c             	sub    esp,0xc
c001b549:	68 fd bc 02 c0       	push   0xc002bcfd
c001b54e:	e8 4a 79 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001b553:	58                   	pop    eax
c001b554:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b557:	e8 ae 87 ff ff       	call   c0013d0a <User::loadClockSettings(int)>
c001b55c:	83 c4 10             	add    esp,0x10
c001b55f:	b8 01 00 00 00       	mov    eax,0x1
c001b564:	31 d2                	xor    edx,edx
c001b566:	83 c4 08             	add    esp,0x8
c001b569:	5b                   	pop    ebx
c001b56a:	c3                   	ret    

c001b56b <Sys::write(regs*)>:
c001b56b:	57                   	push   edi
c001b56c:	56                   	push   esi
c001b56d:	53                   	push   ebx
c001b56e:	83 ec 10             	sub    esp,0x10
c001b571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b575:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b578:	83 f8 02             	cmp    eax,0x2
c001b57b:	77 10                	ja     c001b58d <Sys::write(regs*)+0x22>
c001b57d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b582:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b585:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b58b:	eb 0e                	jmp    c001b59b <Sys::write(regs*)+0x30>
c001b58d:	83 ec 0c             	sub    esp,0xc
c001b590:	50                   	push   eax
c001b591:	e8 57 64 ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001b596:	83 c4 10             	add    esp,0x10
c001b599:	89 c1                	mov    ecx,eax
c001b59b:	83 c8 ff             	or     eax,0xffffffff
c001b59e:	85 c9                	test   ecx,ecx
c001b5a0:	89 c2                	mov    edx,eax
c001b5a2:	74 28                	je     c001b5cc <Sys::write(regs*)+0x61>
c001b5a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b5ac:	31 ff                	xor    edi,edi
c001b5ae:	83 ec 0c             	sub    esp,0xc
c001b5b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b5b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b5b7:	52                   	push   edx
c001b5b8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5bb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b5be:	57                   	push   edi
c001b5bf:	56                   	push   esi
c001b5c0:	51                   	push   ecx
c001b5c1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b5c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5c8:	83 c4 20             	add    esp,0x20
c001b5cb:	99                   	cdq    
c001b5cc:	83 c4 10             	add    esp,0x10
c001b5cf:	5b                   	pop    ebx
c001b5d0:	5e                   	pop    esi
c001b5d1:	5f                   	pop    edi
c001b5d2:	c3                   	ret    

c001b5d3 <Sys::wsbe(regs*)>:
c001b5d3:	57                   	push   edi
c001b5d4:	b9 0b 00 00 00       	mov    ecx,0xb
c001b5d9:	56                   	push   esi
c001b5da:	be 3c bd 02 c0       	mov    esi,0xc002bd3c
c001b5df:	53                   	push   ebx
c001b5e0:	83 ec 30             	sub    esp,0x30
c001b5e3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b5e7:	fc                   	cld    
c001b5e8:	83 ec 0c             	sub    esp,0xc
c001b5eb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5ed:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b5f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5f9:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b5ff:	8b 06                	mov    eax,DWORD PTR [esi]
c001b601:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b604:	57                   	push   edi
c001b605:	e8 8a 51 fe ff       	call   c0000794 <strlen>
c001b60a:	5a                   	pop    edx
c001b60b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b60f:	52                   	push   edx
c001b610:	31 d2                	xor    edx,edx
c001b612:	57                   	push   edi
c001b613:	52                   	push   edx
c001b614:	50                   	push   eax
c001b615:	56                   	push   esi
c001b616:	ff d3                	call   ebx
c001b618:	83 c4 14             	add    esp,0x14
c001b61b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b61f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b622:	e8 80 31 00 00       	call   c001e7a7 <terminateTask(int)>
c001b627:	83 c4 40             	add    esp,0x40
c001b62a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b62f:	5b                   	pop    ebx
c001b630:	31 d2                	xor    edx,edx
c001b632:	5e                   	pop    esi
c001b633:	5f                   	pop    edi
c001b634:	c3                   	ret    

c001b635 <Sys::yield(regs*)>:
c001b635:	57                   	push   edi
c001b636:	56                   	push   esi
c001b637:	53                   	push   ebx
c001b638:	e8 27 27 00 00       	call   c001dd64 <lockScheduler()>
c001b63d:	e8 5e 2a 00 00       	call   c001e0a0 <schedule()>
c001b642:	e8 1f 27 00 00       	call   c001dd66 <unlockScheduler()>
c001b647:	8b 35 f0 e9 02 c0    	mov    esi,DWORD PTR ds:0xc002e9f0
c001b64d:	8b 3d f4 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e9f4
c001b653:	89 f0                	mov    eax,esi
c001b655:	89 fb                	mov    ebx,edi
c001b657:	89 f1                	mov    ecx,esi
c001b659:	c1 e0 07             	shl    eax,0x7
c001b65c:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b660:	25 80 30 0f 00       	and    eax,0xf3080
c001b665:	c1 eb 17             	shr    ebx,0x17
c001b668:	31 c8                	xor    eax,ecx
c001b66a:	89 da                	mov    edx,ebx
c001b66c:	5b                   	pop    ebx
c001b66d:	5e                   	pop    esi
c001b66e:	5f                   	pop    edi
c001b66f:	c3                   	ret    

c001b670 <sysCallSeekDir(regs*)>:
c001b670:	31 c0                	xor    eax,eax
c001b672:	31 d2                	xor    edx,edx
c001b674:	c3                   	ret    

c001b675 <sysCallTellDir(regs*)>:
c001b675:	31 c0                	xor    eax,eax
c001b677:	31 d2                	xor    edx,edx
c001b679:	c3                   	ret    

c001b67a <sysCallVerify(regs*)>:
c001b67a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b67e:	31 d2                	xor    edx,edx
c001b680:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b683:	c3                   	ret    

c001b684 <sysFormatDisk(regs*)>:
c001b684:	56                   	push   esi
c001b685:	53                   	push   ebx
c001b686:	53                   	push   ebx
c001b687:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b68b:	8b 1d f0 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4f0
c001b691:	eb 25                	jmp    c001b6b8 <sysFormatDisk(regs*)+0x34>
c001b693:	83 ec 0c             	sub    esp,0xc
c001b696:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b699:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b69b:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b69e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b6a1:	50                   	push   eax
c001b6a2:	ff 34 85 80 e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1680]
c001b6a9:	53                   	push   ebx
c001b6aa:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b6ad:	83 c4 20             	add    esp,0x20
c001b6b0:	83 f8 08             	cmp    eax,0x8
c001b6b3:	75 12                	jne    c001b6c7 <sysFormatDisk(regs*)+0x43>
c001b6b5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b6b8:	85 db                	test   ebx,ebx
c001b6ba:	75 d7                	jne    c001b693 <sysFormatDisk(regs*)+0xf>
c001b6bc:	59                   	pop    ecx
c001b6bd:	b8 03 00 00 00       	mov    eax,0x3
c001b6c2:	31 d2                	xor    edx,edx
c001b6c4:	5b                   	pop    ebx
c001b6c5:	5e                   	pop    esi
c001b6c6:	c3                   	ret    
c001b6c7:	85 c0                	test   eax,eax
c001b6c9:	74 1b                	je     c001b6e6 <sysFormatDisk(regs*)+0x62>
c001b6cb:	83 f8 09             	cmp    eax,0x9
c001b6ce:	74 0b                	je     c001b6db <sysFormatDisk(regs*)+0x57>
c001b6d0:	59                   	pop    ecx
c001b6d1:	b8 02 00 00 00       	mov    eax,0x2
c001b6d6:	31 d2                	xor    edx,edx
c001b6d8:	5b                   	pop    ebx
c001b6d9:	5e                   	pop    esi
c001b6da:	c3                   	ret    
c001b6db:	59                   	pop    ecx
c001b6dc:	b8 01 00 00 00       	mov    eax,0x1
c001b6e1:	31 d2                	xor    edx,edx
c001b6e3:	5b                   	pop    ebx
c001b6e4:	5e                   	pop    esi
c001b6e5:	c3                   	ret    
c001b6e6:	59                   	pop    ecx
c001b6e7:	31 c0                	xor    eax,eax
c001b6e9:	31 d2                	xor    edx,edx
c001b6eb:	5b                   	pop    ebx
c001b6ec:	5e                   	pop    esi
c001b6ed:	c3                   	ret    

c001b6ee <sysSetDiskVolumeLabel(regs*)>:
c001b6ee:	56                   	push   esi
c001b6ef:	53                   	push   ebx
c001b6f0:	53                   	push   ebx
c001b6f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6f5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b6f8:	83 f8 19             	cmp    eax,0x19
c001b6fb:	77 29                	ja     c001b726 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6fd:	8b 0c 85 80 e9 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1680]
c001b704:	85 c9                	test   ecx,ecx
c001b706:	74 1e                	je     c001b726 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b708:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b70b:	85 d2                	test   edx,edx
c001b70d:	74 17                	je     c001b726 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b70f:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b715:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b717:	52                   	push   edx
c001b718:	50                   	push   eax
c001b719:	51                   	push   ecx
c001b71a:	53                   	push   ebx
c001b71b:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b71e:	83 c4 10             	add    esp,0x10
c001b721:	99                   	cdq    
c001b722:	59                   	pop    ecx
c001b723:	5b                   	pop    ebx
c001b724:	5e                   	pop    esi
c001b725:	c3                   	ret    
c001b726:	59                   	pop    ecx
c001b727:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b72c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b731:	5b                   	pop    ebx
c001b732:	5e                   	pop    esi
c001b733:	c3                   	ret    

c001b734 <sysGetDiskVolumeLabel(regs*)>:
c001b734:	57                   	push   edi
c001b735:	56                   	push   esi
c001b736:	53                   	push   ebx
c001b737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b73b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b73e:	83 fa 19             	cmp    edx,0x19
c001b741:	77 34                	ja     c001b777 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b743:	8b 0c 95 80 e9 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1680]
c001b74a:	85 c9                	test   ecx,ecx
c001b74c:	74 29                	je     c001b777 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b74e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b751:	85 db                	test   ebx,ebx
c001b753:	74 22                	je     c001b777 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b755:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b758:	85 c0                	test   eax,eax
c001b75a:	74 1b                	je     c001b777 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b75c:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b762:	83 ec 0c             	sub    esp,0xc
c001b765:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b767:	50                   	push   eax
c001b768:	53                   	push   ebx
c001b769:	52                   	push   edx
c001b76a:	51                   	push   ecx
c001b76b:	56                   	push   esi
c001b76c:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b76f:	83 c4 20             	add    esp,0x20
c001b772:	99                   	cdq    
c001b773:	5b                   	pop    ebx
c001b774:	5e                   	pop    esi
c001b775:	5f                   	pop    edi
c001b776:	c3                   	ret    
c001b777:	5b                   	pop    ebx
c001b778:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b77d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b782:	5e                   	pop    esi
c001b783:	5f                   	pop    edi
c001b784:	c3                   	ret    

c001b785 <sysShutdown(regs*)>:
c001b785:	83 ec 0c             	sub    esp,0xc
c001b788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b78c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b78f:	85 c0                	test   eax,eax
c001b791:	74 18                	je     c001b7ab <sysShutdown(regs*)+0x26>
c001b793:	83 f8 01             	cmp    eax,0x1
c001b796:	74 38                	je     c001b7d0 <sysShutdown(regs*)+0x4b>
c001b798:	83 f8 02             	cmp    eax,0x2
c001b79b:	74 24                	je     c001b7c1 <sysShutdown(regs*)+0x3c>
c001b79d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7a7:	83 c4 0c             	add    esp,0xc
c001b7aa:	c3                   	ret    
c001b7ab:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c001b7b0:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7b2:	6a 00                	push   0x0
c001b7b4:	6a 00                	push   0x0
c001b7b6:	6a 00                	push   0x0
c001b7b8:	50                   	push   eax
c001b7b9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7bc:	83 c4 10             	add    esp,0x10
c001b7bf:	eb dc                	jmp    c001b79d <sysShutdown(regs*)+0x18>
c001b7c1:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c001b7c6:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7c8:	6a 00                	push   0x0
c001b7ca:	6a 00                	push   0x0
c001b7cc:	6a 01                	push   0x1
c001b7ce:	eb e8                	jmp    c001b7b8 <sysShutdown(regs*)+0x33>
c001b7d0:	a1 20 0a 03 c0       	mov    eax,ds:0xc0030a20
c001b7d5:	85 c0                	test   eax,eax
c001b7d7:	74 02                	je     c001b7db <sysShutdown(regs*)+0x56>
c001b7d9:	ff d0                	call   eax
c001b7db:	31 c0                	xor    eax,eax
c001b7dd:	31 d2                	xor    edx,edx
c001b7df:	83 c4 0c             	add    esp,0xc
c001b7e2:	c3                   	ret    

c001b7e3 <sysCallRealpath(regs*)>:
c001b7e3:	83 ec 0c             	sub    esp,0xc
c001b7e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7ea:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b7ed:	85 d2                	test   edx,edx
c001b7ef:	74 07                	je     c001b7f8 <sysCallRealpath(regs*)+0x15>
c001b7f1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b7f4:	85 c0                	test   eax,eax
c001b7f6:	75 0b                	jne    c001b803 <sysCallRealpath(regs*)+0x20>
c001b7f8:	b8 01 00 00 00       	mov    eax,0x1
c001b7fd:	31 d2                	xor    edx,edx
c001b7ff:	83 c4 0c             	add    esp,0xc
c001b802:	c3                   	ret    
c001b803:	51                   	push   ecx
c001b804:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b80a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b80d:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b813:	51                   	push   ecx
c001b814:	52                   	push   edx
c001b815:	50                   	push   eax
c001b816:	e8 31 7a ff ff       	call   c001324c <Fs::standardiseFiles(char*, char const*, char const*)>
c001b81b:	83 c4 10             	add    esp,0x10
c001b81e:	31 c0                	xor    eax,eax
c001b820:	31 d2                	xor    edx,edx
c001b822:	83 c4 0c             	add    esp,0xc
c001b825:	c3                   	ret    

c001b826 <sysCallGetArgc(regs*)>:
c001b826:	83 ec 14             	sub    esp,0x14
c001b829:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b82e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b831:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b837:	68 68 bd 02 c0       	push   0xc002bd68
c001b83c:	e8 5c 76 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001b841:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b846:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b849:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b84f:	83 c4 1c             	add    esp,0x1c
c001b852:	99                   	cdq    
c001b853:	c3                   	ret    

c001b854 <sysCallReadDir(regs*)>:
c001b854:	53                   	push   ebx
c001b855:	83 ec 18             	sub    esp,0x18
c001b858:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b85c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b85f:	83 f8 02             	cmp    eax,0x2
c001b862:	76 53                	jbe    c001b8b7 <sysCallReadDir(regs*)+0x63>
c001b864:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b867:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b86d:	77 4f                	ja     c001b8be <sysCallReadDir(regs*)+0x6a>
c001b86f:	83 ec 0c             	sub    esp,0xc
c001b872:	50                   	push   eax
c001b873:	e8 75 61 ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001b878:	83 c4 10             	add    esp,0x10
c001b87b:	85 c0                	test   eax,eax
c001b87d:	74 50                	je     c001b8cf <sysCallReadDir(regs*)+0x7b>
c001b87f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b887:	83 ec 0c             	sub    esp,0xc
c001b88a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b88c:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b890:	51                   	push   ecx
c001b891:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b894:	6a 00                	push   0x0
c001b896:	68 10 01 00 00       	push   0x110
c001b89b:	50                   	push   eax
c001b89c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b89f:	83 c4 20             	add    esp,0x20
c001b8a2:	85 c0                	test   eax,eax
c001b8a4:	74 38                	je     c001b8de <sysCallReadDir(regs*)+0x8a>
c001b8a6:	83 f8 07             	cmp    eax,0x7
c001b8a9:	74 0c                	je     c001b8b7 <sysCallReadDir(regs*)+0x63>
c001b8ab:	b8 02 00 00 00       	mov    eax,0x2
c001b8b0:	31 d2                	xor    edx,edx
c001b8b2:	83 c4 18             	add    esp,0x18
c001b8b5:	5b                   	pop    ebx
c001b8b6:	c3                   	ret    
c001b8b7:	b8 01 00 00 00       	mov    eax,0x1
c001b8bc:	eb f2                	jmp    c001b8b0 <sysCallReadDir(regs*)+0x5c>
c001b8be:	83 ec 08             	sub    esp,0x8
c001b8c1:	52                   	push   edx
c001b8c2:	68 80 be 02 c0       	push   0xc002be80
c001b8c7:	e8 d1 75 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001b8cc:	83 c4 10             	add    esp,0x10
c001b8cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8d4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8d9:	83 c4 18             	add    esp,0x18
c001b8dc:	5b                   	pop    ebx
c001b8dd:	c3                   	ret    
c001b8de:	31 c0                	xor    eax,eax
c001b8e0:	eb ce                	jmp    c001b8b0 <sysCallReadDir(regs*)+0x5c>

c001b8e2 <sysCallIsATTY(regs*)>:
c001b8e2:	83 ec 0c             	sub    esp,0xc
c001b8e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8ec:	83 f8 02             	cmp    eax,0x2
c001b8ef:	76 07                	jbe    c001b8f8 <sysCallIsATTY(regs*)+0x16>
c001b8f1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8f6:	75 26                	jne    c001b91e <sysCallIsATTY(regs*)+0x3c>
c001b8f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b900:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b906:	85 c0                	test   eax,eax
c001b908:	74 24                	je     c001b92e <sysCallIsATTY(regs*)+0x4c>
c001b90a:	83 ec 0c             	sub    esp,0xc
c001b90d:	8b 10                	mov    edx,DWORD PTR [eax]
c001b90f:	50                   	push   eax
c001b910:	ff 12                	call   DWORD PTR [edx]
c001b912:	31 d2                	xor    edx,edx
c001b914:	0f b6 c0             	movzx  eax,al
c001b917:	83 c4 10             	add    esp,0x10
c001b91a:	83 c4 0c             	add    esp,0xc
c001b91d:	c3                   	ret    
c001b91e:	83 ec 0c             	sub    esp,0xc
c001b921:	50                   	push   eax
c001b922:	e8 c6 60 ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001b927:	83 c4 10             	add    esp,0x10
c001b92a:	85 c0                	test   eax,eax
c001b92c:	75 dc                	jne    c001b90a <sysCallIsATTY(regs*)+0x28>
c001b92e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b933:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b938:	83 c4 0c             	add    esp,0xc
c001b93b:	c3                   	ret    

c001b93c <sysCallSeek(regs*)>:
c001b93c:	53                   	push   ebx
c001b93d:	83 ec 08             	sub    esp,0x8
c001b940:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b944:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b947:	83 f8 02             	cmp    eax,0x2
c001b94a:	76 4a                	jbe    c001b996 <sysCallSeek(regs*)+0x5a>
c001b94c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b951:	77 32                	ja     c001b985 <sysCallSeek(regs*)+0x49>
c001b953:	83 ec 0c             	sub    esp,0xc
c001b956:	50                   	push   eax
c001b957:	e8 91 60 ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001b95c:	83 c4 0c             	add    esp,0xc
c001b95f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b962:	31 db                	xor    ebx,ebx
c001b964:	53                   	push   ebx
c001b965:	51                   	push   ecx
c001b966:	50                   	push   eax
c001b967:	e8 ac 7b ff ff       	call   c0013518 <File::seek(unsigned long long)>
c001b96c:	83 c4 10             	add    esp,0x10
c001b96f:	85 c0                	test   eax,eax
c001b971:	0f 95 c0             	setne  al
c001b974:	31 d2                	xor    edx,edx
c001b976:	0f b6 c0             	movzx  eax,al
c001b979:	f7 d8                	neg    eax
c001b97b:	83 d2 00             	adc    edx,0x0
c001b97e:	83 c4 08             	add    esp,0x8
c001b981:	f7 da                	neg    edx
c001b983:	5b                   	pop    ebx
c001b984:	c3                   	ret    
c001b985:	83 ec 08             	sub    esp,0x8
c001b988:	50                   	push   eax
c001b989:	68 73 bd 02 c0       	push   0xc002bd73
c001b98e:	e8 0a 75 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001b993:	83 c4 10             	add    esp,0x10
c001b996:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b99b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9a0:	83 c4 08             	add    esp,0x8
c001b9a3:	5b                   	pop    ebx
c001b9a4:	c3                   	ret    

c001b9a5 <sysCallTell(regs*)>:
c001b9a5:	53                   	push   ebx
c001b9a6:	83 ec 08             	sub    esp,0x8
c001b9a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9ad:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9b0:	83 f8 02             	cmp    eax,0x2
c001b9b3:	76 5e                	jbe    c001ba13 <sysCallTell(regs*)+0x6e>
c001b9b5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9ba:	77 2d                	ja     c001b9e9 <sysCallTell(regs*)+0x44>
c001b9bc:	83 ec 0c             	sub    esp,0xc
c001b9bf:	50                   	push   eax
c001b9c0:	e8 28 60 ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001b9c5:	5a                   	pop    edx
c001b9c6:	59                   	pop    ecx
c001b9c7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b9ca:	50                   	push   eax
c001b9cb:	e8 9e 7b ff ff       	call   c001356e <File::tell(unsigned long long*)>
c001b9d0:	83 c4 10             	add    esp,0x10
c001b9d3:	85 c0                	test   eax,eax
c001b9d5:	0f 95 c0             	setne  al
c001b9d8:	31 d2                	xor    edx,edx
c001b9da:	0f b6 c0             	movzx  eax,al
c001b9dd:	f7 d8                	neg    eax
c001b9df:	83 d2 00             	adc    edx,0x0
c001b9e2:	83 c4 08             	add    esp,0x8
c001b9e5:	f7 da                	neg    edx
c001b9e7:	5b                   	pop    ebx
c001b9e8:	c3                   	ret    
c001b9e9:	83 ec 08             	sub    esp,0x8
c001b9ec:	50                   	push   eax
c001b9ed:	68 8d bd 02 c0       	push   0xc002bd8d
c001b9f2:	e8 a6 74 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001b9f7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9fa:	83 c4 10             	add    esp,0x10
c001b9fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba03:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba0a:	31 d2                	xor    edx,edx
c001ba0c:	31 c0                	xor    eax,eax
c001ba0e:	83 c4 08             	add    esp,0x8
c001ba11:	5b                   	pop    ebx
c001ba12:	c3                   	ret    
c001ba13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba18:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba1d:	83 c4 08             	add    esp,0x8
c001ba20:	5b                   	pop    ebx
c001ba21:	c3                   	ret    

c001ba22 <sysCallSize(regs*)>:
c001ba22:	53                   	push   ebx
c001ba23:	83 ec 18             	sub    esp,0x18
c001ba26:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba2a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba2d:	83 f8 02             	cmp    eax,0x2
c001ba30:	76 64                	jbe    c001ba96 <sysCallSize(regs*)+0x74>
c001ba32:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba37:	77 33                	ja     c001ba6c <sysCallSize(regs*)+0x4a>
c001ba39:	83 ec 0c             	sub    esp,0xc
c001ba3c:	50                   	push   eax
c001ba3d:	e8 ab 5f ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001ba42:	83 c4 0c             	add    esp,0xc
c001ba45:	8d 54 24 13          	lea    edx,[esp+0x13]
c001ba49:	52                   	push   edx
c001ba4a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba4d:	50                   	push   eax
c001ba4e:	e8 b3 7c ff ff       	call   c0013706 <File::stat(unsigned long long*, bool*)>
c001ba53:	83 c4 10             	add    esp,0x10
c001ba56:	85 c0                	test   eax,eax
c001ba58:	0f 95 c0             	setne  al
c001ba5b:	31 d2                	xor    edx,edx
c001ba5d:	0f b6 c0             	movzx  eax,al
c001ba60:	f7 d8                	neg    eax
c001ba62:	83 d2 00             	adc    edx,0x0
c001ba65:	83 c4 18             	add    esp,0x18
c001ba68:	f7 da                	neg    edx
c001ba6a:	5b                   	pop    ebx
c001ba6b:	c3                   	ret    
c001ba6c:	83 ec 08             	sub    esp,0x8
c001ba6f:	50                   	push   eax
c001ba70:	68 a7 bd 02 c0       	push   0xc002bda7
c001ba75:	e8 23 74 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001ba7a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba7d:	83 c4 10             	add    esp,0x10
c001ba80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba8d:	31 d2                	xor    edx,edx
c001ba8f:	31 c0                	xor    eax,eax
c001ba91:	83 c4 18             	add    esp,0x18
c001ba94:	5b                   	pop    ebx
c001ba95:	c3                   	ret    
c001ba96:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba9b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001baa0:	83 c4 18             	add    esp,0x18
c001baa3:	5b                   	pop    ebx
c001baa4:	c3                   	ret    

c001baa5 <sysCallSizeFromFilename(regs*)>:
c001baa5:	57                   	push   edi
c001baa6:	56                   	push   esi
c001baa7:	53                   	push   ebx
c001baa8:	83 ec 20             	sub    esp,0x20
c001baab:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001baaf:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bab2:	83 fb 02             	cmp    ebx,0x2
c001bab5:	0f 86 99 00 00 00    	jbe    c001bb54 <sysCallSizeFromFilename(regs*)+0xaf>
c001babb:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bac1:	77 65                	ja     c001bb28 <sysCallSizeFromFilename(regs*)+0x83>
c001bac3:	83 ec 0c             	sub    esp,0xc
c001bac6:	68 14 01 00 00       	push   0x114
c001bacb:	e8 73 3d ff ff       	call   c000f843 <malloc>
c001bad0:	83 c4 0c             	add    esp,0xc
c001bad3:	89 c6                	mov    esi,eax
c001bad5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bada:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001badd:	53                   	push   ebx
c001bade:	56                   	push   esi
c001badf:	e8 12 79 ff ff       	call   c00133f6 <File::File(char const*, Process*)>
c001bae4:	83 c4 0c             	add    esp,0xc
c001bae7:	8d 44 24 23          	lea    eax,[esp+0x23]
c001baeb:	50                   	push   eax
c001baec:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001baef:	56                   	push   esi
c001baf0:	e8 11 7c ff ff       	call   c0013706 <File::stat(unsigned long long*, bool*)>
c001baf5:	83 c4 10             	add    esp,0x10
c001baf8:	85 f6                	test   esi,esi
c001bafa:	74 14                	je     c001bb10 <sysCallSizeFromFilename(regs*)+0x6b>
c001bafc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb00:	8b 16                	mov    edx,DWORD PTR [esi]
c001bb02:	83 ec 0c             	sub    esp,0xc
c001bb05:	56                   	push   esi
c001bb06:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb09:	83 c4 10             	add    esp,0x10
c001bb0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb10:	85 c0                	test   eax,eax
c001bb12:	0f 95 c0             	setne  al
c001bb15:	31 d2                	xor    edx,edx
c001bb17:	0f b6 c0             	movzx  eax,al
c001bb1a:	f7 d8                	neg    eax
c001bb1c:	83 d2 00             	adc    edx,0x0
c001bb1f:	83 c4 20             	add    esp,0x20
c001bb22:	f7 da                	neg    edx
c001bb24:	5b                   	pop    ebx
c001bb25:	5e                   	pop    esi
c001bb26:	5f                   	pop    edi
c001bb27:	c3                   	ret    
c001bb28:	83 ec 08             	sub    esp,0x8
c001bb2b:	53                   	push   ebx
c001bb2c:	68 a7 bd 02 c0       	push   0xc002bda7
c001bb31:	e8 67 73 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001bb36:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bb39:	83 c4 10             	add    esp,0x10
c001bb3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb49:	31 d2                	xor    edx,edx
c001bb4b:	83 c4 20             	add    esp,0x20
c001bb4e:	31 c0                	xor    eax,eax
c001bb50:	5b                   	pop    ebx
c001bb51:	5e                   	pop    esi
c001bb52:	5f                   	pop    edi
c001bb53:	c3                   	ret    
c001bb54:	83 c4 20             	add    esp,0x20
c001bb57:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb5c:	5b                   	pop    ebx
c001bb5d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb62:	5e                   	pop    esi
c001bb63:	5f                   	pop    edi
c001bb64:	c3                   	ret    

c001bb65 <sysCallClose(regs*)>:
c001bb65:	53                   	push   ebx
c001bb66:	83 ec 08             	sub    esp,0x8
c001bb69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb6d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb70:	83 f8 02             	cmp    eax,0x2
c001bb73:	76 50                	jbe    c001bbc5 <sysCallClose(regs*)+0x60>
c001bb75:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bb7a:	74 58                	je     c001bbd4 <sysCallClose(regs*)+0x6f>
c001bb7c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb81:	74 60                	je     c001bbe3 <sysCallClose(regs*)+0x7e>
c001bb83:	77 2f                	ja     c001bbb4 <sysCallClose(regs*)+0x4f>
c001bb85:	83 ec 0c             	sub    esp,0xc
c001bb88:	50                   	push   eax
c001bb89:	e8 5f 5e ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001bb8e:	89 c3                	mov    ebx,eax
c001bb90:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb93:	e8 20 79 ff ff       	call   c00134b8 <File::close()>
c001bb98:	83 c4 10             	add    esp,0x10
c001bb9b:	85 db                	test   ebx,ebx
c001bb9d:	74 0c                	je     c001bbab <sysCallClose(regs*)+0x46>
c001bb9f:	83 ec 0c             	sub    esp,0xc
c001bba2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bba4:	53                   	push   ebx
c001bba5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bba8:	83 c4 10             	add    esp,0x10
c001bbab:	31 c0                	xor    eax,eax
c001bbad:	31 d2                	xor    edx,edx
c001bbaf:	83 c4 08             	add    esp,0x8
c001bbb2:	5b                   	pop    ebx
c001bbb3:	c3                   	ret    
c001bbb4:	83 ec 08             	sub    esp,0x8
c001bbb7:	50                   	push   eax
c001bbb8:	68 a4 be 02 c0       	push   0xc002bea4
c001bbbd:	e8 db 72 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001bbc2:	83 c4 10             	add    esp,0x10
c001bbc5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbca:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbcf:	83 c4 08             	add    esp,0x8
c001bbd2:	5b                   	pop    ebx
c001bbd3:	c3                   	ret    
c001bbd4:	83 ec 0c             	sub    esp,0xc
c001bbd7:	68 c2 bd 02 c0       	push   0xc002bdc2
c001bbdc:	e8 bc 72 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001bbe1:	eb c5                	jmp    c001bba8 <sysCallClose(regs*)+0x43>
c001bbe3:	83 ec 0c             	sub    esp,0xc
c001bbe6:	68 d0 bd 02 c0       	push   0xc002bdd0
c001bbeb:	eb ef                	jmp    c001bbdc <sysCallClose(regs*)+0x77>

c001bbed <sysCallOpenDir(regs*)>:
c001bbed:	56                   	push   esi
c001bbee:	53                   	push   ebx
c001bbef:	53                   	push   ebx
c001bbf0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bbf4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bbf7:	85 f6                	test   esi,esi
c001bbf9:	74 59                	je     c001bc54 <sysCallOpenDir(regs*)+0x67>
c001bbfb:	83 ec 0c             	sub    esp,0xc
c001bbfe:	68 14 01 00 00       	push   0x114
c001bc03:	e8 3b 3c ff ff       	call   c000f843 <malloc>
c001bc08:	83 c4 0c             	add    esp,0xc
c001bc0b:	89 c6                	mov    esi,eax
c001bc0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc12:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc15:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc18:	56                   	push   esi
c001bc19:	e8 84 7c ff ff       	call   c00138a2 <Directory::Directory(char const*, Process*)>
c001bc1e:	83 c4 10             	add    esp,0x10
c001bc21:	85 f6                	test   esi,esi
c001bc23:	74 2f                	je     c001bc54 <sysCallOpenDir(regs*)+0x67>
c001bc25:	83 ec 0c             	sub    esp,0xc
c001bc28:	56                   	push   esi
c001bc29:	e8 d8 7c ff ff       	call   c0013906 <Directory::open()>
c001bc2e:	83 c4 10             	add    esp,0x10
c001bc31:	85 c0                	test   eax,eax
c001bc33:	75 1f                	jne    c001bc54 <sysCallOpenDir(regs*)+0x67>
c001bc35:	83 ec 0c             	sub    esp,0xc
c001bc38:	56                   	push   esi
c001bc39:	e8 ba 5a ff ff       	call   c00116f8 <UnixFile::getFileDescriptor()>
c001bc3e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc41:	83 c4 10             	add    esp,0x10
c001bc44:	89 02                	mov    DWORD PTR [edx],eax
c001bc46:	c1 f8 1f             	sar    eax,0x1f
c001bc49:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bc4c:	31 c0                	xor    eax,eax
c001bc4e:	59                   	pop    ecx
c001bc4f:	31 d2                	xor    edx,edx
c001bc51:	5b                   	pop    ebx
c001bc52:	5e                   	pop    esi
c001bc53:	c3                   	ret    
c001bc54:	59                   	pop    ecx
c001bc55:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc5a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc5f:	5b                   	pop    ebx
c001bc60:	5e                   	pop    esi
c001bc61:	c3                   	ret    

c001bc62 <sysCallCloseDir(regs*)>:
c001bc62:	53                   	push   ebx
c001bc63:	83 ec 08             	sub    esp,0x8
c001bc66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc6a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc6d:	83 f8 02             	cmp    eax,0x2
c001bc70:	76 47                	jbe    c001bcb9 <sysCallCloseDir(regs*)+0x57>
c001bc72:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc77:	77 2f                	ja     c001bca8 <sysCallCloseDir(regs*)+0x46>
c001bc79:	83 ec 0c             	sub    esp,0xc
c001bc7c:	50                   	push   eax
c001bc7d:	e8 6b 5d ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001bc82:	89 c3                	mov    ebx,eax
c001bc84:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc87:	e8 d6 7c ff ff       	call   c0013962 <Directory::close()>
c001bc8c:	83 c4 10             	add    esp,0x10
c001bc8f:	85 db                	test   ebx,ebx
c001bc91:	74 0c                	je     c001bc9f <sysCallCloseDir(regs*)+0x3d>
c001bc93:	83 ec 0c             	sub    esp,0xc
c001bc96:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc98:	53                   	push   ebx
c001bc99:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc9c:	83 c4 10             	add    esp,0x10
c001bc9f:	31 c0                	xor    eax,eax
c001bca1:	31 d2                	xor    edx,edx
c001bca3:	83 c4 08             	add    esp,0x8
c001bca6:	5b                   	pop    ebx
c001bca7:	c3                   	ret    
c001bca8:	83 ec 08             	sub    esp,0x8
c001bcab:	50                   	push   eax
c001bcac:	68 cc be 02 c0       	push   0xc002becc
c001bcb1:	e8 e7 71 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001bcb6:	83 c4 10             	add    esp,0x10
c001bcb9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcbe:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcc3:	83 c4 08             	add    esp,0x8
c001bcc6:	5b                   	pop    ebx
c001bcc7:	c3                   	ret    

c001bcc8 <sysCallMakeDir(regs*)>:
c001bcc8:	56                   	push   esi
c001bcc9:	53                   	push   ebx
c001bcca:	83 ec 10             	sub    esp,0x10
c001bccd:	68 14 01 00 00       	push   0x114
c001bcd2:	e8 6c 3b ff ff       	call   c000f843 <malloc>
c001bcd7:	83 c4 0c             	add    esp,0xc
c001bcda:	89 c3                	mov    ebx,eax
c001bcdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bce1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bce4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bce8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bceb:	53                   	push   ebx
c001bcec:	e8 b1 7b ff ff       	call   c00138a2 <Directory::Directory(char const*, Process*)>
c001bcf1:	83 c4 10             	add    esp,0x10
c001bcf4:	85 db                	test   ebx,ebx
c001bcf6:	74 32                	je     c001bd2a <sysCallMakeDir(regs*)+0x62>
c001bcf8:	83 ec 0c             	sub    esp,0xc
c001bcfb:	53                   	push   ebx
c001bcfc:	e8 e5 7d ff ff       	call   c0013ae6 <Directory::create()>
c001bd01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd04:	89 c6                	mov    esi,eax
c001bd06:	e8 57 7c ff ff       	call   c0013962 <Directory::close()>
c001bd0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd10:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd13:	83 c4 10             	add    esp,0x10
c001bd16:	31 c0                	xor    eax,eax
c001bd18:	59                   	pop    ecx
c001bd19:	85 f6                	test   esi,esi
c001bd1b:	5b                   	pop    ebx
c001bd1c:	0f 95 c0             	setne  al
c001bd1f:	5e                   	pop    esi
c001bd20:	31 d2                	xor    edx,edx
c001bd22:	f7 d8                	neg    eax
c001bd24:	83 d2 00             	adc    edx,0x0
c001bd27:	f7 da                	neg    edx
c001bd29:	c3                   	ret    
c001bd2a:	59                   	pop    ecx
c001bd2b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd30:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd35:	5b                   	pop    ebx
c001bd36:	5e                   	pop    esi
c001bd37:	c3                   	ret    

c001bd38 <sysCallWait(regs*)>:
c001bd38:	83 ec 10             	sub    esp,0x10
c001bd3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd3f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bd42:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd45:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bd48:	e8 ce 24 00 00       	call   c001e21b <waitTask(int, int*, int)>
c001bd4d:	83 c4 1c             	add    esp,0x1c
c001bd50:	99                   	cdq    
c001bd51:	c3                   	ret    

c001bd52 <sysCallNotImpl(regs*)>:
c001bd52:	83 ec 18             	sub    esp,0x18
c001bd55:	68 de bd 02 c0       	push   0xc002bdde
c001bd5a:	e8 2a e8 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001bd5f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd64:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd69:	83 c4 1c             	add    esp,0x1c
c001bd6c:	c3                   	ret    

c001bd6d <sysPanic(regs*)>:
c001bd6d:	83 ec 18             	sub    esp,0x18
c001bd70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd74:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd77:	e8 0d e8 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001bd7c:	c7 04 24 f8 bd 02 c0 	mov    DWORD PTR [esp],0xc002bdf8
c001bd83:	e8 01 e8 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001bd88:	b8 01 00 00 00       	mov    eax,0x1
c001bd8d:	31 d2                	xor    edx,edx
c001bd8f:	83 c4 1c             	add    esp,0x1c
c001bd92:	c3                   	ret    

c001bd93 <sysCallRmdir(regs*)>:
c001bd93:	56                   	push   esi
c001bd94:	53                   	push   ebx
c001bd95:	83 ec 20             	sub    esp,0x20
c001bd98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd9c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd9f:	68 14 01 00 00       	push   0x114
c001bda4:	e8 9a 3a ff ff       	call   c000f843 <malloc>
c001bda9:	83 c4 0c             	add    esp,0xc
c001bdac:	89 c3                	mov    ebx,eax
c001bdae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdb3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdb6:	56                   	push   esi
c001bdb7:	53                   	push   ebx
c001bdb8:	e8 39 76 ff ff       	call   c00133f6 <File::File(char const*, Process*)>
c001bdbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdc0:	e8 0d 78 ff ff       	call   c00135d2 <File::unlink()>
c001bdc5:	83 c4 10             	add    esp,0x10
c001bdc8:	85 db                	test   ebx,ebx
c001bdca:	74 14                	je     c001bde0 <sysCallRmdir(regs*)+0x4d>
c001bdcc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdd0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bdd2:	83 ec 0c             	sub    esp,0xc
c001bdd5:	53                   	push   ebx
c001bdd6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bdd9:	83 c4 10             	add    esp,0x10
c001bddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bde0:	85 c0                	test   eax,eax
c001bde2:	0f 95 c0             	setne  al
c001bde5:	31 d2                	xor    edx,edx
c001bde7:	0f b6 c0             	movzx  eax,al
c001bdea:	f7 d8                	neg    eax
c001bdec:	83 d2 00             	adc    edx,0x0
c001bdef:	83 c4 14             	add    esp,0x14
c001bdf2:	f7 da                	neg    edx
c001bdf4:	5b                   	pop    ebx
c001bdf5:	5e                   	pop    esi
c001bdf6:	c3                   	ret    

c001bdf7 <sysCallUnlink(regs*)>:
c001bdf7:	56                   	push   esi
c001bdf8:	53                   	push   ebx
c001bdf9:	83 ec 20             	sub    esp,0x20
c001bdfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be00:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be03:	68 14 01 00 00       	push   0x114
c001be08:	e8 36 3a ff ff       	call   c000f843 <malloc>
c001be0d:	83 c4 0c             	add    esp,0xc
c001be10:	89 c3                	mov    ebx,eax
c001be12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be17:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be1a:	56                   	push   esi
c001be1b:	53                   	push   ebx
c001be1c:	e8 d5 75 ff ff       	call   c00133f6 <File::File(char const*, Process*)>
c001be21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be24:	e8 a9 77 ff ff       	call   c00135d2 <File::unlink()>
c001be29:	83 c4 10             	add    esp,0x10
c001be2c:	85 db                	test   ebx,ebx
c001be2e:	74 14                	je     c001be44 <sysCallUnlink(regs*)+0x4d>
c001be30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be34:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be36:	83 ec 0c             	sub    esp,0xc
c001be39:	53                   	push   ebx
c001be3a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be3d:	83 c4 10             	add    esp,0x10
c001be40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be44:	85 c0                	test   eax,eax
c001be46:	0f 95 c0             	setne  al
c001be49:	31 d2                	xor    edx,edx
c001be4b:	0f b6 c0             	movzx  eax,al
c001be4e:	f7 d8                	neg    eax
c001be50:	83 d2 00             	adc    edx,0x0
c001be53:	83 c4 14             	add    esp,0x14
c001be56:	f7 da                	neg    edx
c001be58:	5b                   	pop    ebx
c001be59:	5e                   	pop    esi
c001be5a:	c3                   	ret    

c001be5b <sysCallGetArgv(regs*)>:
c001be5b:	83 ec 0c             	sub    esp,0xc
c001be5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be62:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001be65:	85 c0                	test   eax,eax
c001be67:	78 2b                	js     c001be94 <sysCallGetArgv(regs*)+0x39>
c001be69:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be6f:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001be72:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001be78:	7d 1a                	jge    c001be94 <sysCallGetArgv(regs*)+0x39>
c001be7a:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001be81:	85 c0                	test   eax,eax
c001be83:	74 17                	je     c001be9c <sysCallGetArgv(regs*)+0x41>
c001be85:	83 ec 08             	sub    esp,0x8
c001be88:	50                   	push   eax
c001be89:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001be8c:	e8 a3 49 fe ff       	call   c0000834 <strcpy>
c001be91:	83 c4 10             	add    esp,0x10
c001be94:	31 c0                	xor    eax,eax
c001be96:	31 d2                	xor    edx,edx
c001be98:	83 c4 0c             	add    esp,0xc
c001be9b:	c3                   	ret    
c001be9c:	b8 01 00 00 00       	mov    eax,0x1
c001bea1:	31 d2                	xor    edx,edx
c001bea3:	83 c4 0c             	add    esp,0xc
c001bea6:	c3                   	ret    

c001bea7 <sysCallTTYName(regs*)>:
c001bea7:	56                   	push   esi
c001bea8:	53                   	push   ebx
c001bea9:	53                   	push   ebx
c001beaa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001beae:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001beb1:	85 c0                	test   eax,eax
c001beb3:	74 5f                	je     c001bf14 <sysCallTTYName(regs*)+0x6d>
c001beb5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001beb8:	83 f8 02             	cmp    eax,0x2
c001bebb:	77 3e                	ja     c001befb <sysCallTTYName(regs*)+0x54>
c001bebd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bec2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bec5:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001becb:	85 db                	test   ebx,ebx
c001becd:	74 45                	je     c001bf14 <sysCallTTYName(regs*)+0x6d>
c001becf:	83 ec 0c             	sub    esp,0xc
c001bed2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bed4:	53                   	push   ebx
c001bed5:	ff 10                	call   DWORD PTR [eax]
c001bed7:	83 c4 10             	add    esp,0x10
c001beda:	84 c0                	test   al,al
c001bedc:	74 41                	je     c001bf1f <sysCallTTYName(regs*)+0x78>
c001bede:	83 ec 08             	sub    esp,0x8
c001bee1:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bee7:	53                   	push   ebx
c001bee8:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001beeb:	e8 44 49 fe ff       	call   c0000834 <strcpy>
c001bef0:	83 c4 10             	add    esp,0x10
c001bef3:	31 c0                	xor    eax,eax
c001bef5:	59                   	pop    ecx
c001bef6:	31 d2                	xor    edx,edx
c001bef8:	5b                   	pop    ebx
c001bef9:	5e                   	pop    esi
c001befa:	c3                   	ret    
c001befb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf00:	74 bb                	je     c001bebd <sysCallTTYName(regs*)+0x16>
c001bf02:	83 ec 0c             	sub    esp,0xc
c001bf05:	50                   	push   eax
c001bf06:	e8 e2 5a ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001bf0b:	83 c4 10             	add    esp,0x10
c001bf0e:	89 c3                	mov    ebx,eax
c001bf10:	85 db                	test   ebx,ebx
c001bf12:	75 bb                	jne    c001becf <sysCallTTYName(regs*)+0x28>
c001bf14:	59                   	pop    ecx
c001bf15:	b8 01 00 00 00       	mov    eax,0x1
c001bf1a:	31 d2                	xor    edx,edx
c001bf1c:	5b                   	pop    ebx
c001bf1d:	5e                   	pop    esi
c001bf1e:	c3                   	ret    
c001bf1f:	59                   	pop    ecx
c001bf20:	b8 02 00 00 00       	mov    eax,0x2
c001bf25:	31 d2                	xor    edx,edx
c001bf27:	5b                   	pop    ebx
c001bf28:	5e                   	pop    esi
c001bf29:	c3                   	ret    

c001bf2a <sysCallUSleep(regs*)>:
c001bf2a:	83 ec 14             	sub    esp,0x14
c001bf2d:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bf32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf36:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bf3d:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bf40:	01 ca                	add    edx,ecx
c001bf42:	52                   	push   edx
c001bf43:	50                   	push   eax
c001bf44:	e8 6b 23 00 00       	call   c001e2b4 <nanoSleep(unsigned long long)>
c001bf49:	31 c0                	xor    eax,eax
c001bf4b:	31 d2                	xor    edx,edx
c001bf4d:	83 c4 1c             	add    esp,0x1c
c001bf50:	c3                   	ret    

c001bf51 <sysCallSpawn(regs*)>:
c001bf51:	56                   	push   esi
c001bf52:	53                   	push   ebx
c001bf53:	53                   	push   ebx
c001bf54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf58:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bf5b:	85 f6                	test   esi,esi
c001bf5d:	75 08                	jne    c001bf67 <sysCallSpawn(regs*)+0x16>
c001bf5f:	59                   	pop    ecx
c001bf60:	31 c0                	xor    eax,eax
c001bf62:	31 d2                	xor    edx,edx
c001bf64:	5b                   	pop    ebx
c001bf65:	5e                   	pop    esi
c001bf66:	c3                   	ret    
c001bf67:	83 ec 0c             	sub    esp,0xc
c001bf6a:	68 3f 07 00 00       	push   0x73f
c001bf6f:	e8 cf 38 ff ff       	call   c000f843 <malloc>
c001bf74:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bf77:	89 c6                	mov    esi,eax
c001bf79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf7e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf81:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf84:	56                   	push   esi
c001bf85:	e8 2a 1a 00 00       	call   c001d9b4 <Process::Process(char const*, Process*, char**)>
c001bf8a:	83 c4 20             	add    esp,0x20
c001bf8d:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bf94:	75 c9                	jne    c001bf5f <sysCallSpawn(regs*)+0xe>
c001bf96:	83 ec 0c             	sub    esp,0xc
c001bf99:	56                   	push   esi
c001bf9a:	e8 db 1f 00 00       	call   c001df7a <Process::createUserThread()>
c001bf9f:	8b 06                	mov    eax,DWORD PTR [esi]
c001bfa1:	83 c4 10             	add    esp,0x10
c001bfa4:	99                   	cdq    
c001bfa5:	59                   	pop    ecx
c001bfa6:	5b                   	pop    ebx
c001bfa7:	5e                   	pop    esi
c001bfa8:	c3                   	ret    

c001bfa9 <sysCallGetEnv(regs*)>:
c001bfa9:	55                   	push   ebp
c001bfaa:	57                   	push   edi
c001bfab:	56                   	push   esi
c001bfac:	53                   	push   ebx
c001bfad:	83 ec 28             	sub    esp,0x28
c001bfb0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bfb4:	68 07 be 02 c0       	push   0xc002be07
c001bfb9:	e8 df 6e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001bfbe:	5f                   	pop    edi
c001bfbf:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bfc2:	5d                   	pop    ebp
c001bfc3:	53                   	push   ebx
c001bfc4:	68 36 c1 02 c0       	push   0xc002c136
c001bfc9:	e8 cf 6e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001bfce:	58                   	pop    eax
c001bfcf:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bfd2:	5a                   	pop    edx
c001bfd3:	57                   	push   edi
c001bfd4:	68 10 be 02 c0       	push   0xc002be10
c001bfd9:	e8 bf 6e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001bfde:	59                   	pop    ecx
c001bfdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfe4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfe7:	e8 b9 e4 ff ff       	call   c001a4a5 <Krnl::getProcessTotalEnvCount(Process*)>
c001bfec:	5a                   	pop    edx
c001bfed:	89 c5                	mov    ebp,eax
c001bfef:	59                   	pop    ecx
c001bff0:	50                   	push   eax
c001bff1:	68 1a be 02 c0       	push   0xc002be1a
c001bff6:	e8 a2 6e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001bffb:	83 c4 10             	add    esp,0x10
c001bffe:	39 ef                	cmp    edi,ebp
c001c000:	7c 15                	jl     c001c017 <sysCallGetEnv(regs*)+0x6e>
c001c002:	85 db                	test   ebx,ebx
c001c004:	75 0c                	jne    c001c012 <sysCallGetEnv(regs*)+0x69>
c001c006:	83 c4 1c             	add    esp,0x1c
c001c009:	31 c0                	xor    eax,eax
c001c00b:	5b                   	pop    ebx
c001c00c:	31 d2                	xor    edx,edx
c001c00e:	5e                   	pop    esi
c001c00f:	5f                   	pop    edi
c001c010:	5d                   	pop    ebp
c001c011:	c3                   	ret    
c001c012:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c015:	eb ef                	jmp    c001c006 <sysCallGetEnv(regs*)+0x5d>
c001c017:	83 ec 0c             	sub    esp,0xc
c001c01a:	68 26 be 02 c0       	push   0xc002be26
c001c01f:	e8 79 6e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001c024:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c028:	83 c4 0c             	add    esp,0xc
c001c02b:	57                   	push   edi
c001c02c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c032:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c035:	50                   	push   eax
c001c036:	e8 8a e4 ff ff       	call   c001a4c5 <Krnl::getProcessEnvPair(Process*, int)>
c001c03b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c03f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c043:	68 b5 c1 02 c0       	push   0xc002c1b5
c001c048:	e8 50 6e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001c04d:	83 c4 10             	add    esp,0x10
c001c050:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c053:	85 f6                	test   esi,esi
c001c055:	75 47                	jne    c001c09e <sysCallGetEnv(regs*)+0xf5>
c001c057:	83 ec 0c             	sub    esp,0xc
c001c05a:	55                   	push   ebp
c001c05b:	e8 34 47 fe ff       	call   c0000794 <strlen>
c001c060:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c063:	89 c3                	mov    ebx,eax
c001c065:	e8 2a 47 fe ff       	call   c0000794 <strlen>
c001c06a:	5a                   	pop    edx
c001c06b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c06f:	59                   	pop    ecx
c001c070:	50                   	push   eax
c001c071:	68 29 be 02 c0       	push   0xc002be29
c001c076:	e8 22 6e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001c07b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c07e:	e8 11 47 fe ff       	call   c0000794 <strlen>
c001c083:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c086:	89 c3                	mov    ebx,eax
c001c088:	e8 07 47 fe ff       	call   c0000794 <strlen>
c001c08d:	83 c4 10             	add    esp,0x10
c001c090:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c094:	83 c4 1c             	add    esp,0x1c
c001c097:	31 d2                	xor    edx,edx
c001c099:	5b                   	pop    ebx
c001c09a:	5e                   	pop    esi
c001c09b:	5f                   	pop    edi
c001c09c:	5d                   	pop    ebp
c001c09d:	c3                   	ret    
c001c09e:	83 ec 0c             	sub    esp,0xc
c001c0a1:	68 cf c1 02 c0       	push   0xc002c1cf
c001c0a6:	e8 f2 6d ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001c0ab:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0ae:	58                   	pop    eax
c001c0af:	5a                   	pop    edx
c001c0b0:	55                   	push   ebp
c001c0b1:	53                   	push   ebx
c001c0b2:	e8 7d 47 fe ff       	call   c0000834 <strcpy>
c001c0b7:	59                   	pop    ecx
c001c0b8:	5e                   	pop    esi
c001c0b9:	68 33 be 02 c0       	push   0xc002be33
c001c0be:	53                   	push   ebx
c001c0bf:	e8 b0 48 fe ff       	call   c0000974 <strcat>
c001c0c4:	5d                   	pop    ebp
c001c0c5:	58                   	pop    eax
c001c0c6:	57                   	push   edi
c001c0c7:	53                   	push   ebx
c001c0c8:	e8 a7 48 fe ff       	call   c0000974 <strcat>
c001c0cd:	c7 04 24 e9 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1e9
c001c0d4:	e8 c4 6d ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001c0d9:	83 c4 10             	add    esp,0x10
c001c0dc:	e9 25 ff ff ff       	jmp    c001c006 <sysCallGetEnv(regs*)+0x5d>

c001c0e1 <sysAppSettings(regs*)>:
c001c0e1:	53                   	push   ebx
c001c0e2:	83 ec 08             	sub    esp,0x8
c001c0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0e9:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c0ec:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c0f2:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c0f7:	66 3d c0 09          	cmp    ax,0x9c0
c001c0fb:	75 2f                	jne    c001c12c <sysAppSettings(regs*)+0x4b>
c001c0fd:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c103:	83 e0 1f             	and    eax,0x1f
c001c106:	3c 01                	cmp    al,0x1
c001c108:	74 2e                	je     c001c138 <sysAppSettings(regs*)+0x57>
c001c10a:	3c 07                	cmp    al,0x7
c001c10c:	0f 84 bd 00 00 00    	je     c001c1cf <sysAppSettings(regs*)+0xee>
c001c112:	84 c0                	test   al,al
c001c114:	0f 84 dc 00 00 00    	je     c001c1f6 <sysAppSettings(regs*)+0x115>
c001c11a:	3c 08                	cmp    al,0x8
c001c11c:	74 6d                	je     c001c18b <sysAppSettings(regs*)+0xaa>
c001c11e:	0f b6 c0             	movzx  eax,al
c001c121:	83 c4 08             	add    esp,0x8
c001c124:	05 e8 03 00 00       	add    eax,0x3e8
c001c129:	5b                   	pop    ebx
c001c12a:	99                   	cdq    
c001c12b:	c3                   	ret    
c001c12c:	b8 01 00 00 00       	mov    eax,0x1
c001c131:	31 d2                	xor    edx,edx
c001c133:	83 c4 08             	add    esp,0x8
c001c136:	5b                   	pop    ebx
c001c137:	c3                   	ret    
c001c138:	51                   	push   ecx
c001c139:	68 00 01 00 00       	push   0x100
c001c13e:	6a 00                	push   0x0
c001c140:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c145:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c148:	83 c0 0c             	add    eax,0xc
c001c14b:	50                   	push   eax
c001c14c:	e8 27 46 fe ff       	call   c0000778 <memset>
c001c151:	83 c4 0c             	add    esp,0xc
c001c154:	68 ff 00 00 00       	push   0xff
c001c159:	53                   	push   ebx
c001c15a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c15f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c162:	83 c0 0c             	add    eax,0xc
c001c165:	50                   	push   eax
c001c166:	e8 d9 45 fe ff       	call   c0000744 <memcpy>
c001c16b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c170:	5b                   	pop    ebx
c001c171:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c174:	5a                   	pop    edx
c001c175:	8d 50 0c             	lea    edx,[eax+0xc]
c001c178:	52                   	push   edx
c001c179:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c17f:	e8 e4 49 ff ff       	call   c0010b68 <VgaText::setTitle(char*)>
c001c184:	83 c4 10             	add    esp,0x10
c001c187:	31 c0                	xor    eax,eax
c001c189:	eb a6                	jmp    c001c131 <sysAppSettings(regs*)+0x50>
c001c18b:	83 ec 08             	sub    esp,0x8
c001c18e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c194:	83 e0 0f             	and    eax,0xf
c001c197:	50                   	push   eax
c001c198:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c19d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1a6:	e8 ad 49 ff ff       	call   c0010b58 <VgaText::setTitleColour(VgaColour)>
c001c1ab:	58                   	pop    eax
c001c1ac:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c1b2:	5a                   	pop    edx
c001c1b3:	c1 e8 04             	shr    eax,0x4
c001c1b6:	83 e0 0f             	and    eax,0xf
c001c1b9:	50                   	push   eax
c001c1ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1c8:	e8 7b 49 ff ff       	call   c0010b48 <VgaText::setTitleTextColour(VgaColour)>
c001c1cd:	eb b5                	jmp    c001c184 <sysAppSettings(regs*)+0xa3>
c001c1cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1d4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1d7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c1dd:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c1e3:	c0 e8 06             	shr    al,0x6
c001c1e6:	83 e0 01             	and    eax,0x1
c001c1e9:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c1ef:	31 c0                	xor    eax,eax
c001c1f1:	e9 3b ff ff ff       	jmp    c001c131 <sysAppSettings(regs*)+0x50>
c001c1f6:	b8 02 00 00 00       	mov    eax,0x2
c001c1fb:	e9 31 ff ff ff       	jmp    c001c131 <sysAppSettings(regs*)+0x50>

c001c200 <sysSetFatAttrib(regs*)>:
c001c200:	57                   	push   edi
c001c201:	56                   	push   esi
c001c202:	53                   	push   ebx
c001c203:	83 ec 1c             	sub    esp,0x1c
c001c206:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c20a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c20d:	68 14 01 00 00       	push   0x114
c001c212:	e8 2c 36 ff ff       	call   c000f843 <malloc>
c001c217:	83 c4 0c             	add    esp,0xc
c001c21a:	89 c3                	mov    ebx,eax
c001c21c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c221:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c224:	57                   	push   edi
c001c225:	53                   	push   ebx
c001c226:	e8 cb 71 ff ff       	call   c00133f6 <File::File(char const*, Process*)>
c001c22b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c22e:	83 c4 0c             	add    esp,0xc
c001c231:	0f b6 d4             	movzx  edx,ah
c001c234:	0f b6 c0             	movzx  eax,al
c001c237:	52                   	push   edx
c001c238:	50                   	push   eax
c001c239:	53                   	push   ebx
c001c23a:	e8 2d 74 ff ff       	call   c001366c <File::chfatattr(unsigned char, unsigned char)>
c001c23f:	83 c4 10             	add    esp,0x10
c001c242:	85 db                	test   ebx,ebx
c001c244:	74 14                	je     c001c25a <sysSetFatAttrib(regs*)+0x5a>
c001c246:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c24a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c24c:	83 ec 0c             	sub    esp,0xc
c001c24f:	53                   	push   ebx
c001c250:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c253:	83 c4 10             	add    esp,0x10
c001c256:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c25a:	85 c0                	test   eax,eax
c001c25c:	0f 95 c0             	setne  al
c001c25f:	31 d2                	xor    edx,edx
c001c261:	0f b6 c0             	movzx  eax,al
c001c264:	f7 d8                	neg    eax
c001c266:	83 d2 00             	adc    edx,0x0
c001c269:	83 c4 10             	add    esp,0x10
c001c26c:	f7 da                	neg    edx
c001c26e:	5b                   	pop    ebx
c001c26f:	5e                   	pop    esi
c001c270:	5f                   	pop    edi
c001c271:	c3                   	ret    

c001c272 <sysPipe(regs*)>:
c001c272:	57                   	push   edi
c001c273:	56                   	push   esi
c001c274:	53                   	push   ebx
c001c275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c279:	83 ec 0c             	sub    esp,0xc
c001c27c:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c27f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c282:	6a 20                	push   0x20
c001c284:	e8 ba 35 ff ff       	call   c000f843 <malloc>
c001c289:	89 c3                	mov    ebx,eax
c001c28b:	58                   	pop    eax
c001c28c:	5a                   	pop    edx
c001c28d:	68 00 50 00 00       	push   0x5000
c001c292:	53                   	push   ebx
c001c293:	e8 00 42 ff ff       	call   c0010498 <Pipe::Pipe(int)>
c001c298:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c29b:	e8 58 54 ff ff       	call   c00116f8 <UnixFile::getFileDescriptor()>
c001c2a0:	89 07                	mov    DWORD PTR [edi],eax
c001c2a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2a5:	e8 4e 54 ff ff       	call   c00116f8 <UnixFile::getFileDescriptor()>
c001c2aa:	83 c4 10             	add    esp,0x10
c001c2ad:	89 06                	mov    DWORD PTR [esi],eax
c001c2af:	31 d2                	xor    edx,edx
c001c2b1:	5b                   	pop    ebx
c001c2b2:	31 c0                	xor    eax,eax
c001c2b4:	5e                   	pop    esi
c001c2b5:	5f                   	pop    edi
c001c2b6:	c3                   	ret    

c001c2b7 <sysGetUnixTime(regs*)>:
c001c2b7:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c001c2bc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c2c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c2c6:	e9 15 7b ff ff       	jmp    c0013de0 <Clock::timeInSecondsLocal()>

c001c2cb <string_ends_with(char const*, char const*)>:
c001c2cb:	57                   	push   edi
c001c2cc:	56                   	push   esi
c001c2cd:	53                   	push   ebx
c001c2ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2d2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c2d6:	83 ec 0c             	sub    esp,0xc
c001c2d9:	53                   	push   ebx
c001c2da:	e8 b5 44 fe ff       	call   c0000794 <strlen>
c001c2df:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c2e2:	89 c6                	mov    esi,eax
c001c2e4:	e8 ab 44 fe ff       	call   c0000794 <strlen>
c001c2e9:	83 c4 10             	add    esp,0x10
c001c2ec:	39 c6                	cmp    esi,eax
c001c2ee:	7d 06                	jge    c001c2f6 <string_ends_with(char const*, char const*)+0x2b>
c001c2f0:	5b                   	pop    ebx
c001c2f1:	31 c0                	xor    eax,eax
c001c2f3:	5e                   	pop    esi
c001c2f4:	5f                   	pop    edi
c001c2f5:	c3                   	ret    
c001c2f6:	83 ec 08             	sub    esp,0x8
c001c2f9:	29 c6                	sub    esi,eax
c001c2fb:	57                   	push   edi
c001c2fc:	01 f3                	add    ebx,esi
c001c2fe:	53                   	push   ebx
c001c2ff:	e8 bc 45 fe ff       	call   c00008c0 <strcmp>
c001c304:	83 c4 10             	add    esp,0x10
c001c307:	85 c0                	test   eax,eax
c001c309:	5b                   	pop    ebx
c001c30a:	0f 94 c0             	sete   al
c001c30d:	5e                   	pop    esi
c001c30e:	0f b6 c0             	movzx  eax,al
c001c311:	5f                   	pop    edi
c001c312:	c3                   	ret    

c001c313 <sysCallOpen(regs*)>:
c001c313:	56                   	push   esi
c001c314:	53                   	push   ebx
c001c315:	81 ec 04 01 00 00    	sub    esp,0x104
c001c31b:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c322:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c325:	85 c9                	test   ecx,ecx
c001c327:	0f 84 b3 00 00 00    	je     c001c3e0 <sysCallOpen(regs*)+0xcd>
c001c32d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c330:	85 c0                	test   eax,eax
c001c332:	0f 84 a8 00 00 00    	je     c001c3e0 <sysCallOpen(regs*)+0xcd>
c001c338:	52                   	push   edx
c001c339:	68 35 be 02 c0       	push   0xc002be35
c001c33e:	50                   	push   eax
c001c33f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c343:	56                   	push   esi
c001c344:	e8 03 6f ff ff       	call   c001324c <Fs::standardiseFiles(char*, char const*, char const*)>
c001c349:	89 34 24             	mov    DWORD PTR [esp],esi
c001c34c:	e8 43 44 fe ff       	call   c0000794 <strlen>
c001c351:	83 c4 10             	add    esp,0x10
c001c354:	48                   	dec    eax
c001c355:	74 1d                	je     c001c374 <sysCallOpen(regs*)+0x61>
c001c357:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c35a:	eb 0f                	jmp    c001c36b <sysCallOpen(regs*)+0x58>
c001c35c:	80 fa 3a             	cmp    dl,0x3a
c001c35f:	74 0f                	je     c001c370 <sysCallOpen(regs*)+0x5d>
c001c361:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c365:	48                   	dec    eax
c001c366:	74 0c                	je     c001c374 <sysCallOpen(regs*)+0x61>
c001c368:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c36b:	80 fa 2e             	cmp    dl,0x2e
c001c36e:	75 ec                	jne    c001c35c <sysCallOpen(regs*)+0x49>
c001c370:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c374:	83 ec 08             	sub    esp,0x8
c001c377:	68 39 be 02 c0       	push   0xc002be39
c001c37c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c37f:	e8 47 ff ff ff       	call   c001c2cb <string_ends_with(char const*, char const*)>
c001c384:	83 c4 10             	add    esp,0x10
c001c387:	85 c0                	test   eax,eax
c001c389:	75 17                	jne    c001c3a2 <sysCallOpen(regs*)+0x8f>
c001c38b:	83 ec 08             	sub    esp,0x8
c001c38e:	68 5a be 02 c0       	push   0xc002be5a
c001c393:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c396:	e8 30 ff ff ff       	call   c001c2cb <string_ends_with(char const*, char const*)>
c001c39b:	83 c4 10             	add    esp,0x10
c001c39e:	85 c0                	test   eax,eax
c001c3a0:	74 51                	je     c001c3f3 <sysCallOpen(regs*)+0xe0>
c001c3a2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3a5:	83 ec 08             	sub    esp,0x8
c001c3a8:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c3ae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3b5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3b8:	ff 30                	push   DWORD PTR [eax]
c001c3ba:	68 3e be 02 c0       	push   0xc002be3e
c001c3bf:	e8 d9 6a ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001c3c4:	c7 04 24 4d be 02 c0 	mov    DWORD PTR [esp],0xc002be4d
c001c3cb:	e8 cd 6a ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001c3d0:	83 c4 10             	add    esp,0x10
c001c3d3:	81 c4 04 01 00 00    	add    esp,0x104
c001c3d9:	31 c0                	xor    eax,eax
c001c3db:	31 d2                	xor    edx,edx
c001c3dd:	5b                   	pop    ebx
c001c3de:	5e                   	pop    esi
c001c3df:	c3                   	ret    
c001c3e0:	81 c4 04 01 00 00    	add    esp,0x104
c001c3e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c3eb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c3f0:	5b                   	pop    ebx
c001c3f1:	5e                   	pop    esi
c001c3f2:	c3                   	ret    
c001c3f3:	83 ec 08             	sub    esp,0x8
c001c3f6:	68 3a be 02 c0       	push   0xc002be3a
c001c3fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3fe:	e8 bd 44 fe ff       	call   c00008c0 <strcmp>
c001c403:	83 c4 10             	add    esp,0x10
c001c406:	85 c0                	test   eax,eax
c001c408:	74 98                	je     c001c3a2 <sysCallOpen(regs*)+0x8f>
c001c40a:	83 ec 08             	sub    esp,0x8
c001c40d:	68 39 be 02 c0       	push   0xc002be39
c001c412:	56                   	push   esi
c001c413:	e8 b3 fe ff ff       	call   c001c2cb <string_ends_with(char const*, char const*)>
c001c418:	83 c4 10             	add    esp,0x10
c001c41b:	85 c0                	test   eax,eax
c001c41d:	75 83                	jne    c001c3a2 <sysCallOpen(regs*)+0x8f>
c001c41f:	83 ec 08             	sub    esp,0x8
c001c422:	68 5f be 02 c0       	push   0xc002be5f
c001c427:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c42a:	e8 9c fe ff ff       	call   c001c2cb <string_ends_with(char const*, char const*)>
c001c42f:	83 c4 10             	add    esp,0x10
c001c432:	85 c0                	test   eax,eax
c001c434:	0f 85 d9 00 00 00    	jne    c001c513 <sysCallOpen(regs*)+0x200>
c001c43a:	83 ec 08             	sub    esp,0x8
c001c43d:	68 64 be 02 c0       	push   0xc002be64
c001c442:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c445:	e8 81 fe ff ff       	call   c001c2cb <string_ends_with(char const*, char const*)>
c001c44a:	83 c4 10             	add    esp,0x10
c001c44d:	85 c0                	test   eax,eax
c001c44f:	0f 85 be 00 00 00    	jne    c001c513 <sysCallOpen(regs*)+0x200>
c001c455:	83 ec 08             	sub    esp,0x8
c001c458:	68 60 be 02 c0       	push   0xc002be60
c001c45d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c460:	e8 5b 44 fe ff       	call   c00008c0 <strcmp>
c001c465:	83 c4 10             	add    esp,0x10
c001c468:	85 c0                	test   eax,eax
c001c46a:	0f 84 a3 00 00 00    	je     c001c513 <sysCallOpen(regs*)+0x200>
c001c470:	83 ec 08             	sub    esp,0x8
c001c473:	68 5f be 02 c0       	push   0xc002be5f
c001c478:	56                   	push   esi
c001c479:	e8 4d fe ff ff       	call   c001c2cb <string_ends_with(char const*, char const*)>
c001c47e:	83 c4 10             	add    esp,0x10
c001c481:	85 c0                	test   eax,eax
c001c483:	0f 85 8a 00 00 00    	jne    c001c513 <sysCallOpen(regs*)+0x200>
c001c489:	83 ec 0c             	sub    esp,0xc
c001c48c:	68 14 01 00 00       	push   0x114
c001c491:	e8 ad 33 ff ff       	call   c000f843 <malloc>
c001c496:	83 c4 0c             	add    esp,0xc
c001c499:	89 c6                	mov    esi,eax
c001c49b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4a0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c4a3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4a6:	56                   	push   esi
c001c4a7:	e8 4a 6f ff ff       	call   c00133f6 <File::File(char const*, Process*)>
c001c4ac:	83 c4 10             	add    esp,0x10
c001c4af:	85 f6                	test   esi,esi
c001c4b1:	0f 84 29 ff ff ff    	je     c001c3e0 <sysCallOpen(regs*)+0xcd>
c001c4b7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c4ba:	0f b6 c2             	movzx  eax,dl
c001c4bd:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c4c0:	89 d0                	mov    eax,edx
c001c4c2:	83 e0 01             	and    eax,0x1
c001c4c5:	f6 c2 02             	test   dl,0x2
c001c4c8:	74 03                	je     c001c4cd <sysCallOpen(regs*)+0x1ba>
c001c4ca:	83 c8 02             	or     eax,0x2
c001c4cd:	f6 c2 04             	test   dl,0x4
c001c4d0:	74 03                	je     c001c4d5 <sysCallOpen(regs*)+0x1c2>
c001c4d2:	83 c8 04             	or     eax,0x4
c001c4d5:	f6 c2 08             	test   dl,0x8
c001c4d8:	74 03                	je     c001c4dd <sysCallOpen(regs*)+0x1ca>
c001c4da:	83 c8 0a             	or     eax,0xa
c001c4dd:	83 e2 10             	and    edx,0x10
c001c4e0:	74 03                	je     c001c4e5 <sysCallOpen(regs*)+0x1d2>
c001c4e2:	83 c8 12             	or     eax,0x12
c001c4e5:	83 ec 08             	sub    esp,0x8
c001c4e8:	50                   	push   eax
c001c4e9:	56                   	push   esi
c001c4ea:	e8 6b 6f ff ff       	call   c001345a <File::open(FileOpenMode)>
c001c4ef:	83 c4 10             	add    esp,0x10
c001c4f2:	85 c0                	test   eax,eax
c001c4f4:	0f 85 e6 fe ff ff    	jne    c001c3e0 <sysCallOpen(regs*)+0xcd>
c001c4fa:	83 ec 0c             	sub    esp,0xc
c001c4fd:	56                   	push   esi
c001c4fe:	e8 f5 51 ff ff       	call   c00116f8 <UnixFile::getFileDescriptor()>
c001c503:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c506:	89 02                	mov    DWORD PTR [edx],eax
c001c508:	c1 f8 1f             	sar    eax,0x1f
c001c50b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c50e:	e9 bd fe ff ff       	jmp    c001c3d0 <sysCallOpen(regs*)+0xbd>
c001c513:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c516:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c51c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c523:	e9 ab fe ff ff       	jmp    c001c3d3 <sysCallOpen(regs*)+0xc0>

c001c528 <Sys::loadSyscalls()>:
c001c528:	c7 05 e0 0e 03 c0 35 b6 01 c0 	mov    DWORD PTR ds:0xc0030ee0,0xc001b635
c001c532:	c7 05 e4 0e 03 c0 1e b2 01 c0 	mov    DWORD PTR ds:0xc0030ee4,0xc001b21e
c001c53c:	c7 05 e8 0e 03 c0 88 b3 01 c0 	mov    DWORD PTR ds:0xc0030ee8,0xc001b388
c001c546:	c7 05 ec 0e 03 c0 6b b5 01 c0 	mov    DWORD PTR ds:0xc0030eec,0xc001b56b
c001c550:	c7 05 f0 0e 03 c0 20 b3 01 c0 	mov    DWORD PTR ds:0xc0030ef0,0xc001b320
c001c55a:	c7 05 f4 0e 03 c0 55 b2 01 c0 	mov    DWORD PTR ds:0xc0030ef4,0xc001b255
c001c564:	c7 05 f8 0e 03 c0 36 b2 01 c0 	mov    DWORD PTR ds:0xc0030ef8,0xc001b236
c001c56e:	c7 05 fc 0e 03 c0 dd b3 01 c0 	mov    DWORD PTR ds:0xc0030efc,0xc001b3dd
c001c578:	c7 05 04 0f 03 c0 65 bb 01 c0 	mov    DWORD PTR ds:0xc0030f04,0xc001bb65
c001c582:	c7 05 00 0f 03 c0 13 c3 01 c0 	mov    DWORD PTR ds:0xc0030f00,0xc001c313
c001c58c:	c7 05 08 0f 03 c0 ed bb 01 c0 	mov    DWORD PTR ds:0xc0030f08,0xc001bbed
c001c596:	c7 05 0c 0f 03 c0 54 b8 01 c0 	mov    DWORD PTR ds:0xc0030f0c,0xc001b854
c001c5a0:	c7 05 10 0f 03 c0 70 b6 01 c0 	mov    DWORD PTR ds:0xc0030f10,0xc001b670
c001c5aa:	c7 05 14 0f 03 c0 75 b6 01 c0 	mov    DWORD PTR ds:0xc0030f14,0xc001b675
c001c5b4:	c7 05 18 0f 03 c0 c8 bc 01 c0 	mov    DWORD PTR ds:0xc0030f18,0xc001bcc8
c001c5be:	c7 05 1c 0f 03 c0 62 bc 01 c0 	mov    DWORD PTR ds:0xc0030f1c,0xc001bc62
c001c5c8:	c7 05 20 0f 03 c0 3c b9 01 c0 	mov    DWORD PTR ds:0xc0030f20,0xc001b93c
c001c5d2:	c7 05 24 0f 03 c0 a5 b9 01 c0 	mov    DWORD PTR ds:0xc0030f24,0xc001b9a5
c001c5dc:	c7 05 28 0f 03 c0 22 ba 01 c0 	mov    DWORD PTR ds:0xc0030f28,0xc001ba22
c001c5e6:	c7 05 2c 0f 03 c0 7a b6 01 c0 	mov    DWORD PTR ds:0xc0030f2c,0xc001b67a
c001c5f0:	c7 05 30 0f 03 c0 38 bd 01 c0 	mov    DWORD PTR ds:0xc0030f30,0xc001bd38
c001c5fa:	c7 05 34 0f 03 c0 52 bd 01 c0 	mov    DWORD PTR ds:0xc0030f34,0xc001bd52
c001c604:	c7 05 38 0f 03 c0 52 bd 01 c0 	mov    DWORD PTR ds:0xc0030f38,0xc001bd52
c001c60e:	c7 05 3c 0f 03 c0 93 bd 01 c0 	mov    DWORD PTR ds:0xc0030f3c,0xc001bd93
c001c618:	c7 05 40 0f 03 c0 f7 bd 01 c0 	mov    DWORD PTR ds:0xc0030f40,0xc001bdf7
c001c622:	c7 05 44 0f 03 c0 26 b8 01 c0 	mov    DWORD PTR ds:0xc0030f44,0xc001b826
c001c62c:	c7 05 48 0f 03 c0 5b be 01 c0 	mov    DWORD PTR ds:0xc0030f48,0xc001be5b
c001c636:	c7 05 4c 0f 03 c0 e3 b7 01 c0 	mov    DWORD PTR ds:0xc0030f4c,0xc001b7e3
c001c640:	c7 05 50 0f 03 c0 a7 be 01 c0 	mov    DWORD PTR ds:0xc0030f50,0xc001bea7
c001c64a:	c7 05 54 0f 03 c0 e2 b8 01 c0 	mov    DWORD PTR ds:0xc0030f54,0xc001b8e2
c001c654:	c7 05 58 0f 03 c0 2a bf 01 c0 	mov    DWORD PTR ds:0xc0030f58,0xc001bf2a
c001c65e:	c7 05 5c 0f 03 c0 a5 ba 01 c0 	mov    DWORD PTR ds:0xc0030f5c,0xc001baa5
c001c668:	c7 05 60 0f 03 c0 51 bf 01 c0 	mov    DWORD PTR ds:0xc0030f60,0xc001bf51
c001c672:	c7 05 64 0f 03 c0 a9 bf 01 c0 	mov    DWORD PTR ds:0xc0030f64,0xc001bfa9
c001c67c:	c7 05 68 0f 03 c0 e1 c0 01 c0 	mov    DWORD PTR ds:0xc0030f68,0xc001c0e1
c001c686:	c7 05 6c 0f 03 c0 84 b6 01 c0 	mov    DWORD PTR ds:0xc0030f6c,0xc001b684
c001c690:	c7 05 70 0f 03 c0 ee b6 01 c0 	mov    DWORD PTR ds:0xc0030f70,0xc001b6ee
c001c69a:	c7 05 74 0f 03 c0 34 b7 01 c0 	mov    DWORD PTR ds:0xc0030f74,0xc001b734
c001c6a4:	c7 05 78 0f 03 c0 00 c2 01 c0 	mov    DWORD PTR ds:0xc0030f78,0xc001c200
c001c6ae:	c7 05 7c 0f 03 c0 6d bd 01 c0 	mov    DWORD PTR ds:0xc0030f7c,0xc001bd6d
c001c6b8:	c7 05 80 0f 03 c0 85 b7 01 c0 	mov    DWORD PTR ds:0xc0030f80,0xc001b785
c001c6c2:	c7 05 84 0f 03 c0 72 c2 01 c0 	mov    DWORD PTR ds:0xc0030f84,0xc001c272
c001c6cc:	c7 05 88 0f 03 c0 b7 c2 01 c0 	mov    DWORD PTR ds:0xc0030f88,0xc001c2b7
c001c6d6:	c7 05 8c 0f 03 c0 78 b2 01 c0 	mov    DWORD PTR ds:0xc0030f8c,0xc001b278
c001c6e0:	c7 05 90 0f 03 c0 f9 b3 01 c0 	mov    DWORD PTR ds:0xc0030f90,0xc001b3f9
c001c6ea:	c7 05 94 0f 03 c0 21 b5 01 c0 	mov    DWORD PTR ds:0xc0030f94,0xc001b521
c001c6f4:	c7 05 98 0f 03 c0 e8 b1 01 c0 	mov    DWORD PTR ds:0xc0030f98,0xc001b1e8
c001c6fe:	c7 05 9c 0f 03 c0 d3 b5 01 c0 	mov    DWORD PTR ds:0xc0030f9c,0xc001b5d3
c001c708:	c7 05 a0 0f 03 c0 61 b2 01 c0 	mov    DWORD PTR ds:0xc0030fa0,0xc001b261
c001c712:	c3                   	ret    

c001c713 <Sys::systemCall(regs*, void*)>:
c001c713:	53                   	push   ebx
c001c714:	83 ec 08             	sub    esp,0x8
c001c717:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c71b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c71e:	83 f8 7f             	cmp    eax,0x7f
c001c721:	77 16                	ja     c001c739 <Sys::systemCall(regs*, void*)+0x26>
c001c723:	8b 14 85 e0 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf120]
c001c72a:	85 d2                	test   edx,edx
c001c72c:	74 0b                	je     c001c739 <Sys::systemCall(regs*, void*)+0x26>
c001c72e:	83 ec 0c             	sub    esp,0xc
c001c731:	53                   	push   ebx
c001c732:	ff d2                	call   edx
c001c734:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c737:	eb 0d                	jmp    c001c746 <Sys::systemCall(regs*, void*)+0x33>
c001c739:	52                   	push   edx
c001c73a:	52                   	push   edx
c001c73b:	50                   	push   eax
c001c73c:	68 69 be 02 c0       	push   0xc002be69
c001c741:	e8 57 67 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001c746:	83 c4 10             	add    esp,0x10
c001c749:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c74e:	31 d2                	xor    edx,edx
c001c750:	83 c4 08             	add    esp,0x8
c001c753:	5b                   	pop    ebx
c001c754:	c3                   	ret    

c001c755 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c755:	55                   	push   ebp
c001c756:	57                   	push   edi
c001c757:	56                   	push   esi
c001c758:	53                   	push   ebx
c001c759:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c75f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c766:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c76d:	85 c0                	test   eax,eax
c001c76f:	0f 95 c1             	setne  cl
c001c772:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c77a:	0f 94 c2             	sete   dl
c001c77d:	84 d1                	test   cl,dl
c001c77f:	74 23                	je     c001c7a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c781:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c787:	74 1b                	je     c001c7a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c789:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c78f:	89 da                	mov    edx,ebx
c001c791:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c797:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c79d:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c7a4:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c7ab:	05 ff 0f 00 00       	add    eax,0xfff
c001c7b0:	83 ec 0c             	sub    esp,0xc
c001c7b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c7b7:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c7bd:	c1 e8 0c             	shr    eax,0xc
c001c7c0:	89 ef                	mov    edi,ebp
c001c7c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c7c6:	c1 ef 0c             	shr    edi,0xc
c001c7c9:	6a 01                	push   0x1
c001c7cb:	e8 73 53 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c001c7d0:	89 c6                	mov    esi,eax
c001c7d2:	58                   	pop    eax
c001c7d3:	5a                   	pop    edx
c001c7d4:	57                   	push   edi
c001c7d5:	68 ef be 02 c0       	push   0xc002beef
c001c7da:	e8 be 66 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001c7df:	59                   	pop    ecx
c001c7e0:	58                   	pop    eax
c001c7e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7e5:	68 01 bf 02 c0       	push   0xc002bf01
c001c7ea:	e8 ae 66 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001c7ef:	83 c4 10             	add    esp,0x10
c001c7f2:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c7f8:	0f 86 24 01 00 00    	jbe    c001c922 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c7fe:	c1 e7 0c             	shl    edi,0xc
c001c801:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c804:	89 df                	mov    edi,ebx
c001c806:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c80a:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c811:	01 dd                	add    ebp,ebx
c001c813:	29 fd                	sub    ebp,edi
c001c815:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c819:	0f 84 01 01 00 00    	je     c001c920 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c81f:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c825:	76 05                	jbe    c001c82c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c827:	bd 00 10 00 00       	mov    ebp,0x1000
c001c82c:	83 ec 0c             	sub    esp,0xc
c001c82f:	31 d2                	xor    edx,edx
c001c831:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c838:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c83a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c83e:	50                   	push   eax
c001c83f:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c843:	50                   	push   eax
c001c844:	52                   	push   edx
c001c845:	55                   	push   ebp
c001c846:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c84d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c850:	83 c4 20             	add    esp,0x20
c001c853:	85 c0                	test   eax,eax
c001c855:	74 0a                	je     c001c861 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c857:	53                   	push   ebx
c001c858:	53                   	push   ebx
c001c859:	50                   	push   eax
c001c85a:	68 13 bf 02 c0       	push   0xc002bf13
c001c85f:	eb 0f                	jmp    c001c870 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c861:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c865:	74 20                	je     c001c887 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c867:	51                   	push   ecx
c001c868:	51                   	push   ecx
c001c869:	6a 00                	push   0x0
c001c86b:	68 3e bf 02 c0       	push   0xc002bf3e
c001c870:	e8 28 66 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001c875:	89 34 24             	mov    DWORD PTR [esp],esi
c001c878:	e8 4c 57 ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c001c87d:	83 c4 10             	add    esp,0x10
c001c880:	31 c0                	xor    eax,eax
c001c882:	e9 55 01 00 00       	jmp    c001c9dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c887:	e8 d8 14 00 00       	call   c001dd64 <lockScheduler()>
c001c88c:	e8 54 36 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001c891:	6a 07                	push   0x7
c001c893:	89 c5                	mov    ebp,eax
c001c895:	56                   	push   esi
c001c896:	50                   	push   eax
c001c897:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c89c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c89f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8a5:	e8 86 5a ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c8aa:	83 c4 0c             	add    esp,0xc
c001c8ad:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c8b4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8ba:	6a 00                	push   0x0
c001c8bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8c4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8ca:	e8 cb 58 ff ff       	call   c001219a <VAS::mapOtherVASIn(bool, VAS*)>
c001c8cf:	58                   	pop    eax
c001c8d0:	5a                   	pop    edx
c001c8d1:	68 07 0c 00 00       	push   0xc07
c001c8d6:	57                   	push   edi
c001c8d7:	81 c7 00 10 00 00    	add    edi,0x1000
c001c8dd:	55                   	push   ebp
c001c8de:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c8e5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8eb:	6a 00                	push   0x0
c001c8ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8f5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8fb:	e8 ea 5d ff ff       	call   c00126ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c900:	83 c4 1c             	add    esp,0x1c
c001c903:	68 00 10 00 00       	push   0x1000
c001c908:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c90c:	50                   	push   eax
c001c90d:	56                   	push   esi
c001c90e:	e8 31 3e fe ff       	call   c0000744 <memcpy>
c001c913:	e8 4e 14 00 00       	call   c001dd66 <unlockScheduler()>
c001c918:	83 c4 10             	add    esp,0x10
c001c91b:	e9 ea fe ff ff       	jmp    c001c80a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c920:	89 fb                	mov    ebx,edi
c001c922:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c92a:	0f 86 9e 00 00 00    	jbe    c001c9ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c930:	e8 2f 14 00 00       	call   c001dd64 <lockScheduler()>
c001c935:	51                   	push   ecx
c001c936:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c93d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c943:	6a 00                	push   0x0
c001c945:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c94a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c94d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c953:	e8 42 58 ff ff       	call   c001219a <VAS::mapOtherVASIn(bool, VAS*)>
c001c958:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c95c:	c1 e7 0c             	shl    edi,0xc
c001c95f:	01 df                	add    edi,ebx
c001c961:	83 c4 10             	add    esp,0x10
c001c964:	39 fb                	cmp    ebx,edi
c001c966:	74 61                	je     c001c9c9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c968:	e8 78 35 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001c96d:	6a 07                	push   0x7
c001c96f:	89 c5                	mov    ebp,eax
c001c971:	56                   	push   esi
c001c972:	50                   	push   eax
c001c973:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c978:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c97b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c981:	e8 aa 59 ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c986:	58                   	pop    eax
c001c987:	5a                   	pop    edx
c001c988:	68 07 0c 00 00       	push   0xc07
c001c98d:	53                   	push   ebx
c001c98e:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c994:	55                   	push   ebp
c001c995:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c99c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9a2:	6a 00                	push   0x0
c001c9a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9a9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9ac:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9b2:	e8 33 5d ff ff       	call   c00126ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9b7:	83 c4 1c             	add    esp,0x1c
c001c9ba:	68 00 10 00 00       	push   0x1000
c001c9bf:	6a 00                	push   0x0
c001c9c1:	56                   	push   esi
c001c9c2:	e8 b1 3d fe ff       	call   c0000778 <memset>
c001c9c7:	eb 98                	jmp    c001c961 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c9c9:	e8 98 13 00 00       	call   c001dd66 <unlockScheduler()>
c001c9ce:	83 ec 0c             	sub    esp,0xc
c001c9d1:	56                   	push   esi
c001c9d2:	e8 f2 55 ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c001c9d7:	83 c4 10             	add    esp,0x10
c001c9da:	b0 01                	mov    al,0x1
c001c9dc:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c9e2:	5b                   	pop    ebx
c001c9e3:	5e                   	pop    esi
c001c9e4:	5f                   	pop    edi
c001c9e5:	5d                   	pop    ebp
c001c9e6:	c3                   	ret    

c001c9e7 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c9e7:	55                   	push   ebp
c001c9e8:	57                   	push   edi
c001c9e9:	56                   	push   esi
c001c9ea:	53                   	push   ebx
c001c9eb:	83 ec 48             	sub    esp,0x48
c001c9ee:	68 14 01 00 00       	push   0x114
c001c9f3:	e8 4b 2e ff ff       	call   c000f843 <malloc>
c001c9f8:	83 c4 0c             	add    esp,0xc
c001c9fb:	89 c6                	mov    esi,eax
c001c9fd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca01:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca05:	50                   	push   eax
c001ca06:	e8 eb 69 ff ff       	call   c00133f6 <File::File(char const*, Process*)>
c001ca0b:	58                   	pop    eax
c001ca0c:	5a                   	pop    edx
c001ca0d:	6a 01                	push   0x1
c001ca0f:	56                   	push   esi
c001ca10:	e8 45 6a ff ff       	call   c001345a <File::open(FileOpenMode)>
c001ca15:	83 c4 10             	add    esp,0x10
c001ca18:	85 c0                	test   eax,eax
c001ca1a:	0f 85 47 01 00 00    	jne    c001cb67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca20:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ca28:	83 ec 0c             	sub    esp,0xc
c001ca2b:	6a 34                	push   0x34
c001ca2d:	e8 11 2e ff ff       	call   c000f843 <malloc>
c001ca32:	89 c3                	mov    ebx,eax
c001ca34:	58                   	pop    eax
c001ca35:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca37:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ca3b:	57                   	push   edi
c001ca3c:	53                   	push   ebx
c001ca3d:	6a 00                	push   0x0
c001ca3f:	6a 34                	push   0x34
c001ca41:	56                   	push   esi
c001ca42:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca45:	83 c4 20             	add    esp,0x20
c001ca48:	85 c0                	test   eax,eax
c001ca4a:	0f 85 17 01 00 00    	jne    c001cb67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca50:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ca56:	0f 85 0b 01 00 00    	jne    c001cb67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca5c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca5f:	85 c0                	test   eax,eax
c001ca61:	0f 84 00 01 00 00    	je     c001cb67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca67:	31 d2                	xor    edx,edx
c001ca69:	55                   	push   ebp
c001ca6a:	52                   	push   edx
c001ca6b:	50                   	push   eax
c001ca6c:	56                   	push   esi
c001ca6d:	e8 a6 6a ff ff       	call   c0013518 <File::seek(unsigned long long)>
c001ca72:	83 c4 10             	add    esp,0x10
c001ca75:	85 c0                	test   eax,eax
c001ca77:	0f 85 ea 00 00 00    	jne    c001cb67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca7d:	83 ec 0c             	sub    esp,0xc
c001ca80:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ca83:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ca87:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca8b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ca8f:	0f af c2             	imul   eax,edx
c001ca92:	50                   	push   eax
c001ca93:	e8 ab 2d ff ff       	call   c000f843 <malloc>
c001ca98:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ca9a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca9e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001caa1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001caa5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001caa9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001caad:	0f af c2             	imul   eax,edx
c001cab0:	99                   	cdq    
c001cab1:	52                   	push   edx
c001cab2:	50                   	push   eax
c001cab3:	56                   	push   esi
c001cab4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cab7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001caba:	83 c4 20             	add    esp,0x20
c001cabd:	85 c0                	test   eax,eax
c001cabf:	0f 84 a2 00 00 00    	je     c001cb67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cac5:	31 d2                	xor    edx,edx
c001cac7:	51                   	push   ecx
c001cac8:	52                   	push   edx
c001cac9:	50                   	push   eax
c001caca:	56                   	push   esi
c001cacb:	e8 48 6a ff ff       	call   c0013518 <File::seek(unsigned long long)>
c001cad0:	83 c4 10             	add    esp,0x10
c001cad3:	85 c0                	test   eax,eax
c001cad5:	0f 85 8c 00 00 00    	jne    c001cb67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cadb:	83 ec 0c             	sub    esp,0xc
c001cade:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cae2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cae6:	31 ed                	xor    ebp,ebp
c001cae8:	0f af c2             	imul   eax,edx
c001caeb:	50                   	push   eax
c001caec:	e8 52 2d ff ff       	call   c000f843 <malloc>
c001caf1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001caf3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001caf7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cafa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cafe:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb02:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb06:	0f af c2             	imul   eax,edx
c001cb09:	99                   	cdq    
c001cb0a:	52                   	push   edx
c001cb0b:	50                   	push   eax
c001cb0c:	56                   	push   esi
c001cb0d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb10:	83 c4 20             	add    esp,0x20
c001cb13:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cb1b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb1f:	0f 86 80 00 00 00    	jbe    c001cba5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cb25:	0f b7 fd             	movzx  edi,bp
c001cb28:	c1 e7 05             	shl    edi,0x5
c001cb2b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cb2f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cb32:	75 6b                	jne    c001cb9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb34:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cb37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb3b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cb3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb42:	52                   	push   edx
c001cb43:	31 d2                	xor    edx,edx
c001cb45:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cb48:	52                   	push   edx
c001cb49:	50                   	push   eax
c001cb4a:	56                   	push   esi
c001cb4b:	e8 c8 69 ff ff       	call   c0013518 <File::seek(unsigned long long)>
c001cb50:	83 c4 10             	add    esp,0x10
c001cb53:	85 c0                	test   eax,eax
c001cb55:	74 17                	je     c001cb6e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cb57:	83 ec 0c             	sub    esp,0xc
c001cb5a:	68 6a bf 02 c0       	push   0xc002bf6a
c001cb5f:	e8 39 63 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001cb64:	83 c4 10             	add    esp,0x10
c001cb67:	31 c0                	xor    eax,eax
c001cb69:	e9 87 00 00 00       	jmp    c001cbf5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cb6e:	83 ec 0c             	sub    esp,0xc
c001cb71:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cb74:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cb77:	50                   	push   eax
c001cb78:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cb7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb80:	56                   	push   esi
c001cb81:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cb85:	e8 cb fb ff ff       	call   c001c755 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cb8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb8e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cb92:	83 c4 20             	add    esp,0x20
c001cb95:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cb99:	73 04                	jae    c001cb9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb9f:	45                   	inc    ebp
c001cba0:	e9 76 ff ff ff       	jmp    c001cb1b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cba5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cba9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbb1:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cbb7:	83 ec 0c             	sub    esp,0xc
c001cbba:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cbc0:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cbc5:	05 00 10 00 00       	add    eax,0x1000
c001cbca:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cbcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd1:	e8 7d 2c ff ff       	call   c000f853 <free>
c001cbd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbd9:	e8 75 2c ff ff       	call   c000f853 <free>
c001cbde:	58                   	pop    eax
c001cbdf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cbe3:	e8 6b 2c ff ff       	call   c000f853 <free>
c001cbe8:	89 34 24             	mov    DWORD PTR [esp],esi
c001cbeb:	e8 c8 68 ff ff       	call   c00134b8 <File::close()>
c001cbf0:	83 c4 10             	add    esp,0x10
c001cbf3:	b0 01                	mov    al,0x1
c001cbf5:	83 c4 3c             	add    esp,0x3c
c001cbf8:	5b                   	pop    ebx
c001cbf9:	5e                   	pop    esi
c001cbfa:	5f                   	pop    edi
c001cbfb:	5d                   	pop    ebp
c001cbfc:	c3                   	ret    

c001cbfd <Thr::runtimeReferenceHelper()>:
c001cbfd:	83 ec 18             	sub    esp,0x18
c001cc00:	68 72 bf 02 c0       	push   0xc002bf72
c001cc05:	e8 93 62 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001cc0a:	fa                   	cli    
c001cc0b:	83 c4 10             	add    esp,0x10
c001cc0e:	eb fe                	jmp    c001cc0e <Thr::runtimeReferenceHelper()+0x11>

c001cc10 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc10:	57                   	push   edi
c001cc11:	56                   	push   esi
c001cc12:	53                   	push   ebx
c001cc13:	31 db                	xor    ebx,ebx
c001cc15:	39 1d 80 18 03 c0    	cmp    DWORD PTR ds:0xc0031880,ebx
c001cc1b:	7e 3c                	jle    c001cc59 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc1d:	8b 34 9d 00 18 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce800]
c001cc24:	31 ff                	xor    edi,edi
c001cc26:	39 3c 9d 00 17 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce900],edi
c001cc2d:	7e 27                	jle    c001cc56 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cc2f:	50                   	push   eax
c001cc30:	50                   	push   eax
c001cc31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc35:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc37:	03 04 9d 80 17 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce880]
c001cc3e:	50                   	push   eax
c001cc3f:	e8 7c 3c fe ff       	call   c00008c0 <strcmp>
c001cc44:	83 c4 10             	add    esp,0x10
c001cc47:	85 c0                	test   eax,eax
c001cc49:	75 05                	jne    c001cc50 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cc4b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cc4e:	eb 0b                	jmp    c001cc5b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cc50:	83 c6 10             	add    esi,0x10
c001cc53:	47                   	inc    edi
c001cc54:	eb d0                	jmp    c001cc26 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cc56:	43                   	inc    ebx
c001cc57:	eb bc                	jmp    c001cc15 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cc59:	31 c0                	xor    eax,eax
c001cc5b:	5b                   	pop    ebx
c001cc5c:	5e                   	pop    esi
c001cc5d:	5f                   	pop    edi
c001cc5e:	c3                   	ret    

c001cc5f <Thr::loadKernelSymbolTable(char const*)>:
c001cc5f:	55                   	push   ebp
c001cc60:	57                   	push   edi
c001cc61:	56                   	push   esi
c001cc62:	53                   	push   ebx
c001cc63:	83 ec 68             	sub    esp,0x68
c001cc66:	8b 35 d4 18 03 c0    	mov    esi,DWORD PTR ds:0xc00318d4
c001cc6c:	68 14 01 00 00       	push   0x114
c001cc71:	e8 cd 2b ff ff       	call   c000f843 <malloc>
c001cc76:	83 c4 0c             	add    esp,0xc
c001cc79:	89 c3                	mov    ebx,eax
c001cc7b:	56                   	push   esi
c001cc7c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cc80:	50                   	push   eax
c001cc81:	e8 70 67 ff ff       	call   c00133f6 <File::File(char const*, Process*)>
c001cc86:	5e                   	pop    esi
c001cc87:	5f                   	pop    edi
c001cc88:	6a 01                	push   0x1
c001cc8a:	53                   	push   ebx
c001cc8b:	e8 ca 67 ff ff       	call   c001345a <File::open(FileOpenMode)>
c001cc90:	83 c4 10             	add    esp,0x10
c001cc93:	85 c0                	test   eax,eax
c001cc95:	74 0a                	je     c001cca1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cc97:	83 ec 0c             	sub    esp,0xc
c001cc9a:	68 94 bf 02 c0       	push   0xc002bf94
c001cc9f:	eb 34                	jmp    c001ccd5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cca1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cca9:	83 ec 0c             	sub    esp,0xc
c001ccac:	6a 34                	push   0x34
c001ccae:	e8 90 2b ff ff       	call   c000f843 <malloc>
c001ccb3:	59                   	pop    ecx
c001ccb4:	89 c7                	mov    edi,eax
c001ccb6:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ccba:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccbc:	56                   	push   esi
c001ccbd:	57                   	push   edi
c001ccbe:	6a 00                	push   0x0
c001ccc0:	6a 34                	push   0x34
c001ccc2:	53                   	push   ebx
c001ccc3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ccc6:	83 c4 20             	add    esp,0x20
c001ccc9:	85 c0                	test   eax,eax
c001cccb:	74 17                	je     c001cce4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cccd:	83 ec 0c             	sub    esp,0xc
c001ccd0:	68 ab bf 02 c0       	push   0xc002bfab
c001ccd5:	e8 af d8 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001ccda:	83 c4 10             	add    esp,0x10
c001ccdd:	31 c0                	xor    eax,eax
c001ccdf:	e9 31 02 00 00       	jmp    c001cf15 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cce4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ccea:	75 e1                	jne    c001cccd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ccec:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ccef:	85 c0                	test   eax,eax
c001ccf1:	74 da                	je     c001cccd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ccf3:	52                   	push   edx
c001ccf4:	31 d2                	xor    edx,edx
c001ccf6:	52                   	push   edx
c001ccf7:	50                   	push   eax
c001ccf8:	53                   	push   ebx
c001ccf9:	e8 1a 68 ff ff       	call   c0013518 <File::seek(unsigned long long)>
c001ccfe:	83 c4 10             	add    esp,0x10
c001cd01:	85 c0                	test   eax,eax
c001cd03:	75 c8                	jne    c001cccd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd05:	83 ec 0c             	sub    esp,0xc
c001cd08:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd0c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd10:	31 ed                	xor    ebp,ebp
c001cd12:	0f af c2             	imul   eax,edx
c001cd15:	50                   	push   eax
c001cd16:	e8 28 2b ff ff       	call   c000f843 <malloc>
c001cd1b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd21:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd28:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd2c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd30:	0f af c2             	imul   eax,edx
c001cd33:	99                   	cdq    
c001cd34:	52                   	push   edx
c001cd35:	50                   	push   eax
c001cd36:	53                   	push   ebx
c001cd37:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd3a:	83 c4 20             	add    esp,0x20
c001cd3d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cd45:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cd4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd55:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cd5d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cd61:	0f 86 aa 00 00 00    	jbe    c001ce11 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cd67:	0f b7 f5             	movzx  esi,bp
c001cd6a:	6b f6 28             	imul   esi,esi,0x28
c001cd6d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cd71:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cd74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd78:	50                   	push   eax
c001cd79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cd7d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cd81:	8b 16                	mov    edx,DWORD PTR [esi]
c001cd83:	6b c0 28             	imul   eax,eax,0x28
c001cd86:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cd8a:	89 d0                	mov    eax,edx
c001cd8c:	31 d2                	xor    edx,edx
c001cd8e:	52                   	push   edx
c001cd8f:	50                   	push   eax
c001cd90:	53                   	push   ebx
c001cd91:	e8 82 67 ff ff       	call   c0013518 <File::seek(unsigned long long)>
c001cd96:	83 c4 0c             	add    esp,0xc
c001cd99:	6a 20                	push   0x20
c001cd9b:	6a 00                	push   0x0
c001cd9d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cda1:	52                   	push   edx
c001cda2:	e8 d1 39 fe ff       	call   c0000778 <memset>
c001cda7:	58                   	pop    eax
c001cda8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdaa:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cdae:	51                   	push   ecx
c001cdaf:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cdb3:	52                   	push   edx
c001cdb4:	6a 00                	push   0x0
c001cdb6:	6a 1f                	push   0x1f
c001cdb8:	53                   	push   ebx
c001cdb9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdbc:	83 c4 18             	add    esp,0x18
c001cdbf:	68 c2 bf 02 c0       	push   0xc002bfc2
c001cdc4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cdc8:	52                   	push   edx
c001cdc9:	e8 f2 3a fe ff       	call   c00008c0 <strcmp>
c001cdce:	83 c4 10             	add    esp,0x10
c001cdd1:	85 c0                	test   eax,eax
c001cdd3:	75 0f                	jne    c001cde4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cdd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cdd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cddc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cde0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cde4:	50                   	push   eax
c001cde5:	50                   	push   eax
c001cde6:	68 ca bf 02 c0       	push   0xc002bfca
c001cdeb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cdef:	50                   	push   eax
c001cdf0:	e8 cb 3a fe ff       	call   c00008c0 <strcmp>
c001cdf5:	83 c4 10             	add    esp,0x10
c001cdf8:	85 c0                	test   eax,eax
c001cdfa:	75 0f                	jne    c001ce0b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cdfc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cdff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce0b:	45                   	inc    ebp
c001ce0c:	e9 4c ff ff ff       	jmp    c001cd5d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce11:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce16:	75 10                	jne    c001ce28 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ce18:	83 ec 0c             	sub    esp,0xc
c001ce1b:	68 d2 bf 02 c0       	push   0xc002bfd2
c001ce20:	e8 64 d7 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001ce25:	83 c4 10             	add    esp,0x10
c001ce28:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ce2d:	75 10                	jne    c001ce3f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ce2f:	83 ec 0c             	sub    esp,0xc
c001ce32:	68 d2 bf 02 c0       	push   0xc002bfd2
c001ce37:	e8 4d d7 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001ce3c:	83 c4 10             	add    esp,0x10
c001ce3f:	31 d2                	xor    edx,edx
c001ce41:	50                   	push   eax
c001ce42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce46:	52                   	push   edx
c001ce47:	50                   	push   eax
c001ce48:	53                   	push   ebx
c001ce49:	e8 ca 66 ff ff       	call   c0013518 <File::seek(unsigned long long)>
c001ce4e:	5a                   	pop    edx
c001ce4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ce53:	e8 eb 29 ff ff       	call   c000f843 <malloc>
c001ce58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce60:	31 c9                	xor    ecx,ecx
c001ce62:	5e                   	pop    esi
c001ce63:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce65:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ce69:	55                   	push   ebp
c001ce6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce6e:	51                   	push   ecx
c001ce6f:	52                   	push   edx
c001ce70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ce74:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ce78:	53                   	push   ebx
c001ce79:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce7c:	83 c4 14             	add    esp,0x14
c001ce7f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce83:	e8 bb 29 ff ff       	call   c000f843 <malloc>
c001ce88:	89 c6                	mov    esi,eax
c001ce8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce8c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce8f:	56                   	push   esi
c001ce90:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ce94:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ce98:	51                   	push   ecx
c001ce99:	52                   	push   edx
c001ce9a:	53                   	push   ebx
c001ce9b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cea2:	8b 15 80 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031880
c001cea8:	83 c4 1c             	add    esp,0x1c
c001ceab:	c1 e8 04             	shr    eax,0x4
c001ceae:	89 04 95 00 17 03 c0 	mov    DWORD PTR [edx*4-0x3ffce900],eax
c001ceb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ceb9:	31 d2                	xor    edx,edx
c001cebb:	52                   	push   edx
c001cebc:	50                   	push   eax
c001cebd:	53                   	push   ebx
c001cebe:	e8 55 66 ff ff       	call   c0013518 <File::seek(unsigned long long)>
c001cec3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cec5:	31 d2                	xor    edx,edx
c001cec7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ceca:	56                   	push   esi
c001cecb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cecf:	52                   	push   edx
c001ced0:	50                   	push   eax
c001ced1:	53                   	push   ebx
c001ced2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ced5:	83 c4 14             	add    esp,0x14
c001ced8:	53                   	push   ebx
c001ced9:	e8 da 65 ff ff       	call   c00134b8 <File::close()>
c001cede:	5d                   	pop    ebp
c001cedf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cee3:	e8 6b 29 ff ff       	call   c000f853 <free>
c001cee8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ceeb:	e8 63 29 ff ff       	call   c000f853 <free>
c001cef0:	a1 80 18 03 c0       	mov    eax,ds:0xc0031880
c001cef5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cef9:	8d 50 01             	lea    edx,[eax+0x1]
c001cefc:	89 0c 85 00 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce800],ecx
c001cf03:	89 34 85 80 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce880],esi
c001cf0a:	89 15 80 18 03 c0    	mov    DWORD PTR ds:0xc0031880,edx
c001cf10:	83 c4 10             	add    esp,0x10
c001cf13:	b0 01                	mov    al,0x1
c001cf15:	83 c4 5c             	add    esp,0x5c
c001cf18:	5b                   	pop    ebx
c001cf19:	5e                   	pop    esi
c001cf1a:	5f                   	pop    edi
c001cf1b:	5d                   	pop    ebp
c001cf1c:	c3                   	ret    

c001cf1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf1d:	55                   	push   ebp
c001cf1e:	57                   	push   edi
c001cf1f:	56                   	push   esi
c001cf20:	53                   	push   ebx
c001cf21:	81 ec 68 03 00 00    	sub    esp,0x368
c001cf27:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cf2e:	8b 1d d4 18 03 c0    	mov    ebx,DWORD PTR ds:0xc00318d4
c001cf34:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cf38:	68 14 01 00 00       	push   0x114
c001cf3d:	e8 01 29 ff ff       	call   c000f843 <malloc>
c001cf42:	83 c4 0c             	add    esp,0xc
c001cf45:	89 c5                	mov    ebp,eax
c001cf47:	53                   	push   ebx
c001cf48:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cf4f:	50                   	push   eax
c001cf50:	e8 a1 64 ff ff       	call   c00133f6 <File::File(char const*, Process*)>
c001cf55:	5e                   	pop    esi
c001cf56:	5f                   	pop    edi
c001cf57:	6a 01                	push   0x1
c001cf59:	55                   	push   ebp
c001cf5a:	e8 fb 64 ff ff       	call   c001345a <File::open(FileOpenMode)>
c001cf5f:	83 c4 10             	add    esp,0x10
c001cf62:	85 c0                	test   eax,eax
c001cf64:	0f 85 8d 06 00 00    	jne    c001d5f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf6a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cf72:	83 ec 0c             	sub    esp,0xc
c001cf75:	6a 34                	push   0x34
c001cf77:	e8 c7 28 ff ff       	call   c000f843 <malloc>
c001cf7c:	5b                   	pop    ebx
c001cf7d:	89 c7                	mov    edi,eax
c001cf7f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cf83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf86:	53                   	push   ebx
c001cf87:	57                   	push   edi
c001cf88:	6a 00                	push   0x0
c001cf8a:	6a 34                	push   0x34
c001cf8c:	55                   	push   ebp
c001cf8d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf90:	83 c4 20             	add    esp,0x20
c001cf93:	85 c0                	test   eax,eax
c001cf95:	0f 85 5c 06 00 00    	jne    c001d5f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf9b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cfa1:	0f 85 50 06 00 00    	jne    c001d5f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfa7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cfaa:	85 c0                	test   eax,eax
c001cfac:	0f 84 45 06 00 00    	je     c001d5f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfb2:	31 d2                	xor    edx,edx
c001cfb4:	51                   	push   ecx
c001cfb5:	52                   	push   edx
c001cfb6:	50                   	push   eax
c001cfb7:	55                   	push   ebp
c001cfb8:	e8 5b 65 ff ff       	call   c0013518 <File::seek(unsigned long long)>
c001cfbd:	83 c4 10             	add    esp,0x10
c001cfc0:	85 c0                	test   eax,eax
c001cfc2:	0f 85 2f 06 00 00    	jne    c001d5f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cfc8:	83 ec 0c             	sub    esp,0xc
c001cfcb:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cfce:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cfd2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cfd6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cfda:	0f af c2             	imul   eax,edx
c001cfdd:	50                   	push   eax
c001cfde:	e8 60 28 ff ff       	call   c000f843 <malloc>
c001cfe3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cfe6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cfea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cff1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cff5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cff9:	0f af c2             	imul   eax,edx
c001cffc:	99                   	cdq    
c001cffd:	52                   	push   edx
c001cffe:	50                   	push   eax
c001cfff:	55                   	push   ebp
c001d000:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d003:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d006:	83 c4 20             	add    esp,0x20
c001d009:	85 c0                	test   eax,eax
c001d00b:	0f 84 e6 05 00 00    	je     c001d5f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d011:	52                   	push   edx
c001d012:	31 d2                	xor    edx,edx
c001d014:	52                   	push   edx
c001d015:	50                   	push   eax
c001d016:	55                   	push   ebp
c001d017:	e8 fc 64 ff ff       	call   c0013518 <File::seek(unsigned long long)>
c001d01c:	83 c4 10             	add    esp,0x10
c001d01f:	85 c0                	test   eax,eax
c001d021:	0f 85 d0 05 00 00    	jne    c001d5f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d027:	83 ec 0c             	sub    esp,0xc
c001d02a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d02e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d032:	31 f6                	xor    esi,esi
c001d034:	0f af c2             	imul   eax,edx
c001d037:	50                   	push   eax
c001d038:	e8 06 28 ff ff       	call   c000f843 <malloc>
c001d03d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d040:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d044:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d047:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d04b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d04f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d053:	0f af c2             	imul   eax,edx
c001d056:	99                   	cdq    
c001d057:	52                   	push   edx
c001d058:	50                   	push   eax
c001d059:	55                   	push   ebp
c001d05a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d05d:	83 c4 20             	add    esp,0x20
c001d060:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d064:	0f 86 8a 00 00 00    	jbe    c001d0f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d06a:	0f b7 de             	movzx  ebx,si
c001d06d:	c1 e3 05             	shl    ebx,0x5
c001d070:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d074:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d077:	75 75                	jne    c001d0ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d079:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d07c:	31 d2                	xor    edx,edx
c001d07e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d082:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d085:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d089:	50                   	push   eax
c001d08a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d08d:	52                   	push   edx
c001d08e:	50                   	push   eax
c001d08f:	55                   	push   ebp
c001d090:	e8 83 64 ff ff       	call   c0013518 <File::seek(unsigned long long)>
c001d095:	83 c4 10             	add    esp,0x10
c001d098:	85 c0                	test   eax,eax
c001d09a:	0f 85 57 05 00 00    	jne    c001d5f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0a0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d0a7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0aa:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d0ae:	31 d2                	xor    edx,edx
c001d0b0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d0b4:	83 ec 0c             	sub    esp,0xc
c001d0b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d0bb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0c2:	50                   	push   eax
c001d0c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0cb:	52                   	push   edx
c001d0cc:	50                   	push   eax
c001d0cd:	55                   	push   ebp
c001d0ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0d1:	83 c4 1c             	add    esp,0x1c
c001d0d4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d0d7:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d0da:	50                   	push   eax
c001d0db:	6a 00                	push   0x0
c001d0dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d0e5:	50                   	push   eax
c001d0e6:	e8 8d 36 fe ff       	call   c0000778 <memset>
c001d0eb:	83 c4 10             	add    esp,0x10
c001d0ee:	46                   	inc    esi
c001d0ef:	e9 6c ff ff ff       	jmp    c001d060 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d0f4:	53                   	push   ebx
c001d0f5:	31 db                	xor    ebx,ebx
c001d0f7:	68 00 01 00 00       	push   0x100
c001d0fc:	6a 00                	push   0x0
c001d0fe:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d102:	50                   	push   eax
c001d103:	e8 70 36 fe ff       	call   c0000778 <memset>
c001d108:	83 c4 0c             	add    esp,0xc
c001d10b:	68 00 01 00 00       	push   0x100
c001d110:	6a 00                	push   0x0
c001d112:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d119:	50                   	push   eax
c001d11a:	e8 59 36 fe ff       	call   c0000778 <memset>
c001d11f:	83 c4 10             	add    esp,0x10
c001d122:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d12a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d132:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d13a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d142:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d14a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d14e:	0f 86 30 01 00 00    	jbe    c001d284 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d154:	0f b7 f3             	movzx  esi,bx
c001d157:	6b f6 28             	imul   esi,esi,0x28
c001d15a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d15e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d161:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d165:	52                   	push   edx
c001d166:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d16a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d16e:	8b 06                	mov    eax,DWORD PTR [esi]
c001d170:	6b d2 28             	imul   edx,edx,0x28
c001d173:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d177:	31 d2                	xor    edx,edx
c001d179:	52                   	push   edx
c001d17a:	50                   	push   eax
c001d17b:	55                   	push   ebp
c001d17c:	e8 97 63 ff ff       	call   c0013518 <File::seek(unsigned long long)>
c001d181:	83 c4 0c             	add    esp,0xc
c001d184:	6a 20                	push   0x20
c001d186:	6a 00                	push   0x0
c001d188:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d18f:	51                   	push   ecx
c001d190:	e8 e3 35 fe ff       	call   c0000778 <memset>
c001d195:	59                   	pop    ecx
c001d196:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d199:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d19d:	52                   	push   edx
c001d19e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d1a5:	51                   	push   ecx
c001d1a6:	6a 00                	push   0x0
c001d1a8:	6a 1f                	push   0x1f
c001d1aa:	55                   	push   ebp
c001d1ab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d1ae:	83 c4 1c             	add    esp,0x1c
c001d1b1:	6a 09                	push   0x9
c001d1b3:	68 ec bf 02 c0       	push   0xc002bfec
c001d1b8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d1bf:	51                   	push   ecx
c001d1c0:	e8 7b 34 fe ff       	call   c0000640 <memcmp>
c001d1c5:	83 c4 10             	add    esp,0x10
c001d1c8:	85 c0                	test   eax,eax
c001d1ca:	75 21                	jne    c001d1ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d1cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1d4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d1d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1dc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1df:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d1e6:	89 d0                	mov    eax,edx
c001d1e8:	40                   	inc    eax
c001d1e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1ed:	50                   	push   eax
c001d1ee:	6a 09                	push   0x9
c001d1f0:	68 f6 bf 02 c0       	push   0xc002bff6
c001d1f5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1fc:	50                   	push   eax
c001d1fd:	e8 3e 34 fe ff       	call   c0000640 <memcmp>
c001d202:	83 c4 10             	add    esp,0x10
c001d205:	85 c0                	test   eax,eax
c001d207:	75 21                	jne    c001d22a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d209:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d20d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d211:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d215:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d219:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d21c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d223:	89 d0                	mov    eax,edx
c001d225:	40                   	inc    eax
c001d226:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d22a:	50                   	push   eax
c001d22b:	50                   	push   eax
c001d22c:	68 c2 bf 02 c0       	push   0xc002bfc2
c001d231:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d238:	50                   	push   eax
c001d239:	e8 82 36 fe ff       	call   c00008c0 <strcmp>
c001d23e:	83 c4 10             	add    esp,0x10
c001d241:	85 c0                	test   eax,eax
c001d243:	75 0f                	jne    c001d254 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d245:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d248:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d24c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d250:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d254:	50                   	push   eax
c001d255:	50                   	push   eax
c001d256:	68 ca bf 02 c0       	push   0xc002bfca
c001d25b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d262:	50                   	push   eax
c001d263:	e8 58 36 fe ff       	call   c00008c0 <strcmp>
c001d268:	83 c4 10             	add    esp,0x10
c001d26b:	85 c0                	test   eax,eax
c001d26d:	75 0f                	jne    c001d27e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d26f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d272:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d276:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d27a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d27e:	43                   	inc    ebx
c001d27f:	e9 c6 fe ff ff       	jmp    c001d14a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d284:	31 d2                	xor    edx,edx
c001d286:	50                   	push   eax
c001d287:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d28b:	52                   	push   edx
c001d28c:	50                   	push   eax
c001d28d:	55                   	push   ebp
c001d28e:	e8 85 62 ff ff       	call   c0013518 <File::seek(unsigned long long)>
c001d293:	58                   	pop    eax
c001d294:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d298:	e8 a6 25 ff ff       	call   c000f843 <malloc>
c001d29d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2a0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d2a4:	31 d2                	xor    edx,edx
c001d2a6:	58                   	pop    eax
c001d2a7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d2ab:	53                   	push   ebx
c001d2ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d2b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2b4:	52                   	push   edx
c001d2b5:	50                   	push   eax
c001d2b6:	55                   	push   ebp
c001d2b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2ba:	83 c4 14             	add    esp,0x14
c001d2bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2c1:	e8 7d 25 ff ff       	call   c000f843 <malloc>
c001d2c6:	31 d2                	xor    edx,edx
c001d2c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d2cc:	83 c4 0c             	add    esp,0xc
c001d2cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2d3:	52                   	push   edx
c001d2d4:	50                   	push   eax
c001d2d5:	55                   	push   ebp
c001d2d6:	e8 3d 62 ff ff       	call   c0013518 <File::seek(unsigned long long)>
c001d2db:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2de:	31 d2                	xor    edx,edx
c001d2e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d2e3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d2e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d2eb:	52                   	push   edx
c001d2ec:	50                   	push   eax
c001d2ed:	55                   	push   ebp
c001d2ee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2f1:	83 c4 20             	add    esp,0x20
c001d2f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d2fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d300:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d304:	0f 84 f1 02 00 00    	je     c001d5fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d30a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d311:	31 d2                	xor    edx,edx
c001d313:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d317:	c1 e8 03             	shr    eax,0x3
c001d31a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d31e:	51                   	push   ecx
c001d31f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d323:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d327:	52                   	push   edx
c001d328:	50                   	push   eax
c001d329:	55                   	push   ebp
c001d32a:	e8 e9 61 ff ff       	call   c0013518 <File::seek(unsigned long long)>
c001d32f:	5b                   	pop    ebx
c001d330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d334:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d33b:	e8 03 25 ff ff       	call   c000f843 <malloc>
c001d340:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d343:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d347:	31 d2                	xor    edx,edx
c001d349:	5e                   	pop    esi
c001d34a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d34e:	50                   	push   eax
c001d34f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d353:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d357:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d35e:	52                   	push   edx
c001d35f:	50                   	push   eax
c001d360:	55                   	push   ebp
c001d361:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d364:	83 c4 20             	add    esp,0x20
c001d367:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d36f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d373:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d377:	0f 8d 62 02 00 00    	jge    c001d5df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d37d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d381:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d385:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d38a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d38d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d391:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d395:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d399:	89 d8                	mov    eax,ebx
c001d39b:	c1 e8 08             	shr    eax,0x8
c001d39e:	89 c6                	mov    esi,eax
c001d3a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d3a4:	c1 e6 04             	shl    esi,0x4
c001d3a7:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d3ab:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d3ae:	85 d2                	test   edx,edx
c001d3b0:	0f 85 bf 00 00 00    	jne    c001d475 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3b6:	83 ec 0c             	sub    esp,0xc
c001d3b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3bd:	03 06                	add    eax,DWORD PTR [esi]
c001d3bf:	50                   	push   eax
c001d3c0:	e8 4b f8 ff ff       	call   c001cc10 <Thr::getAddressOfKernelSymbol(char const*)>
c001d3c5:	83 c4 10             	add    esp,0x10
c001d3c8:	89 c2                	mov    edx,eax
c001d3ca:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d3cf:	85 c0                	test   eax,eax
c001d3d1:	0f 85 9e 00 00 00    	jne    c001d475 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3d7:	83 ec 0c             	sub    esp,0xc
c001d3da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3de:	03 06                	add    eax,DWORD PTR [esi]
c001d3e0:	50                   	push   eax
c001d3e1:	e8 0f 11 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d3e6:	83 c4 10             	add    esp,0x10
c001d3e9:	89 c2                	mov    edx,eax
c001d3eb:	85 c0                	test   eax,eax
c001d3ed:	0f 85 82 00 00 00    	jne    c001d475 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3f3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d3f7:	50                   	push   eax
c001d3f8:	50                   	push   eax
c001d3f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3fd:	03 06                	add    eax,DWORD PTR [esi]
c001d3ff:	50                   	push   eax
c001d400:	68 00 c0 02 c0       	push   0xc002c000
c001d405:	e8 93 5a ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001d40a:	58                   	pop    eax
c001d40b:	5a                   	pop    edx
c001d40c:	68 1a c0 02 c0       	push   0xc002c01a
c001d411:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d418:	50                   	push   eax
c001d419:	e8 16 34 fe ff       	call   c0000834 <strcpy>
c001d41e:	59                   	pop    ecx
c001d41f:	58                   	pop    eax
c001d420:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d424:	03 06                	add    eax,DWORD PTR [esi]
c001d426:	50                   	push   eax
c001d427:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d42e:	50                   	push   eax
c001d42f:	e8 40 35 fe ff       	call   c0000974 <strcat>
c001d434:	58                   	pop    eax
c001d435:	5a                   	pop    edx
c001d436:	68 b0 c0 02 c0       	push   0xc002c0b0
c001d43b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d442:	50                   	push   eax
c001d443:	e8 2c 35 fe ff       	call   c0000974 <strcat>
c001d448:	83 c4 10             	add    esp,0x10
c001d44b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d450:	0f 84 43 01 00 00    	je     c001d599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d456:	83 ec 0c             	sub    esp,0xc
c001d459:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d460:	50                   	push   eax
c001d461:	e8 23 d1 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001d466:	83 c4 10             	add    esp,0x10
c001d469:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d46d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d471:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d475:	80 fb 01             	cmp    bl,0x1
c001d478:	75 7d                	jne    c001d4f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d47a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d481:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d485:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d489:	01 ce                	add    esi,ecx
c001d48b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d491:	0f 94 c0             	sete   al
c001d494:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d49a:	0f 94 c3             	sete   bl
c001d49d:	09 c3                	or     ebx,eax
c001d49f:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4a1:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d4a6:	74 36                	je     c001d4de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d4a8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d4ab:	84 db                	test   bl,bl
c001d4ad:	75 0a                	jne    c001d4b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d4af:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4b3:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d4b7:	76 37                	jbe    c001d4f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d4b9:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d4bd:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4c2:	0f 84 d1 00 00 00    	je     c001d599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4c8:	83 ec 0c             	sub    esp,0xc
c001d4cb:	68 31 c0 02 c0       	push   0xc002c031
c001d4d0:	e8 b4 d0 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001d4d5:	83 c4 10             	add    esp,0x10
c001d4d8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d4dc:	eb 12                	jmp    c001d4f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d4de:	01 c1                	add    ecx,eax
c001d4e0:	84 db                	test   bl,bl
c001d4e2:	75 0c                	jne    c001d4f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d4e4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4e8:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d4ec:	77 02                	ja     c001d4f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d4ee:	01 d1                	add    ecx,edx
c001d4f0:	89 0e                	mov    DWORD PTR [esi],ecx
c001d4f2:	e9 df 00 00 00       	jmp    c001d5d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d4f7:	80 fb 02             	cmp    bl,0x2
c001d4fa:	75 71                	jne    c001d56d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d4fc:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d503:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d507:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d50b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d511:	74 15                	je     c001d528 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d513:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d519:	74 0d                	je     c001d528 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d51b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d51f:	83 e8 04             	sub    eax,0x4
c001d522:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d526:	76 1f                	jbe    c001d547 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d528:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d52c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d531:	74 66                	je     c001d599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d533:	83 ec 0c             	sub    esp,0xc
c001d536:	68 4d c0 02 c0       	push   0xc002c04d
c001d53b:	e8 49 d0 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001d540:	83 c4 10             	add    esp,0x10
c001d543:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d547:	8b 06                	mov    eax,DWORD PTR [esi]
c001d549:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d54e:	74 13                	je     c001d563 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d550:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d554:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d55b:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d55f:	01 c8                	add    eax,ecx
c001d561:	eb 04                	jmp    c001d567 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d563:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d567:	01 c2                	add    edx,eax
c001d569:	89 16                	mov    DWORD PTR [esi],edx
c001d56b:	eb 69                	jmp    c001d5d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d56d:	0f b6 db             	movzx  ebx,bl
c001d570:	50                   	push   eax
c001d571:	50                   	push   eax
c001d572:	53                   	push   ebx
c001d573:	68 69 c0 02 c0       	push   0xc002c069
c001d578:	e8 20 59 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001d57d:	83 c4 10             	add    esp,0x10
c001d580:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d585:	74 12                	je     c001d599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d587:	83 ec 0c             	sub    esp,0xc
c001d58a:	68 74 c0 02 c0       	push   0xc002c074
c001d58f:	e8 f5 cf ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001d594:	83 c4 10             	add    esp,0x10
c001d597:	eb 3d                	jmp    c001d5d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d599:	83 ec 0c             	sub    esp,0xc
c001d59c:	55                   	push   ebp
c001d59d:	e8 16 5f ff ff       	call   c00134b8 <File::close()>
c001d5a2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5a5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d5a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d5ab:	59                   	pop    ecx
c001d5ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5b0:	e8 9e 22 ff ff       	call   c000f853 <free>
c001d5b5:	5b                   	pop    ebx
c001d5b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d5ba:	e8 94 22 ff ff       	call   c000f853 <free>
c001d5bf:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5c2:	e8 8c 22 ff ff       	call   c000f853 <free>
c001d5c7:	5e                   	pop    esi
c001d5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5cc:	e8 82 22 ff ff       	call   c000f853 <free>
c001d5d1:	83 c4 10             	add    esp,0x10
c001d5d4:	eb 21                	jmp    c001d5f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d5d6:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d5da:	e9 90 fd ff ff       	jmp    c001d36f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d5df:	83 ec 0c             	sub    esp,0xc
c001d5e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5e6:	e8 68 22 ff ff       	call   c000f853 <free>
c001d5eb:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d5ef:	83 c4 10             	add    esp,0x10
c001d5f2:	e9 05 fd ff ff       	jmp    c001d2fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d5f7:	31 c0                	xor    eax,eax
c001d5f9:	eb 33                	jmp    c001d62e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d5fb:	83 ec 0c             	sub    esp,0xc
c001d5fe:	55                   	push   ebp
c001d5ff:	e8 b4 5e ff ff       	call   c00134b8 <File::close()>
c001d604:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d607:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d60a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d60d:	58                   	pop    eax
c001d60e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d612:	e8 3c 22 ff ff       	call   c000f853 <free>
c001d617:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d61a:	e8 34 22 ff ff       	call   c000f853 <free>
c001d61f:	5a                   	pop    edx
c001d620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d624:	e8 2a 22 ff ff       	call   c000f853 <free>
c001d629:	83 c4 10             	add    esp,0x10
c001d62c:	b0 01                	mov    al,0x1
c001d62e:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d634:	5b                   	pop    ebx
c001d635:	5e                   	pop    esi
c001d636:	5f                   	pop    edi
c001d637:	5d                   	pop    ebp
c001d638:	c3                   	ret    

c001d639 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d639:	56                   	push   esi
c001d63a:	31 d2                	xor    edx,edx
c001d63c:	53                   	push   ebx
c001d63d:	8b 1d e0 10 03 c0    	mov    ebx,DWORD PTR ds:0xc00310e0
c001d643:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d647:	39 d3                	cmp    ebx,edx
c001d649:	7e 1b                	jle    c001d666 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d64b:	8b 04 95 00 13 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffced00]
c001d652:	39 c8                	cmp    eax,ecx
c001d654:	77 0d                	ja     c001d663 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d656:	8b 34 95 00 11 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcef00]
c001d65d:	01 c6                	add    esi,eax
c001d65f:	39 ce                	cmp    esi,ecx
c001d661:	77 05                	ja     c001d668 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d663:	42                   	inc    edx
c001d664:	eb e1                	jmp    c001d647 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d666:	31 c0                	xor    eax,eax
c001d668:	5b                   	pop    ebx
c001d669:	5e                   	pop    esi
c001d66a:	c3                   	ret    

c001d66b <Thr::getDriverNameFromAddress(unsigned long)>:
c001d66b:	53                   	push   ebx
c001d66c:	31 c0                	xor    eax,eax
c001d66e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d672:	8b 1d e0 10 03 c0    	mov    ebx,DWORD PTR ds:0xc00310e0
c001d678:	39 c3                	cmp    ebx,eax
c001d67a:	7e 22                	jle    c001d69e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d67c:	8b 14 85 00 13 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffced00]
c001d683:	39 ca                	cmp    edx,ecx
c001d685:	77 14                	ja     c001d69b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d687:	03 14 85 00 11 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcef00]
c001d68e:	39 ca                	cmp    edx,ecx
c001d690:	76 09                	jbe    c001d69b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d692:	8b 04 85 00 15 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceb00]
c001d699:	eb 05                	jmp    c001d6a0 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d69b:	40                   	inc    eax
c001d69c:	eb da                	jmp    c001d678 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d69e:	31 c0                	xor    eax,eax
c001d6a0:	5b                   	pop    ebx
c001d6a1:	c3                   	ret    

c001d6a2 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d6a2:	53                   	push   ebx
c001d6a3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d6a7:	53                   	push   ebx
c001d6a8:	e8 8c ff ff ff       	call   c001d639 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d6ad:	5a                   	pop    edx
c001d6ae:	31 d2                	xor    edx,edx
c001d6b0:	85 c0                	test   eax,eax
c001d6b2:	74 04                	je     c001d6b8 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d6b4:	89 da                	mov    edx,ebx
c001d6b6:	29 c2                	sub    edx,eax
c001d6b8:	89 d0                	mov    eax,edx
c001d6ba:	5b                   	pop    ebx
c001d6bb:	c3                   	ret    

c001d6bc <Thr::loadDLL(char const*, bool)>:
c001d6bc:	55                   	push   ebp
c001d6bd:	57                   	push   edi
c001d6be:	56                   	push   esi
c001d6bf:	53                   	push   ebx
c001d6c0:	81 ec 34 01 00 00    	sub    esp,0x134
c001d6c6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d6cd:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d6d4:	56                   	push   esi
c001d6d5:	68 8c c0 02 c0       	push   0xc002c08c
c001d6da:	e8 be 57 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001d6df:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d6e6:	e8 58 21 ff ff       	call   c000f843 <malloc>
c001d6eb:	83 c4 0c             	add    esp,0xc
c001d6ee:	89 c3                	mov    ebx,eax
c001d6f0:	ff 35 d4 18 03 c0    	push   DWORD PTR ds:0xc00318d4
c001d6f6:	56                   	push   esi
c001d6f7:	50                   	push   eax
c001d6f8:	e8 f9 5c ff ff       	call   c00133f6 <File::File(char const*, Process*)>
c001d6fd:	83 c4 10             	add    esp,0x10
c001d700:	85 db                	test   ebx,ebx
c001d702:	75 3c                	jne    c001d740 <Thr::loadDLL(char const*, bool)+0x84>
c001d704:	89 e8                	mov    eax,ebp
c001d706:	84 c0                	test   al,al
c001d708:	0f 84 d5 01 00 00    	je     c001d8e3 <Thr::loadDLL(char const*, bool)+0x227>
c001d70e:	57                   	push   edi
c001d70f:	57                   	push   edi
c001d710:	68 9d c0 02 c0       	push   0xc002c09d
c001d715:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d719:	57                   	push   edi
c001d71a:	e8 15 31 fe ff       	call   c0000834 <strcpy>
c001d71f:	58                   	pop    eax
c001d720:	5a                   	pop    edx
c001d721:	56                   	push   esi
c001d722:	57                   	push   edi
c001d723:	e8 4c 32 fe ff       	call   c0000974 <strcat>
c001d728:	59                   	pop    ecx
c001d729:	58                   	pop    eax
c001d72a:	68 b0 c0 02 c0       	push   0xc002c0b0
c001d72f:	57                   	push   edi
c001d730:	e8 3f 32 fe ff       	call   c0000974 <strcat>
c001d735:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d738:	e8 4c ce ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001d73d:	83 c4 10             	add    esp,0x10
c001d740:	51                   	push   ecx
c001d741:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d745:	50                   	push   eax
c001d746:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d74a:	50                   	push   eax
c001d74b:	53                   	push   ebx
c001d74c:	e8 b5 5f ff ff       	call   c0013706 <File::stat(unsigned long long*, bool*)>
c001d751:	83 c4 10             	add    esp,0x10
c001d754:	85 db                	test   ebx,ebx
c001d756:	74 0c                	je     c001d764 <Thr::loadDLL(char const*, bool)+0xa8>
c001d758:	83 ec 0c             	sub    esp,0xc
c001d75b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d75d:	53                   	push   ebx
c001d75e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d761:	83 c4 10             	add    esp,0x10
c001d764:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d769:	75 0a                	jne    c001d775 <Thr::loadDLL(char const*, bool)+0xb9>
c001d76b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d76f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d773:	75 3c                	jne    c001d7b1 <Thr::loadDLL(char const*, bool)+0xf5>
c001d775:	89 e8                	mov    eax,ebp
c001d777:	84 c0                	test   al,al
c001d779:	0f 84 4c 01 00 00    	je     c001d8cb <Thr::loadDLL(char const*, bool)+0x20f>
c001d77f:	51                   	push   ecx
c001d780:	51                   	push   ecx
c001d781:	68 9d c0 02 c0       	push   0xc002c09d
c001d786:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d78a:	53                   	push   ebx
c001d78b:	e8 a4 30 fe ff       	call   c0000834 <strcpy>
c001d790:	5f                   	pop    edi
c001d791:	58                   	pop    eax
c001d792:	56                   	push   esi
c001d793:	53                   	push   ebx
c001d794:	e8 db 31 fe ff       	call   c0000974 <strcat>
c001d799:	58                   	pop    eax
c001d79a:	5a                   	pop    edx
c001d79b:	68 b0 c0 02 c0       	push   0xc002c0b0
c001d7a0:	53                   	push   ebx
c001d7a1:	e8 ce 31 fe ff       	call   c0000974 <strcat>
c001d7a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7a9:	e8 db cd ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001d7ae:	83 c4 10             	add    esp,0x10
c001d7b1:	e8 28 46 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c001d7b6:	51                   	push   ecx
c001d7b7:	6a 03                	push   0x3
c001d7b9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d7bd:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d7c1:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d7c7:	83 d3 00             	adc    ebx,0x0
c001d7ca:	89 ca                	mov    edx,ecx
c001d7cc:	89 d1                	mov    ecx,edx
c001d7ce:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d7d2:	51                   	push   ecx
c001d7d3:	50                   	push   eax
c001d7d4:	e8 57 4c ff ff       	call   c0012430 <VAS::allocatePages(int, int)>
c001d7d9:	5f                   	pop    edi
c001d7da:	89 c3                	mov    ebx,eax
c001d7dc:	58                   	pop    eax
c001d7dd:	53                   	push   ebx
c001d7de:	68 b2 c0 02 c0       	push   0xc002c0b2
c001d7e3:	e8 b5 56 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001d7e8:	89 34 24             	mov    DWORD PTR [esp],esi
c001d7eb:	e8 a4 2f fe ff       	call   c0000794 <strlen>
c001d7f0:	8b 3d e0 10 03 c0    	mov    edi,DWORD PTR ds:0xc00310e0
c001d7f6:	40                   	inc    eax
c001d7f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d7fa:	e8 44 20 ff ff       	call   c000f843 <malloc>
c001d7ff:	89 04 bd 00 15 03 c0 	mov    DWORD PTR [edi*4-0x3ffceb00],eax
c001d806:	58                   	pop    eax
c001d807:	a1 e0 10 03 c0       	mov    eax,ds:0xc00310e0
c001d80c:	5a                   	pop    edx
c001d80d:	56                   	push   esi
c001d80e:	ff 34 85 00 15 03 c0 	push   DWORD PTR [eax*4-0x3ffceb00]
c001d815:	e8 1a 30 fe ff       	call   c0000834 <strcpy>
c001d81a:	a1 e0 10 03 c0       	mov    eax,ds:0xc00310e0
c001d81f:	8d 50 01             	lea    edx,[eax+0x1]
c001d822:	89 1c 85 00 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffced00],ebx
c001d829:	89 15 e0 10 03 c0    	mov    DWORD PTR ds:0xc00310e0,edx
c001d82f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d833:	83 c4 0c             	add    esp,0xc
c001d836:	89 14 85 00 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef00],edx
c001d83d:	6a 01                	push   0x1
c001d83f:	53                   	push   ebx
c001d840:	56                   	push   esi
c001d841:	e8 d7 f6 ff ff       	call   c001cf1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d846:	83 c4 10             	add    esp,0x10
c001d849:	89 c7                	mov    edi,eax
c001d84b:	84 c0                	test   al,al
c001d84d:	0f 85 8c 00 00 00    	jne    c001d8df <Thr::loadDLL(char const*, bool)+0x223>
c001d853:	89 e8                	mov    eax,ebp
c001d855:	84 c0                	test   al,al
c001d857:	74 76                	je     c001d8cf <Thr::loadDLL(char const*, bool)+0x213>
c001d859:	83 ec 0c             	sub    esp,0xc
c001d85c:	68 bf c0 02 c0       	push   0xc002c0bf
c001d861:	e8 23 cd ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001d866:	83 c4 10             	add    esp,0x10
c001d869:	eb 64                	jmp    c001d8cf <Thr::loadDLL(char const*, bool)+0x213>
c001d86b:	e8 6e 45 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c001d870:	89 f5                	mov    ebp,esi
c001d872:	c1 e5 0c             	shl    ebp,0xc
c001d875:	52                   	push   edx
c001d876:	01 dd                	add    ebp,ebx
c001d878:	52                   	push   edx
c001d879:	55                   	push   ebp
c001d87a:	50                   	push   eax
c001d87b:	e8 2a 47 ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c001d880:	83 c4 10             	add    esp,0x10
c001d883:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d886:	75 0c                	jne    c001d894 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d888:	83 ec 0c             	sub    esp,0xc
c001d88b:	55                   	push   ebp
c001d88c:	e8 ca 25 ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c001d891:	83 c4 10             	add    esp,0x10
c001d894:	46                   	inc    esi
c001d895:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d899:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d89d:	05 ff 0f 00 00       	add    eax,0xfff
c001d8a2:	83 d2 00             	adc    edx,0x0
c001d8a5:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d8a9:	c1 ea 0c             	shr    edx,0xc
c001d8ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d8b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d8b4:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d8b8:	ba 00 00 00 00       	mov    edx,0x0
c001d8bd:	89 d0                	mov    eax,edx
c001d8bf:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d8c3:	72 a6                	jb     c001d86b <Thr::loadDLL(char const*, bool)+0x1af>
c001d8c5:	89 f8                	mov    eax,edi
c001d8c7:	84 c0                	test   al,al
c001d8c9:	75 18                	jne    c001d8e3 <Thr::loadDLL(char const*, bool)+0x227>
c001d8cb:	31 db                	xor    ebx,ebx
c001d8cd:	eb 14                	jmp    c001d8e3 <Thr::loadDLL(char const*, bool)+0x227>
c001d8cf:	83 ec 0c             	sub    esp,0xc
c001d8d2:	68 de c0 02 c0       	push   0xc002c0de
c001d8d7:	e8 ad cc ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001d8dc:	83 c4 10             	add    esp,0x10
c001d8df:	31 f6                	xor    esi,esi
c001d8e1:	eb b2                	jmp    c001d895 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d8e3:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d8e9:	89 d8                	mov    eax,ebx
c001d8eb:	5b                   	pop    ebx
c001d8ec:	5e                   	pop    esi
c001d8ed:	5f                   	pop    edi
c001d8ee:	5d                   	pop    ebp
c001d8ef:	c3                   	ret    

c001d8f0 <Thr::executeDLL(unsigned long, void*)>:
c001d8f0:	56                   	push   esi
c001d8f1:	53                   	push   ebx
c001d8f2:	52                   	push   edx
c001d8f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d8f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d8fb:	85 db                	test   ebx,ebx
c001d8fd:	75 10                	jne    c001d90f <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d8ff:	83 ec 0c             	sub    esp,0xc
c001d902:	68 fa c0 02 c0       	push   0xc002c0fa
c001d907:	e8 7d cc ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001d90c:	83 c4 10             	add    esp,0x10
c001d90f:	50                   	push   eax
c001d910:	50                   	push   eax
c001d911:	53                   	push   ebx
c001d912:	68 24 c1 02 c0       	push   0xc002c124
c001d917:	e8 81 55 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001d91c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d920:	89 d8                	mov    eax,ebx
c001d922:	83 c4 14             	add    esp,0x14
c001d925:	5b                   	pop    ebx
c001d926:	5e                   	pop    esi
c001d927:	ff e0                	jmp    eax
c001d929:	90                   	nop

c001d92a <changeTSS>:
c001d92a:	83 ec 14             	sub    esp,0x14
c001d92d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d932:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d935:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d93a:	c1 e2 15             	shl    edx,0x15
c001d93d:	29 d0                	sub    eax,edx
c001d93f:	50                   	push   eax
c001d940:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c001d945:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d94b:	05 7c 11 00 00       	add    eax,0x117c
c001d950:	50                   	push   eax
c001d951:	e8 2c 3b ff ff       	call   c0011482 <TSS::setESP(unsigned long)>
c001d956:	83 c4 1c             	add    esp,0x1c
c001d959:	c3                   	ret    

c001d95a <Process::addArgs(char**)>:
c001d95a:	57                   	push   edi
c001d95b:	56                   	push   esi
c001d95c:	53                   	push   ebx
c001d95d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d961:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d965:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d96f:	85 ff                	test   edi,edi
c001d971:	74 3d                	je     c001d9b0 <Process::addArgs(char**)+0x56>
c001d973:	8b 07                	mov    eax,DWORD PTR [edi]
c001d975:	85 c0                	test   eax,eax
c001d977:	74 37                	je     c001d9b0 <Process::addArgs(char**)+0x56>
c001d979:	31 db                	xor    ebx,ebx
c001d97b:	83 ec 0c             	sub    esp,0xc
c001d97e:	50                   	push   eax
c001d97f:	e8 10 2e fe ff       	call   c0000794 <strlen>
c001d984:	40                   	inc    eax
c001d985:	89 04 24             	mov    DWORD PTR [esp],eax
c001d988:	e8 b6 1e ff ff       	call   c000f843 <malloc>
c001d98d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d994:	5a                   	pop    edx
c001d995:	59                   	pop    ecx
c001d996:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d999:	43                   	inc    ebx
c001d99a:	50                   	push   eax
c001d99b:	e8 94 2e fe ff       	call   c0000834 <strcpy>
c001d9a0:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d9a6:	83 c4 10             	add    esp,0x10
c001d9a9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d9ac:	85 c0                	test   eax,eax
c001d9ae:	75 cb                	jne    c001d97b <Process::addArgs(char**)+0x21>
c001d9b0:	5b                   	pop    ebx
c001d9b1:	5e                   	pop    esi
c001d9b2:	5f                   	pop    edi
c001d9b3:	c3                   	ret    

c001d9b4 <Process::Process(char const*, Process*, char**)>:
c001d9b4:	56                   	push   esi
c001d9b5:	53                   	push   ebx
c001d9b6:	83 ec 14             	sub    esp,0x14
c001d9b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9bd:	05 0c 02 00 00       	add    eax,0x20c
c001d9c2:	bb 07 00 00 00       	mov    ebx,0x7
c001d9c7:	89 c6                	mov    esi,eax
c001d9c9:	85 db                	test   ebx,ebx
c001d9cb:	78 12                	js     c001d9df <Process::Process(char const*, Process*, char**)+0x2b>
c001d9cd:	83 ec 0c             	sub    esp,0xc
c001d9d0:	56                   	push   esi
c001d9d1:	e8 1c b2 00 00       	call   c0028bf2 <ThreadControlBlock::ThreadControlBlock()>
c001d9d6:	83 c4 10             	add    esp,0x10
c001d9d9:	83 c6 63             	add    esi,0x63
c001d9dc:	4b                   	dec    ebx
c001d9dd:	eb ea                	jmp    c001d9c9 <Process::Process(char const*, Process*, char**)+0x15>
c001d9df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9e3:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d9ea:	83 ec 0c             	sub    esp,0xc
c001d9ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d9f1:	e8 e4 c9 ff ff       	call   c001a3da <Krnl::newProcessEnv(Process*)>
c001d9f6:	83 c4 10             	add    esp,0x10
c001d9f9:	89 c2                	mov    edx,eax
c001d9fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9ff:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001da05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da09:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001da12:	a1 f0 d8 02 c0       	mov    eax,ds:0xc002d8f0
c001da17:	8d 50 01             	lea    edx,[eax+0x1]
c001da1a:	89 15 f0 d8 02 c0    	mov    DWORD PTR ds:0xc002d8f0,edx
c001da20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001da24:	89 02                	mov    DWORD PTR [edx],eax
c001da26:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001da2e:	83 ec 0c             	sub    esp,0xc
c001da31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001da35:	e8 09 1e ff ff       	call   c000f843 <malloc>
c001da3a:	83 c4 10             	add    esp,0x10
c001da3d:	89 c3                	mov    ebx,eax
c001da3f:	83 ec 08             	sub    esp,0x8
c001da42:	6a 00                	push   0x0
c001da44:	53                   	push   ebx
c001da45:	e8 8e 4d ff ff       	call   c00127d8 <VAS::VAS(bool)>
c001da4a:	83 c4 10             	add    esp,0x10
c001da4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da51:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001da57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da5b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001da65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da69:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001da6d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001da73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da77:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da7d:	85 c0                	test   eax,eax
c001da7f:	74 42                	je     c001dac3 <Process::Process(char const*, Process*, char**)+0x10f>
c001da81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da85:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da8b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001da91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da95:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001da9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da9f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001daa5:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001daab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daaf:	05 0c 01 00 00       	add    eax,0x10c
c001dab4:	83 ec 08             	sub    esp,0x8
c001dab7:	52                   	push   edx
c001dab8:	50                   	push   eax
c001dab9:	e8 76 2d fe ff       	call   c0000834 <strcpy>
c001dabe:	83 c4 10             	add    esp,0x10
c001dac1:	eb 63                	jmp    c001db26 <Process::Process(char const*, Process*, char**)+0x172>
c001dac3:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001dacb:	83 ec 0c             	sub    esp,0xc
c001dace:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dad2:	e8 6c 1d ff ff       	call   c000f843 <malloc>
c001dad7:	83 c4 10             	add    esp,0x10
c001dada:	89 c3                	mov    ebx,eax
c001dadc:	83 ec 08             	sub    esp,0x8
c001dadf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dae3:	53                   	push   ebx
c001dae4:	e8 97 36 ff ff       	call   c0011180 <VgaText::VgaText(char const*)>
c001dae9:	83 c4 10             	add    esp,0x10
c001daec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001daf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dafa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db00:	83 ec 0c             	sub    esp,0xc
c001db03:	50                   	push   eax
c001db04:	e8 6a 2a ff ff       	call   c0010573 <addToTerminalCycle(VgaText*)>
c001db09:	83 c4 10             	add    esp,0x10
c001db0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db10:	05 0c 01 00 00       	add    eax,0x10c
c001db15:	83 ec 08             	sub    esp,0x8
c001db18:	68 43 c1 02 c0       	push   0xc002c143
c001db1d:	50                   	push   eax
c001db1e:	e8 11 2d fe ff       	call   c0000834 <strcpy>
c001db23:	83 c4 10             	add    esp,0x10
c001db26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db2a:	83 c0 0c             	add    eax,0xc
c001db2d:	83 ec 08             	sub    esp,0x8
c001db30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db34:	50                   	push   eax
c001db35:	e8 fa 2c fe ff       	call   c0000834 <strcpy>
c001db3a:	83 c4 10             	add    esp,0x10
c001db3d:	83 ec 08             	sub    esp,0x8
c001db40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001db44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db48:	e8 0d fe ff ff       	call   c001d95a <Process::addArgs(char**)>
c001db4d:	83 c4 10             	add    esp,0x10
c001db50:	83 ec 08             	sub    esp,0x8
c001db53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db5b:	e8 87 ee ff ff       	call   c001c9e7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001db60:	83 c4 10             	add    esp,0x10
c001db63:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001db67:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001db6b:	83 f0 01             	xor    eax,0x1
c001db6e:	88 c2                	mov    dl,al
c001db70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db74:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001db7a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001db7f:	83 ec 08             	sub    esp,0x8
c001db82:	50                   	push   eax
c001db83:	68 40 c2 02 c0       	push   0xc002c240
c001db88:	e8 10 53 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001db8d:	83 c4 10             	add    esp,0x10
c001db90:	90                   	nop
c001db91:	83 c4 14             	add    esp,0x14
c001db94:	5b                   	pop    ebx
c001db95:	5e                   	pop    esi
c001db96:	c3                   	ret    
c001db97:	90                   	nop

c001db98 <Process::Process(bool, char const*, Process*, char**)>:
c001db98:	56                   	push   esi
c001db99:	53                   	push   ebx
c001db9a:	83 ec 24             	sub    esp,0x24
c001db9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dba1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dba5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dba9:	05 0c 02 00 00       	add    eax,0x20c
c001dbae:	bb 07 00 00 00       	mov    ebx,0x7
c001dbb3:	89 c6                	mov    esi,eax
c001dbb5:	85 db                	test   ebx,ebx
c001dbb7:	78 12                	js     c001dbcb <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dbb9:	83 ec 0c             	sub    esp,0xc
c001dbbc:	56                   	push   esi
c001dbbd:	e8 30 b0 00 00       	call   c0028bf2 <ThreadControlBlock::ThreadControlBlock()>
c001dbc2:	83 c4 10             	add    esp,0x10
c001dbc5:	83 c6 63             	add    esi,0x63
c001dbc8:	4b                   	dec    ebx
c001dbc9:	eb ea                	jmp    c001dbb5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dbcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbcf:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dbd6:	83 ec 0c             	sub    esp,0xc
c001dbd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dbdd:	e8 f8 c7 ff ff       	call   c001a3da <Krnl::newProcessEnv(Process*)>
c001dbe2:	83 c4 10             	add    esp,0x10
c001dbe5:	89 c2                	mov    edx,eax
c001dbe7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbeb:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dbf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbf5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dbfe:	a1 f0 d8 02 c0       	mov    eax,ds:0xc002d8f0
c001dc03:	8d 50 01             	lea    edx,[eax+0x1]
c001dc06:	89 15 f0 d8 02 c0    	mov    DWORD PTR ds:0xc002d8f0,edx
c001dc0c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc10:	89 02                	mov    DWORD PTR [edx],eax
c001dc12:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dc1a:	83 ec 0c             	sub    esp,0xc
c001dc1d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dc21:	e8 1d 1c ff ff       	call   c000f843 <malloc>
c001dc26:	83 c4 10             	add    esp,0x10
c001dc29:	89 c3                	mov    ebx,eax
c001dc2b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dc30:	83 ec 08             	sub    esp,0x8
c001dc33:	50                   	push   eax
c001dc34:	53                   	push   ebx
c001dc35:	e8 9e 4b ff ff       	call   c00127d8 <VAS::VAS(bool)>
c001dc3a:	83 c4 10             	add    esp,0x10
c001dc3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc41:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dc47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc4b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dc55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc59:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dc5d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dc63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc67:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc6d:	85 c0                	test   eax,eax
c001dc6f:	74 42                	je     c001dcb3 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dc71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc75:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc7b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dc81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc85:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dc8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc8f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc95:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dc9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc9f:	05 0c 01 00 00       	add    eax,0x10c
c001dca4:	83 ec 08             	sub    esp,0x8
c001dca7:	52                   	push   edx
c001dca8:	50                   	push   eax
c001dca9:	e8 86 2b fe ff       	call   c0000834 <strcpy>
c001dcae:	83 c4 10             	add    esp,0x10
c001dcb1:	eb 63                	jmp    c001dd16 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dcb3:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dcbb:	83 ec 0c             	sub    esp,0xc
c001dcbe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dcc2:	e8 7c 1b ff ff       	call   c000f843 <malloc>
c001dcc7:	83 c4 10             	add    esp,0x10
c001dcca:	89 c3                	mov    ebx,eax
c001dccc:	83 ec 08             	sub    esp,0x8
c001dccf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dcd3:	53                   	push   ebx
c001dcd4:	e8 a7 34 ff ff       	call   c0011180 <VgaText::VgaText(char const*)>
c001dcd9:	83 c4 10             	add    esp,0x10
c001dcdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dce6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcea:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dcf0:	83 ec 0c             	sub    esp,0xc
c001dcf3:	50                   	push   eax
c001dcf4:	e8 7a 28 ff ff       	call   c0010573 <addToTerminalCycle(VgaText*)>
c001dcf9:	83 c4 10             	add    esp,0x10
c001dcfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd00:	05 0c 01 00 00       	add    eax,0x10c
c001dd05:	83 ec 08             	sub    esp,0x8
c001dd08:	68 43 c1 02 c0       	push   0xc002c143
c001dd0d:	50                   	push   eax
c001dd0e:	e8 21 2b fe ff       	call   c0000834 <strcpy>
c001dd13:	83 c4 10             	add    esp,0x10
c001dd16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd1a:	83 c0 0c             	add    eax,0xc
c001dd1d:	83 ec 08             	sub    esp,0x8
c001dd20:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd24:	50                   	push   eax
c001dd25:	e8 0a 2b fe ff       	call   c0000834 <strcpy>
c001dd2a:	83 c4 10             	add    esp,0x10
c001dd2d:	83 ec 08             	sub    esp,0x8
c001dd30:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dd34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd38:	e8 1d fc ff ff       	call   c001d95a <Process::addArgs(char**)>
c001dd3d:	83 c4 10             	add    esp,0x10
c001dd40:	90                   	nop
c001dd41:	83 c4 24             	add    esp,0x24
c001dd44:	5b                   	pop    ebx
c001dd45:	5e                   	pop    esi
c001dd46:	c3                   	ret    

c001dd47 <disableIRQs()>:
c001dd47:	fa                   	cli    
c001dd48:	ff 05 ac 18 03 c0    	inc    DWORD PTR ds:0xc00318ac
c001dd4e:	c3                   	ret    

c001dd4f <getIRQNestingLevel()>:
c001dd4f:	a1 ac 18 03 c0       	mov    eax,ds:0xc00318ac
c001dd54:	c3                   	ret    

c001dd55 <enableIRQs()>:
c001dd55:	a1 ac 18 03 c0       	mov    eax,ds:0xc00318ac
c001dd5a:	48                   	dec    eax
c001dd5b:	a3 ac 18 03 c0       	mov    ds:0xc00318ac,eax
c001dd60:	75 01                	jne    c001dd63 <enableIRQs()+0xe>
c001dd62:	fb                   	sti    
c001dd63:	c3                   	ret    

c001dd64 <lockScheduler()>:
c001dd64:	eb e1                	jmp    c001dd47 <disableIRQs()>

c001dd66 <unlockScheduler()>:
c001dd66:	eb ed                	jmp    c001dd55 <enableIRQs()>

c001dd68 <userModeEntryPoint(void*)>:
c001dd68:	83 ec 0c             	sub    esp,0xc
c001dd6b:	e8 f6 ff ff ff       	call   c001dd66 <unlockScheduler()>
c001dd70:	fb                   	sti    
c001dd71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd76:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dd79:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dd7f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dd83:	83 c4 0c             	add    esp,0xc
c001dd86:	e9 9f 25 fe ff       	jmp    c000032a <goToUsermode>

c001dd8b <lockStuff()>:
c001dd8b:	e8 b7 ff ff ff       	call   c001dd47 <disableIRQs()>
c001dd90:	ff 05 a8 18 03 c0    	inc    DWORD PTR ds:0xc00318a8
c001dd96:	c3                   	ret    

c001dd97 <taskStartupFunction>:
c001dd97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd9c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dd9f:	c3                   	ret    

c001dda0 <updateTimeUsed()>:
c001dda0:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c001dda5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddab:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001ddb2:	74 50                	je     c001de04 <updateTimeUsed()+0x64>
c001ddb4:	57                   	push   edi
c001ddb5:	56                   	push   esi
c001ddb6:	53                   	push   ebx
c001ddb7:	0f 31                	rdtsc  
c001ddb9:	89 c1                	mov    ecx,eax
c001ddbb:	a3 e8 18 03 c0       	mov    ds:0xc00318e8,eax
c001ddc0:	2b 0d d8 18 03 c0    	sub    ecx,DWORD PTR ds:0xc00318d8
c001ddc6:	89 d3                	mov    ebx,edx
c001ddc8:	89 0d e0 18 03 c0    	mov    DWORD PTR ds:0xc00318e0,ecx
c001ddce:	1b 1d dc 18 03 c0    	sbb    ebx,DWORD PTR ds:0xc00318dc
c001ddd4:	a3 d8 18 03 c0       	mov    ds:0xc00318d8,eax
c001ddd9:	89 1d e4 18 03 c0    	mov    DWORD PTR ds:0xc00318e4,ebx
c001dddf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dde4:	89 15 ec 18 03 c0    	mov    DWORD PTR ds:0xc00318ec,edx
c001ddea:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dded:	89 15 dc 18 03 c0    	mov    DWORD PTR ds:0xc00318dc,edx
c001ddf3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001ddf6:	01 f1                	add    ecx,esi
c001ddf8:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001ddfb:	11 fb                	adc    ebx,edi
c001ddfd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001de00:	5b                   	pop    ebx
c001de01:	5e                   	pop    esi
c001de02:	5f                   	pop    edi
c001de03:	c3                   	ret    
c001de04:	c3                   	ret    

c001de05 <switchToThread(ThreadControlBlock*)>:
c001de05:	53                   	push   ebx
c001de06:	83 ec 08             	sub    esp,0x8
c001de09:	a1 a8 18 03 c0       	mov    eax,ds:0xc00318a8
c001de0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de12:	85 c0                	test   eax,eax
c001de14:	75 30                	jne    c001de46 <switchToThread(ThreadControlBlock*)+0x41>
c001de16:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001de19:	3c ff                	cmp    al,0xff
c001de1b:	74 25                	je     c001de42 <switchToThread(ThreadControlBlock*)+0x3d>
c001de1d:	0f b6 d0             	movzx  edx,al
c001de20:	b8 84 03 00 00       	mov    eax,0x384
c001de25:	29 d0                	sub    eax,edx
c001de27:	c1 e0 10             	shl    eax,0x10
c001de2a:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001de2d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001de30:	e8 6b ff ff ff       	call   c001dda0 <updateTimeUsed()>
c001de35:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001de39:	83 c4 08             	add    esp,0x8
c001de3c:	5b                   	pop    ebx
c001de3d:	e9 20 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001de42:	31 c0                	xor    eax,eax
c001de44:	eb e7                	jmp    c001de2d <switchToThread(ThreadControlBlock*)+0x28>
c001de46:	c7 05 a4 18 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00318a4,0x1
c001de50:	83 c4 08             	add    esp,0x8
c001de53:	5b                   	pop    ebx
c001de54:	c3                   	ret    
c001de55:	90                   	nop

c001de56 <Semaphore::Semaphore(int)>:
c001de56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de5e:	89 10                	mov    DWORD PTR [eax],edx
c001de60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de64:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001de6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de6f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001de76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de7a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001de81:	90                   	nop
c001de82:	c3                   	ret    
c001de83:	90                   	nop

c001de84 <Mutex::Mutex()>:
c001de84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de88:	6a 01                	push   0x1
c001de8a:	50                   	push   eax
c001de8b:	e8 c6 ff ff ff       	call   c001de56 <Semaphore::Semaphore(int)>
c001de90:	83 c4 08             	add    esp,0x8
c001de93:	90                   	nop
c001de94:	c3                   	ret    
c001de95:	90                   	nop

c001de96 <Process::createThread(void (*)(void*), void*, int)>:
c001de96:	55                   	push   ebp
c001de97:	31 c9                	xor    ecx,ecx
c001de99:	57                   	push   edi
c001de9a:	56                   	push   esi
c001de9b:	53                   	push   ebx
c001de9c:	83 ec 1c             	sub    esp,0x1c
c001de9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dea3:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001deaa:	89 f2                	mov    edx,esi
c001deac:	0f b7 c2             	movzx  eax,dx
c001deaf:	83 e2 01             	and    edx,0x1
c001deb2:	74 14                	je     c001dec8 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001deb4:	d1 f8                	sar    eax,1
c001deb6:	41                   	inc    ecx
c001deb7:	89 c2                	mov    edx,eax
c001deb9:	83 f9 10             	cmp    ecx,0x10
c001debc:	75 ee                	jne    c001deac <Process::createThread(void (*)(void*), void*, int)+0x16>
c001debe:	83 c4 1c             	add    esp,0x1c
c001dec1:	31 c0                	xor    eax,eax
c001dec3:	5b                   	pop    ebx
c001dec4:	5e                   	pop    esi
c001dec5:	5f                   	pop    edi
c001dec6:	5d                   	pop    ebp
c001dec7:	c3                   	ret    
c001dec8:	83 ec 08             	sub    esp,0x8
c001decb:	b8 01 00 00 00       	mov    eax,0x1
c001ded0:	d3 e0                	shl    eax,cl
c001ded2:	09 c6                	or     esi,eax
c001ded4:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001deda:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dee1:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001dee4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001dee7:	01 ce                	add    esi,ecx
c001dee9:	89 f0                	mov    eax,esi
c001deeb:	c1 e0 05             	shl    eax,0x5
c001deee:	01 c6                	add    esi,eax
c001def0:	8d 04 33             	lea    eax,[ebx+esi*1]
c001def3:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001def9:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001deff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df03:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df09:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001df0f:	89 ca                	mov    edx,ecx
c001df11:	f7 da                	neg    edx
c001df13:	c1 e2 15             	shl    edx,0x15
c001df16:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001df1c:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001df22:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001df26:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001df30:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001df36:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001df3a:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001df40:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001df4a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001df54:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001df5b:	50                   	push   eax
c001df5c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001df60:	68 c8 18 03 c0       	push   0xc00318c8
c001df65:	e8 16 ab 00 00       	call   c0028a80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df6a:	83 c4 10             	add    esp,0x10
c001df6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df71:	83 c4 1c             	add    esp,0x1c
c001df74:	5b                   	pop    ebx
c001df75:	5e                   	pop    esi
c001df76:	5f                   	pop    edi
c001df77:	5d                   	pop    ebp
c001df78:	c3                   	ret    
c001df79:	90                   	nop

c001df7a <Process::createUserThread()>:
c001df7a:	83 ec 0c             	sub    esp,0xc
c001df7d:	68 80 00 00 00       	push   0x80
c001df82:	6a 00                	push   0x0
c001df84:	68 68 dd 01 c0       	push   0xc001dd68
c001df89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df8d:	e8 04 ff ff ff       	call   c001de96 <Process::createThread(void (*)(void*), void*, int)>
c001df92:	83 c4 1c             	add    esp,0x1c
c001df95:	c3                   	ret    

c001df96 <setupMultitasking(void (*)())>:
c001df96:	56                   	push   esi
c001df97:	53                   	push   ebx
c001df98:	53                   	push   ebx
c001df99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df9d:	eb 10                	jmp    c001dfaf <setupMultitasking(void (*)())+0x19>
c001df9f:	83 ec 0c             	sub    esp,0xc
c001dfa2:	68 c8 18 03 c0       	push   0xc00318c8
c001dfa7:	e8 26 aa 00 00       	call   c00289d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dfac:	83 c4 10             	add    esp,0x10
c001dfaf:	83 ec 0c             	sub    esp,0xc
c001dfb2:	68 c8 18 03 c0       	push   0xc00318c8
c001dfb7:	e8 fa a9 00 00       	call   c00289b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dfbc:	83 c4 10             	add    esp,0x10
c001dfbf:	84 c0                	test   al,al
c001dfc1:	74 dc                	je     c001df9f <setupMultitasking(void (*)())+0x9>
c001dfc3:	83 ec 0c             	sub    esp,0xc
c001dfc6:	68 3f 07 00 00       	push   0x73f
c001dfcb:	e8 73 18 ff ff       	call   c000f843 <malloc>
c001dfd0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dfd7:	89 c3                	mov    ebx,eax
c001dfd9:	6a 00                	push   0x0
c001dfdb:	68 47 c1 02 c0       	push   0xc002c147
c001dfe0:	6a 01                	push   0x1
c001dfe2:	50                   	push   eax
c001dfe3:	e8 b0 fb ff ff       	call   c001db98 <Process::Process(bool, char const*, Process*, char**)>
c001dfe8:	83 c4 18             	add    esp,0x18
c001dfeb:	89 1d d4 18 03 c0    	mov    DWORD PTR ds:0xc00318d4,ebx
c001dff1:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dff7:	68 68 c2 02 c0       	push   0xc002c268
c001dffc:	e8 9c 4e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e001:	58                   	pop    eax
c001e002:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e008:	e8 e8 2c ff ff       	call   c0010cf5 <setActiveTerminal(VgaText*)>
c001e00d:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e015:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e01b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e01e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e028:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e02e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e034:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e03e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e048:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e052:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e058:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e05e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e068:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e06e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e078:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e07e:	5a                   	pop    edx
c001e07f:	59                   	pop    ecx
c001e080:	68 43 c1 02 c0       	push   0xc002c143
c001e085:	50                   	push   eax
c001e086:	e8 a9 27 fe ff       	call   c0000834 <strcpy>
c001e08b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e092:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e096:	83 c4 14             	add    esp,0x14
c001e099:	5b                   	pop    ebx
c001e09a:	5e                   	pop    esi
c001e09b:	e9 b4 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e0a0 <schedule()>:
c001e0a0:	a1 a8 18 03 c0       	mov    eax,ds:0xc00318a8
c001e0a5:	85 c0                	test   eax,eax
c001e0a7:	74 0b                	je     c001e0b4 <schedule()+0x14>
c001e0a9:	c7 05 a4 18 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00318a4,0x1
c001e0b3:	c3                   	ret    
c001e0b4:	53                   	push   ebx
c001e0b5:	83 ec 14             	sub    esp,0x14
c001e0b8:	68 c8 18 03 c0       	push   0xc00318c8
c001e0bd:	e8 f4 a8 00 00       	call   c00289b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0c2:	83 c4 10             	add    esp,0x10
c001e0c5:	84 c0                	test   al,al
c001e0c7:	75 38                	jne    c001e101 <schedule()+0x61>
c001e0c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e0d1:	4a                   	dec    edx
c001e0d2:	74 32                	je     c001e106 <schedule()+0x66>
c001e0d4:	83 ec 0c             	sub    esp,0xc
c001e0d7:	68 c8 18 03 c0       	push   0xc00318c8
c001e0dc:	e8 cd a8 00 00       	call   c00289ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0e1:	c7 04 24 c8 18 03 c0 	mov    DWORD PTR [esp],0xc00318c8
c001e0e8:	89 c3                	mov    ebx,eax
c001e0ea:	e8 e3 a8 00 00       	call   c00289d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0ef:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e0f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e0f9:	e8 07 fd ff ff       	call   c001de05 <switchToThread(ThreadControlBlock*)>
c001e0fe:	83 c4 10             	add    esp,0x10
c001e101:	83 c4 08             	add    esp,0x8
c001e104:	5b                   	pop    ebx
c001e105:	c3                   	ret    
c001e106:	83 ec 08             	sub    esp,0x8
c001e109:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e110:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e116:	68 c8 18 03 c0       	push   0xc00318c8
c001e11b:	e8 60 a9 00 00       	call   c0028a80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e120:	83 c4 10             	add    esp,0x10
c001e123:	eb af                	jmp    c001e0d4 <schedule()+0x34>

c001e125 <unlockStuff()>:
c001e125:	a1 a8 18 03 c0       	mov    eax,ds:0xc00318a8
c001e12a:	48                   	dec    eax
c001e12b:	a3 a8 18 03 c0       	mov    ds:0xc00318a8,eax
c001e130:	75 09                	jne    c001e13b <unlockStuff()+0x16>
c001e132:	a1 a4 18 03 c0       	mov    eax,ds:0xc00318a4
c001e137:	85 c0                	test   eax,eax
c001e139:	75 05                	jne    c001e140 <unlockStuff()+0x1b>
c001e13b:	e9 15 fc ff ff       	jmp    c001dd55 <enableIRQs()>
c001e140:	83 ec 0c             	sub    esp,0xc
c001e143:	c7 05 a4 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00318a4,0x0
c001e14d:	e8 4e ff ff ff       	call   c001e0a0 <schedule()>
c001e152:	83 c4 0c             	add    esp,0xc
c001e155:	e9 fb fb ff ff       	jmp    c001dd55 <enableIRQs()>

c001e15a <Semaphore::tryAcquire()>:
c001e15a:	83 ec 0c             	sub    esp,0xc
c001e15d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e161:	e8 25 fc ff ff       	call   c001dd8b <lockStuff()>
c001e166:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e169:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e16b:	7c 0b                	jl     c001e178 <Semaphore::tryAcquire()+0x1e>
c001e16d:	e8 b3 ff ff ff       	call   c001e125 <unlockStuff()>
c001e172:	31 c0                	xor    eax,eax
c001e174:	83 c4 0c             	add    esp,0xc
c001e177:	c3                   	ret    
c001e178:	42                   	inc    edx
c001e179:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e17c:	e8 a4 ff ff ff       	call   c001e125 <unlockStuff()>
c001e181:	b0 01                	mov    al,0x1
c001e183:	83 c4 0c             	add    esp,0xc
c001e186:	c3                   	ret    
c001e187:	90                   	nop

c001e188 <Semaphore::assertLocked(char const*)>:
c001e188:	83 ec 0c             	sub    esp,0xc
c001e18b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e18f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e193:	e8 f3 fb ff ff       	call   c001dd8b <lockStuff()>
c001e198:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e19a:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e19d:	7c 05                	jl     c001e1a4 <Semaphore::assertLocked(char const*)+0x1c>
c001e19f:	83 c4 0c             	add    esp,0xc
c001e1a2:	eb 81                	jmp    c001e125 <unlockStuff()>
c001e1a4:	83 ec 0c             	sub    esp,0xc
c001e1a7:	52                   	push   edx
c001e1a8:	e8 dc c3 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001e1ad:	83 c4 10             	add    esp,0x10
c001e1b0:	83 c4 0c             	add    esp,0xc
c001e1b3:	e9 6d ff ff ff       	jmp    c001e125 <unlockStuff()>

c001e1b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e1b8:	83 ec 0c             	sub    esp,0xc
c001e1bb:	e8 8f fb ff ff       	call   c001dd4f <getIRQNestingLevel()>
c001e1c0:	83 ec 08             	sub    esp,0x8
c001e1c3:	50                   	push   eax
c001e1c4:	68 9c c2 02 c0       	push   0xc002c29c
c001e1c9:	e8 cf 4c ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e1ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e1d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1d7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e1da:	e8 c1 fe ff ff       	call   c001e0a0 <schedule()>
c001e1df:	e8 82 fb ff ff       	call   c001dd66 <unlockScheduler()>
c001e1e4:	e8 66 fb ff ff       	call   c001dd4f <getIRQNestingLevel()>
c001e1e9:	5a                   	pop    edx
c001e1ea:	59                   	pop    ecx
c001e1eb:	50                   	push   eax
c001e1ec:	68 d0 c2 02 c0       	push   0xc002c2d0
c001e1f1:	e8 a7 4c ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e1f6:	83 c4 1c             	add    esp,0x1c
c001e1f9:	c3                   	ret    

c001e1fa <blockTask(TaskState)>:
c001e1fa:	83 ec 0c             	sub    esp,0xc
c001e1fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e201:	e8 5e fb ff ff       	call   c001dd64 <lockScheduler()>
c001e206:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e20b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e20e:	e8 8d fe ff ff       	call   c001e0a0 <schedule()>
c001e213:	83 c4 0c             	add    esp,0xc
c001e216:	e9 4b fb ff ff       	jmp    c001dd66 <unlockScheduler()>

c001e21b <waitTask(int, int*, int)>:
c001e21b:	83 ec 18             	sub    esp,0x18
c001e21e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e223:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e227:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e22a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e22e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e233:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e236:	6a 07                	push   0x7
c001e238:	e8 bd ff ff ff       	call   c001e1fa <blockTask(TaskState)>
c001e23d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e242:	83 c4 10             	add    esp,0x10
c001e245:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e248:	85 d2                	test   edx,edx
c001e24a:	74 0a                	je     c001e256 <waitTask(int, int*, int)+0x3b>
c001e24c:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e24f:	89 02                	mov    DWORD PTR [edx],eax
c001e251:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e256:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e259:	83 c4 0c             	add    esp,0xc
c001e25c:	c3                   	ret    

c001e25d <nanoSleepUntil(unsigned long long)>:
c001e25d:	83 ec 0c             	sub    esp,0xc
c001e260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e264:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e268:	3b 05 f0 e9 02 c0    	cmp    eax,DWORD PTR ds:0xc002e9f0
c001e26e:	89 d1                	mov    ecx,edx
c001e270:	1b 0d f4 e9 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e9f4
c001e276:	73 04                	jae    c001e27c <nanoSleepUntil(unsigned long long)+0x1f>
c001e278:	83 c4 0c             	add    esp,0xc
c001e27b:	c3                   	ret    
c001e27c:	e8 0a fb ff ff       	call   c001dd8b <lockStuff()>
c001e281:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e287:	83 ec 08             	sub    esp,0x8
c001e28a:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e28d:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e290:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e296:	68 bc 18 03 c0       	push   0xc00318bc
c001e29b:	e8 e0 a7 00 00       	call   c0028a80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e2a0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e2a7:	e8 4e ff ff ff       	call   c001e1fa <blockTask(TaskState)>
c001e2ac:	83 c4 1c             	add    esp,0x1c
c001e2af:	e9 71 fe ff ff       	jmp    c001e125 <unlockStuff()>

c001e2b4 <nanoSleep(unsigned long long)>:
c001e2b4:	a1 f0 e9 02 c0       	mov    eax,ds:0xc002e9f0
c001e2b9:	8b 15 f4 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9f4
c001e2bf:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e2c3:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e2c7:	eb 94                	jmp    c001e25d <nanoSleepUntil(unsigned long long)>

c001e2c9 <sleep(unsigned long long)>:
c001e2c9:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e2d1:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e2d6:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e2da:	01 ca                	add    edx,ecx
c001e2dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e2e0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e2e4:	eb ce                	jmp    c001e2b4 <nanoSleep(unsigned long long)>

c001e2e6 <Semaphore::acquire()>:
c001e2e6:	83 ec 0c             	sub    esp,0xc
c001e2e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ed:	e8 99 fa ff ff       	call   c001dd8b <lockStuff()>
c001e2f2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e2f5:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e2f7:	7d 0c                	jge    c001e305 <Semaphore::acquire()+0x1f>
c001e2f9:	42                   	inc    edx
c001e2fa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e2fd:	83 c4 0c             	add    esp,0xc
c001e300:	e9 20 fe ff ff       	jmp    c001e125 <unlockStuff()>
c001e305:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e30b:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e312:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e315:	85 d2                	test   edx,edx
c001e317:	74 2a                	je     c001e343 <Semaphore::acquire()+0x5d>
c001e319:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e31c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e322:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e325:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e32b:	83 ec 0c             	sub    esp,0xc
c001e32e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e331:	6a 05                	push   0x5
c001e333:	e8 c2 fe ff ff       	call   c001e1fa <blockTask(TaskState)>
c001e338:	83 c4 10             	add    esp,0x10
c001e33b:	83 c4 0c             	add    esp,0xc
c001e33e:	e9 e2 fd ff ff       	jmp    c001e125 <unlockStuff()>
c001e343:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e349:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e34c:	eb d7                	jmp    c001e325 <Semaphore::acquire()+0x3f>

c001e34e <taskReturned>:
c001e34e:	83 ec 18             	sub    esp,0x18
c001e351:	68 04 c3 02 c0       	push   0xc002c304
c001e356:	e8 2e c2 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001e35b:	83 c4 10             	add    esp,0x10
c001e35e:	83 ec 0c             	sub    esp,0xc
c001e361:	6a 02                	push   0x2
c001e363:	e8 92 fe ff ff       	call   c001e1fa <blockTask(TaskState)>
c001e368:	e8 f7 f9 ff ff       	call   c001dd64 <lockScheduler()>
c001e36d:	e8 2e fd ff ff       	call   c001e0a0 <schedule()>
c001e372:	e8 ef f9 ff ff       	call   c001dd66 <unlockScheduler()>
c001e377:	83 c4 10             	add    esp,0x10
c001e37a:	eb e2                	jmp    c001e35e <taskReturned+0x10>

c001e37c <unblockTask(ThreadControlBlock*)>:
c001e37c:	53                   	push   ebx
c001e37d:	83 ec 08             	sub    esp,0x8
c001e380:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e384:	e8 db f9 ff ff       	call   c001dd64 <lockScheduler()>
c001e389:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e38c:	85 c0                	test   eax,eax
c001e38e:	74 5c                	je     c001e3ec <unblockTask(ThreadControlBlock*)+0x70>
c001e390:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e393:	48                   	dec    eax
c001e394:	74 31                	je     c001e3c7 <unblockTask(ThreadControlBlock*)+0x4b>
c001e396:	83 ec 0c             	sub    esp,0xc
c001e399:	68 c8 18 03 c0       	push   0xc00318c8
c001e39e:	e8 0b a6 00 00       	call   c00289ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e3a3:	83 c4 10             	add    esp,0x10
c001e3a6:	85 c0                	test   eax,eax
c001e3a8:	75 17                	jne    c001e3c1 <unblockTask(ThreadControlBlock*)+0x45>
c001e3aa:	eb 65                	jmp    c001e411 <unblockTask(ThreadControlBlock*)+0x95>
c001e3ac:	83 ec 08             	sub    esp,0x8
c001e3af:	50                   	push   eax
c001e3b0:	68 c8 18 03 c0       	push   0xc00318c8
c001e3b5:	e8 ce a8 00 00       	call   c0028c88 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e3ba:	83 c4 10             	add    esp,0x10
c001e3bd:	85 c0                	test   eax,eax
c001e3bf:	74 50                	je     c001e411 <unblockTask(ThreadControlBlock*)+0x95>
c001e3c1:	39 c3                	cmp    ebx,eax
c001e3c3:	75 e7                	jne    c001e3ac <unblockTask(ThreadControlBlock*)+0x30>
c001e3c5:	eb 1c                	jmp    c001e3e3 <unblockTask(ThreadControlBlock*)+0x67>
c001e3c7:	83 ec 0c             	sub    esp,0xc
c001e3ca:	68 f4 c3 02 c0       	push   0xc002c3f4
c001e3cf:	e8 c9 4a ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e3d4:	c7 04 24 80 c3 02 c0 	mov    DWORD PTR [esp],0xc002c380
c001e3db:	e8 bd 4a ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e3e0:	83 c4 10             	add    esp,0x10
c001e3e3:	83 c4 08             	add    esp,0x8
c001e3e6:	5b                   	pop    ebx
c001e3e7:	e9 7a f9 ff ff       	jmp    c001dd66 <unlockScheduler()>
c001e3ec:	83 ec 0c             	sub    esp,0xc
c001e3ef:	68 38 c3 02 c0       	push   0xc002c338
c001e3f4:	e8 a4 4a ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e3f9:	c7 04 24 80 c3 02 c0 	mov    DWORD PTR [esp],0xc002c380
c001e400:	e8 98 4a ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e405:	83 c4 10             	add    esp,0x10
c001e408:	83 c4 08             	add    esp,0x8
c001e40b:	5b                   	pop    ebx
c001e40c:	e9 55 f9 ff ff       	jmp    c001dd66 <unlockScheduler()>
c001e411:	83 ec 08             	sub    esp,0x8
c001e414:	53                   	push   ebx
c001e415:	68 c8 18 03 c0       	push   0xc00318c8
c001e41a:	e8 61 a6 00 00       	call   c0028a80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e41f:	83 c4 10             	add    esp,0x10
c001e422:	83 c4 08             	add    esp,0x8
c001e425:	5b                   	pop    ebx
c001e426:	e9 3b f9 ff ff       	jmp    c001dd66 <unlockScheduler()>

c001e42b <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e42b:	55                   	push   ebp
c001e42c:	57                   	push   edi
c001e42d:	56                   	push   esi
c001e42e:	53                   	push   ebx
c001e42f:	83 ec 1c             	sub    esp,0x1c
c001e432:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e436:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e439:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e43f:	85 ff                	test   edi,edi
c001e441:	7e 20                	jle    c001e463 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e443:	31 f6                	xor    esi,esi
c001e445:	83 ec 0c             	sub    esp,0xc
c001e448:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e44f:	46                   	inc    esi
c001e450:	e8 fe 13 ff ff       	call   c000f853 <free>
c001e455:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e458:	83 c4 10             	add    esp,0x10
c001e45b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e461:	7f e2                	jg     c001e445 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e463:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e46d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e472:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e475:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e478:	d3 c0                	rol    eax,cl
c001e47a:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e481:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e484:	89 f7                	mov    edi,esi
c001e486:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e48e:	0f 85 74 01 00 00    	jne    c001e608 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e494:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e49a:	85 ed                	test   ebp,ebp
c001e49c:	74 1b                	je     c001e4b9 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e49e:	83 ec 0c             	sub    esp,0xc
c001e4a1:	55                   	push   ebp
c001e4a2:	e8 4f be ff ff       	call   c001a2f6 <EnvVarContainer::~EnvVarContainer()>
c001e4a7:	59                   	pop    ecx
c001e4a8:	5e                   	pop    esi
c001e4a9:	6a 0c                	push   0xc
c001e4ab:	55                   	push   ebp
c001e4ac:	e8 0c 49 ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c001e4b1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e4b4:	83 c4 10             	add    esp,0x10
c001e4b7:	89 f7                	mov    edi,esi
c001e4b9:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e4bf:	85 c0                	test   eax,eax
c001e4c1:	0f 84 aa 00 00 00    	je     c001e571 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e4c7:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e4ca:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e4ce:	31 c9                	xor    ecx,ecx
c001e4d0:	eb 10                	jmp    c001e4e2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e4d2:	41                   	inc    ecx
c001e4d3:	83 f9 10             	cmp    ecx,0x10
c001e4d6:	0f 84 95 00 00 00    	je     c001e571 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e4dc:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e4e2:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e4e9:	d3 fa                	sar    edx,cl
c001e4eb:	83 e2 01             	and    edx,0x1
c001e4ee:	74 e2                	je     c001e4d2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e4f0:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e4f3:	01 ca                	add    edx,ecx
c001e4f5:	89 d5                	mov    ebp,edx
c001e4f7:	c1 e5 05             	shl    ebp,0x5
c001e4fa:	01 ea                	add    edx,ebp
c001e4fc:	01 d0                	add    eax,edx
c001e4fe:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e504:	83 fd 07             	cmp    ebp,0x7
c001e507:	75 c9                	jne    c001e4d2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e509:	05 40 02 00 00       	add    eax,0x240
c001e50e:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e511:	83 fd ff             	cmp    ebp,0xffffffff
c001e514:	0f 8c 08 01 00 00    	jl     c001e622 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e51a:	0f 84 b9 01 00 00    	je     c001e6d9 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e520:	85 ed                	test   ebp,ebp
c001e522:	0f 84 a0 01 00 00    	je     c001e6c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e528:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e52a:	75 a6                	jne    c001e4d2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e52c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e532:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e536:	01 d0                	add    eax,edx
c001e538:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e53c:	83 ec 0c             	sub    esp,0xc
c001e53f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e545:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e548:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e54e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e555:	50                   	push   eax
c001e556:	e8 21 fe ff ff       	call   c001e37c <unblockTask(ThreadControlBlock*)>
c001e55b:	83 c4 10             	add    esp,0x10
c001e55e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e561:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e565:	89 f7                	mov    edi,esi
c001e567:	41                   	inc    ecx
c001e568:	83 f9 10             	cmp    ecx,0x10
c001e56b:	0f 85 6b ff ff ff    	jne    c001e4dc <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e571:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e577:	85 c0                	test   eax,eax
c001e579:	74 5d                	je     c001e5d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e57b:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e581:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e587:	74 4f                	je     c001e5d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e589:	83 ec 0c             	sub    esp,0xc
c001e58c:	68 c8 18 03 c0       	push   0xc00318c8
c001e591:	e8 18 a4 00 00       	call   c00289ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e596:	c7 04 24 c8 18 03 c0 	mov    DWORD PTR [esp],0xc00318c8
c001e59d:	89 c7                	mov    edi,eax
c001e59f:	e8 12 a4 00 00       	call   c00289b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e5a4:	83 c4 10             	add    esp,0x10
c001e5a7:	84 c0                	test   al,al
c001e5a9:	0f 84 e4 00 00 00    	je     c001e693 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e5af:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5b2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e5b8:	85 d2                	test   edx,edx
c001e5ba:	74 0f                	je     c001e5cb <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e5bc:	83 ec 0c             	sub    esp,0xc
c001e5bf:	8b 02                	mov    eax,DWORD PTR [edx]
c001e5c1:	52                   	push   edx
c001e5c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e5c5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5c8:	83 c4 10             	add    esp,0x10
c001e5cb:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e5d5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e5d8:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e5de:	85 db                	test   ebx,ebx
c001e5e0:	74 16                	je     c001e5f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e5e2:	83 ec 0c             	sub    esp,0xc
c001e5e5:	53                   	push   ebx
c001e5e6:	e8 d9 3b ff ff       	call   c00121c4 <VAS::~VAS()>
c001e5eb:	58                   	pop    eax
c001e5ec:	5a                   	pop    edx
c001e5ed:	6a 14                	push   0x14
c001e5ef:	53                   	push   ebx
c001e5f0:	e8 c8 47 ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c001e5f5:	83 c4 10             	add    esp,0x10
c001e5f8:	83 ec 0c             	sub    esp,0xc
c001e5fb:	68 4e c1 02 c0       	push   0xc002c14e
c001e600:	e8 98 48 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e605:	83 c4 10             	add    esp,0x10
c001e608:	83 ec 08             	sub    esp,0x8
c001e60b:	68 3f 07 00 00       	push   0x73f
c001e610:	68 5c c1 02 c0       	push   0xc002c15c
c001e615:	e8 83 48 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e61a:	83 c4 2c             	add    esp,0x2c
c001e61d:	5b                   	pop    ebx
c001e61e:	5e                   	pop    esi
c001e61f:	5f                   	pop    edi
c001e620:	5d                   	pop    ebp
c001e621:	c3                   	ret    
c001e622:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e626:	83 ec 0c             	sub    esp,0xc
c001e629:	68 38 c4 02 c0       	push   0xc002c438
c001e62e:	e8 56 bf ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001e633:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e636:	83 c4 10             	add    esp,0x10
c001e639:	89 f7                	mov    edi,esi
c001e63b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e63f:	e9 8e fe ff ff       	jmp    c001e4d2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e644:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e64a:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e650:	75 1c                	jne    c001e66e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e652:	83 ec 0c             	sub    esp,0xc
c001e655:	68 a0 c4 02 c0       	push   0xc002c4a0
c001e65a:	e8 3e 48 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e65f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e666:	e8 8f fb ff ff       	call   c001e1fa <blockTask(TaskState)>
c001e66b:	83 c4 10             	add    esp,0x10
c001e66e:	83 ec 08             	sub    esp,0x8
c001e671:	56                   	push   esi
c001e672:	68 c8 18 03 c0       	push   0xc00318c8
c001e677:	e8 04 a4 00 00       	call   c0028a80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e67c:	c7 04 24 c8 18 03 c0 	mov    DWORD PTR [esp],0xc00318c8
c001e683:	e8 26 a3 00 00       	call   c00289ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e688:	83 c4 10             	add    esp,0x10
c001e68b:	39 f8                	cmp    eax,edi
c001e68d:	0f 84 1c ff ff ff    	je     c001e5af <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e693:	83 ec 0c             	sub    esp,0xc
c001e696:	68 c8 18 03 c0       	push   0xc00318c8
c001e69b:	e8 0e a3 00 00       	call   c00289ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6a0:	c7 04 24 c8 18 03 c0 	mov    DWORD PTR [esp],0xc00318c8
c001e6a7:	89 c6                	mov    esi,eax
c001e6a9:	e8 24 a3 00 00       	call   c00289d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e6ae:	83 c4 10             	add    esp,0x10
c001e6b1:	39 f3                	cmp    ebx,esi
c001e6b3:	74 b9                	je     c001e66e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e6b5:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e6b8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6bb:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e6c1:	75 ab                	jne    c001e66e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e6c3:	e9 7c ff ff ff       	jmp    c001e644 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e6c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6cc:	83 ec 0c             	sub    esp,0xc
c001e6cf:	68 6c c4 02 c0       	push   0xc002c46c
c001e6d4:	e9 55 ff ff ff       	jmp    c001e62e <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e6d9:	8b 36                	mov    esi,DWORD PTR [esi]
c001e6db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6df:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e6e2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6e5:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e6eb:	01 d7                	add    edi,edx
c001e6ed:	89 f8                	mov    eax,edi
c001e6ef:	e9 44 fe ff ff       	jmp    c001e538 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e6f4 <cleanerTaskFunction(void*)>:
c001e6f4:	53                   	push   ebx
c001e6f5:	83 ec 08             	sub    esp,0x8
c001e6f8:	e8 69 f6 ff ff       	call   c001dd66 <unlockScheduler()>
c001e6fd:	e8 62 f6 ff ff       	call   c001dd64 <lockScheduler()>
c001e702:	80 3d 8c 18 03 c0 00 	cmp    BYTE PTR ds:0xc003188c,0x0
c001e709:	0f 85 8e 00 00 00    	jne    c001e79d <cleanerTaskFunction(void*)+0xa9>
c001e70f:	83 ec 0c             	sub    esp,0xc
c001e712:	6a 02                	push   0x2
c001e714:	e8 9f fa ff ff       	call   c001e1b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e719:	83 c4 10             	add    esp,0x10
c001e71c:	c6 05 8c 18 03 c0 00 	mov    BYTE PTR ds:0xc003188c,0x0
c001e723:	e8 63 f6 ff ff       	call   c001dd8b <lockStuff()>
c001e728:	e8 37 f6 ff ff       	call   c001dd64 <lockScheduler()>
c001e72d:	83 ec 0c             	sub    esp,0xc
c001e730:	68 b0 18 03 c0       	push   0xc00318b0
c001e735:	e8 7c a2 00 00       	call   c00289b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e73a:	83 c4 10             	add    esp,0x10
c001e73d:	84 c0                	test   al,al
c001e73f:	75 40                	jne    c001e781 <cleanerTaskFunction(void*)+0x8d>
c001e741:	83 ec 0c             	sub    esp,0xc
c001e744:	68 b0 18 03 c0       	push   0xc00318b0
c001e749:	e8 60 a2 00 00       	call   c00289ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e74e:	c7 04 24 b0 18 03 c0 	mov    DWORD PTR [esp],0xc00318b0
c001e755:	89 c3                	mov    ebx,eax
c001e757:	e8 76 a2 00 00       	call   c00289d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e75c:	c7 04 24 72 c1 02 c0 	mov    DWORD PTR [esp],0xc002c172
c001e763:	e8 35 47 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e768:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e76b:	e8 bb fc ff ff       	call   c001e42b <cleanupTerminatedTask(ThreadControlBlock*)>
c001e770:	c7 04 24 8b c1 02 c0 	mov    DWORD PTR [esp],0xc002c18b
c001e777:	e8 21 47 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e77c:	83 c4 10             	add    esp,0x10
c001e77f:	eb ac                	jmp    c001e72d <cleanerTaskFunction(void*)+0x39>
c001e781:	e8 e0 f5 ff ff       	call   c001dd66 <unlockScheduler()>
c001e786:	e8 9a f9 ff ff       	call   c001e125 <unlockStuff()>
c001e78b:	e8 d4 f5 ff ff       	call   c001dd64 <lockScheduler()>
c001e790:	80 3d 8c 18 03 c0 00 	cmp    BYTE PTR ds:0xc003188c,0x0
c001e797:	0f 84 72 ff ff ff    	je     c001e70f <cleanerTaskFunction(void*)+0x1b>
c001e79d:	e8 c4 f5 ff ff       	call   c001dd66 <unlockScheduler()>
c001e7a2:	e9 75 ff ff ff       	jmp    c001e71c <cleanerTaskFunction(void*)+0x28>

c001e7a7 <terminateTask(int)>:
c001e7a7:	83 ec 14             	sub    esp,0x14
c001e7aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e7b2:	83 c0 0c             	add    eax,0xc
c001e7b5:	50                   	push   eax
c001e7b6:	68 c8 c4 02 c0       	push   0xc002c4c8
c001e7bb:	e8 dd 46 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e7c0:	e8 c6 f5 ff ff       	call   c001dd8b <lockStuff()>
c001e7c5:	e8 9a f5 ff ff       	call   c001dd64 <lockScheduler()>
c001e7ca:	c7 04 24 9e c1 02 c0 	mov    DWORD PTR [esp],0xc002c19e
c001e7d1:	e8 c7 46 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e7d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e7da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7df:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e7e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7e7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e7ea:	5a                   	pop    edx
c001e7eb:	59                   	pop    ecx
c001e7ec:	50                   	push   eax
c001e7ed:	68 b0 18 03 c0       	push   0xc00318b0
c001e7f2:	e8 89 a2 00 00       	call   c0028a80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7fc:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e803:	c7 04 24 b8 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1b8
c001e80a:	e8 8e 46 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e80f:	83 c4 10             	add    esp,0x10
c001e812:	a1 88 18 03 c0       	mov    eax,ds:0xc0031888
c001e817:	85 c0                	test   eax,eax
c001e819:	74 5a                	je     c001e875 <terminateTask(int)+0xce>
c001e81b:	83 ec 0c             	sub    esp,0xc
c001e81e:	68 d2 c1 02 c0       	push   0xc002c1d2
c001e823:	e8 75 46 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e828:	58                   	pop    eax
c001e829:	c6 05 8c 18 03 c0 01 	mov    BYTE PTR ds:0xc003188c,0x1
c001e830:	ff 35 88 18 03 c0    	push   DWORD PTR ds:0xc0031888
c001e836:	e8 41 fb ff ff       	call   c001e37c <unblockTask(ThreadControlBlock*)>
c001e83b:	c7 04 24 ec c1 02 c0 	mov    DWORD PTR [esp],0xc002c1ec
c001e842:	e8 56 46 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e847:	83 c4 10             	add    esp,0x10
c001e84a:	e8 17 f5 ff ff       	call   c001dd66 <unlockScheduler()>
c001e84f:	e8 d1 f8 ff ff       	call   c001e125 <unlockStuff()>
c001e854:	83 ec 0c             	sub    esp,0xc
c001e857:	68 24 c2 02 c0       	push   0xc002c224
c001e85c:	e8 3c 46 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e861:	83 c4 10             	add    esp,0x10
c001e864:	e8 fb f4 ff ff       	call   c001dd64 <lockScheduler()>
c001e869:	e8 32 f8 ff ff       	call   c001e0a0 <schedule()>
c001e86e:	e8 f3 f4 ff ff       	call   c001dd66 <unlockScheduler()>
c001e873:	eb ef                	jmp    c001e864 <terminateTask(int)+0xbd>
c001e875:	83 ec 0c             	sub    esp,0xc
c001e878:	68 06 c2 02 c0       	push   0xc002c206
c001e87d:	e8 1b 46 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e882:	83 c4 10             	add    esp,0x10
c001e885:	eb c3                	jmp    c001e84a <terminateTask(int)+0xa3>

c001e887 <Thr::terminateFromIRQ(int)>:
c001e887:	83 ec 18             	sub    esp,0x18
c001e88a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e88e:	e8 14 ff ff ff       	call   c001e7a7 <terminateTask(int)>
c001e893:	90                   	nop

c001e894 <Semaphore::release()>:
c001e894:	83 ec 0c             	sub    esp,0xc
c001e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e89b:	e8 eb f4 ff ff       	call   c001dd8b <lockStuff()>
c001e8a0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e8a3:	85 d2                	test   edx,edx
c001e8a5:	74 1a                	je     c001e8c1 <Semaphore::release()+0x2d>
c001e8a7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e8aa:	83 ec 0c             	sub    esp,0xc
c001e8ad:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e8b0:	52                   	push   edx
c001e8b1:	e8 c6 fa ff ff       	call   c001e37c <unblockTask(ThreadControlBlock*)>
c001e8b6:	83 c4 10             	add    esp,0x10
c001e8b9:	83 c4 0c             	add    esp,0xc
c001e8bc:	e9 64 f8 ff ff       	jmp    c001e125 <unlockStuff()>
c001e8c1:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e8c4:	83 c4 0c             	add    esp,0xc
c001e8c7:	e9 59 f8 ff ff       	jmp    c001e125 <unlockStuff()>

c001e8cc <__static_initialization_and_destruction_0(int, int)>:
c001e8cc:	83 ec 0c             	sub    esp,0xc
c001e8cf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e8d4:	0f 85 88 00 00 00    	jne    c001e962 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e8da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e8e2:	75 7e                	jne    c001e962 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e8e4:	83 ec 0c             	sub    esp,0xc
c001e8e7:	68 c8 18 03 c0       	push   0xc00318c8
c001e8ec:	e8 3f a3 00 00       	call   c0028c30 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e8f1:	83 c4 10             	add    esp,0x10
c001e8f4:	83 ec 04             	sub    esp,0x4
c001e8f7:	68 80 d2 02 c0       	push   0xc002d280
c001e8fc:	68 c8 18 03 c0       	push   0xc00318c8
c001e901:	68 f0 8b 02 c0       	push   0xc0028bf0
c001e906:	e8 2c 44 ff ff       	call   c0012d37 <__cxa_atexit>
c001e90b:	83 c4 10             	add    esp,0x10
c001e90e:	83 ec 0c             	sub    esp,0xc
c001e911:	68 bc 18 03 c0       	push   0xc00318bc
c001e916:	e8 15 a3 00 00       	call   c0028c30 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e91b:	83 c4 10             	add    esp,0x10
c001e91e:	83 ec 04             	sub    esp,0x4
c001e921:	68 80 d2 02 c0       	push   0xc002d280
c001e926:	68 bc 18 03 c0       	push   0xc00318bc
c001e92b:	68 f0 8b 02 c0       	push   0xc0028bf0
c001e930:	e8 02 44 ff ff       	call   c0012d37 <__cxa_atexit>
c001e935:	83 c4 10             	add    esp,0x10
c001e938:	83 ec 0c             	sub    esp,0xc
c001e93b:	68 b0 18 03 c0       	push   0xc00318b0
c001e940:	e8 eb a2 00 00       	call   c0028c30 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e945:	83 c4 10             	add    esp,0x10
c001e948:	83 ec 04             	sub    esp,0x4
c001e94b:	68 80 d2 02 c0       	push   0xc002d280
c001e950:	68 b0 18 03 c0       	push   0xc00318b0
c001e955:	68 f0 8b 02 c0       	push   0xc0028bf0
c001e95a:	e8 d8 43 ff ff       	call   c0012d37 <__cxa_atexit>
c001e95f:	83 c4 10             	add    esp,0x10
c001e962:	90                   	nop
c001e963:	83 c4 0c             	add    esp,0xc
c001e966:	c3                   	ret    

c001e967 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e967:	83 ec 0c             	sub    esp,0xc
c001e96a:	83 ec 08             	sub    esp,0x8
c001e96d:	68 ff ff 00 00       	push   0xffff
c001e972:	6a 01                	push   0x1
c001e974:	e8 53 ff ff ff       	call   c001e8cc <__static_initialization_and_destruction_0(int, int)>
c001e979:	83 c4 10             	add    esp,0x10
c001e97c:	83 c4 0c             	add    esp,0xc
c001e97f:	c3                   	ret    

c001e980 <Vm::inbv(unsigned short)>:
c001e980:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e984:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e989:	75 06                	jne    c001e991 <Vm::inbv(unsigned short)+0x11>
c001e98b:	a0 0c 19 03 c0       	mov    al,ds:0xc003190c
c001e990:	c3                   	ret    
c001e991:	ec                   	in     al,dx
c001e992:	c3                   	ret    

c001e993 <Vm::outbv(unsigned short, unsigned char)>:
c001e993:	53                   	push   ebx
c001e994:	83 ec 08             	sub    esp,0x8
c001e997:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e99b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e99f:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e9a4:	75 38                	jne    c001e9de <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e9a6:	0f b6 c3             	movzx  eax,bl
c001e9a9:	51                   	push   ecx
c001e9aa:	51                   	push   ecx
c001e9ab:	50                   	push   eax
c001e9ac:	68 e7 c4 02 c0       	push   0xc002c4e7
c001e9b1:	e8 e7 44 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001e9b6:	8b 15 0c 19 03 c0    	mov    edx,DWORD PTR ds:0xc003190c
c001e9bc:	83 c4 10             	add    esp,0x10
c001e9bf:	8d 42 01             	lea    eax,[edx+0x1]
c001e9c2:	88 9a 20 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6e0],bl
c001e9c8:	a3 0c 19 03 c0       	mov    ds:0xc003190c,eax
c001e9cd:	83 f8 20             	cmp    eax,0x20
c001e9d0:	75 0f                	jne    c001e9e1 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e9d2:	c7 05 0c 19 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003190c,0x1f
c001e9dc:	eb 03                	jmp    c001e9e1 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e9de:	88 d8                	mov    al,bl
c001e9e0:	ee                   	out    dx,al
c001e9e1:	83 c4 08             	add    esp,0x8
c001e9e4:	5b                   	pop    ebx
c001e9e5:	c3                   	ret    

c001e9e6 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e9e6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9eb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9f0:	c1 e0 04             	shl    eax,0x4
c001e9f3:	01 d0                	add    eax,edx
c001e9f5:	c3                   	ret    

c001e9f6 <Vm::getSegment(unsigned int)>:
c001e9f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9fa:	c1 e8 10             	shr    eax,0x10
c001e9fd:	c3                   	ret    

c001e9fe <Vm::getOffset(unsigned int)>:
c001e9fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea02:	c3                   	ret    

c001ea03 <Vm::mainloop2()>:
c001ea03:	83 ec 0c             	sub    esp,0xc
c001ea06:	e8 59 f3 ff ff       	call   c001dd64 <lockScheduler()>
c001ea0b:	83 ec 0c             	sub    esp,0xc
c001ea0e:	c6 05 05 19 03 c0 01 	mov    BYTE PTR ds:0xc0031905,0x1
c001ea15:	6a 02                	push   0x2
c001ea17:	e8 9c f7 ff ff       	call   c001e1b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea21:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ea25:	52                   	push   edx
c001ea26:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ea2a:	52                   	push   edx
c001ea2b:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ea2f:	52                   	push   edx
c001ea30:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ea34:	50                   	push   eax
c001ea35:	e8 c0 18 fe ff       	call   c00002fa <goToVM86>
c001ea3a:	83 c4 2c             	add    esp,0x2c
c001ea3d:	c3                   	ret    

c001ea3e <Vm::mainVm8086Loop(void*)>:
c001ea3e:	83 ec 0c             	sub    esp,0xc
c001ea41:	e8 20 f3 ff ff       	call   c001dd66 <unlockScheduler()>
c001ea46:	83 c4 0c             	add    esp,0xc
c001ea49:	eb b8                	jmp    c001ea03 <Vm::mainloop2()>

c001ea4b <Vm::mainloop3(unsigned long)>:
c001ea4b:	53                   	push   ebx
c001ea4c:	83 ec 08             	sub    esp,0x8
c001ea4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea53:	e8 0c f3 ff ff       	call   c001dd64 <lockScheduler()>
c001ea58:	83 ec 0c             	sub    esp,0xc
c001ea5b:	89 1d 00 19 03 c0    	mov    DWORD PTR ds:0xc0031900,ebx
c001ea61:	6a 02                	push   0x2
c001ea63:	c6 05 04 19 03 c0 01 	mov    BYTE PTR ds:0xc0031904,0x1
c001ea6a:	e8 49 f7 ff ff       	call   c001e1b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea6f:	83 c4 18             	add    esp,0x18
c001ea72:	5b                   	pop    ebx
c001ea73:	eb 8e                	jmp    c001ea03 <Vm::mainloop2()>

c001ea75 <Vm::initialise8086()>:
c001ea75:	83 ec 0c             	sub    esp,0xc
c001ea78:	68 80 00 00 00       	push   0x80
c001ea7d:	6a 00                	push   0x0
c001ea7f:	68 3e ea 01 c0       	push   0xc001ea3e
c001ea84:	ff 35 d4 18 03 c0    	push   DWORD PTR ds:0xc00318d4
c001ea8a:	e8 07 f4 ff ff       	call   c001de96 <Process::createThread(void (*)(void*), void*, int)>
c001ea8f:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ea96:	a3 08 19 03 c0       	mov    ds:0xc0031908,eax
c001ea9b:	68 00 01 00 00       	push   0x100
c001eaa0:	a1 d4 18 03 c0       	mov    eax,ds:0xc00318d4
c001eaa5:	6a 00                	push   0x0
c001eaa7:	6a 00                	push   0x0
c001eaa9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eaaf:	e8 70 3b ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eab4:	83 c4 2c             	add    esp,0x2c
c001eab7:	c3                   	ret    

c001eab8 <Vm::finish8086()>:
c001eab8:	53                   	push   ebx
c001eab9:	83 ec 08             	sub    esp,0x8
c001eabc:	e8 a3 f2 ff ff       	call   c001dd64 <lockScheduler()>
c001eac1:	80 3d 04 19 03 c0 00 	cmp    BYTE PTR ds:0xc0031904,0x0
c001eac8:	75 0c                	jne    c001ead6 <Vm::finish8086()+0x1e>
c001eaca:	e8 d1 f5 ff ff       	call   c001e0a0 <schedule()>
c001eacf:	e8 92 f2 ff ff       	call   c001dd66 <unlockScheduler()>
c001ead4:	eb e6                	jmp    c001eabc <Vm::finish8086()+0x4>
c001ead6:	83 ec 0c             	sub    esp,0xc
c001ead9:	8b 1d 00 19 03 c0    	mov    ebx,DWORD PTR ds:0xc0031900
c001eadf:	ff 35 08 19 03 c0    	push   DWORD PTR ds:0xc0031908
c001eae5:	c6 05 04 19 03 c0 00 	mov    BYTE PTR ds:0xc0031904,0x0
c001eaec:	e8 8b f8 ff ff       	call   c001e37c <unblockTask(ThreadControlBlock*)>
c001eaf1:	e8 70 f2 ff ff       	call   c001dd66 <unlockScheduler()>
c001eaf6:	89 d8                	mov    eax,ebx
c001eaf8:	83 c4 18             	add    esp,0x18
c001eafb:	5b                   	pop    ebx
c001eafc:	c3                   	ret    

c001eafd <Vm::getOutput8086(unsigned char*)>:
c001eafd:	83 ec 10             	sub    esp,0x10
c001eb00:	ff 35 0c 19 03 c0    	push   DWORD PTR ds:0xc003190c
c001eb06:	68 20 19 03 c0       	push   0xc0031920
c001eb0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb0f:	e8 30 1c fe ff       	call   c0000744 <memcpy>
c001eb14:	a1 0c 19 03 c0       	mov    eax,ds:0xc003190c
c001eb19:	c7 05 0c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003190c,0x0
c001eb23:	83 c4 1c             	add    esp,0x1c
c001eb26:	c3                   	ret    

c001eb27 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eb27:	55                   	push   ebp
c001eb28:	57                   	push   edi
c001eb29:	56                   	push   esi
c001eb2a:	53                   	push   ebx
c001eb2b:	83 ec 2c             	sub    esp,0x2c
c001eb2e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001eb32:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001eb36:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001eb3a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001eb3e:	e8 21 f2 ff ff       	call   c001dd64 <lockScheduler()>
c001eb43:	a0 05 19 03 c0       	mov    al,ds:0xc0031905
c001eb48:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001eb4c:	84 c0                	test   al,al
c001eb4e:	75 0c                	jne    c001eb5c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001eb50:	e8 4b f5 ff ff       	call   c001e0a0 <schedule()>
c001eb55:	e8 0c f2 ff ff       	call   c001dd66 <unlockScheduler()>
c001eb5a:	eb e2                	jmp    c001eb3e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001eb5c:	a1 08 19 03 c0       	mov    eax,ds:0xc0031908
c001eb61:	c7 05 0c 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003190c,0x0
c001eb6b:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001eb6f:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001eb73:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001eb77:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001eb7b:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001eb7f:	50                   	push   eax
c001eb80:	6a 20                	push   0x20
c001eb82:	6a 00                	push   0x0
c001eb84:	68 20 19 03 c0       	push   0xc0031920
c001eb89:	e8 ea 1b fe ff       	call   c0000778 <memset>
c001eb8e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001eb95:	e8 a9 0c ff ff       	call   c000f843 <malloc>
c001eb9a:	83 c4 0c             	add    esp,0xc
c001eb9d:	89 c7                	mov    edi,eax
c001eb9f:	ff 35 d4 18 03 c0    	push   DWORD PTR ds:0xc00318d4
c001eba5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eba9:	50                   	push   eax
c001ebaa:	e8 47 48 ff ff       	call   c00133f6 <File::File(char const*, Process*)>
c001ebaf:	83 c4 10             	add    esp,0x10
c001ebb2:	85 ff                	test   edi,edi
c001ebb4:	75 0a                	jne    c001ebc0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ebb6:	83 ec 0c             	sub    esp,0xc
c001ebb9:	68 03 c5 02 c0       	push   0xc002c503
c001ebbe:	eb 27                	jmp    c001ebe7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ebc0:	50                   	push   eax
c001ebc1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ebc5:	50                   	push   eax
c001ebc6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ebca:	50                   	push   eax
c001ebcb:	57                   	push   edi
c001ebcc:	e8 35 4b ff ff       	call   c0013706 <File::stat(unsigned long long*, bool*)>
c001ebd1:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ebd6:	83 c4 10             	add    esp,0x10
c001ebd9:	89 e8                	mov    eax,ebp
c001ebdb:	84 c0                	test   al,al
c001ebdd:	74 19                	je     c001ebf8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ebdf:	83 ec 0c             	sub    esp,0xc
c001ebe2:	68 17 c5 02 c0       	push   0xc002c517
c001ebe7:	e8 9d b9 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001ebec:	31 ed                	xor    ebp,ebp
c001ebee:	e8 73 f1 ff ff       	call   c001dd66 <unlockScheduler()>
c001ebf3:	83 c4 10             	add    esp,0x10
c001ebf6:	eb 75                	jmp    c001ec6d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ebf8:	50                   	push   eax
c001ebf9:	50                   	push   eax
c001ebfa:	6a 01                	push   0x1
c001ebfc:	57                   	push   edi
c001ebfd:	e8 58 48 ff ff       	call   c001345a <File::open(FileOpenMode)>
c001ec02:	83 c4 10             	add    esp,0x10
c001ec05:	85 c0                	test   eax,eax
c001ec07:	74 17                	je     c001ec20 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ec09:	83 ec 0c             	sub    esp,0xc
c001ec0c:	68 30 c5 02 c0       	push   0xc002c530
c001ec11:	e8 73 b9 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001ec16:	e8 4b f1 ff ff       	call   c001dd66 <unlockScheduler()>
c001ec1b:	83 c4 10             	add    esp,0x10
c001ec1e:	eb 4d                	jmp    c001ec6d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ec20:	0f b7 f6             	movzx  esi,si
c001ec23:	50                   	push   eax
c001ec24:	0f b7 db             	movzx  ebx,bx
c001ec27:	50                   	push   eax
c001ec28:	56                   	push   esi
c001ec29:	53                   	push   ebx
c001ec2a:	e8 b7 fd ff ff       	call   c001e9e6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ec2f:	5a                   	pop    edx
c001ec30:	8b 17                	mov    edx,DWORD PTR [edi]
c001ec32:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ec36:	51                   	push   ecx
c001ec37:	50                   	push   eax
c001ec38:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec3c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ec40:	57                   	push   edi
c001ec41:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ec44:	83 c4 14             	add    esp,0x14
c001ec47:	57                   	push   edi
c001ec48:	e8 6b 48 ff ff       	call   c00134b8 <File::close()>
c001ec4d:	c6 05 05 19 03 c0 00 	mov    BYTE PTR ds:0xc0031905,0x0
c001ec54:	e8 0d f1 ff ff       	call   c001dd66 <unlockScheduler()>
c001ec59:	59                   	pop    ecx
c001ec5a:	ff 35 08 19 03 c0    	push   DWORD PTR ds:0xc0031908
c001ec60:	e8 17 f7 ff ff       	call   c001e37c <unblockTask(ThreadControlBlock*)>
c001ec65:	83 c4 10             	add    esp,0x10
c001ec68:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ec6d:	83 c4 2c             	add    esp,0x2c
c001ec70:	89 e8                	mov    eax,ebp
c001ec72:	5b                   	pop    ebx
c001ec73:	5e                   	pop    esi
c001ec74:	5f                   	pop    edi
c001ec75:	5d                   	pop    ebp
c001ec76:	c3                   	ret    

c001ec77 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ec77:	57                   	push   edi
c001ec78:	56                   	push   esi
c001ec79:	53                   	push   ebx
c001ec7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ec7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec82:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ec86:	83 e8 06             	sub    eax,0x6
c001ec89:	0f b7 c0             	movzx  eax,ax
c001ec8c:	50                   	push   eax
c001ec8d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ec92:	50                   	push   eax
c001ec93:	e8 4e fd ff ff       	call   c001e9e6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ec98:	5a                   	pop    edx
c001ec99:	5e                   	pop    esi
c001ec9a:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ec9d:	8d 56 fa             	lea    edx,[esi-0x6]
c001eca0:	81 e2 ff ff 00 00    	and    edx,0xffff
c001eca6:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001eca9:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ecac:	83 c2 02             	add    edx,0x2
c001ecaf:	66 89 10             	mov    WORD PTR [eax],dx
c001ecb2:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ecb5:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ecb9:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ecbc:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ecc0:	89 d6                	mov    esi,edx
c001ecc2:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ecc8:	66 81 e6 ff fd       	and    si,0xfdff
c001eccd:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ecd1:	74 07                	je     c001ecda <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ecd3:	89 d6                	mov    esi,edx
c001ecd5:	66 81 ce 00 02       	or     si,0x200
c001ecda:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ecde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ece3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ece7:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ecef:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ecf2:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ecfa:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ecfd:	5b                   	pop    ebx
c001ecfe:	5e                   	pop    esi
c001ecff:	5f                   	pop    edi
c001ed00:	c3                   	ret    

c001ed01 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ed01:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed06:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed0b:	c1 e0 04             	shl    eax,0x4
c001ed0e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ed11:	c3                   	ret    

c001ed12 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ed12:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed17:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed1c:	c1 e0 04             	shl    eax,0x4
c001ed1f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ed23:	c3                   	ret    

c001ed24 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ed24:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed29:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed2e:	c1 e0 04             	shl    eax,0x4
c001ed31:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ed34:	c3                   	ret    

c001ed35 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ed35:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed3a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed3f:	c1 e0 04             	shl    eax,0x4
c001ed42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed46:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ed49:	c3                   	ret    

c001ed4a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ed4a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed4f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed54:	c1 e0 04             	shl    eax,0x4
c001ed57:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed5b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ed5f:	c3                   	ret    

c001ed60 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ed60:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ed65:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ed6a:	c1 e0 04             	shl    eax,0x4
c001ed6d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed71:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ed74:	c3                   	ret    

c001ed75 <Vm::faultHandler(regs*)>:
c001ed75:	55                   	push   ebp
c001ed76:	57                   	push   edi
c001ed77:	56                   	push   esi
c001ed78:	53                   	push   ebx
c001ed79:	83 ec 1c             	sub    esp,0x1c
c001ed7c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ed80:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ed83:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ed86:	0f b7 c1             	movzx  eax,cx
c001ed89:	50                   	push   eax
c001ed8a:	0f b7 c3             	movzx  eax,bx
c001ed8d:	c1 e3 04             	shl    ebx,0x4
c001ed90:	50                   	push   eax
c001ed91:	e8 50 fc ff ff       	call   c001e9e6 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed96:	5a                   	pop    edx
c001ed97:	89 c5                	mov    ebp,eax
c001ed99:	5e                   	pop    esi
c001ed9a:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ed9e:	50                   	push   eax
c001ed9f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001eda3:	50                   	push   eax
c001eda4:	e8 3d fc ff ff       	call   c001e9e6 <Vm::realToLinear(unsigned short, unsigned short)>
c001eda9:	01 cb                	add    ebx,ecx
c001edab:	89 c6                	mov    esi,eax
c001edad:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001edb1:	50                   	push   eax
c001edb2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edb6:	50                   	push   eax
c001edb7:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001edbb:	50                   	push   eax
c001edbc:	55                   	push   ebp
c001edbd:	53                   	push   ebx
c001edbe:	b3 06                	mov    bl,0x6
c001edc0:	68 49 c5 02 c0       	push   0xc002c549
c001edc5:	e8 d3 40 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001edca:	83 c4 20             	add    esp,0x20
c001edcd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001edd2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001edd7:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eddb:	3c 9d                	cmp    al,0x9d
c001eddd:	0f 84 d7 02 00 00    	je     c001f0ba <Vm::faultHandler(regs*)+0x345>
c001ede3:	0f 87 a3 00 00 00    	ja     c001ee8c <Vm::faultHandler(regs*)+0x117>
c001ede9:	3c 66                	cmp    al,0x66
c001edeb:	0f 84 15 02 00 00    	je     c001f006 <Vm::faultHandler(regs*)+0x291>
c001edf1:	77 5f                	ja     c001ee52 <Vm::faultHandler(regs*)+0xdd>
c001edf3:	3c 36                	cmp    al,0x36
c001edf5:	0f 84 f1 01 00 00    	je     c001efec <Vm::faultHandler(regs*)+0x277>
c001edfb:	77 28                	ja     c001ee25 <Vm::faultHandler(regs*)+0xb0>
c001edfd:	3c 26                	cmp    al,0x26
c001edff:	0f 84 99 01 00 00    	je     c001ef9e <Vm::faultHandler(regs*)+0x229>
c001ee05:	3c 2e                	cmp    al,0x2e
c001ee07:	0f 85 3b 07 00 00    	jne    c001f548 <Vm::faultHandler(regs*)+0x7d3>
c001ee0d:	83 ec 0c             	sub    esp,0xc
c001ee10:	31 db                	xor    ebx,ebx
c001ee12:	68 5e c5 02 c0       	push   0xc002c55e
c001ee17:	e8 81 40 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001ee1c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee1f:	83 c4 10             	add    esp,0x10
c001ee22:	45                   	inc    ebp
c001ee23:	eb b2                	jmp    c001edd7 <Vm::faultHandler(regs*)+0x62>
c001ee25:	3c 64                	cmp    al,0x64
c001ee27:	0f 84 8b 01 00 00    	je     c001efb8 <Vm::faultHandler(regs*)+0x243>
c001ee2d:	0f 87 9f 01 00 00    	ja     c001efd2 <Vm::faultHandler(regs*)+0x25d>
c001ee33:	3c 3e                	cmp    al,0x3e
c001ee35:	0f 85 0d 07 00 00    	jne    c001f548 <Vm::faultHandler(regs*)+0x7d3>
c001ee3b:	83 ec 0c             	sub    esp,0xc
c001ee3e:	b3 01                	mov    bl,0x1
c001ee40:	68 62 c5 02 c0       	push   0xc002c562
c001ee45:	e8 53 40 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001ee4a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee4d:	83 c4 10             	add    esp,0x10
c001ee50:	eb d0                	jmp    c001ee22 <Vm::faultHandler(regs*)+0xad>
c001ee52:	3c 6d                	cmp    al,0x6d
c001ee54:	0f 84 af 03 00 00    	je     c001f209 <Vm::faultHandler(regs*)+0x494>
c001ee5a:	77 15                	ja     c001ee71 <Vm::faultHandler(regs*)+0xfc>
c001ee5c:	3c 67                	cmp    al,0x67
c001ee5e:	0f 84 bf 01 00 00    	je     c001f023 <Vm::faultHandler(regs*)+0x2ae>
c001ee64:	3c 6c                	cmp    al,0x6c
c001ee66:	0f 84 3f 03 00 00    	je     c001f1ab <Vm::faultHandler(regs*)+0x436>
c001ee6c:	e9 d7 06 00 00       	jmp    c001f548 <Vm::faultHandler(regs*)+0x7d3>
c001ee71:	3c 6f                	cmp    al,0x6f
c001ee73:	0f 84 a4 04 00 00    	je     c001f31d <Vm::faultHandler(regs*)+0x5a8>
c001ee79:	0f 82 11 04 00 00    	jb     c001f290 <Vm::faultHandler(regs*)+0x51b>
c001ee7f:	3c 9c                	cmp    al,0x9c
c001ee81:	0f 84 ba 01 00 00    	je     c001f041 <Vm::faultHandler(regs*)+0x2cc>
c001ee87:	e9 bc 06 00 00       	jmp    c001f548 <Vm::faultHandler(regs*)+0x7d3>
c001ee8c:	3c ec                	cmp    al,0xec
c001ee8e:	0f 84 24 06 00 00    	je     c001f4b8 <Vm::faultHandler(regs*)+0x743>
c001ee94:	0f 87 93 00 00 00    	ja     c001ef2d <Vm::faultHandler(regs*)+0x1b8>
c001ee9a:	3c e4                	cmp    al,0xe4
c001ee9c:	0f 84 5c 05 00 00    	je     c001f3fe <Vm::faultHandler(regs*)+0x689>
c001eea2:	77 6a                	ja     c001ef0e <Vm::faultHandler(regs*)+0x199>
c001eea4:	3c cd                	cmp    al,0xcd
c001eea6:	0f 84 7e 02 00 00    	je     c001f12a <Vm::faultHandler(regs*)+0x3b5>
c001eeac:	3c cf                	cmp    al,0xcf
c001eeae:	0f 85 94 06 00 00    	jne    c001f548 <Vm::faultHandler(regs*)+0x7d3>
c001eeb4:	83 ec 0c             	sub    esp,0xc
c001eeb7:	68 a6 c5 02 c0       	push   0xc002c5a6
c001eebc:	e8 dc 3f ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001eec1:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001eec4:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001eec7:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001eecb:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001eece:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001eed2:	0d 00 02 02 00       	or     eax,0x20200
c001eed7:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001eeda:	56                   	push   esi
c001eedb:	53                   	push   ebx
c001eedc:	52                   	push   edx
c001eedd:	68 ac c5 02 c0       	push   0xc002c5ac
c001eee2:	e8 b6 3f ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001eee7:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001eeeb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eef1:	66 c1 e8 09          	shr    ax,0x9
c001eef5:	83 e0 01             	and    eax,0x1
c001eef8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eefb:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001eefe:	83 c0 06             	add    eax,0x6
c001ef01:	25 ff ff 00 00       	and    eax,0xffff
c001ef06:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ef09:	e9 95 02 00 00       	jmp    c001f1a3 <Vm::faultHandler(regs*)+0x42e>
c001ef0e:	3c e6                	cmp    al,0xe6
c001ef10:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ef14:	0f 84 4e 05 00 00    	je     c001f468 <Vm::faultHandler(regs*)+0x6f3>
c001ef1a:	0f 82 0a 05 00 00    	jb     c001f42a <Vm::faultHandler(regs*)+0x6b5>
c001ef20:	3c e7                	cmp    al,0xe7
c001ef22:	0f 84 69 05 00 00    	je     c001f491 <Vm::faultHandler(regs*)+0x71c>
c001ef28:	e9 1b 06 00 00       	jmp    c001f548 <Vm::faultHandler(regs*)+0x7d3>
c001ef2d:	3c ef                	cmp    al,0xef
c001ef2f:	0f 84 e6 05 00 00    	je     c001f51b <Vm::faultHandler(regs*)+0x7a6>
c001ef35:	77 37                	ja     c001ef6e <Vm::faultHandler(regs*)+0x1f9>
c001ef37:	3c ed                	cmp    al,0xed
c001ef39:	0f 84 a3 05 00 00    	je     c001f4e2 <Vm::faultHandler(regs*)+0x76d>
c001ef3f:	3c ee                	cmp    al,0xee
c001ef41:	0f 85 01 06 00 00    	jne    c001f548 <Vm::faultHandler(regs*)+0x7d3>
c001ef47:	52                   	push   edx
c001ef48:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ef4b:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ef4e:	68 47 c6 02 c0       	push   0xc002c647
c001ef53:	e8 45 3f ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001ef58:	59                   	pop    ecx
c001ef59:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ef5d:	5b                   	pop    ebx
c001ef5e:	50                   	push   eax
c001ef5f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ef63:	50                   	push   eax
c001ef64:	e8 2a fa ff ff       	call   c001e993 <Vm::outbv(unsigned short, unsigned char)>
c001ef69:	e9 a5 05 00 00       	jmp    c001f513 <Vm::faultHandler(regs*)+0x79e>
c001ef6e:	3c fa                	cmp    al,0xfa
c001ef70:	0f 84 f7 01 00 00    	je     c001f16d <Vm::faultHandler(regs*)+0x3f8>
c001ef76:	3c fb                	cmp    al,0xfb
c001ef78:	0f 84 0a 02 00 00    	je     c001f188 <Vm::faultHandler(regs*)+0x413>
c001ef7e:	3c f3                	cmp    al,0xf3
c001ef80:	0f 85 c2 05 00 00    	jne    c001f548 <Vm::faultHandler(regs*)+0x7d3>
c001ef86:	83 ec 0c             	sub    esp,0xc
c001ef89:	68 7f c5 02 c0       	push   0xc002c57f
c001ef8e:	e8 0a 3f ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001ef93:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef96:	83 c4 10             	add    esp,0x10
c001ef99:	e9 84 fe ff ff       	jmp    c001ee22 <Vm::faultHandler(regs*)+0xad>
c001ef9e:	83 ec 0c             	sub    esp,0xc
c001efa1:	b3 02                	mov    bl,0x2
c001efa3:	68 5a c5 02 c0       	push   0xc002c55a
c001efa8:	e8 f0 3e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001efad:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efb0:	83 c4 10             	add    esp,0x10
c001efb3:	e9 6a fe ff ff       	jmp    c001ee22 <Vm::faultHandler(regs*)+0xad>
c001efb8:	83 ec 0c             	sub    esp,0xc
c001efbb:	b3 03                	mov    bl,0x3
c001efbd:	68 66 c5 02 c0       	push   0xc002c566
c001efc2:	e8 d6 3e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001efc7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efca:	83 c4 10             	add    esp,0x10
c001efcd:	e9 50 fe ff ff       	jmp    c001ee22 <Vm::faultHandler(regs*)+0xad>
c001efd2:	83 ec 0c             	sub    esp,0xc
c001efd5:	b3 04                	mov    bl,0x4
c001efd7:	68 6a c5 02 c0       	push   0xc002c56a
c001efdc:	e8 bc 3e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001efe1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efe4:	83 c4 10             	add    esp,0x10
c001efe7:	e9 36 fe ff ff       	jmp    c001ee22 <Vm::faultHandler(regs*)+0xad>
c001efec:	83 ec 0c             	sub    esp,0xc
c001efef:	b3 05                	mov    bl,0x5
c001eff1:	68 6e c5 02 c0       	push   0xc002c56e
c001eff6:	e8 a2 3e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001effb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001effe:	83 c4 10             	add    esp,0x10
c001f001:	e9 1c fe ff ff       	jmp    c001ee22 <Vm::faultHandler(regs*)+0xad>
c001f006:	83 ec 0c             	sub    esp,0xc
c001f009:	68 72 c5 02 c0       	push   0xc002c572
c001f00e:	e8 8a 3e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f013:	83 c4 10             	add    esp,0x10
c001f016:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f019:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f01e:	e9 ff fd ff ff       	jmp    c001ee22 <Vm::faultHandler(regs*)+0xad>
c001f023:	50                   	push   eax
c001f024:	50                   	push   eax
c001f025:	6a 01                	push   0x1
c001f027:	68 77 c5 02 c0       	push   0xc002c577
c001f02c:	e8 6c 3e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f031:	83 c4 10             	add    esp,0x10
c001f034:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f037:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f03c:	e9 e1 fd ff ff       	jmp    c001ee22 <Vm::faultHandler(regs*)+0xad>
c001f041:	83 ec 0c             	sub    esp,0xc
c001f044:	68 85 c5 02 c0       	push   0xc002c585
c001f049:	e8 4f 3e ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f04e:	83 c4 10             	add    esp,0x10
c001f051:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f054:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f059:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f05c:	74 2f                	je     c001f08d <Vm::faultHandler(regs*)+0x318>
c001f05e:	83 ea 04             	sub    edx,0x4
c001f061:	25 ff 0d 00 00       	and    eax,0xdff
c001f066:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f06c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f06f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f072:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f078:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f07c:	0f 84 bf 04 00 00    	je     c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f082:	80 cc 02             	or     ah,0x2
c001f085:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f088:	e9 b4 04 00 00       	jmp    c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f08d:	83 ea 02             	sub    edx,0x2
c001f090:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f096:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f099:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f09d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0a3:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f0a7:	74 05                	je     c001f0ae <Vm::faultHandler(regs*)+0x339>
c001f0a9:	80 cc 02             	or     ah,0x2
c001f0ac:	eb 03                	jmp    c001f0b1 <Vm::faultHandler(regs*)+0x33c>
c001f0ae:	80 e4 fd             	and    ah,0xfd
c001f0b1:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f0b5:	e9 87 04 00 00       	jmp    c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f0ba:	83 ec 0c             	sub    esp,0xc
c001f0bd:	68 8c c5 02 c0       	push   0xc002c58c
c001f0c2:	e8 d6 3d ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f0c7:	83 c4 10             	add    esp,0x10
c001f0ca:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0cf:	74 28                	je     c001f0f9 <Vm::faultHandler(regs*)+0x384>
c001f0d1:	8b 06                	mov    eax,DWORD PTR [esi]
c001f0d3:	25 ff 0d 00 00       	and    eax,0xdff
c001f0d8:	0d 00 02 02 00       	or     eax,0x20200
c001f0dd:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f0e0:	8b 06                	mov    eax,DWORD PTR [esi]
c001f0e2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f0e8:	c1 e8 09             	shr    eax,0x9
c001f0eb:	83 e0 01             	and    eax,0x1
c001f0ee:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f0f1:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f0f4:	83 c0 04             	add    eax,0x4
c001f0f7:	eb 24                	jmp    c001f11d <Vm::faultHandler(regs*)+0x3a8>
c001f0f9:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f0fc:	0d 00 02 02 00       	or     eax,0x20200
c001f101:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f104:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f107:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f10d:	66 c1 e8 09          	shr    ax,0x9
c001f111:	83 e0 01             	and    eax,0x1
c001f114:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f117:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f11a:	83 c0 02             	add    eax,0x2
c001f11d:	25 ff ff 00 00       	and    eax,0xffff
c001f122:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f125:	e9 17 04 00 00       	jmp    c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f12a:	53                   	push   ebx
c001f12b:	53                   	push   ebx
c001f12c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f130:	50                   	push   eax
c001f131:	68 92 c5 02 c0       	push   0xc002c592
c001f136:	e8 62 3d ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f13b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f13f:	83 c4 10             	add    esp,0x10
c001f142:	3c ee                	cmp    al,0xee
c001f144:	75 10                	jne    c001f156 <Vm::faultHandler(regs*)+0x3e1>
c001f146:	83 ec 0c             	sub    esp,0xc
c001f149:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f14c:	e8 fa f8 ff ff       	call   c001ea4b <Vm::mainloop3(unsigned long)>
c001f151:	e9 c0 03 00 00       	jmp    c001f516 <Vm::faultHandler(regs*)+0x7a1>
c001f156:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f15a:	83 ec 0c             	sub    esp,0xc
c001f15d:	53                   	push   ebx
c001f15e:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f162:	53                   	push   ebx
c001f163:	55                   	push   ebp
c001f164:	50                   	push   eax
c001f165:	57                   	push   edi
c001f166:	e8 0c fb ff ff       	call   c001ec77 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f16b:	eb 36                	jmp    c001f1a3 <Vm::faultHandler(regs*)+0x42e>
c001f16d:	83 ec 0c             	sub    esp,0xc
c001f170:	68 9c c5 02 c0       	push   0xc002c59c
c001f175:	e8 23 3d ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f17a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f17f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f183:	e9 8b 03 00 00       	jmp    c001f513 <Vm::faultHandler(regs*)+0x79e>
c001f188:	83 ec 0c             	sub    esp,0xc
c001f18b:	68 a1 c5 02 c0       	push   0xc002c5a1
c001f190:	e8 08 3d ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f195:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f19a:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f19e:	e9 70 03 00 00       	jmp    c001f513 <Vm::faultHandler(regs*)+0x79e>
c001f1a3:	83 c4 20             	add    esp,0x20
c001f1a6:	e9 99 03 00 00       	jmp    c001f544 <Vm::faultHandler(regs*)+0x7cf>
c001f1ab:	83 ec 0c             	sub    esp,0xc
c001f1ae:	68 df c5 02 c0       	push   0xc002c5df
c001f1b3:	e8 e5 3c ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f1b8:	83 c4 10             	add    esp,0x10
c001f1bb:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f1be:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f1c3:	74 0d                	je     c001f1d2 <Vm::faultHandler(regs*)+0x45d>
c001f1c5:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f1cc:	0f 87 9e 01 00 00    	ja     c001f370 <Vm::faultHandler(regs*)+0x5fb>
c001f1d2:	83 ec 0c             	sub    esp,0xc
c001f1d5:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f1d9:	0f b7 db             	movzx  ebx,bx
c001f1dc:	50                   	push   eax
c001f1dd:	e8 9e f7 ff ff       	call   c001e980 <Vm::inbv(unsigned short)>
c001f1e2:	83 c4 0c             	add    esp,0xc
c001f1e5:	0f b6 c0             	movzx  eax,al
c001f1e8:	50                   	push   eax
c001f1e9:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f1ed:	50                   	push   eax
c001f1ee:	53                   	push   ebx
c001f1ef:	e8 41 fb ff ff       	call   c001ed35 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f1f4:	83 c4 10             	add    esp,0x10
c001f1f7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f1fa:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f1fe:	74 03                	je     c001f203 <Vm::faultHandler(regs*)+0x48e>
c001f200:	48                   	dec    eax
c001f201:	eb 01                	jmp    c001f204 <Vm::faultHandler(regs*)+0x48f>
c001f203:	40                   	inc    eax
c001f204:	0f b7 c0             	movzx  eax,ax
c001f207:	eb 7f                	jmp    c001f288 <Vm::faultHandler(regs*)+0x513>
c001f209:	83 ec 0c             	sub    esp,0xc
c001f20c:	68 11 c6 02 c0       	push   0xc002c611
c001f211:	e8 87 3c ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f216:	83 c4 10             	add    esp,0x10
c001f219:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f21c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f221:	74 0d                	je     c001f230 <Vm::faultHandler(regs*)+0x4bb>
c001f223:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f22a:	0f 87 40 01 00 00    	ja     c001f370 <Vm::faultHandler(regs*)+0x5fb>
c001f230:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f233:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f237:	0f b7 db             	movzx  ebx,bx
c001f23a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f23f:	74 20                	je     c001f261 <Vm::faultHandler(regs*)+0x4ec>
c001f241:	ed                   	in     eax,dx
c001f242:	51                   	push   ecx
c001f243:	50                   	push   eax
c001f244:	56                   	push   esi
c001f245:	53                   	push   ebx
c001f246:	e8 15 fb ff ff       	call   c001ed60 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f24b:	83 c4 10             	add    esp,0x10
c001f24e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f251:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f255:	74 05                	je     c001f25c <Vm::faultHandler(regs*)+0x4e7>
c001f257:	83 e8 04             	sub    eax,0x4
c001f25a:	eb 27                	jmp    c001f283 <Vm::faultHandler(regs*)+0x50e>
c001f25c:	83 c0 04             	add    eax,0x4
c001f25f:	eb 22                	jmp    c001f283 <Vm::faultHandler(regs*)+0x50e>
c001f261:	66 ed                	in     ax,dx
c001f263:	0f b7 c0             	movzx  eax,ax
c001f266:	52                   	push   edx
c001f267:	50                   	push   eax
c001f268:	56                   	push   esi
c001f269:	53                   	push   ebx
c001f26a:	e8 db fa ff ff       	call   c001ed4a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f26f:	83 c4 10             	add    esp,0x10
c001f272:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f275:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f279:	74 05                	je     c001f280 <Vm::faultHandler(regs*)+0x50b>
c001f27b:	83 e8 02             	sub    eax,0x2
c001f27e:	eb 03                	jmp    c001f283 <Vm::faultHandler(regs*)+0x50e>
c001f280:	83 c0 02             	add    eax,0x2
c001f283:	25 ff ff 00 00       	and    eax,0xffff
c001f288:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f28b:	e9 b1 02 00 00       	jmp    c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f290:	83 ec 0c             	sub    esp,0xc
c001f293:	4b                   	dec    ebx
c001f294:	68 17 c6 02 c0       	push   0xc002c617
c001f299:	e8 ff 3b ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f29e:	83 c4 10             	add    esp,0x10
c001f2a1:	80 fb 05             	cmp    bl,0x5
c001f2a4:	77 0a                	ja     c001f2b0 <Vm::faultHandler(regs*)+0x53b>
c001f2a6:	0f b6 db             	movzx  ebx,bl
c001f2a9:	ff 24 9d 88 c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3978]
c001f2b0:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f2b4:	eb 1b                	jmp    c001f2d1 <Vm::faultHandler(regs*)+0x55c>
c001f2b6:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f2ba:	eb 15                	jmp    c001f2d1 <Vm::faultHandler(regs*)+0x55c>
c001f2bc:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f2c0:	eb 0f                	jmp    c001f2d1 <Vm::faultHandler(regs*)+0x55c>
c001f2c2:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f2c6:	eb 09                	jmp    c001f2d1 <Vm::faultHandler(regs*)+0x55c>
c001f2c8:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f2cb:	eb 04                	jmp    c001f2d1 <Vm::faultHandler(regs*)+0x55c>
c001f2cd:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f2d1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2d6:	74 0d                	je     c001f2e5 <Vm::faultHandler(regs*)+0x570>
c001f2d8:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f2df:	0f 87 8b 00 00 00    	ja     c001f370 <Vm::faultHandler(regs*)+0x5fb>
c001f2e5:	53                   	push   ebx
c001f2e6:	53                   	push   ebx
c001f2e7:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f2eb:	52                   	push   edx
c001f2ec:	50                   	push   eax
c001f2ed:	e8 0f fa ff ff       	call   c001ed01 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f2f2:	5e                   	pop    esi
c001f2f3:	0f b6 c0             	movzx  eax,al
c001f2f6:	5d                   	pop    ebp
c001f2f7:	50                   	push   eax
c001f2f8:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f2fc:	50                   	push   eax
c001f2fd:	e8 91 f6 ff ff       	call   c001e993 <Vm::outbv(unsigned short, unsigned char)>
c001f302:	83 c4 10             	add    esp,0x10
c001f305:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f308:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f30c:	74 03                	je     c001f311 <Vm::faultHandler(regs*)+0x59c>
c001f30e:	48                   	dec    eax
c001f30f:	eb 01                	jmp    c001f312 <Vm::faultHandler(regs*)+0x59d>
c001f311:	40                   	inc    eax
c001f312:	0f b7 c0             	movzx  eax,ax
c001f315:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f318:	e9 24 02 00 00       	jmp    c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f31d:	83 ec 0c             	sub    esp,0xc
c001f320:	4b                   	dec    ebx
c001f321:	68 17 c6 02 c0       	push   0xc002c617
c001f326:	e8 72 3b ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f32b:	83 c4 10             	add    esp,0x10
c001f32e:	80 fb 05             	cmp    bl,0x5
c001f331:	77 0a                	ja     c001f33d <Vm::faultHandler(regs*)+0x5c8>
c001f333:	0f b6 db             	movzx  ebx,bl
c001f336:	ff 24 9d a0 c6 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3960]
c001f33d:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f341:	eb 1b                	jmp    c001f35e <Vm::faultHandler(regs*)+0x5e9>
c001f343:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f347:	eb 15                	jmp    c001f35e <Vm::faultHandler(regs*)+0x5e9>
c001f349:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f34d:	eb 0f                	jmp    c001f35e <Vm::faultHandler(regs*)+0x5e9>
c001f34f:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f353:	eb 09                	jmp    c001f35e <Vm::faultHandler(regs*)+0x5e9>
c001f355:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f358:	eb 04                	jmp    c001f35e <Vm::faultHandler(regs*)+0x5e9>
c001f35a:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f35e:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f361:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f366:	74 39                	je     c001f3a1 <Vm::faultHandler(regs*)+0x62c>
c001f368:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f36e:	76 31                	jbe    c001f3a1 <Vm::faultHandler(regs*)+0x62c>
c001f370:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f374:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f378:	51                   	push   ecx
c001f379:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f37d:	51                   	push   ecx
c001f37e:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f382:	51                   	push   ecx
c001f383:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f387:	51                   	push   ecx
c001f388:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f38c:	52                   	push   edx
c001f38d:	50                   	push   eax
c001f38e:	50                   	push   eax
c001f38f:	68 e4 c5 02 c0       	push   0xc002c5e4
c001f394:	e8 04 3b ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f399:	83 c4 20             	add    esp,0x20
c001f39c:	e9 fb 01 00 00       	jmp    c001f59c <Vm::faultHandler(regs*)+0x827>
c001f3a1:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f3a4:	0f b7 d3             	movzx  edx,bx
c001f3a7:	81 e6 00 04 00 00    	and    esi,0x400
c001f3ad:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f3b0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3b5:	74 1d                	je     c001f3d4 <Vm::faultHandler(regs*)+0x65f>
c001f3b7:	51                   	push   ecx
c001f3b8:	51                   	push   ecx
c001f3b9:	52                   	push   edx
c001f3ba:	50                   	push   eax
c001f3bb:	e8 64 f9 ff ff       	call   c001ed24 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f3c0:	83 c4 10             	add    esp,0x10
c001f3c3:	89 ea                	mov    edx,ebp
c001f3c5:	ef                   	out    dx,eax
c001f3c6:	85 f6                	test   esi,esi
c001f3c8:	74 05                	je     c001f3cf <Vm::faultHandler(regs*)+0x65a>
c001f3ca:	83 eb 04             	sub    ebx,0x4
c001f3cd:	eb 21                	jmp    c001f3f0 <Vm::faultHandler(regs*)+0x67b>
c001f3cf:	83 c3 04             	add    ebx,0x4
c001f3d2:	eb 1c                	jmp    c001f3f0 <Vm::faultHandler(regs*)+0x67b>
c001f3d4:	51                   	push   ecx
c001f3d5:	51                   	push   ecx
c001f3d6:	52                   	push   edx
c001f3d7:	50                   	push   eax
c001f3d8:	e8 35 f9 ff ff       	call   c001ed12 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f3dd:	83 c4 10             	add    esp,0x10
c001f3e0:	89 ea                	mov    edx,ebp
c001f3e2:	66 ef                	out    dx,ax
c001f3e4:	85 f6                	test   esi,esi
c001f3e6:	74 05                	je     c001f3ed <Vm::faultHandler(regs*)+0x678>
c001f3e8:	83 eb 02             	sub    ebx,0x2
c001f3eb:	eb 03                	jmp    c001f3f0 <Vm::faultHandler(regs*)+0x67b>
c001f3ed:	83 c3 02             	add    ebx,0x2
c001f3f0:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f3f6:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f3f9:	e9 43 01 00 00       	jmp    c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f3fe:	53                   	push   ebx
c001f3ff:	53                   	push   ebx
c001f400:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f404:	50                   	push   eax
c001f405:	68 1d c6 02 c0       	push   0xc002c61d
c001f40a:	e8 8e 3a ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f40f:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f416:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f41a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f41d:	e8 5e f5 ff ff       	call   c001e980 <Vm::inbv(unsigned short)>
c001f422:	0f b6 c0             	movzx  eax,al
c001f425:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f428:	eb 5e                	jmp    c001f488 <Vm::faultHandler(regs*)+0x713>
c001f42a:	51                   	push   ecx
c001f42b:	51                   	push   ecx
c001f42c:	53                   	push   ebx
c001f42d:	68 23 c6 02 c0       	push   0xc002c623
c001f432:	e8 66 3a ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f437:	83 c4 10             	add    esp,0x10
c001f43a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f43f:	74 07                	je     c001f448 <Vm::faultHandler(regs*)+0x6d3>
c001f441:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f445:	ed                   	in     eax,dx
c001f446:	eb 14                	jmp    c001f45c <Vm::faultHandler(regs*)+0x6e7>
c001f448:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f44b:	66 31 db             	xor    bx,bx
c001f44e:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f451:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f455:	66 ed                	in     ax,dx
c001f457:	0f b7 c0             	movzx  eax,ax
c001f45a:	09 d8                	or     eax,ebx
c001f45c:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f45f:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f463:	e9 dc 00 00 00       	jmp    c001f544 <Vm::faultHandler(regs*)+0x7cf>
c001f468:	50                   	push   eax
c001f469:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f46c:	53                   	push   ebx
c001f46d:	68 29 c6 02 c0       	push   0xc002c629
c001f472:	e8 26 3a ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f477:	58                   	pop    eax
c001f478:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f47c:	5a                   	pop    edx
c001f47d:	50                   	push   eax
c001f47e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f482:	50                   	push   eax
c001f483:	e8 0b f5 ff ff       	call   c001e993 <Vm::outbv(unsigned short, unsigned char)>
c001f488:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f48c:	e9 85 00 00 00       	jmp    c001f516 <Vm::faultHandler(regs*)+0x7a1>
c001f491:	50                   	push   eax
c001f492:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f495:	53                   	push   ebx
c001f496:	68 32 c6 02 c0       	push   0xc002c632
c001f49b:	e8 fd 39 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f4a0:	83 c4 10             	add    esp,0x10
c001f4a3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4a7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4ac:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f4af:	74 03                	je     c001f4b4 <Vm::faultHandler(regs*)+0x73f>
c001f4b1:	ef                   	out    dx,eax
c001f4b2:	eb ab                	jmp    c001f45f <Vm::faultHandler(regs*)+0x6ea>
c001f4b4:	66 ef                	out    dx,ax
c001f4b6:	eb a7                	jmp    c001f45f <Vm::faultHandler(regs*)+0x6ea>
c001f4b8:	55                   	push   ebp
c001f4b9:	55                   	push   ebp
c001f4ba:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f4bd:	68 3b c6 02 c0       	push   0xc002c63b
c001f4c2:	e8 d6 39 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f4c7:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f4ce:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f4d2:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4d5:	e8 a6 f4 ff ff       	call   c001e980 <Vm::inbv(unsigned short)>
c001f4da:	0f b6 c0             	movzx  eax,al
c001f4dd:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f4e0:	eb 31                	jmp    c001f513 <Vm::faultHandler(regs*)+0x79e>
c001f4e2:	56                   	push   esi
c001f4e3:	56                   	push   esi
c001f4e4:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f4e7:	68 41 c6 02 c0       	push   0xc002c641
c001f4ec:	e8 ac 39 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f4f1:	83 c4 10             	add    esp,0x10
c001f4f4:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f4f7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4fc:	74 03                	je     c001f501 <Vm::faultHandler(regs*)+0x78c>
c001f4fe:	ed                   	in     eax,dx
c001f4ff:	eb 0d                	jmp    c001f50e <Vm::faultHandler(regs*)+0x799>
c001f501:	66 ed                	in     ax,dx
c001f503:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f506:	0f b7 c0             	movzx  eax,ax
c001f509:	66 31 d2             	xor    dx,dx
c001f50c:	09 d0                	or     eax,edx
c001f50e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f511:	eb 2e                	jmp    c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f513:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f516:	83 c4 10             	add    esp,0x10
c001f519:	eb 29                	jmp    c001f544 <Vm::faultHandler(regs*)+0x7cf>
c001f51b:	50                   	push   eax
c001f51c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f51f:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f522:	68 50 c6 02 c0       	push   0xc002c650
c001f527:	e8 71 39 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f52c:	83 c4 10             	add    esp,0x10
c001f52f:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f532:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f537:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f53a:	74 03                	je     c001f53f <Vm::faultHandler(regs*)+0x7ca>
c001f53c:	ef                   	out    dx,eax
c001f53d:	eb 02                	jmp    c001f541 <Vm::faultHandler(regs*)+0x7cc>
c001f53f:	66 ef                	out    dx,ax
c001f541:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f544:	b0 01                	mov    al,0x1
c001f546:	eb 56                	jmp    c001f59e <Vm::faultHandler(regs*)+0x829>
c001f548:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f54c:	51                   	push   ecx
c001f54d:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f551:	51                   	push   ecx
c001f552:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f556:	51                   	push   ecx
c001f557:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f55b:	51                   	push   ecx
c001f55c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f560:	52                   	push   edx
c001f561:	50                   	push   eax
c001f562:	50                   	push   eax
c001f563:	68 59 c6 02 c0       	push   0xc002c659
c001f568:	e8 30 39 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c001f56d:	83 c4 20             	add    esp,0x20
c001f570:	83 ec 0c             	sub    esp,0xc
c001f573:	6a 60                	push   0x60
c001f575:	e8 06 f4 ff ff       	call   c001e980 <Vm::inbv(unsigned short)>
c001f57a:	83 c4 10             	add    esp,0x10
c001f57d:	3c 1c                	cmp    al,0x1c
c001f57f:	74 04                	je     c001f585 <Vm::faultHandler(regs*)+0x810>
c001f581:	3c 5a                	cmp    al,0x5a
c001f583:	75 eb                	jne    c001f570 <Vm::faultHandler(regs*)+0x7fb>
c001f585:	3c 1c                	cmp    al,0x1c
c001f587:	74 04                	je     c001f58d <Vm::faultHandler(regs*)+0x818>
c001f589:	3c 5a                	cmp    al,0x5a
c001f58b:	75 0f                	jne    c001f59c <Vm::faultHandler(regs*)+0x827>
c001f58d:	83 ec 0c             	sub    esp,0xc
c001f590:	6a 60                	push   0x60
c001f592:	e8 e9 f3 ff ff       	call   c001e980 <Vm::inbv(unsigned short)>
c001f597:	83 c4 10             	add    esp,0x10
c001f59a:	eb e9                	jmp    c001f585 <Vm::faultHandler(regs*)+0x810>
c001f59c:	31 c0                	xor    eax,eax
c001f59e:	83 c4 1c             	add    esp,0x1c
c001f5a1:	5b                   	pop    ebx
c001f5a2:	5e                   	pop    esi
c001f5a3:	5f                   	pop    edi
c001f5a4:	5d                   	pop    ebp
c001f5a5:	c3                   	ret    

c001f5a6 <Vm::fpuInternalTo32(unsigned long long)>:
c001f5a6:	57                   	push   edi
c001f5a7:	56                   	push   esi
c001f5a8:	53                   	push   ebx
c001f5a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b1:	89 d6                	mov    esi,edx
c001f5b3:	89 d7                	mov    edi,edx
c001f5b5:	89 c1                	mov    ecx,eax
c001f5b7:	c1 ef 14             	shr    edi,0x14
c001f5ba:	89 d3                	mov    ebx,edx
c001f5bc:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f5c2:	31 d2                	xor    edx,edx
c001f5c4:	89 f8                	mov    eax,edi
c001f5c6:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f5cc:	bf ff 00 00 00       	mov    edi,0xff
c001f5d1:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f5d6:	83 d2 ff             	adc    edx,0xffffffff
c001f5d9:	39 c7                	cmp    edi,eax
c001f5db:	bf 00 00 00 00       	mov    edi,0x0
c001f5e0:	19 d7                	sbb    edi,edx
c001f5e2:	72 15                	jb     c001f5f9 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f5e4:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f5e8:	c1 e0 17             	shl    eax,0x17
c001f5eb:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f5f1:	09 f1                	or     ecx,esi
c001f5f3:	09 c1                	or     ecx,eax
c001f5f5:	89 cf                	mov    edi,ecx
c001f5f7:	eb 02                	jmp    c001f5fb <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f5f9:	31 ff                	xor    edi,edi
c001f5fb:	89 f8                	mov    eax,edi
c001f5fd:	5b                   	pop    ebx
c001f5fe:	5e                   	pop    esi
c001f5ff:	5f                   	pop    edi
c001f600:	c3                   	ret    

c001f601 <Vm::fpuInternalTo64(unsigned long long)>:
c001f601:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f605:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f609:	c3                   	ret    

c001f60a <Vm::fpu32ToInternal(unsigned int)>:
c001f60a:	57                   	push   edi
c001f60b:	31 ff                	xor    edi,edi
c001f60d:	56                   	push   esi
c001f60e:	53                   	push   ebx
c001f60f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f613:	89 cb                	mov    ebx,ecx
c001f615:	89 ce                	mov    esi,ecx
c001f617:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f61d:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f623:	c1 e9 17             	shr    ecx,0x17
c001f626:	89 f0                	mov    eax,esi
c001f628:	0f b6 d1             	movzx  edx,cl
c001f62b:	81 c2 80 03 00 00    	add    edx,0x380
c001f631:	89 d1                	mov    ecx,edx
c001f633:	89 fa                	mov    edx,edi
c001f635:	c1 e1 14             	shl    ecx,0x14
c001f638:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f63c:	c1 e0 1d             	shl    eax,0x1d
c001f63f:	89 d7                	mov    edi,edx
c001f641:	89 c6                	mov    esi,eax
c001f643:	89 ca                	mov    edx,ecx
c001f645:	89 f0                	mov    eax,esi
c001f647:	09 fa                	or     edx,edi
c001f649:	09 da                	or     edx,ebx
c001f64b:	5b                   	pop    ebx
c001f64c:	5e                   	pop    esi
c001f64d:	5f                   	pop    edi
c001f64e:	c3                   	ret    

c001f64f <Vm::fpu64ToInternal(unsigned long long)>:
c001f64f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f653:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f657:	c3                   	ret    

c001f658 <Vm::fpuFloatToLong(unsigned long long)>:
c001f658:	57                   	push   edi
c001f659:	31 c0                	xor    eax,eax
c001f65b:	56                   	push   esi
c001f65c:	31 d2                	xor    edx,edx
c001f65e:	53                   	push   ebx
c001f65f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f663:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f667:	89 d9                	mov    ecx,ebx
c001f669:	c1 e9 14             	shr    ecx,0x14
c001f66c:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f672:	89 cf                	mov    edi,ecx
c001f674:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f67a:	78 33                	js     c001f6af <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f67c:	89 d9                	mov    ecx,ebx
c001f67e:	89 f0                	mov    eax,esi
c001f680:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f686:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f68c:	89 ca                	mov    edx,ecx
c001f68e:	b9 34 00 00 00       	mov    ecx,0x34
c001f693:	29 f9                	sub    ecx,edi
c001f695:	0f ad d0             	shrd   eax,edx,cl
c001f698:	d3 fa                	sar    edx,cl
c001f69a:	f6 c1 20             	test   cl,0x20
c001f69d:	74 05                	je     c001f6a4 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f69f:	89 d0                	mov    eax,edx
c001f6a1:	c1 fa 1f             	sar    edx,0x1f
c001f6a4:	85 db                	test   ebx,ebx
c001f6a6:	79 07                	jns    c001f6af <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f6a8:	f7 d8                	neg    eax
c001f6aa:	83 d2 00             	adc    edx,0x0
c001f6ad:	f7 da                	neg    edx
c001f6af:	5b                   	pop    ebx
c001f6b0:	5e                   	pop    esi
c001f6b1:	5f                   	pop    edi
c001f6b2:	c3                   	ret    

c001f6b3 <Vm::fpuULongToFloat(unsigned long long)>:
c001f6b3:	57                   	push   edi
c001f6b4:	31 c9                	xor    ecx,ecx
c001f6b6:	56                   	push   esi
c001f6b7:	53                   	push   ebx
c001f6b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f6bc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f6c0:	0f ba e7 14          	bt     edi,0x14
c001f6c4:	72 07                	jb     c001f6cd <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f6c6:	01 f6                	add    esi,esi
c001f6c8:	11 ff                	adc    edi,edi
c001f6ca:	41                   	inc    ecx
c001f6cb:	eb f3                	jmp    c001f6c0 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f6cd:	89 fa                	mov    edx,edi
c001f6cf:	89 f0                	mov    eax,esi
c001f6d1:	bb 33 04 00 00       	mov    ebx,0x433
c001f6d6:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f6dc:	29 cb                	sub    ebx,ecx
c001f6de:	89 d9                	mov    ecx,ebx
c001f6e0:	5b                   	pop    ebx
c001f6e1:	c1 e1 14             	shl    ecx,0x14
c001f6e4:	5e                   	pop    esi
c001f6e5:	09 ca                	or     edx,ecx
c001f6e7:	5f                   	pop    edi
c001f6e8:	c3                   	ret    

c001f6e9 <Vm::fpuLongToFloat(long long)>:
c001f6e9:	56                   	push   esi
c001f6ea:	31 c0                	xor    eax,eax
c001f6ec:	53                   	push   ebx
c001f6ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f6f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f6f5:	39 c8                	cmp    eax,ecx
c001f6f7:	19 d8                	sbb    eax,ebx
c001f6f9:	7d 04                	jge    c001f6ff <Vm::fpuLongToFloat(long long)+0x16>
c001f6fb:	31 f6                	xor    esi,esi
c001f6fd:	eb 0c                	jmp    c001f70b <Vm::fpuLongToFloat(long long)+0x22>
c001f6ff:	f7 d9                	neg    ecx
c001f701:	be 01 00 00 00       	mov    esi,0x1
c001f706:	83 d3 00             	adc    ebx,0x0
c001f709:	f7 db                	neg    ebx
c001f70b:	31 c0                	xor    eax,eax
c001f70d:	0f ba e3 14          	bt     ebx,0x14
c001f711:	72 07                	jb     c001f71a <Vm::fpuLongToFloat(long long)+0x31>
c001f713:	01 c9                	add    ecx,ecx
c001f715:	11 db                	adc    ebx,ebx
c001f717:	40                   	inc    eax
c001f718:	eb f3                	jmp    c001f70d <Vm::fpuLongToFloat(long long)+0x24>
c001f71a:	ba 33 04 00 00       	mov    edx,0x433
c001f71f:	29 c2                	sub    edx,eax
c001f721:	89 c8                	mov    eax,ecx
c001f723:	c1 e2 14             	shl    edx,0x14
c001f726:	89 d9                	mov    ecx,ebx
c001f728:	89 f3                	mov    ebx,esi
c001f72a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f730:	09 ca                	or     edx,ecx
c001f732:	84 db                	test   bl,bl
c001f734:	74 06                	je     c001f73c <Vm::fpuLongToFloat(long long)+0x53>
c001f736:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f73c:	5b                   	pop    ebx
c001f73d:	5e                   	pop    esi
c001f73e:	c3                   	ret    

c001f73f <Vm::fpuGet0()>:
c001f73f:	31 c0                	xor    eax,eax
c001f741:	31 d2                	xor    edx,edx
c001f743:	c3                   	ret    

c001f744 <Vm::fpuGet1()>:
c001f744:	b8 01 00 00 00       	mov    eax,0x1
c001f749:	31 d2                	xor    edx,edx
c001f74b:	c3                   	ret    

c001f74c <Vm::fpuGetPi()>:
c001f74c:	b8 03 00 00 00       	mov    eax,0x3
c001f751:	31 d2                	xor    edx,edx
c001f753:	c3                   	ret    

c001f754 <Vm::fpuGetLog2E()>:
c001f754:	83 ec 18             	sub    esp,0x18
c001f757:	68 b8 c6 02 c0       	push   0xc002c6b8
c001f75c:	e8 28 ae ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001f761:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f766:	31 d2                	xor    edx,edx
c001f768:	83 c4 1c             	add    esp,0x1c
c001f76b:	c3                   	ret    

c001f76c <Vm::fpuGetLogE2()>:
c001f76c:	83 ec 18             	sub    esp,0x18
c001f76f:	68 c4 c6 02 c0       	push   0xc002c6c4
c001f774:	e8 10 ae ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001f779:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f77e:	31 d2                	xor    edx,edx
c001f780:	83 c4 1c             	add    esp,0x1c
c001f783:	c3                   	ret    

c001f784 <Vm::fpuGetLog210()>:
c001f784:	83 ec 18             	sub    esp,0x18
c001f787:	68 d0 c6 02 c0       	push   0xc002c6d0
c001f78c:	e8 f8 ad ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001f791:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f796:	31 d2                	xor    edx,edx
c001f798:	83 c4 1c             	add    esp,0x1c
c001f79b:	c3                   	ret    

c001f79c <Vm::fpuGetLog102()>:
c001f79c:	83 ec 18             	sub    esp,0x18
c001f79f:	68 dd c6 02 c0       	push   0xc002c6dd
c001f7a4:	e8 e0 ad ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001f7a9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f7ae:	31 d2                	xor    edx,edx
c001f7b0:	83 c4 1c             	add    esp,0x1c
c001f7b3:	c3                   	ret    

c001f7b4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f7b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7b8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7c0:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f7c4:	0f 92 c0             	setb   al
c001f7c7:	c3                   	ret    

c001f7c8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f7c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d0:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f7d4:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f7d8:	09 c2                	or     edx,eax
c001f7da:	0f 94 c0             	sete   al
c001f7dd:	c3                   	ret    

c001f7de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f7de:	57                   	push   edi
c001f7df:	56                   	push   esi
c001f7e0:	53                   	push   ebx
c001f7e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f7e5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7e9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f7ed:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f7f1:	57                   	push   edi
c001f7f2:	56                   	push   esi
c001f7f3:	53                   	push   ebx
c001f7f4:	51                   	push   ecx
c001f7f5:	e8 ce ff ff ff       	call   c001f7c8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f7fa:	83 c4 10             	add    esp,0x10
c001f7fd:	88 c2                	mov    dl,al
c001f7ff:	31 c0                	xor    eax,eax
c001f801:	84 d2                	test   dl,dl
c001f803:	75 0c                	jne    c001f811 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f805:	57                   	push   edi
c001f806:	56                   	push   esi
c001f807:	53                   	push   ebx
c001f808:	51                   	push   ecx
c001f809:	e8 a6 ff ff ff       	call   c001f7b4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f80e:	83 c4 10             	add    esp,0x10
c001f811:	83 e0 01             	and    eax,0x1
c001f814:	5b                   	pop    ebx
c001f815:	88 c1                	mov    cl,al
c001f817:	83 e2 01             	and    edx,0x1
c001f81a:	a0 41 19 03 c0       	mov    al,ds:0xc0031941
c001f81f:	c1 e2 06             	shl    edx,0x6
c001f822:	83 e0 ba             	and    eax,0xffffffba
c001f825:	5e                   	pop    esi
c001f826:	09 c8                	or     eax,ecx
c001f828:	5f                   	pop    edi
c001f829:	09 d0                	or     eax,edx
c001f82b:	a2 41 19 03 c0       	mov    ds:0xc0031941,al
c001f830:	c3                   	ret    

c001f831 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f831:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f835:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f839:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f83d:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f841:	c3                   	ret    

c001f842 <Vm::fpuAbs(unsigned long long)>:
c001f842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f846:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f84a:	c3                   	ret    

c001f84b <Vm::fpuChs(unsigned long long)>:
c001f84b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f84f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f853:	f7 d8                	neg    eax
c001f855:	83 d2 00             	adc    edx,0x0
c001f858:	f7 da                	neg    edx
c001f85a:	c3                   	ret    

c001f85b <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f85b:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f85f:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f864:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f868:	eb c7                	jmp    c001f831 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f86a <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f86a:	53                   	push   ebx
c001f86b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f86f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f873:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f877:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f87b:	0f af ca             	imul   ecx,edx
c001f87e:	0f af d8             	imul   ebx,eax
c001f881:	f7 e2                	mul    edx
c001f883:	01 d9                	add    ecx,ebx
c001f885:	5b                   	pop    ebx
c001f886:	01 ca                	add    edx,ecx
c001f888:	c3                   	ret    

c001f889 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f889:	83 ec 0c             	sub    esp,0xc
c001f88c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f89c:	e8 9b 70 00 00       	call   c002693c <__udivdi3>
c001f8a1:	83 c4 1c             	add    esp,0x1c
c001f8a4:	c3                   	ret    

c001f8a5 <Vm::fpuSquare(unsigned long long)>:
c001f8a5:	50                   	push   eax
c001f8a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8ae:	52                   	push   edx
c001f8af:	50                   	push   eax
c001f8b0:	52                   	push   edx
c001f8b1:	50                   	push   eax
c001f8b2:	e8 b3 ff ff ff       	call   c001f86a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8b7:	83 c4 14             	add    esp,0x14
c001f8ba:	c3                   	ret    

c001f8bb <Vm::fpuGetReg(int)>:
c001f8bb:	83 ec 0c             	sub    esp,0xc
c001f8be:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f8c3:	76 10                	jbe    c001f8d5 <Vm::fpuGetReg(int)+0x1a>
c001f8c5:	83 ec 0c             	sub    esp,0xc
c001f8c8:	68 ea c6 02 c0       	push   0xc002c6ea
c001f8cd:	e8 b7 ac ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001f8d2:	83 c4 10             	add    esp,0x10
c001f8d5:	a0 41 19 03 c0       	mov    al,ds:0xc0031941
c001f8da:	b9 08 00 00 00       	mov    ecx,0x8
c001f8df:	c0 e8 03             	shr    al,0x3
c001f8e2:	83 e0 07             	and    eax,0x7
c001f8e5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f8e9:	99                   	cdq    
c001f8ea:	f7 f9                	idiv   ecx
c001f8ec:	8b 04 d5 44 19 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce6bc]
c001f8f3:	8b 14 d5 48 19 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce6b8]
c001f8fa:	83 c4 0c             	add    esp,0xc
c001f8fd:	c3                   	ret    

c001f8fe <Vm::fpuSetReg(int, unsigned long long)>:
c001f8fe:	57                   	push   edi
c001f8ff:	56                   	push   esi
c001f900:	52                   	push   edx
c001f901:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f905:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f909:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f90e:	76 10                	jbe    c001f920 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f910:	83 ec 0c             	sub    esp,0xc
c001f913:	68 fd c6 02 c0       	push   0xc002c6fd
c001f918:	e8 6c ac ff ff       	call   c001a589 <Krnl::panic(char const*)>
c001f91d:	83 c4 10             	add    esp,0x10
c001f920:	a0 41 19 03 c0       	mov    al,ds:0xc0031941
c001f925:	b9 08 00 00 00       	mov    ecx,0x8
c001f92a:	c0 e8 03             	shr    al,0x3
c001f92d:	83 e0 07             	and    eax,0x7
c001f930:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f934:	99                   	cdq    
c001f935:	f7 f9                	idiv   ecx
c001f937:	89 34 d5 44 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce6bc],esi
c001f93e:	89 3c d5 48 19 03 c0 	mov    DWORD PTR [edx*8-0x3ffce6b8],edi
c001f945:	58                   	pop    eax
c001f946:	5e                   	pop    esi
c001f947:	5f                   	pop    edi
c001f948:	c3                   	ret    

c001f949 <Vm::fpuPush(unsigned long long)>:
c001f949:	a0 41 19 03 c0       	mov    al,ds:0xc0031941
c001f94e:	c0 e8 03             	shr    al,0x3
c001f951:	83 e0 07             	and    eax,0x7
c001f954:	83 c0 07             	add    eax,0x7
c001f957:	88 c2                	mov    dl,al
c001f959:	83 e0 07             	and    eax,0x7
c001f95c:	83 e2 07             	and    edx,0x7
c001f95f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f966:	8a 15 41 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031941
c001f96c:	83 e2 c7             	and    edx,0xffffffc7
c001f96f:	09 ca                	or     edx,ecx
c001f971:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f975:	88 15 41 19 03 c0    	mov    BYTE PTR ds:0xc0031941,dl
c001f97b:	89 0c c5 48 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce6b8],ecx
c001f982:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f986:	89 14 c5 44 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce6bc],edx
c001f98d:	a1 84 19 03 c0       	mov    eax,ds:0xc0031984
c001f992:	83 f8 08             	cmp    eax,0x8
c001f995:	75 08                	jne    c001f99f <Vm::fpuPush(unsigned long long)+0x56>
c001f997:	80 0d 40 19 03 c0 40 	or     BYTE PTR ds:0xc0031940,0x40
c001f99e:	c3                   	ret    
c001f99f:	40                   	inc    eax
c001f9a0:	a3 84 19 03 c0       	mov    ds:0xc0031984,eax
c001f9a5:	c3                   	ret    

c001f9a6 <Vm::fpuPop()>:
c001f9a6:	8a 0d 41 19 03 c0    	mov    cl,BYTE PTR ds:0xc0031941
c001f9ac:	53                   	push   ebx
c001f9ad:	c0 e9 03             	shr    cl,0x3
c001f9b0:	8a 1d 41 19 03 c0    	mov    bl,BYTE PTR ds:0xc0031941
c001f9b6:	83 e1 07             	and    ecx,0x7
c001f9b9:	83 e3 c7             	and    ebx,0xffffffc7
c001f9bc:	8b 04 cd 44 19 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce6bc]
c001f9c3:	8b 14 cd 48 19 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce6b8]
c001f9ca:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f9d1:	83 e1 38             	and    ecx,0x38
c001f9d4:	09 d9                	or     ecx,ebx
c001f9d6:	88 0d 41 19 03 c0    	mov    BYTE PTR ds:0xc0031941,cl
c001f9dc:	8b 0d 84 19 03 c0    	mov    ecx,DWORD PTR ds:0xc0031984
c001f9e2:	85 c9                	test   ecx,ecx
c001f9e4:	74 09                	je     c001f9ef <Vm::fpuPop()+0x49>
c001f9e6:	49                   	dec    ecx
c001f9e7:	89 0d 84 19 03 c0    	mov    DWORD PTR ds:0xc0031984,ecx
c001f9ed:	eb 07                	jmp    c001f9f6 <Vm::fpuPop()+0x50>
c001f9ef:	80 0d 40 19 03 c0 40 	or     BYTE PTR ds:0xc0031940,0x40
c001f9f6:	5b                   	pop    ebx
c001f9f7:	c3                   	ret    

c001f9f8 <Vm::x87Handler(regs*)>:
c001f9f8:	55                   	push   ebp
c001f9f9:	57                   	push   edi
c001f9fa:	56                   	push   esi
c001f9fb:	53                   	push   ebx
c001f9fc:	83 ec 1c             	sub    esp,0x1c
c001f9ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fa03:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fa08:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fa0b:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fa13:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fa17:	50                   	push   eax
c001fa18:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fa1c:	50                   	push   eax
c001fa1d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fa21:	50                   	push   eax
c001fa22:	53                   	push   ebx
c001fa23:	e8 28 a2 ff ff       	call   c0019c50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fa28:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fa2b:	83 c4 10             	add    esp,0x10
c001fa2e:	89 c6                	mov    esi,eax
c001fa30:	80 fa d9             	cmp    dl,0xd9
c001fa33:	0f 85 52 01 00 00    	jne    c001fb8b <Vm::x87Handler(regs*)+0x193>
c001fa39:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa3d:	8d 50 20             	lea    edx,[eax+0x20]
c001fa40:	80 fa 0e             	cmp    dl,0xe
c001fa43:	0f 87 86 00 00 00    	ja     c001facf <Vm::x87Handler(regs*)+0xd7>
c001fa49:	0f b6 d2             	movzx  edx,dl
c001fa4c:	ff 24 95 10 c7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd38f0]
c001fa53:	e8 e7 fc ff ff       	call   c001f73f <Vm::fpuGet0()>
c001fa58:	eb 05                	jmp    c001fa5f <Vm::x87Handler(regs*)+0x67>
c001fa5a:	e8 e5 fc ff ff       	call   c001f744 <Vm::fpuGet1()>
c001fa5f:	57                   	push   edi
c001fa60:	57                   	push   edi
c001fa61:	52                   	push   edx
c001fa62:	50                   	push   eax
c001fa63:	e8 e1 fe ff ff       	call   c001f949 <Vm::fpuPush(unsigned long long)>
c001fa68:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa6c:	83 c4 10             	add    esp,0x10
c001fa6f:	b0 01                	mov    al,0x1
c001fa71:	e9 e3 09 00 00       	jmp    c0020459 <Vm::x87Handler(regs*)+0xa61>
c001fa76:	83 ec 0c             	sub    esp,0xc
c001fa79:	6a 00                	push   0x0
c001fa7b:	e8 3b fe ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fa80:	59                   	pop    ecx
c001fa81:	5e                   	pop    esi
c001fa82:	52                   	push   edx
c001fa83:	50                   	push   eax
c001fa84:	e8 c2 fd ff ff       	call   c001f84b <Vm::fpuChs(unsigned long long)>
c001fa89:	eb 13                	jmp    c001fa9e <Vm::x87Handler(regs*)+0xa6>
c001fa8b:	83 ec 0c             	sub    esp,0xc
c001fa8e:	6a 00                	push   0x0
c001fa90:	e8 26 fe ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fa95:	5f                   	pop    edi
c001fa96:	5d                   	pop    ebp
c001fa97:	52                   	push   edx
c001fa98:	50                   	push   eax
c001fa99:	e8 a4 fd ff ff       	call   c001f842 <Vm::fpuAbs(unsigned long long)>
c001fa9e:	83 c4 0c             	add    esp,0xc
c001faa1:	52                   	push   edx
c001faa2:	50                   	push   eax
c001faa3:	6a 00                	push   0x0
c001faa5:	e8 54 fe ff ff       	call   c001f8fe <Vm::fpuSetReg(int, unsigned long long)>
c001faaa:	eb bc                	jmp    c001fa68 <Vm::x87Handler(regs*)+0x70>
c001faac:	e8 d3 fc ff ff       	call   c001f784 <Vm::fpuGetLog210()>
c001fab1:	eb ac                	jmp    c001fa5f <Vm::x87Handler(regs*)+0x67>
c001fab3:	e8 9c fc ff ff       	call   c001f754 <Vm::fpuGetLog2E()>
c001fab8:	eb a5                	jmp    c001fa5f <Vm::x87Handler(regs*)+0x67>
c001faba:	e8 8d fc ff ff       	call   c001f74c <Vm::fpuGetPi()>
c001fabf:	eb 9e                	jmp    c001fa5f <Vm::x87Handler(regs*)+0x67>
c001fac1:	e8 d6 fc ff ff       	call   c001f79c <Vm::fpuGetLog102()>
c001fac6:	eb 97                	jmp    c001fa5f <Vm::x87Handler(regs*)+0x67>
c001fac8:	e8 9f fc ff ff       	call   c001f76c <Vm::fpuGetLogE2()>
c001facd:	eb 90                	jmp    c001fa5f <Vm::x87Handler(regs*)+0x67>
c001facf:	8d 50 40             	lea    edx,[eax+0x40]
c001fad2:	80 fa 07             	cmp    dl,0x7
c001fad5:	77 15                	ja     c001faec <Vm::x87Handler(regs*)+0xf4>
c001fad7:	83 ec 0c             	sub    esp,0xc
c001fada:	2d c0 00 00 00       	sub    eax,0xc0
c001fadf:	50                   	push   eax
c001fae0:	e8 d6 fd ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fae5:	59                   	pop    ecx
c001fae6:	5e                   	pop    esi
c001fae7:	e9 75 ff ff ff       	jmp    c001fa61 <Vm::x87Handler(regs*)+0x69>
c001faec:	8d 50 38             	lea    edx,[eax+0x38]
c001faef:	80 fa 07             	cmp    dl,0x7
c001faf2:	77 3c                	ja     c001fb30 <Vm::x87Handler(regs*)+0x138>
c001faf4:	83 ec 0c             	sub    esp,0xc
c001faf7:	2d c8 00 00 00       	sub    eax,0xc8
c001fafc:	50                   	push   eax
c001fafd:	e8 b9 fd ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fb02:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb09:	89 c6                	mov    esi,eax
c001fb0b:	89 d7                	mov    edi,edx
c001fb0d:	e8 a9 fd ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fb12:	83 c4 0c             	add    esp,0xc
c001fb15:	52                   	push   edx
c001fb16:	50                   	push   eax
c001fb17:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb1b:	2d c8 00 00 00       	sub    eax,0xc8
c001fb20:	50                   	push   eax
c001fb21:	e8 d8 fd ff ff       	call   c001f8fe <Vm::fpuSetReg(int, unsigned long long)>
c001fb26:	83 c4 0c             	add    esp,0xc
c001fb29:	57                   	push   edi
c001fb2a:	56                   	push   esi
c001fb2b:	e9 73 ff ff ff       	jmp    c001faa3 <Vm::x87Handler(regs*)+0xab>
c001fb30:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb34:	84 d2                	test   dl,dl
c001fb36:	75 0f                	jne    c001fb47 <Vm::x87Handler(regs*)+0x14f>
c001fb38:	83 ec 0c             	sub    esp,0xc
c001fb3b:	ff 36                	push   DWORD PTR [esi]
c001fb3d:	e8 c8 fa ff ff       	call   c001f60a <Vm::fpu32ToInternal(unsigned int)>
c001fb42:	e9 bf 00 00 00       	jmp    c001fc06 <Vm::x87Handler(regs*)+0x20e>
c001fb47:	80 fa 03             	cmp    dl,0x3
c001fb4a:	75 13                	jne    c001fb5f <Vm::x87Handler(regs*)+0x167>
c001fb4c:	e8 55 fe ff ff       	call   c001f9a6 <Vm::fpuPop()>
c001fb51:	55                   	push   ebp
c001fb52:	55                   	push   ebp
c001fb53:	52                   	push   edx
c001fb54:	50                   	push   eax
c001fb55:	e8 4c fa ff ff       	call   c001f5a6 <Vm::fpuInternalTo32(unsigned long long)>
c001fb5a:	e9 88 00 00 00       	jmp    c001fbe7 <Vm::x87Handler(regs*)+0x1ef>
c001fb5f:	80 fa 05             	cmp    dl,0x5
c001fb62:	75 0e                	jne    c001fb72 <Vm::x87Handler(regs*)+0x17a>
c001fb64:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fb67:	66 a3 42 19 03 c0    	mov    ds:0xc0031942,ax
c001fb6d:	e9 df 00 00 00       	jmp    c001fc51 <Vm::x87Handler(regs*)+0x259>
c001fb72:	31 c0                	xor    eax,eax
c001fb74:	80 fa 07             	cmp    dl,0x7
c001fb77:	0f 85 dc 08 00 00    	jne    c0020459 <Vm::x87Handler(regs*)+0xa61>
c001fb7d:	66 a1 42 19 03 c0    	mov    ax,ds:0xc0031942
c001fb83:	66 89 06             	mov    WORD PTR [esi],ax
c001fb86:	e9 c6 00 00 00       	jmp    c001fc51 <Vm::x87Handler(regs*)+0x259>
c001fb8b:	80 fa d8             	cmp    dl,0xd8
c001fb8e:	0f 84 c9 00 00 00    	je     c001fc5d <Vm::x87Handler(regs*)+0x265>
c001fb94:	80 fa dc             	cmp    dl,0xdc
c001fb97:	0f 84 0d 02 00 00    	je     c001fdaa <Vm::x87Handler(regs*)+0x3b2>
c001fb9d:	80 fa de             	cmp    dl,0xde
c001fba0:	0f 84 cd 02 00 00    	je     c001fe73 <Vm::x87Handler(regs*)+0x47b>
c001fba6:	80 fa dd             	cmp    dl,0xdd
c001fba9:	0f 84 5f 04 00 00    	je     c002000e <Vm::x87Handler(regs*)+0x616>
c001fbaf:	80 fa da             	cmp    dl,0xda
c001fbb2:	0f 84 24 05 00 00    	je     c00200dc <Vm::x87Handler(regs*)+0x6e4>
c001fbb8:	80 fa df             	cmp    dl,0xdf
c001fbbb:	0f 84 68 05 00 00    	je     c0020129 <Vm::x87Handler(regs*)+0x731>
c001fbc1:	31 c0                	xor    eax,eax
c001fbc3:	80 fa db             	cmp    dl,0xdb
c001fbc6:	0f 85 8d 08 00 00    	jne    c0020459 <Vm::x87Handler(regs*)+0xa61>
c001fbcc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbd0:	80 fa 03             	cmp    dl,0x3
c001fbd3:	0f 85 70 06 00 00    	jne    c0020249 <Vm::x87Handler(regs*)+0x851>
c001fbd9:	e8 c8 fd ff ff       	call   c001f9a6 <Vm::fpuPop()>
c001fbde:	55                   	push   ebp
c001fbdf:	55                   	push   ebp
c001fbe0:	52                   	push   edx
c001fbe1:	50                   	push   eax
c001fbe2:	e8 71 fa ff ff       	call   c001f658 <Vm::fpuFloatToLong(unsigned long long)>
c001fbe7:	83 c4 10             	add    esp,0x10
c001fbea:	89 06                	mov    DWORD PTR [esi],eax
c001fbec:	eb 63                	jmp    c001fc51 <Vm::x87Handler(regs*)+0x259>
c001fbee:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbf2:	84 d2                	test   dl,dl
c001fbf4:	0f 85 e6 05 00 00    	jne    c00201e0 <Vm::x87Handler(regs*)+0x7e8>
c001fbfa:	57                   	push   edi
c001fbfb:	57                   	push   edi
c001fbfc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbff:	ff 36                	push   DWORD PTR [esi]
c001fc01:	e8 49 fa ff ff       	call   c001f64f <Vm::fpu64ToInternal(unsigned long long)>
c001fc06:	5e                   	pop    esi
c001fc07:	5f                   	pop    edi
c001fc08:	52                   	push   edx
c001fc09:	50                   	push   eax
c001fc0a:	e8 3a fd ff ff       	call   c001f949 <Vm::fpuPush(unsigned long long)>
c001fc0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fc13:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc16:	e9 51 fe ff ff       	jmp    c001fa6c <Vm::x87Handler(regs*)+0x74>
c001fc1b:	80 fa 03             	cmp    dl,0x3
c001fc1e:	0f 85 d7 06 00 00    	jne    c00202fb <Vm::x87Handler(regs*)+0x903>
c001fc24:	57                   	push   edi
c001fc25:	57                   	push   edi
c001fc26:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc29:	ff 36                	push   DWORD PTR [esi]
c001fc2b:	e8 1f fa ff ff       	call   c001f64f <Vm::fpu64ToInternal(unsigned long long)>
c001fc30:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc37:	89 c6                	mov    esi,eax
c001fc39:	89 d7                	mov    edi,edx
c001fc3b:	e8 7b fc ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fc40:	57                   	push   edi
c001fc41:	56                   	push   esi
c001fc42:	52                   	push   edx
c001fc43:	50                   	push   eax
c001fc44:	e8 95 fb ff ff       	call   c001f7de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc49:	83 c4 20             	add    esp,0x20
c001fc4c:	e8 55 fd ff ff       	call   c001f9a6 <Vm::fpuPop()>
c001fc51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc55:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc58:	e9 12 fe ff ff       	jmp    c001fa6f <Vm::x87Handler(regs*)+0x77>
c001fc5d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc61:	8d 50 40             	lea    edx,[eax+0x40]
c001fc64:	80 fa 07             	cmp    dl,0x7
c001fc67:	77 29                	ja     c001fc92 <Vm::x87Handler(regs*)+0x29a>
c001fc69:	83 ec 0c             	sub    esp,0xc
c001fc6c:	2d c0 00 00 00       	sub    eax,0xc0
c001fc71:	50                   	push   eax
c001fc72:	e8 44 fc ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fc77:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc7e:	89 c6                	mov    esi,eax
c001fc80:	89 d7                	mov    edi,edx
c001fc82:	e8 34 fc ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fc87:	57                   	push   edi
c001fc88:	56                   	push   esi
c001fc89:	52                   	push   edx
c001fc8a:	50                   	push   eax
c001fc8b:	e8 a1 fb ff ff       	call   c001f831 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc90:	eb 2f                	jmp    c001fcc1 <Vm::x87Handler(regs*)+0x2c9>
c001fc92:	8d 50 38             	lea    edx,[eax+0x38]
c001fc95:	80 fa 07             	cmp    dl,0x7
c001fc98:	77 2f                	ja     c001fcc9 <Vm::x87Handler(regs*)+0x2d1>
c001fc9a:	83 ec 0c             	sub    esp,0xc
c001fc9d:	2d c8 00 00 00       	sub    eax,0xc8
c001fca2:	50                   	push   eax
c001fca3:	e8 13 fc ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fca8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcaf:	89 c6                	mov    esi,eax
c001fcb1:	89 d7                	mov    edi,edx
c001fcb3:	e8 03 fc ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fcb8:	57                   	push   edi
c001fcb9:	56                   	push   esi
c001fcba:	52                   	push   edx
c001fcbb:	50                   	push   eax
c001fcbc:	e8 a9 fb ff ff       	call   c001f86a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fcc1:	83 c4 1c             	add    esp,0x1c
c001fcc4:	e9 d8 fd ff ff       	jmp    c001faa1 <Vm::x87Handler(regs*)+0xa9>
c001fcc9:	8d 50 30             	lea    edx,[eax+0x30]
c001fccc:	80 fa 07             	cmp    dl,0x7
c001fccf:	77 0d                	ja     c001fcde <Vm::x87Handler(regs*)+0x2e6>
c001fcd1:	83 ec 0c             	sub    esp,0xc
c001fcd4:	2d d0 00 00 00       	sub    eax,0xd0
c001fcd9:	e9 99 03 00 00       	jmp    c0020077 <Vm::x87Handler(regs*)+0x67f>
c001fcde:	8d 50 28             	lea    edx,[eax+0x28]
c001fce1:	80 fa 07             	cmp    dl,0x7
c001fce4:	77 0d                	ja     c001fcf3 <Vm::x87Handler(regs*)+0x2fb>
c001fce6:	83 ec 0c             	sub    esp,0xc
c001fce9:	2d d8 00 00 00       	sub    eax,0xd8
c001fcee:	e9 c0 03 00 00       	jmp    c00200b3 <Vm::x87Handler(regs*)+0x6bb>
c001fcf3:	8d 50 20             	lea    edx,[eax+0x20]
c001fcf6:	80 fa 07             	cmp    dl,0x7
c001fcf9:	77 1b                	ja     c001fd16 <Vm::x87Handler(regs*)+0x31e>
c001fcfb:	83 ec 0c             	sub    esp,0xc
c001fcfe:	2d e0 00 00 00       	sub    eax,0xe0
c001fd03:	50                   	push   eax
c001fd04:	e8 b2 fb ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fd09:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd10:	89 c6                	mov    esi,eax
c001fd12:	89 d7                	mov    edi,edx
c001fd14:	eb 22                	jmp    c001fd38 <Vm::x87Handler(regs*)+0x340>
c001fd16:	8d 50 18             	lea    edx,[eax+0x18]
c001fd19:	80 fa 07             	cmp    dl,0x7
c001fd1c:	77 2d                	ja     c001fd4b <Vm::x87Handler(regs*)+0x353>
c001fd1e:	83 ec 0c             	sub    esp,0xc
c001fd21:	6a 00                	push   0x0
c001fd23:	e8 93 fb ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fd28:	89 c6                	mov    esi,eax
c001fd2a:	89 d7                	mov    edi,edx
c001fd2c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd30:	2d e8 00 00 00       	sub    eax,0xe8
c001fd35:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd38:	e8 7e fb ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fd3d:	57                   	push   edi
c001fd3e:	56                   	push   esi
c001fd3f:	52                   	push   edx
c001fd40:	50                   	push   eax
c001fd41:	e8 15 fb ff ff       	call   c001f85b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd46:	e9 76 ff ff ff       	jmp    c001fcc1 <Vm::x87Handler(regs*)+0x2c9>
c001fd4b:	8d 50 10             	lea    edx,[eax+0x10]
c001fd4e:	80 fa 07             	cmp    dl,0x7
c001fd51:	77 1b                	ja     c001fd6e <Vm::x87Handler(regs*)+0x376>
c001fd53:	83 ec 0c             	sub    esp,0xc
c001fd56:	2d f0 00 00 00       	sub    eax,0xf0
c001fd5b:	50                   	push   eax
c001fd5c:	e8 5a fb ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fd61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd68:	89 c6                	mov    esi,eax
c001fd6a:	89 d7                	mov    edi,edx
c001fd6c:	eb 22                	jmp    c001fd90 <Vm::x87Handler(regs*)+0x398>
c001fd6e:	3c f7                	cmp    al,0xf7
c001fd70:	0f 86 d1 03 00 00    	jbe    c0020147 <Vm::x87Handler(regs*)+0x74f>
c001fd76:	83 ec 0c             	sub    esp,0xc
c001fd79:	6a 00                	push   0x0
c001fd7b:	e8 3b fb ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fd80:	89 c6                	mov    esi,eax
c001fd82:	89 d7                	mov    edi,edx
c001fd84:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd88:	2d f8 00 00 00       	sub    eax,0xf8
c001fd8d:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd90:	e8 26 fb ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fd95:	57                   	push   edi
c001fd96:	56                   	push   esi
c001fd97:	52                   	push   edx
c001fd98:	50                   	push   eax
c001fd99:	e8 eb fa ff ff       	call   c001f889 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd9e:	83 c4 1c             	add    esp,0x1c
c001fda1:	52                   	push   edx
c001fda2:	50                   	push   eax
c001fda3:	6a 00                	push   0x0
c001fda5:	e9 51 02 00 00       	jmp    c001fffb <Vm::x87Handler(regs*)+0x603>
c001fdaa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdae:	8d 50 40             	lea    edx,[eax+0x40]
c001fdb1:	80 fa 07             	cmp    dl,0x7
c001fdb4:	77 37                	ja     c001fded <Vm::x87Handler(regs*)+0x3f5>
c001fdb6:	83 ec 0c             	sub    esp,0xc
c001fdb9:	2d c0 00 00 00       	sub    eax,0xc0
c001fdbe:	50                   	push   eax
c001fdbf:	e8 f7 fa ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fdc4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdcb:	89 c6                	mov    esi,eax
c001fdcd:	89 d7                	mov    edi,edx
c001fdcf:	e8 e7 fa ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fdd4:	57                   	push   edi
c001fdd5:	56                   	push   esi
c001fdd6:	52                   	push   edx
c001fdd7:	50                   	push   eax
c001fdd8:	e8 54 fa ff ff       	call   c001f831 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fddd:	83 c4 1c             	add    esp,0x1c
c001fde0:	52                   	push   edx
c001fde1:	50                   	push   eax
c001fde2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fde6:	2d c0 00 00 00       	sub    eax,0xc0
c001fdeb:	eb 3d                	jmp    c001fe2a <Vm::x87Handler(regs*)+0x432>
c001fded:	8d 50 38             	lea    edx,[eax+0x38]
c001fdf0:	80 fa 07             	cmp    dl,0x7
c001fdf3:	77 3b                	ja     c001fe30 <Vm::x87Handler(regs*)+0x438>
c001fdf5:	83 ec 0c             	sub    esp,0xc
c001fdf8:	2d c8 00 00 00       	sub    eax,0xc8
c001fdfd:	50                   	push   eax
c001fdfe:	e8 b8 fa ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fe03:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe0a:	89 c6                	mov    esi,eax
c001fe0c:	89 d7                	mov    edi,edx
c001fe0e:	e8 a8 fa ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fe13:	57                   	push   edi
c001fe14:	56                   	push   esi
c001fe15:	52                   	push   edx
c001fe16:	50                   	push   eax
c001fe17:	e8 4e fa ff ff       	call   c001f86a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe1c:	83 c4 1c             	add    esp,0x1c
c001fe1f:	52                   	push   edx
c001fe20:	50                   	push   eax
c001fe21:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe25:	2d c8 00 00 00       	sub    eax,0xc8
c001fe2a:	50                   	push   eax
c001fe2b:	e9 75 fc ff ff       	jmp    c001faa5 <Vm::x87Handler(regs*)+0xad>
c001fe30:	83 c0 18             	add    eax,0x18
c001fe33:	3c 07                	cmp    al,0x7
c001fe35:	0f 87 3b 04 00 00    	ja     c0020276 <Vm::x87Handler(regs*)+0x87e>
c001fe3b:	83 ec 0c             	sub    esp,0xc
c001fe3e:	6a 00                	push   0x0
c001fe40:	e8 76 fa ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fe45:	89 c6                	mov    esi,eax
c001fe47:	89 d7                	mov    edi,edx
c001fe49:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe4d:	2d e8 00 00 00       	sub    eax,0xe8
c001fe52:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe55:	e8 61 fa ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fe5a:	57                   	push   edi
c001fe5b:	56                   	push   esi
c001fe5c:	52                   	push   edx
c001fe5d:	50                   	push   eax
c001fe5e:	e8 f8 f9 ff ff       	call   c001f85b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe63:	83 c4 1c             	add    esp,0x1c
c001fe66:	52                   	push   edx
c001fe67:	50                   	push   eax
c001fe68:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe6c:	2d e8 00 00 00       	sub    eax,0xe8
c001fe71:	eb b7                	jmp    c001fe2a <Vm::x87Handler(regs*)+0x432>
c001fe73:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe77:	8d 50 40             	lea    edx,[eax+0x40]
c001fe7a:	80 fa 07             	cmp    dl,0x7
c001fe7d:	77 3a                	ja     c001feb9 <Vm::x87Handler(regs*)+0x4c1>
c001fe7f:	83 ec 0c             	sub    esp,0xc
c001fe82:	2d c0 00 00 00       	sub    eax,0xc0
c001fe87:	50                   	push   eax
c001fe88:	e8 2e fa ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fe8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe94:	89 c6                	mov    esi,eax
c001fe96:	89 d7                	mov    edi,edx
c001fe98:	e8 1e fa ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fe9d:	57                   	push   edi
c001fe9e:	56                   	push   esi
c001fe9f:	52                   	push   edx
c001fea0:	50                   	push   eax
c001fea1:	e8 8b f9 ff ff       	call   c001f831 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fea6:	83 c4 1c             	add    esp,0x1c
c001fea9:	52                   	push   edx
c001feaa:	50                   	push   eax
c001feab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feaf:	2d c0 00 00 00       	sub    eax,0xc0
c001feb4:	e9 9e 01 00 00       	jmp    c0020057 <Vm::x87Handler(regs*)+0x65f>
c001feb9:	8d 50 20             	lea    edx,[eax+0x20]
c001febc:	80 fa 07             	cmp    dl,0x7
c001febf:	77 3a                	ja     c001fefb <Vm::x87Handler(regs*)+0x503>
c001fec1:	83 ec 0c             	sub    esp,0xc
c001fec4:	2d e0 00 00 00       	sub    eax,0xe0
c001fec9:	50                   	push   eax
c001feca:	e8 ec f9 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fecf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fed6:	89 c6                	mov    esi,eax
c001fed8:	89 d7                	mov    edi,edx
c001feda:	e8 dc f9 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001fedf:	57                   	push   edi
c001fee0:	56                   	push   esi
c001fee1:	52                   	push   edx
c001fee2:	50                   	push   eax
c001fee3:	e8 73 f9 ff ff       	call   c001f85b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fee8:	83 c4 1c             	add    esp,0x1c
c001feeb:	52                   	push   edx
c001feec:	50                   	push   eax
c001feed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fef1:	2d e0 00 00 00       	sub    eax,0xe0
c001fef6:	e9 5c 01 00 00       	jmp    c0020057 <Vm::x87Handler(regs*)+0x65f>
c001fefb:	8d 50 18             	lea    edx,[eax+0x18]
c001fefe:	80 fa 07             	cmp    dl,0x7
c001ff01:	77 3b                	ja     c001ff3e <Vm::x87Handler(regs*)+0x546>
c001ff03:	83 ec 0c             	sub    esp,0xc
c001ff06:	6a 00                	push   0x0
c001ff08:	e8 ae f9 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001ff0d:	89 c6                	mov    esi,eax
c001ff0f:	89 d7                	mov    edi,edx
c001ff11:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff15:	2d e8 00 00 00       	sub    eax,0xe8
c001ff1a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff1d:	e8 99 f9 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001ff22:	57                   	push   edi
c001ff23:	56                   	push   esi
c001ff24:	52                   	push   edx
c001ff25:	50                   	push   eax
c001ff26:	e8 30 f9 ff ff       	call   c001f85b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff2b:	83 c4 1c             	add    esp,0x1c
c001ff2e:	52                   	push   edx
c001ff2f:	50                   	push   eax
c001ff30:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff34:	2d e8 00 00 00       	sub    eax,0xe8
c001ff39:	e9 19 01 00 00       	jmp    c0020057 <Vm::x87Handler(regs*)+0x65f>
c001ff3e:	8d 50 38             	lea    edx,[eax+0x38]
c001ff41:	80 fa 07             	cmp    dl,0x7
c001ff44:	77 37                	ja     c001ff7d <Vm::x87Handler(regs*)+0x585>
c001ff46:	83 ec 0c             	sub    esp,0xc
c001ff49:	2d c8 00 00 00       	sub    eax,0xc8
c001ff4e:	50                   	push   eax
c001ff4f:	e8 67 f9 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001ff54:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff5b:	89 c6                	mov    esi,eax
c001ff5d:	89 d7                	mov    edi,edx
c001ff5f:	e8 57 f9 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001ff64:	57                   	push   edi
c001ff65:	56                   	push   esi
c001ff66:	52                   	push   edx
c001ff67:	50                   	push   eax
c001ff68:	e8 fd f8 ff ff       	call   c001f86a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff6d:	83 c4 1c             	add    esp,0x1c
c001ff70:	52                   	push   edx
c001ff71:	50                   	push   eax
c001ff72:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff76:	2d c8 00 00 00       	sub    eax,0xc8
c001ff7b:	eb 7d                	jmp    c001fffa <Vm::x87Handler(regs*)+0x602>
c001ff7d:	3c f7                	cmp    al,0xf7
c001ff7f:	76 38                	jbe    c001ffb9 <Vm::x87Handler(regs*)+0x5c1>
c001ff81:	83 ec 0c             	sub    esp,0xc
c001ff84:	6a 00                	push   0x0
c001ff86:	e8 30 f9 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001ff8b:	89 c6                	mov    esi,eax
c001ff8d:	89 d7                	mov    edi,edx
c001ff8f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff93:	2d f8 00 00 00       	sub    eax,0xf8
c001ff98:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff9b:	e8 1b f9 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001ffa0:	57                   	push   edi
c001ffa1:	56                   	push   esi
c001ffa2:	52                   	push   edx
c001ffa3:	50                   	push   eax
c001ffa4:	e8 e0 f8 ff ff       	call   c001f889 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ffa9:	83 c4 1c             	add    esp,0x1c
c001ffac:	52                   	push   edx
c001ffad:	50                   	push   eax
c001ffae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffb2:	2d f8 00 00 00       	sub    eax,0xf8
c001ffb7:	eb 41                	jmp    c001fffa <Vm::x87Handler(regs*)+0x602>
c001ffb9:	8d 50 10             	lea    edx,[eax+0x10]
c001ffbc:	80 fa 07             	cmp    dl,0x7
c001ffbf:	0f 87 5a 01 00 00    	ja     c002011f <Vm::x87Handler(regs*)+0x727>
c001ffc5:	83 ec 0c             	sub    esp,0xc
c001ffc8:	2d f0 00 00 00       	sub    eax,0xf0
c001ffcd:	50                   	push   eax
c001ffce:	e8 e8 f8 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001ffd3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffda:	89 c6                	mov    esi,eax
c001ffdc:	89 d7                	mov    edi,edx
c001ffde:	e8 d8 f8 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c001ffe3:	57                   	push   edi
c001ffe4:	56                   	push   esi
c001ffe5:	52                   	push   edx
c001ffe6:	50                   	push   eax
c001ffe7:	e8 9d f8 ff ff       	call   c001f889 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ffec:	83 c4 1c             	add    esp,0x1c
c001ffef:	52                   	push   edx
c001fff0:	50                   	push   eax
c001fff1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fff5:	2d f0 00 00 00       	sub    eax,0xf0
c001fffa:	50                   	push   eax
c001fffb:	e8 fe f8 ff ff       	call   c001f8fe <Vm::fpuSetReg(int, unsigned long long)>
c0020000:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020004:	e8 9d f9 ff ff       	call   c001f9a6 <Vm::fpuPop()>
c0020009:	e9 5e fa ff ff       	jmp    c001fa6c <Vm::x87Handler(regs*)+0x74>
c002000e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020012:	8d 50 30             	lea    edx,[eax+0x30]
c0020015:	80 fa 07             	cmp    dl,0x7
c0020018:	77 1d                	ja     c0020037 <Vm::x87Handler(regs*)+0x63f>
c002001a:	83 ec 0c             	sub    esp,0xc
c002001d:	6a 00                	push   0x0
c002001f:	e8 97 f8 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c0020024:	83 c4 0c             	add    esp,0xc
c0020027:	52                   	push   edx
c0020028:	50                   	push   eax
c0020029:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002002d:	2d d0 00 00 00       	sub    eax,0xd0
c0020032:	e9 f3 fd ff ff       	jmp    c001fe2a <Vm::x87Handler(regs*)+0x432>
c0020037:	8d 50 28             	lea    edx,[eax+0x28]
c002003a:	80 fa 07             	cmp    dl,0x7
c002003d:	77 28                	ja     c0020067 <Vm::x87Handler(regs*)+0x66f>
c002003f:	83 ec 0c             	sub    esp,0xc
c0020042:	6a 00                	push   0x0
c0020044:	e8 72 f8 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c0020049:	83 c4 0c             	add    esp,0xc
c002004c:	52                   	push   edx
c002004d:	50                   	push   eax
c002004e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020052:	2d d8 00 00 00       	sub    eax,0xd8
c0020057:	50                   	push   eax
c0020058:	e8 a1 f8 ff ff       	call   c001f8fe <Vm::fpuSetReg(int, unsigned long long)>
c002005d:	e8 44 f9 ff ff       	call   c001f9a6 <Vm::fpuPop()>
c0020062:	e9 01 fa ff ff       	jmp    c001fa68 <Vm::x87Handler(regs*)+0x70>
c0020067:	8d 50 20             	lea    edx,[eax+0x20]
c002006a:	80 fa 07             	cmp    dl,0x7
c002006d:	77 30                	ja     c002009f <Vm::x87Handler(regs*)+0x6a7>
c002006f:	83 ec 0c             	sub    esp,0xc
c0020072:	2d e0 00 00 00       	sub    eax,0xe0
c0020077:	50                   	push   eax
c0020078:	e8 3e f8 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c002007d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020084:	89 c6                	mov    esi,eax
c0020086:	89 d7                	mov    edi,edx
c0020088:	e8 2e f8 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c002008d:	57                   	push   edi
c002008e:	56                   	push   esi
c002008f:	52                   	push   edx
c0020090:	50                   	push   eax
c0020091:	e8 48 f7 ff ff       	call   c001f7de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020096:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002009a:	e9 54 02 00 00       	jmp    c00202f3 <Vm::x87Handler(regs*)+0x8fb>
c002009f:	8d 50 18             	lea    edx,[eax+0x18]
c00200a2:	80 fa 07             	cmp    dl,0x7
c00200a5:	0f 87 43 fb ff ff    	ja     c001fbee <Vm::x87Handler(regs*)+0x1f6>
c00200ab:	83 ec 0c             	sub    esp,0xc
c00200ae:	2d e8 00 00 00       	sub    eax,0xe8
c00200b3:	50                   	push   eax
c00200b4:	e8 02 f8 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c00200b9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200c0:	89 c6                	mov    esi,eax
c00200c2:	89 d7                	mov    edi,edx
c00200c4:	e8 f2 f7 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c00200c9:	57                   	push   edi
c00200ca:	56                   	push   esi
c00200cb:	52                   	push   edx
c00200cc:	50                   	push   eax
c00200cd:	e8 0c f7 ff ff       	call   c001f7de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00200d2:	83 c4 20             	add    esp,0x20
c00200d5:	e8 cc f8 ff ff       	call   c001f9a6 <Vm::fpuPop()>
c00200da:	eb 62                	jmp    c002013e <Vm::x87Handler(regs*)+0x746>
c00200dc:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00200e0:	0f 85 0f 01 00 00    	jne    c00201f5 <Vm::x87Handler(regs*)+0x7fd>
c00200e6:	83 ec 0c             	sub    esp,0xc
c00200e9:	6a 01                	push   0x1
c00200eb:	e8 cb f7 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c00200f0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200f7:	89 c6                	mov    esi,eax
c00200f9:	89 d7                	mov    edi,edx
c00200fb:	e8 bb f7 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c0020100:	57                   	push   edi
c0020101:	56                   	push   esi
c0020102:	52                   	push   edx
c0020103:	50                   	push   eax
c0020104:	e8 d5 f6 ff ff       	call   c001f7de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020109:	83 c4 20             	add    esp,0x20
c002010c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020110:	e8 91 f8 ff ff       	call   c001f9a6 <Vm::fpuPop()>
c0020115:	e8 8c f8 ff ff       	call   c001f9a6 <Vm::fpuPop()>
c002011a:	e9 50 f9 ff ff       	jmp    c001fa6f <Vm::x87Handler(regs*)+0x77>
c002011f:	3c d9                	cmp    al,0xd9
c0020121:	0f 85 b5 02 00 00    	jne    c00203dc <Vm::x87Handler(regs*)+0x9e4>
c0020127:	eb bd                	jmp    c00200e6 <Vm::x87Handler(regs*)+0x6ee>
c0020129:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002012d:	0f 85 ea 02 00 00    	jne    c002041d <Vm::x87Handler(regs*)+0xa25>
c0020133:	0f b7 05 40 19 03 c0 	movzx  eax,WORD PTR ds:0xc0031940
c002013a:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c002013e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020142:	e9 28 f9 ff ff       	jmp    c001fa6f <Vm::x87Handler(regs*)+0x77>
c0020147:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002014b:	84 d2                	test   dl,dl
c002014d:	75 0f                	jne    c002015e <Vm::x87Handler(regs*)+0x766>
c002014f:	83 ec 0c             	sub    esp,0xc
c0020152:	ff 36                	push   DWORD PTR [esi]
c0020154:	e8 b1 f4 ff ff       	call   c001f60a <Vm::fpu32ToInternal(unsigned int)>
c0020159:	e9 2c 01 00 00       	jmp    c002028a <Vm::x87Handler(regs*)+0x892>
c002015e:	80 fa 01             	cmp    dl,0x1
c0020161:	75 0f                	jne    c0020172 <Vm::x87Handler(regs*)+0x77a>
c0020163:	83 ec 0c             	sub    esp,0xc
c0020166:	ff 36                	push   DWORD PTR [esi]
c0020168:	e8 9d f4 ff ff       	call   c001f60a <Vm::fpu32ToInternal(unsigned int)>
c002016d:	e9 81 02 00 00       	jmp    c00203f3 <Vm::x87Handler(regs*)+0x9fb>
c0020172:	80 fa 04             	cmp    dl,0x4
c0020175:	75 0f                	jne    c0020186 <Vm::x87Handler(regs*)+0x78e>
c0020177:	83 ec 0c             	sub    esp,0xc
c002017a:	ff 36                	push   DWORD PTR [esi]
c002017c:	e8 89 f4 ff ff       	call   c001f60a <Vm::fpu32ToInternal(unsigned int)>
c0020181:	e9 86 01 00 00       	jmp    c002030c <Vm::x87Handler(regs*)+0x914>
c0020186:	80 fa 05             	cmp    dl,0x5
c0020189:	75 1b                	jne    c00201a6 <Vm::x87Handler(regs*)+0x7ae>
c002018b:	83 ec 0c             	sub    esp,0xc
c002018e:	6a 00                	push   0x0
c0020190:	e8 26 f7 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c0020195:	89 c7                	mov    edi,eax
c0020197:	89 d5                	mov    ebp,edx
c0020199:	58                   	pop    eax
c002019a:	ff 36                	push   DWORD PTR [esi]
c002019c:	e8 69 f4 ff ff       	call   c001f60a <Vm::fpu32ToInternal(unsigned int)>
c00201a1:	e9 a3 01 00 00       	jmp    c0020349 <Vm::x87Handler(regs*)+0x951>
c00201a6:	80 fa 06             	cmp    dl,0x6
c00201a9:	75 0f                	jne    c00201ba <Vm::x87Handler(regs*)+0x7c2>
c00201ab:	83 ec 0c             	sub    esp,0xc
c00201ae:	ff 36                	push   DWORD PTR [esi]
c00201b0:	e8 55 f4 ff ff       	call   c001f60a <Vm::fpu32ToInternal(unsigned int)>
c00201b5:	e9 ae 01 00 00       	jmp    c0020368 <Vm::x87Handler(regs*)+0x970>
c00201ba:	31 c0                	xor    eax,eax
c00201bc:	80 fa 07             	cmp    dl,0x7
c00201bf:	0f 85 94 02 00 00    	jne    c0020459 <Vm::x87Handler(regs*)+0xa61>
c00201c5:	83 ec 0c             	sub    esp,0xc
c00201c8:	6a 00                	push   0x0
c00201ca:	e8 ec f6 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c00201cf:	89 c7                	mov    edi,eax
c00201d1:	89 d5                	mov    ebp,edx
c00201d3:	58                   	pop    eax
c00201d4:	ff 36                	push   DWORD PTR [esi]
c00201d6:	e8 2f f4 ff ff       	call   c001f60a <Vm::fpu32ToInternal(unsigned int)>
c00201db:	e9 cb 01 00 00       	jmp    c00203ab <Vm::x87Handler(regs*)+0x9b3>
c00201e0:	80 fa 03             	cmp    dl,0x3
c00201e3:	0f 85 d3 01 00 00    	jne    c00203bc <Vm::x87Handler(regs*)+0x9c4>
c00201e9:	e8 b8 f7 ff ff       	call   c001f9a6 <Vm::fpuPop()>
c00201ee:	51                   	push   ecx
c00201ef:	51                   	push   ecx
c00201f0:	e9 de 01 00 00       	jmp    c00203d3 <Vm::x87Handler(regs*)+0x9db>
c00201f5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201f9:	80 fa 01             	cmp    dl,0x1
c00201fc:	75 09                	jne    c0020207 <Vm::x87Handler(regs*)+0x80f>
c00201fe:	57                   	push   edi
c00201ff:	57                   	push   edi
c0020200:	8b 06                	mov    eax,DWORD PTR [esi]
c0020202:	e9 e3 01 00 00       	jmp    c00203ea <Vm::x87Handler(regs*)+0x9f2>
c0020207:	80 fa 04             	cmp    dl,0x4
c002020a:	75 12                	jne    c002021e <Vm::x87Handler(regs*)+0x826>
c002020c:	31 d2                	xor    edx,edx
c002020e:	51                   	push   ecx
c002020f:	51                   	push   ecx
c0020210:	8b 06                	mov    eax,DWORD PTR [esi]
c0020212:	52                   	push   edx
c0020213:	50                   	push   eax
c0020214:	e8 d0 f4 ff ff       	call   c001f6e9 <Vm::fpuLongToFloat(long long)>
c0020219:	e9 ee 00 00 00       	jmp    c002030c <Vm::x87Handler(regs*)+0x914>
c002021e:	31 c0                	xor    eax,eax
c0020220:	80 fa 07             	cmp    dl,0x7
c0020223:	0f 85 30 02 00 00    	jne    c0020459 <Vm::x87Handler(regs*)+0xa61>
c0020229:	83 ec 0c             	sub    esp,0xc
c002022c:	6a 00                	push   0x0
c002022e:	e8 88 f6 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c0020233:	89 c7                	mov    edi,eax
c0020235:	89 d5                	mov    ebp,edx
c0020237:	58                   	pop    eax
c0020238:	8b 06                	mov    eax,DWORD PTR [esi]
c002023a:	5a                   	pop    edx
c002023b:	31 d2                	xor    edx,edx
c002023d:	52                   	push   edx
c002023e:	50                   	push   eax
c002023f:	e8 a5 f4 ff ff       	call   c001f6e9 <Vm::fpuLongToFloat(long long)>
c0020244:	e9 62 01 00 00       	jmp    c00203ab <Vm::x87Handler(regs*)+0x9b3>
c0020249:	84 d2                	test   dl,dl
c002024b:	75 0d                	jne    c002025a <Vm::x87Handler(regs*)+0x862>
c002024d:	31 d2                	xor    edx,edx
c002024f:	55                   	push   ebp
c0020250:	55                   	push   ebp
c0020251:	8b 06                	mov    eax,DWORD PTR [esi]
c0020253:	52                   	push   edx
c0020254:	50                   	push   eax
c0020255:	e9 d3 01 00 00       	jmp    c002042d <Vm::x87Handler(regs*)+0xa35>
c002025a:	31 c0                	xor    eax,eax
c002025c:	80 fa 02             	cmp    dl,0x2
c002025f:	0f 85 f4 01 00 00    	jne    c0020459 <Vm::x87Handler(regs*)+0xa61>
c0020265:	83 ec 0c             	sub    esp,0xc
c0020268:	6a 00                	push   0x0
c002026a:	e8 4c f6 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c002026f:	59                   	pop    ecx
c0020270:	5f                   	pop    edi
c0020271:	e9 6a f9 ff ff       	jmp    c001fbe0 <Vm::x87Handler(regs*)+0x1e8>
c0020276:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002027a:	84 d2                	test   dl,dl
c002027c:	75 2a                	jne    c00202a8 <Vm::x87Handler(regs*)+0x8b0>
c002027e:	50                   	push   eax
c002027f:	50                   	push   eax
c0020280:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020283:	ff 36                	push   DWORD PTR [esi]
c0020285:	e8 c5 f3 ff ff       	call   c001f64f <Vm::fpu64ToInternal(unsigned long long)>
c002028a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020291:	89 c6                	mov    esi,eax
c0020293:	89 d7                	mov    edi,edx
c0020295:	e8 21 f6 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c002029a:	57                   	push   edi
c002029b:	56                   	push   esi
c002029c:	52                   	push   edx
c002029d:	50                   	push   eax
c002029e:	e8 8e f5 ff ff       	call   c001f831 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00202a3:	e9 64 01 00 00       	jmp    c002040c <Vm::x87Handler(regs*)+0xa14>
c00202a8:	80 fa 01             	cmp    dl,0x1
c00202ab:	75 11                	jne    c00202be <Vm::x87Handler(regs*)+0x8c6>
c00202ad:	50                   	push   eax
c00202ae:	50                   	push   eax
c00202af:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202b2:	ff 36                	push   DWORD PTR [esi]
c00202b4:	e8 96 f3 ff ff       	call   c001f64f <Vm::fpu64ToInternal(unsigned long long)>
c00202b9:	e9 35 01 00 00       	jmp    c00203f3 <Vm::x87Handler(regs*)+0x9fb>
c00202be:	80 fa 02             	cmp    dl,0x2
c00202c1:	0f 85 54 f9 ff ff    	jne    c001fc1b <Vm::x87Handler(regs*)+0x223>
c00202c7:	55                   	push   ebp
c00202c8:	55                   	push   ebp
c00202c9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202cc:	ff 36                	push   DWORD PTR [esi]
c00202ce:	e8 7c f3 ff ff       	call   c001f64f <Vm::fpu64ToInternal(unsigned long long)>
c00202d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202da:	89 c6                	mov    esi,eax
c00202dc:	89 d7                	mov    edi,edx
c00202de:	e8 d8 f5 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c00202e3:	57                   	push   edi
c00202e4:	56                   	push   esi
c00202e5:	52                   	push   edx
c00202e6:	50                   	push   eax
c00202e7:	e8 f2 f4 ff ff       	call   c001f7de <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00202ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00202f0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00202f3:	83 c4 20             	add    esp,0x20
c00202f6:	e9 74 f7 ff ff       	jmp    c001fa6f <Vm::x87Handler(regs*)+0x77>
c00202fb:	80 fa 04             	cmp    dl,0x4
c00202fe:	75 2a                	jne    c002032a <Vm::x87Handler(regs*)+0x932>
c0020300:	51                   	push   ecx
c0020301:	51                   	push   ecx
c0020302:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020305:	ff 36                	push   DWORD PTR [esi]
c0020307:	e8 43 f3 ff ff       	call   c001f64f <Vm::fpu64ToInternal(unsigned long long)>
c002030c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020313:	89 c6                	mov    esi,eax
c0020315:	89 d7                	mov    edi,edx
c0020317:	e8 9f f5 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c002031c:	57                   	push   edi
c002031d:	56                   	push   esi
c002031e:	52                   	push   edx
c002031f:	50                   	push   eax
c0020320:	e8 36 f5 ff ff       	call   c001f85b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020325:	e9 e2 00 00 00       	jmp    c002040c <Vm::x87Handler(regs*)+0xa14>
c002032a:	80 fa 05             	cmp    dl,0x5
c002032d:	75 28                	jne    c0020357 <Vm::x87Handler(regs*)+0x95f>
c002032f:	83 ec 0c             	sub    esp,0xc
c0020332:	6a 00                	push   0x0
c0020334:	e8 82 f5 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c0020339:	89 c7                	mov    edi,eax
c002033b:	89 d5                	mov    ebp,edx
c002033d:	58                   	pop    eax
c002033e:	5a                   	pop    edx
c002033f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020342:	ff 36                	push   DWORD PTR [esi]
c0020344:	e8 06 f3 ff ff       	call   c001f64f <Vm::fpu64ToInternal(unsigned long long)>
c0020349:	83 c4 10             	add    esp,0x10
c002034c:	55                   	push   ebp
c002034d:	57                   	push   edi
c002034e:	52                   	push   edx
c002034f:	50                   	push   eax
c0020350:	e8 06 f5 ff ff       	call   c001f85b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020355:	eb 60                	jmp    c00203b7 <Vm::x87Handler(regs*)+0x9bf>
c0020357:	80 fa 06             	cmp    dl,0x6
c002035a:	75 2a                	jne    c0020386 <Vm::x87Handler(regs*)+0x98e>
c002035c:	51                   	push   ecx
c002035d:	51                   	push   ecx
c002035e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020361:	ff 36                	push   DWORD PTR [esi]
c0020363:	e8 e7 f2 ff ff       	call   c001f64f <Vm::fpu64ToInternal(unsigned long long)>
c0020368:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002036f:	89 c6                	mov    esi,eax
c0020371:	89 d7                	mov    edi,edx
c0020373:	e8 43 f5 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c0020378:	57                   	push   edi
c0020379:	56                   	push   esi
c002037a:	52                   	push   edx
c002037b:	50                   	push   eax
c002037c:	e8 08 f5 ff ff       	call   c001f889 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020381:	e9 86 00 00 00       	jmp    c002040c <Vm::x87Handler(regs*)+0xa14>
c0020386:	31 c0                	xor    eax,eax
c0020388:	80 fa 07             	cmp    dl,0x7
c002038b:	0f 85 c8 00 00 00    	jne    c0020459 <Vm::x87Handler(regs*)+0xa61>
c0020391:	83 ec 0c             	sub    esp,0xc
c0020394:	6a 00                	push   0x0
c0020396:	e8 20 f5 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c002039b:	89 c7                	mov    edi,eax
c002039d:	89 d5                	mov    ebp,edx
c002039f:	58                   	pop    eax
c00203a0:	5a                   	pop    edx
c00203a1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203a4:	ff 36                	push   DWORD PTR [esi]
c00203a6:	e8 a4 f2 ff ff       	call   c001f64f <Vm::fpu64ToInternal(unsigned long long)>
c00203ab:	83 c4 10             	add    esp,0x10
c00203ae:	55                   	push   ebp
c00203af:	57                   	push   edi
c00203b0:	52                   	push   edx
c00203b1:	50                   	push   eax
c00203b2:	e8 d2 f4 ff ff       	call   c001f889 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00203b7:	83 c4 0c             	add    esp,0xc
c00203ba:	eb 53                	jmp    c002040f <Vm::x87Handler(regs*)+0xa17>
c00203bc:	31 c0                	xor    eax,eax
c00203be:	80 fa 02             	cmp    dl,0x2
c00203c1:	0f 85 92 00 00 00    	jne    c0020459 <Vm::x87Handler(regs*)+0xa61>
c00203c7:	83 ec 0c             	sub    esp,0xc
c00203ca:	6a 00                	push   0x0
c00203cc:	e8 ea f4 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c00203d1:	59                   	pop    ecx
c00203d2:	5f                   	pop    edi
c00203d3:	52                   	push   edx
c00203d4:	50                   	push   eax
c00203d5:	e8 27 f2 ff ff       	call   c001f601 <Vm::fpuInternalTo64(unsigned long long)>
c00203da:	eb 70                	jmp    c002044c <Vm::x87Handler(regs*)+0xa54>
c00203dc:	31 c0                	xor    eax,eax
c00203de:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00203e3:	75 74                	jne    c0020459 <Vm::x87Handler(regs*)+0xa61>
c00203e5:	50                   	push   eax
c00203e6:	50                   	push   eax
c00203e7:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00203ea:	31 d2                	xor    edx,edx
c00203ec:	52                   	push   edx
c00203ed:	50                   	push   eax
c00203ee:	e8 f6 f2 ff ff       	call   c001f6e9 <Vm::fpuLongToFloat(long long)>
c00203f3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203fa:	89 c6                	mov    esi,eax
c00203fc:	89 d7                	mov    edi,edx
c00203fe:	e8 b8 f4 ff ff       	call   c001f8bb <Vm::fpuGetReg(int)>
c0020403:	57                   	push   edi
c0020404:	56                   	push   esi
c0020405:	52                   	push   edx
c0020406:	50                   	push   eax
c0020407:	e8 5e f4 ff ff       	call   c001f86a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002040c:	83 c4 1c             	add    esp,0x1c
c002040f:	52                   	push   edx
c0020410:	50                   	push   eax
c0020411:	6a 00                	push   0x0
c0020413:	e8 e6 f4 ff ff       	call   c001f8fe <Vm::fpuSetReg(int, unsigned long long)>
c0020418:	e9 f2 f7 ff ff       	jmp    c001fc0f <Vm::x87Handler(regs*)+0x217>
c002041d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020421:	80 fa 05             	cmp    dl,0x5
c0020424:	75 11                	jne    c0020437 <Vm::x87Handler(regs*)+0xa3f>
c0020426:	55                   	push   ebp
c0020427:	55                   	push   ebp
c0020428:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002042b:	ff 36                	push   DWORD PTR [esi]
c002042d:	e8 81 f2 ff ff       	call   c001f6b3 <Vm::fpuULongToFloat(unsigned long long)>
c0020432:	e9 cf f7 ff ff       	jmp    c001fc06 <Vm::x87Handler(regs*)+0x20e>
c0020437:	31 c0                	xor    eax,eax
c0020439:	80 fa 07             	cmp    dl,0x7
c002043c:	75 1b                	jne    c0020459 <Vm::x87Handler(regs*)+0xa61>
c002043e:	e8 63 f5 ff ff       	call   c001f9a6 <Vm::fpuPop()>
c0020443:	51                   	push   ecx
c0020444:	51                   	push   ecx
c0020445:	52                   	push   edx
c0020446:	50                   	push   eax
c0020447:	e8 0c f2 ff ff       	call   c001f658 <Vm::fpuFloatToLong(unsigned long long)>
c002044c:	83 c4 10             	add    esp,0x10
c002044f:	89 06                	mov    DWORD PTR [esi],eax
c0020451:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020454:	e9 f8 f7 ff ff       	jmp    c001fc51 <Vm::x87Handler(regs*)+0x259>
c0020459:	83 c4 1c             	add    esp,0x1c
c002045c:	5b                   	pop    ebx
c002045d:	5e                   	pop    esi
c002045e:	5f                   	pop    edi
c002045f:	5d                   	pop    ebp
c0020460:	c3                   	ret    

c0020461 <__static_initialization_and_destruction_0(int, int)>:
c0020461:	83 ec 0c             	sub    esp,0xc
c0020464:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020469:	75 1a                	jne    c0020485 <__static_initialization_and_destruction_0(int, int)+0x24>
c002046b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020473:	75 10                	jne    c0020485 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020475:	83 ec 0c             	sub    esp,0xc
c0020478:	68 40 19 03 c0       	push   0xc0031940
c002047d:	e8 0e 88 00 00       	call   c0028c90 <Vm::_FPUState::_FPUState()>
c0020482:	83 c4 10             	add    esp,0x10
c0020485:	90                   	nop
c0020486:	83 c4 0c             	add    esp,0xc
c0020489:	c3                   	ret    

c002048a <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c002048a:	83 ec 0c             	sub    esp,0xc
c002048d:	83 ec 08             	sub    esp,0x8
c0020490:	68 ff ff 00 00       	push   0xffff
c0020495:	6a 01                	push   0x1
c0020497:	e8 c5 ff ff ff       	call   c0020461 <__static_initialization_and_destruction_0(int, int)>
c002049c:	83 c4 10             	add    esp,0x10
c002049f:	83 c4 0c             	add    esp,0xc
c00204a2:	c3                   	ret    
c00204a3:	90                   	nop

c00204a4 <FAT::getName()>:
c00204a4:	b8 4c c7 02 c0       	mov    eax,0xc002c74c
c00204a9:	c3                   	ret    

c00204aa <FAT::tell(void*, unsigned long long*)>:
c00204aa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00204af:	75 06                	jne    c00204b7 <FAT::tell(void*, unsigned long long*)+0xd>
c00204b1:	b8 04 00 00 00       	mov    eax,0x4
c00204b6:	c3                   	ret    
c00204b7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00204bc:	75 06                	jne    c00204c4 <FAT::tell(void*, unsigned long long*)+0x1a>
c00204be:	b8 04 00 00 00       	mov    eax,0x4
c00204c3:	c3                   	ret    
c00204c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00204c8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00204cb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00204ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00204d2:	89 01                	mov    DWORD PTR [ecx],eax
c00204d4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00204d7:	b8 00 00 00 00       	mov    eax,0x0
c00204dc:	c3                   	ret    
c00204dd:	90                   	nop

c00204de <FAT::stat(void*, unsigned long long*)>:
c00204de:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00204e3:	75 06                	jne    c00204eb <FAT::stat(void*, unsigned long long*)+0xd>
c00204e5:	b8 04 00 00 00       	mov    eax,0x4
c00204ea:	c3                   	ret    
c00204eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00204f0:	75 06                	jne    c00204f8 <FAT::stat(void*, unsigned long long*)+0x1a>
c00204f2:	b8 04 00 00 00       	mov    eax,0x4
c00204f7:	c3                   	ret    
c00204f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00204fc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00204ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020502:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020506:	89 01                	mov    DWORD PTR [ecx],eax
c0020508:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002050b:	b8 00 00 00 00       	mov    eax,0x0
c0020510:	c3                   	ret    
c0020511:	90                   	nop

c0020512 <FAT::~FAT()>:
c0020512:	83 ec 0c             	sub    esp,0xc
c0020515:	ba d0 c7 02 c0       	mov    edx,0xc002c7d0
c002051a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002051e:	89 10                	mov    DWORD PTR [eax],edx
c0020520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020524:	83 ec 0c             	sub    esp,0xc
c0020527:	50                   	push   eax
c0020528:	e8 99 2c ff ff       	call   c00131c6 <Filesystem::~Filesystem()>
c002052d:	83 c4 10             	add    esp,0x10
c0020530:	90                   	nop
c0020531:	83 c4 0c             	add    esp,0xc
c0020534:	c3                   	ret    
c0020535:	90                   	nop

c0020536 <FAT::~FAT()>:
c0020536:	83 ec 0c             	sub    esp,0xc
c0020539:	83 ec 0c             	sub    esp,0xc
c002053c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020540:	e8 cd ff ff ff       	call   c0020512 <FAT::~FAT()>
c0020545:	83 c4 10             	add    esp,0x10
c0020548:	83 ec 08             	sub    esp,0x8
c002054b:	6a 08                	push   0x8
c002054d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020551:	e8 67 28 ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0020556:	83 c4 10             	add    esp,0x10
c0020559:	83 c4 0c             	add    esp,0xc
c002055c:	c3                   	ret    
c002055d:	90                   	nop

c002055e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002055e:	83 ec 1c             	sub    esp,0x1c
c0020561:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020568:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002056d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020571:	8b 04 85 c0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce640]
c0020578:	83 f8 ff             	cmp    eax,0xffffffff
c002057b:	75 34                	jne    c00205b1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002057d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020581:	88 c2                	mov    dl,al
c0020583:	a1 a0 19 03 c0       	mov    eax,ds:0xc00319a0
c0020588:	01 d0                	add    eax,edx
c002058a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002058e:	8b 15 a0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319a0
c0020594:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020598:	89 14 85 c0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce640],edx
c002059f:	a1 a0 19 03 c0       	mov    eax,ds:0xc00319a0
c00205a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00205a8:	89 14 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],edx
c00205af:	eb 17                	jmp    c00205c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00205b1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00205b5:	88 c2                	mov    dl,al
c00205b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00205bb:	8b 04 85 c0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce640]
c00205c2:	01 d0                	add    eax,edx
c00205c4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00205c8:	83 ec 04             	sub    esp,0x4
c00205cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00205cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00205d3:	8d 44 24 15          	lea    eax,[esp+0x15]
c00205d7:	50                   	push   eax
c00205d8:	e8 5b 67 fe ff       	call   c0006d38 <f_getlabel>
c00205dd:	83 c4 10             	add    esp,0x10
c00205e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205e9:	75 07                	jne    c00205f2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00205eb:	b8 00 00 00 00       	mov    eax,0x0
c00205f0:	eb 05                	jmp    c00205f7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00205f2:	b8 01 00 00 00       	mov    eax,0x1
c00205f7:	83 c4 1c             	add    esp,0x1c
c00205fa:	c3                   	ret    
c00205fb:	90                   	nop

c00205fc <FAT::setlabel(LogicalDisk*, int, char*)>:
c00205fc:	57                   	push   edi
c00205fd:	83 ec 58             	sub    esp,0x58
c0020600:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020608:	8d 54 24 10          	lea    edx,[esp+0x10]
c002060c:	b9 0f 00 00 00       	mov    ecx,0xf
c0020611:	b8 00 00 00 00       	mov    eax,0x0
c0020616:	fc                   	cld    
c0020617:	89 d7                	mov    edi,edx
c0020619:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002061b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002061f:	8b 04 85 c0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce640]
c0020626:	83 f8 ff             	cmp    eax,0xffffffff
c0020629:	75 34                	jne    c002065f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002062b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002062f:	88 c2                	mov    dl,al
c0020631:	a1 a0 19 03 c0       	mov    eax,ds:0xc00319a0
c0020636:	01 d0                	add    eax,edx
c0020638:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002063c:	8b 15 a0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319a0
c0020642:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020646:	89 14 85 c0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce640],edx
c002064d:	a1 a0 19 03 c0       	mov    eax,ds:0xc00319a0
c0020652:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020656:	89 14 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],edx
c002065d:	eb 17                	jmp    c0020676 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002065f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020663:	88 c2                	mov    dl,al
c0020665:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020669:	8b 04 85 c0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce640]
c0020670:	01 d0                	add    eax,edx
c0020672:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020676:	83 ec 08             	sub    esp,0x8
c0020679:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002067d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020681:	50                   	push   eax
c0020682:	e8 ed 02 fe ff       	call   c0000974 <strcat>
c0020687:	83 c4 10             	add    esp,0x10
c002068a:	83 ec 0c             	sub    esp,0xc
c002068d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020691:	50                   	push   eax
c0020692:	e8 8f 68 fe ff       	call   c0006f26 <f_setlabel>
c0020697:	83 c4 10             	add    esp,0x10
c002069a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002069e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00206a3:	75 07                	jne    c00206ac <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00206a5:	b8 00 00 00 00       	mov    eax,0x0
c00206aa:	eb 05                	jmp    c00206b1 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00206ac:	b8 01 00 00 00       	mov    eax,0x1
c00206b1:	83 c4 58             	add    esp,0x58
c00206b4:	5f                   	pop    edi
c00206b5:	c3                   	ret    

c00206b6 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00206b6:	83 ec 2c             	sub    esp,0x2c
c00206b9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00206c1:	83 ec 08             	sub    esp,0x8
c00206c4:	68 70 c7 02 c0       	push   0xc002c770
c00206c9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206cd:	e8 ee 01 fe ff       	call   c00008c0 <strcmp>
c00206d2:	83 c4 10             	add    esp,0x10
c00206d5:	85 c0                	test   eax,eax
c00206d7:	0f 94 c0             	sete   al
c00206da:	84 c0                	test   al,al
c00206dc:	74 0d                	je     c00206eb <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00206de:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00206e6:	e9 a6 00 00 00       	jmp    c0020791 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206eb:	83 ec 08             	sub    esp,0x8
c00206ee:	68 62 c7 02 c0       	push   0xc002c762
c00206f3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206f7:	e8 c4 01 fe ff       	call   c00008c0 <strcmp>
c00206fc:	83 c4 10             	add    esp,0x10
c00206ff:	85 c0                	test   eax,eax
c0020701:	0f 94 c0             	sete   al
c0020704:	84 c0                	test   al,al
c0020706:	74 0a                	je     c0020712 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020708:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020710:	eb 7f                	jmp    c0020791 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020712:	83 ec 08             	sub    esp,0x8
c0020715:	68 68 c7 02 c0       	push   0xc002c768
c002071a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002071e:	e8 9d 01 fe ff       	call   c00008c0 <strcmp>
c0020723:	83 c4 10             	add    esp,0x10
c0020726:	85 c0                	test   eax,eax
c0020728:	0f 94 c0             	sete   al
c002072b:	84 c0                	test   al,al
c002072d:	74 0a                	je     c0020739 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002072f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020737:	eb 58                	jmp    c0020791 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020739:	83 ec 08             	sub    esp,0x8
c002073c:	68 ec 93 02 c0       	push   0xc00293ec
c0020741:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020745:	e8 76 01 fe ff       	call   c00008c0 <strcmp>
c002074a:	83 c4 10             	add    esp,0x10
c002074d:	85 c0                	test   eax,eax
c002074f:	0f 94 c0             	sete   al
c0020752:	84 c0                	test   al,al
c0020754:	74 0a                	je     c0020760 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020756:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002075e:	eb 31                	jmp    c0020791 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020760:	83 ec 08             	sub    esp,0x8
c0020763:	68 6e c7 02 c0       	push   0xc002c76e
c0020768:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002076c:	e8 4f 01 fe ff       	call   c00008c0 <strcmp>
c0020771:	83 c4 10             	add    esp,0x10
c0020774:	85 c0                	test   eax,eax
c0020776:	0f 94 c0             	sete   al
c0020779:	84 c0                	test   al,al
c002077b:	74 0a                	je     c0020787 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002077d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020785:	eb 0a                	jmp    c0020791 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020787:	b8 08 00 00 00       	mov    eax,0x8
c002078c:	e9 04 01 00 00       	jmp    c0020895 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020791:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020798:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002079d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207a1:	8b 04 85 c0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce640]
c00207a8:	83 f8 ff             	cmp    eax,0xffffffff
c00207ab:	75 34                	jne    c00207e1 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00207ad:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00207b1:	88 c2                	mov    dl,al
c00207b3:	a1 a0 19 03 c0       	mov    eax,ds:0xc00319a0
c00207b8:	01 d0                	add    eax,edx
c00207ba:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00207be:	8b 15 a0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319a0
c00207c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207c8:	89 14 85 c0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce640],edx
c00207cf:	a1 a0 19 03 c0       	mov    eax,ds:0xc00319a0
c00207d4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00207d8:	89 14 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],edx
c00207df:	eb 17                	jmp    c00207f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00207e1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00207e5:	88 c2                	mov    dl,al
c00207e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207eb:	8b 04 85 c0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce640]
c00207f2:	01 d0                	add    eax,edx
c00207f4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00207f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00207fc:	88 04 24             	mov    BYTE PTR [esp],al
c00207ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020803:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020807:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002080f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020814:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002081c:	83 ec 0c             	sub    esp,0xc
c002081f:	68 00 20 00 00       	push   0x2000
c0020824:	e8 1a f0 fe ff       	call   c000f843 <malloc>
c0020829:	83 c4 10             	add    esp,0x10
c002082c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020830:	68 00 20 00 00       	push   0x2000
c0020835:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020839:	8d 44 24 08          	lea    eax,[esp+0x8]
c002083d:	50                   	push   eax
c002083e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020842:	50                   	push   eax
c0020843:	e8 29 6b fe ff       	call   c0007371 <f_mkfs>
c0020848:	83 c4 10             	add    esp,0x10
c002084b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002084f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020854:	75 07                	jne    c002085d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020856:	b8 00 00 00 00       	mov    eax,0x0
c002085b:	eb 38                	jmp    c0020895 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002085d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020862:	75 17                	jne    c002087b <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020864:	83 ec 0c             	sub    esp,0xc
c0020867:	68 a0 c7 02 c0       	push   0xc002c7a0
c002086c:	e8 2c 26 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0020871:	83 c4 10             	add    esp,0x10
c0020874:	b8 09 00 00 00       	mov    eax,0x9
c0020879:	eb 1a                	jmp    c0020895 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002087b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002087f:	83 ec 08             	sub    esp,0x8
c0020882:	50                   	push   eax
c0020883:	68 74 c7 02 c0       	push   0xc002c774
c0020888:	e8 10 26 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c002088d:	83 c4 10             	add    esp,0x10
c0020890:	b8 01 00 00 00       	mov    eax,0x1
c0020895:	83 c4 2c             	add    esp,0x2c
c0020898:	c3                   	ret    
c0020899:	90                   	nop

c002089a <FAT::tryMount(LogicalDisk*, int)>:
c002089a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00208a0:	a1 a0 19 03 c0       	mov    eax,ds:0xc00319a0
c00208a5:	83 f8 14             	cmp    eax,0x14
c00208a8:	75 17                	jne    c00208c1 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00208aa:	83 ec 0c             	sub    esp,0xc
c00208ad:	68 86 c7 02 c0       	push   0xc002c786
c00208b2:	e8 d2 9c ff ff       	call   c001a589 <Krnl::panic(char const*)>
c00208b7:	83 c4 10             	add    esp,0x10
c00208ba:	b0 00                	mov    al,0x0
c00208bc:	e9 d7 01 00 00       	jmp    c0020a98 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00208c1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00208c8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00208ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00208d4:	3d 00 02 00 00       	cmp    eax,0x200
c00208d9:	74 07                	je     c00208e2 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00208db:	b0 00                	mov    al,0x0
c00208dd:	e9 b6 01 00 00       	jmp    c0020a98 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00208e2:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00208ea:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00208f1:	8b 04 85 c0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce640]
c00208f8:	83 f8 ff             	cmp    eax,0xffffffff
c00208fb:	74 07                	je     c0020904 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00208fd:	b0 01                	mov    al,0x1
c00208ff:	e9 94 01 00 00       	jmp    c0020a98 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020904:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002090e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020916:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002091d:	88 c2                	mov    dl,al
c002091f:	a1 a0 19 03 c0       	mov    eax,ds:0xc00319a0
c0020924:	01 d0                	add    eax,edx
c0020926:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002092d:	8b 15 a0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319a0
c0020933:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002093a:	89 14 85 c0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce640],edx
c0020941:	a1 a0 19 03 c0       	mov    eax,ds:0xc00319a0
c0020946:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002094d:	89 14 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],edx
c0020954:	83 ec 0c             	sub    esp,0xc
c0020957:	68 54 02 00 00       	push   0x254
c002095c:	e8 e2 ee fe ff       	call   c000f843 <malloc>
c0020961:	83 c4 10             	add    esp,0x10
c0020964:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002096b:	83 ec 04             	sub    esp,0x4
c002096e:	6a 00                	push   0x0
c0020970:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020977:	50                   	push   eax
c0020978:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002097f:	e8 ab 45 fe ff       	call   c0004f2f <f_mount>
c0020984:	83 c4 10             	add    esp,0x10
c0020987:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002098e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020996:	74 19                	je     c00209b1 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020998:	83 ec 0c             	sub    esp,0xc
c002099b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209a2:	e8 bc ee fe ff       	call   c000f863 <rfree>
c00209a7:	83 c4 10             	add    esp,0x10
c00209aa:	b0 00                	mov    al,0x0
c00209ac:	e9 e7 00 00 00       	jmp    c0020a98 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209b1:	83 ec 04             	sub    esp,0x4
c00209b4:	68 00 01 00 00       	push   0x100
c00209b9:	6a 00                	push   0x0
c00209bb:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00209c2:	50                   	push   eax
c00209c3:	e8 b0 fd fd ff       	call   c0000778 <memset>
c00209c8:	83 c4 10             	add    esp,0x10
c00209cb:	83 ec 08             	sub    esp,0x8
c00209ce:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00209d5:	50                   	push   eax
c00209d6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00209dd:	50                   	push   eax
c00209de:	e8 91 ff fd ff       	call   c0000974 <strcat>
c00209e3:	83 c4 10             	add    esp,0x10
c00209e6:	83 ec 08             	sub    esp,0x8
c00209e9:	68 94 c7 02 c0       	push   0xc002c794
c00209ee:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00209f5:	50                   	push   eax
c00209f6:	e8 79 ff fd ff       	call   c0000974 <strcat>
c00209fb:	83 c4 10             	add    esp,0x10
c00209fe:	83 ec 04             	sub    esp,0x4
c0020a01:	6a 01                	push   0x1
c0020a03:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020a0a:	50                   	push   eax
c0020a0b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a0f:	50                   	push   eax
c0020a10:	e8 7c 45 fe ff       	call   c0004f91 <f_open>
c0020a15:	83 c4 10             	add    esp,0x10
c0020a18:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a1f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020a26:	85 c0                	test   eax,eax
c0020a28:	74 0a                	je     c0020a34 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020a2a:	78 2d                	js     c0020a59 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020a2c:	83 e8 04             	sub    eax,0x4
c0020a2f:	83 f8 01             	cmp    eax,0x1
c0020a32:	77 25                	ja     c0020a59 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020a34:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020a3c:	83 ec 0c             	sub    esp,0xc
c0020a3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a43:	50                   	push   eax
c0020a44:	e8 9a 50 fe ff       	call   c0005ae3 <f_close>
c0020a49:	83 c4 10             	add    esp,0x10
c0020a4c:	90                   	nop
c0020a4d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020a55:	74 3a                	je     c0020a91 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020a57:	eb 2d                	jmp    c0020a86 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020a59:	83 ec 0c             	sub    esp,0xc
c0020a5c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a63:	e8 fb ed fe ff       	call   c000f863 <rfree>
c0020a68:	83 c4 10             	add    esp,0x10
c0020a6b:	83 ec 04             	sub    esp,0x4
c0020a6e:	6a 00                	push   0x0
c0020a70:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a77:	50                   	push   eax
c0020a78:	6a 00                	push   0x0
c0020a7a:	e8 b0 44 fe ff       	call   c0004f2f <f_mount>
c0020a7f:	83 c4 10             	add    esp,0x10
c0020a82:	b0 00                	mov    al,0x0
c0020a84:	eb 12                	jmp    c0020a98 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a86:	a1 a0 19 03 c0       	mov    eax,ds:0xc00319a0
c0020a8b:	40                   	inc    eax
c0020a8c:	a3 a0 19 03 c0       	mov    ds:0xc00319a0,eax
c0020a91:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020a98:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020a9e:	c3                   	ret    
c0020a9f:	90                   	nop

c0020aa0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020aa0:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020aa6:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020aae:	74 0a                	je     c0020aba <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020ab0:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020ab8:	75 0a                	jne    c0020ac4 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020aba:	b8 04 00 00 00       	mov    eax,0x4
c0020abf:	e9 db 00 00 00       	jmp    c0020b9f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020ac4:	83 ec 08             	sub    esp,0x8
c0020ac7:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020ace:	50                   	push   eax
c0020acf:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020ad6:	e8 12 56 fe ff       	call   c00060ed <f_readdir>
c0020adb:	83 c4 10             	add    esp,0x10
c0020ade:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020ae5:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020aeb:	83 ec 0c             	sub    esp,0xc
c0020aee:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020af5:	83 c0 1a             	add    eax,0x1a
c0020af8:	50                   	push   eax
c0020af9:	e8 96 fc fd ff       	call   c0000794 <strlen>
c0020afe:	83 c4 10             	add    esp,0x10
c0020b01:	ba 00 00 00 00       	mov    edx,0x0
c0020b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b0a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020b0e:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020b15:	0f b6 c0             	movzx  eax,al
c0020b18:	83 e0 10             	and    eax,0x10
c0020b1b:	74 07                	je     c0020b24 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020b1d:	b8 02 00 00 00       	mov    eax,0x2
c0020b22:	eb 05                	jmp    c0020b29 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020b24:	b8 01 00 00 00       	mov    eax,0x1
c0020b29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b2d:	83 ec 08             	sub    esp,0x8
c0020b30:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b37:	83 c0 1a             	add    eax,0x1a
c0020b3a:	50                   	push   eax
c0020b3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b3f:	83 c0 10             	add    eax,0x10
c0020b42:	50                   	push   eax
c0020b43:	e8 ec fc fd ff       	call   c0000834 <strcpy>
c0020b48:	83 c4 10             	add    esp,0x10
c0020b4b:	83 ec 04             	sub    esp,0x4
c0020b4e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020b55:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b59:	50                   	push   eax
c0020b5a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020b61:	e8 de fb fd ff       	call   c0000744 <memcpy>
c0020b66:	83 c4 10             	add    esp,0x10
c0020b69:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020b70:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020b76:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020b7d:	84 c0                	test   al,al
c0020b7f:	75 07                	jne    c0020b88 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020b81:	b8 07 00 00 00       	mov    eax,0x7
c0020b86:	eb 17                	jmp    c0020b9f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b88:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020b8f:	85 c0                	test   eax,eax
c0020b91:	75 07                	jne    c0020b9a <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020b93:	b8 00 00 00 00       	mov    eax,0x0
c0020b98:	eb 05                	jmp    c0020b9f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b9a:	b8 01 00 00 00       	mov    eax,0x1
c0020b9f:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020ba5:	c3                   	ret    

c0020ba6 <FAT::read(void*, unsigned long, void*, int*)>:
c0020ba6:	83 ec 1c             	sub    esp,0x1c
c0020ba9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020bae:	74 07                	je     c0020bb7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020bb0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020bb5:	75 07                	jne    c0020bbe <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020bb7:	b8 04 00 00 00       	mov    eax,0x4
c0020bbc:	eb 3d                	jmp    c0020bfb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020bbe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bc2:	50                   	push   eax
c0020bc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020bc7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020bcb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bcf:	e8 f9 47 fe ff       	call   c00053cd <f_read>
c0020bd4:	83 c4 10             	add    esp,0x10
c0020bd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bdf:	89 c2                	mov    edx,eax
c0020be1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020be5:	89 10                	mov    DWORD PTR [eax],edx
c0020be7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020beb:	85 c0                	test   eax,eax
c0020bed:	75 07                	jne    c0020bf6 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020bef:	b8 00 00 00 00       	mov    eax,0x0
c0020bf4:	eb 05                	jmp    c0020bfb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020bf6:	b8 01 00 00 00       	mov    eax,0x1
c0020bfb:	83 c4 1c             	add    esp,0x1c
c0020bfe:	c3                   	ret    
c0020bff:	90                   	nop

c0020c00 <FAT::write(void*, unsigned long, void*, int*)>:
c0020c00:	83 ec 1c             	sub    esp,0x1c
c0020c03:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c08:	74 07                	je     c0020c11 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020c0a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c0f:	75 07                	jne    c0020c18 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020c11:	b8 04 00 00 00       	mov    eax,0x4
c0020c16:	eb 3d                	jmp    c0020c55 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c18:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c1c:	50                   	push   eax
c0020c1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c29:	e8 1f 4a fe ff       	call   c000564d <f_write>
c0020c2e:	83 c4 10             	add    esp,0x10
c0020c31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c39:	89 c2                	mov    edx,eax
c0020c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c3f:	89 10                	mov    DWORD PTR [eax],edx
c0020c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c45:	85 c0                	test   eax,eax
c0020c47:	75 07                	jne    c0020c50 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020c49:	b8 00 00 00 00       	mov    eax,0x0
c0020c4e:	eb 05                	jmp    c0020c55 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020c50:	b8 01 00 00 00       	mov    eax,0x1
c0020c55:	83 c4 1c             	add    esp,0x1c
c0020c58:	c3                   	ret    
c0020c59:	90                   	nop

c0020c5a <FAT::close(void*)>:
c0020c5a:	83 ec 1c             	sub    esp,0x1c
c0020c5d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c62:	75 07                	jne    c0020c6b <FAT::close(void*)+0x11>
c0020c64:	b8 04 00 00 00       	mov    eax,0x4
c0020c69:	eb 36                	jmp    c0020ca1 <FAT::close(void*)+0x47>
c0020c6b:	83 ec 0c             	sub    esp,0xc
c0020c6e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c72:	e8 6c 4e fe ff       	call   c0005ae3 <f_close>
c0020c77:	83 c4 10             	add    esp,0x10
c0020c7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c7e:	83 ec 0c             	sub    esp,0xc
c0020c81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c85:	e8 c9 eb fe ff       	call   c000f853 <free>
c0020c8a:	83 c4 10             	add    esp,0x10
c0020c8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c91:	85 c0                	test   eax,eax
c0020c93:	75 07                	jne    c0020c9c <FAT::close(void*)+0x42>
c0020c95:	b8 00 00 00 00       	mov    eax,0x0
c0020c9a:	eb 05                	jmp    c0020ca1 <FAT::close(void*)+0x47>
c0020c9c:	b8 01 00 00 00       	mov    eax,0x1
c0020ca1:	83 c4 1c             	add    esp,0x1c
c0020ca4:	c3                   	ret    
c0020ca5:	90                   	nop

c0020ca6 <FAT::closeDir(void*)>:
c0020ca6:	83 ec 1c             	sub    esp,0x1c
c0020ca9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cae:	75 07                	jne    c0020cb7 <FAT::closeDir(void*)+0x11>
c0020cb0:	b8 04 00 00 00       	mov    eax,0x4
c0020cb5:	eb 36                	jmp    c0020ced <FAT::closeDir(void*)+0x47>
c0020cb7:	83 ec 0c             	sub    esp,0xc
c0020cba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cbe:	e8 08 54 fe ff       	call   c00060cb <f_closedir>
c0020cc3:	83 c4 10             	add    esp,0x10
c0020cc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cca:	83 ec 0c             	sub    esp,0xc
c0020ccd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cd1:	e8 7d eb fe ff       	call   c000f853 <free>
c0020cd6:	83 c4 10             	add    esp,0x10
c0020cd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cdd:	85 c0                	test   eax,eax
c0020cdf:	75 07                	jne    c0020ce8 <FAT::closeDir(void*)+0x42>
c0020ce1:	b8 00 00 00 00       	mov    eax,0x0
c0020ce6:	eb 05                	jmp    c0020ced <FAT::closeDir(void*)+0x47>
c0020ce8:	b8 01 00 00 00       	mov    eax,0x1
c0020ced:	83 c4 1c             	add    esp,0x1c
c0020cf0:	c3                   	ret    
c0020cf1:	90                   	nop

c0020cf2 <FAT::seek(void*, unsigned long long)>:
c0020cf2:	83 ec 2c             	sub    esp,0x2c
c0020cf5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020cf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020cfd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020d01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d05:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020d0a:	75 07                	jne    c0020d13 <FAT::seek(void*, unsigned long long)+0x21>
c0020d0c:	b8 04 00 00 00       	mov    eax,0x4
c0020d11:	eb 2f                	jmp    c0020d42 <FAT::seek(void*, unsigned long long)+0x50>
c0020d13:	83 ec 04             	sub    esp,0x4
c0020d16:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d1a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020d1e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020d22:	e8 eb 4d fe ff       	call   c0005b12 <f_lseek>
c0020d27:	83 c4 10             	add    esp,0x10
c0020d2a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d32:	85 c0                	test   eax,eax
c0020d34:	75 07                	jne    c0020d3d <FAT::seek(void*, unsigned long long)+0x4b>
c0020d36:	b8 00 00 00 00       	mov    eax,0x0
c0020d3b:	eb 05                	jmp    c0020d42 <FAT::seek(void*, unsigned long long)+0x50>
c0020d3d:	b8 01 00 00 00       	mov    eax,0x1
c0020d42:	83 c4 2c             	add    esp,0x2c
c0020d45:	c3                   	ret    

c0020d46 <fatWrapperReadDisk>:
c0020d46:	83 ec 1c             	sub    esp,0x1c
c0020d49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d4d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d55:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020d5c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020d60:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d65:	8b 04 85 80 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1680]
c0020d6c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020d70:	83 ec 0c             	sub    esp,0xc
c0020d73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d77:	52                   	push   edx
c0020d78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d80:	50                   	push   eax
c0020d81:	e8 62 59 ff ff       	call   c00166e8 <LogicalDisk::read(unsigned long long, int, void*)>
c0020d86:	83 c4 20             	add    esp,0x20
c0020d89:	83 c4 1c             	add    esp,0x1c
c0020d8c:	c3                   	ret    

c0020d8d <fatWrapperWriteDisk>:
c0020d8d:	83 ec 1c             	sub    esp,0x1c
c0020d90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d94:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d98:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020d9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020da3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020da7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dac:	8b 04 85 80 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1680]
c0020db3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020db7:	83 ec 0c             	sub    esp,0xc
c0020dba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dbe:	52                   	push   edx
c0020dbf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020dc7:	50                   	push   eax
c0020dc8:	e8 87 59 ff ff       	call   c0016754 <LogicalDisk::write(unsigned long long, int, void*)>
c0020dcd:	83 c4 20             	add    esp,0x20
c0020dd0:	83 c4 1c             	add    esp,0x1c
c0020dd3:	c3                   	ret    

c0020dd4 <fatWrapperIoctl>:
c0020dd4:	53                   	push   ebx
c0020dd5:	83 ec 28             	sub    esp,0x28
c0020dd8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ddc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020de0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020de4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020de8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020ded:	75 31                	jne    c0020e20 <fatWrapperIoctl+0x4c>
c0020def:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020df3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020df7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dfc:	8b 04 85 80 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1680]
c0020e03:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e09:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e0f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e13:	66 89 02             	mov    WORD PTR [edx],ax
c0020e16:	b8 00 00 00 00       	mov    eax,0x0
c0020e1b:	e9 b2 00 00 00       	jmp    c0020ed2 <fatWrapperIoctl+0xfe>
c0020e20:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020e25:	75 6a                	jne    c0020e91 <fatWrapperIoctl+0xbd>
c0020e27:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e2f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e34:	8b 04 85 80 e9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1680]
c0020e3b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020e41:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020e47:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020e4d:	89 c8                	mov    eax,ecx
c0020e4f:	89 da                	mov    edx,ebx
c0020e51:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020e55:	c1 e0 0a             	shl    eax,0xa
c0020e58:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020e5d:	8b 0c 8d 80 e9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1680]
c0020e64:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020e6a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020e70:	89 cb                	mov    ebx,ecx
c0020e72:	c1 fb 1f             	sar    ebx,0x1f
c0020e75:	53                   	push   ebx
c0020e76:	51                   	push   ecx
c0020e77:	52                   	push   edx
c0020e78:	50                   	push   eax
c0020e79:	e8 be 5a 00 00       	call   c002693c <__udivdi3>
c0020e7e:	83 c4 10             	add    esp,0x10
c0020e81:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020e85:	89 01                	mov    DWORD PTR [ecx],eax
c0020e87:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020e8a:	b8 00 00 00 00       	mov    eax,0x0
c0020e8f:	eb 41                	jmp    c0020ed2 <fatWrapperIoctl+0xfe>
c0020e91:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020e96:	75 07                	jne    c0020e9f <fatWrapperIoctl+0xcb>
c0020e98:	b8 00 00 00 00       	mov    eax,0x0
c0020e9d:	eb 33                	jmp    c0020ed2 <fatWrapperIoctl+0xfe>
c0020e9f:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020ea4:	75 19                	jne    c0020ebf <fatWrapperIoctl+0xeb>
c0020ea6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020eaa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020eae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020eb2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020eb8:	b8 00 00 00 00       	mov    eax,0x0
c0020ebd:	eb 13                	jmp    c0020ed2 <fatWrapperIoctl+0xfe>
c0020ebf:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020ec4:	75 07                	jne    c0020ecd <fatWrapperIoctl+0xf9>
c0020ec6:	b8 00 00 00 00       	mov    eax,0x0
c0020ecb:	eb 05                	jmp    c0020ed2 <fatWrapperIoctl+0xfe>
c0020ecd:	b8 04 00 00 00       	mov    eax,0x4
c0020ed2:	83 c4 28             	add    esp,0x28
c0020ed5:	5b                   	pop    ebx
c0020ed6:	c3                   	ret    
c0020ed7:	90                   	nop

c0020ed8 <FAT::FAT()>:
c0020ed8:	83 ec 1c             	sub    esp,0x1c
c0020edb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020edf:	83 ec 0c             	sub    esp,0xc
c0020ee2:	50                   	push   eax
c0020ee3:	e8 ba 22 ff ff       	call   c00131a2 <Filesystem::Filesystem()>
c0020ee8:	83 c4 10             	add    esp,0x10
c0020eeb:	ba d0 c7 02 c0       	mov    edx,0xc002c7d0
c0020ef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ef4:	89 10                	mov    DWORD PTR [eax],edx
c0020ef6:	c7 05 a0 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00319a0,0x0
c0020f00:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f08:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020f0d:	7f 15                	jg     c0020f24 <FAT::FAT()+0x4c>
c0020f0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f13:	c7 04 85 c0 19 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce640],0xffffffff
c0020f1e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020f22:	eb e4                	jmp    c0020f08 <FAT::FAT()+0x30>
c0020f24:	90                   	nop
c0020f25:	83 c4 1c             	add    esp,0x1c
c0020f28:	c3                   	ret    
c0020f29:	90                   	nop

c0020f2a <FAT::fixFilepath(char*)>:
c0020f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f2e:	8a 00                	mov    al,BYTE PTR [eax]
c0020f30:	3c 40                	cmp    al,0x40
c0020f32:	7e 2c                	jle    c0020f60 <FAT::fixFilepath(char*)+0x36>
c0020f34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f38:	8a 00                	mov    al,BYTE PTR [eax]
c0020f3a:	83 e8 41             	sub    eax,0x41
c0020f3d:	88 c2                	mov    dl,al
c0020f3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f43:	88 10                	mov    BYTE PTR [eax],dl
c0020f45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f49:	8a 00                	mov    al,BYTE PTR [eax]
c0020f4b:	0f be c0             	movsx  eax,al
c0020f4e:	8b 04 85 c0 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce640]
c0020f55:	83 c0 30             	add    eax,0x30
c0020f58:	88 c2                	mov    dl,al
c0020f5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f5e:	88 10                	mov    BYTE PTR [eax],dl
c0020f60:	90                   	nop
c0020f61:	c3                   	ret    

c0020f62 <FAT::open(char const*, void**, FileOpenMode)>:
c0020f62:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020f68:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020f70:	74 0a                	je     c0020f7c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020f72:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020f7a:	75 0a                	jne    c0020f86 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020f7c:	b8 04 00 00 00       	mov    eax,0x4
c0020f81:	e9 fd 00 00 00       	jmp    c0021083 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020f86:	83 ec 08             	sub    esp,0x8
c0020f89:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f90:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f94:	50                   	push   eax
c0020f95:	e8 9a f8 fd ff       	call   c0000834 <strcpy>
c0020f9a:	83 c4 10             	add    esp,0x10
c0020f9d:	83 ec 08             	sub    esp,0x8
c0020fa0:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020fa4:	50                   	push   eax
c0020fa5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fac:	e8 79 ff ff ff       	call   c0020f2a <FAT::fixFilepath(char*)>
c0020fb1:	83 c4 10             	add    esp,0x10
c0020fb4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020fbc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020fc3:	83 e0 01             	and    eax,0x1
c0020fc6:	74 08                	je     c0020fd0 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020fc8:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020fd0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020fd7:	83 e0 04             	and    eax,0x4
c0020fda:	74 10                	je     c0020fec <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020fdc:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020fe4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020fec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ff3:	83 e0 02             	and    eax,0x2
c0020ff6:	74 08                	je     c0021000 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020ff8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021000:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021007:	83 e0 08             	and    eax,0x8
c002100a:	74 08                	je     c0021014 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002100c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021014:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002101b:	83 e0 10             	and    eax,0x10
c002101e:	74 08                	je     c0021028 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021020:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021028:	83 ec 0c             	sub    esp,0xc
c002102b:	68 50 02 00 00       	push   0x250
c0021030:	e8 0e e8 fe ff       	call   c000f843 <malloc>
c0021035:	83 c4 10             	add    esp,0x10
c0021038:	89 c2                	mov    edx,eax
c002103a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021041:	89 10                	mov    DWORD PTR [eax],edx
c0021043:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002104b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021052:	8b 00                	mov    eax,DWORD PTR [eax]
c0021054:	83 ec 04             	sub    esp,0x4
c0021057:	52                   	push   edx
c0021058:	8d 54 24 10          	lea    edx,[esp+0x10]
c002105c:	52                   	push   edx
c002105d:	50                   	push   eax
c002105e:	e8 2e 3f fe ff       	call   c0004f91 <f_open>
c0021063:	83 c4 10             	add    esp,0x10
c0021066:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002106d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021075:	74 07                	je     c002107e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021077:	b8 01 00 00 00       	mov    eax,0x1
c002107c:	eb 05                	jmp    c0021083 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002107e:	b8 00 00 00 00       	mov    eax,0x0
c0021083:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021089:	c3                   	ret    

c002108a <FAT::openDir(char const*, void**)>:
c002108a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021090:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021098:	74 0a                	je     c00210a4 <FAT::openDir(char const*, void**)+0x1a>
c002109a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210a2:	75 07                	jne    c00210ab <FAT::openDir(char const*, void**)+0x21>
c00210a4:	b8 04 00 00 00       	mov    eax,0x4
c00210a9:	eb 7d                	jmp    c0021128 <FAT::openDir(char const*, void**)+0x9e>
c00210ab:	83 ec 08             	sub    esp,0x8
c00210ae:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210b9:	50                   	push   eax
c00210ba:	e8 75 f7 fd ff       	call   c0000834 <strcpy>
c00210bf:	83 c4 10             	add    esp,0x10
c00210c2:	83 ec 08             	sub    esp,0x8
c00210c5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210c9:	50                   	push   eax
c00210ca:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210d1:	e8 54 fe ff ff       	call   c0020f2a <FAT::fixFilepath(char*)>
c00210d6:	83 c4 10             	add    esp,0x10
c00210d9:	83 ec 0c             	sub    esp,0xc
c00210dc:	6a 4c                	push   0x4c
c00210de:	e8 60 e7 fe ff       	call   c000f843 <malloc>
c00210e3:	83 c4 10             	add    esp,0x10
c00210e6:	89 c2                	mov    edx,eax
c00210e8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210ef:	89 10                	mov    DWORD PTR [eax],edx
c00210f1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00210fa:	83 ec 08             	sub    esp,0x8
c00210fd:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021101:	52                   	push   edx
c0021102:	50                   	push   eax
c0021103:	e8 c1 4e fe ff       	call   c0005fc9 <f_opendir>
c0021108:	83 c4 10             	add    esp,0x10
c002110b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021112:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002111a:	74 07                	je     c0021123 <FAT::openDir(char const*, void**)+0x99>
c002111c:	b8 01 00 00 00       	mov    eax,0x1
c0021121:	eb 05                	jmp    c0021128 <FAT::openDir(char const*, void**)+0x9e>
c0021123:	b8 00 00 00 00       	mov    eax,0x0
c0021128:	81 c4 1c 01 00 00    	add    esp,0x11c
c002112e:	c3                   	ret    
c002112f:	90                   	nop

c0021130 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021130:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021136:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002113e:	75 0a                	jne    c002114a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021140:	b8 04 00 00 00       	mov    eax,0x4
c0021145:	e9 c9 00 00 00       	jmp    c0021213 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002114a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021152:	75 0a                	jne    c002115e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021154:	b8 04 00 00 00       	mov    eax,0x4
c0021159:	e9 b5 00 00 00       	jmp    c0021213 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002115e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021166:	75 0a                	jne    c0021172 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021168:	b8 04 00 00 00       	mov    eax,0x4
c002116d:	e9 a1 00 00 00       	jmp    c0021213 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021172:	83 ec 08             	sub    esp,0x8
c0021175:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002117c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021183:	50                   	push   eax
c0021184:	e8 ab f6 fd ff       	call   c0000834 <strcpy>
c0021189:	83 c4 10             	add    esp,0x10
c002118c:	83 ec 08             	sub    esp,0x8
c002118f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021196:	50                   	push   eax
c0021197:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002119e:	e8 87 fd ff ff       	call   c0020f2a <FAT::fixFilepath(char*)>
c00211a3:	83 c4 10             	add    esp,0x10
c00211a6:	83 ec 08             	sub    esp,0x8
c00211a9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211ad:	50                   	push   eax
c00211ae:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00211b5:	50                   	push   eax
c00211b6:	e8 cd 4f fe ff       	call   c0006188 <f_stat>
c00211bb:	83 c4 10             	add    esp,0x10
c00211be:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00211c5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00211cc:	85 c0                	test   eax,eax
c00211ce:	74 07                	je     c00211d7 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00211d0:	83 f8 04             	cmp    eax,0x4
c00211d3:	74 32                	je     c0021207 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00211d5:	eb 37                	jmp    c002120e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00211d7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00211db:	0f b6 c0             	movzx  eax,al
c00211de:	83 e0 10             	and    eax,0x10
c00211e1:	0f 95 c2             	setne  dl
c00211e4:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00211eb:	88 10                	mov    BYTE PTR [eax],dl
c00211ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00211f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00211f4:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00211fb:	89 01                	mov    DWORD PTR [ecx],eax
c00211fd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021200:	b8 00 00 00 00       	mov    eax,0x0
c0021205:	eb 0c                	jmp    c0021213 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021207:	b8 02 00 00 00       	mov    eax,0x2
c002120c:	eb 05                	jmp    c0021213 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002120e:	b8 01 00 00 00       	mov    eax,0x1
c0021213:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021219:	c3                   	ret    

c002121a <FAT::unlink(char const*)>:
c002121a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021220:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021228:	75 07                	jne    c0021231 <FAT::unlink(char const*)+0x17>
c002122a:	b8 04 00 00 00       	mov    eax,0x4
c002122f:	eb 5c                	jmp    c002128d <FAT::unlink(char const*)+0x73>
c0021231:	83 ec 08             	sub    esp,0x8
c0021234:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002123b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002123f:	50                   	push   eax
c0021240:	e8 ef f5 fd ff       	call   c0000834 <strcpy>
c0021245:	83 c4 10             	add    esp,0x10
c0021248:	83 ec 08             	sub    esp,0x8
c002124b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002124f:	50                   	push   eax
c0021250:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021257:	e8 ce fc ff ff       	call   c0020f2a <FAT::fixFilepath(char*)>
c002125c:	83 c4 10             	add    esp,0x10
c002125f:	83 ec 0c             	sub    esp,0xc
c0021262:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021266:	50                   	push   eax
c0021267:	e8 6e 52 fe ff       	call   c00064da <f_unlink>
c002126c:	83 c4 10             	add    esp,0x10
c002126f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021276:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002127d:	85 c0                	test   eax,eax
c002127f:	75 07                	jne    c0021288 <FAT::unlink(char const*)+0x6e>
c0021281:	b8 00 00 00 00       	mov    eax,0x0
c0021286:	eb 05                	jmp    c002128d <FAT::unlink(char const*)+0x73>
c0021288:	b8 01 00 00 00       	mov    eax,0x1
c002128d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021293:	c3                   	ret    

c0021294 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021294:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002129a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00212a1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00212a8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00212ac:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00212b0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00212b8:	75 0a                	jne    c00212c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00212ba:	b8 04 00 00 00       	mov    eax,0x4
c00212bf:	e9 1c 01 00 00       	jmp    c00213e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00212c4:	83 ec 08             	sub    esp,0x8
c00212c7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00212ce:	8d 44 24 24          	lea    eax,[esp+0x24]
c00212d2:	50                   	push   eax
c00212d3:	e8 5c f5 fd ff       	call   c0000834 <strcpy>
c00212d8:	83 c4 10             	add    esp,0x10
c00212db:	83 ec 08             	sub    esp,0x8
c00212de:	8d 44 24 20          	lea    eax,[esp+0x20]
c00212e2:	50                   	push   eax
c00212e3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00212ea:	e8 3b fc ff ff       	call   c0020f2a <FAT::fixFilepath(char*)>
c00212ef:	83 c4 10             	add    esp,0x10
c00212f2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00212fa:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021302:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021307:	83 e0 01             	and    eax,0x1
c002130a:	74 08                	je     c0021314 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002130c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021314:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021319:	83 e0 02             	and    eax,0x2
c002131c:	74 08                	je     c0021326 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002131e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021326:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002132b:	83 e0 04             	and    eax,0x4
c002132e:	74 08                	je     c0021338 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021330:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021338:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002133d:	83 e0 08             	and    eax,0x8
c0021340:	74 08                	je     c002134a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021342:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002134a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002134f:	83 e0 01             	and    eax,0x1
c0021352:	74 08                	je     c002135c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021354:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002135c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021361:	83 e0 02             	and    eax,0x2
c0021364:	74 08                	je     c002136e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021366:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002136e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021373:	83 e0 04             	and    eax,0x4
c0021376:	74 08                	je     c0021380 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021378:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021380:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021385:	83 e0 08             	and    eax,0x8
c0021388:	74 08                	je     c0021392 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002138a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021392:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021399:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00213a0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00213a8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00213b0:	83 ec 04             	sub    esp,0x4
c00213b3:	52                   	push   edx
c00213b4:	50                   	push   eax
c00213b5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00213b9:	50                   	push   eax
c00213ba:	e8 bd 57 fe ff       	call   c0006b7c <f_chmod>
c00213bf:	83 c4 10             	add    esp,0x10
c00213c2:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00213c9:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00213d0:	85 c0                	test   eax,eax
c00213d2:	75 07                	jne    c00213db <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00213d4:	b8 00 00 00 00       	mov    eax,0x0
c00213d9:	eb 05                	jmp    c00213e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00213db:	b8 01 00 00 00       	mov    eax,0x1
c00213e0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00213e6:	c3                   	ret    
c00213e7:	90                   	nop

c00213e8 <FAT::rename(char const*, char const*)>:
c00213e8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00213ee:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00213f6:	74 0a                	je     c0021402 <FAT::rename(char const*, char const*)+0x1a>
c00213f8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021400:	75 0a                	jne    c002140c <FAT::rename(char const*, char const*)+0x24>
c0021402:	b8 04 00 00 00       	mov    eax,0x4
c0021407:	e9 98 00 00 00       	jmp    c00214a4 <FAT::rename(char const*, char const*)+0xbc>
c002140c:	83 ec 08             	sub    esp,0x8
c002140f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021416:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002141d:	50                   	push   eax
c002141e:	e8 11 f4 fd ff       	call   c0000834 <strcpy>
c0021423:	83 c4 10             	add    esp,0x10
c0021426:	83 ec 08             	sub    esp,0x8
c0021429:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021430:	50                   	push   eax
c0021431:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021438:	e8 ed fa ff ff       	call   c0020f2a <FAT::fixFilepath(char*)>
c002143d:	83 c4 10             	add    esp,0x10
c0021440:	83 ec 08             	sub    esp,0x8
c0021443:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002144a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002144e:	50                   	push   eax
c002144f:	e8 e0 f3 fd ff       	call   c0000834 <strcpy>
c0021454:	83 c4 10             	add    esp,0x10
c0021457:	83 ec 08             	sub    esp,0x8
c002145a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002145e:	50                   	push   eax
c002145f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021466:	e8 bf fa ff ff       	call   c0020f2a <FAT::fixFilepath(char*)>
c002146b:	83 c4 10             	add    esp,0x10
c002146e:	83 ec 08             	sub    esp,0x8
c0021471:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021475:	50                   	push   eax
c0021476:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002147d:	50                   	push   eax
c002147e:	e8 06 54 fe ff       	call   c0006889 <f_rename>
c0021483:	83 c4 10             	add    esp,0x10
c0021486:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002148d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021494:	85 c0                	test   eax,eax
c0021496:	75 07                	jne    c002149f <FAT::rename(char const*, char const*)+0xb7>
c0021498:	b8 00 00 00 00       	mov    eax,0x0
c002149d:	eb 05                	jmp    c00214a4 <FAT::rename(char const*, char const*)+0xbc>
c002149f:	b8 01 00 00 00       	mov    eax,0x1
c00214a4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00214aa:	c3                   	ret    
c00214ab:	90                   	nop

c00214ac <FAT::mkdir(char const*)>:
c00214ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00214b2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00214ba:	75 07                	jne    c00214c3 <FAT::mkdir(char const*)+0x17>
c00214bc:	b8 04 00 00 00       	mov    eax,0x4
c00214c1:	eb 5c                	jmp    c002151f <FAT::mkdir(char const*)+0x73>
c00214c3:	83 ec 08             	sub    esp,0x8
c00214c6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00214cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214d1:	50                   	push   eax
c00214d2:	e8 5d f3 fd ff       	call   c0000834 <strcpy>
c00214d7:	83 c4 10             	add    esp,0x10
c00214da:	83 ec 08             	sub    esp,0x8
c00214dd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214e1:	50                   	push   eax
c00214e2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00214e9:	e8 3c fa ff ff       	call   c0020f2a <FAT::fixFilepath(char*)>
c00214ee:	83 c4 10             	add    esp,0x10
c00214f1:	83 ec 0c             	sub    esp,0xc
c00214f4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214f8:	50                   	push   eax
c00214f9:	e8 5f 51 fe ff       	call   c000665d <f_mkdir>
c00214fe:	83 c4 10             	add    esp,0x10
c0021501:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021508:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002150f:	85 c0                	test   eax,eax
c0021511:	75 07                	jne    c002151a <FAT::mkdir(char const*)+0x6e>
c0021513:	b8 00 00 00 00       	mov    eax,0x0
c0021518:	eb 05                	jmp    c002151f <FAT::mkdir(char const*)+0x73>
c002151a:	b8 01 00 00 00       	mov    eax,0x1
c002151f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021525:	c3                   	ret    

c0021526 <FAT::exists(char const*)>:
c0021526:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002152c:	83 ec 08             	sub    esp,0x8
c002152f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021536:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002153a:	50                   	push   eax
c002153b:	e8 f4 f2 fd ff       	call   c0000834 <strcpy>
c0021540:	83 c4 10             	add    esp,0x10
c0021543:	83 ec 08             	sub    esp,0x8
c0021546:	8d 44 24 08          	lea    eax,[esp+0x8]
c002154a:	50                   	push   eax
c002154b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021552:	e8 d3 f9 ff ff       	call   c0020f2a <FAT::fixFilepath(char*)>
c0021557:	83 c4 10             	add    esp,0x10
c002155a:	83 ec 08             	sub    esp,0x8
c002155d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021564:	50                   	push   eax
c0021565:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021569:	50                   	push   eax
c002156a:	e8 19 4c fe ff       	call   c0006188 <f_stat>
c002156f:	83 c4 10             	add    esp,0x10
c0021572:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021579:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021580:	85 c0                	test   eax,eax
c0021582:	75 04                	jne    c0021588 <FAT::exists(char const*)+0x62>
c0021584:	b0 01                	mov    al,0x1
c0021586:	eb 02                	jmp    c002158a <FAT::exists(char const*)+0x64>
c0021588:	b0 00                	mov    al,0x0
c002158a:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021590:	c3                   	ret    
c0021591:	90                   	nop

c0021592 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021592:	b8 08 00 00 00       	mov    eax,0x8
c0021597:	c3                   	ret    

c0021598 <ISO9660::seek(void*, unsigned long long)>:
c0021598:	53                   	push   ebx
c0021599:	b8 04 00 00 00       	mov    eax,0x4
c002159e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00215a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00215a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00215aa:	85 d2                	test   edx,edx
c00215ac:	74 17                	je     c00215c5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00215ae:	89 c8                	mov    eax,ecx
c00215b0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00215b3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00215b6:	b8 01 00 00 00       	mov    eax,0x1
c00215bb:	73 08                	jae    c00215c5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00215bd:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00215c0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00215c3:	31 c0                	xor    eax,eax
c00215c5:	5b                   	pop    ebx
c00215c6:	c3                   	ret    
c00215c7:	90                   	nop

c00215c8 <ISO9660::tell(void*, unsigned long long*)>:
c00215c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00215cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215d0:	85 d2                	test   edx,edx
c00215d2:	74 12                	je     c00215e6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00215d4:	85 c0                	test   eax,eax
c00215d6:	74 0e                	je     c00215e6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00215d8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00215db:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00215de:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00215e1:	89 10                	mov    DWORD PTR [eax],edx
c00215e3:	31 c0                	xor    eax,eax
c00215e5:	c3                   	ret    
c00215e6:	b8 04 00 00 00       	mov    eax,0x4
c00215eb:	c3                   	ret    

c00215ec <ISO9660::getName()>:
c00215ec:	b8 2c c8 02 c0       	mov    eax,0xc002c82c
c00215f1:	c3                   	ret    

c00215f2 <ISO9660::stat(void*, unsigned long long*)>:
c00215f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00215f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215fa:	85 d2                	test   edx,edx
c00215fc:	74 12                	je     c0021610 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00215fe:	85 c0                	test   eax,eax
c0021600:	74 0e                	je     c0021610 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021602:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021605:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021608:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002160b:	89 10                	mov    DWORD PTR [eax],edx
c002160d:	31 c0                	xor    eax,eax
c002160f:	c3                   	ret    
c0021610:	b8 04 00 00 00       	mov    eax,0x4
c0021615:	c3                   	ret    

c0021616 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021616:	b8 01 00 00 00       	mov    eax,0x1
c002161b:	c3                   	ret    

c002161c <ISO9660::unlink(char const*)>:
c002161c:	b8 01 00 00 00       	mov    eax,0x1
c0021621:	c3                   	ret    

c0021622 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021622:	b8 01 00 00 00       	mov    eax,0x1
c0021627:	c3                   	ret    

c0021628 <ISO9660::rename(char const*, char const*)>:
c0021628:	b8 01 00 00 00       	mov    eax,0x1
c002162d:	c3                   	ret    

c002162e <ISO9660::mkdir(char const*)>:
c002162e:	b8 01 00 00 00       	mov    eax,0x1
c0021633:	c3                   	ret    

c0021634 <ISO9660::close(void*)>:
c0021634:	83 ec 0c             	sub    esp,0xc
c0021637:	b8 04 00 00 00       	mov    eax,0x4
c002163c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021640:	85 d2                	test   edx,edx
c0021642:	74 0e                	je     c0021652 <ISO9660::close(void*)+0x1e>
c0021644:	83 ec 0c             	sub    esp,0xc
c0021647:	52                   	push   edx
c0021648:	e8 06 e2 fe ff       	call   c000f853 <free>
c002164d:	83 c4 10             	add    esp,0x10
c0021650:	31 c0                	xor    eax,eax
c0021652:	83 c4 0c             	add    esp,0xc
c0021655:	c3                   	ret    

c0021656 <ISO9660::closeDir(void*)>:
c0021656:	83 ec 0c             	sub    esp,0xc
c0021659:	b8 04 00 00 00       	mov    eax,0x4
c002165e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021662:	85 d2                	test   edx,edx
c0021664:	74 0e                	je     c0021674 <ISO9660::closeDir(void*)+0x1e>
c0021666:	83 ec 0c             	sub    esp,0xc
c0021669:	52                   	push   edx
c002166a:	e8 e4 e1 fe ff       	call   c000f853 <free>
c002166f:	83 c4 10             	add    esp,0x10
c0021672:	31 c0                	xor    eax,eax
c0021674:	83 c4 0c             	add    esp,0xc
c0021677:	c3                   	ret    

c0021678 <ISO9660::~ISO9660()>:
c0021678:	83 ec 0c             	sub    esp,0xc
c002167b:	ba 90 c8 02 c0       	mov    edx,0xc002c890
c0021680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021684:	89 10                	mov    DWORD PTR [eax],edx
c0021686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002168a:	83 ec 0c             	sub    esp,0xc
c002168d:	50                   	push   eax
c002168e:	e8 33 1b ff ff       	call   c00131c6 <Filesystem::~Filesystem()>
c0021693:	83 c4 10             	add    esp,0x10
c0021696:	90                   	nop
c0021697:	83 c4 0c             	add    esp,0xc
c002169a:	c3                   	ret    
c002169b:	90                   	nop

c002169c <ISO9660::~ISO9660()>:
c002169c:	83 ec 0c             	sub    esp,0xc
c002169f:	83 ec 0c             	sub    esp,0xc
c00216a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216a6:	e8 cd ff ff ff       	call   c0021678 <ISO9660::~ISO9660()>
c00216ab:	83 c4 10             	add    esp,0x10
c00216ae:	83 ec 08             	sub    esp,0x8
c00216b1:	6a 08                	push   0x8
c00216b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216b7:	e8 01 17 ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c00216bc:	83 c4 10             	add    esp,0x10
c00216bf:	83 c4 0c             	add    esp,0xc
c00216c2:	c3                   	ret    

c00216c3 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00216c3:	55                   	push   ebp
c00216c4:	31 c9                	xor    ecx,ecx
c00216c6:	57                   	push   edi
c00216c7:	56                   	push   esi
c00216c8:	53                   	push   ebx
c00216c9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00216cd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00216d1:	89 eb                	mov    ebx,ebp
c00216d3:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00216d7:	39 ce                	cmp    esi,ecx
c00216d9:	7e 17                	jle    c00216f2 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00216db:	31 d2                	xor    edx,edx
c00216dd:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00216e1:	7d 13                	jge    c00216f6 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00216e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00216e7:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00216ea:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00216ed:	75 0d                	jne    c00216fc <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00216ef:	42                   	inc    edx
c00216f0:	eb eb                	jmp    c00216dd <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00216f2:	31 c0                	xor    eax,eax
c00216f4:	eb 0a                	jmp    c0021700 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00216f6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00216fa:	eb 04                	jmp    c0021700 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00216fc:	41                   	inc    ecx
c00216fd:	43                   	inc    ebx
c00216fe:	eb d7                	jmp    c00216d7 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021700:	5b                   	pop    ebx
c0021701:	5e                   	pop    esi
c0021702:	5f                   	pop    edi
c0021703:	5d                   	pop    ebp
c0021704:	c3                   	ret    

c0021705 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021705:	56                   	push   esi
c0021706:	53                   	push   ebx
c0021707:	52                   	push   edx
c0021708:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002170c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021710:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021714:	39 0d a0 1a 03 c0    	cmp    DWORD PTR ds:0xc0031aa0,ecx
c002171a:	75 08                	jne    c0021724 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002171c:	38 05 f4 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8f4,al
c0021722:	74 2b                	je     c002174f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021724:	83 ec 0c             	sub    esp,0xc
c0021727:	a2 f4 d8 02 c0       	mov    ds:0xc002d8f4,al
c002172c:	68 c0 1a 03 c0       	push   0xc0031ac0
c0021731:	0f be c0             	movsx  eax,al
c0021734:	6a 01                	push   0x1
c0021736:	89 0d a0 1a 03 c0    	mov    DWORD PTR ds:0xc0031aa0,ecx
c002173c:	31 db                	xor    ebx,ebx
c002173e:	53                   	push   ebx
c002173f:	51                   	push   ecx
c0021740:	ff 34 85 7c e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1784]
c0021747:	e8 9c 4f ff ff       	call   c00166e8 <LogicalDisk::read(unsigned long long, int, void*)>
c002174c:	83 c4 20             	add    esp,0x20
c002174f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021757:	c7 44 24 14 c0 1a 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031ac0
c002175f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021763:	58                   	pop    eax
c0021764:	5b                   	pop    ebx
c0021765:	5e                   	pop    esi
c0021766:	e9 d9 ef fd ff       	jmp    c0000744 <memcpy>
c002176b:	90                   	nop

c002176c <ISO9660::tryMount(LogicalDisk*, int)>:
c002176c:	81 ec 10 08 00 00    	sub    esp,0x810
c0021772:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021779:	83 c0 41             	add    eax,0x41
c002177c:	0f be c0             	movsx  eax,al
c002177f:	50                   	push   eax
c0021780:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021784:	50                   	push   eax
c0021785:	6a 10                	push   0x10
c0021787:	e8 79 ff ff ff       	call   c0021705 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002178c:	83 c4 10             	add    esp,0x10
c002178f:	31 c0                	xor    eax,eax
c0021791:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021796:	75 1d                	jne    c00217b5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021798:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002179d:	75 16                	jne    c00217b5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002179f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00217a4:	75 0f                	jne    c00217b5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217a6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00217ab:	75 08                	jne    c00217b5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00217ad:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00217b2:	0f 94 c0             	sete   al
c00217b5:	81 c4 0c 08 00 00    	add    esp,0x80c
c00217bb:	c3                   	ret    

c00217bc <ISO9660::read(void*, unsigned long, void*, int*)>:
c00217bc:	55                   	push   ebp
c00217bd:	57                   	push   edi
c00217be:	56                   	push   esi
c00217bf:	53                   	push   ebx
c00217c0:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00217c6:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00217cd:	85 ed                	test   ebp,ebp
c00217cf:	0f 84 d6 01 00 00    	je     c00219ab <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00217d5:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00217dd:	0f 84 c8 01 00 00    	je     c00219ab <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00217e3:	b8 01 00 00 00       	mov    eax,0x1
c00217e8:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00217ec:	0f 85 be 01 00 00    	jne    c00219b0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00217f2:	31 d2                	xor    edx,edx
c00217f4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00217fb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00217fe:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021801:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021805:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021808:	89 04 24             	mov    DWORD PTR [esp],eax
c002180b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002180f:	01 f0                	add    eax,esi
c0021811:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021814:	11 fa                	adc    edx,edi
c0021816:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002181a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002181e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021822:	19 d1                	sbb    ecx,edx
c0021824:	72 0a                	jb     c0021830 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021826:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002182a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002182e:	eb 13                	jmp    c0021843 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021830:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021834:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021838:	29 f0                	sub    eax,esi
c002183a:	19 fa                	sbb    edx,edi
c002183c:	89 04 24             	mov    DWORD PTR [esp],eax
c002183f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021843:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021846:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021849:	0f a4 c2 0b          	shld   edx,eax,0xb
c002184d:	51                   	push   ecx
c002184e:	c1 e0 0b             	shl    eax,0xb
c0021851:	01 c6                	add    esi,eax
c0021853:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021857:	11 d7                	adc    edi,edx
c0021859:	50                   	push   eax
c002185a:	89 fa                	mov    edx,edi
c002185c:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021860:	89 f0                	mov    eax,esi
c0021862:	53                   	push   ebx
c0021863:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021867:	50                   	push   eax
c0021868:	e8 98 fe ff ff       	call   c0021705 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002186d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021871:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021874:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021878:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002187e:	83 c4 10             	add    esp,0x10
c0021881:	b8 00 08 00 00       	mov    eax,0x800
c0021886:	29 d0                	sub    eax,edx
c0021888:	39 c1                	cmp    ecx,eax
c002188a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002188e:	83 d9 00             	sbb    ecx,0x0
c0021891:	7d 1c                	jge    c00218af <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021893:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021898:	75 12                	jne    c00218ac <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c002189a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00218a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218a7:	e9 fb 00 00 00       	jmp    c00219a7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00218ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00218af:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00218b2:	31 d2                	xor    edx,edx
c00218b4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00218b8:	39 c2                	cmp    edx,eax
c00218ba:	7d 14                	jge    c00218d0 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00218bc:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00218c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218c7:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00218ca:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00218cd:	42                   	inc    edx
c00218ce:	eb e8                	jmp    c00218b8 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c00218d0:	89 c3                	mov    ebx,eax
c00218d2:	85 c0                	test   eax,eax
c00218d4:	79 02                	jns    c00218d8 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c00218d6:	31 db                	xor    ebx,ebx
c00218d8:	99                   	cdq    
c00218d9:	01 c3                	add    ebx,eax
c00218db:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c00218e2:	01 c6                	add    esi,eax
c00218e4:	11 d7                	adc    edi,edx
c00218e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00218ea:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00218ee:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00218f1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00218f5:	29 c6                	sub    esi,eax
c00218f7:	19 d7                	sbb    edi,edx
c00218f9:	89 34 24             	mov    DWORD PTR [esp],esi
c00218fc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021900:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021905:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021908:	b8 00 00 00 00       	mov    eax,0x0
c002190d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021911:	7d 3e                	jge    c0021951 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021913:	52                   	push   edx
c0021914:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021918:	50                   	push   eax
c0021919:	53                   	push   ebx
c002191a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002191e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021922:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021926:	50                   	push   eax
c0021927:	e8 d9 fd ff ff       	call   c0021705 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002192c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021934:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021939:	81 c3 00 08 00 00    	add    ebx,0x800
c002193f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021947:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002194c:	83 c4 10             	add    esp,0x10
c002194f:	eb af                	jmp    c0021900 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021951:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021955:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021958:	74 32                	je     c002198c <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c002195a:	50                   	push   eax
c002195b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002195f:	50                   	push   eax
c0021960:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021964:	50                   	push   eax
c0021965:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021969:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002196d:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021971:	56                   	push   esi
c0021972:	e8 8e fd ff ff       	call   c0021705 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021977:	83 c4 0c             	add    esp,0xc
c002197a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c002197e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021982:	50                   	push   eax
c0021983:	53                   	push   ebx
c0021984:	e8 bb ed fd ff       	call   c0000744 <memcpy>
c0021989:	83 c4 10             	add    esp,0x10
c002198c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021993:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021997:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002199b:	89 38                	mov    DWORD PTR [eax],edi
c002199d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219a1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00219a4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00219a7:	31 c0                	xor    eax,eax
c00219a9:	eb 05                	jmp    c00219b0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00219ab:	b8 04 00 00 00       	mov    eax,0x4
c00219b0:	81 c4 2c 08 00 00    	add    esp,0x82c
c00219b6:	5b                   	pop    ebx
c00219b7:	5e                   	pop    esi
c00219b8:	5f                   	pop    edi
c00219b9:	5d                   	pop    ebp
c00219ba:	c3                   	ret    
c00219bb:	90                   	nop

c00219bc <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00219bc:	55                   	push   ebp
c00219bd:	57                   	push   edi
c00219be:	56                   	push   esi
c00219bf:	53                   	push   ebx
c00219c0:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00219c6:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00219cd:	85 f6                	test   esi,esi
c00219cf:	0f 84 64 02 00 00    	je     c0021c39 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00219d5:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00219dd:	0f 84 56 02 00 00    	je     c0021c39 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00219e3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00219e6:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c00219e9:	75 0a                	jne    c00219f5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00219eb:	b8 07 00 00 00       	mov    eax,0x7
c00219f0:	e9 49 02 00 00       	jmp    c0021c3e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00219f5:	50                   	push   eax
c00219f6:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00219fa:	50                   	push   eax
c00219fb:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a02:	53                   	push   ebx
c0021a03:	8b 06                	mov    eax,DWORD PTR [esi]
c0021a05:	c1 e0 0b             	shl    eax,0xb
c0021a08:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021a0b:	c1 e8 0b             	shr    eax,0xb
c0021a0e:	50                   	push   eax
c0021a0f:	e8 f1 fc ff ff       	call   c0021705 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a14:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a17:	83 c4 10             	add    esp,0x10
c0021a1a:	89 c1                	mov    ecx,eax
c0021a1c:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021a1f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021a25:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021a28:	84 db                	test   bl,bl
c0021a2a:	0f 85 90 00 00 00    	jne    c0021ac0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021a30:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021a36:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021a3c:	29 c7                	sub    edi,eax
c0021a3e:	89 fb                	mov    ebx,edi
c0021a40:	c1 fb 1f             	sar    ebx,0x1f
c0021a43:	01 f8                	add    eax,edi
c0021a45:	11 da                	adc    edx,ebx
c0021a47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a4f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021a52:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021a55:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021a58:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021a5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a5e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a62:	89 d8                	mov    eax,ebx
c0021a64:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021a67:	ba 00 00 00 00       	mov    edx,0x0
c0021a6c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021a70:	b8 00 00 00 00       	mov    eax,0x0
c0021a75:	73 0b                	jae    c0021a82 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021a77:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021a7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021a7e:	29 f8                	sub    eax,edi
c0021a80:	19 da                	sbb    edx,ebx
c0021a82:	89 d3                	mov    ebx,edx
c0021a84:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021a87:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021a8a:	09 c3                	or     ebx,eax
c0021a8c:	0f 84 59 ff ff ff    	je     c00219eb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021a92:	55                   	push   ebp
c0021a93:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021a97:	50                   	push   eax
c0021a98:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021a9f:	53                   	push   ebx
c0021aa0:	8b 06                	mov    eax,DWORD PTR [esi]
c0021aa2:	c1 e0 0b             	shl    eax,0xb
c0021aa5:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021aa9:	c1 e8 0b             	shr    eax,0xb
c0021aac:	50                   	push   eax
c0021aad:	e8 53 fc ff ff       	call   c0021705 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ab2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021ab5:	83 c4 10             	add    esp,0x10
c0021ab8:	25 ff 07 00 00       	and    eax,0x7ff
c0021abd:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021ac0:	57                   	push   edi
c0021ac1:	6a 28                	push   0x28
c0021ac3:	6a 00                	push   0x0
c0021ac5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021ac9:	50                   	push   eax
c0021aca:	e8 a9 ec fd ff       	call   c0000778 <memset>
c0021acf:	31 d2                	xor    edx,edx
c0021ad1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021ad4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021ada:	89 f8                	mov    eax,edi
c0021adc:	83 c0 21             	add    eax,0x21
c0021adf:	83 d2 00             	adc    edx,0x0
c0021ae2:	89 c7                	mov    edi,eax
c0021ae4:	89 d5                	mov    ebp,edx
c0021ae6:	83 c4 10             	add    esp,0x10
c0021ae9:	31 c9                	xor    ecx,ecx
c0021aeb:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021af2:	83 f9 28             	cmp    ecx,0x28
c0021af5:	88 04 24             	mov    BYTE PTR [esp],al
c0021af8:	0f 94 c2             	sete   dl
c0021afb:	88 d0                	mov    al,dl
c0021afd:	ba ff 07 00 00       	mov    edx,0x7ff
c0021b02:	39 fa                	cmp    edx,edi
c0021b04:	ba 00 00 00 00       	mov    edx,0x0
c0021b09:	19 ea                	sbb    edx,ebp
c0021b0b:	0f 92 c2             	setb   dl
c0021b0e:	09 c2                	or     edx,eax
c0021b10:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021b14:	0f 94 c0             	sete   al
c0021b17:	08 d0                	or     al,dl
c0021b19:	75 16                	jne    c0021b31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b1b:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021b1f:	74 10                	je     c0021b31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021b21:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021b24:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021b28:	41                   	inc    ecx
c0021b29:	83 c7 01             	add    edi,0x1
c0021b2c:	83 d5 00             	adc    ebp,0x0
c0021b2f:	eb ba                	jmp    c0021aeb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021b31:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021b38:	83 ec 0c             	sub    esp,0xc
c0021b3b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021b3f:	57                   	push   edi
c0021b40:	e8 4f ec fd ff       	call   c0000794 <strlen>
c0021b45:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021b4d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021b51:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021b58:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b5b:	5a                   	pop    edx
c0021b5c:	25 ff 07 00 00       	and    eax,0x7ff
c0021b61:	01 c8                	add    eax,ecx
c0021b63:	59                   	pop    ecx
c0021b64:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021b6a:	83 e0 02             	and    eax,0x2
c0021b6d:	3c 01                	cmp    al,0x1
c0021b6f:	19 c0                	sbb    eax,eax
c0021b71:	83 c0 02             	add    eax,0x2
c0021b74:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021b78:	57                   	push   edi
c0021b79:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021b7d:	50                   	push   eax
c0021b7e:	e8 b1 ec fd ff       	call   c0000834 <strcpy>
c0021b83:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021b87:	83 c4 10             	add    esp,0x10
c0021b8a:	84 c0                	test   al,al
c0021b8c:	75 21                	jne    c0021baf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021b8e:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021b96:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021b9e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021ba6:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021bad:	eb 28                	jmp    c0021bd7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021baf:	fe c8                	dec    al
c0021bb1:	75 24                	jne    c0021bd7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021bb3:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021bbb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021bc3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021bcb:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021bd2:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021bd7:	0f b6 fb             	movzx  edi,bl
c0021bda:	31 db                	xor    ebx,ebx
c0021bdc:	50                   	push   eax
c0021bdd:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021be4:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021be8:	50                   	push   eax
c0021be9:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021bf0:	e8 4f eb fd ff       	call   c0000744 <memcpy>
c0021bf5:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021bfc:	89 f9                	mov    ecx,edi
c0021bfe:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021c04:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021c07:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021c0a:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021c0d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021c10:	83 c4 10             	add    esp,0x10
c0021c13:	39 c7                	cmp    edi,eax
c0021c15:	89 df                	mov    edi,ebx
c0021c17:	19 d7                	sbb    edi,edx
c0021c19:	72 10                	jb     c0021c2b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c1b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021c22:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021c29:	eb 0a                	jmp    c0021c35 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021c2b:	29 c8                	sub    eax,ecx
c0021c2d:	19 da                	sbb    edx,ebx
c0021c2f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021c32:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021c35:	31 c0                	xor    eax,eax
c0021c37:	eb 05                	jmp    c0021c3e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021c39:	b8 04 00 00 00       	mov    eax,0x4
c0021c3e:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021c44:	5b                   	pop    ebx
c0021c45:	5e                   	pop    esi
c0021c46:	5f                   	pop    edi
c0021c47:	5d                   	pop    ebp
c0021c48:	c3                   	ret    

c0021c49 <readRoot(unsigned int*, unsigned int*, char)>:
c0021c49:	81 ec 40 08 00 00    	sub    esp,0x840
c0021c4f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021c57:	50                   	push   eax
c0021c58:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021c5c:	50                   	push   eax
c0021c5d:	6a 10                	push   0x10
c0021c5f:	e8 a1 fa ff ff       	call   c0021705 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c64:	83 c4 0c             	add    esp,0xc
c0021c67:	6a 22                	push   0x22
c0021c69:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021c70:	50                   	push   eax
c0021c71:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021c75:	50                   	push   eax
c0021c76:	e8 c9 ea fd ff       	call   c0000744 <memcpy>
c0021c7b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021c82:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021c86:	89 10                	mov    DWORD PTR [eax],edx
c0021c88:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021c8f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021c93:	89 10                	mov    DWORD PTR [eax],edx
c0021c95:	b0 01                	mov    al,0x1
c0021c97:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021c9d:	c3                   	ret    

c0021c9e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021c9e:	55                   	push   ebp
c0021c9f:	57                   	push   edi
c0021ca0:	56                   	push   esi
c0021ca1:	53                   	push   ebx
c0021ca2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021ca8:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021caf:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021cb6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021cba:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021cbe:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021cc2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021cc6:	75 03                	jne    c0021ccb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021cc8:	83 c3 02             	add    ebx,0x2
c0021ccb:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021cce:	75 03                	jne    c0021cd3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021cd0:	43                   	inc    ebx
c0021cd1:	eb f8                	jmp    c0021ccb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021cd3:	51                   	push   ecx
c0021cd4:	68 00 01 00 00       	push   0x100
c0021cd9:	6a 00                	push   0x0
c0021cdb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021cdf:	50                   	push   eax
c0021ce0:	e8 93 ea fd ff       	call   c0000778 <memset>
c0021ce5:	83 c4 10             	add    esp,0x10
c0021ce8:	31 d2                	xor    edx,edx
c0021cea:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021ced:	84 c0                	test   al,al
c0021cef:	74 21                	je     c0021d12 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021cf1:	3c 2f                	cmp    al,0x2f
c0021cf3:	75 0b                	jne    c0021d00 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021cf5:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021cf9:	bd 01 00 00 00       	mov    ebp,0x1
c0021cfe:	eb 14                	jmp    c0021d14 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021d00:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021d03:	80 f9 19             	cmp    cl,0x19
c0021d06:	77 03                	ja     c0021d0b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021d08:	83 e8 20             	sub    eax,0x20
c0021d0b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021d0f:	42                   	inc    edx
c0021d10:	eb d8                	jmp    c0021cea <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021d12:	31 ed                	xor    ebp,ebp
c0021d14:	83 ec 0c             	sub    esp,0xc
c0021d17:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021d1e:	e8 20 db fe ff       	call   c000f843 <malloc>
c0021d23:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021d2a:	89 c6                	mov    esi,eax
c0021d2c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021d32:	c1 ef 0b             	shr    edi,0xb
c0021d35:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021d3c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021d40:	83 c4 10             	add    esp,0x10
c0021d43:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021d48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021d4c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021d53:	74 28                	je     c0021d7d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021d55:	52                   	push   edx
c0021d56:	57                   	push   edi
c0021d57:	50                   	push   eax
c0021d58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021d5c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021d63:	e8 9d f9 ff ff       	call   c0021705 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021d6c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021d73:	05 00 08 00 00       	add    eax,0x800
c0021d78:	83 c4 10             	add    esp,0x10
c0021d7b:	eb cb                	jmp    c0021d48 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021d7d:	83 ec 0c             	sub    esp,0xc
c0021d80:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021d84:	57                   	push   edi
c0021d85:	e8 0a ea fd ff       	call   c0000794 <strlen>
c0021d8a:	50                   	push   eax
c0021d8b:	57                   	push   edi
c0021d8c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021d93:	56                   	push   esi
c0021d94:	e8 2a f9 ff ff       	call   c00216c3 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021d99:	83 c4 20             	add    esp,0x20
c0021d9c:	85 c0                	test   eax,eax
c0021d9e:	75 13                	jne    c0021db3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021da0:	83 ec 0c             	sub    esp,0xc
c0021da3:	56                   	push   esi
c0021da4:	e8 aa da fe ff       	call   c000f853 <free>
c0021da9:	83 c4 10             	add    esp,0x10
c0021dac:	31 c0                	xor    eax,eax
c0021dae:	e9 b3 00 00 00       	jmp    c0021e66 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021db3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021db7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021dbb:	c1 e7 08             	shl    edi,0x8
c0021dbe:	c1 e2 10             	shl    edx,0x10
c0021dc1:	09 d7                	or     edi,edx
c0021dc3:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021dc7:	09 d7                	or     edi,edx
c0021dc9:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021dcd:	c1 e2 18             	shl    edx,0x18
c0021dd0:	09 d7                	or     edi,edx
c0021dd2:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021dd6:	89 d1                	mov    ecx,edx
c0021dd8:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021ddc:	c1 e1 08             	shl    ecx,0x8
c0021ddf:	c1 e2 10             	shl    edx,0x10
c0021de2:	09 ca                	or     edx,ecx
c0021de4:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021de8:	09 ca                	or     edx,ecx
c0021dea:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021dee:	c1 e1 18             	shl    ecx,0x18
c0021df1:	09 ca                	or     edx,ecx
c0021df3:	89 e9                	mov    ecx,ebp
c0021df5:	84 c9                	test   cl,cl
c0021df7:	74 3c                	je     c0021e35 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021df9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021dfd:	83 ec 0c             	sub    esp,0xc
c0021e00:	56                   	push   esi
c0021e01:	e8 4d da fe ff       	call   c000f853 <free>
c0021e06:	83 c4 0c             	add    esp,0xc
c0021e09:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e10:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021e15:	50                   	push   eax
c0021e16:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e1d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021e24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021e28:	52                   	push   edx
c0021e29:	57                   	push   edi
c0021e2a:	53                   	push   ebx
c0021e2b:	e8 6e fe ff ff       	call   c0021c9e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e30:	83 c4 20             	add    esp,0x20
c0021e33:	eb 31                	jmp    c0021e66 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e35:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021e38:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021e3f:	d0 e8                	shr    al,1
c0021e41:	89 3b                	mov    DWORD PTR [ebx],edi
c0021e43:	83 e0 01             	and    eax,0x1
c0021e46:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021e4d:	83 ec 0c             	sub    esp,0xc
c0021e50:	89 13                	mov    DWORD PTR [ebx],edx
c0021e52:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021e59:	89 03                	mov    DWORD PTR [ebx],eax
c0021e5b:	56                   	push   esi
c0021e5c:	e8 f2 d9 fe ff       	call   c000f853 <free>
c0021e61:	83 c4 10             	add    esp,0x10
c0021e64:	b0 01                	mov    al,0x1
c0021e66:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021e6c:	5b                   	pop    ebx
c0021e6d:	5e                   	pop    esi
c0021e6e:	5f                   	pop    edi
c0021e6f:	5d                   	pop    ebp
c0021e70:	c3                   	ret    

c0021e71 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021e71:	55                   	push   ebp
c0021e72:	57                   	push   edi
c0021e73:	56                   	push   esi
c0021e74:	53                   	push   ebx
c0021e75:	83 ec 20             	sub    esp,0x20
c0021e78:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021e7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021e80:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021e84:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e8c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021e94:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021e99:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021e9f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021ea5:	57                   	push   edi
c0021ea6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021eaa:	50                   	push   eax
c0021eab:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021eaf:	50                   	push   eax
c0021eb0:	e8 94 fd ff ff       	call   c0021c49 <readRoot(unsigned int*, unsigned int*, char)>
c0021eb5:	5a                   	pop    edx
c0021eb6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021eba:	e8 d5 e8 fd ff       	call   c0000794 <strlen>
c0021ebf:	83 c4 10             	add    esp,0x10
c0021ec2:	83 f8 03             	cmp    eax,0x3
c0021ec5:	77 17                	ja     c0021ede <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021ec7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ecb:	89 03                	mov    DWORD PTR [ebx],eax
c0021ecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ed1:	89 06                	mov    DWORD PTR [esi],eax
c0021ed3:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021eda:	b0 01                	mov    al,0x1
c0021edc:	eb 19                	jmp    c0021ef7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021ede:	50                   	push   eax
c0021edf:	55                   	push   ebp
c0021ee0:	57                   	push   edi
c0021ee1:	56                   	push   esi
c0021ee2:	53                   	push   ebx
c0021ee3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021ee7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021eeb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021eef:	e8 aa fd ff ff       	call   c0021c9e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ef4:	83 c4 20             	add    esp,0x20
c0021ef7:	83 c4 1c             	add    esp,0x1c
c0021efa:	5b                   	pop    ebx
c0021efb:	5e                   	pop    esi
c0021efc:	5f                   	pop    edi
c0021efd:	5d                   	pop    ebp
c0021efe:	c3                   	ret    
c0021eff:	90                   	nop

c0021f00 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021f00:	57                   	push   edi
c0021f01:	56                   	push   esi
c0021f02:	53                   	push   ebx
c0021f03:	83 ec 10             	sub    esp,0x10
c0021f06:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f0a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f0e:	85 ff                	test   edi,edi
c0021f10:	0f 84 9d 00 00 00    	je     c0021fb3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f16:	85 f6                	test   esi,esi
c0021f18:	0f 84 95 00 00 00    	je     c0021fb3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021f1e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021f23:	74 17                	je     c0021f3c <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021f25:	83 ec 0c             	sub    esp,0xc
c0021f28:	68 47 c8 02 c0       	push   0xc002c847
c0021f2d:	e8 6b 0f ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0021f32:	83 c4 10             	add    esp,0x10
c0021f35:	b8 03 00 00 00       	mov    eax,0x3
c0021f3a:	eb 7c                	jmp    c0021fb8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021f3c:	83 ec 0c             	sub    esp,0xc
c0021f3f:	6a 1c                	push   0x1c
c0021f41:	e8 fd d8 fe ff       	call   c000f843 <malloc>
c0021f46:	89 07                	mov    DWORD PTR [edi],eax
c0021f48:	89 c3                	mov    ebx,eax
c0021f4a:	58                   	pop    eax
c0021f4b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f4f:	50                   	push   eax
c0021f50:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021f53:	50                   	push   eax
c0021f54:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f58:	50                   	push   eax
c0021f59:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f5d:	50                   	push   eax
c0021f5e:	56                   	push   esi
c0021f5f:	e8 0d ff ff ff       	call   c0021e71 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f64:	83 c4 20             	add    esp,0x20
c0021f67:	84 c0                	test   al,al
c0021f69:	74 07                	je     c0021f72 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021f6b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021f70:	74 0b                	je     c0021f7d <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021f72:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021f76:	b8 01 00 00 00       	mov    eax,0x1
c0021f7b:	eb 3b                	jmp    c0021fb8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021f7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f81:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021f85:	89 03                	mov    DWORD PTR [ebx],eax
c0021f87:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021f8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f92:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021f99:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fa0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021fa3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021faa:	8a 06                	mov    al,BYTE PTR [esi]
c0021fac:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021faf:	31 c0                	xor    eax,eax
c0021fb1:	eb 05                	jmp    c0021fb8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fb3:	b8 04 00 00 00       	mov    eax,0x4
c0021fb8:	83 c4 10             	add    esp,0x10
c0021fbb:	5b                   	pop    ebx
c0021fbc:	5e                   	pop    esi
c0021fbd:	5f                   	pop    edi
c0021fbe:	c3                   	ret    
c0021fbf:	90                   	nop

c0021fc0 <ISO9660::exists(char const*)>:
c0021fc0:	83 ec 28             	sub    esp,0x28
c0021fc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021fc7:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021fcb:	52                   	push   edx
c0021fcc:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021fcf:	52                   	push   edx
c0021fd0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021fd4:	52                   	push   edx
c0021fd5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021fd9:	52                   	push   edx
c0021fda:	50                   	push   eax
c0021fdb:	e8 91 fe ff ff       	call   c0021e71 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021fe0:	83 c4 3c             	add    esp,0x3c
c0021fe3:	c3                   	ret    

c0021fe4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021fe4:	56                   	push   esi
c0021fe5:	53                   	push   ebx
c0021fe6:	83 ec 14             	sub    esp,0x14
c0021fe9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021fed:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021ff1:	85 db                	test   ebx,ebx
c0021ff3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021ff7:	0f 94 c2             	sete   dl
c0021ffa:	85 f6                	test   esi,esi
c0021ffc:	0f 94 c0             	sete   al
c0021fff:	08 c2                	or     dl,al
c0022001:	75 68                	jne    c002206b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022003:	85 c9                	test   ecx,ecx
c0022005:	74 64                	je     c002206b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022007:	83 ec 0c             	sub    esp,0xc
c002200a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002200d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022011:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022017:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002201e:	50                   	push   eax
c002201f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022022:	50                   	push   eax
c0022023:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022027:	50                   	push   eax
c0022028:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002202c:	50                   	push   eax
c002202d:	51                   	push   ecx
c002202e:	e8 3e fe ff ff       	call   c0021e71 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022033:	83 c4 20             	add    esp,0x20
c0022036:	ba 01 00 00 00       	mov    edx,0x1
c002203b:	84 c0                	test   al,al
c002203d:	74 31                	je     c0022070 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002203f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022043:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002204a:	89 03                	mov    DWORD PTR [ebx],eax
c002204c:	ba 00 00 00 00       	mov    edx,0x0
c0022051:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022055:	85 c0                	test   eax,eax
c0022057:	0f 95 06             	setne  BYTE PTR [esi]
c002205a:	74 14                	je     c0022070 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002205c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022062:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022069:	eb 05                	jmp    c0022070 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002206b:	ba 04 00 00 00       	mov    edx,0x4
c0022070:	83 c4 14             	add    esp,0x14
c0022073:	89 d0                	mov    eax,edx
c0022075:	5b                   	pop    ebx
c0022076:	5e                   	pop    esi
c0022077:	c3                   	ret    

c0022078 <ISO9660::openDir(char const*, void**)>:
c0022078:	57                   	push   edi
c0022079:	56                   	push   esi
c002207a:	53                   	push   ebx
c002207b:	83 ec 10             	sub    esp,0x10
c002207e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022082:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022086:	85 ff                	test   edi,edi
c0022088:	0f 84 95 00 00 00    	je     c0022123 <ISO9660::openDir(char const*, void**)+0xab>
c002208e:	85 f6                	test   esi,esi
c0022090:	0f 84 8d 00 00 00    	je     c0022123 <ISO9660::openDir(char const*, void**)+0xab>
c0022096:	83 ec 0c             	sub    esp,0xc
c0022099:	6a 1c                	push   0x1c
c002209b:	e8 a3 d7 fe ff       	call   c000f843 <malloc>
c00220a0:	89 07                	mov    DWORD PTR [edi],eax
c00220a2:	89 c3                	mov    ebx,eax
c00220a4:	59                   	pop    ecx
c00220a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220a9:	50                   	push   eax
c00220aa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00220ad:	50                   	push   eax
c00220ae:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220b2:	50                   	push   eax
c00220b3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220b7:	50                   	push   eax
c00220b8:	56                   	push   esi
c00220b9:	e8 b3 fd ff ff       	call   c0021e71 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220be:	83 c4 20             	add    esp,0x20
c00220c1:	84 c0                	test   al,al
c00220c3:	74 07                	je     c00220cc <ISO9660::openDir(char const*, void**)+0x54>
c00220c5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00220ca:	75 21                	jne    c00220ed <ISO9660::openDir(char const*, void**)+0x75>
c00220cc:	0f b6 c0             	movzx  eax,al
c00220cf:	52                   	push   edx
c00220d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00220d4:	50                   	push   eax
c00220d5:	68 6d c8 02 c0       	push   0xc002c86d
c00220da:	e8 be 0d ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00220df:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00220e3:	83 c4 10             	add    esp,0x10
c00220e6:	b8 01 00 00 00       	mov    eax,0x1
c00220eb:	eb 3b                	jmp    c0022128 <ISO9660::openDir(char const*, void**)+0xb0>
c00220ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220f1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00220f5:	89 03                	mov    DWORD PTR [ebx],eax
c00220f7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00220fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022102:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022109:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022110:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022113:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002211a:	8a 06                	mov    al,BYTE PTR [esi]
c002211c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002211f:	31 c0                	xor    eax,eax
c0022121:	eb 05                	jmp    c0022128 <ISO9660::openDir(char const*, void**)+0xb0>
c0022123:	b8 04 00 00 00       	mov    eax,0x4
c0022128:	83 c4 10             	add    esp,0x10
c002212b:	5b                   	pop    ebx
c002212c:	5e                   	pop    esi
c002212d:	5f                   	pop    edi
c002212e:	c3                   	ret    
c002212f:	90                   	nop

c0022130 <ISO9660::ISO9660()>:
c0022130:	83 ec 0c             	sub    esp,0xc
c0022133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022137:	83 ec 0c             	sub    esp,0xc
c002213a:	50                   	push   eax
c002213b:	e8 62 10 ff ff       	call   c00131a2 <Filesystem::Filesystem()>
c0022140:	83 c4 10             	add    esp,0x10
c0022143:	ba 90 c8 02 c0       	mov    edx,0xc002c890
c0022148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002214c:	89 10                	mov    DWORD PTR [eax],edx
c002214e:	90                   	nop
c002214f:	83 c4 0c             	add    esp,0xc
c0022152:	c3                   	ret    
c0022153:	90                   	nop

c0022154 <SoundChannel::~SoundChannel()>:
c0022154:	83 ec 0c             	sub    esp,0xc
c0022157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002215b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002215e:	83 ec 0c             	sub    esp,0xc
c0022161:	50                   	push   eax
c0022162:	e8 ec d6 fe ff       	call   c000f853 <free>
c0022167:	83 c4 10             	add    esp,0x10
c002216a:	90                   	nop
c002216b:	83 c4 0c             	add    esp,0xc
c002216e:	c3                   	ret    
c002216f:	90                   	nop

c0022170 <SoundChannel::setSpeed(float)>:
c0022170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022174:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022178:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002217b:	c3                   	ret    

c002217c <SoundChannel::getSpeed()>:
c002217c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022180:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022183:	c3                   	ret    

c0022184 <SoundChannel::setVolume(int)>:
c0022184:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022188:	83 f8 64             	cmp    eax,0x64
c002218b:	7e 05                	jle    c0022192 <SoundChannel::setVolume(int)+0xe>
c002218d:	b8 64 00 00 00       	mov    eax,0x64
c0022192:	85 c0                	test   eax,eax
c0022194:	79 02                	jns    c0022198 <SoundChannel::setVolume(int)+0x14>
c0022196:	31 c0                	xor    eax,eax
c0022198:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002219c:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002219f:	c3                   	ret    

c00221a0 <SoundChannel::getVolume()>:
c00221a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221a4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00221a7:	c3                   	ret    

c00221a8 <SoundChannel::pause()>:
c00221a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ac:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00221b0:	c3                   	ret    
c00221b1:	90                   	nop

c00221b2 <SoundChannel::SoundChannel(int, int, int, int)>:
c00221b2:	83 ec 1c             	sub    esp,0x1c
c00221b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00221b9:	e8 ea ff ff ff       	call   c00221a8 <SoundChannel::pause()>
c00221be:	83 c4 04             	add    esp,0x4
c00221c1:	6a 50                	push   0x50
c00221c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00221c7:	e8 b8 ff ff ff       	call   c0022184 <SoundChannel::setVolume(int)>
c00221cc:	83 c4 08             	add    esp,0x8
c00221cf:	a1 08 c9 02 c0       	mov    eax,ds:0xc002c908
c00221d4:	50                   	push   eax
c00221d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00221d9:	e8 92 ff ff ff       	call   c0022170 <SoundChannel::setSpeed(float)>
c00221de:	83 c4 08             	add    esp,0x8
c00221e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221e5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00221e9:	89 10                	mov    DWORD PTR [eax],edx
c00221eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00221f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00221f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221fa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00221fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022201:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022206:	75 23                	jne    c002222b <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022208:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002220c:	8b 10                	mov    edx,DWORD PTR [eax]
c002220e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022212:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022215:	0f af c2             	imul   eax,edx
c0022218:	85 c0                	test   eax,eax
c002221a:	79 03                	jns    c002221f <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002221c:	83 c0 03             	add    eax,0x3
c002221f:	c1 f8 02             	sar    eax,0x2
c0022222:	05 a0 0f 00 00       	add    eax,0xfa0
c0022227:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002222b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002222f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022233:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002223a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022245:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002224c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022250:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022253:	c1 e0 02             	shl    eax,0x2
c0022256:	83 ec 0c             	sub    esp,0xc
c0022259:	50                   	push   eax
c002225a:	e8 e4 d5 fe ff       	call   c000f843 <malloc>
c002225f:	83 c4 10             	add    esp,0x10
c0022262:	89 c2                	mov    edx,eax
c0022264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022268:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002226b:	83 ec 04             	sub    esp,0x4
c002226e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022272:	50                   	push   eax
c0022273:	6a 01                	push   0x1
c0022275:	6a 04                	push   0x4
c0022277:	e8 23 69 fe ff       	call   c0008b9f <src_new>
c002227c:	83 c4 10             	add    esp,0x10
c002227f:	89 c2                	mov    edx,eax
c0022281:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022285:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002228c:	85 c0                	test   eax,eax
c002228e:	74 10                	je     c00222a0 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022290:	83 ec 0c             	sub    esp,0xc
c0022293:	68 ec c8 02 c0       	push   0xc002c8ec
c0022298:	e8 ec 82 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c002229d:	83 c4 10             	add    esp,0x10
c00222a0:	a0 c0 26 03 c0       	mov    al,ds:0xc00326c0
c00222a5:	83 f0 01             	xor    eax,0x1
c00222a8:	84 c0                	test   al,al
c00222aa:	74 57                	je     c0022303 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00222ac:	a1 0c c9 02 c0       	mov    eax,ds:0xc002c90c
c00222b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222b5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00222bd:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00222c5:	7f 35                	jg     c00222fc <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00222c7:	83 ec 0c             	sub    esp,0xc
c00222ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00222ce:	e8 94 4f 00 00       	call   c0027267 <__floatsisf>
c00222d3:	83 c4 10             	add    esp,0x10
c00222d6:	8b 15 0c c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c90c
c00222dc:	83 ec 08             	sub    esp,0x8
c00222df:	52                   	push   edx
c00222e0:	50                   	push   eax
c00222e1:	e8 93 4b 00 00       	call   c0026e79 <__mulsf3>
c00222e6:	83 c4 10             	add    esp,0x10
c00222e9:	89 c2                	mov    edx,eax
c00222eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222ef:	89 14 85 c0 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd40],edx
c00222f6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00222fa:	eb c1                	jmp    c00222bd <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00222fc:	c6 05 c0 26 03 c0 01 	mov    BYTE PTR ds:0xc00326c0,0x1
c0022303:	90                   	nop
c0022304:	83 c4 1c             	add    esp,0x1c
c0022307:	c3                   	ret    

c0022308 <SoundChannel::play()>:
c0022308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002230c:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022310:	c3                   	ret    
c0022311:	90                   	nop

c0022312 <SoundChannel::paused()>:
c0022312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022316:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022319:	c3                   	ret    

c002231a <SoundChannel::getSampleRate()>:
c002231a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002231e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022320:	c3                   	ret    
c0022321:	90                   	nop

c0022322 <SoundChannel::getBits()>:
c0022322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022326:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022329:	c3                   	ret    

c002232a <SoundChannel::getBufferUsed()>:
c002232a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002232e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022331:	c3                   	ret    

c0022332 <SoundChannel::getBufferSize()>:
c0022332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022336:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022339:	c3                   	ret    

c002233a <SoundChannel::unbuffer(float*, int, int)>:
c002233a:	56                   	push   esi
c002233b:	53                   	push   ebx
c002233c:	83 ec 40             	sub    esp,0x40
c002233f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022343:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022346:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002234a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002234d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022351:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022355:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022359:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002235d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022361:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022365:	e8 fd 4e 00 00       	call   c0027267 <__floatsisf>
c002236a:	5a                   	pop    edx
c002236b:	89 c6                	mov    esi,eax
c002236d:	ff 33                	push   DWORD PTR [ebx]
c002236f:	e8 f3 4e 00 00       	call   c0027267 <__floatsisf>
c0022374:	59                   	pop    ecx
c0022375:	5a                   	pop    edx
c0022376:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022379:	50                   	push   eax
c002237a:	e8 fa 4a 00 00       	call   c0026e79 <__mulsf3>
c002237f:	59                   	pop    ecx
c0022380:	5a                   	pop    edx
c0022381:	50                   	push   eax
c0022382:	56                   	push   esi
c0022383:	e8 b4 4c 00 00       	call   c002703c <__divsf3>
c0022388:	89 04 24             	mov    DWORD PTR [esp],eax
c002238b:	e8 a7 61 00 00       	call   c0028537 <__extendsfdf2>
c0022390:	59                   	pop    ecx
c0022391:	5e                   	pop    esi
c0022392:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022396:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002239a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00223a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00223a6:	50                   	push   eax
c00223a7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00223aa:	e8 e5 63 fe ff       	call   c0008794 <src_process>
c00223af:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00223b3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00223b6:	83 c4 0c             	add    esp,0xc
c00223b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00223bc:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00223bf:	29 d0                	sub    eax,edx
c00223c1:	c1 e0 02             	shl    eax,0x2
c00223c4:	50                   	push   eax
c00223c5:	8d 04 91             	lea    eax,[ecx+edx*4]
c00223c8:	50                   	push   eax
c00223c9:	51                   	push   ecx
c00223ca:	e8 ad e2 fd ff       	call   c000067c <memmove>
c00223cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00223d3:	83 c4 44             	add    esp,0x44
c00223d6:	5b                   	pop    ebx
c00223d7:	5e                   	pop    esi
c00223d8:	c3                   	ret    
c00223d9:	90                   	nop

c00223da <SoundChannel::buffer8(unsigned char*, int)>:
c00223da:	55                   	push   ebp
c00223db:	57                   	push   edi
c00223dc:	56                   	push   esi
c00223dd:	53                   	push   ebx
c00223de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00223e2:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00223e6:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00223e9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00223ed:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00223f0:	74 7a                	je     c002246c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00223f2:	85 ff                	test   edi,edi
c00223f4:	7e 76                	jle    c002246c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00223f6:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00223fa:	8d 70 01             	lea    esi,[eax+0x1]
c00223fd:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022400:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022403:	8b 1c 9d c0 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdd40]
c002240a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002240d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022410:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022413:	74 5e                	je     c0022473 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022415:	83 ff 01             	cmp    edi,0x1
c0022418:	74 4b                	je     c0022465 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002241a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002241e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022421:	8d 70 01             	lea    esi,[eax+0x1]
c0022424:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022427:	8b 1c 9d c0 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdd40]
c002242e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022431:	b8 02 00 00 00       	mov    eax,0x2
c0022436:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022439:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002243c:	75 23                	jne    c0022461 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002243e:	eb 27                	jmp    c0022467 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022440:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022445:	8d 71 01             	lea    esi,[ecx+0x1]
c0022448:	40                   	inc    eax
c0022449:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002244c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002244f:	8b 1c 9d c0 22 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdd40]
c0022456:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022459:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002245c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002245f:	74 06                	je     c0022467 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022461:	39 c7                	cmp    edi,eax
c0022463:	75 db                	jne    c0022440 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022465:	89 f8                	mov    eax,edi
c0022467:	5b                   	pop    ebx
c0022468:	5e                   	pop    esi
c0022469:	5f                   	pop    edi
c002246a:	5d                   	pop    ebp
c002246b:	c3                   	ret    
c002246c:	5b                   	pop    ebx
c002246d:	31 c0                	xor    eax,eax
c002246f:	5e                   	pop    esi
c0022470:	5f                   	pop    edi
c0022471:	5d                   	pop    ebp
c0022472:	c3                   	ret    
c0022473:	b8 01 00 00 00       	mov    eax,0x1
c0022478:	eb ed                	jmp    c0022467 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002247a <SoundDevice::SoundDevice(char const*)>:
c002247a:	83 ec 1c             	sub    esp,0x1c
c002247d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022481:	83 ec 08             	sub    esp,0x8
c0022484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022488:	50                   	push   eax
c0022489:	e8 26 20 ff ff       	call   c00144b4 <Device::Device(char const*)>
c002248e:	83 c4 10             	add    esp,0x10
c0022491:	ba 18 c9 02 c0       	mov    edx,0xc002c918
c0022496:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002249a:	89 10                	mov    DWORD PTR [eax],edx
c002249c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224a0:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00224aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224ae:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00224b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00224c0:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00224c5:	7f 19                	jg     c00224e0 <SoundDevice::SoundDevice(char const*)+0x66>
c00224c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00224cf:	83 c2 54             	add    edx,0x54
c00224d2:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00224da:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00224de:	eb e0                	jmp    c00224c0 <SoundDevice::SoundDevice(char const*)+0x46>
c00224e0:	90                   	nop
c00224e1:	83 c4 1c             	add    esp,0x1c
c00224e4:	c3                   	ret    
c00224e5:	90                   	nop

c00224e6 <SoundDevice::~SoundDevice()>:
c00224e6:	53                   	push   ebx
c00224e7:	83 ec 18             	sub    esp,0x18
c00224ea:	ba 18 c9 02 c0       	mov    edx,0xc002c918
c00224ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224f3:	89 10                	mov    DWORD PTR [eax],edx
c00224f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00224fd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022502:	7f 46                	jg     c002254a <SoundDevice::~SoundDevice()+0x64>
c0022504:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022508:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002250c:	83 c2 54             	add    edx,0x54
c002250f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022513:	85 c0                	test   eax,eax
c0022515:	74 2d                	je     c0022544 <SoundDevice::~SoundDevice()+0x5e>
c0022517:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002251b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002251f:	83 c2 54             	add    edx,0x54
c0022522:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022526:	85 db                	test   ebx,ebx
c0022528:	74 1a                	je     c0022544 <SoundDevice::~SoundDevice()+0x5e>
c002252a:	83 ec 0c             	sub    esp,0xc
c002252d:	53                   	push   ebx
c002252e:	e8 21 fc ff ff       	call   c0022154 <SoundChannel::~SoundChannel()>
c0022533:	83 c4 10             	add    esp,0x10
c0022536:	83 ec 08             	sub    esp,0x8
c0022539:	6a 2c                	push   0x2c
c002253b:	53                   	push   ebx
c002253c:	e8 7c 08 ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0022541:	83 c4 10             	add    esp,0x10
c0022544:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022548:	eb b3                	jmp    c00224fd <SoundDevice::~SoundDevice()+0x17>
c002254a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002254e:	83 ec 0c             	sub    esp,0xc
c0022551:	50                   	push   eax
c0022552:	e8 3f 1c ff ff       	call   c0014196 <Device::~Device()>
c0022557:	83 c4 10             	add    esp,0x10
c002255a:	90                   	nop
c002255b:	83 c4 18             	add    esp,0x18
c002255e:	5b                   	pop    ebx
c002255f:	c3                   	ret    

c0022560 <SoundDevice::~SoundDevice()>:
c0022560:	83 ec 0c             	sub    esp,0xc
c0022563:	83 ec 0c             	sub    esp,0xc
c0022566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002256a:	e8 77 ff ff ff       	call   c00224e6 <SoundDevice::~SoundDevice()>
c002256f:	83 c4 10             	add    esp,0x10
c0022572:	83 ec 08             	sub    esp,0x8
c0022575:	68 e4 01 00 00       	push   0x1e4
c002257a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002257e:	e8 3a 08 ff ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0022583:	83 c4 10             	add    esp,0x10
c0022586:	83 c4 0c             	add    esp,0xc
c0022589:	c3                   	ret    

c002258a <SoundDevice::getFreeChannelNum()>:
c002258a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002258e:	31 c0                	xor    eax,eax
c0022590:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022598:	74 09                	je     c00225a3 <SoundDevice::getFreeChannelNum()+0x19>
c002259a:	40                   	inc    eax
c002259b:	83 f8 20             	cmp    eax,0x20
c002259e:	75 f0                	jne    c0022590 <SoundDevice::getFreeChannelNum()+0x6>
c00225a0:	83 c8 ff             	or     eax,0xffffffff
c00225a3:	c3                   	ret    

c00225a4 <SoundDevice::addChannel(SoundChannel*)>:
c00225a4:	56                   	push   esi
c00225a5:	53                   	push   ebx
c00225a6:	51                   	push   ecx
c00225a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00225ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00225af:	53                   	push   ebx
c00225b0:	e8 d5 ff ff ff       	call   c002258a <SoundDevice::getFreeChannelNum()>
c00225b5:	5a                   	pop    edx
c00225b6:	83 f8 ff             	cmp    eax,0xffffffff
c00225b9:	74 51                	je     c002260c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00225bb:	85 f6                	test   esi,esi
c00225bd:	74 4d                	je     c002260c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00225bf:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00225c6:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00225cd:	75 30                	jne    c00225ff <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00225cf:	83 ec 0c             	sub    esp,0xc
c00225d2:	56                   	push   esi
c00225d3:	e8 42 fd ff ff       	call   c002231a <SoundChannel::getSampleRate()>
c00225d8:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00225de:	89 34 24             	mov    DWORD PTR [esp],esi
c00225e1:	e8 3c fd ff ff       	call   c0022322 <SoundChannel::getBits()>
c00225e6:	83 c4 0c             	add    esp,0xc
c00225e9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00225ef:	8b 13                	mov    edx,DWORD PTR [ebx]
c00225f1:	50                   	push   eax
c00225f2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00225f8:	53                   	push   ebx
c00225f9:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00225fc:	83 c4 10             	add    esp,0x10
c00225ff:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022605:	b8 01 00 00 00       	mov    eax,0x1
c002260a:	eb 03                	jmp    c002260f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002260c:	83 c8 ff             	or     eax,0xffffffff
c002260f:	5a                   	pop    edx
c0022610:	5b                   	pop    ebx
c0022611:	5e                   	pop    esi
c0022612:	c3                   	ret    
c0022613:	90                   	nop

c0022614 <SoundDevice::removeChannel(int)>:
c0022614:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002261c:	83 fa 1f             	cmp    edx,0x1f
c002261f:	77 23                	ja     c0022644 <SoundDevice::removeChannel(int)+0x30>
c0022621:	8d 14 90             	lea    edx,[eax+edx*4]
c0022624:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002262b:	74 17                	je     c0022644 <SoundDevice::removeChannel(int)+0x30>
c002262d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022637:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002263d:	75 05                	jne    c0022644 <SoundDevice::removeChannel(int)+0x30>
c002263f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022641:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022644:	c3                   	ret    
c0022645:	90                   	nop

c0022646 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022646:	57                   	push   edi
c0022647:	56                   	push   esi
c0022648:	53                   	push   ebx
c0022649:	31 db                	xor    ebx,ebx
c002264b:	83 ec 10             	sub    esp,0x10
c002264e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022652:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022656:	0f 8d cb 00 00 00    	jge    c0022727 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002265c:	83 ec 0c             	sub    esp,0xc
c002265f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022663:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022666:	e8 cc 5e 00 00       	call   c0028537 <__extendsfdf2>
c002266b:	83 c4 10             	add    esp,0x10
c002266e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022672:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022676:	68 00 00 f0 3f       	push   0x3ff00000
c002267b:	6a 00                	push   0x0
c002267d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022685:	e8 39 4e 00 00       	call   c00274c3 <__adddf3>
c002268a:	83 c4 10             	add    esp,0x10
c002268d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022691:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022695:	68 00 00 e0 3f       	push   0x3fe00000
c002269a:	6a 00                	push   0x0
c002269c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226a4:	e8 97 54 00 00       	call   c0027b40 <__muldf3>
c00226a9:	83 c4 10             	add    esp,0x10
c00226ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00226b4:	68 00 00 60 40       	push   0x40600000
c00226b9:	6a 00                	push   0x0
c00226bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226c3:	e8 78 54 00 00       	call   c0027b40 <__muldf3>
c00226c8:	59                   	pop    ecx
c00226c9:	5f                   	pop    edi
c00226ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00226ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00226d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226da:	e8 34 5d 00 00       	call   c0028413 <__truncdfsf2>
c00226df:	5a                   	pop    edx
c00226e0:	89 c7                	mov    edi,eax
c00226e2:	59                   	pop    ecx
c00226e3:	68 00 00 fe 42       	push   0x42fe0000
c00226e8:	50                   	push   eax
c00226e9:	e8 cf 4d 00 00       	call   c00274bd <__gesf2>
c00226ee:	83 c4 10             	add    esp,0x10
c00226f1:	85 c0                	test   eax,eax
c00226f3:	78 06                	js     c00226fb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00226f5:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00226f9:	eb 26                	jmp    c0022721 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00226fb:	50                   	push   eax
c00226fc:	50                   	push   eax
c00226fd:	6a 00                	push   0x0
c00226ff:	57                   	push   edi
c0022700:	e8 bc 4d 00 00       	call   c00274c1 <__lesf2>
c0022705:	83 c4 10             	add    esp,0x10
c0022708:	85 c0                	test   eax,eax
c002270a:	7f 06                	jg     c0022712 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002270c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022710:	eb 0f                	jmp    c0022721 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022712:	83 ec 0c             	sub    esp,0xc
c0022715:	57                   	push   edi
c0022716:	e8 b1 5e 00 00       	call   c00285cc <lrintf>
c002271b:	83 c4 10             	add    esp,0x10
c002271e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022721:	43                   	inc    ebx
c0022722:	e9 2b ff ff ff       	jmp    c0022652 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022727:	83 c4 10             	add    esp,0x10
c002272a:	5b                   	pop    ebx
c002272b:	5e                   	pop    esi
c002272c:	5f                   	pop    edi
c002272d:	c3                   	ret    

c002272e <SoundDevice::getAudio(int, float*, float*)>:
c002272e:	55                   	push   ebp
c002272f:	57                   	push   edi
c0022730:	56                   	push   esi
c0022731:	53                   	push   ebx
c0022732:	31 db                	xor    ebx,ebx
c0022734:	83 ec 20             	sub    esp,0x20
c0022737:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002273b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002273f:	c1 e0 02             	shl    eax,0x2
c0022742:	50                   	push   eax
c0022743:	6a 00                	push   0x0
c0022745:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022749:	e8 2a e0 fd ff       	call   c0000778 <memset>
c002274e:	83 c4 10             	add    esp,0x10
c0022751:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022755:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002275c:	85 c0                	test   eax,eax
c002275e:	0f 84 d7 00 00 00    	je     c002283b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022764:	83 ec 0c             	sub    esp,0xc
c0022767:	50                   	push   eax
c0022768:	e8 a5 fb ff ff       	call   c0022312 <SoundChannel::paused()>
c002276d:	83 c4 10             	add    esp,0x10
c0022770:	84 c0                	test   al,al
c0022772:	0f 85 c3 00 00 00    	jne    c002283b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022778:	83 ec 0c             	sub    esp,0xc
c002277b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022782:	e8 19 fa ff ff       	call   c00221a0 <SoundChannel::getVolume()>
c0022787:	83 c4 10             	add    esp,0x10
c002278a:	85 c0                	test   eax,eax
c002278c:	0f 84 a9 00 00 00    	je     c002283b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022792:	83 ec 0c             	sub    esp,0xc
c0022795:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002279c:	e8 ff f9 ff ff       	call   c00221a0 <SoundChannel::getVolume()>
c00227a1:	83 ec 0c             	sub    esp,0xc
c00227a4:	50                   	push   eax
c00227a5:	e8 bd 4a 00 00       	call   c0027267 <__floatsisf>
c00227aa:	59                   	pop    ecx
c00227ab:	5d                   	pop    ebp
c00227ac:	31 ed                	xor    ebp,ebp
c00227ae:	68 00 00 c8 42       	push   0x42c80000
c00227b3:	50                   	push   eax
c00227b4:	e8 83 48 00 00       	call   c002703c <__divsf3>
c00227b9:	83 c4 10             	add    esp,0x10
c00227bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00227c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00227c4:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00227ca:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00227ce:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00227d5:	e8 60 fb ff ff       	call   c002233a <SoundChannel::unbuffer(float*, int, int)>
c00227da:	83 c4 20             	add    esp,0x20
c00227dd:	89 c1                	mov    ecx,eax
c00227df:	39 cd                	cmp    ebp,ecx
c00227e1:	7d 52                	jge    c0022835 <SoundDevice::getAudio(int, float*, float*)+0x107>
c00227e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00227e7:	50                   	push   eax
c00227e8:	50                   	push   eax
c00227e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00227ed:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00227f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00227f4:	e8 80 46 00 00       	call   c0026e79 <__mulsf3>
c00227f9:	5a                   	pop    edx
c00227fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00227fe:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022804:	e8 5e 4a 00 00       	call   c0027267 <__floatsisf>
c0022809:	59                   	pop    ecx
c002280a:	5a                   	pop    edx
c002280b:	50                   	push   eax
c002280c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022810:	e8 27 48 00 00       	call   c002703c <__divsf3>
c0022815:	59                   	pop    ecx
c0022816:	5a                   	pop    edx
c0022817:	50                   	push   eax
c0022818:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002281c:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002281f:	e8 32 43 00 00       	call   c0026b56 <__addsf3>
c0022824:	83 c4 10             	add    esp,0x10
c0022827:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002282b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002282f:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022832:	45                   	inc    ebp
c0022833:	eb aa                	jmp    c00227df <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022835:	39 cf                	cmp    edi,ecx
c0022837:	7e 02                	jle    c002283b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022839:	89 cf                	mov    edi,ecx
c002283b:	43                   	inc    ebx
c002283c:	83 fb 20             	cmp    ebx,0x20
c002283f:	0f 85 10 ff ff ff    	jne    c0022755 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022845:	83 c4 1c             	add    esp,0x1c
c0022848:	89 f8                	mov    eax,edi
c002284a:	5b                   	pop    ebx
c002284b:	5e                   	pop    esi
c002284c:	5f                   	pop    edi
c002284d:	5d                   	pop    ebp
c002284e:	c3                   	ret    
c002284f:	90                   	nop

c0022850 <PCI::open(int, int, void*)>:
c0022850:	83 ec 18             	sub    esp,0x18
c0022853:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022857:	8b 10                	mov    edx,DWORD PTR [eax]
c0022859:	50                   	push   eax
c002285a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002285d:	31 c0                	xor    eax,eax
c002285f:	83 c4 1c             	add    esp,0x1c
c0022862:	c3                   	ret    
c0022863:	90                   	nop

c0022864 <PCI::close(int, int, void*)>:
c0022864:	31 c0                	xor    eax,eax
c0022866:	c3                   	ret    
c0022867:	90                   	nop

c0022868 <PCI::PCI()>:
c0022868:	83 ec 0c             	sub    esp,0xc
c002286b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002286f:	83 ec 08             	sub    esp,0x8
c0022872:	68 48 c9 02 c0       	push   0xc002c948
c0022877:	50                   	push   eax
c0022878:	e8 bb 12 ff ff       	call   c0013b38 <Bus::Bus(char const*)>
c002287d:	83 c4 10             	add    esp,0x10
c0022880:	ba b4 c9 02 c0       	mov    edx,0xc002c9b4
c0022885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022889:	89 10                	mov    DWORD PTR [eax],edx
c002288b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002288f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022895:	0f b6 d0             	movzx  edx,al
c0022898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002289c:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00228a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228ad:	0f b6 d0             	movzx  edx,al
c00228b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228b4:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00228b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228bd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228c3:	8d 50 01             	lea    edx,[eax+0x1]
c00228c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00228ca:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00228d0:	0f b6 d0             	movzx  edx,al
c00228d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00228db:	83 c9 c0             	or     ecx,0xffffffc0
c00228de:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00228e2:	90                   	nop
c00228e3:	83 c4 0c             	add    esp,0xc
c00228e6:	c3                   	ret    
c00228e7:	90                   	nop

c00228e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00228e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00228ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00228f1:	89 ca                	mov    edx,ecx
c00228f3:	c1 e0 10             	shl    eax,0x10
c00228f6:	81 e2 fc 00 00 00    	and    edx,0xfc
c00228fc:	09 d0                	or     eax,edx
c00228fe:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022903:	c1 e2 08             	shl    edx,0x8
c0022906:	09 d0                	or     eax,edx
c0022908:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002290d:	c1 e2 0b             	shl    edx,0xb
c0022910:	09 d0                	or     eax,edx
c0022912:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022917:	0d 00 00 00 80       	or     eax,0x80000000
c002291c:	ef                   	out    dx,eax
c002291d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022922:	ed                   	in     eax,dx
c0022923:	83 e1 02             	and    ecx,0x2
c0022926:	0f b6 c9             	movzx  ecx,cl
c0022929:	c1 e1 03             	shl    ecx,0x3
c002292c:	d3 e8                	shr    eax,cl
c002292e:	c3                   	ret    
c002292f:	90                   	nop

c0022930 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022930:	6a 00                	push   0x0
c0022932:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022937:	50                   	push   eax
c0022938:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002293d:	50                   	push   eax
c002293e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022943:	50                   	push   eax
c0022944:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022948:	e8 9b ff ff ff       	call   c00228e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002294d:	83 c4 14             	add    esp,0x14
c0022950:	c3                   	ret    
c0022951:	90                   	nop

c0022952 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022952:	6a 0e                	push   0xe
c0022954:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022959:	50                   	push   eax
c002295a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002295f:	50                   	push   eax
c0022960:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022965:	50                   	push   eax
c0022966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002296a:	e8 79 ff ff ff       	call   c00228e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002296f:	83 c4 14             	add    esp,0x14
c0022972:	0f b6 c0             	movzx  eax,al
c0022975:	c3                   	ret    

c0022976 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022976:	55                   	push   ebp
c0022977:	57                   	push   edi
c0022978:	56                   	push   esi
c0022979:	53                   	push   ebx
c002297a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002297f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022984:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022989:	6a 0a                	push   0xa
c002298b:	56                   	push   esi
c002298c:	55                   	push   ebp
c002298d:	57                   	push   edi
c002298e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022992:	e8 51 ff ff ff       	call   c00228e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022997:	6a 0a                	push   0xa
c0022999:	89 c3                	mov    ebx,eax
c002299b:	56                   	push   esi
c002299c:	0f b6 db             	movzx  ebx,bl
c002299f:	55                   	push   ebp
c00229a0:	57                   	push   edi
c00229a1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00229a5:	e8 3e ff ff ff       	call   c00228e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229aa:	83 c4 28             	add    esp,0x28
c00229ad:	25 00 ff 00 00       	and    eax,0xff00
c00229b2:	09 d8                	or     eax,ebx
c00229b4:	5b                   	pop    ebx
c00229b5:	5e                   	pop    esi
c00229b6:	5f                   	pop    edi
c00229b7:	5d                   	pop    ebp
c00229b8:	c3                   	ret    
c00229b9:	90                   	nop

c00229ba <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00229ba:	6a 08                	push   0x8
c00229bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229c1:	50                   	push   eax
c00229c2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229c7:	50                   	push   eax
c00229c8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229cd:	50                   	push   eax
c00229ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229d2:	e8 11 ff ff ff       	call   c00228e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229d7:	83 c4 14             	add    esp,0x14
c00229da:	0f b6 c4             	movzx  eax,ah
c00229dd:	c3                   	ret    

c00229de <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00229de:	6a 08                	push   0x8
c00229e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229e5:	50                   	push   eax
c00229e6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229eb:	50                   	push   eax
c00229ec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229f1:	50                   	push   eax
c00229f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229f6:	e8 ed fe ff ff       	call   c00228e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229fb:	83 c4 14             	add    esp,0x14
c00229fe:	c3                   	ret    
c00229ff:	90                   	nop

c0022a00 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022a00:	6a 3c                	push   0x3c
c0022a02:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a07:	50                   	push   eax
c0022a08:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a0d:	50                   	push   eax
c0022a0e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a13:	50                   	push   eax
c0022a14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a18:	e8 cb fe ff ff       	call   c00228e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a1d:	83 c4 14             	add    esp,0x14
c0022a20:	c3                   	ret    
c0022a21:	90                   	nop

c0022a22 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022a22:	6a 18                	push   0x18
c0022a24:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a29:	50                   	push   eax
c0022a2a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a2f:	50                   	push   eax
c0022a30:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a35:	50                   	push   eax
c0022a36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a3a:	e8 a9 fe ff ff       	call   c00228e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a3f:	83 c4 14             	add    esp,0x14
c0022a42:	0f b6 c4             	movzx  eax,ah
c0022a45:	c3                   	ret    

c0022a46 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a46:	55                   	push   ebp
c0022a47:	57                   	push   edi
c0022a48:	56                   	push   esi
c0022a49:	53                   	push   ebx
c0022a4a:	50                   	push   eax
c0022a4b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022a4f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022a54:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022a59:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022a5e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022a65:	8d 43 12             	lea    eax,[ebx+0x12]
c0022a68:	83 c3 10             	add    ebx,0x10
c0022a6b:	0f b6 c0             	movzx  eax,al
c0022a6e:	0f b6 db             	movzx  ebx,bl
c0022a71:	50                   	push   eax
c0022a72:	51                   	push   ecx
c0022a73:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022a77:	57                   	push   edi
c0022a78:	55                   	push   ebp
c0022a79:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022a7d:	e8 66 fe ff ff       	call   c00228e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a82:	53                   	push   ebx
c0022a83:	89 c6                	mov    esi,eax
c0022a85:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022a89:	c1 e6 10             	shl    esi,0x10
c0022a8c:	51                   	push   ecx
c0022a8d:	57                   	push   edi
c0022a8e:	55                   	push   ebp
c0022a8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022a93:	e8 50 fe ff ff       	call   c00228e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a98:	83 c4 2c             	add    esp,0x2c
c0022a9b:	0f b7 c0             	movzx  eax,ax
c0022a9e:	5b                   	pop    ebx
c0022a9f:	09 f0                	or     eax,esi
c0022aa1:	5e                   	pop    esi
c0022aa2:	5f                   	pop    edi
c0022aa3:	5d                   	pop    ebp
c0022aa4:	c3                   	ret    
c0022aa5:	90                   	nop

c0022aa6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022aa6:	53                   	push   ebx
c0022aa7:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022aac:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022ab1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022ab5:	c1 e1 10             	shl    ecx,0x10
c0022ab8:	25 fc 00 00 00       	and    eax,0xfc
c0022abd:	09 c1                	or     ecx,eax
c0022abf:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ac4:	c1 e0 08             	shl    eax,0x8
c0022ac7:	09 c1                	or     ecx,eax
c0022ac9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022ace:	c1 e0 0b             	shl    eax,0xb
c0022ad1:	09 c1                	or     ecx,eax
c0022ad3:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022ad9:	89 c8                	mov    eax,ecx
c0022adb:	ef                   	out    dx,eax
c0022adc:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022ae1:	ed                   	in     eax,dx
c0022ae2:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022ae7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022aec:	74 0a                	je     c0022af8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022aee:	0f b7 d8             	movzx  ebx,ax
c0022af1:	89 d0                	mov    eax,edx
c0022af3:	c1 e0 10             	shl    eax,0x10
c0022af6:	eb 05                	jmp    c0022afd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022af8:	66 31 c0             	xor    ax,ax
c0022afb:	89 d3                	mov    ebx,edx
c0022afd:	09 c3                	or     ebx,eax
c0022aff:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b04:	89 c8                	mov    eax,ecx
c0022b06:	ef                   	out    dx,eax
c0022b07:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b0c:	89 d8                	mov    eax,ebx
c0022b0e:	ef                   	out    dx,eax
c0022b0f:	5b                   	pop    ebx
c0022b10:	c3                   	ret    
c0022b11:	90                   	nop

c0022b12 <PCI::checkBus(unsigned char)>:
c0022b12:	56                   	push   esi
c0022b13:	53                   	push   ebx
c0022b14:	31 db                	xor    ebx,ebx
c0022b16:	51                   	push   ecx
c0022b17:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b1c:	52                   	push   edx
c0022b1d:	53                   	push   ebx
c0022b1e:	43                   	inc    ebx
c0022b1f:	56                   	push   esi
c0022b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b24:	e8 2b 03 00 00       	call   c0022e54 <PCI::checkDevice(unsigned char, unsigned char)>
c0022b29:	83 c4 10             	add    esp,0x10
c0022b2c:	83 fb 20             	cmp    ebx,0x20
c0022b2f:	75 eb                	jne    c0022b1c <PCI::checkBus(unsigned char)+0xa>
c0022b31:	58                   	pop    eax
c0022b32:	5b                   	pop    ebx
c0022b33:	5e                   	pop    esi
c0022b34:	c3                   	ret    
c0022b35:	90                   	nop

c0022b36 <PCI::foundDevice(PCIDeviceInfo)>:
c0022b36:	55                   	push   ebp
c0022b37:	57                   	push   edi
c0022b38:	56                   	push   esi
c0022b39:	53                   	push   ebx
c0022b3a:	83 ec 1c             	sub    esp,0x1c
c0022b3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022b41:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022b47:	0f 84 52 01 00 00    	je     c0022c9f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b4d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022b51:	66 81 f9 06 04       	cmp    cx,0x406
c0022b56:	75 2c                	jne    c0022b84 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022b58:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022b5d:	50                   	push   eax
c0022b5e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022b63:	50                   	push   eax
c0022b64:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022b69:	50                   	push   eax
c0022b6a:	56                   	push   esi
c0022b6b:	e8 b2 fe ff ff       	call   c0022a22 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022b70:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022b74:	0f b6 c0             	movzx  eax,al
c0022b77:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022b7b:	83 c4 2c             	add    esp,0x2c
c0022b7e:	5b                   	pop    ebx
c0022b7f:	5e                   	pop    esi
c0022b80:	5f                   	pop    edi
c0022b81:	5d                   	pop    ebp
c0022b82:	eb 8e                	jmp    c0022b12 <PCI::checkBus(unsigned char)>
c0022b84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022b88:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022b8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b92:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022b96:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022b9a:	88 d3                	mov    bl,dl
c0022b9c:	85 c0                	test   eax,eax
c0022b9e:	74 33                	je     c0022bd3 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022ba0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022ba3:	85 d2                	test   edx,edx
c0022ba5:	74 28                	je     c0022bcf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ba7:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022bad:	31 ef                	xor    edi,ebp
c0022baf:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022bb5:	75 18                	jne    c0022bcf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022bb7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022bbb:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022bc1:	75 0c                	jne    c0022bcf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022bc3:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022bc9:	0f 84 d0 00 00 00    	je     c0022c9f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022bcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bd1:	eb c9                	jmp    c0022b9c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022bd3:	66 81 f9 01 06       	cmp    cx,0x601
c0022bd8:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022bdc:	75 19                	jne    c0022bf7 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022bde:	83 ec 0c             	sub    esp,0xc
c0022be1:	68 64 01 00 00       	push   0x164
c0022be6:	e8 58 cc fe ff       	call   c000f843 <malloc>
c0022beb:	89 c5                	mov    ebp,eax
c0022bed:	89 04 24             	mov    DWORD PTR [esp],eax
c0022bf0:	e8 95 0f 00 00       	call   c0023b8a <SATABus::SATABus()>
c0022bf5:	eb 1e                	jmp    c0022c15 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022bf7:	66 81 f9 01 01       	cmp    cx,0x101
c0022bfc:	75 60                	jne    c0022c5e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022bfe:	83 ec 0c             	sub    esp,0xc
c0022c01:	68 70 02 00 00       	push   0x270
c0022c06:	e8 38 cc fe ff       	call   c000f843 <malloc>
c0022c0b:	89 c5                	mov    ebp,eax
c0022c0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c10:	e8 03 03 00 00       	call   c0022f18 <IDE::IDE()>
c0022c15:	58                   	pop    eax
c0022c16:	5a                   	pop    edx
c0022c17:	55                   	push   ebp
c0022c18:	56                   	push   esi
c0022c19:	e8 a6 16 ff ff       	call   c00142c4 <Device::addChild(Device*)>
c0022c1e:	83 ec 1c             	sub    esp,0x1c
c0022c21:	b9 09 00 00 00       	mov    ecx,0x9
c0022c26:	fc                   	cld    
c0022c27:	89 e7                	mov    edi,esp
c0022c29:	89 de                	mov    esi,ebx
c0022c2b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c2d:	55                   	push   ebp
c0022c2e:	e8 9b 15 ff ff       	call   c00141ce <Device::preOpenPCI(PCIDeviceInfo)>
c0022c33:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022c36:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022c3a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022c42:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022c4a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022c52:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c55:	83 c4 4c             	add    esp,0x4c
c0022c58:	5b                   	pop    ebx
c0022c59:	5e                   	pop    esi
c0022c5a:	5f                   	pop    edi
c0022c5b:	5d                   	pop    ebp
c0022c5c:	ff e0                	jmp    eax
c0022c5e:	83 ec 0c             	sub    esp,0xc
c0022c61:	68 58 01 00 00       	push   0x158
c0022c66:	e8 d8 cb fe ff       	call   c000f843 <malloc>
c0022c6b:	89 c5                	mov    ebp,eax
c0022c6d:	58                   	pop    eax
c0022c6e:	5a                   	pop    edx
c0022c6f:	68 50 c9 02 c0       	push   0xc002c950
c0022c74:	55                   	push   ebp
c0022c75:	e8 40 19 ff ff       	call   c00145ba <DriverlessDevice::DriverlessDevice(char const*)>
c0022c7a:	59                   	pop    ecx
c0022c7b:	5f                   	pop    edi
c0022c7c:	55                   	push   ebp
c0022c7d:	56                   	push   esi
c0022c7e:	e8 41 16 ff ff       	call   c00142c4 <Device::addChild(Device*)>
c0022c83:	b9 09 00 00 00       	mov    ecx,0x9
c0022c88:	fc                   	cld    
c0022c89:	89 df                	mov    edi,ebx
c0022c8b:	89 de                	mov    esi,ebx
c0022c8d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c8f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022c93:	83 c4 2c             	add    esp,0x2c
c0022c96:	5b                   	pop    ebx
c0022c97:	5e                   	pop    esi
c0022c98:	5f                   	pop    edi
c0022c99:	5d                   	pop    ebp
c0022c9a:	e9 2f 15 ff ff       	jmp    c00141ce <Device::preOpenPCI(PCIDeviceInfo)>
c0022c9f:	83 c4 1c             	add    esp,0x1c
c0022ca2:	5b                   	pop    ebx
c0022ca3:	5e                   	pop    esi
c0022ca4:	5f                   	pop    edi
c0022ca5:	5d                   	pop    ebp
c0022ca6:	c3                   	ret    
c0022ca7:	90                   	nop

c0022ca8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022ca8:	55                   	push   ebp
c0022ca9:	57                   	push   edi
c0022caa:	56                   	push   esi
c0022cab:	53                   	push   ebx
c0022cac:	83 ec 5c             	sub    esp,0x5c
c0022caf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022cb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022cb7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022cbb:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022cc0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022cc4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022cc8:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022ccd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022cd1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022cd6:	6a 0c                	push   0xc
c0022cd8:	55                   	push   ebp
c0022cd9:	53                   	push   ebx
c0022cda:	57                   	push   edi
c0022cdb:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022ce2:	e8 01 fc ff ff       	call   c00228e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ce7:	55                   	push   ebp
c0022ce8:	53                   	push   ebx
c0022ce9:	57                   	push   edi
c0022cea:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022cf1:	e8 80 fc ff ff       	call   c0022976 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022cf6:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022cfb:	83 c4 24             	add    esp,0x24
c0022cfe:	55                   	push   ebp
c0022cff:	53                   	push   ebx
c0022d00:	57                   	push   edi
c0022d01:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d05:	e8 f6 fc ff ff       	call   c0022a00 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d0a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022d0e:	6a 3c                	push   0x3c
c0022d10:	55                   	push   ebp
c0022d11:	53                   	push   ebx
c0022d12:	57                   	push   edi
c0022d13:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022d1a:	e8 c9 fb ff ff       	call   c00228e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d1f:	0f b6 c4             	movzx  eax,ah
c0022d22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022d26:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022d2a:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022d2e:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0022d33:	83 c4 24             	add    esp,0x24
c0022d36:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022d3c:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022d43:	74 6c                	je     c0022db1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022d45:	31 f6                	xor    esi,esi
c0022d47:	8b 15 68 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e368
c0022d4d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d53:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022d59:	7e 56                	jle    c0022db1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022d5b:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022d5e:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022d65:	39 cb                	cmp    ebx,ecx
c0022d67:	75 45                	jne    c0022dae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022d69:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022d70:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022d74:	75 38                	jne    c0022dae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022d76:	83 ec 0c             	sub    esp,0xc
c0022d79:	68 6a c9 02 c0       	push   0xc002c96a
c0022d7e:	e8 1a 01 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0022d83:	8b 15 68 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e368
c0022d89:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d8f:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022d97:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022d9b:	52                   	push   edx
c0022d9c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022da0:	53                   	push   ebx
c0022da1:	68 8f c9 02 c0       	push   0xc002c98f
c0022da6:	e8 f2 00 ff ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0022dab:	83 c4 20             	add    esp,0x20
c0022dae:	46                   	inc    esi
c0022daf:	eb 96                	jmp    c0022d47 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022db1:	31 d2                	xor    edx,edx
c0022db3:	83 ec 0c             	sub    esp,0xc
c0022db6:	55                   	push   ebp
c0022db7:	53                   	push   ebx
c0022db8:	57                   	push   edi
c0022db9:	52                   	push   edx
c0022dba:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022dbe:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022dc5:	e8 7c fc ff ff       	call   c0022a46 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022dca:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022dce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022dd2:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022dd6:	42                   	inc    edx
c0022dd7:	83 c4 20             	add    esp,0x20
c0022dda:	83 fa 06             	cmp    edx,0x6
c0022ddd:	75 d4                	jne    c0022db3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022ddf:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022de3:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022de7:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022deb:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022def:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022df3:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022df7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022dfc:	86 e0                	xchg   al,ah
c0022dfe:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022e03:	55                   	push   ebp
c0022e04:	53                   	push   ebx
c0022e05:	57                   	push   edi
c0022e06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e0a:	e8 ab fb ff ff       	call   c00229ba <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e0f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e13:	55                   	push   ebp
c0022e14:	53                   	push   ebx
c0022e15:	57                   	push   edi
c0022e16:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e1d:	e8 0e fb ff ff       	call   c0022930 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e22:	83 ec 0c             	sub    esp,0xc
c0022e25:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022e2a:	b9 09 00 00 00       	mov    ecx,0x9
c0022e2f:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022e33:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022e37:	fc                   	cld    
c0022e38:	89 e7                	mov    edi,esp
c0022e3a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022e3c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022e43:	e8 ee fc ff ff       	call   c0022b36 <PCI::foundDevice(PCIDeviceInfo)>
c0022e48:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022e4e:	5b                   	pop    ebx
c0022e4f:	5e                   	pop    esi
c0022e50:	5f                   	pop    edi
c0022e51:	5d                   	pop    ebp
c0022e52:	c3                   	ret    
c0022e53:	90                   	nop

c0022e54 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022e54:	55                   	push   ebp
c0022e55:	57                   	push   edi
c0022e56:	56                   	push   esi
c0022e57:	53                   	push   ebx
c0022e58:	83 ec 0c             	sub    esp,0xc
c0022e5b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022e5f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022e64:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022e69:	6a 00                	push   0x0
c0022e6b:	56                   	push   esi
c0022e6c:	57                   	push   edi
c0022e6d:	55                   	push   ebp
c0022e6e:	e8 bd fa ff ff       	call   c0022930 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e73:	6a 00                	push   0x0
c0022e75:	56                   	push   esi
c0022e76:	57                   	push   edi
c0022e77:	55                   	push   ebp
c0022e78:	e8 2b fe ff ff       	call   c0022ca8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e7d:	83 c4 20             	add    esp,0x20
c0022e80:	6a 00                	push   0x0
c0022e82:	56                   	push   esi
c0022e83:	57                   	push   edi
c0022e84:	55                   	push   ebp
c0022e85:	e8 c8 fa ff ff       	call   c0022952 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e8a:	83 c4 10             	add    esp,0x10
c0022e8d:	84 c0                	test   al,al
c0022e8f:	79 27                	jns    c0022eb8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022e91:	bb 01 00 00 00       	mov    ebx,0x1
c0022e96:	53                   	push   ebx
c0022e97:	56                   	push   esi
c0022e98:	57                   	push   edi
c0022e99:	55                   	push   ebp
c0022e9a:	e8 91 fa ff ff       	call   c0022930 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e9f:	83 c4 10             	add    esp,0x10
c0022ea2:	66 40                	inc    ax
c0022ea4:	74 0c                	je     c0022eb2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022ea6:	53                   	push   ebx
c0022ea7:	56                   	push   esi
c0022ea8:	57                   	push   edi
c0022ea9:	55                   	push   ebp
c0022eaa:	e8 f9 fd ff ff       	call   c0022ca8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022eaf:	83 c4 10             	add    esp,0x10
c0022eb2:	43                   	inc    ebx
c0022eb3:	83 fb 08             	cmp    ebx,0x8
c0022eb6:	75 de                	jne    c0022e96 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022eb8:	83 c4 0c             	add    esp,0xc
c0022ebb:	5b                   	pop    ebx
c0022ebc:	5e                   	pop    esi
c0022ebd:	5f                   	pop    edi
c0022ebe:	5d                   	pop    ebp
c0022ebf:	c3                   	ret    

c0022ec0 <PCI::detect()>:
c0022ec0:	56                   	push   esi
c0022ec1:	53                   	push   ebx
c0022ec2:	53                   	push   ebx
c0022ec3:	31 db                	xor    ebx,ebx
c0022ec5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022ec9:	6a 00                	push   0x0
c0022ecb:	6a 00                	push   0x0
c0022ecd:	6a 00                	push   0x0
c0022ecf:	56                   	push   esi
c0022ed0:	e8 7d fa ff ff       	call   c0022952 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022ed5:	83 c4 10             	add    esp,0x10
c0022ed8:	a8 80                	test   al,0x80
c0022eda:	75 21                	jne    c0022efd <PCI::detect()+0x3d>
c0022edc:	51                   	push   ecx
c0022edd:	51                   	push   ecx
c0022ede:	6a 00                	push   0x0
c0022ee0:	56                   	push   esi
c0022ee1:	e8 2c fc ff ff       	call   c0022b12 <PCI::checkBus(unsigned char)>
c0022ee6:	83 c4 10             	add    esp,0x10
c0022ee9:	eb 24                	jmp    c0022f0f <PCI::detect()+0x4f>
c0022eeb:	52                   	push   edx
c0022eec:	52                   	push   edx
c0022eed:	53                   	push   ebx
c0022eee:	43                   	inc    ebx
c0022eef:	56                   	push   esi
c0022ef0:	e8 1d fc ff ff       	call   c0022b12 <PCI::checkBus(unsigned char)>
c0022ef5:	83 c4 10             	add    esp,0x10
c0022ef8:	83 fb 08             	cmp    ebx,0x8
c0022efb:	74 12                	je     c0022f0f <PCI::detect()+0x4f>
c0022efd:	53                   	push   ebx
c0022efe:	6a 00                	push   0x0
c0022f00:	6a 00                	push   0x0
c0022f02:	56                   	push   esi
c0022f03:	e8 28 fa ff ff       	call   c0022930 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f08:	83 c4 10             	add    esp,0x10
c0022f0b:	66 40                	inc    ax
c0022f0d:	74 dc                	je     c0022eeb <PCI::detect()+0x2b>
c0022f0f:	58                   	pop    eax
c0022f10:	5b                   	pop    ebx
c0022f11:	5e                   	pop    esi
c0022f12:	c3                   	ret    
c0022f13:	90                   	nop

c0022f14 <IDE::close(int, int, void*)>:
c0022f14:	83 c8 ff             	or     eax,0xffffffff
c0022f17:	c3                   	ret    

c0022f18 <IDE::IDE()>:
c0022f18:	83 ec 0c             	sub    esp,0xc
c0022f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f1f:	83 ec 08             	sub    esp,0x8
c0022f22:	68 d8 c9 02 c0       	push   0xc002c9d8
c0022f27:	50                   	push   eax
c0022f28:	e8 23 17 ff ff       	call   c0014650 <HardDiskController::HardDiskController(char const*)>
c0022f2d:	83 c4 10             	add    esp,0x10
c0022f30:	ba 18 cc 02 c0       	mov    edx,0xc002cc18
c0022f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f39:	89 10                	mov    DWORD PTR [eax],edx
c0022f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f3f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022f46:	90                   	nop
c0022f47:	83 c4 0c             	add    esp,0xc
c0022f4a:	c3                   	ret    
c0022f4b:	90                   	nop

c0022f4c <IDE::prepareInterrupt(unsigned char)>:
c0022f4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022f51:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f55:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022f5d:	c3                   	ret    

c0022f5e <selectDrive(unsigned char, unsigned char)>:
c0022f5e:	c3                   	ret    
c0022f5f:	90                   	nop

c0022f60 <IDE::getBase(unsigned char)>:
c0022f60:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f69:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022f71:	c3                   	ret    

c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022f72:	55                   	push   ebp
c0022f73:	57                   	push   edi
c0022f74:	56                   	push   esi
c0022f75:	53                   	push   ebx
c0022f76:	83 ec 1c             	sub    esp,0x1c
c0022f79:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f7d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f81:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022f84:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022f8c:	80 f9 03             	cmp    cl,0x3
c0022f8f:	77 51                	ja     c0022fe2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022f91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f95:	0f b6 f2             	movzx  esi,dl
c0022f98:	0f b6 db             	movzx  ebx,bl
c0022f9b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f9e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022fa2:	83 ca 80             	or     edx,0xffffff80
c0022fa5:	0f b6 d2             	movzx  edx,dl
c0022fa8:	52                   	push   edx
c0022fa9:	6a 0c                	push   0xc
c0022fab:	56                   	push   esi
c0022fac:	57                   	push   edi
c0022fad:	e8 c0 ff ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fb2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022fbb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022fbf:	ee                   	out    dx,al
c0022fc0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022fc5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022fc9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022fcd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022fd1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022fd9:	83 c4 2c             	add    esp,0x2c
c0022fdc:	5b                   	pop    ebx
c0022fdd:	5e                   	pop    esi
c0022fde:	5f                   	pop    edi
c0022fdf:	5d                   	pop    ebp
c0022fe0:	eb 90                	jmp    c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fe2:	80 fb 07             	cmp    bl,0x7
c0022fe5:	77 12                	ja     c0022ff9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022fe7:	0f b6 d2             	movzx  edx,dl
c0022fea:	0f b6 db             	movzx  ebx,bl
c0022fed:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022ff5:	89 da                	mov    edx,ebx
c0022ff7:	eb 2f                	jmp    c0023028 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022ff9:	80 fb 0d             	cmp    bl,0xd
c0022ffc:	77 13                	ja     c0023011 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022ffe:	0f b6 d2             	movzx  edx,dl
c0023001:	0f b6 db             	movzx  ebx,bl
c0023004:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002300b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002300f:	eb 17                	jmp    c0023028 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023011:	80 fb 15             	cmp    bl,0x15
c0023014:	77 13                	ja     c0023029 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023016:	0f b6 d2             	movzx  edx,dl
c0023019:	0f b6 db             	movzx  ebx,bl
c002301c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023024:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023028:	ee                   	out    dx,al
c0023029:	83 c4 1c             	add    esp,0x1c
c002302c:	5b                   	pop    ebx
c002302d:	5e                   	pop    esi
c002302e:	5f                   	pop    edi
c002302f:	5d                   	pop    ebp
c0023030:	c3                   	ret    
c0023031:	90                   	nop

c0023032 <IDE::read(unsigned char, unsigned char)>:
c0023032:	55                   	push   ebp
c0023033:	57                   	push   edi
c0023034:	56                   	push   esi
c0023035:	53                   	push   ebx
c0023036:	83 ec 1c             	sub    esp,0x1c
c0023039:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002303d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023041:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023044:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023048:	3c 03                	cmp    al,0x3
c002304a:	77 43                	ja     c002308f <IDE::read(unsigned char, unsigned char)+0x5d>
c002304c:	0f b6 f2             	movzx  esi,dl
c002304f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023052:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023056:	83 c8 80             	or     eax,0xffffff80
c0023059:	0f b6 c0             	movzx  eax,al
c002305c:	50                   	push   eax
c002305d:	6a 0c                	push   0xc
c002305f:	56                   	push   esi
c0023060:	57                   	push   edi
c0023061:	e8 0c ff ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023066:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002306b:	0f b6 c3             	movzx  eax,bl
c002306e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023072:	ec                   	in     al,dx
c0023073:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023077:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002307c:	52                   	push   edx
c002307d:	6a 0c                	push   0xc
c002307f:	56                   	push   esi
c0023080:	57                   	push   edi
c0023081:	e8 ec fe ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023086:	83 c4 20             	add    esp,0x20
c0023089:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002308d:	eb 49                	jmp    c00230d8 <IDE::read(unsigned char, unsigned char)+0xa6>
c002308f:	80 fb 07             	cmp    bl,0x7
c0023092:	77 12                	ja     c00230a6 <IDE::read(unsigned char, unsigned char)+0x74>
c0023094:	0f b6 d2             	movzx  edx,dl
c0023097:	0f b6 c3             	movzx  eax,bl
c002309a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00230a2:	89 c2                	mov    edx,eax
c00230a4:	eb 31                	jmp    c00230d7 <IDE::read(unsigned char, unsigned char)+0xa5>
c00230a6:	80 fb 0d             	cmp    bl,0xd
c00230a9:	77 13                	ja     c00230be <IDE::read(unsigned char, unsigned char)+0x8c>
c00230ab:	0f b6 d2             	movzx  edx,dl
c00230ae:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00230b5:	0f b6 d3             	movzx  edx,bl
c00230b8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00230bc:	eb 19                	jmp    c00230d7 <IDE::read(unsigned char, unsigned char)+0xa5>
c00230be:	31 c0                	xor    eax,eax
c00230c0:	80 fb 15             	cmp    bl,0x15
c00230c3:	77 13                	ja     c00230d8 <IDE::read(unsigned char, unsigned char)+0xa6>
c00230c5:	0f b6 d2             	movzx  edx,dl
c00230c8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00230d0:	0f b6 d3             	movzx  edx,bl
c00230d3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00230d7:	ec                   	in     al,dx
c00230d8:	83 c4 1c             	add    esp,0x1c
c00230db:	5b                   	pop    ebx
c00230dc:	5e                   	pop    esi
c00230dd:	5f                   	pop    edi
c00230de:	5d                   	pop    ebp
c00230df:	c3                   	ret    

c00230e0 <IDE::waitInterrupt(unsigned char)>:
c00230e0:	55                   	push   ebp
c00230e1:	57                   	push   edi
c00230e2:	56                   	push   esi
c00230e3:	53                   	push   ebx
c00230e4:	31 db                	xor    ebx,ebx
c00230e6:	83 ec 0c             	sub    esp,0xc
c00230e9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00230ed:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00230f2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00230fa:	89 e8                	mov    eax,ebp
c00230fc:	84 c0                	test   al,al
c00230fe:	75 34                	jne    c0023134 <IDE::waitInterrupt(unsigned char)+0x54>
c0023100:	52                   	push   edx
c0023101:	6a 0c                	push   0xc
c0023103:	56                   	push   esi
c0023104:	57                   	push   edi
c0023105:	e8 28 ff ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c002310a:	83 c4 10             	add    esp,0x10
c002310d:	a8 01                	test   al,0x1
c002310f:	75 2b                	jne    c002313c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023111:	f6 c3 04             	test   bl,0x4
c0023114:	75 16                	jne    c002312c <IDE::waitInterrupt(unsigned char)+0x4c>
c0023116:	83 fb 32             	cmp    ebx,0x32
c0023119:	7e 11                	jle    c002312c <IDE::waitInterrupt(unsigned char)+0x4c>
c002311b:	50                   	push   eax
c002311c:	50                   	push   eax
c002311d:	6a 00                	push   0x0
c002311f:	68 80 96 98 00       	push   0x989680
c0023124:	e8 8b b1 ff ff       	call   c001e2b4 <nanoSleep(unsigned long long)>
c0023129:	83 c4 10             	add    esp,0x10
c002312c:	83 fb 3c             	cmp    ebx,0x3c
c002312f:	74 0b                	je     c002313c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023131:	43                   	inc    ebx
c0023132:	eb be                	jmp    c00230f2 <IDE::waitInterrupt(unsigned char)+0x12>
c0023134:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002313c:	83 c4 0c             	add    esp,0xc
c002313f:	89 e8                	mov    eax,ebp
c0023141:	5b                   	pop    ebx
c0023142:	5e                   	pop    esi
c0023143:	5f                   	pop    edi
c0023144:	5d                   	pop    ebp
c0023145:	c3                   	ret    

c0023146 <ideChannel0IRQHandler(regs*, void*)>:
c0023146:	83 ec 10             	sub    esp,0x10
c0023149:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002314d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023154:	6a 07                	push   0x7
c0023156:	6a 00                	push   0x0
c0023158:	50                   	push   eax
c0023159:	e8 d4 fe ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c002315e:	83 c4 1c             	add    esp,0x1c
c0023161:	c3                   	ret    

c0023162 <ideChannel1IRQHandler(regs*, void*)>:
c0023162:	83 ec 10             	sub    esp,0x10
c0023165:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023169:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023170:	6a 07                	push   0x7
c0023172:	6a 01                	push   0x1
c0023174:	50                   	push   eax
c0023175:	e8 b8 fe ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c002317a:	83 c4 1c             	add    esp,0x1c
c002317d:	c3                   	ret    

c002317e <IDE::enableIRQs(unsigned char, bool)>:
c002317e:	57                   	push   edi
c002317f:	56                   	push   esi
c0023180:	be 04 00 00 00       	mov    esi,0x4
c0023185:	53                   	push   ebx
c0023186:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002318b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002318f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023194:	0f 94 c0             	sete   al
c0023197:	d1 e0                	shl    eax,1
c0023199:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00231a0:	0f b6 c0             	movzx  eax,al
c00231a3:	50                   	push   eax
c00231a4:	6a 0c                	push   0xc
c00231a6:	57                   	push   edi
c00231a7:	53                   	push   ebx
c00231a8:	e8 c5 fd ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231ad:	83 c4 10             	add    esp,0x10
c00231b0:	50                   	push   eax
c00231b1:	6a 0c                	push   0xc
c00231b3:	57                   	push   edi
c00231b4:	53                   	push   ebx
c00231b5:	e8 78 fe ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c00231ba:	83 c4 10             	add    esp,0x10
c00231bd:	4e                   	dec    esi
c00231be:	75 f0                	jne    c00231b0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00231c0:	5b                   	pop    ebx
c00231c1:	5e                   	pop    esi
c00231c2:	5f                   	pop    edi
c00231c3:	c3                   	ret    

c00231c4 <IDE::open(int, int, void*)>:
c00231c4:	55                   	push   ebp
c00231c5:	57                   	push   edi
c00231c6:	56                   	push   esi
c00231c7:	53                   	push   ebx
c00231c8:	83 ec 1c             	sub    esp,0x1c
c00231cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00231cf:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00231d8:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00231e1:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00231e8:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00231ef:	0f 85 b0 02 00 00    	jne    c00234a5 <IDE::open(int, int, void*)+0x2e1>
c00231f5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00231fb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00231ff:	83 e0 7f             	and    eax,0x7f
c0023202:	3c 05                	cmp    al,0x5
c0023204:	74 04                	je     c002320a <IDE::open(int, int, void*)+0x46>
c0023206:	3c 0f                	cmp    al,0xf
c0023208:	75 32                	jne    c002323c <IDE::open(int, int, void*)+0x78>
c002320a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023210:	83 e0 fc             	and    eax,0xfffffffc
c0023213:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002321a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023220:	83 e0 fc             	and    eax,0xfffffffc
c0023223:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002322a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023230:	83 e0 fc             	and    eax,0xfffffffc
c0023233:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002323a:	eb 14                	jmp    c0023250 <IDE::open(int, int, void*)+0x8c>
c002323c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023246:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023250:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023257:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002325e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023262:	89 c6                	mov    esi,eax
c0023264:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023269:	c1 e6 10             	shl    esi,0x10
c002326c:	89 e8                	mov    eax,ebp
c002326e:	89 fa                	mov    edx,edi
c0023270:	c1 e0 0b             	shl    eax,0xb
c0023273:	09 f0                	or     eax,esi
c0023275:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002327c:	c1 e6 08             	shl    esi,0x8
c002327f:	09 c6                	or     esi,eax
c0023281:	89 f0                	mov    eax,esi
c0023283:	0d 08 00 00 80       	or     eax,0x80000008
c0023288:	ef                   	out    dx,eax
c0023289:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002328e:	89 ca                	mov    edx,ecx
c0023290:	ed                   	in     eax,dx
c0023291:	c1 e8 10             	shr    eax,0x10
c0023294:	3d ff ff 00 00       	cmp    eax,0xffff
c0023299:	0f 84 f5 00 00 00    	je     c0023394 <IDE::open(int, int, void*)+0x1d0>
c002329f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00232a5:	89 fa                	mov    edx,edi
c00232a7:	89 f0                	mov    eax,esi
c00232a9:	ef                   	out    dx,eax
c00232aa:	b0 fe                	mov    al,0xfe
c00232ac:	89 ca                	mov    edx,ecx
c00232ae:	ee                   	out    dx,al
c00232af:	89 f0                	mov    eax,esi
c00232b1:	89 fa                	mov    edx,edi
c00232b3:	ef                   	out    dx,eax
c00232b4:	89 ca                	mov    edx,ecx
c00232b6:	ed                   	in     eax,dx
c00232b7:	3c fe                	cmp    al,0xfe
c00232b9:	0f 85 a9 00 00 00    	jne    c0023368 <IDE::open(int, int, void*)+0x1a4>
c00232bf:	8b 15 68 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e368
c00232c5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00232cc:	74 33                	je     c0023301 <IDE::open(int, int, void*)+0x13d>
c00232ce:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00232d4:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00232d8:	40                   	inc    eax
c00232d9:	83 ec 0c             	sub    esp,0xc
c00232dc:	0f b6 c0             	movzx  eax,al
c00232df:	50                   	push   eax
c00232e0:	55                   	push   ebp
c00232e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00232e5:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00232eb:	51                   	push   ecx
c00232ec:	e8 f1 4e ff ff       	call   c00181e2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00232f1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00232f6:	83 c4 1c             	add    esp,0x1c
c00232f9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00232ff:	eb 0a                	jmp    c002330b <IDE::open(int, int, void*)+0x147>
c0023301:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002330b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023312:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023319:	c1 e1 10             	shl    ecx,0x10
c002331c:	c1 e0 08             	shl    eax,0x8
c002331f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023324:	09 c1                	or     ecx,eax
c0023326:	89 fa                	mov    edx,edi
c0023328:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002332f:	c1 e0 0b             	shl    eax,0xb
c0023332:	09 c1                	or     ecx,eax
c0023334:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002333a:	89 c8                	mov    eax,ecx
c002333c:	ef                   	out    dx,eax
c002333d:	be fc 0c 00 00       	mov    esi,0xcfc
c0023342:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023348:	89 f2                	mov    edx,esi
c002334a:	ee                   	out    dx,al
c002334b:	89 c8                	mov    eax,ecx
c002334d:	89 fa                	mov    edx,edi
c002334f:	ef                   	out    dx,eax
c0023350:	89 f2                	mov    edx,esi
c0023352:	ed                   	in     eax,dx
c0023353:	0f b6 c0             	movzx  eax,al
c0023356:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002335c:	74 46                	je     c00233a4 <IDE::open(int, int, void*)+0x1e0>
c002335e:	83 ec 0c             	sub    esp,0xc
c0023361:	68 f0 c9 02 c0       	push   0xc002c9f0
c0023366:	eb 34                	jmp    c002339c <IDE::open(int, int, void*)+0x1d8>
c0023368:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023371:	75 17                	jne    c002338a <IDE::open(int, int, void*)+0x1c6>
c0023373:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023378:	74 07                	je     c0023381 <IDE::open(int, int, void*)+0x1bd>
c002337a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002337f:	75 09                	jne    c002338a <IDE::open(int, int, void*)+0x1c6>
c0023381:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023388:	eb 1a                	jmp    c00233a4 <IDE::open(int, int, void*)+0x1e0>
c002338a:	83 ec 0c             	sub    esp,0xc
c002338d:	68 f8 c9 02 c0       	push   0xc002c9f8
c0023392:	eb 08                	jmp    c002339c <IDE::open(int, int, void*)+0x1d8>
c0023394:	83 ec 0c             	sub    esp,0xc
c0023397:	68 29 ca 02 c0       	push   0xc002ca29
c002339c:	e8 e8 71 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c00233a1:	83 c4 10             	add    esp,0x10
c00233a4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00233ab:	79 1a                	jns    c00233c7 <IDE::open(int, int, void*)+0x203>
c00233ad:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00233b3:	83 e0 fc             	and    eax,0xfffffffc
c00233b6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00233bd:	83 c0 08             	add    eax,0x8
c00233c0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00233c7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00233cd:	89 c2                	mov    edx,eax
c00233cf:	83 e2 0f             	and    edx,0xf
c00233d2:	66 83 fa 08          	cmp    dx,0x8
c00233d6:	75 0a                	jne    c00233e2 <IDE::open(int, int, void*)+0x21e>
c00233d8:	83 e8 02             	sub    eax,0x2
c00233db:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00233e2:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00233e8:	89 c2                	mov    edx,eax
c00233ea:	83 e2 0f             	and    edx,0xf
c00233ed:	66 83 fa 08          	cmp    dx,0x8
c00233f1:	75 0a                	jne    c00233fd <IDE::open(int, int, void*)+0x239>
c00233f3:	83 e8 02             	sub    eax,0x2
c00233f6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00233fd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023404:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002340b:	89 d0                	mov    eax,edx
c002340d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023410:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023414:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023418:	8d 4a 01             	lea    ecx,[edx+0x1]
c002341b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023420:	0f b6 c9             	movzx  ecx,cl
c0023423:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002342a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002342d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023431:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023435:	8d 50 02             	lea    edx,[eax+0x2]
c0023438:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002343d:	0f b6 d2             	movzx  edx,dl
c0023440:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023446:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023449:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002344d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023451:	8d 48 03             	lea    ecx,[eax+0x3]
c0023454:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023459:	0f b6 c9             	movzx  ecx,cl
c002345c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023462:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023465:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023469:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002346d:	8d 50 04             	lea    edx,[eax+0x4]
c0023470:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023476:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002347b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023482:	66 85 f6             	test   si,si
c0023485:	74 3e                	je     c00234c5 <IDE::open(int, int, void*)+0x301>
c0023487:	0f b6 d2             	movzx  edx,dl
c002348a:	83 c0 05             	add    eax,0x5
c002348d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023490:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023494:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023498:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002349e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234a3:	eb 20                	jmp    c00234c5 <IDE::open(int, int, void*)+0x301>
c00234a5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00234af:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00234b9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00234c0:	e9 02 ff ff ff       	jmp    c00233c7 <IDE::open(int, int, void*)+0x203>
c00234c5:	52                   	push   edx
c00234c6:	52                   	push   edx
c00234c7:	6a 00                	push   0x0
c00234c9:	53                   	push   ebx
c00234ca:	e8 7d fa ff ff       	call   c0022f4c <IDE::prepareInterrupt(unsigned char)>
c00234cf:	59                   	pop    ecx
c00234d0:	5e                   	pop    esi
c00234d1:	6a 01                	push   0x1
c00234d3:	53                   	push   ebx
c00234d4:	e8 73 fa ff ff       	call   c0022f4c <IDE::prepareInterrupt(unsigned char)>
c00234d9:	83 c4 0c             	add    esp,0xc
c00234dc:	6a 00                	push   0x0
c00234de:	6a 00                	push   0x0
c00234e0:	53                   	push   ebx
c00234e1:	e8 98 fc ff ff       	call   c002317e <IDE::enableIRQs(unsigned char, bool)>
c00234e6:	83 c4 0c             	add    esp,0xc
c00234e9:	6a 00                	push   0x0
c00234eb:	6a 01                	push   0x1
c00234ed:	53                   	push   ebx
c00234ee:	e8 8b fc ff ff       	call   c002317e <IDE::enableIRQs(unsigned char, bool)>
c00234f3:	83 c4 10             	add    esp,0x10
c00234f6:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00234fd:	74 40                	je     c002353f <IDE::open(int, int, void*)+0x37b>
c00234ff:	83 ec 0c             	sub    esp,0xc
c0023502:	68 53 ca 02 c0       	push   0xc002ca53
c0023507:	e8 91 f9 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c002350c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002350f:	6a 01                	push   0x1
c0023511:	68 46 31 02 c0       	push   0xc0023146
c0023516:	6a 0e                	push   0xe
c0023518:	53                   	push   ebx
c0023519:	e8 2a 0d ff ff       	call   c0014248 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002351e:	83 c4 14             	add    esp,0x14
c0023521:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023527:	53                   	push   ebx
c0023528:	6a 01                	push   0x1
c002352a:	68 62 31 02 c0       	push   0xc0023162
c002352f:	6a 0f                	push   0xf
c0023531:	53                   	push   ebx
c0023532:	e8 11 0d ff ff       	call   c0014248 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023537:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002353d:	eb 4a                	jmp    c0023589 <IDE::open(int, int, void*)+0x3c5>
c002353f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023549:	50                   	push   eax
c002354a:	6a 0f                	push   0xf
c002354c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023552:	68 6f ca 02 c0       	push   0xc002ca6f
c0023557:	e8 41 f9 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c002355c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002355f:	6a 00                	push   0x0
c0023561:	68 46 31 02 c0       	push   0xc0023146
c0023566:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002356c:	53                   	push   ebx
c002356d:	e8 d6 0c ff ff       	call   c0014248 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023572:	83 c4 14             	add    esp,0x14
c0023575:	53                   	push   ebx
c0023576:	6a 00                	push   0x0
c0023578:	68 62 31 02 c0       	push   0xc0023162
c002357d:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023583:	53                   	push   ebx
c0023584:	e8 bf 0c ff ff       	call   c0014248 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023589:	8b 03                	mov    eax,DWORD PTR [ebx]
c002358b:	83 c4 20             	add    esp,0x20
c002358e:	83 ec 0c             	sub    esp,0xc
c0023591:	53                   	push   ebx
c0023592:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023595:	83 c4 0c             	add    esp,0xc
c0023598:	6a 07                	push   0x7
c002359a:	6a 00                	push   0x0
c002359c:	53                   	push   ebx
c002359d:	e8 90 fa ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c00235a2:	83 c4 0c             	add    esp,0xc
c00235a5:	6a 07                	push   0x7
c00235a7:	6a 01                	push   0x1
c00235a9:	53                   	push   ebx
c00235aa:	e8 83 fa ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c00235af:	83 c4 0c             	add    esp,0xc
c00235b2:	6a 01                	push   0x1
c00235b4:	6a 00                	push   0x0
c00235b6:	53                   	push   ebx
c00235b7:	e8 c2 fb ff ff       	call   c002317e <IDE::enableIRQs(unsigned char, bool)>
c00235bc:	83 c4 0c             	add    esp,0xc
c00235bf:	6a 01                	push   0x1
c00235c1:	6a 01                	push   0x1
c00235c3:	53                   	push   ebx
c00235c4:	e8 b5 fb ff ff       	call   c002317e <IDE::enableIRQs(unsigned char, bool)>
c00235c9:	83 c4 2c             	add    esp,0x2c
c00235cc:	31 c0                	xor    eax,eax
c00235ce:	5b                   	pop    ebx
c00235cf:	5e                   	pop    esi
c00235d0:	5f                   	pop    edi
c00235d1:	5d                   	pop    ebp
c00235d2:	c3                   	ret    
c00235d3:	90                   	nop

c00235d4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00235d4:	55                   	push   ebp
c00235d5:	57                   	push   edi
c00235d6:	56                   	push   esi
c00235d7:	53                   	push   ebx
c00235d8:	83 ec 1c             	sub    esp,0x1c
c00235db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00235df:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00235e3:	8d 50 f8             	lea    edx,[eax-0x8]
c00235e6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00235ea:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00235ee:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00235f2:	80 fa 03             	cmp    dl,0x3
c00235f5:	77 5d                	ja     c0023654 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00235f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00235fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00235ff:	0f b6 db             	movzx  ebx,bl
c0023602:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023605:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023609:	83 ca 80             	or     edx,0xffffff80
c002360c:	0f b6 d2             	movzx  edx,dl
c002360f:	52                   	push   edx
c0023610:	6a 0c                	push   0xc
c0023612:	53                   	push   ebx
c0023613:	56                   	push   esi
c0023614:	e8 59 f9 ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023619:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002361e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023622:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023626:	0f b6 c0             	movzx  eax,al
c0023629:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002362d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002362f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023634:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023638:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002363c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023640:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023648:	83 c4 2c             	add    esp,0x2c
c002364b:	5b                   	pop    ebx
c002364c:	5e                   	pop    esi
c002364d:	5f                   	pop    edi
c002364e:	5d                   	pop    ebp
c002364f:	e9 1e f9 ff ff       	jmp    c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023654:	3c 07                	cmp    al,0x7
c0023656:	77 10                	ja     c0023668 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023658:	0f b6 db             	movzx  ebx,bl
c002365b:	0f b6 d0             	movzx  edx,al
c002365e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023666:	eb 2d                	jmp    c0023695 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023668:	3c 0d                	cmp    al,0xd
c002366a:	77 13                	ja     c002367f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002366c:	0f b6 db             	movzx  ebx,bl
c002366f:	0f b6 c0             	movzx  eax,al
c0023672:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023679:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002367d:	eb 16                	jmp    c0023695 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002367f:	3c 15                	cmp    al,0x15
c0023681:	77 14                	ja     c0023697 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023683:	0f b6 db             	movzx  ebx,bl
c0023686:	0f b6 c0             	movzx  eax,al
c0023689:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023691:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023695:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023697:	83 c4 1c             	add    esp,0x1c
c002369a:	5b                   	pop    ebx
c002369b:	5e                   	pop    esi
c002369c:	5f                   	pop    edi
c002369d:	5d                   	pop    ebp
c002369e:	c3                   	ret    
c002369f:	90                   	nop

c00236a0 <IDE::detect()>:
c00236a0:	55                   	push   ebp
c00236a1:	57                   	push   edi
c00236a2:	56                   	push   esi
c00236a3:	53                   	push   ebx
c00236a4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00236aa:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00236b1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00236b8:	0f 85 be 02 00 00    	jne    c002397c <IDE::detect()+0x2dc>
c00236be:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00236c5:	31 f6                	xor    esi,esi
c00236c7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00236cf:	31 ed                	xor    ebp,ebp
c00236d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00236d5:	c1 e0 06             	shl    eax,0x6
c00236d8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00236e0:	89 e8                	mov    eax,ebp
c00236e2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00236e6:	c1 e0 04             	shl    eax,0x4
c00236e9:	83 c8 a0             	or     eax,0xffffffa0
c00236ec:	0f b6 c0             	movzx  eax,al
c00236ef:	50                   	push   eax
c00236f0:	6a 06                	push   0x6
c00236f2:	56                   	push   esi
c00236f3:	53                   	push   ebx
c00236f4:	e8 79 f8 ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236f9:	83 c4 0c             	add    esp,0xc
c00236fc:	6a 0c                	push   0xc
c00236fe:	56                   	push   esi
c00236ff:	53                   	push   ebx
c0023700:	e8 2d f9 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c0023705:	83 c4 0c             	add    esp,0xc
c0023708:	6a 0c                	push   0xc
c002370a:	56                   	push   esi
c002370b:	53                   	push   ebx
c002370c:	e8 21 f9 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c0023711:	83 c4 0c             	add    esp,0xc
c0023714:	6a 0c                	push   0xc
c0023716:	56                   	push   esi
c0023717:	53                   	push   ebx
c0023718:	e8 15 f9 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c002371d:	83 c4 0c             	add    esp,0xc
c0023720:	6a 0c                	push   0xc
c0023722:	56                   	push   esi
c0023723:	53                   	push   ebx
c0023724:	e8 09 f9 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c0023729:	68 ec 00 00 00       	push   0xec
c002372e:	6a 07                	push   0x7
c0023730:	56                   	push   esi
c0023731:	53                   	push   ebx
c0023732:	e8 3b f8 ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023737:	83 c4 1c             	add    esp,0x1c
c002373a:	6a 0c                	push   0xc
c002373c:	56                   	push   esi
c002373d:	53                   	push   ebx
c002373e:	e8 ef f8 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c0023743:	83 c4 0c             	add    esp,0xc
c0023746:	6a 0c                	push   0xc
c0023748:	56                   	push   esi
c0023749:	53                   	push   ebx
c002374a:	e8 e3 f8 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c002374f:	83 c4 0c             	add    esp,0xc
c0023752:	6a 0c                	push   0xc
c0023754:	56                   	push   esi
c0023755:	53                   	push   ebx
c0023756:	e8 d7 f8 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c002375b:	83 c4 0c             	add    esp,0xc
c002375e:	6a 0c                	push   0xc
c0023760:	56                   	push   esi
c0023761:	53                   	push   ebx
c0023762:	e8 cb f8 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c0023767:	83 c4 0c             	add    esp,0xc
c002376a:	6a 0c                	push   0xc
c002376c:	56                   	push   esi
c002376d:	53                   	push   ebx
c002376e:	e8 bf f8 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c0023773:	83 c4 10             	add    esp,0x10
c0023776:	84 c0                	test   al,al
c0023778:	0f 84 8b 01 00 00    	je     c0023909 <IDE::detect()+0x269>
c002377e:	31 ff                	xor    edi,edi
c0023780:	50                   	push   eax
c0023781:	6a 0c                	push   0xc
c0023783:	56                   	push   esi
c0023784:	53                   	push   ebx
c0023785:	e8 a8 f8 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c002378a:	83 c4 10             	add    esp,0x10
c002378d:	a8 01                	test   al,0x1
c002378f:	0f 85 8e 01 00 00    	jne    c0023923 <IDE::detect()+0x283>
c0023795:	84 c0                	test   al,al
c0023797:	78 04                	js     c002379d <IDE::detect()+0xfd>
c0023799:	a8 08                	test   al,0x8
c002379b:	75 27                	jne    c00237c4 <IDE::detect()+0x124>
c002379d:	47                   	inc    edi
c002379e:	81 ff 17 01 00 00    	cmp    edi,0x117
c00237a4:	7e da                	jle    c0023780 <IDE::detect()+0xe0>
c00237a6:	50                   	push   eax
c00237a7:	50                   	push   eax
c00237a8:	6a 00                	push   0x0
c00237aa:	68 40 4b 4c 00       	push   0x4c4b40
c00237af:	e8 00 ab ff ff       	call   c001e2b4 <nanoSleep(unsigned long long)>
c00237b4:	83 c4 10             	add    esp,0x10
c00237b7:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00237bd:	75 c1                	jne    c0023780 <IDE::detect()+0xe0>
c00237bf:	e9 5f 01 00 00       	jmp    c0023923 <IDE::detect()+0x283>
c00237c4:	31 c9                	xor    ecx,ecx
c00237c6:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00237ca:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00237ce:	83 ec 0c             	sub    esp,0xc
c00237d1:	68 80 00 00 00       	push   0x80
c00237d6:	57                   	push   edi
c00237d7:	6a 00                	push   0x0
c00237d9:	56                   	push   esi
c00237da:	53                   	push   ebx
c00237db:	e8 f4 fd ff ff       	call   c00235d4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00237e0:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00237e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00237e9:	89 d1                	mov    ecx,edx
c00237eb:	c1 e0 06             	shl    eax,0x6
c00237ee:	01 d8                	add    eax,ebx
c00237f0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00237f7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00237fe:	89 f2                	mov    edx,esi
c0023800:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023806:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002380a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023810:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023814:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002381b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023823:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002382a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023832:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023838:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002383f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023845:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023849:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002384d:	83 c4 20             	add    esp,0x20
c0023850:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023853:	83 c0 02             	add    eax,0x2
c0023856:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002385c:	83 c7 02             	add    edi,0x2
c002385f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023862:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023868:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002386c:	75 e2                	jne    c0023850 <IDE::detect()+0x1b0>
c002386e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023872:	c1 e0 06             	shl    eax,0x6
c0023875:	01 d8                	add    eax,ebx
c0023877:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002387d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023884:	66 c1 ea 09          	shr    dx,0x9
c0023888:	83 e2 01             	and    edx,0x1
c002388b:	84 c9                	test   cl,cl
c002388d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023893:	75 2f                	jne    c00238c4 <IDE::detect()+0x224>
c0023895:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002389b:	85 c0                	test   eax,eax
c002389d:	74 66                	je     c0023905 <IDE::detect()+0x265>
c002389f:	50                   	push   eax
c00238a0:	55                   	push   ebp
c00238a1:	56                   	push   esi
c00238a2:	68 8b ca 02 c0       	push   0xc002ca8b
c00238a7:	e8 f1 f5 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00238ac:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00238b3:	e8 8b bf fe ff       	call   c000f843 <malloc>
c00238b8:	89 c7                	mov    edi,eax
c00238ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00238bd:	e8 78 06 00 00       	call   c0023f3a <ATA::ATA()>
c00238c2:	eb 28                	jmp    c00238ec <IDE::detect()+0x24c>
c00238c4:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00238ca:	55                   	push   ebp
c00238cb:	56                   	push   esi
c00238cc:	68 ba ca 02 c0       	push   0xc002caba
c00238d1:	e8 c7 f5 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00238d6:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00238dd:	e8 61 bf fe ff       	call   c000f843 <malloc>
c00238e2:	89 c7                	mov    edi,eax
c00238e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00238e7:	e8 8e 0c 00 00       	call   c002457a <ATAPI::ATAPI()>
c00238ec:	5a                   	pop    edx
c00238ed:	59                   	pop    ecx
c00238ee:	57                   	push   edi
c00238ef:	53                   	push   ebx
c00238f0:	e8 cf 09 ff ff       	call   c00142c4 <Device::addChild(Device*)>
c00238f5:	8b 07                	mov    eax,DWORD PTR [edi]
c00238f7:	53                   	push   ebx
c00238f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00238fc:	6a 00                	push   0x0
c00238fe:	57                   	push   edi
c00238ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023902:	83 c4 20             	add    esp,0x20
c0023905:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023909:	4d                   	dec    ebp
c002390a:	74 0a                	je     c0023916 <IDE::detect()+0x276>
c002390c:	bd 01 00 00 00       	mov    ebp,0x1
c0023911:	e9 bb fd ff ff       	jmp    c00236d1 <IDE::detect()+0x31>
c0023916:	4e                   	dec    esi
c0023917:	74 63                	je     c002397c <IDE::detect()+0x2dc>
c0023919:	be 01 00 00 00       	mov    esi,0x1
c002391e:	e9 ac fd ff ff       	jmp    c00236cf <IDE::detect()+0x2f>
c0023923:	50                   	push   eax
c0023924:	6a 04                	push   0x4
c0023926:	56                   	push   esi
c0023927:	53                   	push   ebx
c0023928:	e8 05 f7 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c002392d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023931:	83 c4 0c             	add    esp,0xc
c0023934:	6a 05                	push   0x5
c0023936:	56                   	push   esi
c0023937:	53                   	push   ebx
c0023938:	e8 f5 f6 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c002393d:	83 c4 10             	add    esp,0x10
c0023940:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023944:	80 fa 14             	cmp    dl,0x14
c0023947:	75 04                	jne    c002394d <IDE::detect()+0x2ad>
c0023949:	3c eb                	cmp    al,0xeb
c002394b:	eb 07                	jmp    c0023954 <IDE::detect()+0x2b4>
c002394d:	3c 96                	cmp    al,0x96
c002394f:	75 b8                	jne    c0023909 <IDE::detect()+0x269>
c0023951:	80 fa 69             	cmp    dl,0x69
c0023954:	75 b3                	jne    c0023909 <IDE::detect()+0x269>
c0023956:	68 a1 00 00 00       	push   0xa1
c002395b:	6a 07                	push   0x7
c002395d:	56                   	push   esi
c002395e:	53                   	push   ebx
c002395f:	e8 0e f6 ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023964:	5f                   	pop    edi
c0023965:	58                   	pop    eax
c0023966:	6a 00                	push   0x0
c0023968:	68 40 42 0f 00       	push   0xf4240
c002396d:	e8 42 a9 ff ff       	call   c001e2b4 <nanoSleep(unsigned long long)>
c0023972:	83 c4 10             	add    esp,0x10
c0023975:	b1 01                	mov    cl,0x1
c0023977:	e9 4a fe ff ff       	jmp    c00237c6 <IDE::detect()+0x126>
c002397c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023982:	5b                   	pop    ebx
c0023983:	5e                   	pop    esi
c0023984:	5f                   	pop    edi
c0023985:	5d                   	pop    ebp
c0023986:	c3                   	ret    
c0023987:	90                   	nop

c0023988 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023988:	55                   	push   ebp
c0023989:	57                   	push   edi
c002398a:	56                   	push   esi
c002398b:	53                   	push   ebx
c002398c:	83 ec 1c             	sub    esp,0x1c
c002398f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023993:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023997:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002399b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002399f:	88 c3                	mov    bl,al
c00239a1:	84 c0                	test   al,al
c00239a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00239a7:	0f 84 67 01 00 00    	je     c0023b14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00239ad:	83 ec 0c             	sub    esp,0xc
c00239b0:	68 eb ca 02 c0       	push   0xc002caeb
c00239b5:	e8 e3 f4 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00239ba:	83 c4 10             	add    esp,0x10
c00239bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00239c1:	3c 01                	cmp    al,0x1
c00239c3:	75 17                	jne    c00239dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00239c5:	83 ec 0c             	sub    esp,0xc
c00239c8:	b3 13                	mov    bl,0x13
c00239ca:	68 f7 ca 02 c0       	push   0xc002caf7
c00239cf:	e8 c9 f4 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00239d4:	83 c4 10             	add    esp,0x10
c00239d7:	e9 25 01 00 00       	jmp    c0023b01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00239dc:	3c 02                	cmp    al,0x2
c00239de:	0f 85 ef 00 00 00    	jne    c0023ad3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00239e4:	d1 e6                	shl    esi,1
c00239e6:	09 ee                	or     esi,ebp
c00239e8:	52                   	push   edx
c00239e9:	89 f0                	mov    eax,esi
c00239eb:	6a 01                	push   0x1
c00239ed:	0f b6 f0             	movzx  esi,al
c00239f0:	c1 e6 06             	shl    esi,0x6
c00239f3:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00239fb:	50                   	push   eax
c00239fc:	57                   	push   edi
c00239fd:	e8 30 f6 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c0023a02:	83 c4 10             	add    esp,0x10
c0023a05:	89 c6                	mov    esi,eax
c0023a07:	a8 01                	test   al,0x1
c0023a09:	74 12                	je     c0023a1d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023a0b:	83 ec 0c             	sub    esp,0xc
c0023a0e:	b3 07                	mov    bl,0x7
c0023a10:	68 0c cb 02 c0       	push   0xc002cb0c
c0023a15:	e8 83 f4 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0023a1a:	83 c4 10             	add    esp,0x10
c0023a1d:	f7 c6 02 00 00 00    	test   esi,0x2
c0023a23:	74 12                	je     c0023a37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023a25:	83 ec 0c             	sub    esp,0xc
c0023a28:	b3 03                	mov    bl,0x3
c0023a2a:	68 2a cb 02 c0       	push   0xc002cb2a
c0023a2f:	e8 69 f4 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0023a34:	83 c4 10             	add    esp,0x10
c0023a37:	f7 c6 04 00 00 00    	test   esi,0x4
c0023a3d:	74 12                	je     c0023a51 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023a3f:	83 ec 0c             	sub    esp,0xc
c0023a42:	b3 14                	mov    bl,0x14
c0023a44:	68 4a cb 02 c0       	push   0xc002cb4a
c0023a49:	e8 4f f4 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0023a4e:	83 c4 10             	add    esp,0x10
c0023a51:	f7 c6 08 00 00 00    	test   esi,0x8
c0023a57:	74 12                	je     c0023a6b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023a59:	83 ec 0c             	sub    esp,0xc
c0023a5c:	b3 03                	mov    bl,0x3
c0023a5e:	68 2a cb 02 c0       	push   0xc002cb2a
c0023a63:	e8 35 f4 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0023a68:	83 c4 10             	add    esp,0x10
c0023a6b:	f7 c6 10 00 00 00    	test   esi,0x10
c0023a71:	74 12                	je     c0023a85 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023a73:	83 ec 0c             	sub    esp,0xc
c0023a76:	b3 15                	mov    bl,0x15
c0023a78:	68 62 cb 02 c0       	push   0xc002cb62
c0023a7d:	e8 1b f4 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0023a82:	83 c4 10             	add    esp,0x10
c0023a85:	f7 c6 20 00 00 00    	test   esi,0x20
c0023a8b:	74 12                	je     c0023a9f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023a8d:	83 ec 0c             	sub    esp,0xc
c0023a90:	b3 03                	mov    bl,0x3
c0023a92:	68 2a cb 02 c0       	push   0xc002cb2a
c0023a97:	e8 01 f4 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0023a9c:	83 c4 10             	add    esp,0x10
c0023a9f:	f7 c6 40 00 00 00    	test   esi,0x40
c0023aa5:	74 12                	je     c0023ab9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023aa7:	83 ec 0c             	sub    esp,0xc
c0023aaa:	b3 16                	mov    bl,0x16
c0023aac:	68 7c cb 02 c0       	push   0xc002cb7c
c0023ab1:	e8 e7 f3 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0023ab6:	83 c4 10             	add    esp,0x10
c0023ab9:	89 f0                	mov    eax,esi
c0023abb:	84 c0                	test   al,al
c0023abd:	79 42                	jns    c0023b01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023abf:	83 ec 0c             	sub    esp,0xc
c0023ac2:	b3 0d                	mov    bl,0xd
c0023ac4:	68 9d cb 02 c0       	push   0xc002cb9d
c0023ac9:	e8 cf f3 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0023ace:	83 c4 10             	add    esp,0x10
c0023ad1:	eb 2e                	jmp    c0023b01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023ad3:	3c 03                	cmp    al,0x3
c0023ad5:	75 14                	jne    c0023aeb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023ad7:	83 ec 0c             	sub    esp,0xc
c0023ada:	b3 17                	mov    bl,0x17
c0023adc:	68 b1 cb 02 c0       	push   0xc002cbb1
c0023ae1:	e8 b7 f3 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0023ae6:	83 c4 10             	add    esp,0x10
c0023ae9:	eb 16                	jmp    c0023b01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023aeb:	3c 04                	cmp    al,0x4
c0023aed:	75 12                	jne    c0023b01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023aef:	83 ec 0c             	sub    esp,0xc
c0023af2:	b3 08                	mov    bl,0x8
c0023af4:	68 c7 cb 02 c0       	push   0xc002cbc7
c0023af9:	e8 9f f3 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0023afe:	83 c4 10             	add    esp,0x10
c0023b01:	50                   	push   eax
c0023b02:	50                   	push   eax
c0023b03:	0f b6 c3             	movzx  eax,bl
c0023b06:	50                   	push   eax
c0023b07:	68 df cb 02 c0       	push   0xc002cbdf
c0023b0c:	e8 8c f3 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0023b11:	83 c4 10             	add    esp,0x10
c0023b14:	83 c4 1c             	add    esp,0x1c
c0023b17:	88 d8                	mov    al,bl
c0023b19:	5b                   	pop    ebx
c0023b1a:	5e                   	pop    esi
c0023b1b:	5f                   	pop    edi
c0023b1c:	5d                   	pop    ebp
c0023b1d:	c3                   	ret    

c0023b1e <IDE::polling(unsigned char, unsigned int)>:
c0023b1e:	57                   	push   edi
c0023b1f:	56                   	push   esi
c0023b20:	53                   	push   ebx
c0023b21:	bb 04 00 00 00       	mov    ebx,0x4
c0023b26:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023b2a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023b2f:	52                   	push   edx
c0023b30:	6a 0c                	push   0xc
c0023b32:	56                   	push   esi
c0023b33:	57                   	push   edi
c0023b34:	e8 f9 f4 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c0023b39:	83 c4 10             	add    esp,0x10
c0023b3c:	4b                   	dec    ebx
c0023b3d:	75 f0                	jne    c0023b2f <IDE::polling(unsigned char, unsigned int)+0x11>
c0023b3f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023b44:	50                   	push   eax
c0023b45:	6a 0c                	push   0xc
c0023b47:	56                   	push   esi
c0023b48:	57                   	push   edi
c0023b49:	e8 e4 f4 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c0023b4e:	83 c4 10             	add    esp,0x10
c0023b51:	a8 01                	test   al,0x1
c0023b53:	74 12                	je     c0023b67 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023b55:	83 ec 0c             	sub    esp,0xc
c0023b58:	68 f9 cb 02 c0       	push   0xc002cbf9
c0023b5d:	e8 3b f3 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0023b62:	83 c4 10             	add    esp,0x10
c0023b65:	eb 17                	jmp    c0023b7e <IDE::polling(unsigned char, unsigned int)+0x60>
c0023b67:	a8 20                	test   al,0x20
c0023b69:	75 0f                	jne    c0023b7a <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023b6b:	4b                   	dec    ebx
c0023b6c:	74 10                	je     c0023b7e <IDE::polling(unsigned char, unsigned int)+0x60>
c0023b6e:	84 c0                	test   al,al
c0023b70:	78 d2                	js     c0023b44 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023b72:	a8 08                	test   al,0x8
c0023b74:	74 ce                	je     c0023b44 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023b76:	31 c0                	xor    eax,eax
c0023b78:	eb 06                	jmp    c0023b80 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023b7a:	b0 01                	mov    al,0x1
c0023b7c:	eb 02                	jmp    c0023b80 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023b7e:	b0 02                	mov    al,0x2
c0023b80:	5b                   	pop    ebx
c0023b81:	5e                   	pop    esi
c0023b82:	5f                   	pop    edi
c0023b83:	c3                   	ret    

c0023b84 <SATABus::close(int, int, void*)>:
c0023b84:	31 c0                	xor    eax,eax
c0023b86:	c3                   	ret    
c0023b87:	90                   	nop

c0023b88 <SATABus::detect()>:
c0023b88:	c3                   	ret    
c0023b89:	90                   	nop

c0023b8a <SATABus::SATABus()>:
c0023b8a:	83 ec 0c             	sub    esp,0xc
c0023b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b91:	83 ec 08             	sub    esp,0x8
c0023b94:	68 3c cc 02 c0       	push   0xc002cc3c
c0023b99:	50                   	push   eax
c0023b9a:	e8 b1 0a ff ff       	call   c0014650 <HardDiskController::HardDiskController(char const*)>
c0023b9f:	83 c4 10             	add    esp,0x10
c0023ba2:	ba f8 cc 02 c0       	mov    edx,0xc002ccf8
c0023ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bab:	89 10                	mov    DWORD PTR [eax],edx
c0023bad:	83 ec 0c             	sub    esp,0xc
c0023bb0:	6a 50                	push   0x50
c0023bb2:	e8 13 c4 fe ff       	call   c000ffca <Phys::allocateContiguousPages(int)>
c0023bb7:	83 c4 10             	add    esp,0x10
c0023bba:	89 c2                	mov    edx,eax
c0023bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bc0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023bc6:	83 ec 0c             	sub    esp,0xc
c0023bc9:	6a 50                	push   0x50
c0023bcb:	e8 73 df fe ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0023bd0:	83 c4 10             	add    esp,0x10
c0023bd3:	89 c2                	mov    edx,eax
c0023bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bd9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023bdf:	e8 fa e1 fe ff       	call   c0011dde <Virt::getAKernelVAS()>
c0023be4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023be8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023bf2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023bf8:	83 ec 0c             	sub    esp,0xc
c0023bfb:	6a 03                	push   0x3
c0023bfd:	6a 50                	push   0x50
c0023bff:	51                   	push   ecx
c0023c00:	52                   	push   edx
c0023c01:	50                   	push   eax
c0023c02:	e8 1d ea fe ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023c07:	83 c4 20             	add    esp,0x20
c0023c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c0e:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c18:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023c1e:	83 ec 04             	sub    esp,0x4
c0023c21:	52                   	push   edx
c0023c22:	50                   	push   eax
c0023c23:	68 60 cc 02 c0       	push   0xc002cc60
c0023c28:	e8 70 f2 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0023c2d:	83 c4 10             	add    esp,0x10
c0023c30:	90                   	nop
c0023c31:	83 c4 0c             	add    esp,0xc
c0023c34:	c3                   	ret    
c0023c35:	90                   	nop

c0023c36 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023c36:	83 ec 0c             	sub    esp,0xc
c0023c39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023c3d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023c40:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023c43:	09 c2                	or     edx,eax
c0023c45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c49:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023c4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023c51:	31 c0                	xor    eax,eax
c0023c53:	c1 e9 08             	shr    ecx,0x8
c0023c56:	83 e1 0f             	and    ecx,0xf
c0023c59:	39 c8                	cmp    eax,ecx
c0023c5b:	74 0a                	je     c0023c67 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023c5d:	f6 c2 01             	test   dl,0x1
c0023c60:	74 18                	je     c0023c7a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c62:	d1 ea                	shr    edx,1
c0023c64:	40                   	inc    eax
c0023c65:	eb f2                	jmp    c0023c59 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023c67:	83 ec 0c             	sub    esp,0xc
c0023c6a:	68 84 cc 02 c0       	push   0xc002cc84
c0023c6f:	e8 15 69 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c0023c74:	83 c4 10             	add    esp,0x10
c0023c77:	83 c8 ff             	or     eax,0xffffffff
c0023c7a:	83 c4 0c             	add    esp,0xc
c0023c7d:	c3                   	ret    

c0023c7e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023c7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023c82:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023c85:	89 c2                	mov    edx,eax
c0023c87:	c1 ea 08             	shr    edx,0x8
c0023c8a:	83 e2 0f             	and    edx,0xf
c0023c8d:	fe ca                	dec    dl
c0023c8f:	75 31                	jne    c0023cc2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c91:	83 e0 0f             	and    eax,0xf
c0023c94:	3c 03                	cmp    al,0x3
c0023c96:	75 2a                	jne    c0023cc2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023c98:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023c9b:	b8 02 00 00 00       	mov    eax,0x2
c0023ca0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023ca6:	74 1c                	je     c0023cc4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023ca8:	b8 04 00 00 00       	mov    eax,0x4
c0023cad:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023cb3:	74 0f                	je     c0023cc4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023cb5:	31 c0                	xor    eax,eax
c0023cb7:	83 fa 03             	cmp    edx,0x3
c0023cba:	0f 94 c0             	sete   al
c0023cbd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023cc1:	c3                   	ret    
c0023cc2:	31 c0                	xor    eax,eax
c0023cc4:	c3                   	ret    
c0023cc5:	90                   	nop

c0023cc6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023cc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023cca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ccd:	0f ba e2 0f          	bt     edx,0xf
c0023cd1:	72 f7                	jb     c0023cca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023cd3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cd6:	83 ca 10             	or     edx,0x10
c0023cd9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023cdc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cdf:	83 ca 01             	or     edx,0x1
c0023ce2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023ce5:	c3                   	ret    

c0023ce6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023ce6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023cea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023ced:	83 e2 fe             	and    edx,0xfffffffe
c0023cf0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023cf3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cf6:	83 e2 ef             	and    edx,0xffffffef
c0023cf9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023cfc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023cff:	0f ba e2 0e          	bt     edx,0xe
c0023d03:	72 f7                	jb     c0023cfc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d05:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d08:	0f ba e2 0f          	bt     edx,0xf
c0023d0c:	72 ee                	jb     c0023cfc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023d0e:	c3                   	ret    
c0023d0f:	90                   	nop

c0023d10 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023d10:	55                   	push   ebp
c0023d11:	57                   	push   edi
c0023d12:	56                   	push   esi
c0023d13:	53                   	push   ebx
c0023d14:	83 ec 1c             	sub    esp,0x1c
c0023d17:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023d1f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023d23:	53                   	push   ebx
c0023d24:	89 fd                	mov    ebp,edi
c0023d26:	56                   	push   esi
c0023d27:	c1 e5 0a             	shl    ebp,0xa
c0023d2a:	e8 b7 ff ff ff       	call   c0023ce6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023d2f:	83 ec 0c             	sub    esp,0xc
c0023d32:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023d38:	01 e8                	add    eax,ebp
c0023d3a:	89 03                	mov    DWORD PTR [ebx],eax
c0023d3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023d3e:	68 00 04 00 00       	push   0x400
c0023d43:	6a 00                	push   0x0
c0023d45:	50                   	push   eax
c0023d46:	e8 2d ca fd ff       	call   c0000778 <memset>
c0023d4b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023d51:	89 fa                	mov    edx,edi
c0023d53:	01 e8                	add    eax,ebp
c0023d55:	c1 e7 0d             	shl    edi,0xd
c0023d58:	89 03                	mov    DWORD PTR [ebx],eax
c0023d5a:	c1 e2 08             	shl    edx,0x8
c0023d5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023d64:	81 c2 00 80 00 00    	add    edx,0x8000
c0023d6a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023d6e:	89 d0                	mov    eax,edx
c0023d70:	83 c4 1c             	add    esp,0x1c
c0023d73:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023d79:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023d7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023d7f:	68 00 01 00 00       	push   0x100
c0023d84:	6a 00                	push   0x0
c0023d86:	50                   	push   eax
c0023d87:	e8 ec c9 fd ff       	call   c0000778 <memset>
c0023d8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023d90:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023d96:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023d9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023da0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023da3:	83 c4 10             	add    esp,0x10
c0023da6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023dad:	31 ff                	xor    edi,edi
c0023daf:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023db5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023dbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023dbf:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023dc5:	83 c5 20             	add    ebp,0x20
c0023dc8:	01 f8                	add    eax,edi
c0023dca:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023dcd:	52                   	push   edx
c0023dce:	68 00 01 00 00       	push   0x100
c0023dd3:	6a 00                	push   0x0
c0023dd5:	50                   	push   eax
c0023dd6:	e8 9d c9 fd ff       	call   c0000778 <memset>
c0023ddb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023ddf:	83 c4 10             	add    esp,0x10
c0023de2:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023de8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023def:	01 f8                	add    eax,edi
c0023df1:	81 c7 00 01 00 00    	add    edi,0x100
c0023df7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023dfa:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023e00:	75 b3                	jne    c0023db5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023e02:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023e06:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023e0a:	83 c4 1c             	add    esp,0x1c
c0023e0d:	5b                   	pop    ebx
c0023e0e:	5e                   	pop    esi
c0023e0f:	5f                   	pop    edi
c0023e10:	5d                   	pop    ebp
c0023e11:	e9 b0 fe ff ff       	jmp    c0023cc6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023e16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023e16:	55                   	push   ebp
c0023e17:	57                   	push   edi
c0023e18:	56                   	push   esi
c0023e19:	53                   	push   ebx
c0023e1a:	31 db                	xor    ebx,ebx
c0023e1c:	83 ec 0c             	sub    esp,0xc
c0023e1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023e23:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023e27:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023e2a:	f7 c7 01 00 00 00    	test   edi,0x1
c0023e30:	0f 84 aa 00 00 00    	je     c0023ee0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023e36:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023e3a:	89 d8                	mov    eax,ebx
c0023e3c:	c1 e0 07             	shl    eax,0x7
c0023e3f:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023e46:	55                   	push   ebp
c0023e47:	56                   	push   esi
c0023e48:	e8 31 fe ff ff       	call   c0023c7e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023e4d:	5a                   	pop    edx
c0023e4e:	83 f8 01             	cmp    eax,0x1
c0023e51:	59                   	pop    ecx
c0023e52:	75 30                	jne    c0023e84 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023e54:	50                   	push   eax
c0023e55:	50                   	push   eax
c0023e56:	53                   	push   ebx
c0023e57:	68 a9 cc 02 c0       	push   0xc002cca9
c0023e5c:	e8 3c f0 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0023e61:	83 c4 0c             	add    esp,0xc
c0023e64:	53                   	push   ebx
c0023e65:	55                   	push   ebp
c0023e66:	56                   	push   esi
c0023e67:	e8 a4 fe ff ff       	call   c0023d10 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023e6c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023e73:	e8 cb b9 fe ff       	call   c000f843 <malloc>
c0023e78:	89 c5                	mov    ebp,eax
c0023e7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0023e7d:	e8 60 0d 00 00       	call   c0024be2 <SATA::SATA()>
c0023e82:	eb 33                	jmp    c0023eb7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023e84:	83 f8 04             	cmp    eax,0x4
c0023e87:	75 47                	jne    c0023ed0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023e89:	50                   	push   eax
c0023e8a:	50                   	push   eax
c0023e8b:	53                   	push   ebx
c0023e8c:	68 c0 cc 02 c0       	push   0xc002ccc0
c0023e91:	e8 07 f0 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0023e96:	83 c4 0c             	add    esp,0xc
c0023e99:	53                   	push   ebx
c0023e9a:	55                   	push   ebp
c0023e9b:	56                   	push   esi
c0023e9c:	e8 6f fe ff ff       	call   c0023d10 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ea1:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023ea8:	e8 96 b9 fe ff       	call   c000f843 <malloc>
c0023ead:	89 c5                	mov    ebp,eax
c0023eaf:	89 04 24             	mov    DWORD PTR [esp],eax
c0023eb2:	e8 d7 10 00 00       	call   c0024f8e <SATAPI::SATAPI()>
c0023eb7:	5a                   	pop    edx
c0023eb8:	59                   	pop    ecx
c0023eb9:	55                   	push   ebp
c0023eba:	56                   	push   esi
c0023ebb:	e8 04 04 ff ff       	call   c00142c4 <Device::addChild(Device*)>
c0023ec0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023ec3:	56                   	push   esi
c0023ec4:	6a 00                	push   0x0
c0023ec6:	53                   	push   ebx
c0023ec7:	55                   	push   ebp
c0023ec8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023ecb:	83 c4 20             	add    esp,0x20
c0023ece:	eb 10                	jmp    c0023ee0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023ed0:	50                   	push   eax
c0023ed1:	50                   	push   eax
c0023ed2:	53                   	push   ebx
c0023ed3:	68 d9 cc 02 c0       	push   0xc002ccd9
c0023ed8:	e8 c0 ef fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0023edd:	83 c4 10             	add    esp,0x10
c0023ee0:	d1 ef                	shr    edi,1
c0023ee2:	43                   	inc    ebx
c0023ee3:	83 fb 20             	cmp    ebx,0x20
c0023ee6:	0f 85 3e ff ff ff    	jne    c0023e2a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023eec:	83 c4 0c             	add    esp,0xc
c0023eef:	5b                   	pop    ebx
c0023ef0:	5e                   	pop    esi
c0023ef1:	5f                   	pop    edi
c0023ef2:	5d                   	pop    ebp
c0023ef3:	c3                   	ret    

c0023ef4 <SATABus::open(int, int, void*)>:
c0023ef4:	83 ec 14             	sub    esp,0x14
c0023ef7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023efb:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023f01:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023f07:	52                   	push   edx
c0023f08:	50                   	push   eax
c0023f09:	e8 08 ff ff ff       	call   c0023e16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023f0e:	31 c0                	xor    eax,eax
c0023f10:	83 c4 1c             	add    esp,0x1c
c0023f13:	c3                   	ret    

c0023f14 <ATA::close(int, int, void*)>:
c0023f14:	83 ec 0c             	sub    esp,0xc
c0023f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f1b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023f21:	85 c0                	test   eax,eax
c0023f23:	74 0c                	je     c0023f31 <ATA::close(int, int, void*)+0x1d>
c0023f25:	83 ec 0c             	sub    esp,0xc
c0023f28:	8b 10                	mov    edx,DWORD PTR [eax]
c0023f2a:	50                   	push   eax
c0023f2b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023f2e:	83 c4 10             	add    esp,0x10
c0023f31:	31 c0                	xor    eax,eax
c0023f33:	83 c4 0c             	add    esp,0xc
c0023f36:	c3                   	ret    
c0023f37:	90                   	nop

c0023f38 <ATA::powerSaving(PowerSavingLevel)>:
c0023f38:	c3                   	ret    
c0023f39:	90                   	nop

c0023f3a <ATA::ATA()>:
c0023f3a:	83 ec 0c             	sub    esp,0xc
c0023f3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f41:	83 ec 04             	sub    esp,0x4
c0023f44:	68 00 02 00 00       	push   0x200
c0023f49:	68 c1 cd 02 c0       	push   0xc002cdc1
c0023f4e:	50                   	push   eax
c0023f4f:	e8 94 07 ff ff       	call   c00146e8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023f54:	83 c4 10             	add    esp,0x10
c0023f57:	ba 44 cd 02 c0       	mov    edx,0xc002cd44
c0023f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f60:	89 10                	mov    DWORD PTR [eax],edx
c0023f62:	90                   	nop
c0023f63:	83 c4 0c             	add    esp,0xc
c0023f66:	c3                   	ret    
c0023f67:	90                   	nop

c0023f68 <ATA::flush(bool)>:
c0023f68:	53                   	push   ebx
c0023f69:	83 ec 08             	sub    esp,0x8
c0023f6c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023f71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023f75:	19 c0                	sbb    eax,eax
c0023f77:	83 e0 fd             	and    eax,0xfffffffd
c0023f7a:	05 ea 00 00 00       	add    eax,0xea
c0023f7f:	50                   	push   eax
c0023f80:	6a 07                	push   0x7
c0023f82:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f89:	50                   	push   eax
c0023f8a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f90:	e8 dd ef ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f95:	83 c4 0c             	add    esp,0xc
c0023f98:	6a 00                	push   0x0
c0023f9a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fa1:	50                   	push   eax
c0023fa2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fa8:	e8 71 fb ff ff       	call   c0023b1e <IDE::polling(unsigned char, unsigned int)>
c0023fad:	83 c4 18             	add    esp,0x18
c0023fb0:	5b                   	pop    ebx
c0023fb1:	c3                   	ret    

c0023fb2 <ATA::readyForCommand()>:
c0023fb2:	56                   	push   esi
c0023fb3:	53                   	push   ebx
c0023fb4:	31 db                	xor    ebx,ebx
c0023fb6:	50                   	push   eax
c0023fb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023fbb:	50                   	push   eax
c0023fbc:	6a 0c                	push   0xc
c0023fbe:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023fc5:	50                   	push   eax
c0023fc6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023fcc:	e8 61 f0 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c0023fd1:	83 c4 10             	add    esp,0x10
c0023fd4:	a8 88                	test   al,0x88
c0023fd6:	74 23                	je     c0023ffb <ATA::readyForCommand()+0x49>
c0023fd8:	43                   	inc    ebx
c0023fd9:	83 fb 63             	cmp    ebx,0x63
c0023fdc:	7e dd                	jle    c0023fbb <ATA::readyForCommand()+0x9>
c0023fde:	51                   	push   ecx
c0023fdf:	51                   	push   ecx
c0023fe0:	6a 00                	push   0x0
c0023fe2:	68 40 42 0f 00       	push   0xf4240
c0023fe7:	e8 c8 a2 ff ff       	call   c001e2b4 <nanoSleep(unsigned long long)>
c0023fec:	83 c4 10             	add    esp,0x10
c0023fef:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023ff5:	75 c4                	jne    c0023fbb <ATA::readyForCommand()+0x9>
c0023ff7:	31 c0                	xor    eax,eax
c0023ff9:	eb 02                	jmp    c0023ffd <ATA::readyForCommand()+0x4b>
c0023ffb:	b0 01                	mov    al,0x1
c0023ffd:	5a                   	pop    edx
c0023ffe:	5b                   	pop    ebx
c0023fff:	5e                   	pop    esi
c0024000:	c3                   	ret    
c0024001:	90                   	nop

c0024002 <ATA::access(unsigned long long, int, void*, bool)>:
c0024002:	55                   	push   ebp
c0024003:	57                   	push   edi
c0024004:	56                   	push   esi
c0024005:	53                   	push   ebx
c0024006:	83 ec 2c             	sub    esp,0x2c
c0024009:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002400d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024011:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024015:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024019:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002401d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024021:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024025:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002402b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002402f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024035:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024039:	c1 e0 06             	shl    eax,0x6
c002403c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024044:	74 5d                	je     c00240a3 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024046:	89 fa                	mov    edx,edi
c0024048:	89 f0                	mov    eax,esi
c002404a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002404e:	c1 ea 1c             	shr    edx,0x1c
c0024051:	89 d1                	mov    ecx,edx
c0024053:	09 c1                	or     ecx,eax
c0024055:	74 25                	je     c002407c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024057:	31 ed                	xor    ebp,ebp
c0024059:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024060:	89 fa                	mov    edx,edi
c0024062:	89 f0                	mov    eax,esi
c0024064:	0f ad d0             	shrd   eax,edx,cl
c0024067:	d3 ea                	shr    edx,cl
c0024069:	f6 c1 20             	test   cl,0x20
c002406c:	74 02                	je     c0024070 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002406e:	89 d0                	mov    eax,edx
c0024070:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024074:	45                   	inc    ebp
c0024075:	83 fd 06             	cmp    ebp,0x6
c0024078:	75 df                	jne    c0024059 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002407a:	eb 76                	jmp    c00240f2 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002407c:	89 f0                	mov    eax,esi
c002407e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024083:	89 fa                	mov    edx,edi
c0024085:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002408c:	0f ac d0 10          	shrd   eax,edx,0x10
c0024090:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024095:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024099:	c1 ee 18             	shr    esi,0x18
c002409c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00240a1:	eb 56                	jmp    c00240f9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00240a3:	6a 00                	push   0x0
c00240a5:	6a 3f                	push   0x3f
c00240a7:	57                   	push   edi
c00240a8:	56                   	push   esi
c00240a9:	e8 8e 29 00 00       	call   c0026a3c <__umoddi3>
c00240ae:	83 c4 10             	add    esp,0x10
c00240b1:	40                   	inc    eax
c00240b2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00240b6:	6a 00                	push   0x0
c00240b8:	68 f0 03 00 00       	push   0x3f0
c00240bd:	57                   	push   edi
c00240be:	56                   	push   esi
c00240bf:	e8 78 28 00 00       	call   c002693c <__udivdi3>
c00240c4:	83 c4 10             	add    esp,0x10
c00240c7:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00240cc:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00240d3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00240d8:	6a 00                	push   0x0
c00240da:	6a 3f                	push   0x3f
c00240dc:	57                   	push   edi
c00240dd:	56                   	push   esi
c00240de:	e8 59 28 00 00       	call   c002693c <__udivdi3>
c00240e3:	83 c4 10             	add    esp,0x10
c00240e6:	89 c6                	mov    esi,eax
c00240e8:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00240ed:	83 e6 0f             	and    esi,0xf
c00240f0:	eb 07                	jmp    c00240f9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00240f2:	31 f6                	xor    esi,esi
c00240f4:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00240f9:	bf 01 00 00 00       	mov    edi,0x1
c00240fe:	50                   	push   eax
c00240ff:	6a 00                	push   0x0
c0024101:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024108:	50                   	push   eax
c0024109:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002410d:	e8 6c f0 ff ff       	call   c002317e <IDE::enableIRQs(unsigned char, bool)>
c0024112:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024115:	e8 98 fe ff ff       	call   c0023fb2 <ATA::readyForCommand()>
c002411a:	83 c4 10             	add    esp,0x10
c002411d:	84 c0                	test   al,al
c002411f:	0f 84 5a 02 00 00    	je     c002437f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024125:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002412b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024131:	c1 e0 04             	shl    eax,0x4
c0024134:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002413b:	09 c6                	or     esi,eax
c002413d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024142:	75 05                	jne    c0024149 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024144:	83 ce a0             	or     esi,0xffffffa0
c0024147:	eb 03                	jmp    c002414c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024149:	83 ce e0             	or     esi,0xffffffe0
c002414c:	89 f0                	mov    eax,esi
c002414e:	0f b6 f0             	movzx  esi,al
c0024151:	56                   	push   esi
c0024152:	6a 06                	push   0x6
c0024154:	51                   	push   ecx
c0024155:	52                   	push   edx
c0024156:	e8 17 ee ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002415b:	83 c4 10             	add    esp,0x10
c002415e:	6a 00                	push   0x0
c0024160:	6a 01                	push   0x1
c0024162:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024169:	50                   	push   eax
c002416a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024170:	e8 fd ed ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024175:	83 c4 10             	add    esp,0x10
c0024178:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002417d:	75 6e                	jne    c00241ed <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002417f:	6a 00                	push   0x0
c0024181:	6a 08                	push   0x8
c0024183:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002418a:	50                   	push   eax
c002418b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024191:	e8 dc ed ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024196:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002419b:	50                   	push   eax
c002419c:	6a 09                	push   0x9
c002419e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241a5:	50                   	push   eax
c00241a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241ac:	e8 c1 ed ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241b1:	83 c4 20             	add    esp,0x20
c00241b4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00241b9:	50                   	push   eax
c00241ba:	6a 0a                	push   0xa
c00241bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241c3:	50                   	push   eax
c00241c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241ca:	e8 a3 ed ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241cf:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00241d4:	50                   	push   eax
c00241d5:	6a 0b                	push   0xb
c00241d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241de:	50                   	push   eax
c00241df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241e5:	e8 88 ed ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241ea:	83 c4 20             	add    esp,0x20
c00241ed:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00241f2:	50                   	push   eax
c00241f3:	6a 02                	push   0x2
c00241f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241fc:	50                   	push   eax
c00241fd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024203:	e8 6a ed ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024208:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002420d:	50                   	push   eax
c002420e:	6a 03                	push   0x3
c0024210:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024217:	50                   	push   eax
c0024218:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002421e:	e8 4f ed ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024223:	83 c4 20             	add    esp,0x20
c0024226:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002422b:	50                   	push   eax
c002422c:	6a 04                	push   0x4
c002422e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024235:	50                   	push   eax
c0024236:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002423c:	e8 31 ed ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024241:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024246:	50                   	push   eax
c0024247:	6a 05                	push   0x5
c0024249:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024250:	50                   	push   eax
c0024251:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024257:	e8 16 ed ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002425c:	83 c4 20             	add    esp,0x20
c002425f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024264:	0f 94 c0             	sete   al
c0024267:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002426c:	74 09                	je     c0024277 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002426e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024275:	eb 07                	jmp    c002427e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024277:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002427e:	0f b6 c0             	movzx  eax,al
c0024281:	50                   	push   eax
c0024282:	6a 07                	push   0x7
c0024284:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002428b:	50                   	push   eax
c002428c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024292:	e8 db ec ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024297:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002429b:	83 c4 10             	add    esp,0x10
c002429e:	85 f6                	test   esi,esi
c00242a0:	0f 84 ba 00 00 00    	je     c0024360 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00242a6:	50                   	push   eax
c00242a7:	6a 01                	push   0x1
c00242a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242b0:	50                   	push   eax
c00242b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242b7:	e8 62 f8 ff ff       	call   c0023b1e <IDE::polling(unsigned char, unsigned int)>
c00242bc:	83 c4 10             	add    esp,0x10
c00242bf:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00242c5:	84 c0                	test   al,al
c00242c7:	74 2c                	je     c00242f5 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00242c9:	0f b6 f8             	movzx  edi,al
c00242cc:	0f b6 d2             	movzx  edx,dl
c00242cf:	57                   	push   edi
c00242d0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00242d7:	50                   	push   eax
c00242d8:	52                   	push   edx
c00242d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242df:	e8 a4 f6 ff ff       	call   c0023988 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00242e4:	c7 04 24 1c cd 02 c0 	mov    DWORD PTR [esp],0xc002cd1c
c00242eb:	e8 ad eb fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00242f0:	e9 87 00 00 00       	jmp    c002437c <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00242f5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00242fa:	74 33                	je     c002432f <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00242fc:	31 ed                	xor    ebp,ebp
c00242fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024302:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024306:	50                   	push   eax
c0024307:	50                   	push   eax
c0024308:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002430f:	50                   	push   eax
c0024310:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024316:	e8 45 ec ff ff       	call   c0022f60 <IDE::getBase(unsigned char)>
c002431b:	89 c2                	mov    edx,eax
c002431d:	89 f8                	mov    eax,edi
c002431f:	66 ef                	out    dx,ax
c0024321:	45                   	inc    ebp
c0024322:	83 c4 10             	add    esp,0x10
c0024325:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002432b:	75 d1                	jne    c00242fe <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002432d:	eb 23                	jmp    c0024352 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002432f:	0f b6 d2             	movzx  edx,dl
c0024332:	51                   	push   ecx
c0024333:	51                   	push   ecx
c0024334:	52                   	push   edx
c0024335:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002433b:	e8 20 ec ff ff       	call   c0022f60 <IDE::getBase(unsigned char)>
c0024340:	b9 00 01 00 00       	mov    ecx,0x100
c0024345:	89 c2                	mov    edx,eax
c0024347:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002434b:	fc                   	cld    
c002434c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002434f:	83 c4 10             	add    esp,0x10
c0024352:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002435a:	4e                   	dec    esi
c002435b:	e9 3e ff ff ff       	jmp    c002429e <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024360:	31 ff                	xor    edi,edi
c0024362:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024367:	74 16                	je     c002437f <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024369:	50                   	push   eax
c002436a:	50                   	push   eax
c002436b:	31 c0                	xor    eax,eax
c002436d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024372:	0f 94 c0             	sete   al
c0024375:	50                   	push   eax
c0024376:	53                   	push   ebx
c0024377:	e8 ec fb ff ff       	call   c0023f68 <ATA::flush(bool)>
c002437c:	83 c4 10             	add    esp,0x10
c002437f:	83 c4 2c             	add    esp,0x2c
c0024382:	89 f8                	mov    eax,edi
c0024384:	5b                   	pop    ebx
c0024385:	5e                   	pop    esi
c0024386:	5f                   	pop    edi
c0024387:	5d                   	pop    ebp
c0024388:	c3                   	ret    
c0024389:	90                   	nop

c002438a <ATA::read(unsigned long long, int, void*)>:
c002438a:	57                   	push   edi
c002438b:	b8 04 00 00 00       	mov    eax,0x4
c0024390:	56                   	push   esi
c0024391:	53                   	push   ebx
c0024392:	83 ec 10             	sub    esp,0x10
c0024395:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024399:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002439d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00243a0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00243a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00243a8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00243ae:	77 3b                	ja     c00243eb <ATA::read(unsigned long long, int, void*)+0x61>
c00243b0:	b8 06 00 00 00       	mov    eax,0x6
c00243b5:	85 d2                	test   edx,edx
c00243b7:	74 32                	je     c00243eb <ATA::read(unsigned long long, int, void*)+0x61>
c00243b9:	50                   	push   eax
c00243ba:	50                   	push   eax
c00243bb:	6a 00                	push   0x0
c00243bd:	52                   	push   edx
c00243be:	53                   	push   ebx
c00243bf:	57                   	push   edi
c00243c0:	56                   	push   esi
c00243c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00243c5:	e8 38 fc ff ff       	call   c0024002 <ATA::access(unsigned long long, int, void*, bool)>
c00243ca:	83 c4 20             	add    esp,0x20
c00243cd:	85 c0                	test   eax,eax
c00243cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00243d3:	75 11                	jne    c00243e6 <ATA::read(unsigned long long, int, void*)+0x5c>
c00243d5:	01 1d c8 26 03 c0    	add    DWORD PTR ds:0xc00326c8,ebx
c00243db:	e8 b8 c5 fe ff       	call   c0010998 <VgaText::updateDiskUsage()>
c00243e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00243e4:	eb 05                	jmp    c00243eb <ATA::read(unsigned long long, int, void*)+0x61>
c00243e6:	b8 01 00 00 00       	mov    eax,0x1
c00243eb:	83 c4 10             	add    esp,0x10
c00243ee:	5b                   	pop    ebx
c00243ef:	5e                   	pop    esi
c00243f0:	5f                   	pop    edi
c00243f1:	c3                   	ret    

c00243f2 <ATA::write(unsigned long long, int, void*)>:
c00243f2:	57                   	push   edi
c00243f3:	b8 04 00 00 00       	mov    eax,0x4
c00243f8:	56                   	push   esi
c00243f9:	53                   	push   ebx
c00243fa:	83 ec 10             	sub    esp,0x10
c00243fd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024401:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024405:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024408:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002440c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024410:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024416:	77 3b                	ja     c0024453 <ATA::write(unsigned long long, int, void*)+0x61>
c0024418:	b8 06 00 00 00       	mov    eax,0x6
c002441d:	85 d2                	test   edx,edx
c002441f:	74 32                	je     c0024453 <ATA::write(unsigned long long, int, void*)+0x61>
c0024421:	50                   	push   eax
c0024422:	50                   	push   eax
c0024423:	6a 01                	push   0x1
c0024425:	52                   	push   edx
c0024426:	53                   	push   ebx
c0024427:	57                   	push   edi
c0024428:	56                   	push   esi
c0024429:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002442d:	e8 d0 fb ff ff       	call   c0024002 <ATA::access(unsigned long long, int, void*, bool)>
c0024432:	83 c4 20             	add    esp,0x20
c0024435:	85 c0                	test   eax,eax
c0024437:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002443b:	75 11                	jne    c002444e <ATA::write(unsigned long long, int, void*)+0x5c>
c002443d:	01 1d c4 26 03 c0    	add    DWORD PTR ds:0xc00326c4,ebx
c0024443:	e8 50 c5 fe ff       	call   c0010998 <VgaText::updateDiskUsage()>
c0024448:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002444c:	eb 05                	jmp    c0024453 <ATA::write(unsigned long long, int, void*)+0x61>
c002444e:	b8 01 00 00 00       	mov    eax,0x1
c0024453:	83 c4 10             	add    esp,0x10
c0024456:	5b                   	pop    ebx
c0024457:	5e                   	pop    esi
c0024458:	5f                   	pop    edi
c0024459:	c3                   	ret    

c002445a <ATA::detectCHS()>:
c002445a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002445e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024464:	c1 e0 06             	shl    eax,0x6
c0024467:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002446d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024477:	c7 44 24 04 27 cd 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cd27
c002447f:	e9 05 61 ff ff       	jmp    c001a589 <Krnl::panic(char const*)>

c0024484 <ATA::open(int, int, void*)>:
c0024484:	53                   	push   ebx
c0024485:	83 ec 08             	sub    esp,0x8
c0024488:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002448c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024490:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024494:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002449a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00244a0:	c1 e0 06             	shl    eax,0x6
c00244a3:	01 d0                	add    eax,edx
c00244a5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00244ac:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00244b2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00244b9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00244c3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00244c9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00244d0:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00244d7:	75 0c                	jne    c00244e5 <ATA::open(int, int, void*)+0x61>
c00244d9:	83 ec 0c             	sub    esp,0xc
c00244dc:	53                   	push   ebx
c00244dd:	e8 78 ff ff ff       	call   c002445a <ATA::detectCHS()>
c00244e2:	83 c4 10             	add    esp,0x10
c00244e5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00244eb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00244f1:	c1 e0 06             	shl    eax,0x6
c00244f4:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00244fb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024505:	d1 e8                	shr    eax,1
c0024507:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002450d:	6a 04                	push   0x4
c002450f:	6a 0c                	push   0xc
c0024511:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024518:	50                   	push   eax
c0024519:	52                   	push   edx
c002451a:	e8 53 ea ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002451f:	90                   	nop
c0024520:	90                   	nop
c0024521:	6a 00                	push   0x0
c0024523:	6a 0c                	push   0xc
c0024525:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002452c:	50                   	push   eax
c002452d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024533:	e8 3a ea ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024538:	83 c4 14             	add    esp,0x14
c002453b:	53                   	push   ebx
c002453c:	e8 0f 02 ff ff       	call   c0014750 <PhysicalDisk::startCache()>
c0024541:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024544:	e8 b7 23 ff ff       	call   c0016900 <createPartitionsForDisk(PhysicalDisk*)>
c0024549:	31 c0                	xor    eax,eax
c002454b:	83 c4 18             	add    esp,0x18
c002454e:	5b                   	pop    ebx
c002454f:	c3                   	ret    

c0024550 <ATAPI::write(unsigned long long, int, void*)>:
c0024550:	b8 03 00 00 00       	mov    eax,0x3
c0024555:	c3                   	ret    

c0024556 <ATAPI::close(int, int, void*)>:
c0024556:	83 ec 0c             	sub    esp,0xc
c0024559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002455d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024563:	85 c0                	test   eax,eax
c0024565:	74 0c                	je     c0024573 <ATAPI::close(int, int, void*)+0x1d>
c0024567:	83 ec 0c             	sub    esp,0xc
c002456a:	8b 10                	mov    edx,DWORD PTR [eax]
c002456c:	50                   	push   eax
c002456d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024570:	83 c4 10             	add    esp,0x10
c0024573:	31 c0                	xor    eax,eax
c0024575:	83 c4 0c             	add    esp,0xc
c0024578:	c3                   	ret    
c0024579:	90                   	nop

c002457a <ATAPI::ATAPI()>:
c002457a:	83 ec 0c             	sub    esp,0xc
c002457d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024581:	83 ec 04             	sub    esp,0x4
c0024584:	68 00 08 00 00       	push   0x800
c0024589:	68 61 ce 02 c0       	push   0xc002ce61
c002458e:	50                   	push   eax
c002458f:	e8 54 01 ff ff       	call   c00146e8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024594:	83 c4 10             	add    esp,0x10
c0024597:	ba 7c cd 02 c0       	mov    edx,0xc002cd7c
c002459c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245a0:	89 10                	mov    DWORD PTR [eax],edx
c00245a2:	90                   	nop
c00245a3:	83 c4 0c             	add    esp,0xc
c00245a6:	c3                   	ret    
c00245a7:	90                   	nop

c00245a8 <ATAPI::readyForCommand()>:
c00245a8:	56                   	push   esi
c00245a9:	53                   	push   ebx
c00245aa:	31 db                	xor    ebx,ebx
c00245ac:	50                   	push   eax
c00245ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00245b1:	50                   	push   eax
c00245b2:	6a 0c                	push   0xc
c00245b4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00245bb:	50                   	push   eax
c00245bc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00245c2:	e8 6b ea ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c00245c7:	83 c4 10             	add    esp,0x10
c00245ca:	a8 88                	test   al,0x88
c00245cc:	74 23                	je     c00245f1 <ATAPI::readyForCommand()+0x49>
c00245ce:	43                   	inc    ebx
c00245cf:	83 fb 63             	cmp    ebx,0x63
c00245d2:	7e dd                	jle    c00245b1 <ATAPI::readyForCommand()+0x9>
c00245d4:	51                   	push   ecx
c00245d5:	51                   	push   ecx
c00245d6:	6a 00                	push   0x0
c00245d8:	68 40 42 0f 00       	push   0xf4240
c00245dd:	e8 d2 9c ff ff       	call   c001e2b4 <nanoSleep(unsigned long long)>
c00245e2:	83 c4 10             	add    esp,0x10
c00245e5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00245eb:	75 c4                	jne    c00245b1 <ATAPI::readyForCommand()+0x9>
c00245ed:	31 c0                	xor    eax,eax
c00245ef:	eb 02                	jmp    c00245f3 <ATAPI::readyForCommand()+0x4b>
c00245f1:	b0 01                	mov    al,0x1
c00245f3:	5a                   	pop    edx
c00245f4:	5b                   	pop    ebx
c00245f5:	5e                   	pop    esi
c00245f6:	c3                   	ret    
c00245f7:	90                   	nop

c00245f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00245f8:	55                   	push   ebp
c00245f9:	57                   	push   edi
c00245fa:	56                   	push   esi
c00245fb:	53                   	push   ebx
c00245fc:	83 ec 20             	sub    esp,0x20
c00245ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024603:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024607:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002460b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002460f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024613:	6a 01                	push   0x1
c0024615:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002461c:	50                   	push   eax
c002461d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024623:	e8 56 eb ff ff       	call   c002317e <IDE::enableIRQs(unsigned char, bool)>
c0024628:	5e                   	pop    esi
c0024629:	58                   	pop    eax
c002462a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024631:	50                   	push   eax
c0024632:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024638:	e8 0f e9 ff ff       	call   c0022f4c <IDE::prepareInterrupt(unsigned char)>
c002463d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024640:	e8 63 ff ff ff       	call   c00245a8 <ATAPI::readyForCommand()>
c0024645:	83 c4 10             	add    esp,0x10
c0024648:	84 c0                	test   al,al
c002464a:	75 0a                	jne    c0024656 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002464c:	bb 01 00 00 00       	mov    ebx,0x1
c0024651:	e9 57 02 00 00       	jmp    c00248ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024656:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002465c:	c1 e0 04             	shl    eax,0x4
c002465f:	0f b6 c0             	movzx  eax,al
c0024662:	50                   	push   eax
c0024663:	6a 06                	push   0x6
c0024665:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002466c:	50                   	push   eax
c002466d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024673:	e8 fa e8 ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024678:	6a 00                	push   0x0
c002467a:	6a 01                	push   0x1
c002467c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024683:	50                   	push   eax
c0024684:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002468a:	e8 e3 e8 ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002468f:	83 c4 20             	add    esp,0x20
c0024692:	0f b6 c3             	movzx  eax,bl
c0024695:	0f b6 df             	movzx  ebx,bh
c0024698:	50                   	push   eax
c0024699:	6a 04                	push   0x4
c002469b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246a2:	50                   	push   eax
c00246a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246a9:	e8 c4 e8 ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246ae:	53                   	push   ebx
c00246af:	6a 05                	push   0x5
c00246b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246b8:	50                   	push   eax
c00246b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246bf:	e8 ae e8 ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246c4:	83 c4 20             	add    esp,0x20
c00246c7:	68 a0 00 00 00       	push   0xa0
c00246cc:	6a 07                	push   0x7
c00246ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246d5:	50                   	push   eax
c00246d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246dc:	e8 91 e8 ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246e1:	83 c4 0c             	add    esp,0xc
c00246e4:	6a 01                	push   0x1
c00246e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246ed:	50                   	push   eax
c00246ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246f4:	e8 25 f4 ff ff       	call   c0023b1e <IDE::polling(unsigned char, unsigned int)>
c00246f9:	83 c4 10             	add    esp,0x10
c00246fc:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024702:	84 c0                	test   al,al
c0024704:	74 23                	je     c0024729 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024706:	0f b6 d8             	movzx  ebx,al
c0024709:	0f b6 d2             	movzx  edx,dl
c002470c:	53                   	push   ebx
c002470d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024714:	50                   	push   eax
c0024715:	52                   	push   edx
c0024716:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002471c:	e8 67 f2 ff ff       	call   c0023988 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024721:	83 c4 10             	add    esp,0x10
c0024724:	e9 84 01 00 00       	jmp    c00248ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024729:	0f b6 d2             	movzx  edx,dl
c002472c:	53                   	push   ebx
c002472d:	53                   	push   ebx
c002472e:	52                   	push   edx
c002472f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024735:	e8 26 e8 ff ff       	call   c0022f60 <IDE::getBase(unsigned char)>
c002473a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002473e:	b9 06 00 00 00       	mov    ecx,0x6
c0024743:	89 c2                	mov    edx,eax
c0024745:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024748:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002474c:	83 c4 10             	add    esp,0x10
c002474f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024755:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002475c:	85 db                	test   ebx,ebx
c002475e:	0f 84 ec 00 00 00    	je     c0024850 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024764:	51                   	push   ecx
c0024765:	51                   	push   ecx
c0024766:	52                   	push   edx
c0024767:	50                   	push   eax
c0024768:	e8 73 e9 ff ff       	call   c00230e0 <IDE::waitInterrupt(unsigned char)>
c002476d:	83 c4 10             	add    esp,0x10
c0024770:	84 c0                	test   al,al
c0024772:	0f 84 d4 fe ff ff    	je     c002464c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024778:	56                   	push   esi
c0024779:	56                   	push   esi
c002477a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024781:	50                   	push   eax
c0024782:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024788:	e8 bf e7 ff ff       	call   c0022f4c <IDE::prepareInterrupt(unsigned char)>
c002478d:	83 c4 0c             	add    esp,0xc
c0024790:	6a 04                	push   0x4
c0024792:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024799:	50                   	push   eax
c002479a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247a0:	e8 8d e8 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c00247a5:	83 c4 0c             	add    esp,0xc
c00247a8:	89 c6                	mov    esi,eax
c00247aa:	6a 05                	push   0x5
c00247ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247b3:	50                   	push   eax
c00247b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ba:	e8 73 e8 ff ff       	call   c0023032 <IDE::read(unsigned char, unsigned char)>
c00247bf:	89 f1                	mov    ecx,esi
c00247c1:	0f b6 c0             	movzx  eax,al
c00247c4:	0f b6 f1             	movzx  esi,cl
c00247c7:	c1 e0 08             	shl    eax,0x8
c00247ca:	09 c6                	or     esi,eax
c00247cc:	d1 fe                	sar    esi,1
c00247ce:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00247d2:	83 c4 10             	add    esp,0x10
c00247d5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00247da:	74 41                	je     c002481d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00247dc:	31 c9                	xor    ecx,ecx
c00247de:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00247e4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00247eb:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00247ef:	75 0a                	jne    c00247fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00247f1:	01 c9                	add    ecx,ecx
c00247f3:	01 cd                	add    ebp,ecx
c00247f5:	4b                   	dec    ebx
c00247f6:	e9 54 ff ff ff       	jmp    c002474f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00247fb:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024800:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024804:	51                   	push   ecx
c0024805:	51                   	push   ecx
c0024806:	52                   	push   edx
c0024807:	50                   	push   eax
c0024808:	e8 53 e7 ff ff       	call   c0022f60 <IDE::getBase(unsigned char)>
c002480d:	89 c2                	mov    edx,eax
c002480f:	89 f0                	mov    eax,esi
c0024811:	66 ef                	out    dx,ax
c0024813:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024817:	83 c4 10             	add    esp,0x10
c002481a:	41                   	inc    ecx
c002481b:	eb c1                	jmp    c00247de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002481d:	31 f6                	xor    esi,esi
c002481f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024825:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002482c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024830:	75 06                	jne    c0024838 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024832:	01 f6                	add    esi,esi
c0024834:	01 f5                	add    ebp,esi
c0024836:	eb bd                	jmp    c00247f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024838:	51                   	push   ecx
c0024839:	51                   	push   ecx
c002483a:	52                   	push   edx
c002483b:	50                   	push   eax
c002483c:	e8 1f e7 ff ff       	call   c0022f60 <IDE::getBase(unsigned char)>
c0024841:	89 c2                	mov    edx,eax
c0024843:	66 ed                	in     ax,dx
c0024845:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002484a:	83 c4 10             	add    esp,0x10
c002484d:	46                   	inc    esi
c002484e:	eb cf                	jmp    c002481f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024850:	51                   	push   ecx
c0024851:	51                   	push   ecx
c0024852:	52                   	push   edx
c0024853:	50                   	push   eax
c0024854:	e8 87 e8 ff ff       	call   c00230e0 <IDE::waitInterrupt(unsigned char)>
c0024859:	83 c4 10             	add    esp,0x10
c002485c:	84 c0                	test   al,al
c002485e:	0f 84 e8 fd ff ff    	je     c002464c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024864:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024869:	52                   	push   edx
c002486a:	52                   	push   edx
c002486b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024872:	50                   	push   eax
c0024873:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024879:	e8 ce e6 ff ff       	call   c0022f4c <IDE::prepareInterrupt(unsigned char)>
c002487e:	83 c4 10             	add    esp,0x10
c0024881:	50                   	push   eax
c0024882:	50                   	push   eax
c0024883:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002488a:	50                   	push   eax
c002488b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024891:	e8 ca e6 ff ff       	call   c0022f60 <IDE::getBase(unsigned char)>
c0024896:	8d 50 07             	lea    edx,[eax+0x7]
c0024899:	ec                   	in     al,dx
c002489a:	83 c4 10             	add    esp,0x10
c002489d:	a8 88                	test   al,0x88
c002489f:	74 0a                	je     c00248ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00248a1:	4b                   	dec    ebx
c00248a2:	75 dd                	jne    c0024881 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00248a4:	bb 02 00 00 00       	mov    ebx,0x2
c00248a9:	eb 02                	jmp    c00248ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00248ab:	31 db                	xor    ebx,ebx
c00248ad:	83 c4 1c             	add    esp,0x1c
c00248b0:	89 d8                	mov    eax,ebx
c00248b2:	5b                   	pop    ebx
c00248b3:	5e                   	pop    esi
c00248b4:	5f                   	pop    edi
c00248b5:	5d                   	pop    ebp
c00248b6:	c3                   	ret    
c00248b7:	90                   	nop

c00248b8 <ATAPI::diskRemoved()>:
c00248b8:	83 ec 18             	sub    esp,0x18
c00248bb:	68 6d ce 02 c0       	push   0xc002ce6d
c00248c0:	e8 d8 e5 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00248c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00248c9:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00248d0:	83 c4 1c             	add    esp,0x1c
c00248d3:	c3                   	ret    

c00248d4 <ATAPI::eject()>:
c00248d4:	57                   	push   edi
c00248d5:	b9 03 00 00 00       	mov    ecx,0x3
c00248da:	53                   	push   ebx
c00248db:	83 ec 14             	sub    esp,0x14
c00248de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00248e2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00248e6:	fc                   	cld    
c00248e7:	31 c0                	xor    eax,eax
c00248e9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00248eb:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00248f0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00248f5:	50                   	push   eax
c00248f6:	50                   	push   eax
c00248f7:	6a 00                	push   0x0
c00248f9:	6a 00                	push   0x0
c00248fb:	6a 00                	push   0x0
c00248fd:	6a 02                	push   0x2
c00248ff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024903:	50                   	push   eax
c0024904:	53                   	push   ebx
c0024905:	e8 ee fc ff ff       	call   c00245f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002490a:	83 c4 14             	add    esp,0x14
c002490d:	53                   	push   ebx
c002490e:	e8 a5 ff ff ff       	call   c00248b8 <ATAPI::diskRemoved()>
c0024913:	83 c4 24             	add    esp,0x24
c0024916:	31 c0                	xor    eax,eax
c0024918:	5b                   	pop    ebx
c0024919:	5f                   	pop    edi
c002491a:	c3                   	ret    
c002491b:	90                   	nop

c002491c <ATAPI::diskInserted()>:
c002491c:	53                   	push   ebx
c002491d:	83 ec 14             	sub    esp,0x14
c0024920:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024924:	68 84 ce 02 c0       	push   0xc002ce84
c0024929:	e8 6f e5 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c002492e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024935:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024938:	e8 13 fe fe ff       	call   c0014750 <PhysicalDisk::startCache()>
c002493d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024941:	83 c4 18             	add    esp,0x18
c0024944:	5b                   	pop    ebx
c0024945:	e9 b6 1f ff ff       	jmp    c0016900 <createPartitionsForDisk(PhysicalDisk*)>

c002494a <ATAPI::detectMedia()>:
c002494a:	56                   	push   esi
c002494b:	53                   	push   ebx
c002494c:	83 ec 28             	sub    esp,0x28
c002494f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024953:	6a 0c                	push   0xc
c0024955:	6a 00                	push   0x0
c0024957:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002495b:	56                   	push   esi
c002495c:	e8 17 be fd ff       	call   c0000778 <memset>
c0024961:	58                   	pop    eax
c0024962:	5a                   	pop    edx
c0024963:	6a 00                	push   0x0
c0024965:	6a 00                	push   0x0
c0024967:	6a 00                	push   0x0
c0024969:	6a 00                	push   0x0
c002496b:	56                   	push   esi
c002496c:	53                   	push   ebx
c002496d:	e8 86 fc ff ff       	call   c00245f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024972:	83 c4 1c             	add    esp,0x1c
c0024975:	6a 0c                	push   0xc
c0024977:	6a 00                	push   0x0
c0024979:	56                   	push   esi
c002497a:	e8 f9 bd fd ff       	call   c0000778 <memset>
c002497f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024984:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024989:	59                   	pop    ecx
c002498a:	58                   	pop    eax
c002498b:	6a 01                	push   0x1
c002498d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024991:	50                   	push   eax
c0024992:	6a 00                	push   0x0
c0024994:	6a 12                	push   0x12
c0024996:	56                   	push   esi
c0024997:	53                   	push   ebx
c0024998:	e8 5b fc ff ff       	call   c00245f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002499d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00249a1:	83 c4 20             	add    esp,0x20
c00249a4:	83 e0 7f             	and    eax,0x7f
c00249a7:	3c 70                	cmp    al,0x70
c00249a9:	74 15                	je     c00249c0 <ATAPI::detectMedia()+0x76>
c00249ab:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00249b2:	75 0c                	jne    c00249c0 <ATAPI::detectMedia()+0x76>
c00249b4:	83 ec 0c             	sub    esp,0xc
c00249b7:	53                   	push   ebx
c00249b8:	e8 5f ff ff ff       	call   c002491c <ATAPI::diskInserted()>
c00249bd:	83 c4 10             	add    esp,0x10
c00249c0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00249c4:	83 e0 0f             	and    eax,0xf
c00249c7:	3c 02                	cmp    al,0x2
c00249c9:	75 1b                	jne    c00249e6 <ATAPI::detectMedia()+0x9c>
c00249cb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00249d0:	75 2d                	jne    c00249ff <ATAPI::detectMedia()+0xb5>
c00249d2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00249d9:	74 24                	je     c00249ff <ATAPI::detectMedia()+0xb5>
c00249db:	83 ec 0c             	sub    esp,0xc
c00249de:	53                   	push   ebx
c00249df:	e8 d4 fe ff ff       	call   c00248b8 <ATAPI::diskRemoved()>
c00249e4:	eb 16                	jmp    c00249fc <ATAPI::detectMedia()+0xb2>
c00249e6:	84 c0                	test   al,al
c00249e8:	75 15                	jne    c00249ff <ATAPI::detectMedia()+0xb5>
c00249ea:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00249f1:	75 0c                	jne    c00249ff <ATAPI::detectMedia()+0xb5>
c00249f3:	83 ec 0c             	sub    esp,0xc
c00249f6:	53                   	push   ebx
c00249f7:	e8 20 ff ff ff       	call   c002491c <ATAPI::diskInserted()>
c00249fc:	83 c4 10             	add    esp,0x10
c00249ff:	83 c4 24             	add    esp,0x24
c0024a02:	5b                   	pop    ebx
c0024a03:	5e                   	pop    esi
c0024a04:	c3                   	ret    
c0024a05:	90                   	nop

c0024a06 <ATAPI::open(int, int, void*)>:
c0024a06:	53                   	push   ebx
c0024a07:	83 ec 08             	sub    esp,0x8
c0024a0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a12:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a16:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a1c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024a22:	c1 e0 06             	shl    eax,0x6
c0024a25:	01 d0                	add    eax,edx
c0024a27:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024a2e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024a34:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024a3b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024a45:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024a4b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024a52:	6a 04                	push   0x4
c0024a54:	6a 0c                	push   0xc
c0024a56:	51                   	push   ecx
c0024a57:	52                   	push   edx
c0024a58:	e8 15 e5 ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a5d:	90                   	nop
c0024a5e:	90                   	nop
c0024a5f:	6a 00                	push   0x0
c0024a61:	6a 0c                	push   0xc
c0024a63:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a6a:	50                   	push   eax
c0024a6b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a71:	e8 fc e4 ff ff       	call   c0022f72 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a76:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024a7d:	83 c4 14             	add    esp,0x14
c0024a80:	53                   	push   ebx
c0024a81:	e8 c4 fe ff ff       	call   c002494a <ATAPI::detectMedia()>
c0024a86:	31 c0                	xor    eax,eax
c0024a88:	83 c4 18             	add    esp,0x18
c0024a8b:	5b                   	pop    ebx
c0024a8c:	c3                   	ret    
c0024a8d:	90                   	nop

c0024a8e <ATAPI::read(unsigned long long, int, void*)>:
c0024a8e:	55                   	push   ebp
c0024a8f:	57                   	push   edi
c0024a90:	56                   	push   esi
c0024a91:	53                   	push   ebx
c0024a92:	83 ec 1c             	sub    esp,0x1c
c0024a95:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024a99:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a9d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024aa1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024aa8:	74 41                	je     c0024aeb <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024aaa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024aae:	b9 03 00 00 00       	mov    ecx,0x3
c0024ab3:	fc                   	cld    
c0024ab4:	31 c0                	xor    eax,eax
c0024ab6:	86 fb                	xchg   bl,bh
c0024ab8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024aba:	c1 c3 10             	rol    ebx,0x10
c0024abd:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024ac2:	89 e8                	mov    eax,ebp
c0024ac4:	86 fb                	xchg   bl,bh
c0024ac6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024aca:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024ace:	50                   	push   eax
c0024acf:	50                   	push   eax
c0024ad0:	55                   	push   ebp
c0024ad1:	c1 e5 0b             	shl    ebp,0xb
c0024ad4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024ad8:	6a 00                	push   0x0
c0024ada:	55                   	push   ebp
c0024adb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024adf:	50                   	push   eax
c0024ae0:	56                   	push   esi
c0024ae1:	e8 12 fb ff ff       	call   c00245f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024ae6:	83 c4 20             	add    esp,0x20
c0024ae9:	eb 1a                	jmp    c0024b05 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024aeb:	83 ec 0c             	sub    esp,0xc
c0024aee:	56                   	push   esi
c0024aef:	e8 56 fe ff ff       	call   c002494a <ATAPI::detectMedia()>
c0024af4:	83 c4 10             	add    esp,0x10
c0024af7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024afe:	75 aa                	jne    c0024aaa <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024b00:	b8 02 00 00 00       	mov    eax,0x2
c0024b05:	83 c4 1c             	add    esp,0x1c
c0024b08:	5b                   	pop    ebx
c0024b09:	5e                   	pop    esi
c0024b0a:	5f                   	pop    edi
c0024b0b:	5d                   	pop    ebp
c0024b0c:	c3                   	ret    
c0024b0d:	90                   	nop

c0024b0e <SATA::close(int, int, void*)>:
c0024b0e:	83 ec 0c             	sub    esp,0xc
c0024b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b15:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b1b:	85 c0                	test   eax,eax
c0024b1d:	74 0c                	je     c0024b2b <SATA::close(int, int, void*)+0x1d>
c0024b1f:	83 ec 0c             	sub    esp,0xc
c0024b22:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b24:	50                   	push   eax
c0024b25:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024b28:	83 c4 10             	add    esp,0x10
c0024b2b:	31 c0                	xor    eax,eax
c0024b2d:	83 c4 0c             	add    esp,0xc
c0024b30:	c3                   	ret    
c0024b31:	90                   	nop

c0024b32 <SATA::powerSaving(PowerSavingLevel)>:
c0024b32:	c3                   	ret    
c0024b33:	90                   	nop

c0024b34 <SATA::open(int, int, void*)>:
c0024b34:	56                   	push   esi
c0024b35:	53                   	push   ebx
c0024b36:	50                   	push   eax
c0024b37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024b3f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024b49:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024b4f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024b5d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024b67:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024b6d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024b74:	e8 6c b3 fe ff       	call   c000fee5 <Phys::allocatePage()>
c0024b79:	89 c6                	mov    esi,eax
c0024b7b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024b81:	81 c6 00 10 00 00    	add    esi,0x1000
c0024b87:	e8 59 b3 fe ff       	call   c000fee5 <Phys::allocatePage()>
c0024b8c:	39 c6                	cmp    esi,eax
c0024b8e:	74 10                	je     c0024ba0 <SATA::open(int, int, void*)+0x6c>
c0024b90:	83 ec 0c             	sub    esp,0xc
c0024b93:	68 ac cd 02 c0       	push   0xc002cdac
c0024b98:	e8 ec 59 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c0024b9d:	83 c4 10             	add    esp,0x10
c0024ba0:	83 ec 0c             	sub    esp,0xc
c0024ba3:	6a 02                	push   0x2
c0024ba5:	e8 99 cf fe ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0024baa:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024bb0:	e8 29 d2 fe ff       	call   c0011dde <Virt::getAKernelVAS()>
c0024bb5:	6a 03                	push   0x3
c0024bb7:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024bbd:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024bc3:	50                   	push   eax
c0024bc4:	e8 67 d7 fe ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024bc9:	83 c4 14             	add    esp,0x14
c0024bcc:	53                   	push   ebx
c0024bcd:	e8 7e fb fe ff       	call   c0014750 <PhysicalDisk::startCache()>
c0024bd2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024bd5:	e8 26 1d ff ff       	call   c0016900 <createPartitionsForDisk(PhysicalDisk*)>
c0024bda:	83 c4 14             	add    esp,0x14
c0024bdd:	31 c0                	xor    eax,eax
c0024bdf:	5b                   	pop    ebx
c0024be0:	5e                   	pop    esi
c0024be1:	c3                   	ret    

c0024be2 <SATA::SATA()>:
c0024be2:	83 ec 0c             	sub    esp,0xc
c0024be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024be9:	83 ec 04             	sub    esp,0x4
c0024bec:	68 00 02 00 00       	push   0x200
c0024bf1:	68 c0 cd 02 c0       	push   0xc002cdc0
c0024bf6:	50                   	push   eax
c0024bf7:	e8 ec fa fe ff       	call   c00146e8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024bfc:	83 c4 10             	add    esp,0x10
c0024bff:	ba 30 ce 02 c0       	mov    edx,0xc002ce30
c0024c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c08:	89 10                	mov    DWORD PTR [eax],edx
c0024c0a:	90                   	nop
c0024c0b:	83 c4 0c             	add    esp,0xc
c0024c0e:	c3                   	ret    
c0024c0f:	90                   	nop

c0024c10 <SATA::access(unsigned long long, int, void*, bool)>:
c0024c10:	55                   	push   ebp
c0024c11:	57                   	push   edi
c0024c12:	56                   	push   esi
c0024c13:	53                   	push   ebx
c0024c14:	83 ec 2c             	sub    esp,0x2c
c0024c17:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024c1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024c1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c23:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024c27:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024c2b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024c30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c34:	7e 10                	jle    c0024c46 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024c36:	83 ec 0c             	sub    esp,0xc
c0024c39:	68 d0 cd 02 c0       	push   0xc002cdd0
c0024c3e:	e8 46 59 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c0024c43:	83 c4 10             	add    esp,0x10
c0024c46:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024c4c:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024c52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c5c:	89 f0                	mov    eax,esi
c0024c5e:	c1 e0 07             	shl    eax,0x7
c0024c61:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024c65:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024c6f:	53                   	push   ebx
c0024c70:	8d 46 02             	lea    eax,[esi+0x2]
c0024c73:	53                   	push   ebx
c0024c74:	c1 e0 07             	shl    eax,0x7
c0024c77:	bb 01 00 00 00       	mov    ebx,0x1
c0024c7c:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024c80:	50                   	push   eax
c0024c81:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024c87:	e8 aa ef ff ff       	call   c0023c36 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024c8c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024c90:	83 c4 10             	add    esp,0x10
c0024c93:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024c98:	0f 84 ce 01 00 00    	je     c0024e6c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024c9e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ca2:	c1 e0 09             	shl    eax,0x9
c0024ca5:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024caa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024cae:	74 17                	je     c0024cc7 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024cb0:	51                   	push   ecx
c0024cb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024cb5:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024cb9:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024cbf:	e8 80 ba fd ff       	call   c0000744 <memcpy>
c0024cc4:	83 c4 10             	add    esp,0x10
c0024cc7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024ccd:	8d 46 02             	lea    eax,[esi+0x2]
c0024cd0:	c1 e0 07             	shl    eax,0x7
c0024cd3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024cd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0024cd9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024cdf:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024ce5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024ce9:	c1 e1 05             	shl    ecx,0x5
c0024cec:	01 c8                	add    eax,ecx
c0024cee:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024cf2:	8a 18                	mov    bl,BYTE PTR [eax]
c0024cf4:	83 e1 01             	and    ecx,0x1
c0024cf7:	83 e3 bf             	and    ebx,0xffffffbf
c0024cfa:	c1 e1 06             	shl    ecx,0x6
c0024cfd:	09 d9                	or     ecx,ebx
c0024cff:	88 08                	mov    BYTE PTR [eax],cl
c0024d01:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d03:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024d09:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024d0f:	89 08                	mov    DWORD PTR [eax],ecx
c0024d11:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d17:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d1d:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d23:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d26:	52                   	push   edx
c0024d27:	68 90 00 00 00       	push   0x90
c0024d2c:	6a 00                	push   0x0
c0024d2e:	53                   	push   ebx
c0024d2f:	e8 44 ba fd ff       	call   c0000778 <memset>
c0024d34:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024d3a:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024d3e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024d44:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024d48:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024d4c:	83 c4 10             	add    esp,0x10
c0024d4f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024d52:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024d58:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024d5e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024d63:	09 c8                	or     eax,ecx
c0024d65:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024d6b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024d6e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024d75:	66 25 00 7f          	and    ax,0x7f00
c0024d79:	66 0d 27 80          	or     ax,0x8027
c0024d7d:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024d82:	66 89 03             	mov    WORD PTR [ebx],ax
c0024d85:	19 c0                	sbb    eax,eax
c0024d87:	83 e0 f0             	and    eax,0xfffffff0
c0024d8a:	83 c0 35             	add    eax,0x35
c0024d8d:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024d90:	89 f8                	mov    eax,edi
c0024d92:	c1 e8 10             	shr    eax,0x10
c0024d95:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024d98:	89 f8                	mov    eax,edi
c0024d9a:	c1 e8 18             	shr    eax,0x18
c0024d9d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024da0:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024da4:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024da7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024dab:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024dae:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024db2:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024db6:	89 f3                	mov    ebx,esi
c0024db8:	31 c0                	xor    eax,eax
c0024dba:	c1 e3 07             	shl    ebx,0x7
c0024dbd:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024dc1:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024dc7:	80 e1 88             	and    cl,0x88
c0024dca:	74 0a                	je     c0024dd6 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024dcc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024dd1:	74 0a                	je     c0024ddd <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024dd3:	40                   	inc    eax
c0024dd4:	eb eb                	jmp    c0024dc1 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024dd6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ddb:	75 0a                	jne    c0024de7 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024ddd:	83 ec 0c             	sub    esp,0xc
c0024de0:	68 09 ce 02 c0       	push   0xc002ce09
c0024de5:	eb 56                	jmp    c0024e3d <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024de7:	b8 01 00 00 00       	mov    eax,0x1
c0024dec:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024df0:	c1 e6 07             	shl    esi,0x7
c0024df3:	d3 e0                	shl    eax,cl
c0024df5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024df9:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024dff:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024e05:	85 c8                	test   eax,ecx
c0024e07:	74 20                	je     c0024e29 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024e09:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024e0f:	0f ba e1 1e          	bt     ecx,0x1e
c0024e13:	73 ea                	jae    c0024dff <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024e15:	83 ec 0c             	sub    esp,0xc
c0024e18:	31 db                	xor    ebx,ebx
c0024e1a:	68 17 ce 02 c0       	push   0xc002ce17
c0024e1f:	e8 65 57 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c0024e24:	83 c4 10             	add    esp,0x10
c0024e27:	eb 43                	jmp    c0024e6c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e29:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024e2f:	0f ba e0 1e          	bt     eax,0x1e
c0024e33:	73 17                	jae    c0024e4c <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024e35:	83 ec 0c             	sub    esp,0xc
c0024e38:	68 17 ce 02 c0       	push   0xc002ce17
c0024e3d:	e8 47 57 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c0024e42:	bb 01 00 00 00       	mov    ebx,0x1
c0024e47:	83 c4 10             	add    esp,0x10
c0024e4a:	eb 20                	jmp    c0024e6c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e4c:	31 db                	xor    ebx,ebx
c0024e4e:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024e53:	75 17                	jne    c0024e6c <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024e55:	50                   	push   eax
c0024e56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e5a:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024e60:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024e64:	e8 db b8 fd ff       	call   c0000744 <memcpy>
c0024e69:	83 c4 10             	add    esp,0x10
c0024e6c:	83 c4 2c             	add    esp,0x2c
c0024e6f:	89 d8                	mov    eax,ebx
c0024e71:	5b                   	pop    ebx
c0024e72:	5e                   	pop    esi
c0024e73:	5f                   	pop    edi
c0024e74:	5d                   	pop    ebp
c0024e75:	c3                   	ret    

c0024e76 <SATA::read(unsigned long long, int, void*)>:
c0024e76:	57                   	push   edi
c0024e77:	b8 04 00 00 00       	mov    eax,0x4
c0024e7c:	56                   	push   esi
c0024e7d:	53                   	push   ebx
c0024e7e:	83 ec 10             	sub    esp,0x10
c0024e81:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024e85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024e89:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024e8c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024e90:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024e94:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024e9a:	77 3b                	ja     c0024ed7 <SATA::read(unsigned long long, int, void*)+0x61>
c0024e9c:	b8 06 00 00 00       	mov    eax,0x6
c0024ea1:	85 d2                	test   edx,edx
c0024ea3:	74 32                	je     c0024ed7 <SATA::read(unsigned long long, int, void*)+0x61>
c0024ea5:	50                   	push   eax
c0024ea6:	50                   	push   eax
c0024ea7:	6a 00                	push   0x0
c0024ea9:	52                   	push   edx
c0024eaa:	53                   	push   ebx
c0024eab:	57                   	push   edi
c0024eac:	56                   	push   esi
c0024ead:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024eb1:	e8 5a fd ff ff       	call   c0024c10 <SATA::access(unsigned long long, int, void*, bool)>
c0024eb6:	83 c4 20             	add    esp,0x20
c0024eb9:	85 c0                	test   eax,eax
c0024ebb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024ebf:	75 11                	jne    c0024ed2 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024ec1:	01 1d c8 26 03 c0    	add    DWORD PTR ds:0xc00326c8,ebx
c0024ec7:	e8 cc ba fe ff       	call   c0010998 <VgaText::updateDiskUsage()>
c0024ecc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024ed0:	eb 05                	jmp    c0024ed7 <SATA::read(unsigned long long, int, void*)+0x61>
c0024ed2:	b8 01 00 00 00       	mov    eax,0x1
c0024ed7:	83 c4 10             	add    esp,0x10
c0024eda:	5b                   	pop    ebx
c0024edb:	5e                   	pop    esi
c0024edc:	5f                   	pop    edi
c0024edd:	c3                   	ret    

c0024ede <SATA::write(unsigned long long, int, void*)>:
c0024ede:	55                   	push   ebp
c0024edf:	b8 04 00 00 00       	mov    eax,0x4
c0024ee4:	57                   	push   edi
c0024ee5:	56                   	push   esi
c0024ee6:	53                   	push   ebx
c0024ee7:	83 ec 1c             	sub    esp,0x1c
c0024eea:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024eee:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024ef2:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024ef5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024ef9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024efd:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024f03:	77 56                	ja     c0024f5b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f05:	b8 06 00 00 00       	mov    eax,0x6
c0024f0a:	85 ff                	test   edi,edi
c0024f0c:	74 4d                	je     c0024f5b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024f0e:	89 ee                	mov    esi,ebp
c0024f10:	c1 e6 09             	shl    esi,0x9
c0024f13:	01 fe                	add    esi,edi
c0024f15:	89 c8                	mov    eax,ecx
c0024f17:	89 da                	mov    edx,ebx
c0024f19:	83 c0 01             	add    eax,0x1
c0024f1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f20:	83 d2 00             	adc    edx,0x0
c0024f23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024f27:	50                   	push   eax
c0024f28:	50                   	push   eax
c0024f29:	6a 01                	push   0x1
c0024f2b:	57                   	push   edi
c0024f2c:	81 c7 00 02 00 00    	add    edi,0x200
c0024f32:	6a 01                	push   0x1
c0024f34:	53                   	push   ebx
c0024f35:	51                   	push   ecx
c0024f36:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024f3a:	e8 d1 fc ff ff       	call   c0024c10 <SATA::access(unsigned long long, int, void*, bool)>
c0024f3f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024f43:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f47:	83 c4 20             	add    esp,0x20
c0024f4a:	39 f7                	cmp    edi,esi
c0024f4c:	75 c7                	jne    c0024f15 <SATA::write(unsigned long long, int, void*)+0x37>
c0024f4e:	01 2d c4 26 03 c0    	add    DWORD PTR ds:0xc00326c4,ebp
c0024f54:	e8 3f ba fe ff       	call   c0010998 <VgaText::updateDiskUsage()>
c0024f59:	31 c0                	xor    eax,eax
c0024f5b:	83 c4 1c             	add    esp,0x1c
c0024f5e:	5b                   	pop    ebx
c0024f5f:	5e                   	pop    esi
c0024f60:	5f                   	pop    edi
c0024f61:	5d                   	pop    ebp
c0024f62:	c3                   	ret    
c0024f63:	90                   	nop

c0024f64 <SATAPI::write(unsigned long long, int, void*)>:
c0024f64:	b8 03 00 00 00       	mov    eax,0x3
c0024f69:	c3                   	ret    

c0024f6a <SATAPI::close(int, int, void*)>:
c0024f6a:	83 ec 0c             	sub    esp,0xc
c0024f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f71:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024f77:	85 c0                	test   eax,eax
c0024f79:	74 0c                	je     c0024f87 <SATAPI::close(int, int, void*)+0x1d>
c0024f7b:	83 ec 0c             	sub    esp,0xc
c0024f7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024f80:	50                   	push   eax
c0024f81:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024f84:	83 c4 10             	add    esp,0x10
c0024f87:	31 c0                	xor    eax,eax
c0024f89:	83 c4 0c             	add    esp,0xc
c0024f8c:	c3                   	ret    
c0024f8d:	90                   	nop

c0024f8e <SATAPI::SATAPI()>:
c0024f8e:	83 ec 0c             	sub    esp,0xc
c0024f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f95:	83 ec 04             	sub    esp,0x4
c0024f98:	68 00 08 00 00       	push   0x800
c0024f9d:	68 60 ce 02 c0       	push   0xc002ce60
c0024fa2:	50                   	push   eax
c0024fa3:	e8 40 f7 fe ff       	call   c00146e8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024fa8:	83 c4 10             	add    esp,0x10
c0024fab:	ba 0c cf 02 c0       	mov    edx,0xc002cf0c
c0024fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fb4:	89 10                	mov    DWORD PTR [eax],edx
c0024fb6:	90                   	nop
c0024fb7:	83 c4 0c             	add    esp,0xc
c0024fba:	c3                   	ret    
c0024fbb:	90                   	nop

c0024fbc <SATAPI::diskRemoved()>:
c0024fbc:	83 ec 18             	sub    esp,0x18
c0024fbf:	68 6c ce 02 c0       	push   0xc002ce6c
c0024fc4:	e8 d4 de fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0024fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024fcd:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024fd4:	83 c4 1c             	add    esp,0x1c
c0024fd7:	c3                   	ret    

c0024fd8 <SATAPI::diskInserted()>:
c0024fd8:	53                   	push   ebx
c0024fd9:	83 ec 14             	sub    esp,0x14
c0024fdc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024fe0:	68 83 ce 02 c0       	push   0xc002ce83
c0024fe5:	e8 b3 de fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0024fea:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024ff1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024ff4:	e8 57 f7 fe ff       	call   c0014750 <PhysicalDisk::startCache()>
c0024ff9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024ffd:	83 c4 18             	add    esp,0x18
c0025000:	5b                   	pop    ebx
c0025001:	e9 fa 18 ff ff       	jmp    c0016900 <createPartitionsForDisk(PhysicalDisk*)>

c0025006 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025006:	55                   	push   ebp
c0025007:	57                   	push   edi
c0025008:	56                   	push   esi
c0025009:	53                   	push   ebx
c002500a:	83 ec 24             	sub    esp,0x24
c002500d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025011:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025015:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002501b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002501f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025023:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025029:	8d 5f 02             	lea    ebx,[edi+0x2]
c002502c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025032:	c1 e3 07             	shl    ebx,0x7
c0025035:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025039:	89 f8                	mov    eax,edi
c002503b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002503f:	c1 e0 07             	shl    eax,0x7
c0025042:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025046:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002504a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025054:	53                   	push   ebx
c0025055:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002505b:	e8 d6 eb ff ff       	call   c0023c36 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025060:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025064:	83 c4 10             	add    esp,0x10
c0025067:	b8 01 00 00 00       	mov    eax,0x1
c002506c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025071:	0f 84 8a 01 00 00    	je     c0025201 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025077:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002507d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002507f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025085:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002508b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002508f:	c1 e1 05             	shl    ecx,0x5
c0025092:	01 c8                	add    eax,ecx
c0025094:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025096:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002509c:	81 c9 25 00 01 00    	or     ecx,0x10025
c00250a2:	89 08                	mov    DWORD PTR [eax],ecx
c00250a4:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00250aa:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00250b0:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00250b6:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00250b9:	52                   	push   edx
c00250ba:	68 90 00 00 00       	push   0x90
c00250bf:	6a 00                	push   0x0
c00250c1:	53                   	push   ebx
c00250c2:	e8 b1 b6 fd ff       	call   c0000778 <memset>
c00250c7:	83 c4 0c             	add    esp,0xc
c00250ca:	8d 43 40             	lea    eax,[ebx+0x40]
c00250cd:	6a 0c                	push   0xc
c00250cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00250d3:	50                   	push   eax
c00250d4:	e8 6b b6 fd ff       	call   c0000744 <memcpy>
c00250d9:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c00250df:	89 ea                	mov    edx,ebp
c00250e1:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00250e7:	c1 ea 18             	shr    edx,0x18
c00250ea:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00250ee:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00250f1:	8d 48 ff             	lea    ecx,[eax-0x1]
c00250f4:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00250f8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00250fe:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025104:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025109:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002510d:	09 c8                	or     eax,ecx
c002510f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025113:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025119:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002511c:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025123:	66 25 00 7f          	and    ax,0x7f00
c0025127:	66 0d 27 80          	or     ax,0x8027
c002512b:	66 89 03             	mov    WORD PTR [ebx],ax
c002512e:	89 e8                	mov    eax,ebp
c0025130:	c1 e8 10             	shr    eax,0x10
c0025133:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025136:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002513a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002513d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025141:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025144:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025148:	83 c4 10             	add    esp,0x10
c002514b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002514f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025153:	31 c0                	xor    eax,eax
c0025155:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002515b:	80 e1 88             	and    cl,0x88
c002515e:	74 0a                	je     c002516a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025160:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025165:	74 0a                	je     c0025171 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025167:	40                   	inc    eax
c0025168:	eb eb                	jmp    c0025155 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002516a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002516f:	75 0f                	jne    c0025180 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025171:	83 ec 0c             	sub    esp,0xc
c0025174:	68 09 ce 02 c0       	push   0xc002ce09
c0025179:	e8 0b 54 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c002517e:	eb 3a                	jmp    c00251ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025180:	b8 01 00 00 00       	mov    eax,0x1
c0025185:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025189:	c1 e7 07             	shl    edi,0x7
c002518c:	d3 e0                	shl    eax,cl
c002518e:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025191:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025197:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c002519d:	85 d0                	test   eax,edx
c002519f:	74 23                	je     c00251c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00251a1:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00251a7:	0f ba e2 1e          	bt     edx,0x1e
c00251ab:	73 ea                	jae    c0025197 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00251ad:	83 ec 0c             	sub    esp,0xc
c00251b0:	68 9b ce 02 c0       	push   0xc002ce9b
c00251b5:	e8 e3 dc fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00251ba:	83 c4 10             	add    esp,0x10
c00251bd:	b8 01 00 00 00       	mov    eax,0x1
c00251c2:	eb 3d                	jmp    c0025201 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00251c4:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00251ca:	0f ba e0 1e          	bt     eax,0x1e
c00251ce:	73 0a                	jae    c00251da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c00251d0:	83 ec 0c             	sub    esp,0xc
c00251d3:	68 ae ce 02 c0       	push   0xc002ceae
c00251d8:	eb db                	jmp    c00251b5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c00251da:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00251df:	74 1e                	je     c00251ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00251e1:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00251e6:	74 17                	je     c00251ff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00251e8:	50                   	push   eax
c00251e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00251ed:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00251f3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00251f7:	e8 48 b5 fd ff       	call   c0000744 <memcpy>
c00251fc:	83 c4 10             	add    esp,0x10
c00251ff:	31 c0                	xor    eax,eax
c0025201:	83 c4 1c             	add    esp,0x1c
c0025204:	5b                   	pop    ebx
c0025205:	5e                   	pop    esi
c0025206:	5f                   	pop    edi
c0025207:	5d                   	pop    ebp
c0025208:	c3                   	ret    
c0025209:	90                   	nop

c002520a <SATAPI::eject()>:
c002520a:	57                   	push   edi
c002520b:	b9 03 00 00 00       	mov    ecx,0x3
c0025210:	53                   	push   ebx
c0025211:	83 ec 14             	sub    esp,0x14
c0025214:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025218:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002521c:	fc                   	cld    
c002521d:	31 c0                	xor    eax,eax
c002521f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025221:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025226:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002522b:	50                   	push   eax
c002522c:	6a 00                	push   0x0
c002522e:	6a 00                	push   0x0
c0025230:	6a 00                	push   0x0
c0025232:	6a 00                	push   0x0
c0025234:	6a 02                	push   0x2
c0025236:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002523a:	50                   	push   eax
c002523b:	53                   	push   ebx
c002523c:	e8 c5 fd ff ff       	call   c0025006 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025241:	83 c4 14             	add    esp,0x14
c0025244:	53                   	push   ebx
c0025245:	e8 72 fd ff ff       	call   c0024fbc <SATAPI::diskRemoved()>
c002524a:	83 c4 24             	add    esp,0x24
c002524d:	31 c0                	xor    eax,eax
c002524f:	5b                   	pop    ebx
c0025250:	5f                   	pop    edi
c0025251:	c3                   	ret    

c0025252 <SATAPI::detectMedia()>:
c0025252:	56                   	push   esi
c0025253:	53                   	push   ebx
c0025254:	83 ec 28             	sub    esp,0x28
c0025257:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002525b:	6a 0c                	push   0xc
c002525d:	6a 00                	push   0x0
c002525f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025263:	56                   	push   esi
c0025264:	e8 0f b5 fd ff       	call   c0000778 <memset>
c0025269:	83 c4 0c             	add    esp,0xc
c002526c:	6a 00                	push   0x0
c002526e:	6a 00                	push   0x0
c0025270:	6a 00                	push   0x0
c0025272:	6a 00                	push   0x0
c0025274:	6a 00                	push   0x0
c0025276:	56                   	push   esi
c0025277:	53                   	push   ebx
c0025278:	e8 89 fd ff ff       	call   c0025006 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002527d:	83 c4 1c             	add    esp,0x1c
c0025280:	6a 0c                	push   0xc
c0025282:	6a 00                	push   0x0
c0025284:	56                   	push   esi
c0025285:	e8 ee b4 fd ff       	call   c0000778 <memset>
c002528a:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002528f:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025294:	83 c4 0c             	add    esp,0xc
c0025297:	6a 01                	push   0x1
c0025299:	8d 44 24 16          	lea    eax,[esp+0x16]
c002529d:	50                   	push   eax
c002529e:	6a 00                	push   0x0
c00252a0:	6a 00                	push   0x0
c00252a2:	6a 12                	push   0x12
c00252a4:	56                   	push   esi
c00252a5:	53                   	push   ebx
c00252a6:	e8 5b fd ff ff       	call   c0025006 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252ab:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00252af:	83 c4 20             	add    esp,0x20
c00252b2:	83 e0 7f             	and    eax,0x7f
c00252b5:	3c 70                	cmp    al,0x70
c00252b7:	74 15                	je     c00252ce <SATAPI::detectMedia()+0x7c>
c00252b9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00252c0:	75 0c                	jne    c00252ce <SATAPI::detectMedia()+0x7c>
c00252c2:	83 ec 0c             	sub    esp,0xc
c00252c5:	53                   	push   ebx
c00252c6:	e8 0d fd ff ff       	call   c0024fd8 <SATAPI::diskInserted()>
c00252cb:	83 c4 10             	add    esp,0x10
c00252ce:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00252d2:	83 e0 0f             	and    eax,0xf
c00252d5:	3c 02                	cmp    al,0x2
c00252d7:	75 1b                	jne    c00252f4 <SATAPI::detectMedia()+0xa2>
c00252d9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00252de:	75 2d                	jne    c002530d <SATAPI::detectMedia()+0xbb>
c00252e0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00252e7:	74 24                	je     c002530d <SATAPI::detectMedia()+0xbb>
c00252e9:	83 ec 0c             	sub    esp,0xc
c00252ec:	53                   	push   ebx
c00252ed:	e8 ca fc ff ff       	call   c0024fbc <SATAPI::diskRemoved()>
c00252f2:	eb 16                	jmp    c002530a <SATAPI::detectMedia()+0xb8>
c00252f4:	84 c0                	test   al,al
c00252f6:	75 15                	jne    c002530d <SATAPI::detectMedia()+0xbb>
c00252f8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00252ff:	75 0c                	jne    c002530d <SATAPI::detectMedia()+0xbb>
c0025301:	83 ec 0c             	sub    esp,0xc
c0025304:	53                   	push   ebx
c0025305:	e8 ce fc ff ff       	call   c0024fd8 <SATAPI::diskInserted()>
c002530a:	83 c4 10             	add    esp,0x10
c002530d:	83 c4 24             	add    esp,0x24
c0025310:	5b                   	pop    ebx
c0025311:	5e                   	pop    esi
c0025312:	c3                   	ret    
c0025313:	90                   	nop

c0025314 <SATAPI::open(int, int, void*)>:
c0025314:	56                   	push   esi
c0025315:	53                   	push   ebx
c0025316:	50                   	push   eax
c0025317:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002531b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002531f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025329:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002532f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025339:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002533d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025347:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002534d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025354:	e8 8c ab fe ff       	call   c000fee5 <Phys::allocatePage()>
c0025359:	89 c6                	mov    esi,eax
c002535b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025361:	81 c6 00 10 00 00    	add    esi,0x1000
c0025367:	e8 79 ab fe ff       	call   c000fee5 <Phys::allocatePage()>
c002536c:	39 c6                	cmp    esi,eax
c002536e:	74 10                	je     c0025380 <SATAPI::open(int, int, void*)+0x6c>
c0025370:	83 ec 0c             	sub    esp,0xc
c0025373:	68 c3 ce 02 c0       	push   0xc002cec3
c0025378:	e8 0c 52 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c002537d:	83 c4 10             	add    esp,0x10
c0025380:	83 ec 0c             	sub    esp,0xc
c0025383:	6a 02                	push   0x2
c0025385:	e8 b9 c7 fe ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c002538a:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025390:	e8 49 ca fe ff       	call   c0011dde <Virt::getAKernelVAS()>
c0025395:	6a 03                	push   0x3
c0025397:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002539d:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00253a3:	50                   	push   eax
c00253a4:	e8 87 cf fe ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c00253a9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00253b0:	83 c4 14             	add    esp,0x14
c00253b3:	53                   	push   ebx
c00253b4:	e8 99 fe ff ff       	call   c0025252 <SATAPI::detectMedia()>
c00253b9:	83 c4 14             	add    esp,0x14
c00253bc:	31 c0                	xor    eax,eax
c00253be:	5b                   	pop    ebx
c00253bf:	5e                   	pop    esi
c00253c0:	c3                   	ret    
c00253c1:	90                   	nop

c00253c2 <SATAPI::read(unsigned long long, int, void*)>:
c00253c2:	55                   	push   ebp
c00253c3:	57                   	push   edi
c00253c4:	56                   	push   esi
c00253c5:	53                   	push   ebx
c00253c6:	83 ec 1c             	sub    esp,0x1c
c00253c9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00253cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00253d1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00253d5:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00253dc:	74 19                	je     c00253f7 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00253de:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00253e3:	7e 2e                	jle    c0025413 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00253e5:	83 ec 0c             	sub    esp,0xc
c00253e8:	68 d9 ce 02 c0       	push   0xc002ced9
c00253ed:	e8 97 51 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c00253f2:	83 c4 10             	add    esp,0x10
c00253f5:	eb 1c                	jmp    c0025413 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00253f7:	83 ec 0c             	sub    esp,0xc
c00253fa:	55                   	push   ebp
c00253fb:	e8 52 fe ff ff       	call   c0025252 <SATAPI::detectMedia()>
c0025400:	83 c4 10             	add    esp,0x10
c0025403:	b8 02 00 00 00       	mov    eax,0x2
c0025408:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002540f:	75 cd                	jne    c00253de <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025411:	eb 49                	jmp    c002545c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025413:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025417:	b9 03 00 00 00       	mov    ecx,0x3
c002541c:	fc                   	cld    
c002541d:	31 c0                	xor    eax,eax
c002541f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025421:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025426:	89 d8                	mov    eax,ebx
c0025428:	86 e0                	xchg   al,ah
c002542a:	c1 c0 10             	rol    eax,0x10
c002542d:	86 e0                	xchg   al,ah
c002542f:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025433:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025437:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002543b:	50                   	push   eax
c002543c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025440:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025444:	56                   	push   esi
c0025445:	53                   	push   ebx
c0025446:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002544a:	c1 e0 0b             	shl    eax,0xb
c002544d:	50                   	push   eax
c002544e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025452:	50                   	push   eax
c0025453:	55                   	push   ebp
c0025454:	e8 ad fb ff ff       	call   c0025006 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025459:	83 c4 20             	add    esp,0x20
c002545c:	83 c4 1c             	add    esp,0x1c
c002545f:	5b                   	pop    ebx
c0025460:	5e                   	pop    esi
c0025461:	5f                   	pop    edi
c0025462:	5d                   	pop    ebp
c0025463:	c3                   	ret    

c0025464 <AVX::open(int, int, void*)>:
c0025464:	83 ec 0c             	sub    esp,0xc
c0025467:	e8 3c 11 00 00       	call   c00265a8 <avxInit>
c002546c:	b8 00 00 00 00       	mov    eax,0x0
c0025471:	83 c4 0c             	add    esp,0xc
c0025474:	c3                   	ret    
c0025475:	90                   	nop

c0025476 <AVX::close(int, int, void*)>:
c0025476:	83 ec 0c             	sub    esp,0xc
c0025479:	e8 2b 11 00 00       	call   c00265a9 <avxClose>
c002547e:	b8 00 00 00 00       	mov    eax,0x0
c0025483:	83 c4 0c             	add    esp,0xc
c0025486:	c3                   	ret    
c0025487:	90                   	nop

c0025488 <AVX::available()>:
c0025488:	83 ec 0c             	sub    esp,0xc
c002548b:	e8 10 11 00 00       	call   c00265a0 <avxDetect>
c0025490:	85 c0                	test   eax,eax
c0025492:	0f 95 c0             	setne  al
c0025495:	83 c4 0c             	add    esp,0xc
c0025498:	c3                   	ret    
c0025499:	90                   	nop

c002549a <AVX::save(void*)>:
c002549a:	83 ec 0c             	sub    esp,0xc
c002549d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254a1:	83 ec 0c             	sub    esp,0xc
c00254a4:	50                   	push   eax
c00254a5:	e8 fc 10 00 00       	call   c00265a6 <avxSave>
c00254aa:	83 c4 10             	add    esp,0x10
c00254ad:	90                   	nop
c00254ae:	83 c4 0c             	add    esp,0xc
c00254b1:	c3                   	ret    

c00254b2 <AVX::load(void*)>:
c00254b2:	83 ec 0c             	sub    esp,0xc
c00254b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254b9:	83 ec 0c             	sub    esp,0xc
c00254bc:	50                   	push   eax
c00254bd:	e8 e5 10 00 00       	call   c00265a7 <avxLoad>
c00254c2:	83 c4 10             	add    esp,0x10
c00254c5:	90                   	nop
c00254c6:	83 c4 0c             	add    esp,0xc
c00254c9:	c3                   	ret    

c00254ca <AVX::AVX()>:
c00254ca:	83 ec 0c             	sub    esp,0xc
c00254cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254d1:	83 ec 08             	sub    esp,0x8
c00254d4:	68 3c cf 02 c0       	push   0xc002cf3c
c00254d9:	50                   	push   eax
c00254da:	e8 e7 f2 fe ff       	call   c00147c6 <FPU::FPU(char const*)>
c00254df:	83 c4 10             	add    esp,0x10
c00254e2:	ba 4c cf 02 c0       	mov    edx,0xc002cf4c
c00254e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254eb:	89 10                	mov    DWORD PTR [eax],edx
c00254ed:	90                   	nop
c00254ee:	83 c4 0c             	add    esp,0xc
c00254f1:	c3                   	ret    

c00254f2 <MMX::available()>:
c00254f2:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00254f7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00254fd:	83 e0 20             	and    eax,0x20
c0025500:	84 c0                	test   al,al
c0025502:	0f 95 c0             	setne  al
c0025505:	c3                   	ret    

c0025506 <MMX::open(int, int, void*)>:
c0025506:	83 ec 0c             	sub    esp,0xc
c0025509:	e8 1e 11 00 00       	call   c002662c <x87Init>
c002550e:	b8 00 00 00 00       	mov    eax,0x0
c0025513:	83 c4 0c             	add    esp,0xc
c0025516:	c3                   	ret    
c0025517:	90                   	nop

c0025518 <MMX::close(int, int, void*)>:
c0025518:	83 ec 0c             	sub    esp,0xc
c002551b:	e8 26 11 00 00       	call   c0026646 <x87Close>
c0025520:	b8 00 00 00 00       	mov    eax,0x0
c0025525:	83 c4 0c             	add    esp,0xc
c0025528:	c3                   	ret    
c0025529:	90                   	nop

c002552a <MMX::save(void*)>:
c002552a:	83 ec 0c             	sub    esp,0xc
c002552d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025531:	83 ec 0c             	sub    esp,0xc
c0025534:	50                   	push   eax
c0025535:	e8 e7 10 00 00       	call   c0026621 <x87Save>
c002553a:	83 c4 10             	add    esp,0x10
c002553d:	90                   	nop
c002553e:	83 c4 0c             	add    esp,0xc
c0025541:	c3                   	ret    

c0025542 <MMX::load(void*)>:
c0025542:	83 ec 0c             	sub    esp,0xc
c0025545:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025549:	83 ec 0c             	sub    esp,0xc
c002554c:	50                   	push   eax
c002554d:	e8 d5 10 00 00       	call   c0026627 <x87Load>
c0025552:	83 c4 10             	add    esp,0x10
c0025555:	90                   	nop
c0025556:	83 c4 0c             	add    esp,0xc
c0025559:	c3                   	ret    

c002555a <MMX::MMX()>:
c002555a:	83 ec 0c             	sub    esp,0xc
c002555d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025561:	83 ec 08             	sub    esp,0x8
c0025564:	68 7c cf 02 c0       	push   0xc002cf7c
c0025569:	50                   	push   eax
c002556a:	e8 57 f2 fe ff       	call   c00147c6 <FPU::FPU(char const*)>
c002556f:	83 c4 10             	add    esp,0x10
c0025572:	ba 8c cf 02 c0       	mov    edx,0xc002cf8c
c0025577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002557b:	89 10                	mov    DWORD PTR [eax],edx
c002557d:	90                   	nop
c002557e:	83 c4 0c             	add    esp,0xc
c0025581:	c3                   	ret    

c0025582 <SSE::open(int, int, void*)>:
c0025582:	83 ec 0c             	sub    esp,0xc
c0025585:	e8 5a 10 00 00       	call   c00265e4 <sseInit>
c002558a:	b8 00 00 00 00       	mov    eax,0x0
c002558f:	83 c4 0c             	add    esp,0xc
c0025592:	c3                   	ret    
c0025593:	90                   	nop

c0025594 <SSE::close(int, int, void*)>:
c0025594:	83 ec 0c             	sub    esp,0xc
c0025597:	e8 58 10 00 00       	call   c00265f4 <sseClose>
c002559c:	b8 00 00 00 00       	mov    eax,0x0
c00255a1:	83 c4 0c             	add    esp,0xc
c00255a4:	c3                   	ret    
c00255a5:	90                   	nop

c00255a6 <SSE::available()>:
c00255a6:	83 ec 1c             	sub    esp,0x1c
c00255a9:	e8 12 10 00 00       	call   c00265c0 <absolutelyNoChanceInHell>
c00255ae:	85 c0                	test   eax,eax
c00255b0:	0f 95 c0             	setne  al
c00255b3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00255b7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00255bb:	83 c4 1c             	add    esp,0x1c
c00255be:	c3                   	ret    
c00255bf:	90                   	nop

c00255c0 <SSE::save(void*)>:
c00255c0:	83 ec 0c             	sub    esp,0xc
c00255c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255c7:	83 ec 0c             	sub    esp,0xc
c00255ca:	50                   	push   eax
c00255cb:	e8 08 10 00 00       	call   c00265d8 <sseSave>
c00255d0:	83 c4 10             	add    esp,0x10
c00255d3:	90                   	nop
c00255d4:	83 c4 0c             	add    esp,0xc
c00255d7:	c3                   	ret    

c00255d8 <SSE::load(void*)>:
c00255d8:	83 ec 0c             	sub    esp,0xc
c00255db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255df:	83 ec 0c             	sub    esp,0xc
c00255e2:	50                   	push   eax
c00255e3:	e8 f6 0f 00 00       	call   c00265de <sseLoad>
c00255e8:	83 c4 10             	add    esp,0x10
c00255eb:	90                   	nop
c00255ec:	83 c4 0c             	add    esp,0xc
c00255ef:	c3                   	ret    

c00255f0 <SSE::SSE()>:
c00255f0:	83 ec 0c             	sub    esp,0xc
c00255f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255f7:	83 ec 08             	sub    esp,0x8
c00255fa:	68 bc cf 02 c0       	push   0xc002cfbc
c00255ff:	50                   	push   eax
c0025600:	e8 c1 f1 fe ff       	call   c00147c6 <FPU::FPU(char const*)>
c0025605:	83 c4 10             	add    esp,0x10
c0025608:	ba cc cf 02 c0       	mov    edx,0xc002cfcc
c002560d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025611:	89 10                	mov    DWORD PTR [eax],edx
c0025613:	90                   	nop
c0025614:	83 c4 0c             	add    esp,0xc
c0025617:	c3                   	ret    

c0025618 <x87::open(int, int, void*)>:
c0025618:	83 ec 0c             	sub    esp,0xc
c002561b:	e8 0c 10 00 00       	call   c002662c <x87Init>
c0025620:	b8 00 00 00 00       	mov    eax,0x0
c0025625:	83 c4 0c             	add    esp,0xc
c0025628:	c3                   	ret    
c0025629:	90                   	nop

c002562a <x87::close(int, int, void*)>:
c002562a:	83 ec 0c             	sub    esp,0xc
c002562d:	e8 14 10 00 00       	call   c0026646 <x87Close>
c0025632:	b8 00 00 00 00       	mov    eax,0x0
c0025637:	83 c4 0c             	add    esp,0xc
c002563a:	c3                   	ret    
c002563b:	90                   	nop

c002563c <x87::available()>:
c002563c:	83 ec 0c             	sub    esp,0xc
c002563f:	e8 c2 0f 00 00       	call   c0026606 <x87Detect>
c0025644:	85 c0                	test   eax,eax
c0025646:	0f 95 c0             	setne  al
c0025649:	83 c4 0c             	add    esp,0xc
c002564c:	c3                   	ret    
c002564d:	90                   	nop

c002564e <x87::save(void*)>:
c002564e:	83 ec 0c             	sub    esp,0xc
c0025651:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025655:	83 ec 0c             	sub    esp,0xc
c0025658:	50                   	push   eax
c0025659:	e8 c3 0f 00 00       	call   c0026621 <x87Save>
c002565e:	83 c4 10             	add    esp,0x10
c0025661:	90                   	nop
c0025662:	83 c4 0c             	add    esp,0xc
c0025665:	c3                   	ret    

c0025666 <x87::load(void*)>:
c0025666:	83 ec 0c             	sub    esp,0xc
c0025669:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002566d:	83 ec 0c             	sub    esp,0xc
c0025670:	50                   	push   eax
c0025671:	e8 b1 0f 00 00       	call   c0026627 <x87Load>
c0025676:	83 c4 10             	add    esp,0x10
c0025679:	90                   	nop
c002567a:	83 c4 0c             	add    esp,0xc
c002567d:	c3                   	ret    

c002567e <x87::x87()>:
c002567e:	83 ec 0c             	sub    esp,0xc
c0025681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025685:	83 ec 08             	sub    esp,0x8
c0025688:	68 fc cf 02 c0       	push   0xc002cffc
c002568d:	50                   	push   eax
c002568e:	e8 33 f1 fe ff       	call   c00147c6 <FPU::FPU(char const*)>
c0025693:	83 c4 10             	add    esp,0x10
c0025696:	ba 0c d0 02 c0       	mov    edx,0xc002d00c
c002569b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002569f:	89 10                	mov    DWORD PTR [eax],edx
c00256a1:	90                   	nop
c00256a2:	83 c4 0c             	add    esp,0xc
c00256a5:	c3                   	ret    

c00256a6 <APIC::disable()>:
c00256a6:	90                   	nop
c00256a7:	c3                   	ret    

c00256a8 <APIC::close(int, int, void*)>:
c00256a8:	55                   	push   ebp
c00256a9:	89 e5                	mov    ebp,esp
c00256ab:	83 ec 08             	sub    esp,0x8
c00256ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00256b3:	83 c0 3c             	add    eax,0x3c
c00256b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00256b8:	83 ec 0c             	sub    esp,0xc
c00256bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256be:	ff d0                	call   eax
c00256c0:	83 c4 10             	add    esp,0x10
c00256c3:	b8 00 00 00 00       	mov    eax,0x0
c00256c8:	c9                   	leave  
c00256c9:	c3                   	ret    

c00256ca <IOAPIC::close(int, int, void*)>:
c00256ca:	b8 00 00 00 00       	mov    eax,0x0
c00256cf:	c3                   	ret    

c00256d0 <APIC::io_wait()>:
c00256d0:	eb 00                	jmp    c00256d2 <APIC::io_wait()+0x2>
c00256d2:	eb 00                	jmp    c00256d4 <APIC::io_wait()+0x4>
c00256d4:	90                   	nop
c00256d5:	c3                   	ret    

c00256d6 <APIC::getBase()>:
c00256d6:	55                   	push   ebp
c00256d7:	89 e5                	mov    ebp,esp
c00256d9:	83 ec 18             	sub    esp,0x18
c00256dc:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00256e1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00256e7:	83 e0 08             	and    eax,0x8
c00256ea:	84 c0                	test   al,al
c00256ec:	75 07                	jne    c00256f5 <APIC::getBase()+0x1f>
c00256ee:	b8 00 00 00 00       	mov    eax,0x0
c00256f3:	eb 21                	jmp    c0025716 <APIC::getBase()+0x40>
c00256f5:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00256fa:	83 ec 08             	sub    esp,0x8
c00256fd:	6a 1b                	push   0x1b
c00256ff:	50                   	push   eax
c0025700:	e8 e3 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025705:	83 c4 10             	add    esp,0x10
c0025708:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002570b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002570e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025711:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025716:	c9                   	leave  
c0025717:	c3                   	ret    

c0025718 <APIC::eoi(unsigned char)>:
c0025718:	55                   	push   ebp
c0025719:	89 e5                	mov    ebp,esp
c002571b:	83 ec 28             	sub    esp,0x28
c002571e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025721:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025724:	83 ec 0c             	sub    esp,0xc
c0025727:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002572a:	e8 a7 ff ff ff       	call   c00256d6 <APIC::getBase()>
c002572f:	83 c4 10             	add    esp,0x10
c0025732:	05 b0 00 00 00       	add    eax,0xb0
c0025737:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002573a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002573d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025743:	90                   	nop
c0025744:	c9                   	leave  
c0025745:	c3                   	ret    

c0025746 <APIC::open(int, int, void*)>:
c0025746:	55                   	push   ebp
c0025747:	89 e5                	mov    ebp,esp
c0025749:	57                   	push   edi
c002574a:	56                   	push   esi
c002574b:	53                   	push   ebx
c002574c:	83 ec 2c             	sub    esp,0x2c
c002574f:	83 ec 0c             	sub    esp,0xc
c0025752:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025755:	e8 7c ff ff ff       	call   c00256d6 <APIC::getBase()>
c002575a:	83 c4 10             	add    esp,0x10
c002575d:	89 c2                	mov    edx,eax
c002575f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025762:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025768:	0f b6 f8             	movzx  edi,al
c002576b:	89 d0                	mov    eax,edx
c002576d:	ba 00 00 00 00       	mov    edx,0x0
c0025772:	89 c1                	mov    ecx,eax
c0025774:	80 e5 ff             	and    ch,0xff
c0025777:	89 cb                	mov    ebx,ecx
c0025779:	0f b6 f2             	movzx  esi,dl
c002577c:	89 d8                	mov    eax,ebx
c002577e:	89 f2                	mov    edx,esi
c0025780:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025783:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025786:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002578a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002578e:	83 e0 00             	and    eax,0x0
c0025791:	09 d0                	or     eax,edx
c0025793:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002579a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00257a0:	8d 50 01             	lea    edx,[eax+0x1]
c00257a3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00257a6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00257ac:	0f b6 d0             	movzx  edx,al
c00257af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257b2:	83 c2 08             	add    edx,0x8
c00257b5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00257b9:	0f b6 c9             	movzx  ecx,cl
c00257bc:	81 c9 00 00 01 00    	or     ecx,0x10000
c00257c2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00257c6:	83 ec 0c             	sub    esp,0xc
c00257c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257cc:	e8 05 ff ff ff       	call   c00256d6 <APIC::getBase()>
c00257d1:	83 c4 10             	add    esp,0x10
c00257d4:	05 f0 00 00 00       	add    eax,0xf0
c00257d9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00257dc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00257df:	8b 00                	mov    eax,DWORD PTR [eax]
c00257e1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00257e4:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00257eb:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00257f2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00257f5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00257f8:	89 10                	mov    DWORD PTR [eax],edx
c00257fa:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025801:	a1 50 0c 03 c0       	mov    eax,ds:0xc0030c50
c0025806:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025809:	7d 7c                	jge    c0025887 <APIC::open(int, int, void*)+0x141>
c002580b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002580e:	8b 04 85 60 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3a0]
c0025815:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025818:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002581b:	8b 04 85 60 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3a0]
c0025822:	c1 e8 08             	shr    eax,0x8
c0025825:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025829:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002582c:	8b 04 85 60 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3a0]
c0025833:	c1 e8 18             	shr    eax,0x18
c0025836:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025839:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002583d:	75 40                	jne    c002587f <APIC::open(int, int, void*)+0x139>
c002583f:	83 ec 0c             	sub    esp,0xc
c0025842:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025845:	e8 8c fe ff ff       	call   c00256d6 <APIC::getBase()>
c002584a:	83 c4 10             	add    esp,0x10
c002584d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025851:	75 07                	jne    c002585a <APIC::open(int, int, void*)+0x114>
c0025853:	ba 60 03 00 00       	mov    edx,0x360
c0025858:	eb 05                	jmp    c002585f <APIC::open(int, int, void*)+0x119>
c002585a:	ba 50 03 00 00       	mov    edx,0x350
c002585f:	01 d0                	add    eax,edx
c0025861:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025864:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025867:	8b 00                	mov    eax,DWORD PTR [eax]
c0025869:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002586c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025873:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025877:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002587a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002587d:	89 10                	mov    DWORD PTR [eax],edx
c002587f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025882:	e9 7a ff ff ff       	jmp    c0025801 <APIC::open(int, int, void*)+0xbb>
c0025887:	b8 00 00 00 00       	mov    eax,0x0
c002588c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002588f:	5b                   	pop    ebx
c0025890:	5e                   	pop    esi
c0025891:	5f                   	pop    edi
c0025892:	5d                   	pop    ebp
c0025893:	c3                   	ret    

c0025894 <IOAPIC::IOAPIC()>:
c0025894:	83 ec 0c             	sub    esp,0xc
c0025897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002589b:	83 ec 08             	sub    esp,0x8
c002589e:	68 3c d0 02 c0       	push   0xc002d03c
c00258a3:	50                   	push   eax
c00258a4:	e8 0b ec fe ff       	call   c00144b4 <Device::Device(char const*)>
c00258a9:	83 c4 10             	add    esp,0x10
c00258ac:	ba 64 d1 02 c0       	mov    edx,0xc002d164
c00258b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258b5:	89 10                	mov    DWORD PTR [eax],edx
c00258b7:	90                   	nop
c00258b8:	83 c4 0c             	add    esp,0xc
c00258bb:	c3                   	ret    

c00258bc <APIC::APIC()>:
c00258bc:	53                   	push   ebx
c00258bd:	83 ec 18             	sub    esp,0x18
c00258c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00258c4:	83 ec 08             	sub    esp,0x8
c00258c7:	68 44 d0 02 c0       	push   0xc002d044
c00258cc:	50                   	push   eax
c00258cd:	e8 4e f3 fe ff       	call   c0014c20 <InterruptController::InterruptController(char const*)>
c00258d2:	83 c4 10             	add    esp,0x10
c00258d5:	ba 1c d1 02 c0       	mov    edx,0xc002d11c
c00258da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00258de:	89 10                	mov    DWORD PTR [eax],edx
c00258e0:	a0 20 27 03 c0       	mov    al,ds:0xc0032720
c00258e5:	83 f0 01             	xor    eax,0x1
c00258e8:	84 c0                	test   al,al
c00258ea:	0f 84 a1 00 00 00    	je     c0025991 <APIC::APIC()+0xd5>
c00258f0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00258f5:	a0 00 0d 03 c0       	mov    al,ds:0xc0030d00
c00258fa:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00258fe:	0f 83 86 00 00 00    	jae    c002598a <APIC::APIC()+0xce>
c0025904:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002590c:	83 ec 0c             	sub    esp,0xc
c002590f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025913:	e8 2b 9f fe ff       	call   c000f843 <malloc>
c0025918:	83 c4 10             	add    esp,0x10
c002591b:	89 c3                	mov    ebx,eax
c002591d:	83 ec 0c             	sub    esp,0xc
c0025920:	53                   	push   ebx
c0025921:	e8 6e ff ff ff       	call   c0025894 <IOAPIC::IOAPIC()>
c0025926:	83 c4 10             	add    esp,0x10
c0025929:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002592d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025932:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025936:	89 14 85 00 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd900],edx
c002593d:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c0025942:	40                   	inc    eax
c0025943:	a3 e0 26 03 c0       	mov    ds:0xc00326e0,eax
c0025948:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c002594d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025953:	83 ec 08             	sub    esp,0x8
c0025956:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002595a:	50                   	push   eax
c002595b:	e8 64 e9 fe ff       	call   c00142c4 <Device::addChild(Device*)>
c0025960:	83 c4 10             	add    esp,0x10
c0025963:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025967:	8b 00                	mov    eax,DWORD PTR [eax]
c0025969:	83 c0 08             	add    eax,0x8
c002596c:	8b 00                	mov    eax,DWORD PTR [eax]
c002596e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025973:	6a 00                	push   0x0
c0025975:	6a 00                	push   0x0
c0025977:	52                   	push   edx
c0025978:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002597c:	ff d0                	call   eax
c002597e:	83 c4 10             	add    esp,0x10
c0025981:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025985:	e9 6b ff ff ff       	jmp    c00258f5 <APIC::APIC()+0x39>
c002598a:	c6 05 20 27 03 c0 01 	mov    BYTE PTR ds:0xc0032720,0x1
c0025991:	90                   	nop
c0025992:	83 c4 18             	add    esp,0x18
c0025995:	5b                   	pop    ebx
c0025996:	c3                   	ret    
c0025997:	90                   	nop

c0025998 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025998:	55                   	push   ebp
c0025999:	89 e5                	mov    ebp,esp
c002599b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002599e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00259a4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00259a7:	72 1d                	jb     c00259c6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00259a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259ac:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00259b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259b5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00259bb:	01 d0                	add    eax,edx
c00259bd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00259c0:	73 04                	jae    c00259c6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00259c2:	b0 01                	mov    al,0x1
c00259c4:	eb 02                	jmp    c00259c8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00259c6:	b0 00                	mov    al,0x0
c00259c8:	5d                   	pop    ebp
c00259c9:	c3                   	ret    

c00259ca <IOAPIC::read(int)>:
c00259ca:	55                   	push   ebp
c00259cb:	89 e5                	mov    ebp,esp
c00259cd:	83 ec 10             	sub    esp,0x10
c00259d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259d3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00259d9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00259dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259df:	0f b6 d0             	movzx  edx,al
c00259e2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00259e5:	89 10                	mov    DWORD PTR [eax],edx
c00259e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00259ea:	83 c0 10             	add    eax,0x10
c00259ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00259ef:	c9                   	leave  
c00259f0:	c3                   	ret    
c00259f1:	90                   	nop

c00259f2 <IOAPIC::open(int, int, void*)>:
c00259f2:	55                   	push   ebp
c00259f3:	89 e5                	mov    ebp,esp
c00259f5:	57                   	push   edi
c00259f6:	56                   	push   esi
c00259f7:	53                   	push   ebx
c00259f8:	83 ec 0c             	sub    esp,0xc
c00259fb:	83 ec 0c             	sub    esp,0xc
c00259fe:	68 6f d0 02 c0       	push   0xc002d06f
c0025a03:	e8 95 d4 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0025a08:	83 c4 10             	add    esp,0x10
c0025a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a0e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a11:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025a17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a1a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a20:	8b 14 85 40 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf2c0]
c0025a27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a2a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025a30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a33:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025a39:	8b 14 85 c0 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf240]
c0025a40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a43:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025a49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a4c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a55:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a5b:	0f b6 f8             	movzx  edi,al
c0025a5e:	89 d0                	mov    eax,edx
c0025a60:	ba 00 00 00 00       	mov    edx,0x0
c0025a65:	89 c1                	mov    ecx,eax
c0025a67:	80 e5 ff             	and    ch,0xff
c0025a6a:	89 cb                	mov    ebx,ecx
c0025a6c:	0f b6 f2             	movzx  esi,dl
c0025a6f:	89 d8                	mov    eax,ebx
c0025a71:	89 f2                	mov    edx,esi
c0025a73:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025a76:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025a79:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025a7d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025a81:	83 e0 00             	and    eax,0x0
c0025a84:	09 d0                	or     eax,edx
c0025a86:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025a8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a8d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025a93:	8d 50 01             	lea    edx,[eax+0x1]
c0025a96:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025a99:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025a9f:	0f b6 d0             	movzx  edx,al
c0025aa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa5:	83 c2 08             	add    edx,0x8
c0025aa8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025aac:	0f b6 c9             	movzx  ecx,cl
c0025aaf:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025ab5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025ab9:	83 ec 08             	sub    esp,0x8
c0025abc:	6a 01                	push   0x1
c0025abe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ac1:	e8 04 ff ff ff       	call   c00259ca <IOAPIC::read(int)>
c0025ac6:	83 c4 10             	add    esp,0x10
c0025ac9:	c1 f8 10             	sar    eax,0x10
c0025acc:	0f b6 c0             	movzx  eax,al
c0025acf:	8d 50 01             	lea    edx,[eax+0x1]
c0025ad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ad5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025adb:	b8 00 00 00 00       	mov    eax,0x0
c0025ae0:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ae3:	5b                   	pop    ebx
c0025ae4:	5e                   	pop    esi
c0025ae5:	5f                   	pop    edi
c0025ae6:	5d                   	pop    ebp
c0025ae7:	c3                   	ret    

c0025ae8 <IOAPIC::write(int, int)>:
c0025ae8:	55                   	push   ebp
c0025ae9:	89 e5                	mov    ebp,esp
c0025aeb:	83 ec 10             	sub    esp,0x10
c0025aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025af1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025af7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025afa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025afd:	0f b6 d0             	movzx  edx,al
c0025b00:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b03:	89 10                	mov    DWORD PTR [eax],edx
c0025b05:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b08:	8d 50 10             	lea    edx,[eax+0x10]
c0025b0b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b0e:	89 02                	mov    DWORD PTR [edx],eax
c0025b10:	90                   	nop
c0025b11:	c9                   	leave  
c0025b12:	c3                   	ret    
c0025b13:	90                   	nop

c0025b14 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025b14:	55                   	push   ebp
c0025b15:	89 e5                	mov    ebp,esp
c0025b17:	53                   	push   ebx
c0025b18:	83 ec 2c             	sub    esp,0x2c
c0025b1b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b1e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025b21:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025b24:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025b27:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025b2a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025b2d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025b30:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025b33:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025b36:	88 d8                	mov    al,bl
c0025b38:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025b3b:	88 c8                	mov    al,cl
c0025b3d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025b40:	88 d0                	mov    al,dl
c0025b42:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025b45:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b49:	83 c0 08             	add    eax,0x8
c0025b4c:	01 c0                	add    eax,eax
c0025b4e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025b51:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b55:	83 c0 08             	add    eax,0x8
c0025b58:	01 c0                	add    eax,eax
c0025b5a:	40                   	inc    eax
c0025b5b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025b5e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025b61:	50                   	push   eax
c0025b62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b65:	e8 60 fe ff ff       	call   c00259ca <IOAPIC::read(int)>
c0025b6a:	83 c4 08             	add    esp,0x8
c0025b6d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025b70:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025b77:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025b7a:	c1 e0 18             	shl    eax,0x18
c0025b7d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025b80:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025b83:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025b86:	52                   	push   edx
c0025b87:	50                   	push   eax
c0025b88:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b8b:	e8 58 ff ff ff       	call   c0025ae8 <IOAPIC::write(int, int)>
c0025b90:	83 c4 0c             	add    esp,0xc
c0025b93:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b96:	50                   	push   eax
c0025b97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b9a:	e8 2b fe ff ff       	call   c00259ca <IOAPIC::read(int)>
c0025b9f:	83 c4 08             	add    esp,0x8
c0025ba2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025ba5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025bac:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025bb3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025bba:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025bbe:	74 09                	je     c0025bc9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025bc0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025bc7:	eb 07                	jmp    c0025bd0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025bc9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025bd0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025bd4:	74 09                	je     c0025bdf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025bd6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025bdd:	eb 07                	jmp    c0025be6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025bdf:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025be6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025bed:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025bf1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025bf4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025bf7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025bfa:	52                   	push   edx
c0025bfb:	50                   	push   eax
c0025bfc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bff:	e8 e4 fe ff ff       	call   c0025ae8 <IOAPIC::write(int, int)>
c0025c04:	83 c4 0c             	add    esp,0xc
c0025c07:	90                   	nop
c0025c08:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025c0b:	c9                   	leave  
c0025c0c:	c3                   	ret    
c0025c0d:	90                   	nop

c0025c0e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025c0e:	55                   	push   ebp
c0025c0f:	89 e5                	mov    ebp,esp
c0025c11:	57                   	push   edi
c0025c12:	56                   	push   esi
c0025c13:	53                   	push   ebx
c0025c14:	83 ec 2c             	sub    esp,0x2c
c0025c17:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c1a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c1d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c21:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025c25:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c29:	74 5a                	je     c0025c85 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c2b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025c2f:	7f 44                	jg     c0025c75 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025c31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c34:	05 c0 d5 02 c0       	add    eax,0xc002d5c0
c0025c39:	8a 00                	mov    al,BYTE PTR [eax]
c0025c3b:	0f b6 c0             	movzx  eax,al
c0025c3e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025c41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c44:	66 8b 84 00 e0 0c 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf320]
c0025c4c:	0f b7 c0             	movzx  eax,ax
c0025c4f:	83 e0 02             	and    eax,0x2
c0025c52:	85 c0                	test   eax,eax
c0025c54:	74 04                	je     c0025c5a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025c56:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025c5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c5d:	66 8b 84 00 e0 0c 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf320]
c0025c65:	0f b7 c0             	movzx  eax,ax
c0025c68:	83 e0 08             	and    eax,0x8
c0025c6b:	85 c0                	test   eax,eax
c0025c6d:	74 16                	je     c0025c85 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c6f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025c73:	eb 10                	jmp    c0025c85 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025c75:	83 ec 0c             	sub    esp,0xc
c0025c78:	68 80 d0 02 c0       	push   0xc002d080
c0025c7d:	e8 07 49 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c0025c82:	83 c4 10             	add    esp,0x10
c0025c85:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025c89:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c0025c8e:	83 ec 08             	sub    esp,0x8
c0025c91:	50                   	push   eax
c0025c92:	68 b8 d0 02 c0       	push   0xc002d0b8
c0025c97:	e8 01 d2 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0025c9c:	83 c4 10             	add    esp,0x10
c0025c9f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025ca6:	a1 e0 26 03 c0       	mov    eax,ds:0xc00326e0
c0025cab:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025cae:	7d 67                	jge    c0025d17 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025cb0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025cb3:	8b 04 85 00 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd900]
c0025cba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025cbd:	83 ec 08             	sub    esp,0x8
c0025cc0:	52                   	push   edx
c0025cc1:	50                   	push   eax
c0025cc2:	e8 d1 fc ff ff       	call   c0025998 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025cc7:	83 c4 10             	add    esp,0x10
c0025cca:	84 c0                	test   al,al
c0025ccc:	74 44                	je     c0025d12 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025cce:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025cd1:	8b 1c 85 00 27 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd900]
c0025cd8:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025cdc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025cdf:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025ce3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ce6:	83 c0 20             	add    eax,0x20
c0025ce9:	0f b6 f0             	movzx  esi,al
c0025cec:	b8 00 00 00 00       	mov    eax,0x0
c0025cf1:	99                   	cdq    
c0025cf2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025cf5:	0f b6 c9             	movzx  ecx,cl
c0025cf8:	83 ec 04             	sub    esp,0x4
c0025cfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025cfe:	57                   	push   edi
c0025cff:	56                   	push   esi
c0025d00:	52                   	push   edx
c0025d01:	50                   	push   eax
c0025d02:	51                   	push   ecx
c0025d03:	53                   	push   ebx
c0025d04:	e8 0b fe ff ff       	call   c0025b14 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025d09:	83 c4 20             	add    esp,0x20
c0025d0c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025d10:	eb 05                	jmp    c0025d17 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d12:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025d15:	eb 8f                	jmp    c0025ca6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025d17:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025d1a:	83 f0 01             	xor    eax,0x1
c0025d1d:	84 c0                	test   al,al
c0025d1f:	74 10                	je     c0025d31 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025d21:	83 ec 0c             	sub    esp,0xc
c0025d24:	68 cf d0 02 c0       	push   0xc002d0cf
c0025d29:	e8 5b 48 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c0025d2e:	83 c4 10             	add    esp,0x10
c0025d31:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025d35:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025d3c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025d40:	7f 65                	jg     c0025da7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025d42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d48:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d4f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d52:	01 ca                	add    edx,ecx
c0025d54:	83 c2 54             	add    edx,0x54
c0025d57:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025d5b:	85 c0                	test   eax,eax
c0025d5d:	75 43                	jne    c0025da2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025d5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d62:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d65:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d6c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d6f:	01 ca                	add    edx,ecx
c0025d71:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025d74:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025d77:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025d7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d7e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d81:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025d88:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d8b:	01 ca                	add    edx,ecx
c0025d8d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025d93:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025d96:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025d9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d9d:	83 e8 20             	sub    eax,0x20
c0025da0:	eb 1a                	jmp    c0025dbc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025da2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025da5:	eb 95                	jmp    c0025d3c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025da7:	83 ec 0c             	sub    esp,0xc
c0025daa:	68 dc d0 02 c0       	push   0xc002d0dc
c0025daf:	e8 d5 47 ff ff       	call   c001a589 <Krnl::panic(char const*)>
c0025db4:	83 c4 10             	add    esp,0x10
c0025db7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025dbc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025dbf:	5b                   	pop    ebx
c0025dc0:	5e                   	pop    esi
c0025dc1:	5f                   	pop    edi
c0025dc2:	5d                   	pop    ebp
c0025dc3:	c3                   	ret    

c0025dc4 <PIC::disable()>:
c0025dc4:	55                   	push   ebp
c0025dc5:	89 e5                	mov    ebp,esp
c0025dc7:	83 ec 10             	sub    esp,0x10
c0025dca:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025dd0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025dd4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025dd7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025ddb:	ee                   	out    dx,al
c0025ddc:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025de2:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025de6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025de9:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025ded:	ee                   	out    dx,al
c0025dee:	90                   	nop
c0025def:	c9                   	leave  
c0025df0:	c3                   	ret    
c0025df1:	90                   	nop

c0025df2 <PIC::close(int, int, void*)>:
c0025df2:	55                   	push   ebp
c0025df3:	89 e5                	mov    ebp,esp
c0025df5:	83 ec 08             	sub    esp,0x8
c0025df8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0025dfd:	83 c0 3c             	add    eax,0x3c
c0025e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e02:	83 ec 0c             	sub    esp,0xc
c0025e05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e08:	ff d0                	call   eax
c0025e0a:	83 c4 10             	add    esp,0x10
c0025e0d:	b8 00 00 00 00       	mov    eax,0x0
c0025e12:	c9                   	leave  
c0025e13:	c3                   	ret    

c0025e14 <PIC::PIC()>:
c0025e14:	83 ec 0c             	sub    esp,0xc
c0025e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e1b:	83 ec 08             	sub    esp,0x8
c0025e1e:	68 88 d1 02 c0       	push   0xc002d188
c0025e23:	50                   	push   eax
c0025e24:	e8 f7 ed fe ff       	call   c0014c20 <InterruptController::InterruptController(char const*)>
c0025e29:	83 c4 10             	add    esp,0x10
c0025e2c:	ba b4 d1 02 c0       	mov    edx,0xc002d1b4
c0025e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e35:	89 10                	mov    DWORD PTR [eax],edx
c0025e37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e3b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e41:	0f b6 d0             	movzx  edx,al
c0025e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e48:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025e4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e53:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e59:	0f b6 d0             	movzx  edx,al
c0025e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e60:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025e65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e69:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e6f:	8d 50 01             	lea    edx,[eax+0x1]
c0025e72:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e76:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025e7c:	0f b6 d0             	movzx  edx,al
c0025e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e83:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025e87:	83 e1 3f             	and    ecx,0x3f
c0025e8a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e92:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e98:	0f b6 d0             	movzx  edx,al
c0025e9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e9f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025ea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eaa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025eb0:	0f b6 d0             	movzx  edx,al
c0025eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eb7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ec6:	8d 50 01             	lea    edx,[eax+0x1]
c0025ec9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ecd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ed3:	0f b6 d0             	movzx  edx,al
c0025ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eda:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ede:	83 e1 3f             	and    ecx,0x3f
c0025ee1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025ee5:	90                   	nop
c0025ee6:	83 c4 0c             	add    esp,0xc
c0025ee9:	c3                   	ret    

c0025eea <PIC::ioWait()>:
c0025eea:	eb 00                	jmp    c0025eec <PIC::ioWait()+0x2>
c0025eec:	eb 00                	jmp    c0025eee <PIC::ioWait()+0x4>
c0025eee:	90                   	nop
c0025eef:	c3                   	ret    

c0025ef0 <PIC::getIRQReg(int)>:
c0025ef0:	55                   	push   ebp
c0025ef1:	89 e5                	mov    ebp,esp
c0025ef3:	83 ec 10             	sub    esp,0x10
c0025ef6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ef9:	0f b6 c0             	movzx  eax,al
c0025efc:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f02:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025f05:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f08:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f0c:	ee                   	out    dx,al
c0025f0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f10:	0f b6 c0             	movzx  eax,al
c0025f13:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f19:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025f1c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f1f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f23:	ee                   	out    dx,al
c0025f24:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025f2a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025f2e:	89 c2                	mov    edx,eax
c0025f30:	ec                   	in     al,dx
c0025f31:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025f34:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f37:	0f b6 c0             	movzx  eax,al
c0025f3a:	c1 e0 08             	shl    eax,0x8
c0025f3d:	89 c1                	mov    ecx,eax
c0025f3f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025f45:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025f49:	89 c2                	mov    edx,eax
c0025f4b:	ec                   	in     al,dx
c0025f4c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025f4f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f52:	0f b6 c0             	movzx  eax,al
c0025f55:	09 c8                	or     eax,ecx
c0025f57:	c9                   	leave  
c0025f58:	c3                   	ret    
c0025f59:	90                   	nop

c0025f5a <PIC::eoi(unsigned char)>:
c0025f5a:	55                   	push   ebp
c0025f5b:	89 e5                	mov    ebp,esp
c0025f5d:	83 ec 14             	sub    esp,0x14
c0025f60:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f63:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025f66:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025f6a:	75 1e                	jne    c0025f8a <PIC::eoi(unsigned char)+0x30>
c0025f6c:	6a 0b                	push   0xb
c0025f6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f71:	e8 7a ff ff ff       	call   c0025ef0 <PIC::getIRQReg(int)>
c0025f76:	83 c4 08             	add    esp,0x8
c0025f79:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025f7d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025f81:	25 80 00 00 00       	and    eax,0x80
c0025f86:	85 c0                	test   eax,eax
c0025f88:	74 5f                	je     c0025fe9 <PIC::eoi(unsigned char)+0x8f>
c0025f8a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025f8e:	75 2d                	jne    c0025fbd <PIC::eoi(unsigned char)+0x63>
c0025f90:	6a 0b                	push   0xb
c0025f92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f95:	e8 56 ff ff ff       	call   c0025ef0 <PIC::getIRQReg(int)>
c0025f9a:	83 c4 08             	add    esp,0x8
c0025f9d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025fa1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025fa4:	66 85 c0             	test   ax,ax
c0025fa7:	78 14                	js     c0025fbd <PIC::eoi(unsigned char)+0x63>
c0025fa9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025faf:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025fb3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025fb6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025fba:	ee                   	out    dx,al
c0025fbb:	eb 2d                	jmp    c0025fea <PIC::eoi(unsigned char)+0x90>
c0025fbd:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025fc1:	76 12                	jbe    c0025fd5 <PIC::eoi(unsigned char)+0x7b>
c0025fc3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025fc9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025fcd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025fd0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025fd4:	ee                   	out    dx,al
c0025fd5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025fdb:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025fdf:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025fe2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025fe6:	ee                   	out    dx,al
c0025fe7:	eb 01                	jmp    c0025fea <PIC::eoi(unsigned char)+0x90>
c0025fe9:	90                   	nop
c0025fea:	c9                   	leave  
c0025feb:	c3                   	ret    

c0025fec <PIC::remap()>:
c0025fec:	55                   	push   ebp
c0025fed:	89 e5                	mov    ebp,esp
c0025fef:	83 ec 48             	sub    esp,0x48
c0025ff2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025ff9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026000:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026006:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026009:	89 c2                	mov    edx,eax
c002600b:	ec                   	in     al,dx
c002600c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002600f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026012:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026015:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002601b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002601e:	89 c2                	mov    edx,eax
c0026020:	ec                   	in     al,dx
c0026021:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026024:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026027:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002602a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026030:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026034:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026037:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002603a:	ee                   	out    dx,al
c002603b:	83 ec 0c             	sub    esp,0xc
c002603e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026041:	e8 a4 fe ff ff       	call   c0025eea <PIC::ioWait()>
c0026046:	83 c4 10             	add    esp,0x10
c0026049:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002604f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026053:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026056:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026059:	ee                   	out    dx,al
c002605a:	83 ec 0c             	sub    esp,0xc
c002605d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026060:	e8 85 fe ff ff       	call   c0025eea <PIC::ioWait()>
c0026065:	83 c4 10             	add    esp,0x10
c0026068:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002606b:	0f b6 c0             	movzx  eax,al
c002606e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026074:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026077:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002607a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002607d:	ee                   	out    dx,al
c002607e:	83 ec 0c             	sub    esp,0xc
c0026081:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026084:	e8 61 fe ff ff       	call   c0025eea <PIC::ioWait()>
c0026089:	83 c4 10             	add    esp,0x10
c002608c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002608f:	0f b6 c0             	movzx  eax,al
c0026092:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026098:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002609b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002609e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00260a1:	ee                   	out    dx,al
c00260a2:	83 ec 0c             	sub    esp,0xc
c00260a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260a8:	e8 3d fe ff ff       	call   c0025eea <PIC::ioWait()>
c00260ad:	83 c4 10             	add    esp,0x10
c00260b0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00260b6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00260ba:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00260bd:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00260c0:	ee                   	out    dx,al
c00260c1:	83 ec 0c             	sub    esp,0xc
c00260c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260c7:	e8 1e fe ff ff       	call   c0025eea <PIC::ioWait()>
c00260cc:	83 c4 10             	add    esp,0x10
c00260cf:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00260d5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00260d9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00260dc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00260df:	ee                   	out    dx,al
c00260e0:	83 ec 0c             	sub    esp,0xc
c00260e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260e6:	e8 ff fd ff ff       	call   c0025eea <PIC::ioWait()>
c00260eb:	83 c4 10             	add    esp,0x10
c00260ee:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00260f4:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00260f8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00260fb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00260fe:	ee                   	out    dx,al
c00260ff:	83 ec 0c             	sub    esp,0xc
c0026102:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026105:	e8 e0 fd ff ff       	call   c0025eea <PIC::ioWait()>
c002610a:	83 c4 10             	add    esp,0x10
c002610d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026113:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026117:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002611a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002611d:	ee                   	out    dx,al
c002611e:	83 ec 0c             	sub    esp,0xc
c0026121:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026124:	e8 c1 fd ff ff       	call   c0025eea <PIC::ioWait()>
c0026129:	83 c4 10             	add    esp,0x10
c002612c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026130:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026136:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026139:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002613c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002613f:	ee                   	out    dx,al
c0026140:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026144:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002614a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002614d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026150:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026153:	ee                   	out    dx,al
c0026154:	90                   	nop
c0026155:	c9                   	leave  
c0026156:	c3                   	ret    
c0026157:	90                   	nop

c0026158 <PIC::open(int, int, void*)>:
c0026158:	55                   	push   ebp
c0026159:	89 e5                	mov    ebp,esp
c002615b:	83 ec 18             	sub    esp,0x18
c002615e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026164:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026168:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002616b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002616f:	ee                   	out    dx,al
c0026170:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026176:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002617a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002617d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026181:	ee                   	out    dx,al
c0026182:	83 ec 0c             	sub    esp,0xc
c0026185:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026188:	e8 5f fe ff ff       	call   c0025fec <PIC::remap()>
c002618d:	83 c4 10             	add    esp,0x10
c0026190:	b8 00 00 00 00       	mov    eax,0x0
c0026195:	c9                   	leave  
c0026196:	c3                   	ret    
c0026197:	90                   	nop

c0026198 <APICTimer::close(int, int, void*)>:
c0026198:	b8 00 00 00 00       	mov    eax,0x0
c002619d:	c3                   	ret    

c002619e <apicTimerHandler(regs*, void*)>:
c002619e:	83 ec 0c             	sub    esp,0xc
c00261a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00261a7:	99                   	cdq    
c00261a8:	52                   	push   edx
c00261a9:	50                   	push   eax
c00261aa:	6a 00                	push   0x0
c00261ac:	68 00 ca 9a 3b       	push   0x3b9aca00
c00261b1:	e8 86 07 00 00       	call   c002693c <__udivdi3>
c00261b6:	83 c4 10             	add    esp,0x10
c00261b9:	83 ec 08             	sub    esp,0x8
c00261bc:	52                   	push   edx
c00261bd:	50                   	push   eax
c00261be:	e8 e2 0a ff ff       	call   c0016ca5 <timerHandler(unsigned long long)>
c00261c3:	83 c4 10             	add    esp,0x10
c00261c6:	90                   	nop
c00261c7:	83 c4 0c             	add    esp,0xc
c00261ca:	c3                   	ret    
c00261cb:	90                   	nop

c00261cc <APICTimer::write(int)>:
c00261cc:	53                   	push   ebx
c00261cd:	83 ec 28             	sub    esp,0x28
c00261d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00261d4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00261d8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00261de:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00261e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00261e9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00261ef:	83 ec 0c             	sub    esp,0xc
c00261f2:	50                   	push   eax
c00261f3:	e8 de f4 ff ff       	call   c00256d6 <APIC::getBase()>
c00261f8:	83 c4 10             	add    esp,0x10
c00261fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00261ff:	a1 f0 e9 02 c0       	mov    eax,ds:0xc002e9f0
c0026204:	8b 15 f4 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9f4
c002620a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002620e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026212:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026216:	05 e0 03 00 00       	add    eax,0x3e0
c002621b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026221:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026225:	05 80 03 00 00       	add    eax,0x380
c002622a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026230:	fb                   	sti    
c0026231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026235:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026239:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002623e:	83 d2 00             	adc    edx,0x0
c0026241:	89 c1                	mov    ecx,eax
c0026243:	89 d3                	mov    ebx,edx
c0026245:	a1 f0 e9 02 c0       	mov    eax,ds:0xc002e9f0
c002624a:	8b 15 f4 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e9f4
c0026250:	39 c8                	cmp    eax,ecx
c0026252:	89 d0                	mov    eax,edx
c0026254:	19 d8                	sbb    eax,ebx
c0026256:	73 02                	jae    c002625a <APICTimer::write(int)+0x8e>
c0026258:	eb d7                	jmp    c0026231 <APICTimer::write(int)+0x65>
c002625a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002625e:	05 20 03 00 00       	add    eax,0x320
c0026263:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026269:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002626d:	05 90 03 00 00       	add    eax,0x390
c0026272:	8b 00                	mov    eax,DWORD PTR [eax]
c0026274:	f7 d0                	not    eax
c0026276:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002627a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002627e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026282:	ba 00 00 00 00       	mov    edx,0x0
c0026287:	f7 f3                	div    ebx
c0026289:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002628d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026291:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026297:	0d 00 00 02 00       	or     eax,0x20000
c002629c:	89 c2                	mov    edx,eax
c002629e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262a2:	05 20 03 00 00       	add    eax,0x320
c00262a7:	89 10                	mov    DWORD PTR [eax],edx
c00262a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262ad:	05 e0 03 00 00       	add    eax,0x3e0
c00262b2:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00262b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262bc:	05 80 03 00 00       	add    eax,0x380
c00262c1:	89 c2                	mov    edx,eax
c00262c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00262c7:	89 02                	mov    DWORD PTR [edx],eax
c00262c9:	90                   	nop
c00262ca:	83 c4 28             	add    esp,0x28
c00262cd:	5b                   	pop    ebx
c00262ce:	c3                   	ret    
c00262cf:	90                   	nop

c00262d0 <APICTimer::open(int, int, void*)>:
c00262d0:	57                   	push   edi
c00262d1:	56                   	push   esi
c00262d2:	53                   	push   ebx
c00262d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00262d9:	83 c0 24             	add    eax,0x24
c00262dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00262de:	83 ec 08             	sub    esp,0x8
c00262e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00262e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00262e9:	ff d0                	call   eax
c00262eb:	83 c4 10             	add    esp,0x10
c00262ee:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c00262f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00262f9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00262ff:	83 ec 0c             	sub    esp,0xc
c0026302:	50                   	push   eax
c0026303:	e8 ce f3 ff ff       	call   c00256d6 <APIC::getBase()>
c0026308:	83 c4 10             	add    esp,0x10
c002630b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026315:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002631b:	0f b6 f8             	movzx  edi,al
c002631e:	89 d0                	mov    eax,edx
c0026320:	ba 00 00 00 00       	mov    edx,0x0
c0026325:	89 c1                	mov    ecx,eax
c0026327:	80 e5 ff             	and    ch,0xff
c002632a:	89 cb                	mov    ebx,ecx
c002632c:	0f b6 f2             	movzx  esi,dl
c002632f:	89 d8                	mov    eax,ebx
c0026331:	89 f2                	mov    edx,esi
c0026333:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026337:	8d 5f 08             	lea    ebx,[edi+0x8]
c002633a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002633e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026342:	83 e0 00             	and    eax,0x0
c0026345:	09 d0                	or     eax,edx
c0026347:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002634b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002634f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026355:	8d 50 01             	lea    edx,[eax+0x1]
c0026358:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002635c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026362:	0f b6 d0             	movzx  edx,al
c0026365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026369:	83 c2 08             	add    edx,0x8
c002636c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026370:	0f b6 c9             	movzx  ecx,cl
c0026373:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026379:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002637d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026381:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026385:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002638b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002638f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026393:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026399:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002639d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00263a3:	83 ec 0c             	sub    esp,0xc
c00263a6:	51                   	push   ecx
c00263a7:	6a 01                	push   0x1
c00263a9:	68 9e 61 02 c0       	push   0xc002619e
c00263ae:	52                   	push   edx
c00263af:	50                   	push   eax
c00263b0:	e8 93 de fe ff       	call   c0014248 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00263b5:	83 c4 20             	add    esp,0x20
c00263b8:	89 c2                	mov    edx,eax
c00263ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263be:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00263c4:	b8 00 00 00 00       	mov    eax,0x0
c00263c9:	5b                   	pop    ebx
c00263ca:	5e                   	pop    esi
c00263cb:	5f                   	pop    edi
c00263cc:	c3                   	ret    
c00263cd:	90                   	nop

c00263ce <APICTimer::APICTimer()>:
c00263ce:	83 ec 0c             	sub    esp,0xc
c00263d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263d5:	83 ec 08             	sub    esp,0x8
c00263d8:	68 f4 d1 02 c0       	push   0xc002d1f4
c00263dd:	50                   	push   eax
c00263de:	e8 33 08 ff ff       	call   c0016c16 <Timer::Timer(char const*)>
c00263e3:	83 c4 10             	add    esp,0x10
c00263e6:	ba 08 d2 02 c0       	mov    edx,0xc002d208
c00263eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ef:	89 10                	mov    DWORD PTR [eax],edx
c00263f1:	90                   	nop
c00263f2:	83 c4 0c             	add    esp,0xc
c00263f5:	c3                   	ret    

c00263f6 <PIT::write(int)>:
c00263f6:	83 ec 10             	sub    esp,0x10
c00263f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00263fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026401:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026407:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002640b:	a3 24 27 03 c0       	mov    ds:0xc0032724,eax
c0026410:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026415:	99                   	cdq    
c0026416:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002641a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002641e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026425:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002642a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002642e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026433:	ee                   	out    dx,al
c0026434:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026438:	0f b6 c0             	movzx  eax,al
c002643b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026442:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026446:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002644a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002644f:	ee                   	out    dx,al
c0026450:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026454:	c1 f8 08             	sar    eax,0x8
c0026457:	0f b6 c0             	movzx  eax,al
c002645a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026461:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026465:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026469:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002646e:	ee                   	out    dx,al
c002646f:	90                   	nop
c0026470:	83 c4 10             	add    esp,0x10
c0026473:	c3                   	ret    

c0026474 <pitHandler(regs*, void*)>:
c0026474:	83 ec 0c             	sub    esp,0xc
c0026477:	a1 24 27 03 c0       	mov    eax,ds:0xc0032724
c002647c:	99                   	cdq    
c002647d:	52                   	push   edx
c002647e:	50                   	push   eax
c002647f:	6a 00                	push   0x0
c0026481:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026486:	e8 b1 04 00 00       	call   c002693c <__udivdi3>
c002648b:	83 c4 10             	add    esp,0x10
c002648e:	83 ec 08             	sub    esp,0x8
c0026491:	52                   	push   edx
c0026492:	50                   	push   eax
c0026493:	e8 0d 08 ff ff       	call   c0016ca5 <timerHandler(unsigned long long)>
c0026498:	83 c4 10             	add    esp,0x10
c002649b:	90                   	nop
c002649c:	83 c4 0c             	add    esp,0xc
c002649f:	c3                   	ret    

c00264a0 <PIT::open(int, int, void*)>:
c00264a0:	83 ec 0c             	sub    esp,0xc
c00264a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00264a9:	83 c0 24             	add    eax,0x24
c00264ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00264ae:	83 ec 08             	sub    esp,0x8
c00264b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00264b9:	ff d0                	call   eax
c00264bb:	83 c4 10             	add    esp,0x10
c00264be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c2:	83 ec 0c             	sub    esp,0xc
c00264c5:	6a 00                	push   0x0
c00264c7:	6a 01                	push   0x1
c00264c9:	68 74 64 02 c0       	push   0xc0026474
c00264ce:	6a 00                	push   0x0
c00264d0:	50                   	push   eax
c00264d1:	e8 72 dd fe ff       	call   c0014248 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00264d6:	83 c4 20             	add    esp,0x20
c00264d9:	89 c2                	mov    edx,eax
c00264db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264df:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00264e5:	b8 00 00 00 00       	mov    eax,0x0
c00264ea:	83 c4 0c             	add    esp,0xc
c00264ed:	c3                   	ret    

c00264ee <PIT::close(int, int, void*)>:
c00264ee:	83 ec 0c             	sub    esp,0xc
c00264f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264f5:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00264ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026503:	6a 01                	push   0x1
c0026505:	68 74 64 02 c0       	push   0xc0026474
c002650a:	6a 00                	push   0x0
c002650c:	50                   	push   eax
c002650d:	e8 74 dd fe ff       	call   c0014286 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026512:	83 c4 10             	add    esp,0x10
c0026515:	b8 00 00 00 00       	mov    eax,0x0
c002651a:	83 c4 0c             	add    esp,0xc
c002651d:	c3                   	ret    

c002651e <PIT::PIT()>:
c002651e:	83 ec 0c             	sub    esp,0xc
c0026521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026525:	83 ec 08             	sub    esp,0x8
c0026528:	68 30 d2 02 c0       	push   0xc002d230
c002652d:	50                   	push   eax
c002652e:	e8 e3 06 ff ff       	call   c0016c16 <Timer::Timer(char const*)>
c0026533:	83 c4 10             	add    esp,0x10
c0026536:	ba 58 d2 02 c0       	mov    edx,0xc002d258
c002653b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002653f:	89 10                	mov    DWORD PTR [eax],edx
c0026541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026545:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002654b:	0f b6 d0             	movzx  edx,al
c002654e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026552:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002655d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026563:	0f b6 d0             	movzx  edx,al
c0026566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002656a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002656f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026573:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026579:	8d 50 01             	lea    edx,[eax+0x1]
c002657c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026580:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026586:	0f b6 d0             	movzx  edx,al
c0026589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002658d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026591:	83 e1 3f             	and    ecx,0x3f
c0026594:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026598:	90                   	nop
c0026599:	83 c4 0c             	add    esp,0xc
c002659c:	c3                   	ret    
c002659d:	66 90                	xchg   ax,ax
c002659f:	90                   	nop

c00265a0 <avxDetect>:
c00265a0:	b8 00 00 00 00       	mov    eax,0x0
c00265a5:	c3                   	ret    

c00265a6 <avxSave>:
c00265a6:	c3                   	ret    

c00265a7 <avxLoad>:
c00265a7:	c3                   	ret    

c00265a8 <avxInit>:
c00265a8:	c3                   	ret    

c00265a9 <avxClose>:
c00265a9:	c3                   	ret    

c00265aa <wouldSheSayYes>:
c00265aa:	c3                   	ret    
c00265ab:	49                   	dec    ecx
c00265ac:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00265b0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00265b4:	75 20                	jne    c00265d6 <sseDetect.noSSE+0x1>
c00265b6:	4e                   	dec    esi
c00265b7:	79 61                	jns    c002661a <x87Detect+0x14>
c00265b9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00265be:	66 90                	xchg   ax,ax

c00265c0 <absolutelyNoChanceInHell>:
c00265c0:	b8 01 00 00 00       	mov    eax,0x1
c00265c5:	0f a2                	cpuid  
c00265c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00265cd:	74 06                	je     c00265d5 <sseDetect.noSSE>
c00265cf:	b8 01 00 00 00       	mov    eax,0x1
c00265d4:	c3                   	ret    

c00265d5 <sseDetect.noSSE>:
c00265d5:	31 c0                	xor    eax,eax
c00265d7:	c3                   	ret    

c00265d8 <sseSave>:
c00265d8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00265dd:	c3                   	ret    

c00265de <sseLoad>:
c00265de:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00265e3:	c3                   	ret    

c00265e4 <sseInit>:
c00265e4:	e8 43 00 00 00       	call   c002662c <x87Init>
c00265e9:	0f 20 e0             	mov    eax,cr4
c00265ec:	66 0d 00 06          	or     ax,0x600
c00265f0:	0f 22 e0             	mov    cr4,eax
c00265f3:	c3                   	ret    

c00265f4 <sseClose>:
c00265f4:	c3                   	ret    
c00265f5:	66 90                	xchg   ax,ax
c00265f7:	66 90                	xchg   ax,ax
c00265f9:	66 90                	xchg   ax,ax
c00265fb:	66 90                	xchg   ax,ax
c00265fd:	66 90                	xchg   ax,ax
c00265ff:	90                   	nop

c0026600 <value_37F>:
c0026600:	7f 03                	jg     c0026605 <value_37A+0x1>

c0026602 <value_37E>:
c0026602:	7e 03                	jle    c0026607 <x87Detect+0x1>

c0026604 <value_37A>:
c0026604:	7a 03                	jp     c0026609 <x87Detect+0x3>

c0026606 <x87Detect>:
c0026606:	b8 01 00 00 00       	mov    eax,0x1
c002660b:	0f a2                	cpuid  
c002660d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026613:	74 06                	je     c002661b <x87Detect.nox87>
c0026615:	b8 01 00 00 00       	mov    eax,0x1
c002661a:	c3                   	ret    

c002661b <x87Detect.nox87>:
c002661b:	b8 00 00 00 00       	mov    eax,0x0
c0026620:	c3                   	ret    

c0026621 <x87Save>:
c0026621:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026626:	c3                   	ret    

c0026627 <x87Load>:
c0026627:	dd 64 24 08          	frstor [esp+0x8]
c002662b:	c3                   	ret    

c002662c <x87Init>:
c002662c:	9b db e3             	finit  
c002662f:	0f 20 c0             	mov    eax,cr0
c0026632:	66 25 fb ff          	and    ax,0xfffb
c0026636:	66 0d 22 00          	or     ax,0x22
c002663a:	0f 22 c0             	mov    cr0,eax
c002663d:	0f 06                	clts   
c002663f:	d9 2d 04 66 02 c0    	fldcw  WORD PTR ds:0xc0026604
c0026645:	c3                   	ret    

c0026646 <x87Close>:
c0026646:	c3                   	ret    
c0026647:	90                   	nop

c0026648 <__do_global_ctors_aux>:
c0026648:	a1 8c 91 02 c0       	mov    eax,ds:0xc002918c
c002664d:	83 f8 ff             	cmp    eax,0xffffffff
c0026650:	74 1a                	je     c002666c <__do_global_ctors_aux+0x24>
c0026652:	55                   	push   ebp
c0026653:	89 e5                	mov    ebp,esp
c0026655:	53                   	push   ebx
c0026656:	52                   	push   edx
c0026657:	bb 8c 91 02 c0       	mov    ebx,0xc002918c
c002665c:	ff d0                	call   eax
c002665e:	83 eb 04             	sub    ebx,0x4
c0026661:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026663:	83 f8 ff             	cmp    eax,0xffffffff
c0026666:	75 f4                	jne    c002665c <__do_global_ctors_aux+0x14>
c0026668:	58                   	pop    eax
c0026669:	5b                   	pop    ebx
c002666a:	5d                   	pop    ebp
c002666b:	c3                   	ret    
c002666c:	c3                   	ret    
c002666d:	66 90                	xchg   ax,ax
c002666f:	90                   	nop

c0026670 <__divdi3>:
c0026670:	55                   	push   ebp
c0026671:	57                   	push   edi
c0026672:	56                   	push   esi
c0026673:	53                   	push   ebx
c0026674:	83 ec 1c             	sub    esp,0x1c
c0026677:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002667b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002667f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026682:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026686:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002668a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002668e:	85 db                	test   ebx,ebx
c0026690:	0f 88 8e 00 00 00    	js     c0026724 <__divdi3+0xb4>
c0026696:	89 dd                	mov    ebp,ebx
c0026698:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00266a0:	89 d3                	mov    ebx,edx
c00266a2:	85 d2                	test   edx,edx
c00266a4:	79 0d                	jns    c00266b3 <__divdi3+0x43>
c00266a6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00266aa:	f7 d8                	neg    eax
c00266ac:	83 d2 00             	adc    edx,0x0
c00266af:	f7 da                	neg    edx
c00266b1:	89 d3                	mov    ebx,edx
c00266b3:	89 c7                	mov    edi,eax
c00266b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00266b8:	85 db                	test   ebx,ebx
c00266ba:	75 48                	jne    c0026704 <__divdi3+0x94>
c00266bc:	39 ef                	cmp    edi,ebp
c00266be:	76 24                	jbe    c00266e4 <__divdi3+0x74>
c00266c0:	89 ea                	mov    edx,ebp
c00266c2:	f7 f7                	div    edi
c00266c4:	89 c1                	mov    ecx,eax
c00266c6:	31 f6                	xor    esi,esi
c00266c8:	89 c8                	mov    eax,ecx
c00266ca:	89 f2                	mov    edx,esi
c00266cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00266d0:	85 c9                	test   ecx,ecx
c00266d2:	74 07                	je     c00266db <__divdi3+0x6b>
c00266d4:	f7 d8                	neg    eax
c00266d6:	83 d2 00             	adc    edx,0x0
c00266d9:	f7 da                	neg    edx
c00266db:	83 c4 1c             	add    esp,0x1c
c00266de:	5b                   	pop    ebx
c00266df:	5e                   	pop    esi
c00266e0:	5f                   	pop    edi
c00266e1:	5d                   	pop    ebp
c00266e2:	c3                   	ret    
c00266e3:	90                   	nop
c00266e4:	85 ff                	test   edi,edi
c00266e6:	75 0b                	jne    c00266f3 <__divdi3+0x83>
c00266e8:	b8 01 00 00 00       	mov    eax,0x1
c00266ed:	31 d2                	xor    edx,edx
c00266ef:	f7 f3                	div    ebx
c00266f1:	89 c7                	mov    edi,eax
c00266f3:	31 d2                	xor    edx,edx
c00266f5:	89 e8                	mov    eax,ebp
c00266f7:	f7 f7                	div    edi
c00266f9:	89 c6                	mov    esi,eax
c00266fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00266fe:	f7 f7                	div    edi
c0026700:	89 c1                	mov    ecx,eax
c0026702:	eb c4                	jmp    c00266c8 <__divdi3+0x58>
c0026704:	39 eb                	cmp    ebx,ebp
c0026706:	77 3c                	ja     c0026744 <__divdi3+0xd4>
c0026708:	0f bd f3             	bsr    esi,ebx
c002670b:	83 f6 1f             	xor    esi,0x1f
c002670e:	75 40                	jne    c0026750 <__divdi3+0xe0>
c0026710:	39 eb                	cmp    ebx,ebp
c0026712:	72 09                	jb     c002671d <__divdi3+0xad>
c0026714:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026717:	0f 87 97 00 00 00    	ja     c00267b4 <__divdi3+0x144>
c002671d:	b9 01 00 00 00       	mov    ecx,0x1
c0026722:	eb a4                	jmp    c00266c8 <__divdi3+0x58>
c0026724:	f7 d9                	neg    ecx
c0026726:	83 d3 00             	adc    ebx,0x0
c0026729:	f7 db                	neg    ebx
c002672b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002672e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026732:	89 dd                	mov    ebp,ebx
c0026734:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002673c:	e9 5f ff ff ff       	jmp    c00266a0 <__divdi3+0x30>
c0026741:	8d 76 00             	lea    esi,[esi+0x0]
c0026744:	31 f6                	xor    esi,esi
c0026746:	31 c9                	xor    ecx,ecx
c0026748:	e9 7b ff ff ff       	jmp    c00266c8 <__divdi3+0x58>
c002674d:	8d 76 00             	lea    esi,[esi+0x0]
c0026750:	b8 20 00 00 00       	mov    eax,0x20
c0026755:	29 f0                	sub    eax,esi
c0026757:	89 f1                	mov    ecx,esi
c0026759:	d3 e3                	shl    ebx,cl
c002675b:	89 fa                	mov    edx,edi
c002675d:	88 c1                	mov    cl,al
c002675f:	d3 ea                	shr    edx,cl
c0026761:	09 da                	or     edx,ebx
c0026763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026767:	89 f1                	mov    ecx,esi
c0026769:	d3 e7                	shl    edi,cl
c002676b:	89 eb                	mov    ebx,ebp
c002676d:	88 c1                	mov    cl,al
c002676f:	d3 eb                	shr    ebx,cl
c0026771:	89 f1                	mov    ecx,esi
c0026773:	d3 e5                	shl    ebp,cl
c0026775:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026778:	88 c1                	mov    cl,al
c002677a:	d3 ea                	shr    edx,cl
c002677c:	09 d5                	or     ebp,edx
c002677e:	89 e8                	mov    eax,ebp
c0026780:	89 da                	mov    edx,ebx
c0026782:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026786:	89 d3                	mov    ebx,edx
c0026788:	89 c5                	mov    ebp,eax
c002678a:	f7 e7                	mul    edi
c002678c:	39 d3                	cmp    ebx,edx
c002678e:	72 18                	jb     c00267a8 <__divdi3+0x138>
c0026790:	74 0a                	je     c002679c <__divdi3+0x12c>
c0026792:	89 e9                	mov    ecx,ebp
c0026794:	31 f6                	xor    esi,esi
c0026796:	e9 2d ff ff ff       	jmp    c00266c8 <__divdi3+0x58>
c002679b:	90                   	nop
c002679c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002679f:	89 f1                	mov    ecx,esi
c00267a1:	d3 e7                	shl    edi,cl
c00267a3:	39 c7                	cmp    edi,eax
c00267a5:	73 eb                	jae    c0026792 <__divdi3+0x122>
c00267a7:	90                   	nop
c00267a8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00267ab:	31 f6                	xor    esi,esi
c00267ad:	e9 16 ff ff ff       	jmp    c00266c8 <__divdi3+0x58>
c00267b2:	66 90                	xchg   ax,ax
c00267b4:	31 c9                	xor    ecx,ecx
c00267b6:	e9 0d ff ff ff       	jmp    c00266c8 <__divdi3+0x58>
c00267bb:	90                   	nop

c00267bc <__moddi3>:
c00267bc:	55                   	push   ebp
c00267bd:	57                   	push   edi
c00267be:	56                   	push   esi
c00267bf:	53                   	push   ebx
c00267c0:	83 ec 2c             	sub    esp,0x2c
c00267c3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00267c7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00267cb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00267cf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00267d3:	85 db                	test   ebx,ebx
c00267d5:	0f 88 85 00 00 00    	js     c0026860 <__moddi3+0xa4>
c00267db:	89 de                	mov    esi,ebx
c00267dd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00267e5:	89 d7                	mov    edi,edx
c00267e7:	85 d2                	test   edx,edx
c00267e9:	79 09                	jns    c00267f4 <__moddi3+0x38>
c00267eb:	f7 d8                	neg    eax
c00267ed:	83 d2 00             	adc    edx,0x0
c00267f0:	f7 da                	neg    edx
c00267f2:	89 d7                	mov    edi,edx
c00267f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00267f8:	89 cd                	mov    ebp,ecx
c00267fa:	85 ff                	test   edi,edi
c00267fc:	75 52                	jne    c0026850 <__moddi3+0x94>
c00267fe:	89 c3                	mov    ebx,eax
c0026800:	39 f0                	cmp    eax,esi
c0026802:	76 24                	jbe    c0026828 <__moddi3+0x6c>
c0026804:	89 c8                	mov    eax,ecx
c0026806:	89 f2                	mov    edx,esi
c0026808:	f7 f3                	div    ebx
c002680a:	89 d6                	mov    esi,edx
c002680c:	89 f0                	mov    eax,esi
c002680e:	31 d2                	xor    edx,edx
c0026810:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026814:	85 c9                	test   ecx,ecx
c0026816:	74 07                	je     c002681f <__moddi3+0x63>
c0026818:	f7 d8                	neg    eax
c002681a:	83 d2 00             	adc    edx,0x0
c002681d:	f7 da                	neg    edx
c002681f:	83 c4 2c             	add    esp,0x2c
c0026822:	5b                   	pop    ebx
c0026823:	5e                   	pop    esi
c0026824:	5f                   	pop    edi
c0026825:	5d                   	pop    ebp
c0026826:	c3                   	ret    
c0026827:	90                   	nop
c0026828:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002682c:	85 db                	test   ebx,ebx
c002682e:	75 0d                	jne    c002683d <__moddi3+0x81>
c0026830:	b8 01 00 00 00       	mov    eax,0x1
c0026835:	31 d2                	xor    edx,edx
c0026837:	f7 f7                	div    edi
c0026839:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002683d:	89 f0                	mov    eax,esi
c002683f:	31 d2                	xor    edx,edx
c0026841:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026845:	f7 f7                	div    edi
c0026847:	89 e8                	mov    eax,ebp
c0026849:	f7 f7                	div    edi
c002684b:	89 d6                	mov    esi,edx
c002684d:	eb bd                	jmp    c002680c <__moddi3+0x50>
c002684f:	90                   	nop
c0026850:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026854:	39 f7                	cmp    edi,esi
c0026856:	76 20                	jbe    c0026878 <__moddi3+0xbc>
c0026858:	89 c8                	mov    eax,ecx
c002685a:	89 f2                	mov    edx,esi
c002685c:	eb b2                	jmp    c0026810 <__moddi3+0x54>
c002685e:	66 90                	xchg   ax,ax
c0026860:	f7 d9                	neg    ecx
c0026862:	83 d3 00             	adc    ebx,0x0
c0026865:	f7 db                	neg    ebx
c0026867:	89 de                	mov    esi,ebx
c0026869:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026871:	e9 6f ff ff ff       	jmp    c00267e5 <__moddi3+0x29>
c0026876:	66 90                	xchg   ax,ax
c0026878:	0f bd c7             	bsr    eax,edi
c002687b:	83 f0 1f             	xor    eax,0x1f
c002687e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026882:	75 24                	jne    c00268a8 <__moddi3+0xec>
c0026884:	39 f7                	cmp    edi,esi
c0026886:	72 06                	jb     c002688e <__moddi3+0xd2>
c0026888:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002688c:	77 0c                	ja     c002689a <__moddi3+0xde>
c002688e:	89 e9                	mov    ecx,ebp
c0026890:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026894:	19 fe                	sbb    esi,edi
c0026896:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002689a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002689e:	89 f2                	mov    edx,esi
c00268a0:	e9 6b ff ff ff       	jmp    c0026810 <__moddi3+0x54>
c00268a5:	8d 76 00             	lea    esi,[esi+0x0]
c00268a8:	b8 20 00 00 00       	mov    eax,0x20
c00268ad:	89 c2                	mov    edx,eax
c00268af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00268b3:	29 da                	sub    edx,ebx
c00268b5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00268b9:	88 d9                	mov    cl,bl
c00268bb:	d3 e7                	shl    edi,cl
c00268bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00268c1:	88 d1                	mov    cl,dl
c00268c3:	d3 e8                	shr    eax,cl
c00268c5:	09 c7                	or     edi,eax
c00268c7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00268cb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268cf:	89 d8                	mov    eax,ebx
c00268d1:	88 d9                	mov    cl,bl
c00268d3:	d3 e7                	shl    edi,cl
c00268d5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00268d9:	89 f3                	mov    ebx,esi
c00268db:	88 d1                	mov    cl,dl
c00268dd:	d3 eb                	shr    ebx,cl
c00268df:	89 c7                	mov    edi,eax
c00268e1:	88 c1                	mov    cl,al
c00268e3:	d3 e6                	shl    esi,cl
c00268e5:	89 e8                	mov    eax,ebp
c00268e7:	88 d1                	mov    cl,dl
c00268e9:	d3 e8                	shr    eax,cl
c00268eb:	09 f0                	or     eax,esi
c00268ed:	89 f9                	mov    ecx,edi
c00268ef:	d3 e5                	shl    ebp,cl
c00268f1:	89 da                	mov    edx,ebx
c00268f3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00268f7:	89 d3                	mov    ebx,edx
c00268f9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00268fd:	89 c6                	mov    esi,eax
c00268ff:	89 d1                	mov    ecx,edx
c0026901:	39 d3                	cmp    ebx,edx
c0026903:	72 27                	jb     c002692c <__moddi3+0x170>
c0026905:	74 21                	je     c0026928 <__moddi3+0x16c>
c0026907:	29 f5                	sub    ebp,esi
c0026909:	19 cb                	sbb    ebx,ecx
c002690b:	89 de                	mov    esi,ebx
c002690d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026911:	d3 e6                	shl    esi,cl
c0026913:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026917:	89 f9                	mov    ecx,edi
c0026919:	d3 ed                	shr    ebp,cl
c002691b:	09 ee                	or     esi,ebp
c002691d:	89 f0                	mov    eax,esi
c002691f:	d3 eb                	shr    ebx,cl
c0026921:	89 da                	mov    edx,ebx
c0026923:	e9 e8 fe ff ff       	jmp    c0026810 <__moddi3+0x54>
c0026928:	39 c5                	cmp    ebp,eax
c002692a:	73 db                	jae    c0026907 <__moddi3+0x14b>
c002692c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026930:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026934:	89 d1                	mov    ecx,edx
c0026936:	89 c6                	mov    esi,eax
c0026938:	eb cd                	jmp    c0026907 <__moddi3+0x14b>
c002693a:	66 90                	xchg   ax,ax

c002693c <__udivdi3>:
c002693c:	55                   	push   ebp
c002693d:	57                   	push   edi
c002693e:	56                   	push   esi
c002693f:	53                   	push   ebx
c0026940:	83 ec 1c             	sub    esp,0x1c
c0026943:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026947:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002694b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002694f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026953:	85 d2                	test   edx,edx
c0026955:	75 41                	jne    c0026998 <__udivdi3+0x5c>
c0026957:	39 f7                	cmp    edi,esi
c0026959:	76 15                	jbe    c0026970 <__udivdi3+0x34>
c002695b:	89 e8                	mov    eax,ebp
c002695d:	89 f2                	mov    edx,esi
c002695f:	f7 f7                	div    edi
c0026961:	31 db                	xor    ebx,ebx
c0026963:	89 da                	mov    edx,ebx
c0026965:	83 c4 1c             	add    esp,0x1c
c0026968:	5b                   	pop    ebx
c0026969:	5e                   	pop    esi
c002696a:	5f                   	pop    edi
c002696b:	5d                   	pop    ebp
c002696c:	c3                   	ret    
c002696d:	8d 76 00             	lea    esi,[esi+0x0]
c0026970:	89 f9                	mov    ecx,edi
c0026972:	85 ff                	test   edi,edi
c0026974:	75 0b                	jne    c0026981 <__udivdi3+0x45>
c0026976:	b8 01 00 00 00       	mov    eax,0x1
c002697b:	31 d2                	xor    edx,edx
c002697d:	f7 f7                	div    edi
c002697f:	89 c1                	mov    ecx,eax
c0026981:	31 d2                	xor    edx,edx
c0026983:	89 f0                	mov    eax,esi
c0026985:	f7 f1                	div    ecx
c0026987:	89 c3                	mov    ebx,eax
c0026989:	89 e8                	mov    eax,ebp
c002698b:	f7 f1                	div    ecx
c002698d:	89 da                	mov    edx,ebx
c002698f:	83 c4 1c             	add    esp,0x1c
c0026992:	5b                   	pop    ebx
c0026993:	5e                   	pop    esi
c0026994:	5f                   	pop    edi
c0026995:	5d                   	pop    ebp
c0026996:	c3                   	ret    
c0026997:	90                   	nop
c0026998:	39 f2                	cmp    edx,esi
c002699a:	77 1c                	ja     c00269b8 <__udivdi3+0x7c>
c002699c:	0f bd da             	bsr    ebx,edx
c002699f:	83 f3 1f             	xor    ebx,0x1f
c00269a2:	75 24                	jne    c00269c8 <__udivdi3+0x8c>
c00269a4:	39 f2                	cmp    edx,esi
c00269a6:	72 08                	jb     c00269b0 <__udivdi3+0x74>
c00269a8:	39 ef                	cmp    edi,ebp
c00269aa:	0f 87 84 00 00 00    	ja     c0026a34 <__udivdi3+0xf8>
c00269b0:	b8 01 00 00 00       	mov    eax,0x1
c00269b5:	eb ac                	jmp    c0026963 <__udivdi3+0x27>
c00269b7:	90                   	nop
c00269b8:	31 db                	xor    ebx,ebx
c00269ba:	31 c0                	xor    eax,eax
c00269bc:	89 da                	mov    edx,ebx
c00269be:	83 c4 1c             	add    esp,0x1c
c00269c1:	5b                   	pop    ebx
c00269c2:	5e                   	pop    esi
c00269c3:	5f                   	pop    edi
c00269c4:	5d                   	pop    ebp
c00269c5:	c3                   	ret    
c00269c6:	66 90                	xchg   ax,ax
c00269c8:	b8 20 00 00 00       	mov    eax,0x20
c00269cd:	29 d8                	sub    eax,ebx
c00269cf:	88 d9                	mov    cl,bl
c00269d1:	d3 e2                	shl    edx,cl
c00269d3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00269d7:	89 fa                	mov    edx,edi
c00269d9:	88 c1                	mov    cl,al
c00269db:	d3 ea                	shr    edx,cl
c00269dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00269e1:	09 d1                	or     ecx,edx
c00269e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00269e7:	88 d9                	mov    cl,bl
c00269e9:	d3 e7                	shl    edi,cl
c00269eb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00269ef:	89 f7                	mov    edi,esi
c00269f1:	88 c1                	mov    cl,al
c00269f3:	d3 ef                	shr    edi,cl
c00269f5:	88 d9                	mov    cl,bl
c00269f7:	d3 e6                	shl    esi,cl
c00269f9:	89 ea                	mov    edx,ebp
c00269fb:	88 c1                	mov    cl,al
c00269fd:	d3 ea                	shr    edx,cl
c00269ff:	09 d6                	or     esi,edx
c0026a01:	89 f0                	mov    eax,esi
c0026a03:	89 fa                	mov    edx,edi
c0026a05:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a09:	89 d7                	mov    edi,edx
c0026a0b:	89 c6                	mov    esi,eax
c0026a0d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a11:	39 d7                	cmp    edi,edx
c0026a13:	72 13                	jb     c0026a28 <__udivdi3+0xec>
c0026a15:	74 09                	je     c0026a20 <__udivdi3+0xe4>
c0026a17:	89 f0                	mov    eax,esi
c0026a19:	31 db                	xor    ebx,ebx
c0026a1b:	e9 43 ff ff ff       	jmp    c0026963 <__udivdi3+0x27>
c0026a20:	88 d9                	mov    cl,bl
c0026a22:	d3 e5                	shl    ebp,cl
c0026a24:	39 c5                	cmp    ebp,eax
c0026a26:	73 ef                	jae    c0026a17 <__udivdi3+0xdb>
c0026a28:	8d 46 ff             	lea    eax,[esi-0x1]
c0026a2b:	31 db                	xor    ebx,ebx
c0026a2d:	e9 31 ff ff ff       	jmp    c0026963 <__udivdi3+0x27>
c0026a32:	66 90                	xchg   ax,ax
c0026a34:	31 c0                	xor    eax,eax
c0026a36:	e9 28 ff ff ff       	jmp    c0026963 <__udivdi3+0x27>
c0026a3b:	90                   	nop

c0026a3c <__umoddi3>:
c0026a3c:	55                   	push   ebp
c0026a3d:	57                   	push   edi
c0026a3e:	56                   	push   esi
c0026a3f:	53                   	push   ebx
c0026a40:	83 ec 1c             	sub    esp,0x1c
c0026a43:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026a47:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026a4b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026a53:	89 da                	mov    edx,ebx
c0026a55:	85 c0                	test   eax,eax
c0026a57:	75 37                	jne    c0026a90 <__umoddi3+0x54>
c0026a59:	39 df                	cmp    edi,ebx
c0026a5b:	76 13                	jbe    c0026a70 <__umoddi3+0x34>
c0026a5d:	89 f0                	mov    eax,esi
c0026a5f:	f7 f7                	div    edi
c0026a61:	89 d0                	mov    eax,edx
c0026a63:	31 d2                	xor    edx,edx
c0026a65:	83 c4 1c             	add    esp,0x1c
c0026a68:	5b                   	pop    ebx
c0026a69:	5e                   	pop    esi
c0026a6a:	5f                   	pop    edi
c0026a6b:	5d                   	pop    ebp
c0026a6c:	c3                   	ret    
c0026a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0026a70:	89 fd                	mov    ebp,edi
c0026a72:	85 ff                	test   edi,edi
c0026a74:	75 0b                	jne    c0026a81 <__umoddi3+0x45>
c0026a76:	b8 01 00 00 00       	mov    eax,0x1
c0026a7b:	31 d2                	xor    edx,edx
c0026a7d:	f7 f7                	div    edi
c0026a7f:	89 c5                	mov    ebp,eax
c0026a81:	89 d8                	mov    eax,ebx
c0026a83:	31 d2                	xor    edx,edx
c0026a85:	f7 f5                	div    ebp
c0026a87:	89 f0                	mov    eax,esi
c0026a89:	f7 f5                	div    ebp
c0026a8b:	89 d0                	mov    eax,edx
c0026a8d:	eb d4                	jmp    c0026a63 <__umoddi3+0x27>
c0026a8f:	90                   	nop
c0026a90:	89 f1                	mov    ecx,esi
c0026a92:	39 d8                	cmp    eax,ebx
c0026a94:	76 0a                	jbe    c0026aa0 <__umoddi3+0x64>
c0026a96:	89 f0                	mov    eax,esi
c0026a98:	83 c4 1c             	add    esp,0x1c
c0026a9b:	5b                   	pop    ebx
c0026a9c:	5e                   	pop    esi
c0026a9d:	5f                   	pop    edi
c0026a9e:	5d                   	pop    ebp
c0026a9f:	c3                   	ret    
c0026aa0:	0f bd e8             	bsr    ebp,eax
c0026aa3:	83 f5 1f             	xor    ebp,0x1f
c0026aa6:	75 1c                	jne    c0026ac4 <__umoddi3+0x88>
c0026aa8:	39 d8                	cmp    eax,ebx
c0026aaa:	72 04                	jb     c0026ab0 <__umoddi3+0x74>
c0026aac:	39 f7                	cmp    edi,esi
c0026aae:	77 08                	ja     c0026ab8 <__umoddi3+0x7c>
c0026ab0:	89 da                	mov    edx,ebx
c0026ab2:	29 fe                	sub    esi,edi
c0026ab4:	19 c2                	sbb    edx,eax
c0026ab6:	89 f1                	mov    ecx,esi
c0026ab8:	89 c8                	mov    eax,ecx
c0026aba:	83 c4 1c             	add    esp,0x1c
c0026abd:	5b                   	pop    ebx
c0026abe:	5e                   	pop    esi
c0026abf:	5f                   	pop    edi
c0026ac0:	5d                   	pop    ebp
c0026ac1:	c3                   	ret    
c0026ac2:	66 90                	xchg   ax,ax
c0026ac4:	ba 20 00 00 00       	mov    edx,0x20
c0026ac9:	29 ea                	sub    edx,ebp
c0026acb:	89 e9                	mov    ecx,ebp
c0026acd:	d3 e0                	shl    eax,cl
c0026acf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026ad3:	89 f8                	mov    eax,edi
c0026ad5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026ad9:	88 d1                	mov    cl,dl
c0026adb:	d3 e8                	shr    eax,cl
c0026add:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026ae1:	09 c1                	or     ecx,eax
c0026ae3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026ae7:	89 e9                	mov    ecx,ebp
c0026ae9:	d3 e7                	shl    edi,cl
c0026aeb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026aef:	89 d8                	mov    eax,ebx
c0026af1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026af5:	88 d1                	mov    cl,dl
c0026af7:	d3 e8                	shr    eax,cl
c0026af9:	89 c7                	mov    edi,eax
c0026afb:	89 e9                	mov    ecx,ebp
c0026afd:	d3 e3                	shl    ebx,cl
c0026aff:	89 f0                	mov    eax,esi
c0026b01:	88 d1                	mov    cl,dl
c0026b03:	d3 e8                	shr    eax,cl
c0026b05:	09 d8                	or     eax,ebx
c0026b07:	89 e9                	mov    ecx,ebp
c0026b09:	d3 e6                	shl    esi,cl
c0026b0b:	89 f3                	mov    ebx,esi
c0026b0d:	89 fa                	mov    edx,edi
c0026b0f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b13:	89 d1                	mov    ecx,edx
c0026b15:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b19:	89 c6                	mov    esi,eax
c0026b1b:	89 d7                	mov    edi,edx
c0026b1d:	39 d1                	cmp    ecx,edx
c0026b1f:	72 27                	jb     c0026b48 <__umoddi3+0x10c>
c0026b21:	74 21                	je     c0026b44 <__umoddi3+0x108>
c0026b23:	89 ca                	mov    edx,ecx
c0026b25:	29 f3                	sub    ebx,esi
c0026b27:	19 fa                	sbb    edx,edi
c0026b29:	89 d0                	mov    eax,edx
c0026b2b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026b2f:	d3 e0                	shl    eax,cl
c0026b31:	89 e9                	mov    ecx,ebp
c0026b33:	d3 eb                	shr    ebx,cl
c0026b35:	09 d8                	or     eax,ebx
c0026b37:	d3 ea                	shr    edx,cl
c0026b39:	83 c4 1c             	add    esp,0x1c
c0026b3c:	5b                   	pop    ebx
c0026b3d:	5e                   	pop    esi
c0026b3e:	5f                   	pop    edi
c0026b3f:	5d                   	pop    ebp
c0026b40:	c3                   	ret    
c0026b41:	8d 76 00             	lea    esi,[esi+0x0]
c0026b44:	39 c3                	cmp    ebx,eax
c0026b46:	73 db                	jae    c0026b23 <__umoddi3+0xe7>
c0026b48:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026b4c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026b50:	89 d7                	mov    edi,edx
c0026b52:	89 c6                	mov    esi,eax
c0026b54:	eb cd                	jmp    c0026b23 <__umoddi3+0xe7>

c0026b56 <__addsf3>:
c0026b56:	55                   	push   ebp
c0026b57:	89 e5                	mov    ebp,esp
c0026b59:	57                   	push   edi
c0026b5a:	56                   	push   esi
c0026b5b:	53                   	push   ebx
c0026b5c:	83 ec 08             	sub    esp,0x8
c0026b5f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026b62:	89 fa                	mov    edx,edi
c0026b64:	89 f8                	mov    eax,edi
c0026b66:	c1 f8 17             	sar    eax,0x17
c0026b69:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026b6c:	c1 e2 08             	shl    edx,0x8
c0026b6f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026b75:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026b78:	89 de                	mov    esi,ebx
c0026b7a:	c1 fe 17             	sar    esi,0x17
c0026b7d:	c1 e3 08             	shl    ebx,0x8
c0026b80:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026b86:	31 f0                	xor    eax,esi
c0026b88:	0f 88 3b 01 00 00    	js     c0026cc9 <__addsf3+0x173>
c0026b8e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026b91:	29 f1                	sub    ecx,esi
c0026b93:	85 c9                	test   ecx,ecx
c0026b95:	7e 54                	jle    c0026beb <__addsf3+0x95>
c0026b97:	89 f0                	mov    eax,esi
c0026b99:	84 c0                	test   al,al
c0026b9b:	75 10                	jne    c0026bad <__addsf3+0x57>
c0026b9d:	85 db                	test   ebx,ebx
c0026b9f:	0f 84 aa 02 00 00    	je     c0026e4f <__addsf3+0x2f9>
c0026ba5:	49                   	dec    ecx
c0026ba6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026ba9:	74 38                	je     c0026be3 <__addsf3+0x8d>
c0026bab:	eb 13                	jmp    c0026bc0 <__addsf3+0x6a>
c0026bad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026bb0:	f7 d0                	not    eax
c0026bb2:	84 c0                	test   al,al
c0026bb4:	0f 84 95 02 00 00    	je     c0026e4f <__addsf3+0x2f9>
c0026bba:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026bc0:	83 f9 1f             	cmp    ecx,0x1f
c0026bc3:	0f 8f 86 02 00 00    	jg     c0026e4f <__addsf3+0x2f9>
c0026bc9:	89 de                	mov    esi,ebx
c0026bcb:	d3 ee                	shr    esi,cl
c0026bcd:	b8 20 00 00 00       	mov    eax,0x20
c0026bd2:	29 c8                	sub    eax,ecx
c0026bd4:	89 c1                	mov    ecx,eax
c0026bd6:	d3 e3                	shl    ebx,cl
c0026bd8:	31 c0                	xor    eax,eax
c0026bda:	85 db                	test   ebx,ebx
c0026bdc:	0f 95 c0             	setne  al
c0026bdf:	09 f0                	or     eax,esi
c0026be1:	01 d0                	add    eax,edx
c0026be3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026be6:	e9 b6 00 00 00       	jmp    c0026ca1 <__addsf3+0x14b>
c0026beb:	74 5c                	je     c0026c49 <__addsf3+0xf3>
c0026bed:	89 f1                	mov    ecx,esi
c0026bef:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026bf2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026bf5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026bf9:	75 14                	jne    c0026c0f <__addsf3+0xb9>
c0026bfb:	85 d2                	test   edx,edx
c0026bfd:	0f 84 4c 02 00 00    	je     c0026e4f <__addsf3+0x2f9>
c0026c03:	49                   	dec    ecx
c0026c04:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c07:	0f 84 94 00 00 00    	je     c0026ca1 <__addsf3+0x14b>
c0026c0d:	eb 12                	jmp    c0026c21 <__addsf3+0xcb>
c0026c0f:	89 f0                	mov    eax,esi
c0026c11:	f7 d0                	not    eax
c0026c13:	84 c0                	test   al,al
c0026c15:	0f 84 34 02 00 00    	je     c0026e4f <__addsf3+0x2f9>
c0026c1b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026c21:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c24:	83 f9 1f             	cmp    ecx,0x1f
c0026c27:	0f 8f 22 02 00 00    	jg     c0026e4f <__addsf3+0x2f9>
c0026c2d:	89 d7                	mov    edi,edx
c0026c2f:	d3 ef                	shr    edi,cl
c0026c31:	b8 20 00 00 00       	mov    eax,0x20
c0026c36:	29 c8                	sub    eax,ecx
c0026c38:	89 c1                	mov    ecx,eax
c0026c3a:	d3 e2                	shl    edx,cl
c0026c3c:	31 c0                	xor    eax,eax
c0026c3e:	85 d2                	test   edx,edx
c0026c40:	0f 95 c0             	setne  al
c0026c43:	09 f8                	or     eax,edi
c0026c45:	01 d8                	add    eax,ebx
c0026c47:	eb 58                	jmp    c0026ca1 <__addsf3+0x14b>
c0026c49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c4c:	8d 70 01             	lea    esi,[eax+0x1]
c0026c4f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026c55:	75 32                	jne    c0026c89 <__addsf3+0x133>
c0026c57:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026c5b:	75 1f                	jne    c0026c7c <__addsf3+0x126>
c0026c5d:	85 d2                	test   edx,edx
c0026c5f:	0f 84 e0 01 00 00    	je     c0026e45 <__addsf3+0x2ef>
c0026c65:	85 db                	test   ebx,ebx
c0026c67:	0f 84 e2 01 00 00    	je     c0026e4f <__addsf3+0x2f9>
c0026c6d:	89 d0                	mov    eax,edx
c0026c6f:	01 d8                	add    eax,ebx
c0026c71:	0f 89 a9 01 00 00    	jns    c0026e20 <__addsf3+0x2ca>
c0026c77:	e9 9d 01 00 00       	jmp    c0026e19 <__addsf3+0x2c3>
c0026c7c:	85 d2                	test   edx,edx
c0026c7e:	0f 85 cb 01 00 00    	jne    c0026e4f <__addsf3+0x2f9>
c0026c84:	e9 bc 01 00 00       	jmp    c0026e45 <__addsf3+0x2ef>
c0026c89:	31 c0                	xor    eax,eax
c0026c8b:	89 f1                	mov    ecx,esi
c0026c8d:	f7 d1                	not    ecx
c0026c8f:	84 c9                	test   cl,cl
c0026c91:	0f 84 90 01 00 00    	je     c0026e27 <__addsf3+0x2d1>
c0026c97:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c9a:	d1 e8                	shr    eax,1
c0026c9c:	e9 86 01 00 00       	jmp    c0026e27 <__addsf3+0x2d1>
c0026ca1:	85 c0                	test   eax,eax
c0026ca3:	0f 89 7e 01 00 00    	jns    c0026e27 <__addsf3+0x2d1>
c0026ca9:	46                   	inc    esi
c0026caa:	89 f2                	mov    edx,esi
c0026cac:	f7 d2                	not    edx
c0026cae:	84 d2                	test   dl,dl
c0026cb0:	0f 84 6f 01 00 00    	je     c0026e25 <__addsf3+0x2cf>
c0026cb6:	89 c2                	mov    edx,eax
c0026cb8:	83 e2 01             	and    edx,0x1
c0026cbb:	d1 e8                	shr    eax,1
c0026cbd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026cc2:	09 d0                	or     eax,edx
c0026cc4:	e9 5e 01 00 00       	jmp    c0026e27 <__addsf3+0x2d1>
c0026cc9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026ccd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026cd0:	89 f0                	mov    eax,esi
c0026cd2:	0f b6 c0             	movzx  eax,al
c0026cd5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026cd8:	29 c1                	sub    ecx,eax
c0026cda:	85 c9                	test   ecx,ecx
c0026cdc:	7e 55                	jle    c0026d33 <__addsf3+0x1dd>
c0026cde:	85 c0                	test   eax,eax
c0026ce0:	75 11                	jne    c0026cf3 <__addsf3+0x19d>
c0026ce2:	85 db                	test   ebx,ebx
c0026ce4:	0f 84 65 01 00 00    	je     c0026e4f <__addsf3+0x2f9>
c0026cea:	49                   	dec    ecx
c0026ceb:	75 19                	jne    c0026d06 <__addsf3+0x1b0>
c0026ced:	89 d0                	mov    eax,edx
c0026cef:	29 d8                	sub    eax,ebx
c0026cf1:	eb 38                	jmp    c0026d2b <__addsf3+0x1d5>
c0026cf3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cf6:	f7 d0                	not    eax
c0026cf8:	84 c0                	test   al,al
c0026cfa:	0f 84 4f 01 00 00    	je     c0026e4f <__addsf3+0x2f9>
c0026d00:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d06:	83 f9 1f             	cmp    ecx,0x1f
c0026d09:	0f 8f 40 01 00 00    	jg     c0026e4f <__addsf3+0x2f9>
c0026d0f:	89 de                	mov    esi,ebx
c0026d11:	d3 ee                	shr    esi,cl
c0026d13:	b8 20 00 00 00       	mov    eax,0x20
c0026d18:	29 c8                	sub    eax,ecx
c0026d1a:	89 c1                	mov    ecx,eax
c0026d1c:	d3 e3                	shl    ebx,cl
c0026d1e:	31 c0                	xor    eax,eax
c0026d20:	85 db                	test   ebx,ebx
c0026d22:	0f 95 c0             	setne  al
c0026d25:	09 f0                	or     eax,esi
c0026d27:	29 c2                	sub    edx,eax
c0026d29:	89 d0                	mov    eax,edx
c0026d2b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d2e:	e9 af 00 00 00       	jmp    c0026de2 <__addsf3+0x28c>
c0026d33:	74 5c                	je     c0026d91 <__addsf3+0x23b>
c0026d35:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026d38:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d3b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026d3f:	75 14                	jne    c0026d55 <__addsf3+0x1ff>
c0026d41:	85 d2                	test   edx,edx
c0026d43:	0f 84 06 01 00 00    	je     c0026e4f <__addsf3+0x2f9>
c0026d49:	48                   	dec    eax
c0026d4a:	75 1b                	jne    c0026d67 <__addsf3+0x211>
c0026d4c:	89 d8                	mov    eax,ebx
c0026d4e:	29 d0                	sub    eax,edx
c0026d50:	e9 8d 00 00 00       	jmp    c0026de2 <__addsf3+0x28c>
c0026d55:	89 f1                	mov    ecx,esi
c0026d57:	f7 d1                	not    ecx
c0026d59:	84 c9                	test   cl,cl
c0026d5b:	0f 84 ee 00 00 00    	je     c0026e4f <__addsf3+0x2f9>
c0026d61:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d67:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d6a:	83 f8 1f             	cmp    eax,0x1f
c0026d6d:	0f 8f dc 00 00 00    	jg     c0026e4f <__addsf3+0x2f9>
c0026d73:	89 d7                	mov    edi,edx
c0026d75:	88 c1                	mov    cl,al
c0026d77:	d3 ef                	shr    edi,cl
c0026d79:	b9 20 00 00 00       	mov    ecx,0x20
c0026d7e:	29 c1                	sub    ecx,eax
c0026d80:	d3 e2                	shl    edx,cl
c0026d82:	31 c0                	xor    eax,eax
c0026d84:	85 d2                	test   edx,edx
c0026d86:	0f 95 c0             	setne  al
c0026d89:	09 f8                	or     eax,edi
c0026d8b:	29 c3                	sub    ebx,eax
c0026d8d:	89 d8                	mov    eax,ebx
c0026d8f:	eb 51                	jmp    c0026de2 <__addsf3+0x28c>
c0026d91:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d94:	40                   	inc    eax
c0026d95:	a8 fe                	test   al,0xfe
c0026d97:	75 3d                	jne    c0026dd6 <__addsf3+0x280>
c0026d99:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026d9d:	0f 85 a7 00 00 00    	jne    c0026e4a <__addsf3+0x2f4>
c0026da3:	85 d2                	test   edx,edx
c0026da5:	75 12                	jne    c0026db9 <__addsf3+0x263>
c0026da7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026daa:	85 db                	test   ebx,ebx
c0026dac:	0f 85 9d 00 00 00    	jne    c0026e4f <__addsf3+0x2f9>
c0026db2:	31 ff                	xor    edi,edi
c0026db4:	e9 96 00 00 00       	jmp    c0026e4f <__addsf3+0x2f9>
c0026db9:	85 db                	test   ebx,ebx
c0026dbb:	0f 84 8e 00 00 00    	je     c0026e4f <__addsf3+0x2f9>
c0026dc1:	89 d0                	mov    eax,edx
c0026dc3:	29 d8                	sub    eax,ebx
c0026dc5:	79 06                	jns    c0026dcd <__addsf3+0x277>
c0026dc7:	89 d8                	mov    eax,ebx
c0026dc9:	29 d0                	sub    eax,edx
c0026dcb:	eb 5a                	jmp    c0026e27 <__addsf3+0x2d1>
c0026dcd:	bf 00 00 00 00       	mov    edi,0x0
c0026dd2:	74 7b                	je     c0026e4f <__addsf3+0x2f9>
c0026dd4:	eb 4a                	jmp    c0026e20 <__addsf3+0x2ca>
c0026dd6:	89 d0                	mov    eax,edx
c0026dd8:	29 d8                	sub    eax,ebx
c0026dda:	79 12                	jns    c0026dee <__addsf3+0x298>
c0026ddc:	89 d8                	mov    eax,ebx
c0026dde:	29 d0                	sub    eax,edx
c0026de0:	eb 09                	jmp    c0026deb <__addsf3+0x295>
c0026de2:	85 c0                	test   eax,eax
c0026de4:	79 41                	jns    c0026e27 <__addsf3+0x2d1>
c0026de6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026deb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026dee:	31 f6                	xor    esi,esi
c0026df0:	85 c0                	test   eax,eax
c0026df2:	74 33                	je     c0026e27 <__addsf3+0x2d1>
c0026df4:	0f bd c8             	bsr    ecx,eax
c0026df7:	83 f1 1f             	xor    ecx,0x1f
c0026dfa:	d3 e0                	shl    eax,cl
c0026dfc:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026e00:	39 ca                	cmp    edx,ecx
c0026e02:	7f 10                	jg     c0026e14 <__addsf3+0x2be>
c0026e04:	29 d1                	sub    ecx,edx
c0026e06:	41                   	inc    ecx
c0026e07:	d3 e8                	shr    eax,cl
c0026e09:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e0c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026e12:	eb 13                	jmp    c0026e27 <__addsf3+0x2d1>
c0026e14:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e17:	29 ce                	sub    esi,ecx
c0026e19:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e1e:	eb 07                	jmp    c0026e27 <__addsf3+0x2d1>
c0026e20:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e23:	eb 02                	jmp    c0026e27 <__addsf3+0x2d1>
c0026e25:	31 c0                	xor    eax,eax
c0026e27:	89 c2                	mov    edx,eax
c0026e29:	c1 ea 08             	shr    edx,0x8
c0026e2c:	a8 7f                	test   al,0x7f
c0026e2e:	0f 95 c1             	setne  cl
c0026e31:	09 d1                	or     ecx,edx
c0026e33:	83 e1 01             	and    ecx,0x1
c0026e36:	c1 e8 07             	shr    eax,0x7
c0026e39:	21 c8                	and    eax,ecx
c0026e3b:	c1 e6 17             	shl    esi,0x17
c0026e3e:	09 d6                	or     esi,edx
c0026e40:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026e43:	eb 0a                	jmp    c0026e4f <__addsf3+0x2f9>
c0026e45:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e48:	eb 05                	jmp    c0026e4f <__addsf3+0x2f9>
c0026e4a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026e4f:	89 f8                	mov    eax,edi
c0026e51:	5a                   	pop    edx
c0026e52:	59                   	pop    ecx
c0026e53:	5b                   	pop    ebx
c0026e54:	5e                   	pop    esi
c0026e55:	5f                   	pop    edi
c0026e56:	5d                   	pop    ebp
c0026e57:	c3                   	ret    

c0026e58 <__subsf3>:
c0026e58:	55                   	push   ebp
c0026e59:	89 e5                	mov    ebp,esp
c0026e5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e5e:	05 00 00 00 80       	add    eax,0x80000000
c0026e63:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026e66:	5d                   	pop    ebp
c0026e67:	e9 ea fc ff ff       	jmp    c0026b56 <__addsf3>

c0026e6c <__negsf2>:
c0026e6c:	55                   	push   ebp
c0026e6d:	89 e5                	mov    ebp,esp
c0026e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026e72:	05 00 00 00 80       	add    eax,0x80000000
c0026e77:	5d                   	pop    ebp
c0026e78:	c3                   	ret    

c0026e79 <__mulsf3>:
c0026e79:	55                   	push   ebp
c0026e7a:	89 e5                	mov    ebp,esp
c0026e7c:	57                   	push   edi
c0026e7d:	56                   	push   esi
c0026e7e:	53                   	push   ebx
c0026e7f:	83 ec 1c             	sub    esp,0x1c
c0026e82:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026e85:	89 f0                	mov    eax,esi
c0026e87:	89 f1                	mov    ecx,esi
c0026e89:	c1 f9 17             	sar    ecx,0x17
c0026e8c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026e8f:	c1 e0 08             	shl    eax,0x8
c0026e92:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e97:	89 c1                	mov    ecx,eax
c0026e99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e9c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e9f:	89 c7                	mov    edi,eax
c0026ea1:	c1 ff 17             	sar    edi,0x17
c0026ea4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026ea8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026eab:	89 f8                	mov    eax,edi
c0026ead:	0f b6 c0             	movzx  eax,al
c0026eb0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026eb3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026eb7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026eba:	42                   	inc    edx
c0026ebb:	80 e2 fe             	and    dl,0xfe
c0026ebe:	75 7b                	jne    c0026f3b <__mulsf3+0xc2>
c0026ec0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026ec4:	74 54                	je     c0026f1a <__mulsf3+0xa1>
c0026ec6:	85 c9                	test   ecx,ecx
c0026ec8:	0f 85 64 01 00 00    	jne    c0027032 <__mulsf3+0x1b9>
c0026ece:	8d 57 01             	lea    edx,[edi+0x1]
c0026ed1:	80 e2 fe             	and    dl,0xfe
c0026ed4:	75 1f                	jne    c0026ef5 <__mulsf3+0x7c>
c0026ed6:	85 c0                	test   eax,eax
c0026ed8:	b8 00 00 00 00       	mov    eax,0x0
c0026edd:	74 29                	je     c0026f08 <__mulsf3+0x8f>
c0026edf:	53                   	push   ebx
c0026ee0:	53                   	push   ebx
c0026ee1:	50                   	push   eax
c0026ee2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ee5:	e8 96 05 00 00       	call   c0027480 <__nesf2>
c0026eea:	83 c4 10             	add    esp,0x10
c0026eed:	85 c0                	test   eax,eax
c0026eef:	0f 85 3a 01 00 00    	jne    c002702f <__mulsf3+0x1b6>
c0026ef5:	85 ff                	test   edi,edi
c0026ef7:	0f 89 35 01 00 00    	jns    c0027032 <__mulsf3+0x1b9>
c0026efd:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026f03:	e9 2a 01 00 00       	jmp    c0027032 <__mulsf3+0x1b9>
c0026f08:	51                   	push   ecx
c0026f09:	51                   	push   ecx
c0026f0a:	50                   	push   eax
c0026f0b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f0e:	e8 6d 05 00 00       	call   c0027480 <__nesf2>
c0026f13:	83 c4 10             	add    esp,0x10
c0026f16:	85 c0                	test   eax,eax
c0026f18:	eb 15                	jmp    c0026f2f <__mulsf3+0xb6>
c0026f1a:	85 c9                	test   ecx,ecx
c0026f1c:	74 0b                	je     c0026f29 <__mulsf3+0xb0>
c0026f1e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026f21:	01 c9                	add    ecx,ecx
c0026f23:	78 16                	js     c0026f3b <__mulsf3+0xc2>
c0026f25:	89 d3                	mov    ebx,edx
c0026f27:	eb f5                	jmp    c0026f1e <__mulsf3+0xa5>
c0026f29:	89 f8                	mov    eax,edi
c0026f2b:	f7 d0                	not    eax
c0026f2d:	84 c0                	test   al,al
c0026f2f:	75 c4                	jne    c0026ef5 <__mulsf3+0x7c>
c0026f31:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026f36:	e9 f7 00 00 00       	jmp    c0027032 <__mulsf3+0x1b9>
c0026f3b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026f3e:	c1 e6 08             	shl    esi,0x8
c0026f41:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026f47:	8d 57 01             	lea    edx,[edi+0x1]
c0026f4a:	80 e2 fe             	and    dl,0xfe
c0026f4d:	75 63                	jne    c0026fb2 <__mulsf3+0x139>
c0026f4f:	85 c0                	test   eax,eax
c0026f51:	74 2f                	je     c0026f82 <__mulsf3+0x109>
c0026f53:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026f57:	0f 89 d2 00 00 00    	jns    c002702f <__mulsf3+0x1b6>
c0026f5d:	52                   	push   edx
c0026f5e:	52                   	push   edx
c0026f5f:	6a 00                	push   0x0
c0026f61:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f64:	e8 dc 04 00 00       	call   c0027445 <__eqsf2>
c0026f69:	83 c4 10             	add    esp,0x10
c0026f6c:	85 c0                	test   eax,eax
c0026f6e:	0f 85 bb 00 00 00    	jne    c002702f <__mulsf3+0x1b6>
c0026f74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f77:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026f7d:	e9 b0 00 00 00       	jmp    c0027032 <__mulsf3+0x1b9>
c0026f82:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026f85:	50                   	push   eax
c0026f86:	50                   	push   eax
c0026f87:	6a 00                	push   0x0
c0026f89:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f8c:	e8 b4 04 00 00       	call   c0027445 <__eqsf2>
c0026f91:	83 c4 10             	add    esp,0x10
c0026f94:	85 c0                	test   eax,eax
c0026f96:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026f99:	75 0c                	jne    c0026fa7 <__mulsf3+0x12e>
c0026f9b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026f9f:	0f 89 8a 00 00 00    	jns    c002702f <__mulsf3+0x1b6>
c0026fa5:	eb cd                	jmp    c0026f74 <__mulsf3+0xfb>
c0026fa7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026faa:	01 f6                	add    esi,esi
c0026fac:	78 04                	js     c0026fb2 <__mulsf3+0x139>
c0026fae:	89 c3                	mov    ebx,eax
c0026fb0:	eb f5                	jmp    c0026fa7 <__mulsf3+0x12e>
c0026fb2:	89 c8                	mov    eax,ecx
c0026fb4:	0d 00 00 00 80       	or     eax,0x80000000
c0026fb9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026fbf:	f7 e6                	mul    esi
c0026fc1:	85 c0                	test   eax,eax
c0026fc3:	0f 95 c0             	setne  al
c0026fc6:	0f b6 c0             	movzx  eax,al
c0026fc9:	09 c2                	or     edx,eax
c0026fcb:	78 03                	js     c0026fd0 <__mulsf3+0x157>
c0026fcd:	01 d2                	add    edx,edx
c0026fcf:	4b                   	dec    ebx
c0026fd0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026fd6:	7f 22                	jg     c0026ffa <__mulsf3+0x181>
c0026fd8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026fde:	85 db                	test   ebx,ebx
c0026fe0:	7f 23                	jg     c0027005 <__mulsf3+0x18c>
c0026fe2:	83 fb e9             	cmp    ebx,0xffffffe9
c0026fe5:	7c 1a                	jl     c0027001 <__mulsf3+0x188>
c0026fe7:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026fed:	b9 01 00 00 00       	mov    ecx,0x1
c0026ff2:	29 d9                	sub    ecx,ebx
c0026ff4:	d3 ea                	shr    edx,cl
c0026ff6:	31 db                	xor    ebx,ebx
c0026ff8:	eb 0b                	jmp    c0027005 <__mulsf3+0x18c>
c0026ffa:	bb ff 00 00 00       	mov    ebx,0xff
c0026fff:	eb 02                	jmp    c0027003 <__mulsf3+0x18a>
c0027001:	31 db                	xor    ebx,ebx
c0027003:	31 d2                	xor    edx,edx
c0027005:	89 d0                	mov    eax,edx
c0027007:	c1 e8 08             	shr    eax,0x8
c002700a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002700d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027013:	09 fb                	or     ebx,edi
c0027015:	c1 e3 17             	shl    ebx,0x17
c0027018:	09 c3                	or     ebx,eax
c002701a:	f6 c2 7f             	test   dl,0x7f
c002701d:	0f 95 c1             	setne  cl
c0027020:	09 c8                	or     eax,ecx
c0027022:	83 e0 01             	and    eax,0x1
c0027025:	c1 ea 07             	shr    edx,0x7
c0027028:	21 c2                	and    edx,eax
c002702a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002702d:	eb 03                	jmp    c0027032 <__mulsf3+0x1b9>
c002702f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027032:	89 f0                	mov    eax,esi
c0027034:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027037:	5b                   	pop    ebx
c0027038:	5e                   	pop    esi
c0027039:	5f                   	pop    edi
c002703a:	5d                   	pop    ebp
c002703b:	c3                   	ret    

c002703c <__divsf3>:
c002703c:	55                   	push   ebp
c002703d:	89 e5                	mov    ebp,esp
c002703f:	57                   	push   edi
c0027040:	56                   	push   esi
c0027041:	53                   	push   ebx
c0027042:	83 ec 1c             	sub    esp,0x1c
c0027045:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027048:	89 d8                	mov    eax,ebx
c002704a:	89 d9                	mov    ecx,ebx
c002704c:	c1 f9 17             	sar    ecx,0x17
c002704f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027052:	c1 e0 08             	shl    eax,0x8
c0027055:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002705a:	89 c1                	mov    ecx,eax
c002705c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002705f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027062:	89 c7                	mov    edi,eax
c0027064:	c1 ff 17             	sar    edi,0x17
c0027067:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002706b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002706e:	89 f8                	mov    eax,edi
c0027070:	0f b6 c0             	movzx  eax,al
c0027073:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027076:	29 c6                	sub    esi,eax
c0027078:	83 c6 7f             	add    esi,0x7f
c002707b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002707e:	42                   	inc    edx
c002707f:	80 e2 fe             	and    dl,0xfe
c0027082:	0f 85 9c 00 00 00    	jne    c0027124 <__divsf3+0xe8>
c0027088:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002708c:	74 33                	je     c00270c1 <__divsf3+0x85>
c002708e:	85 c9                	test   ecx,ecx
c0027090:	0f 85 c7 01 00 00    	jne    c002725d <__divsf3+0x221>
c0027096:	8d 57 01             	lea    edx,[edi+0x1]
c0027099:	80 e2 fe             	and    dl,0xfe
c002709c:	75 2f                	jne    c00270cd <__divsf3+0x91>
c002709e:	85 c0                	test   eax,eax
c00270a0:	74 2b                	je     c00270cd <__divsf3+0x91>
c00270a2:	51                   	push   ecx
c00270a3:	51                   	push   ecx
c00270a4:	6a 00                	push   0x0
c00270a6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270a9:	e8 d2 03 00 00       	call   c0027480 <__nesf2>
c00270ae:	83 c4 10             	add    esp,0x10
c00270b1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00270b4:	85 c0                	test   eax,eax
c00270b6:	0f 85 a1 01 00 00    	jne    c002725d <__divsf3+0x221>
c00270bc:	e9 92 01 00 00       	jmp    c0027253 <__divsf3+0x217>
c00270c1:	85 c9                	test   ecx,ecx
c00270c3:	75 1b                	jne    c00270e0 <__divsf3+0xa4>
c00270c5:	8d 57 01             	lea    edx,[edi+0x1]
c00270c8:	80 e2 fe             	and    dl,0xfe
c00270cb:	74 1e                	je     c00270eb <__divsf3+0xaf>
c00270cd:	85 ff                	test   edi,edi
c00270cf:	0f 89 88 01 00 00    	jns    c002725d <__divsf3+0x221>
c00270d5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00270db:	e9 7d 01 00 00       	jmp    c002725d <__divsf3+0x221>
c00270e0:	8d 56 ff             	lea    edx,[esi-0x1]
c00270e3:	01 c9                	add    ecx,ecx
c00270e5:	78 3d                	js     c0027124 <__divsf3+0xe8>
c00270e7:	89 d6                	mov    esi,edx
c00270e9:	eb f5                	jmp    c00270e0 <__divsf3+0xa4>
c00270eb:	85 c0                	test   eax,eax
c00270ed:	b8 00 00 00 00       	mov    eax,0x0
c00270f2:	74 18                	je     c002710c <__divsf3+0xd0>
c00270f4:	52                   	push   edx
c00270f5:	52                   	push   edx
c00270f6:	50                   	push   eax
c00270f7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270fa:	e8 81 03 00 00       	call   c0027480 <__nesf2>
c00270ff:	83 c4 10             	add    esp,0x10
c0027102:	85 c0                	test   eax,eax
c0027104:	0f 85 50 01 00 00    	jne    c002725a <__divsf3+0x21e>
c002710a:	eb c1                	jmp    c00270cd <__divsf3+0x91>
c002710c:	56                   	push   esi
c002710d:	56                   	push   esi
c002710e:	50                   	push   eax
c002710f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027112:	e8 69 03 00 00       	call   c0027480 <__nesf2>
c0027117:	83 c4 10             	add    esp,0x10
c002711a:	85 c0                	test   eax,eax
c002711c:	0f 84 31 01 00 00    	je     c0027253 <__divsf3+0x217>
c0027122:	eb a9                	jmp    c00270cd <__divsf3+0x91>
c0027124:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027127:	c1 e3 08             	shl    ebx,0x8
c002712a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027130:	8d 57 01             	lea    edx,[edi+0x1]
c0027133:	80 e2 fe             	and    dl,0xfe
c0027136:	75 71                	jne    c00271a9 <__divsf3+0x16d>
c0027138:	85 c0                	test   eax,eax
c002713a:	ba 00 00 00 00       	mov    edx,0x0
c002713f:	74 2f                	je     c0027170 <__divsf3+0x134>
c0027141:	51                   	push   ecx
c0027142:	51                   	push   ecx
c0027143:	52                   	push   edx
c0027144:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027147:	e8 f9 02 00 00       	call   c0027445 <__eqsf2>
c002714c:	83 c4 10             	add    esp,0x10
c002714f:	85 c0                	test   eax,eax
c0027151:	0f 85 03 01 00 00    	jne    c002725a <__divsf3+0x21e>
c0027157:	31 d2                	xor    edx,edx
c0027159:	89 d3                	mov    ebx,edx
c002715b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002715e:	31 f8                	xor    eax,edi
c0027160:	0f 89 f7 00 00 00    	jns    c002725d <__divsf3+0x221>
c0027166:	bb 00 00 00 80       	mov    ebx,0x80000000
c002716b:	e9 ed 00 00 00       	jmp    c002725d <__divsf3+0x221>
c0027170:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027173:	50                   	push   eax
c0027174:	50                   	push   eax
c0027175:	52                   	push   edx
c0027176:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027179:	e8 c7 02 00 00       	call   c0027445 <__eqsf2>
c002717e:	83 c4 10             	add    esp,0x10
c0027181:	85 c0                	test   eax,eax
c0027183:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027186:	75 16                	jne    c002719e <__divsf3+0x162>
c0027188:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002718b:	31 fb                	xor    ebx,edi
c002718d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027193:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027199:	e9 bf 00 00 00       	jmp    c002725d <__divsf3+0x221>
c002719e:	8d 46 01             	lea    eax,[esi+0x1]
c00271a1:	01 db                	add    ebx,ebx
c00271a3:	78 04                	js     c00271a9 <__divsf3+0x16d>
c00271a5:	89 c6                	mov    esi,eax
c00271a7:	eb f5                	jmp    c002719e <__divsf3+0x162>
c00271a9:	89 c8                	mov    eax,ecx
c00271ab:	0d 00 00 00 80       	or     eax,0x80000000
c00271b0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00271b6:	31 d2                	xor    edx,edx
c00271b8:	39 d8                	cmp    eax,ebx
c00271ba:	72 07                	jb     c00271c3 <__divsf3+0x187>
c00271bc:	29 d8                	sub    eax,ebx
c00271be:	ba 01 00 00 00       	mov    edx,0x1
c00271c3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00271ca:	01 d2                	add    edx,edx
c00271cc:	89 c1                	mov    ecx,eax
c00271ce:	01 c0                	add    eax,eax
c00271d0:	85 c9                	test   ecx,ecx
c00271d2:	78 04                	js     c00271d8 <__divsf3+0x19c>
c00271d4:	39 c3                	cmp    ebx,eax
c00271d6:	77 05                	ja     c00271dd <__divsf3+0x1a1>
c00271d8:	29 d8                	sub    eax,ebx
c00271da:	83 ca 01             	or     edx,0x1
c00271dd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00271e0:	75 e8                	jne    c00271ca <__divsf3+0x18e>
c00271e2:	85 c0                	test   eax,eax
c00271e4:	0f 95 c0             	setne  al
c00271e7:	0f b6 c0             	movzx  eax,al
c00271ea:	c1 e2 06             	shl    edx,0x6
c00271ed:	09 c2                	or     edx,eax
c00271ef:	78 03                	js     c00271f4 <__divsf3+0x1b8>
c00271f1:	01 d2                	add    edx,edx
c00271f3:	4e                   	dec    esi
c00271f4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00271fa:	7f 22                	jg     c002721e <__divsf3+0x1e2>
c00271fc:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027202:	85 f6                	test   esi,esi
c0027204:	7f 23                	jg     c0027229 <__divsf3+0x1ed>
c0027206:	83 fe e9             	cmp    esi,0xffffffe9
c0027209:	7c 1a                	jl     c0027225 <__divsf3+0x1e9>
c002720b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027211:	b9 01 00 00 00       	mov    ecx,0x1
c0027216:	29 f1                	sub    ecx,esi
c0027218:	d3 ea                	shr    edx,cl
c002721a:	31 f6                	xor    esi,esi
c002721c:	eb 0b                	jmp    c0027229 <__divsf3+0x1ed>
c002721e:	be ff 00 00 00       	mov    esi,0xff
c0027223:	eb 02                	jmp    c0027227 <__divsf3+0x1eb>
c0027225:	31 f6                	xor    esi,esi
c0027227:	31 d2                	xor    edx,edx
c0027229:	89 d0                	mov    eax,edx
c002722b:	c1 e8 08             	shr    eax,0x8
c002722e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027231:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027237:	09 fe                	or     esi,edi
c0027239:	c1 e6 17             	shl    esi,0x17
c002723c:	09 c6                	or     esi,eax
c002723e:	f6 c2 7f             	test   dl,0x7f
c0027241:	0f 95 c1             	setne  cl
c0027244:	09 c8                	or     eax,ecx
c0027246:	83 e0 01             	and    eax,0x1
c0027249:	c1 ea 07             	shr    edx,0x7
c002724c:	21 c2                	and    edx,eax
c002724e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027251:	eb 0a                	jmp    c002725d <__divsf3+0x221>
c0027253:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027258:	eb 03                	jmp    c002725d <__divsf3+0x221>
c002725a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002725d:	89 d8                	mov    eax,ebx
c002725f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027262:	5b                   	pop    ebx
c0027263:	5e                   	pop    esi
c0027264:	5f                   	pop    edi
c0027265:	5d                   	pop    ebp
c0027266:	c3                   	ret    

c0027267 <__floatsisf>:
c0027267:	55                   	push   ebp
c0027268:	89 e5                	mov    ebp,esp
c002726a:	53                   	push   ebx
c002726b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002726e:	85 d2                	test   edx,edx
c0027270:	7e 2b                	jle    c002729d <__floatsisf+0x36>
c0027272:	0f bd ca             	bsr    ecx,edx
c0027275:	83 f1 1f             	xor    ecx,0x1f
c0027278:	d3 e2                	shl    edx,cl
c002727a:	89 d0                	mov    eax,edx
c002727c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027281:	89 c3                	mov    ebx,eax
c0027283:	c1 eb 08             	shr    ebx,0x8
c0027286:	80 e2 7f             	and    dl,0x7f
c0027289:	0f 95 c2             	setne  dl
c002728c:	09 da                	or     edx,ebx
c002728e:	83 e2 01             	and    edx,0x1
c0027291:	c1 e8 07             	shr    eax,0x7
c0027294:	21 c2                	and    edx,eax
c0027296:	b8 9e 00 00 00       	mov    eax,0x9e
c002729b:	eb 32                	jmp    c00272cf <__floatsisf+0x68>
c002729d:	b8 00 00 00 00       	mov    eax,0x0
c00272a2:	74 34                	je     c00272d8 <__floatsisf+0x71>
c00272a4:	f7 da                	neg    edx
c00272a6:	0f bd ca             	bsr    ecx,edx
c00272a9:	83 f1 1f             	xor    ecx,0x1f
c00272ac:	d3 e2                	shl    edx,cl
c00272ae:	89 d0                	mov    eax,edx
c00272b0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272b5:	89 c3                	mov    ebx,eax
c00272b7:	c1 eb 08             	shr    ebx,0x8
c00272ba:	80 e2 7f             	and    dl,0x7f
c00272bd:	0f 95 c2             	setne  dl
c00272c0:	09 da                	or     edx,ebx
c00272c2:	83 e2 01             	and    edx,0x1
c00272c5:	c1 e8 07             	shr    eax,0x7
c00272c8:	21 c2                	and    edx,eax
c00272ca:	b8 9e 01 00 00       	mov    eax,0x19e
c00272cf:	29 c8                	sub    eax,ecx
c00272d1:	c1 e0 17             	shl    eax,0x17
c00272d4:	09 d8                	or     eax,ebx
c00272d6:	01 d0                	add    eax,edx
c00272d8:	5b                   	pop    ebx
c00272d9:	5d                   	pop    ebp
c00272da:	c3                   	ret    

c00272db <__floatunsisf>:
c00272db:	55                   	push   ebp
c00272dc:	89 e5                	mov    ebp,esp
c00272de:	53                   	push   ebx
c00272df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272e2:	31 c0                	xor    eax,eax
c00272e4:	85 d2                	test   edx,edx
c00272e6:	74 32                	je     c002731a <__floatunsisf+0x3f>
c00272e8:	0f bd ca             	bsr    ecx,edx
c00272eb:	83 f1 1f             	xor    ecx,0x1f
c00272ee:	d3 e2                	shl    edx,cl
c00272f0:	89 d0                	mov    eax,edx
c00272f2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00272f7:	89 c3                	mov    ebx,eax
c00272f9:	c1 eb 08             	shr    ebx,0x8
c00272fc:	80 e2 7f             	and    dl,0x7f
c00272ff:	0f 95 c2             	setne  dl
c0027302:	09 da                	or     edx,ebx
c0027304:	83 e2 01             	and    edx,0x1
c0027307:	c1 e8 07             	shr    eax,0x7
c002730a:	21 c2                	and    edx,eax
c002730c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027311:	29 c8                	sub    eax,ecx
c0027313:	c1 e0 17             	shl    eax,0x17
c0027316:	09 d8                	or     eax,ebx
c0027318:	01 d0                	add    eax,edx
c002731a:	5b                   	pop    ebx
c002731b:	5d                   	pop    ebp
c002731c:	c3                   	ret    

c002731d <__fixsfsi>:
c002731d:	55                   	push   ebp
c002731e:	89 e5                	mov    ebp,esp
c0027320:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027323:	89 d1                	mov    ecx,edx
c0027325:	c1 e1 08             	shl    ecx,0x8
c0027328:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002732e:	c1 fa 17             	sar    edx,0x17
c0027331:	78 1c                	js     c002734f <__fixsfsi+0x32>
c0027333:	83 ea 7f             	sub    edx,0x7f
c0027336:	31 c0                	xor    eax,eax
c0027338:	83 fa 1e             	cmp    edx,0x1e
c002733b:	77 40                	ja     c002737d <__fixsfsi+0x60>
c002733d:	89 c8                	mov    eax,ecx
c002733f:	0d 00 00 00 80       	or     eax,0x80000000
c0027344:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027349:	29 d1                	sub    ecx,edx
c002734b:	d3 e8                	shr    eax,cl
c002734d:	eb 2e                	jmp    c002737d <__fixsfsi+0x60>
c002734f:	31 c0                	xor    eax,eax
c0027351:	81 c2 81 00 00 00    	add    edx,0x81
c0027357:	78 24                	js     c002737d <__fixsfsi+0x60>
c0027359:	83 fa 1e             	cmp    edx,0x1e
c002735c:	7e 09                	jle    c0027367 <__fixsfsi+0x4a>
c002735e:	83 fa 1f             	cmp    edx,0x1f
c0027361:	75 18                	jne    c002737b <__fixsfsi+0x5e>
c0027363:	85 c9                	test   ecx,ecx
c0027365:	75 14                	jne    c002737b <__fixsfsi+0x5e>
c0027367:	89 c8                	mov    eax,ecx
c0027369:	0d 00 00 00 80       	or     eax,0x80000000
c002736e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027373:	29 d1                	sub    ecx,edx
c0027375:	d3 e8                	shr    eax,cl
c0027377:	f7 d8                	neg    eax
c0027379:	eb 02                	jmp    c002737d <__fixsfsi+0x60>
c002737b:	31 c0                	xor    eax,eax
c002737d:	5d                   	pop    ebp
c002737e:	c3                   	ret    

c002737f <__fixunssfsi>:
c002737f:	55                   	push   ebp
c0027380:	89 e5                	mov    ebp,esp
c0027382:	53                   	push   ebx
c0027383:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027386:	89 d3                	mov    ebx,edx
c0027388:	c1 fb 17             	sar    ebx,0x17
c002738b:	83 eb 7f             	sub    ebx,0x7f
c002738e:	31 c0                	xor    eax,eax
c0027390:	83 fb 1f             	cmp    ebx,0x1f
c0027393:	77 18                	ja     c00273ad <__fixunssfsi+0x2e>
c0027395:	89 d0                	mov    eax,edx
c0027397:	c1 e0 08             	shl    eax,0x8
c002739a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002739f:	0d 00 00 00 80       	or     eax,0x80000000
c00273a4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273a9:	29 d9                	sub    ecx,ebx
c00273ab:	d3 e8                	shr    eax,cl
c00273ad:	5b                   	pop    ebx
c00273ae:	5d                   	pop    ebp
c00273af:	c3                   	ret    

c00273b0 <__cmpsf2>:
c00273b0:	55                   	push   ebp
c00273b1:	89 e5                	mov    ebp,esp
c00273b3:	57                   	push   edi
c00273b4:	56                   	push   esi
c00273b5:	53                   	push   ebx
c00273b6:	83 ec 24             	sub    esp,0x24
c00273b9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273bf:	e8 4f 10 00 00       	call   c0028413 <__truncdfsf2>
c00273c4:	5a                   	pop    edx
c00273c5:	59                   	pop    ecx
c00273c6:	89 c3                	mov    ebx,eax
c00273c8:	c1 e8 17             	shr    eax,0x17
c00273cb:	0f b6 f0             	movzx  esi,al
c00273ce:	89 d8                	mov    eax,ebx
c00273d0:	c1 e8 1f             	shr    eax,0x1f
c00273d3:	31 c6                	xor    esi,eax
c00273d5:	c1 e3 08             	shl    ebx,0x8
c00273d8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00273db:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00273de:	e8 30 10 00 00       	call   c0028413 <__truncdfsf2>
c00273e3:	83 c4 10             	add    esp,0x10
c00273e6:	89 c1                	mov    ecx,eax
c00273e8:	c1 e9 17             	shr    ecx,0x17
c00273eb:	0f b6 c9             	movzx  ecx,cl
c00273ee:	89 c7                	mov    edi,eax
c00273f0:	c1 ef 1f             	shr    edi,0x1f
c00273f3:	89 ca                	mov    edx,ecx
c00273f5:	31 fa                	xor    edx,edi
c00273f7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00273fa:	c1 e0 08             	shl    eax,0x8
c00273fd:	89 c2                	mov    edx,eax
c00273ff:	89 d8                	mov    eax,ebx
c0027401:	09 d0                	or     eax,edx
c0027403:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027408:	09 f0                	or     eax,esi
c002740a:	75 08                	jne    c0027414 <__cmpsf2+0x64>
c002740c:	31 c0                	xor    eax,eax
c002740e:	39 f9                	cmp    ecx,edi
c0027410:	75 0c                	jne    c002741e <__cmpsf2+0x6e>
c0027412:	eb 29                	jmp    c002743d <__cmpsf2+0x8d>
c0027414:	b8 01 00 00 00       	mov    eax,0x1
c0027419:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002741c:	7f 1f                	jg     c002743d <__cmpsf2+0x8d>
c002741e:	83 c8 ff             	or     eax,0xffffffff
c0027421:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027424:	7c 17                	jl     c002743d <__cmpsf2+0x8d>
c0027426:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002742c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027432:	b8 01 00 00 00       	mov    eax,0x1
c0027437:	39 d3                	cmp    ebx,edx
c0027439:	77 02                	ja     c002743d <__cmpsf2+0x8d>
c002743b:	19 c0                	sbb    eax,eax
c002743d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027440:	5b                   	pop    ebx
c0027441:	5e                   	pop    esi
c0027442:	5f                   	pop    edi
c0027443:	5d                   	pop    ebp
c0027444:	c3                   	ret    

c0027445 <__eqsf2>:
c0027445:	55                   	push   ebp
c0027446:	89 e5                	mov    ebp,esp
c0027448:	83 ec 24             	sub    esp,0x24
c002744b:	6a 01                	push   0x1
c002744d:	83 ec 0c             	sub    esp,0xc
c0027450:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027453:	e8 df 10 00 00       	call   c0028537 <__extendsfdf2>
c0027458:	83 c4 10             	add    esp,0x10
c002745b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002745e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027461:	52                   	push   edx
c0027462:	50                   	push   eax
c0027463:	50                   	push   eax
c0027464:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027467:	e8 cb 10 00 00       	call   c0028537 <__extendsfdf2>
c002746c:	59                   	pop    ecx
c002746d:	59                   	pop    ecx
c002746e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027471:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027474:	52                   	push   edx
c0027475:	50                   	push   eax
c0027476:	e8 35 ff ff ff       	call   c00273b0 <__cmpsf2>
c002747b:	83 c4 20             	add    esp,0x20
c002747e:	c9                   	leave  
c002747f:	c3                   	ret    

c0027480 <__nesf2>:
c0027480:	eb c3                	jmp    c0027445 <__eqsf2>

c0027482 <__gtsf2>:
c0027482:	55                   	push   ebp
c0027483:	89 e5                	mov    ebp,esp
c0027485:	83 ec 24             	sub    esp,0x24
c0027488:	6a ff                	push   0xffffffff
c002748a:	83 ec 0c             	sub    esp,0xc
c002748d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027490:	e8 a2 10 00 00       	call   c0028537 <__extendsfdf2>
c0027495:	83 c4 10             	add    esp,0x10
c0027498:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002749b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002749e:	52                   	push   edx
c002749f:	50                   	push   eax
c00274a0:	50                   	push   eax
c00274a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274a4:	e8 8e 10 00 00       	call   c0028537 <__extendsfdf2>
c00274a9:	59                   	pop    ecx
c00274aa:	59                   	pop    ecx
c00274ab:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00274ae:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00274b1:	52                   	push   edx
c00274b2:	50                   	push   eax
c00274b3:	e8 f8 fe ff ff       	call   c00273b0 <__cmpsf2>
c00274b8:	83 c4 20             	add    esp,0x20
c00274bb:	c9                   	leave  
c00274bc:	c3                   	ret    

c00274bd <__gesf2>:
c00274bd:	eb c3                	jmp    c0027482 <__gtsf2>

c00274bf <__ltsf2>:
c00274bf:	eb 84                	jmp    c0027445 <__eqsf2>

c00274c1 <__lesf2>:
c00274c1:	eb 82                	jmp    c0027445 <__eqsf2>

c00274c3 <__adddf3>:
c00274c3:	55                   	push   ebp
c00274c4:	89 e5                	mov    ebp,esp
c00274c6:	57                   	push   edi
c00274c7:	56                   	push   esi
c00274c8:	53                   	push   ebx
c00274c9:	83 ec 24             	sub    esp,0x24
c00274cc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00274cf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00274d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00274d5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00274d8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00274db:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00274de:	89 c8                	mov    eax,ecx
c00274e0:	89 ce                	mov    esi,ecx
c00274e2:	c1 fe 14             	sar    esi,0x14
c00274e5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00274e8:	89 fb                	mov    ebx,edi
c00274ea:	89 fa                	mov    edx,edi
c00274ec:	c1 e2 0b             	shl    edx,0xb
c00274ef:	c1 e0 0b             	shl    eax,0xb
c00274f2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00274f7:	c1 eb 15             	shr    ebx,0x15
c00274fa:	09 d8                	or     eax,ebx
c00274fc:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00274ff:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027502:	c1 fe 14             	sar    esi,0x14
c0027505:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027508:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002750b:	89 f3                	mov    ebx,esi
c002750d:	c1 e3 0b             	shl    ebx,0xb
c0027510:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027513:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027516:	c1 e3 0b             	shl    ebx,0xb
c0027519:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002751f:	c1 ee 15             	shr    esi,0x15
c0027522:	09 f3                	or     ebx,esi
c0027524:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027527:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002752a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002752d:	0f 88 5f 02 00 00    	js     c0027792 <__adddf3+0x2cf>
c0027533:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027536:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027539:	85 db                	test   ebx,ebx
c002753b:	0f 8e c7 00 00 00    	jle    c0027608 <__adddf3+0x145>
c0027541:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027548:	75 1a                	jne    c0027564 <__adddf3+0xa1>
c002754a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002754d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027550:	0f 84 b2 05 00 00    	je     c0027b08 <__adddf3+0x645>
c0027556:	4b                   	dec    ebx
c0027557:	75 23                	jne    c002757c <__adddf3+0xb9>
c0027559:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002755c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002755f:	e9 99 00 00 00       	jmp    c00275fd <__adddf3+0x13a>
c0027564:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027567:	f7 d6                	not    esi
c0027569:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002756f:	0f 84 93 05 00 00    	je     c0027b08 <__adddf3+0x645>
c0027575:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002757c:	83 fb 1f             	cmp    ebx,0x1f
c002757f:	7e 42                	jle    c00275c3 <__adddf3+0x100>
c0027581:	83 fb 3f             	cmp    ebx,0x3f
c0027584:	0f 8f 7e 05 00 00    	jg     c0027b08 <__adddf3+0x645>
c002758a:	83 e3 1f             	and    ebx,0x1f
c002758d:	89 d9                	mov    ecx,ebx
c002758f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027592:	d3 ef                	shr    edi,cl
c0027594:	31 db                	xor    ebx,ebx
c0027596:	85 c9                	test   ecx,ecx
c0027598:	74 15                	je     c00275af <__adddf3+0xec>
c002759a:	be 20 00 00 00       	mov    esi,0x20
c002759f:	29 ce                	sub    esi,ecx
c00275a1:	89 f1                	mov    ecx,esi
c00275a3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275a6:	d3 e6                	shl    esi,cl
c00275a8:	31 db                	xor    ebx,ebx
c00275aa:	85 f6                	test   esi,esi
c00275ac:	0f 95 c3             	setne  bl
c00275af:	31 c9                	xor    ecx,ecx
c00275b1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00275b5:	0f 95 c1             	setne  cl
c00275b8:	09 cf                	or     edi,ecx
c00275ba:	09 fb                	or     ebx,edi
c00275bc:	01 da                	add    edx,ebx
c00275be:	83 d0 00             	adc    eax,0x0
c00275c1:	eb 3a                	jmp    c00275fd <__adddf3+0x13a>
c00275c3:	bf 20 00 00 00       	mov    edi,0x20
c00275c8:	29 df                	sub    edi,ebx
c00275ca:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00275cd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275d0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00275d3:	d3 e6                	shl    esi,cl
c00275d5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00275d8:	88 d9                	mov    cl,bl
c00275da:	d3 ef                	shr    edi,cl
c00275dc:	09 fe                	or     esi,edi
c00275de:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275e1:	88 d9                	mov    cl,bl
c00275e3:	d3 ef                	shr    edi,cl
c00275e5:	89 fb                	mov    ebx,edi
c00275e7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00275ea:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00275ed:	d3 e7                	shl    edi,cl
c00275ef:	85 ff                	test   edi,edi
c00275f1:	0f 95 c1             	setne  cl
c00275f4:	0f b6 c9             	movzx  ecx,cl
c00275f7:	09 ce                	or     esi,ecx
c00275f9:	01 f2                	add    edx,esi
c00275fb:	11 d8                	adc    eax,ebx
c00275fd:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027600:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027603:	e9 52 01 00 00       	jmp    c002775a <__adddf3+0x297>
c0027608:	0f 84 d5 00 00 00    	je     c00276e3 <__adddf3+0x220>
c002760e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027611:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027614:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027617:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002761a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027621:	75 20                	jne    c0027643 <__adddf3+0x180>
c0027623:	89 d6                	mov    esi,edx
c0027625:	09 c6                	or     esi,eax
c0027627:	0f 84 db 04 00 00    	je     c0027b08 <__adddf3+0x645>
c002762d:	4b                   	dec    ebx
c002762e:	75 29                	jne    c0027659 <__adddf3+0x196>
c0027630:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027633:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027636:	01 d1                	add    ecx,edx
c0027638:	11 c6                	adc    esi,eax
c002763a:	89 f0                	mov    eax,esi
c002763c:	89 ca                	mov    edx,ecx
c002763e:	e9 17 01 00 00       	jmp    c002775a <__adddf3+0x297>
c0027643:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027646:	f7 d6                	not    esi
c0027648:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002764e:	0f 84 b4 04 00 00    	je     c0027b08 <__adddf3+0x645>
c0027654:	0d 00 00 00 80       	or     eax,0x80000000
c0027659:	83 fb 1f             	cmp    ebx,0x1f
c002765c:	7e 48                	jle    c00276a6 <__adddf3+0x1e3>
c002765e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027661:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027664:	83 fb 3f             	cmp    ebx,0x3f
c0027667:	0f 8f 9b 04 00 00    	jg     c0027b08 <__adddf3+0x645>
c002766d:	83 e3 1f             	and    ebx,0x1f
c0027670:	89 d9                	mov    ecx,ebx
c0027672:	89 c7                	mov    edi,eax
c0027674:	d3 ef                	shr    edi,cl
c0027676:	31 db                	xor    ebx,ebx
c0027678:	85 c9                	test   ecx,ecx
c002767a:	74 12                	je     c002768e <__adddf3+0x1cb>
c002767c:	be 20 00 00 00       	mov    esi,0x20
c0027681:	29 ce                	sub    esi,ecx
c0027683:	89 f1                	mov    ecx,esi
c0027685:	d3 e0                	shl    eax,cl
c0027687:	31 db                	xor    ebx,ebx
c0027689:	85 c0                	test   eax,eax
c002768b:	0f 95 c3             	setne  bl
c002768e:	31 c0                	xor    eax,eax
c0027690:	85 d2                	test   edx,edx
c0027692:	0f 95 c0             	setne  al
c0027695:	09 c7                	or     edi,eax
c0027697:	09 fb                	or     ebx,edi
c0027699:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002769c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002769f:	01 da                	add    edx,ebx
c00276a1:	83 d6 00             	adc    esi,0x0
c00276a4:	eb 39                	jmp    c00276df <__adddf3+0x21c>
c00276a6:	be 20 00 00 00       	mov    esi,0x20
c00276ab:	29 de                	sub    esi,ebx
c00276ad:	89 c7                	mov    edi,eax
c00276af:	89 f1                	mov    ecx,esi
c00276b1:	d3 e7                	shl    edi,cl
c00276b3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276b6:	89 d7                	mov    edi,edx
c00276b8:	88 d9                	mov    cl,bl
c00276ba:	d3 ef                	shr    edi,cl
c00276bc:	89 f9                	mov    ecx,edi
c00276be:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276c1:	09 cf                	or     edi,ecx
c00276c3:	88 d9                	mov    cl,bl
c00276c5:	d3 e8                	shr    eax,cl
c00276c7:	89 f1                	mov    ecx,esi
c00276c9:	d3 e2                	shl    edx,cl
c00276cb:	85 d2                	test   edx,edx
c00276cd:	0f 95 c2             	setne  dl
c00276d0:	0f b6 d2             	movzx  edx,dl
c00276d3:	09 d7                	or     edi,edx
c00276d5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276d8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276db:	01 fa                	add    edx,edi
c00276dd:	11 c6                	adc    esi,eax
c00276df:	89 f0                	mov    eax,esi
c00276e1:	eb 77                	jmp    c002775a <__adddf3+0x297>
c00276e3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276e6:	46                   	inc    esi
c00276e7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00276ea:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00276f0:	75 41                	jne    c0027733 <__adddf3+0x270>
c00276f2:	89 d3                	mov    ebx,edx
c00276f4:	09 c3                	or     ebx,eax
c00276f6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00276fd:	75 27                	jne    c0027726 <__adddf3+0x263>
c00276ff:	85 db                	test   ebx,ebx
c0027701:	0f 84 fb 03 00 00    	je     c0027b02 <__adddf3+0x63f>
c0027707:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002770a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002770d:	0f 84 f5 03 00 00    	je     c0027b08 <__adddf3+0x645>
c0027713:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027716:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027719:	85 c0                	test   eax,eax
c002771b:	0f 89 91 03 00 00    	jns    c0027ab2 <__adddf3+0x5ef>
c0027721:	e9 85 03 00 00       	jmp    c0027aab <__adddf3+0x5e8>
c0027726:	85 db                	test   ebx,ebx
c0027728:	0f 85 da 03 00 00    	jne    c0027b08 <__adddf3+0x645>
c002772e:	e9 cf 03 00 00       	jmp    c0027b02 <__adddf3+0x63f>
c0027733:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027736:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027739:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002773c:	f7 d1                	not    ecx
c002773e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027744:	0f 84 70 03 00 00    	je     c0027aba <__adddf3+0x5f7>
c002774a:	d1 ea                	shr    edx,1
c002774c:	89 c1                	mov    ecx,eax
c002774e:	c1 e1 1f             	shl    ecx,0x1f
c0027751:	09 ca                	or     edx,ecx
c0027753:	d1 e8                	shr    eax,1
c0027755:	e9 6f 03 00 00       	jmp    c0027ac9 <__adddf3+0x606>
c002775a:	85 c0                	test   eax,eax
c002775c:	0f 89 67 03 00 00    	jns    c0027ac9 <__adddf3+0x606>
c0027762:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027765:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027768:	f7 d1                	not    ecx
c002776a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027770:	0f 84 44 03 00 00    	je     c0027aba <__adddf3+0x5f7>
c0027776:	89 d1                	mov    ecx,edx
c0027778:	d1 e9                	shr    ecx,1
c002777a:	83 e2 01             	and    edx,0x1
c002777d:	09 ca                	or     edx,ecx
c002777f:	89 c1                	mov    ecx,eax
c0027781:	c1 e1 1f             	shl    ecx,0x1f
c0027784:	09 ca                	or     edx,ecx
c0027786:	d1 e8                	shr    eax,1
c0027788:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002778d:	e9 37 03 00 00       	jmp    c0027ac9 <__adddf3+0x606>
c0027792:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027795:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002779b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002779e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00277a1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00277a7:	29 de                	sub    esi,ebx
c00277a9:	85 f6                	test   esi,esi
c00277ab:	0f 8e bd 00 00 00    	jle    c002786e <__adddf3+0x3ab>
c00277b1:	85 db                	test   ebx,ebx
c00277b3:	75 17                	jne    c00277cc <__adddf3+0x309>
c00277b5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00277b8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00277bb:	0f 84 47 03 00 00    	je     c0027b08 <__adddf3+0x645>
c00277c1:	4e                   	dec    esi
c00277c2:	75 20                	jne    c00277e4 <__adddf3+0x321>
c00277c4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00277c7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00277ca:	eb 5b                	jmp    c0027827 <__adddf3+0x364>
c00277cc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00277cf:	f7 d3                	not    ebx
c00277d1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00277d7:	0f 84 2b 03 00 00    	je     c0027b08 <__adddf3+0x645>
c00277dd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00277e4:	83 fe 1f             	cmp    esi,0x1f
c00277e7:	7e 49                	jle    c0027832 <__adddf3+0x36f>
c00277e9:	83 fe 3f             	cmp    esi,0x3f
c00277ec:	0f 8f 16 03 00 00    	jg     c0027b08 <__adddf3+0x645>
c00277f2:	83 e6 1f             	and    esi,0x1f
c00277f5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00277f8:	89 f1                	mov    ecx,esi
c00277fa:	d3 ef                	shr    edi,cl
c00277fc:	31 db                	xor    ebx,ebx
c00277fe:	85 f6                	test   esi,esi
c0027800:	74 13                	je     c0027815 <__adddf3+0x352>
c0027802:	b9 20 00 00 00       	mov    ecx,0x20
c0027807:	29 f1                	sub    ecx,esi
c0027809:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002780c:	d3 e6                	shl    esi,cl
c002780e:	31 db                	xor    ebx,ebx
c0027810:	85 f6                	test   esi,esi
c0027812:	0f 95 c3             	setne  bl
c0027815:	31 c9                	xor    ecx,ecx
c0027817:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002781b:	0f 95 c1             	setne  cl
c002781e:	09 cf                	or     edi,ecx
c0027820:	09 fb                	or     ebx,edi
c0027822:	29 da                	sub    edx,ebx
c0027824:	83 d8 00             	sbb    eax,0x0
c0027827:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002782a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002782d:	e9 aa 01 00 00       	jmp    c00279dc <__adddf3+0x519>
c0027832:	bf 20 00 00 00       	mov    edi,0x20
c0027837:	29 f7                	sub    edi,esi
c0027839:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002783c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002783f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027842:	d3 e3                	shl    ebx,cl
c0027844:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027847:	89 f1                	mov    ecx,esi
c0027849:	d3 ef                	shr    edi,cl
c002784b:	09 fb                	or     ebx,edi
c002784d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027850:	89 f1                	mov    ecx,esi
c0027852:	d3 ef                	shr    edi,cl
c0027854:	89 fe                	mov    esi,edi
c0027856:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027859:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002785c:	d3 e7                	shl    edi,cl
c002785e:	85 ff                	test   edi,edi
c0027860:	0f 95 c1             	setne  cl
c0027863:	0f b6 c9             	movzx  ecx,cl
c0027866:	09 cb                	or     ebx,ecx
c0027868:	29 da                	sub    edx,ebx
c002786a:	19 f0                	sbb    eax,esi
c002786c:	eb b9                	jmp    c0027827 <__adddf3+0x364>
c002786e:	0f 84 cd 00 00 00    	je     c0027941 <__adddf3+0x47e>
c0027874:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027877:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002787a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002787d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027881:	75 1b                	jne    c002789e <__adddf3+0x3db>
c0027883:	89 d6                	mov    esi,edx
c0027885:	09 c6                	or     esi,eax
c0027887:	0f 84 7b 02 00 00    	je     c0027b08 <__adddf3+0x645>
c002788d:	4b                   	dec    ebx
c002788e:	75 24                	jne    c00278b4 <__adddf3+0x3f1>
c0027890:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027893:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027896:	29 d1                	sub    ecx,edx
c0027898:	19 c6                	sbb    esi,eax
c002789a:	89 ca                	mov    edx,ecx
c002789c:	eb 61                	jmp    c00278ff <__adddf3+0x43c>
c002789e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00278a1:	f7 d6                	not    esi
c00278a3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278a9:	0f 84 59 02 00 00    	je     c0027b08 <__adddf3+0x645>
c00278af:	0d 00 00 00 80       	or     eax,0x80000000
c00278b4:	83 fb 1f             	cmp    ebx,0x1f
c00278b7:	7e 4d                	jle    c0027906 <__adddf3+0x443>
c00278b9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278bc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278bf:	83 fb 3f             	cmp    ebx,0x3f
c00278c2:	0f 8f 40 02 00 00    	jg     c0027b08 <__adddf3+0x645>
c00278c8:	83 e3 1f             	and    ebx,0x1f
c00278cb:	89 d9                	mov    ecx,ebx
c00278cd:	89 c7                	mov    edi,eax
c00278cf:	d3 ef                	shr    edi,cl
c00278d1:	31 db                	xor    ebx,ebx
c00278d3:	85 c9                	test   ecx,ecx
c00278d5:	74 12                	je     c00278e9 <__adddf3+0x426>
c00278d7:	be 20 00 00 00       	mov    esi,0x20
c00278dc:	29 ce                	sub    esi,ecx
c00278de:	89 f1                	mov    ecx,esi
c00278e0:	d3 e0                	shl    eax,cl
c00278e2:	31 db                	xor    ebx,ebx
c00278e4:	85 c0                	test   eax,eax
c00278e6:	0f 95 c3             	setne  bl
c00278e9:	31 c0                	xor    eax,eax
c00278eb:	85 d2                	test   edx,edx
c00278ed:	0f 95 c0             	setne  al
c00278f0:	09 c7                	or     edi,eax
c00278f2:	09 fb                	or     ebx,edi
c00278f4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278f7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00278fa:	29 da                	sub    edx,ebx
c00278fc:	83 de 00             	sbb    esi,0x0
c00278ff:	89 f0                	mov    eax,esi
c0027901:	e9 d6 00 00 00       	jmp    c00279dc <__adddf3+0x519>
c0027906:	be 20 00 00 00       	mov    esi,0x20
c002790b:	29 de                	sub    esi,ebx
c002790d:	89 c7                	mov    edi,eax
c002790f:	89 f1                	mov    ecx,esi
c0027911:	d3 e7                	shl    edi,cl
c0027913:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027916:	89 d7                	mov    edi,edx
c0027918:	88 d9                	mov    cl,bl
c002791a:	d3 ef                	shr    edi,cl
c002791c:	89 f9                	mov    ecx,edi
c002791e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027921:	09 cf                	or     edi,ecx
c0027923:	88 d9                	mov    cl,bl
c0027925:	d3 e8                	shr    eax,cl
c0027927:	89 f1                	mov    ecx,esi
c0027929:	d3 e2                	shl    edx,cl
c002792b:	85 d2                	test   edx,edx
c002792d:	0f 95 c2             	setne  dl
c0027930:	0f b6 d2             	movzx  edx,dl
c0027933:	09 d7                	or     edi,edx
c0027935:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027938:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002793b:	29 fa                	sub    edx,edi
c002793d:	19 c6                	sbb    esi,eax
c002793f:	eb be                	jmp    c00278ff <__adddf3+0x43c>
c0027941:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027944:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027947:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002794d:	75 6a                	jne    c00279b9 <__adddf3+0x4f6>
c002794f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027953:	75 58                	jne    c00279ad <__adddf3+0x4ea>
c0027955:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027958:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002795b:	89 d6                	mov    esi,edx
c002795d:	09 c6                	or     esi,eax
c002795f:	75 17                	jne    c0027978 <__adddf3+0x4b5>
c0027961:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027964:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027967:	85 db                	test   ebx,ebx
c0027969:	0f 85 99 01 00 00    	jne    c0027b08 <__adddf3+0x645>
c002796f:	31 ff                	xor    edi,edi
c0027971:	31 c9                	xor    ecx,ecx
c0027973:	e9 90 01 00 00       	jmp    c0027b08 <__adddf3+0x645>
c0027978:	85 db                	test   ebx,ebx
c002797a:	0f 84 88 01 00 00    	je     c0027b08 <__adddf3+0x645>
c0027980:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027983:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027986:	85 c0                	test   eax,eax
c0027988:	79 10                	jns    c002799a <__adddf3+0x4d7>
c002798a:	31 c9                	xor    ecx,ecx
c002798c:	f7 da                	neg    edx
c002798e:	0f 95 c1             	setne  cl
c0027991:	01 c8                	add    eax,ecx
c0027993:	f7 d8                	neg    eax
c0027995:	e9 2f 01 00 00       	jmp    c0027ac9 <__adddf3+0x606>
c002799a:	31 ff                	xor    edi,edi
c002799c:	31 c9                	xor    ecx,ecx
c002799e:	89 c3                	mov    ebx,eax
c00279a0:	09 d3                	or     ebx,edx
c00279a2:	0f 84 60 01 00 00    	je     c0027b08 <__adddf3+0x645>
c00279a8:	e9 05 01 00 00       	jmp    c0027ab2 <__adddf3+0x5ef>
c00279ad:	31 ff                	xor    edi,edi
c00279af:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00279b4:	e9 4f 01 00 00       	jmp    c0027b08 <__adddf3+0x645>
c00279b9:	89 c1                	mov    ecx,eax
c00279bb:	89 d0                	mov    eax,edx
c00279bd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00279c0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00279c3:	89 ca                	mov    edx,ecx
c00279c5:	85 c9                	test   ecx,ecx
c00279c7:	79 2c                	jns    c00279f5 <__adddf3+0x532>
c00279c9:	31 c9                	xor    ecx,ecx
c00279cb:	f7 d8                	neg    eax
c00279cd:	0f 95 c1             	setne  cl
c00279d0:	01 ca                	add    edx,ecx
c00279d2:	f7 da                	neg    edx
c00279d4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00279d7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00279da:	eb 19                	jmp    c00279f5 <__adddf3+0x532>
c00279dc:	85 c0                	test   eax,eax
c00279de:	0f 89 e5 00 00 00    	jns    c0027ac9 <__adddf3+0x606>
c00279e4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00279e9:	89 c1                	mov    ecx,eax
c00279eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00279ee:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00279f1:	89 d0                	mov    eax,edx
c00279f3:	89 ca                	mov    edx,ecx
c00279f5:	85 d2                	test   edx,edx
c00279f7:	74 59                	je     c0027a52 <__adddf3+0x58f>
c00279f9:	0f bd da             	bsr    ebx,edx
c00279fc:	83 f3 1f             	xor    ebx,0x1f
c00279ff:	88 d9                	mov    cl,bl
c0027a01:	d3 e2                	shl    edx,cl
c0027a03:	bf 20 00 00 00       	mov    edi,0x20
c0027a08:	89 f9                	mov    ecx,edi
c0027a0a:	29 d9                	sub    ecx,ebx
c0027a0c:	89 c6                	mov    esi,eax
c0027a0e:	d3 ee                	shr    esi,cl
c0027a10:	09 d6                	or     esi,edx
c0027a12:	88 d9                	mov    cl,bl
c0027a14:	d3 e0                	shl    eax,cl
c0027a16:	89 c2                	mov    edx,eax
c0027a18:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a1b:	25 ff 07 00 00       	and    eax,0x7ff
c0027a20:	39 d8                	cmp    eax,ebx
c0027a22:	7f 22                	jg     c0027a46 <__adddf3+0x583>
c0027a24:	29 c3                	sub    ebx,eax
c0027a26:	43                   	inc    ebx
c0027a27:	88 d9                	mov    cl,bl
c0027a29:	d3 ea                	shr    edx,cl
c0027a2b:	29 df                	sub    edi,ebx
c0027a2d:	89 f9                	mov    ecx,edi
c0027a2f:	89 f0                	mov    eax,esi
c0027a31:	d3 e0                	shl    eax,cl
c0027a33:	09 c2                	or     edx,eax
c0027a35:	89 f0                	mov    eax,esi
c0027a37:	88 d9                	mov    cl,bl
c0027a39:	d3 e8                	shr    eax,cl
c0027a3b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a3e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027a44:	eb 6f                	jmp    c0027ab5 <__adddf3+0x5f2>
c0027a46:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a49:	29 d8                	sub    eax,ebx
c0027a4b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a4e:	89 f0                	mov    eax,esi
c0027a50:	eb 59                	jmp    c0027aab <__adddf3+0x5e8>
c0027a52:	85 c0                	test   eax,eax
c0027a54:	74 6a                	je     c0027ac0 <__adddf3+0x5fd>
c0027a56:	0f bd c8             	bsr    ecx,eax
c0027a59:	83 f1 1f             	xor    ecx,0x1f
c0027a5c:	d3 e0                	shl    eax,cl
c0027a5e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a61:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027a67:	83 c1 20             	add    ecx,0x20
c0027a6a:	39 cb                	cmp    ebx,ecx
c0027a6c:	7f 35                	jg     c0027aa3 <__adddf3+0x5e0>
c0027a6e:	29 d9                	sub    ecx,ebx
c0027a70:	8d 71 01             	lea    esi,[ecx+0x1]
c0027a73:	83 fe 1f             	cmp    esi,0x1f
c0027a76:	7e 09                	jle    c0027a81 <__adddf3+0x5be>
c0027a78:	83 e9 1f             	sub    ecx,0x1f
c0027a7b:	d3 e8                	shr    eax,cl
c0027a7d:	89 c3                	mov    ebx,eax
c0027a7f:	eb 11                	jmp    c0027a92 <__adddf3+0x5cf>
c0027a81:	b9 20 00 00 00       	mov    ecx,0x20
c0027a86:	29 f1                	sub    ecx,esi
c0027a88:	89 c3                	mov    ebx,eax
c0027a8a:	d3 e3                	shl    ebx,cl
c0027a8c:	89 f1                	mov    ecx,esi
c0027a8e:	d3 e8                	shr    eax,cl
c0027a90:	89 c2                	mov    edx,eax
c0027a92:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a95:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027a9a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a9d:	89 d0                	mov    eax,edx
c0027a9f:	89 da                	mov    edx,ebx
c0027aa1:	eb 26                	jmp    c0027ac9 <__adddf3+0x606>
c0027aa3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027aa6:	29 cf                	sub    edi,ecx
c0027aa8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027aab:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ab0:	eb 17                	jmp    c0027ac9 <__adddf3+0x606>
c0027ab2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ab5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ab8:	eb 0f                	jmp    c0027ac9 <__adddf3+0x606>
c0027aba:	31 d2                	xor    edx,edx
c0027abc:	31 c0                	xor    eax,eax
c0027abe:	eb 09                	jmp    c0027ac9 <__adddf3+0x606>
c0027ac0:	89 c2                	mov    edx,eax
c0027ac2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027ac9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027acc:	c1 e1 14             	shl    ecx,0x14
c0027acf:	89 c3                	mov    ebx,eax
c0027ad1:	c1 eb 0b             	shr    ebx,0xb
c0027ad4:	09 d9                	or     ecx,ebx
c0027ad6:	89 d3                	mov    ebx,edx
c0027ad8:	c1 eb 0b             	shr    ebx,0xb
c0027adb:	c1 e0 15             	shl    eax,0x15
c0027ade:	09 d8                	or     eax,ebx
c0027ae0:	89 c7                	mov    edi,eax
c0027ae2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027ae8:	0f 95 c0             	setne  al
c0027aeb:	89 c6                	mov    esi,eax
c0027aed:	09 f3                	or     ebx,esi
c0027aef:	83 e3 01             	and    ebx,0x1
c0027af2:	c1 ea 0a             	shr    edx,0xa
c0027af5:	21 da                	and    edx,ebx
c0027af7:	89 f8                	mov    eax,edi
c0027af9:	01 d0                	add    eax,edx
c0027afb:	83 d1 00             	adc    ecx,0x0
c0027afe:	89 c7                	mov    edi,eax
c0027b00:	eb 06                	jmp    c0027b08 <__adddf3+0x645>
c0027b02:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027b05:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027b08:	89 f8                	mov    eax,edi
c0027b0a:	89 ca                	mov    edx,ecx
c0027b0c:	83 c4 24             	add    esp,0x24
c0027b0f:	5b                   	pop    ebx
c0027b10:	5e                   	pop    esi
c0027b11:	5f                   	pop    edi
c0027b12:	5d                   	pop    ebp
c0027b13:	c3                   	ret    

c0027b14 <__subdf3>:
c0027b14:	55                   	push   ebp
c0027b15:	89 e5                	mov    ebp,esp
c0027b17:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b1a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027b1d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b23:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027b26:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027b29:	5d                   	pop    ebp
c0027b2a:	e9 94 f9 ff ff       	jmp    c00274c3 <__adddf3>

c0027b2f <__negdf2>:
c0027b2f:	55                   	push   ebp
c0027b30:	89 e5                	mov    ebp,esp
c0027b32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027b35:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027b38:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b3e:	5d                   	pop    ebp
c0027b3f:	c3                   	ret    

c0027b40 <__muldf3>:
c0027b40:	55                   	push   ebp
c0027b41:	89 e5                	mov    ebp,esp
c0027b43:	57                   	push   edi
c0027b44:	56                   	push   esi
c0027b45:	53                   	push   ebx
c0027b46:	83 ec 24             	sub    esp,0x24
c0027b49:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027b4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b4f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b55:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027b58:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027b5b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b5e:	89 c8                	mov    eax,ecx
c0027b60:	c1 f8 14             	sar    eax,0x14
c0027b63:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b66:	89 f8                	mov    eax,edi
c0027b68:	89 fb                	mov    ebx,edi
c0027b6a:	c1 e3 0b             	shl    ebx,0xb
c0027b6d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027b70:	c1 e1 0b             	shl    ecx,0xb
c0027b73:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027b79:	c1 e8 15             	shr    eax,0x15
c0027b7c:	09 c1                	or     ecx,eax
c0027b7e:	89 d6                	mov    esi,edx
c0027b80:	89 d0                	mov    eax,edx
c0027b82:	c1 f8 14             	sar    eax,0x14
c0027b85:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027b88:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027b8b:	89 c3                	mov    ebx,eax
c0027b8d:	c1 e3 0b             	shl    ebx,0xb
c0027b90:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027b93:	c1 e6 0b             	shl    esi,0xb
c0027b96:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027b9c:	c1 e8 15             	shr    eax,0x15
c0027b9f:	09 c6                	or     esi,eax
c0027ba1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ba4:	25 ff 07 00 00       	and    eax,0x7ff
c0027ba9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027bac:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027baf:	25 ff 07 00 00       	and    eax,0x7ff
c0027bb4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027bb7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027bba:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027bbd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027bc4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027bc7:	40                   	inc    eax
c0027bc8:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bcd:	0f 85 8d 00 00 00    	jne    c0027c60 <__muldf3+0x120>
c0027bd3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bd6:	09 c8                	or     eax,ecx
c0027bd8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027bdc:	74 44                	je     c0027c22 <__muldf3+0xe2>
c0027bde:	85 c0                	test   eax,eax
c0027be0:	0f 85 31 02 00 00    	jne    c0027e17 <__muldf3+0x2d7>
c0027be6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027be9:	40                   	inc    eax
c0027bea:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bef:	75 13                	jne    c0027c04 <__muldf3+0xc4>
c0027bf1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027bf4:	09 f1                	or     ecx,esi
c0027bf6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027bfa:	74 22                	je     c0027c1e <__muldf3+0xde>
c0027bfc:	85 c9                	test   ecx,ecx
c0027bfe:	0f 85 0d 02 00 00    	jne    c0027e11 <__muldf3+0x2d1>
c0027c04:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027c08:	0f 89 09 02 00 00    	jns    c0027e17 <__muldf3+0x2d7>
c0027c0e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c11:	05 00 00 00 80       	add    eax,0x80000000
c0027c16:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c19:	e9 f9 01 00 00       	jmp    c0027e17 <__muldf3+0x2d7>
c0027c1e:	85 c9                	test   ecx,ecx
c0027c20:	eb 2e                	jmp    c0027c50 <__muldf3+0x110>
c0027c22:	85 c0                	test   eax,eax
c0027c24:	74 20                	je     c0027c46 <__muldf3+0x106>
c0027c26:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027c29:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c2c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c2f:	c1 ef 1f             	shr    edi,0x1f
c0027c32:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027c35:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027c38:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027c3b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c3e:	09 f9                	or     ecx,edi
c0027c40:	78 1e                	js     c0027c60 <__muldf3+0x120>
c0027c42:	89 c3                	mov    ebx,eax
c0027c44:	eb e0                	jmp    c0027c26 <__muldf3+0xe6>
c0027c46:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c49:	f7 d0                	not    eax
c0027c4b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027c50:	75 b2                	jne    c0027c04 <__muldf3+0xc4>
c0027c52:	31 ff                	xor    edi,edi
c0027c54:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027c5b:	e9 b7 01 00 00       	jmp    c0027e17 <__muldf3+0x2d7>
c0027c60:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c63:	40                   	inc    eax
c0027c64:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c69:	75 57                	jne    c0027cc2 <__muldf3+0x182>
c0027c6b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027c6e:	09 f0                	or     eax,esi
c0027c70:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027c74:	74 23                	je     c0027c99 <__muldf3+0x159>
c0027c76:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027c7a:	0f 89 91 01 00 00    	jns    c0027e11 <__muldf3+0x2d1>
c0027c80:	85 c0                	test   eax,eax
c0027c82:	0f 85 89 01 00 00    	jne    c0027e11 <__muldf3+0x2d1>
c0027c88:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027c8b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027c91:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c94:	e9 7e 01 00 00       	jmp    c0027e17 <__muldf3+0x2d7>
c0027c99:	85 c0                	test   eax,eax
c0027c9b:	75 0c                	jne    c0027ca9 <__muldf3+0x169>
c0027c9d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027ca1:	0f 89 6a 01 00 00    	jns    c0027e11 <__muldf3+0x2d1>
c0027ca7:	eb df                	jmp    c0027c88 <__muldf3+0x148>
c0027ca9:	01 f6                	add    esi,esi
c0027cab:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027cae:	c1 ea 1f             	shr    edx,0x1f
c0027cb1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027cb4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027cb7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027cba:	09 d6                	or     esi,edx
c0027cbc:	78 04                	js     c0027cc2 <__muldf3+0x182>
c0027cbe:	89 c3                	mov    ebx,eax
c0027cc0:	eb e7                	jmp    c0027ca9 <__muldf3+0x169>
c0027cc2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027cc8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027cce:	89 c8                	mov    eax,ecx
c0027cd0:	f7 e6                	mul    esi
c0027cd2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027cd5:	89 c7                	mov    edi,eax
c0027cd7:	89 c8                	mov    eax,ecx
c0027cd9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027cdc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027cdf:	89 c1                	mov    ecx,eax
c0027ce1:	89 f0                	mov    eax,esi
c0027ce3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027ce6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027ce9:	89 c6                	mov    esi,eax
c0027ceb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cee:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027cf1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027cf4:	31 c0                	xor    eax,eax
c0027cf6:	01 f1                	add    ecx,esi
c0027cf8:	0f 92 c0             	setb   al
c0027cfb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027cfe:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d01:	83 d6 00             	adc    esi,0x0
c0027d04:	01 c7                	add    edi,eax
c0027d06:	83 d6 00             	adc    esi,0x0
c0027d09:	01 ca                	add    edx,ecx
c0027d0b:	0f 92 c1             	setb   cl
c0027d0e:	0f b6 c9             	movzx  ecx,cl
c0027d11:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027d14:	83 d6 00             	adc    esi,0x0
c0027d17:	01 cf                	add    edi,ecx
c0027d19:	83 d6 00             	adc    esi,0x0
c0027d1c:	31 c9                	xor    ecx,ecx
c0027d1e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027d21:	0f 95 c1             	setne  cl
c0027d24:	09 cf                	or     edi,ecx
c0027d26:	85 f6                	test   esi,esi
c0027d28:	78 0c                	js     c0027d36 <__muldf3+0x1f6>
c0027d2a:	01 f6                	add    esi,esi
c0027d2c:	89 f8                	mov    eax,edi
c0027d2e:	c1 e8 1f             	shr    eax,0x1f
c0027d31:	09 c6                	or     esi,eax
c0027d33:	01 ff                	add    edi,edi
c0027d35:	4b                   	dec    ebx
c0027d36:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027d3c:	0f 8f 85 00 00 00    	jg     c0027dc7 <__muldf3+0x287>
c0027d42:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027d48:	85 db                	test   ebx,ebx
c0027d4a:	0f 8f 84 00 00 00    	jg     c0027dd4 <__muldf3+0x294>
c0027d50:	83 fb cc             	cmp    ebx,0xffffffcc
c0027d53:	7c 79                	jl     c0027dce <__muldf3+0x28e>
c0027d55:	ba 01 00 00 00       	mov    edx,0x1
c0027d5a:	29 da                	sub    edx,ebx
c0027d5c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d62:	83 fa 1f             	cmp    edx,0x1f
c0027d65:	7e 30                	jle    c0027d97 <__muldf3+0x257>
c0027d67:	83 fa 20             	cmp    edx,0x20
c0027d6a:	75 0b                	jne    c0027d77 <__muldf3+0x237>
c0027d6c:	31 c0                	xor    eax,eax
c0027d6e:	85 ff                	test   edi,edi
c0027d70:	0f 95 c0             	setne  al
c0027d73:	89 c7                	mov    edi,eax
c0027d75:	eb 1a                	jmp    c0027d91 <__muldf3+0x251>
c0027d77:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027d7a:	89 f0                	mov    eax,esi
c0027d7c:	d3 e0                	shl    eax,cl
c0027d7e:	09 f8                	or     eax,edi
c0027d80:	0f 95 c0             	setne  al
c0027d83:	0f b6 c0             	movzx  eax,al
c0027d86:	89 c7                	mov    edi,eax
c0027d88:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027d8d:	29 d9                	sub    ecx,ebx
c0027d8f:	d3 ee                	shr    esi,cl
c0027d91:	09 f7                	or     edi,esi
c0027d93:	31 db                	xor    ebx,ebx
c0027d95:	eb 3b                	jmp    c0027dd2 <__muldf3+0x292>
c0027d97:	83 c3 1f             	add    ebx,0x1f
c0027d9a:	89 f0                	mov    eax,esi
c0027d9c:	88 d9                	mov    cl,bl
c0027d9e:	d3 e0                	shl    eax,cl
c0027da0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027da3:	89 f8                	mov    eax,edi
c0027da5:	88 d1                	mov    cl,dl
c0027da7:	d3 e8                	shr    eax,cl
c0027da9:	89 c1                	mov    ecx,eax
c0027dab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027dae:	09 c8                	or     eax,ecx
c0027db0:	88 d9                	mov    cl,bl
c0027db2:	d3 e7                	shl    edi,cl
c0027db4:	31 db                	xor    ebx,ebx
c0027db6:	85 ff                	test   edi,edi
c0027db8:	0f 95 c3             	setne  bl
c0027dbb:	89 df                	mov    edi,ebx
c0027dbd:	09 c7                	or     edi,eax
c0027dbf:	88 d1                	mov    cl,dl
c0027dc1:	d3 ee                	shr    esi,cl
c0027dc3:	31 db                	xor    ebx,ebx
c0027dc5:	eb 0d                	jmp    c0027dd4 <__muldf3+0x294>
c0027dc7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027dcc:	eb 02                	jmp    c0027dd0 <__muldf3+0x290>
c0027dce:	31 db                	xor    ebx,ebx
c0027dd0:	31 ff                	xor    edi,edi
c0027dd2:	31 f6                	xor    esi,esi
c0027dd4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027dd7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027dda:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027ddf:	09 c3                	or     ebx,eax
c0027de1:	c1 e3 14             	shl    ebx,0x14
c0027de4:	89 f0                	mov    eax,esi
c0027de6:	c1 e8 0b             	shr    eax,0xb
c0027de9:	09 c3                	or     ebx,eax
c0027deb:	89 f8                	mov    eax,edi
c0027ded:	c1 e8 0b             	shr    eax,0xb
c0027df0:	c1 e6 15             	shl    esi,0x15
c0027df3:	09 c6                	or     esi,eax
c0027df5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027dfb:	0f 95 c1             	setne  cl
c0027dfe:	09 c8                	or     eax,ecx
c0027e00:	83 e0 01             	and    eax,0x1
c0027e03:	c1 ef 0a             	shr    edi,0xa
c0027e06:	21 c7                	and    edi,eax
c0027e08:	01 f7                	add    edi,esi
c0027e0a:	83 d3 00             	adc    ebx,0x0
c0027e0d:	89 da                	mov    edx,ebx
c0027e0f:	eb 03                	jmp    c0027e14 <__muldf3+0x2d4>
c0027e11:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027e14:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e17:	89 f8                	mov    eax,edi
c0027e19:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027e1c:	83 c4 24             	add    esp,0x24
c0027e1f:	5b                   	pop    ebx
c0027e20:	5e                   	pop    esi
c0027e21:	5f                   	pop    edi
c0027e22:	5d                   	pop    ebp
c0027e23:	c3                   	ret    

c0027e24 <__divdf3>:
c0027e24:	55                   	push   ebp
c0027e25:	89 e5                	mov    ebp,esp
c0027e27:	57                   	push   edi
c0027e28:	56                   	push   esi
c0027e29:	53                   	push   ebx
c0027e2a:	83 ec 2c             	sub    esp,0x2c
c0027e2d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027e30:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027e33:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e36:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027e39:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027e3c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027e3f:	89 ce                	mov    esi,ecx
c0027e41:	89 c8                	mov    eax,ecx
c0027e43:	c1 f8 14             	sar    eax,0x14
c0027e46:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e49:	89 f8                	mov    eax,edi
c0027e4b:	89 fb                	mov    ebx,edi
c0027e4d:	c1 e3 0b             	shl    ebx,0xb
c0027e50:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027e53:	c1 e6 0b             	shl    esi,0xb
c0027e56:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027e5c:	c1 e8 15             	shr    eax,0x15
c0027e5f:	09 c6                	or     esi,eax
c0027e61:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027e64:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027e67:	89 c2                	mov    edx,eax
c0027e69:	c1 fa 14             	sar    edx,0x14
c0027e6c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027e6f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027e72:	89 de                	mov    esi,ebx
c0027e74:	c1 e6 0b             	shl    esi,0xb
c0027e77:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027e7a:	c1 e0 0b             	shl    eax,0xb
c0027e7d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027e82:	c1 eb 15             	shr    ebx,0x15
c0027e85:	09 d8                	or     eax,ebx
c0027e87:	89 c2                	mov    edx,eax
c0027e89:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e8c:	25 ff 07 00 00       	and    eax,0x7ff
c0027e91:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027e94:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027e97:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027e9d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027ea0:	29 d8                	sub    eax,ebx
c0027ea2:	05 ff 03 00 00       	add    eax,0x3ff
c0027ea7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027eaa:	46                   	inc    esi
c0027eab:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027eb1:	0f 85 a5 00 00 00    	jne    c0027f5c <__divdf3+0x138>
c0027eb7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027eba:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027ebd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027ec1:	74 2a                	je     c0027eed <__divdf3+0xc9>
c0027ec3:	85 f6                	test   esi,esi
c0027ec5:	0f 85 cc 02 00 00    	jne    c0028197 <__divdf3+0x373>
c0027ecb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ece:	40                   	inc    eax
c0027ecf:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ed4:	75 26                	jne    c0027efc <__divdf3+0xd8>
c0027ed6:	85 db                	test   ebx,ebx
c0027ed8:	74 22                	je     c0027efc <__divdf3+0xd8>
c0027eda:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027edd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ee0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ee3:	09 d0                	or     eax,edx
c0027ee5:	0f 85 ac 02 00 00    	jne    c0028197 <__divdf3+0x373>
c0027eeb:	eb 63                	jmp    c0027f50 <__divdf3+0x12c>
c0027eed:	85 f6                	test   esi,esi
c0027eef:	75 22                	jne    c0027f13 <__divdf3+0xef>
c0027ef1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ef4:	40                   	inc    eax
c0027ef5:	a9 fe 07 00 00       	test   eax,0x7fe
c0027efa:	74 36                	je     c0027f32 <__divdf3+0x10e>
c0027efc:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027f00:	0f 89 91 02 00 00    	jns    c0028197 <__divdf3+0x373>
c0027f06:	89 f8                	mov    eax,edi
c0027f08:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027f0e:	e9 80 02 00 00       	jmp    c0028193 <__divdf3+0x36f>
c0027f13:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f16:	01 f6                	add    esi,esi
c0027f18:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027f1b:	c1 ef 1f             	shr    edi,0x1f
c0027f1e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f21:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027f24:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027f27:	09 f7                	or     edi,esi
c0027f29:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027f2c:	78 2e                	js     c0027f5c <__divdf3+0x138>
c0027f2e:	89 c8                	mov    eax,ecx
c0027f30:	eb e1                	jmp    c0027f13 <__divdf3+0xef>
c0027f32:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f35:	09 d0                	or     eax,edx
c0027f37:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027f3b:	74 0f                	je     c0027f4c <__divdf3+0x128>
c0027f3d:	85 c0                	test   eax,eax
c0027f3f:	74 bb                	je     c0027efc <__divdf3+0xd8>
c0027f41:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f44:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f47:	e9 4b 02 00 00       	jmp    c0028197 <__divdf3+0x373>
c0027f4c:	85 c0                	test   eax,eax
c0027f4e:	75 ac                	jne    c0027efc <__divdf3+0xd8>
c0027f50:	31 ff                	xor    edi,edi
c0027f52:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027f57:	e9 3b 02 00 00       	jmp    c0028197 <__divdf3+0x373>
c0027f5c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f5f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027f62:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027f68:	75 6b                	jne    c0027fd5 <__divdf3+0x1b1>
c0027f6a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f6d:	09 d6                	or     esi,edx
c0027f6f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027f73:	74 28                	je     c0027f9d <__divdf3+0x179>
c0027f75:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f78:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f7b:	85 f6                	test   esi,esi
c0027f7d:	0f 85 14 02 00 00    	jne    c0028197 <__divdf3+0x373>
c0027f83:	31 ff                	xor    edi,edi
c0027f85:	31 c9                	xor    ecx,ecx
c0027f87:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f8a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027f8d:	0f 89 04 02 00 00    	jns    c0028197 <__divdf3+0x373>
c0027f93:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027f98:	e9 fa 01 00 00       	jmp    c0028197 <__divdf3+0x373>
c0027f9d:	85 f6                	test   esi,esi
c0027f9f:	75 1b                	jne    c0027fbc <__divdf3+0x198>
c0027fa1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fa4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027fa7:	25 00 00 00 80       	and    eax,0x80000000
c0027fac:	31 c9                	xor    ecx,ecx
c0027fae:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027fb3:	89 cf                	mov    edi,ecx
c0027fb5:	89 c1                	mov    ecx,eax
c0027fb7:	e9 db 01 00 00       	jmp    c0028197 <__divdf3+0x373>
c0027fbc:	01 d2                	add    edx,edx
c0027fbe:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027fc1:	c1 eb 1f             	shr    ebx,0x1f
c0027fc4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fc7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027fca:	8d 48 01             	lea    ecx,[eax+0x1]
c0027fcd:	09 da                	or     edx,ebx
c0027fcf:	78 04                	js     c0027fd5 <__divdf3+0x1b1>
c0027fd1:	89 c8                	mov    eax,ecx
c0027fd3:	eb e7                	jmp    c0027fbc <__divdf3+0x198>
c0027fd5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fd8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027fde:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027fe4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027fe7:	39 d6                	cmp    esi,edx
c0027fe9:	77 0d                	ja     c0027ff8 <__divdf3+0x1d4>
c0027feb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027fee:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027ff1:	72 1b                	jb     c002800e <__divdf3+0x1ea>
c0027ff3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027ff6:	75 16                	jne    c002800e <__divdf3+0x1ea>
c0027ff8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027ffb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027ffe:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028001:	83 de 00             	sbb    esi,0x0
c0028004:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028007:	ba 01 00 00 00       	mov    edx,0x1
c002800c:	eb 02                	jmp    c0028010 <__divdf3+0x1ec>
c002800e:	31 d2                	xor    edx,edx
c0028010:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028017:	31 ff                	xor    edi,edi
c0028019:	01 ff                	add    edi,edi
c002801b:	89 d1                	mov    ecx,edx
c002801d:	c1 e9 1f             	shr    ecx,0x1f
c0028020:	09 cf                	or     edi,ecx
c0028022:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028025:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028028:	89 da                	mov    edx,ebx
c002802a:	89 f3                	mov    ebx,esi
c002802c:	8d 34 36             	lea    esi,[esi+esi*1]
c002802f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028032:	c1 e9 1f             	shr    ecx,0x1f
c0028035:	09 ce                	or     esi,ecx
c0028037:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002803a:	01 c9                	add    ecx,ecx
c002803c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002803f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028042:	85 db                	test   ebx,ebx
c0028044:	78 29                	js     c002806f <__divdf3+0x24b>
c0028046:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028049:	72 07                	jb     c0028052 <__divdf3+0x22e>
c002804b:	75 3c                	jne    c0028089 <__divdf3+0x265>
c002804d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028050:	77 37                	ja     c0028089 <__divdf3+0x265>
c0028052:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028055:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028058:	31 d2                	xor    edx,edx
c002805a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002805d:	0f 97 c2             	seta   dl
c0028060:	29 d6                	sub    esi,edx
c0028062:	89 d9                	mov    ecx,ebx
c0028064:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028067:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002806a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002806d:	eb 17                	jmp    c0028086 <__divdf3+0x262>
c002806f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028072:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028075:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028078:	0f 97 c1             	seta   cl
c002807b:	0f b6 c9             	movzx  ecx,cl
c002807e:	29 ce                	sub    esi,ecx
c0028080:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028083:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028086:	83 ca 01             	or     edx,0x1
c0028089:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002808c:	75 8b                	jne    c0028019 <__divdf3+0x1f5>
c002808e:	c1 e7 09             	shl    edi,0x9
c0028091:	89 d1                	mov    ecx,edx
c0028093:	c1 e9 17             	shr    ecx,0x17
c0028096:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028099:	09 f3                	or     ebx,esi
c002809b:	0f 95 c3             	setne  bl
c002809e:	0f b6 db             	movzx  ebx,bl
c00280a1:	c1 e2 09             	shl    edx,0x9
c00280a4:	09 d3                	or     ebx,edx
c00280a6:	89 ca                	mov    edx,ecx
c00280a8:	09 fa                	or     edx,edi
c00280aa:	78 0c                	js     c00280b8 <__divdf3+0x294>
c00280ac:	01 d2                	add    edx,edx
c00280ae:	89 d9                	mov    ecx,ebx
c00280b0:	c1 e9 1f             	shr    ecx,0x1f
c00280b3:	09 ca                	or     edx,ecx
c00280b5:	01 db                	add    ebx,ebx
c00280b7:	48                   	dec    eax
c00280b8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00280bd:	0f 8f 83 00 00 00    	jg     c0028146 <__divdf3+0x322>
c00280c3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00280c9:	85 c0                	test   eax,eax
c00280cb:	0f 8f 82 00 00 00    	jg     c0028153 <__divdf3+0x32f>
c00280d1:	83 f8 cc             	cmp    eax,0xffffffcc
c00280d4:	7c 77                	jl     c002814d <__divdf3+0x329>
c00280d6:	be 01 00 00 00       	mov    esi,0x1
c00280db:	29 c6                	sub    esi,eax
c00280dd:	81 ca 00 00 00 80    	or     edx,0x80000000
c00280e3:	83 fe 1f             	cmp    esi,0x1f
c00280e6:	7e 2f                	jle    c0028117 <__divdf3+0x2f3>
c00280e8:	83 fe 20             	cmp    esi,0x20
c00280eb:	75 0a                	jne    c00280f7 <__divdf3+0x2d3>
c00280ed:	85 db                	test   ebx,ebx
c00280ef:	0f 95 c3             	setne  bl
c00280f2:	0f b6 db             	movzx  ebx,bl
c00280f5:	eb 1a                	jmp    c0028111 <__divdf3+0x2ed>
c00280f7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00280fa:	89 d7                	mov    edi,edx
c00280fc:	d3 e7                	shl    edi,cl
c00280fe:	89 f9                	mov    ecx,edi
c0028100:	09 d9                	or     ecx,ebx
c0028102:	0f 95 c3             	setne  bl
c0028105:	0f b6 db             	movzx  ebx,bl
c0028108:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002810d:	29 c1                	sub    ecx,eax
c002810f:	d3 ea                	shr    edx,cl
c0028111:	09 d3                	or     ebx,edx
c0028113:	31 c0                	xor    eax,eax
c0028115:	eb 3a                	jmp    c0028151 <__divdf3+0x32d>
c0028117:	83 c0 1f             	add    eax,0x1f
c002811a:	89 d7                	mov    edi,edx
c002811c:	88 c1                	mov    cl,al
c002811e:	d3 e7                	shl    edi,cl
c0028120:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028123:	89 df                	mov    edi,ebx
c0028125:	89 f1                	mov    ecx,esi
c0028127:	d3 ef                	shr    edi,cl
c0028129:	89 f9                	mov    ecx,edi
c002812b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002812e:	09 cf                	or     edi,ecx
c0028130:	88 c1                	mov    cl,al
c0028132:	d3 e3                	shl    ebx,cl
c0028134:	85 db                	test   ebx,ebx
c0028136:	0f 95 c3             	setne  bl
c0028139:	0f b6 db             	movzx  ebx,bl
c002813c:	09 fb                	or     ebx,edi
c002813e:	89 f1                	mov    ecx,esi
c0028140:	d3 ea                	shr    edx,cl
c0028142:	31 c0                	xor    eax,eax
c0028144:	eb 0d                	jmp    c0028153 <__divdf3+0x32f>
c0028146:	b8 ff 07 00 00       	mov    eax,0x7ff
c002814b:	eb 02                	jmp    c002814f <__divdf3+0x32b>
c002814d:	31 c0                	xor    eax,eax
c002814f:	31 db                	xor    ebx,ebx
c0028151:	31 d2                	xor    edx,edx
c0028153:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028156:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028159:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002815f:	09 c8                	or     eax,ecx
c0028161:	c1 e0 14             	shl    eax,0x14
c0028164:	89 d1                	mov    ecx,edx
c0028166:	c1 e9 0b             	shr    ecx,0xb
c0028169:	09 c8                	or     eax,ecx
c002816b:	89 c6                	mov    esi,eax
c002816d:	89 d9                	mov    ecx,ebx
c002816f:	c1 e9 0b             	shr    ecx,0xb
c0028172:	c1 e2 15             	shl    edx,0x15
c0028175:	09 ca                	or     edx,ecx
c0028177:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002817d:	0f 95 c0             	setne  al
c0028180:	09 c1                	or     ecx,eax
c0028182:	83 e1 01             	and    ecx,0x1
c0028185:	c1 eb 0a             	shr    ebx,0xa
c0028188:	21 cb                	and    ebx,ecx
c002818a:	01 d3                	add    ebx,edx
c002818c:	89 d8                	mov    eax,ebx
c002818e:	83 d6 00             	adc    esi,0x0
c0028191:	89 f2                	mov    edx,esi
c0028193:	89 c7                	mov    edi,eax
c0028195:	89 d1                	mov    ecx,edx
c0028197:	89 f8                	mov    eax,edi
c0028199:	89 ca                	mov    edx,ecx
c002819b:	83 c4 2c             	add    esp,0x2c
c002819e:	5b                   	pop    ebx
c002819f:	5e                   	pop    esi
c00281a0:	5f                   	pop    edi
c00281a1:	5d                   	pop    ebp
c00281a2:	c3                   	ret    

c00281a3 <__floatsidf>:
c00281a3:	55                   	push   ebp
c00281a4:	89 e5                	mov    ebp,esp
c00281a6:	56                   	push   esi
c00281a7:	53                   	push   ebx
c00281a8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281ab:	85 db                	test   ebx,ebx
c00281ad:	7e 15                	jle    c00281c4 <__floatsidf+0x21>
c00281af:	0f bd cb             	bsr    ecx,ebx
c00281b2:	83 f1 1f             	xor    ecx,0x1f
c00281b5:	d3 e3                	shl    ebx,cl
c00281b7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00281bd:	b8 1e 04 00 00       	mov    eax,0x41e
c00281c2:	eb 21                	jmp    c00281e5 <__floatsidf+0x42>
c00281c4:	b8 00 00 00 00       	mov    eax,0x0
c00281c9:	ba 00 00 00 00       	mov    edx,0x0
c00281ce:	74 2a                	je     c00281fa <__floatsidf+0x57>
c00281d0:	f7 db                	neg    ebx
c00281d2:	0f bd cb             	bsr    ecx,ebx
c00281d5:	83 f1 1f             	xor    ecx,0x1f
c00281d8:	d3 e3                	shl    ebx,cl
c00281da:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00281e0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00281e5:	29 c8                	sub    eax,ecx
c00281e7:	c1 e0 14             	shl    eax,0x14
c00281ea:	89 c1                	mov    ecx,eax
c00281ec:	89 de                	mov    esi,ebx
c00281ee:	c1 ee 0b             	shr    esi,0xb
c00281f1:	09 f1                	or     ecx,esi
c00281f3:	89 ca                	mov    edx,ecx
c00281f5:	c1 e3 15             	shl    ebx,0x15
c00281f8:	89 d8                	mov    eax,ebx
c00281fa:	5b                   	pop    ebx
c00281fb:	5e                   	pop    esi
c00281fc:	5d                   	pop    ebp
c00281fd:	c3                   	ret    

c00281fe <__floatunsidf>:
c00281fe:	55                   	push   ebp
c00281ff:	89 e5                	mov    ebp,esp
c0028201:	56                   	push   esi
c0028202:	53                   	push   ebx
c0028203:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028206:	85 db                	test   ebx,ebx
c0028208:	74 2a                	je     c0028234 <__floatunsidf+0x36>
c002820a:	0f bd cb             	bsr    ecx,ebx
c002820d:	83 f1 1f             	xor    ecx,0x1f
c0028210:	d3 e3                	shl    ebx,cl
c0028212:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028218:	b8 1e 04 00 00       	mov    eax,0x41e
c002821d:	29 c8                	sub    eax,ecx
c002821f:	c1 e0 14             	shl    eax,0x14
c0028222:	89 c1                	mov    ecx,eax
c0028224:	89 de                	mov    esi,ebx
c0028226:	c1 ee 0b             	shr    esi,0xb
c0028229:	09 f1                	or     ecx,esi
c002822b:	89 ca                	mov    edx,ecx
c002822d:	c1 e3 15             	shl    ebx,0x15
c0028230:	89 d8                	mov    eax,ebx
c0028232:	eb 04                	jmp    c0028238 <__floatunsidf+0x3a>
c0028234:	31 c0                	xor    eax,eax
c0028236:	31 d2                	xor    edx,edx
c0028238:	5b                   	pop    ebx
c0028239:	5e                   	pop    esi
c002823a:	5d                   	pop    ebp
c002823b:	c3                   	ret    

c002823c <__fixdfsi>:
c002823c:	55                   	push   ebp
c002823d:	89 e5                	mov    ebp,esp
c002823f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028242:	89 d1                	mov    ecx,edx
c0028244:	c1 e1 0b             	shl    ecx,0xb
c0028247:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002824d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028250:	c1 e8 15             	shr    eax,0x15
c0028253:	09 c1                	or     ecx,eax
c0028255:	c1 fa 14             	sar    edx,0x14
c0028258:	78 1f                	js     c0028279 <__fixdfsi+0x3d>
c002825a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028260:	31 c0                	xor    eax,eax
c0028262:	83 fa 1e             	cmp    edx,0x1e
c0028265:	77 40                	ja     c00282a7 <__fixdfsi+0x6b>
c0028267:	89 c8                	mov    eax,ecx
c0028269:	0d 00 00 00 80       	or     eax,0x80000000
c002826e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028273:	29 d1                	sub    ecx,edx
c0028275:	d3 e8                	shr    eax,cl
c0028277:	eb 2e                	jmp    c00282a7 <__fixdfsi+0x6b>
c0028279:	31 c0                	xor    eax,eax
c002827b:	81 c2 01 04 00 00    	add    edx,0x401
c0028281:	78 24                	js     c00282a7 <__fixdfsi+0x6b>
c0028283:	83 fa 1e             	cmp    edx,0x1e
c0028286:	7e 09                	jle    c0028291 <__fixdfsi+0x55>
c0028288:	83 fa 1f             	cmp    edx,0x1f
c002828b:	75 18                	jne    c00282a5 <__fixdfsi+0x69>
c002828d:	85 c9                	test   ecx,ecx
c002828f:	75 14                	jne    c00282a5 <__fixdfsi+0x69>
c0028291:	89 c8                	mov    eax,ecx
c0028293:	0d 00 00 00 80       	or     eax,0x80000000
c0028298:	b9 1f 00 00 00       	mov    ecx,0x1f
c002829d:	29 d1                	sub    ecx,edx
c002829f:	d3 e8                	shr    eax,cl
c00282a1:	f7 d8                	neg    eax
c00282a3:	eb 02                	jmp    c00282a7 <__fixdfsi+0x6b>
c00282a5:	31 c0                	xor    eax,eax
c00282a7:	5d                   	pop    ebp
c00282a8:	c3                   	ret    

c00282a9 <__fixunsdfsi>:
c00282a9:	55                   	push   ebp
c00282aa:	89 e5                	mov    ebp,esp
c00282ac:	53                   	push   ebx
c00282ad:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00282b0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282b3:	89 d3                	mov    ebx,edx
c00282b5:	c1 fb 14             	sar    ebx,0x14
c00282b8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00282be:	31 c0                	xor    eax,eax
c00282c0:	83 fb 1f             	cmp    ebx,0x1f
c00282c3:	77 1d                	ja     c00282e2 <__fixunsdfsi+0x39>
c00282c5:	89 d0                	mov    eax,edx
c00282c7:	c1 e0 0b             	shl    eax,0xb
c00282ca:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00282cf:	c1 e9 15             	shr    ecx,0x15
c00282d2:	09 c8                	or     eax,ecx
c00282d4:	0d 00 00 00 80       	or     eax,0x80000000
c00282d9:	b9 1f 00 00 00       	mov    ecx,0x1f
c00282de:	29 d9                	sub    ecx,ebx
c00282e0:	d3 e8                	shr    eax,cl
c00282e2:	5b                   	pop    ebx
c00282e3:	5d                   	pop    ebp
c00282e4:	c3                   	ret    

c00282e5 <__cmpdf2>:
c00282e5:	55                   	push   ebp
c00282e6:	89 e5                	mov    ebp,esp
c00282e8:	57                   	push   edi
c00282e9:	56                   	push   esi
c00282ea:	53                   	push   ebx
c00282eb:	83 ec 0c             	sub    esp,0xc
c00282ee:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00282f1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00282f4:	89 ca                	mov    edx,ecx
c00282f6:	c1 ea 14             	shr    edx,0x14
c00282f9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00282ff:	89 cb                	mov    ebx,ecx
c0028301:	c1 fb 1f             	sar    ebx,0x1f
c0028304:	31 da                	xor    edx,ebx
c0028306:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028309:	89 df                	mov    edi,ebx
c002830b:	c1 e7 0b             	shl    edi,0xb
c002830e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028311:	c1 e1 0b             	shl    ecx,0xb
c0028314:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002831a:	c1 eb 15             	shr    ebx,0x15
c002831d:	09 d9                	or     ecx,ebx
c002831f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028322:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028325:	89 ce                	mov    esi,ecx
c0028327:	c1 ee 14             	shr    esi,0x14
c002832a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028330:	89 cb                	mov    ebx,ecx
c0028332:	c1 fb 1f             	sar    ebx,0x1f
c0028335:	31 de                	xor    esi,ebx
c0028337:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002833a:	89 df                	mov    edi,ebx
c002833c:	c1 e7 0b             	shl    edi,0xb
c002833f:	c1 e1 0b             	shl    ecx,0xb
c0028342:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028348:	c1 eb 15             	shr    ebx,0x15
c002834b:	09 d9                	or     ecx,ebx
c002834d:	89 d3                	mov    ebx,edx
c002834f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028355:	43                   	inc    ebx
c0028356:	83 fb 01             	cmp    ebx,0x1
c0028359:	77 08                	ja     c0028363 <__cmpdf2+0x7e>
c002835b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002835e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028361:	75 68                	jne    c00283cb <__cmpdf2+0xe6>
c0028363:	89 f3                	mov    ebx,esi
c0028365:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002836b:	43                   	inc    ebx
c002836c:	83 fb 01             	cmp    ebx,0x1
c002836f:	77 06                	ja     c0028377 <__cmpdf2+0x92>
c0028371:	89 fb                	mov    ebx,edi
c0028373:	09 cb                	or     ebx,ecx
c0028375:	75 54                	jne    c00283cb <__cmpdf2+0xe6>
c0028377:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002837a:	09 f8                	or     eax,edi
c002837c:	09 c8                	or     eax,ecx
c002837e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028381:	75 12                	jne    c0028395 <__cmpdf2+0xb0>
c0028383:	8d 42 01             	lea    eax,[edx+0x1]
c0028386:	83 f8 01             	cmp    eax,0x1
c0028389:	77 0a                	ja     c0028395 <__cmpdf2+0xb0>
c002838b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002838e:	31 c0                	xor    eax,eax
c0028390:	83 fb 01             	cmp    ebx,0x1
c0028393:	76 36                	jbe    c00283cb <__cmpdf2+0xe6>
c0028395:	b8 01 00 00 00       	mov    eax,0x1
c002839a:	39 f2                	cmp    edx,esi
c002839c:	7f 2d                	jg     c00283cb <__cmpdf2+0xe6>
c002839e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00283a3:	7c 26                	jl     c00283cb <__cmpdf2+0xe6>
c00283a5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00283a8:	77 07                	ja     c00283b1 <__cmpdf2+0xcc>
c00283aa:	72 16                	jb     c00283c2 <__cmpdf2+0xdd>
c00283ac:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00283af:	76 0a                	jbe    c00283bb <__cmpdf2+0xd6>
c00283b1:	89 d0                	mov    eax,edx
c00283b3:	c1 f8 1f             	sar    eax,0x1f
c00283b6:	83 c8 01             	or     eax,0x1
c00283b9:	eb 10                	jmp    c00283cb <__cmpdf2+0xe6>
c00283bb:	b8 00 00 00 00       	mov    eax,0x0
c00283c0:	73 09                	jae    c00283cb <__cmpdf2+0xe6>
c00283c2:	89 d0                	mov    eax,edx
c00283c4:	c1 f8 1f             	sar    eax,0x1f
c00283c7:	83 e0 02             	and    eax,0x2
c00283ca:	48                   	dec    eax
c00283cb:	83 c4 0c             	add    esp,0xc
c00283ce:	5b                   	pop    ebx
c00283cf:	5e                   	pop    esi
c00283d0:	5f                   	pop    edi
c00283d1:	5d                   	pop    ebp
c00283d2:	c3                   	ret    

c00283d3 <__eqdf2>:
c00283d3:	55                   	push   ebp
c00283d4:	89 e5                	mov    ebp,esp
c00283d6:	50                   	push   eax
c00283d7:	6a 01                	push   0x1
c00283d9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00283dc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00283df:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00283e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00283e5:	e8 fb fe ff ff       	call   c00282e5 <__cmpdf2>
c00283ea:	83 c4 18             	add    esp,0x18
c00283ed:	c9                   	leave  
c00283ee:	c3                   	ret    

c00283ef <__nedf2>:
c00283ef:	eb e2                	jmp    c00283d3 <__eqdf2>

c00283f1 <__gtdf2>:
c00283f1:	55                   	push   ebp
c00283f2:	89 e5                	mov    ebp,esp
c00283f4:	50                   	push   eax
c00283f5:	6a ff                	push   0xffffffff
c00283f7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00283fa:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00283fd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028400:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028403:	e8 dd fe ff ff       	call   c00282e5 <__cmpdf2>
c0028408:	83 c4 18             	add    esp,0x18
c002840b:	c9                   	leave  
c002840c:	c3                   	ret    

c002840d <__gedf2>:
c002840d:	eb e2                	jmp    c00283f1 <__gtdf2>

c002840f <__ltdf2>:
c002840f:	eb c2                	jmp    c00283d3 <__eqdf2>

c0028411 <__ledf2>:
c0028411:	eb c0                	jmp    c00283d3 <__eqdf2>

c0028413 <__truncdfsf2>:
c0028413:	55                   	push   ebp
c0028414:	89 e5                	mov    ebp,esp
c0028416:	57                   	push   edi
c0028417:	56                   	push   esi
c0028418:	53                   	push   ebx
c0028419:	83 ec 0c             	sub    esp,0xc
c002841c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002841f:	89 d1                	mov    ecx,edx
c0028421:	c1 f9 14             	sar    ecx,0x14
c0028424:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028427:	89 df                	mov    edi,ebx
c0028429:	c1 e7 0b             	shl    edi,0xb
c002842c:	89 d0                	mov    eax,edx
c002842e:	c1 e0 0b             	shl    eax,0xb
c0028431:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028436:	c1 eb 15             	shr    ebx,0x15
c0028439:	09 d8                	or     eax,ebx
c002843b:	89 cb                	mov    ebx,ecx
c002843d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028443:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028449:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002844f:	0f 86 9e 00 00 00    	jbe    c00284f3 <__truncdfsf2+0xe0>
c0028455:	85 db                	test   ebx,ebx
c0028457:	75 0a                	jne    c0028463 <__truncdfsf2+0x50>
c0028459:	c1 fa 17             	sar    edx,0x17
c002845c:	30 d2                	xor    dl,dl
c002845e:	e9 84 00 00 00       	jmp    c00284e7 <__truncdfsf2+0xd4>
c0028463:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028469:	83 fe 83             	cmp    esi,0xffffff83
c002846c:	7d 4b                	jge    c00284b9 <__truncdfsf2+0xa6>
c002846e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028473:	29 f1                	sub    ecx,esi
c0028475:	83 f9 1f             	cmp    ecx,0x1f
c0028478:	7f 6b                	jg     c00284e5 <__truncdfsf2+0xd2>
c002847a:	0d 00 00 00 80       	or     eax,0x80000000
c002847f:	89 c3                	mov    ebx,eax
c0028481:	d3 eb                	shr    ebx,cl
c0028483:	be 01 00 00 00       	mov    esi,0x1
c0028488:	d3 e6                	shl    esi,cl
c002848a:	4e                   	dec    esi
c002848b:	21 f0                	and    eax,esi
c002848d:	09 f8                	or     eax,edi
c002848f:	0f 95 c0             	setne  al
c0028492:	0f b6 c0             	movzx  eax,al
c0028495:	09 c3                	or     ebx,eax
c0028497:	89 d9                	mov    ecx,ebx
c0028499:	c1 e9 08             	shr    ecx,0x8
c002849c:	f6 c3 7f             	test   bl,0x7f
c002849f:	0f 95 c0             	setne  al
c00284a2:	09 c8                	or     eax,ecx
c00284a4:	83 e0 01             	and    eax,0x1
c00284a7:	c1 eb 07             	shr    ebx,0x7
c00284aa:	21 c3                	and    ebx,eax
c00284ac:	81 e2 00 00 00 80    	and    edx,0x80000000
c00284b2:	09 d1                	or     ecx,edx
c00284b4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00284b7:	eb 76                	jmp    c002852f <__truncdfsf2+0x11c>
c00284b9:	83 c6 80             	add    esi,0xffffff80
c00284bc:	7e 1d                	jle    c00284db <__truncdfsf2+0xc8>
c00284be:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00284c4:	75 0b                	jne    c00284d1 <__truncdfsf2+0xbe>
c00284c6:	09 f8                	or     eax,edi
c00284c8:	74 09                	je     c00284d3 <__truncdfsf2+0xc0>
c00284ca:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00284cf:	eb 02                	jmp    c00284d3 <__truncdfsf2+0xc0>
c00284d1:	31 c0                	xor    eax,eax
c00284d3:	c1 fa 17             	sar    edx,0x17
c00284d6:	80 ca ff             	or     dl,0xff
c00284d9:	eb 0e                	jmp    c00284e9 <__truncdfsf2+0xd6>
c00284db:	c1 fa 1f             	sar    edx,0x1f
c00284de:	c1 e2 08             	shl    edx,0x8
c00284e1:	09 ca                	or     edx,ecx
c00284e3:	eb 04                	jmp    c00284e9 <__truncdfsf2+0xd6>
c00284e5:	31 d2                	xor    edx,edx
c00284e7:	31 c0                	xor    eax,eax
c00284e9:	c1 e2 17             	shl    edx,0x17
c00284ec:	c1 e8 08             	shr    eax,0x8
c00284ef:	09 d0                	or     eax,edx
c00284f1:	eb 3c                	jmp    c002852f <__truncdfsf2+0x11c>
c00284f3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00284f9:	89 ca                	mov    edx,ecx
c00284fb:	c1 fa 0b             	sar    edx,0xb
c00284fe:	c1 e2 08             	shl    edx,0x8
c0028501:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028504:	31 db                	xor    ebx,ebx
c0028506:	85 ff                	test   edi,edi
c0028508:	0f 95 c3             	setne  bl
c002850b:	09 d8                	or     eax,ebx
c002850d:	89 c3                	mov    ebx,eax
c002850f:	c1 eb 08             	shr    ebx,0x8
c0028512:	a8 7f                	test   al,0x7f
c0028514:	0f 95 c2             	setne  dl
c0028517:	89 d6                	mov    esi,edx
c0028519:	09 de                	or     esi,ebx
c002851b:	83 e6 01             	and    esi,0x1
c002851e:	c1 e8 07             	shr    eax,0x7
c0028521:	21 f0                	and    eax,esi
c0028523:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028526:	09 ca                	or     edx,ecx
c0028528:	c1 e2 17             	shl    edx,0x17
c002852b:	09 da                	or     edx,ebx
c002852d:	01 d0                	add    eax,edx
c002852f:	83 c4 0c             	add    esp,0xc
c0028532:	5b                   	pop    ebx
c0028533:	5e                   	pop    esi
c0028534:	5f                   	pop    edi
c0028535:	5d                   	pop    ebp
c0028536:	c3                   	ret    

c0028537 <__extendsfdf2>:
c0028537:	55                   	push   ebp
c0028538:	89 e5                	mov    ebp,esp
c002853a:	57                   	push   edi
c002853b:	56                   	push   esi
c002853c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002853f:	89 d1                	mov    ecx,edx
c0028541:	c1 f9 17             	sar    ecx,0x17
c0028544:	c1 e2 08             	shl    edx,0x8
c0028547:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002854d:	89 c8                	mov    eax,ecx
c002854f:	80 e4 f8             	and    ah,0xf8
c0028552:	8d 71 01             	lea    esi,[ecx+0x1]
c0028555:	81 e6 fe 00 00 00    	and    esi,0xfe
c002855b:	75 27                	jne    c0028584 <__extendsfdf2+0x4d>
c002855d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028563:	75 18                	jne    c002857d <__extendsfdf2+0x46>
c0028565:	85 d2                	test   edx,edx
c0028567:	74 20                	je     c0028589 <__extendsfdf2+0x52>
c0028569:	41                   	inc    ecx
c002856a:	01 d2                	add    edx,edx
c002856c:	79 fb                	jns    c0028569 <__extendsfdf2+0x32>
c002856e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028574:	29 c8                	sub    eax,ecx
c0028576:	05 81 03 00 00       	add    eax,0x381
c002857b:	eb 0c                	jmp    c0028589 <__extendsfdf2+0x52>
c002857d:	05 00 07 00 00       	add    eax,0x700
c0028582:	eb 05                	jmp    c0028589 <__extendsfdf2+0x52>
c0028584:	05 80 03 00 00       	add    eax,0x380
c0028589:	c1 e0 14             	shl    eax,0x14
c002858c:	89 c1                	mov    ecx,eax
c002858e:	89 d0                	mov    eax,edx
c0028590:	c1 e8 0b             	shr    eax,0xb
c0028593:	09 c1                	or     ecx,eax
c0028595:	c1 e2 15             	shl    edx,0x15
c0028598:	89 d0                	mov    eax,edx
c002859a:	89 ca                	mov    edx,ecx
c002859c:	5e                   	pop    esi
c002859d:	5f                   	pop    edi
c002859e:	5d                   	pop    ebp
c002859f:	c3                   	ret    

c00285a0 <fabs>:
c00285a0:	83 ec 0c             	sub    esp,0xc
c00285a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00285aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00285ae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00285b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00285b7:	dd 04 24             	fld    QWORD PTR [esp]
c00285ba:	83 c4 0c             	add    esp,0xc
c00285bd:	c3                   	ret    
c00285be:	66 90                	xchg   ax,ax

c00285c0 <lrint>:
c00285c0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00285c4:	83 ec 04             	sub    esp,0x4
c00285c7:	db 1c 24             	fistp  DWORD PTR [esp]
c00285ca:	58                   	pop    eax
c00285cb:	c3                   	ret    

c00285cc <lrintf>:
c00285cc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00285d0:	83 ec 04             	sub    esp,0x4
c00285d3:	db 1c 24             	fistp  DWORD PTR [esp]
c00285d6:	58                   	pop    eax
c00285d7:	c3                   	ret    

Disassembly of section .init:

c00285d8 <_init>:
c00285d8:	55                   	push   ebp
c00285d9:	89 e5                	mov    ebp,esp
c00285db:	e8 38 7b fd ff       	call   c0000118 <frame_dummy>
c00285e0:	e8 63 e0 ff ff       	call   c0026648 <__do_global_ctors_aux>
c00285e5:	5d                   	pop    ebp
c00285e6:	c3                   	ret    

Disassembly of section .fini:

c00285e7 <_fini>:
c00285e7:	55                   	push   ebp
c00285e8:	89 e5                	mov    ebp,esp
c00285ea:	e8 b9 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00285ef:	5d                   	pop    ebp
c00285f0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00285f2 <Computer::~Computer()>:
c00285f2:	83 ec 0c             	sub    esp,0xc
c00285f5:	ba 28 a1 02 c0       	mov    edx,0xc002a128
c00285fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285fe:	89 10                	mov    DWORD PTR [eax],edx
c0028600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028604:	83 ec 0c             	sub    esp,0xc
c0028607:	50                   	push   eax
c0028608:	e8 89 bb fe ff       	call   c0014196 <Device::~Device()>
c002860d:	83 c4 10             	add    esp,0x10
c0028610:	90                   	nop
c0028611:	83 c4 0c             	add    esp,0xc
c0028614:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028616 <Computer::~Computer()>:
c0028616:	83 ec 0c             	sub    esp,0xc
c0028619:	83 ec 0c             	sub    esp,0xc
c002861c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028620:	e8 cd ff ff ff       	call   c00285f2 <Computer::~Computer()>
c0028625:	83 c4 10             	add    esp,0x10
c0028628:	83 ec 08             	sub    esp,0x8
c002862b:	68 ec 01 00 00       	push   0x1ec
c0028630:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028634:	e8 84 a7 fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0028639:	83 c4 10             	add    esp,0x10
c002863c:	83 c4 0c             	add    esp,0xc
c002863f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028640 <idleCommon()>:
c0028640:	83 ec 0c             	sub    esp,0xc
c0028643:	e8 1c 57 ff ff       	call   c001dd64 <lockScheduler()>
c0028648:	e8 53 5a ff ff       	call   c001e0a0 <schedule()>
c002864d:	83 c4 0c             	add    esp,0xc
c0028650:	e9 11 57 ff ff       	jmp    c001dd66 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028656 <LinkedList<UnixFile>::~LinkedList()>:
c0028656:	90                   	nop
c0028657:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028658 <LinkedList<UnixFile>::LinkedList()>:
c0028658:	83 ec 0c             	sub    esp,0xc
c002865b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002865f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028669:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028674:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002867b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028689:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028694:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002869b:	83 ec 0c             	sub    esp,0xc
c002869e:	68 e6 a3 02 c0       	push   0xc002a3e6
c00286a3:	e8 f5 a7 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00286a8:	83 c4 10             	add    esp,0x10
c00286ab:	90                   	nop
c00286ac:	83 c4 0c             	add    esp,0xc
c00286af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00286b0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00286b0:	83 ec 0c             	sub    esp,0xc
c00286b3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00286b8:	75 10                	jne    c00286ca <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00286ba:	83 ec 0c             	sub    esp,0xc
c00286bd:	68 00 a4 02 c0       	push   0xc002a400
c00286c2:	e8 c2 1e ff ff       	call   c001a589 <Krnl::panic(char const*)>
c00286c7:	83 c4 10             	add    esp,0x10
c00286ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00286d0:	85 c0                	test   eax,eax
c00286d2:	74 34                	je     c0028708 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00286d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286db:	85 c0                	test   eax,eax
c00286dd:	74 29                	je     c0028708 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00286df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00286ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286f5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028706:	eb 65                	jmp    c002876d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870c:	8b 00                	mov    eax,DWORD PTR [eax]
c002870e:	85 c0                	test   eax,eax
c0028710:	75 4b                	jne    c002875d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028716:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028719:	85 c0                	test   eax,eax
c002871b:	75 40                	jne    c002875d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002871d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028721:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028725:	89 10                	mov    DWORD PTR [eax],edx
c0028727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002872f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028736:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028739:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028744:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028747:	85 c0                	test   eax,eax
c0028749:	74 22                	je     c002876d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002874b:	83 ec 0c             	sub    esp,0xc
c002874e:	68 22 a4 02 c0       	push   0xc002a422
c0028753:	e8 31 1e ff ff       	call   c001a589 <Krnl::panic(char const*)>
c0028758:	83 c4 10             	add    esp,0x10
c002875b:	eb 10                	jmp    c002876d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002875d:	83 ec 0c             	sub    esp,0xc
c0028760:	68 2c a4 02 c0       	push   0xc002a42c
c0028765:	e8 1f 1e ff ff       	call   c001a589 <Krnl::panic(char const*)>
c002876a:	83 c4 10             	add    esp,0x10
c002876d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028771:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028774:	8d 50 01             	lea    edx,[eax+0x1]
c0028777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002877e:	90                   	nop
c002877f:	83 c4 0c             	add    esp,0xc
c0028782:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028784 <LinkedList<UnixFile>::getFirstElement()>:
c0028784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028788:	8b 00                	mov    eax,DWORD PTR [eax]
c002878a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002878c <LinkedList<UnixFile>::removeFirst()>:
c002878c:	83 ec 0c             	sub    esp,0xc
c002878f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028793:	8b 00                	mov    eax,DWORD PTR [eax]
c0028795:	85 c0                	test   eax,eax
c0028797:	75 12                	jne    c00287ab <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028799:	83 ec 0c             	sub    esp,0xc
c002879c:	68 38 a4 02 c0       	push   0xc002a438
c00287a1:	e8 e3 1d ff ff       	call   c001a589 <Krnl::panic(char const*)>
c00287a6:	83 c4 10             	add    esp,0x10
c00287a9:	eb 7e                	jmp    c0028829 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00287ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287b5:	85 c0                	test   eax,eax
c00287b7:	74 10                	je     c00287c9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00287b9:	83 ec 0c             	sub    esp,0xc
c00287bc:	68 83 a4 02 c0       	push   0xc002a483
c00287c1:	e8 c3 1d ff ff       	call   c001a589 <Krnl::panic(char const*)>
c00287c6:	83 c4 10             	add    esp,0x10
c00287c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00287cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287d2:	85 c0                	test   eax,eax
c00287d4:	75 33                	jne    c0028809 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00287d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287f2:	83 f8 01             	cmp    eax,0x1
c00287f5:	74 21                	je     c0028818 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00287f7:	83 ec 0c             	sub    esp,0xc
c00287fa:	68 5c a4 02 c0       	push   0xc002a45c
c00287ff:	e8 85 1d ff ff       	call   c001a589 <Krnl::panic(char const*)>
c0028804:	83 c4 10             	add    esp,0x10
c0028807:	eb 0f                	jmp    c0028818 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880d:	8b 00                	mov    eax,DWORD PTR [eax]
c002880f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028816:	89 10                	mov    DWORD PTR [eax],edx
c0028818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002881f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028826:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028829:	83 c4 0c             	add    esp,0xc
c002882c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002882e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002882e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028832:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028835:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028836 <DriverlessDevice::~DriverlessDevice()>:
c0028836:	ba e4 ab 02 c0       	mov    edx,0xc002abe4
c002883b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002883f:	89 10                	mov    DWORD PTR [eax],edx
c0028841:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028845:	50                   	push   eax
c0028846:	e8 4b b9 fe ff       	call   c0014196 <Device::~Device()>
c002884b:	83 c4 04             	add    esp,0x4
c002884e:	90                   	nop
c002884f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028850 <DriverlessDevice::~DriverlessDevice()>:
c0028850:	83 ec 0c             	sub    esp,0xc
c0028853:	83 ec 0c             	sub    esp,0xc
c0028856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002885a:	e8 d7 ff ff ff       	call   c0028836 <DriverlessDevice::~DriverlessDevice()>
c002885f:	83 c4 10             	add    esp,0x10
c0028862:	83 ec 08             	sub    esp,0x8
c0028865:	68 58 01 00 00       	push   0x158
c002886a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002886e:	e8 4a a5 fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0028873:	83 c4 10             	add    esp,0x10
c0028876:	83 c4 0c             	add    esp,0xc
c0028879:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002887a <LinkedList<Device>::addElement(Device*)>:
c002887a:	83 ec 0c             	sub    esp,0xc
c002887d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028882:	75 10                	jne    c0028894 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028884:	83 ec 0c             	sub    esp,0xc
c0028887:	68 00 a4 02 c0       	push   0xc002a400
c002888c:	e8 f8 1c ff ff       	call   c001a589 <Krnl::panic(char const*)>
c0028891:	83 c4 10             	add    esp,0x10
c0028894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028898:	8b 00                	mov    eax,DWORD PTR [eax]
c002889a:	85 c0                	test   eax,eax
c002889c:	74 3a                	je     c00288d8 <LinkedList<Device>::addElement(Device*)+0x5e>
c002889e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288a5:	85 c0                	test   eax,eax
c00288a7:	74 2f                	je     c00288d8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00288a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288b4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00288ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288c2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288cc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00288d6:	eb 68                	jmp    c0028940 <LinkedList<Device>::addElement(Device*)+0xc6>
c00288d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00288de:	85 c0                	test   eax,eax
c00288e0:	75 4e                	jne    c0028930 <LinkedList<Device>::addElement(Device*)+0xb6>
c00288e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288e9:	85 c0                	test   eax,eax
c00288eb:	75 43                	jne    c0028930 <LinkedList<Device>::addElement(Device*)+0xb6>
c00288ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288f5:	89 10                	mov    DWORD PTR [eax],edx
c00288f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00288ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028906:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028909:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028917:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002891a:	85 c0                	test   eax,eax
c002891c:	74 22                	je     c0028940 <LinkedList<Device>::addElement(Device*)+0xc6>
c002891e:	83 ec 0c             	sub    esp,0xc
c0028921:	68 22 a4 02 c0       	push   0xc002a422
c0028926:	e8 5e 1c ff ff       	call   c001a589 <Krnl::panic(char const*)>
c002892b:	83 c4 10             	add    esp,0x10
c002892e:	eb 10                	jmp    c0028940 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028930:	83 ec 0c             	sub    esp,0xc
c0028933:	68 2c a4 02 c0       	push   0xc002a42c
c0028938:	e8 4c 1c ff ff       	call   c001a589 <Krnl::panic(char const*)>
c002893d:	83 c4 10             	add    esp,0x10
c0028940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028944:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028947:	8d 50 01             	lea    edx,[eax+0x1]
c002894a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028951:	90                   	nop
c0028952:	83 c4 0c             	add    esp,0xc
c0028955:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028956 <LinkedList<Device>::LinkedList()>:
c0028956:	83 ec 0c             	sub    esp,0xc
c0028959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028967:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028972:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028987:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002898e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028992:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028999:	83 ec 0c             	sub    esp,0xc
c002899c:	68 e6 a3 02 c0       	push   0xc002a3e6
c00289a1:	e8 f7 a4 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c00289a6:	83 c4 10             	add    esp,0x10
c00289a9:	90                   	nop
c00289aa:	83 c4 0c             	add    esp,0xc
c00289ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00289ae <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00289ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00289b4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00289b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00289b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00289bc:	85 c0                	test   eax,eax
c00289be:	75 0e                	jne    c00289ce <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00289c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289c7:	85 c0                	test   eax,eax
c00289c9:	75 03                	jne    c00289ce <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00289cb:	b0 01                	mov    al,0x1
c00289cd:	c3                   	ret    
c00289ce:	b0 00                	mov    al,0x0
c00289d0:	90                   	nop
c00289d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00289d2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00289d2:	83 ec 0c             	sub    esp,0xc
c00289d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00289db:	85 c0                	test   eax,eax
c00289dd:	75 15                	jne    c00289f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00289df:	83 ec 0c             	sub    esp,0xc
c00289e2:	68 38 a4 02 c0       	push   0xc002a438
c00289e7:	e8 9d 1b ff ff       	call   c001a589 <Krnl::panic(char const*)>
c00289ec:	83 c4 10             	add    esp,0x10
c00289ef:	e9 88 00 00 00       	jmp    c0028a7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00289f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289fb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00289fe:	85 c0                	test   eax,eax
c0028a00:	0f 95 c0             	setne  al
c0028a03:	84 c0                	test   al,al
c0028a05:	74 10                	je     c0028a17 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028a07:	83 ec 0c             	sub    esp,0xc
c0028a0a:	68 83 a4 02 c0       	push   0xc002a483
c0028a0f:	e8 75 1b ff ff       	call   c001a589 <Krnl::panic(char const*)>
c0028a14:	83 c4 10             	add    esp,0x10
c0028a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a1d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a20:	85 c0                	test   eax,eax
c0028a22:	0f 94 c0             	sete   al
c0028a25:	84 c0                	test   al,al
c0028a27:	74 33                	je     c0028a5c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a42:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a45:	83 f8 01             	cmp    eax,0x1
c0028a48:	74 21                	je     c0028a6b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028a4a:	83 ec 0c             	sub    esp,0xc
c0028a4d:	68 5c a4 02 c0       	push   0xc002a45c
c0028a52:	e8 32 1b ff ff       	call   c001a589 <Krnl::panic(char const*)>
c0028a57:	83 c4 10             	add    esp,0x10
c0028a5a:	eb 0f                	jmp    c0028a6b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a60:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a62:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a69:	89 10                	mov    DWORD PTR [eax],edx
c0028a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a72:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a79:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a7c:	83 c4 0c             	add    esp,0xc
c0028a7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028a80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028a80:	83 ec 0c             	sub    esp,0xc
c0028a83:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028a88:	75 10                	jne    c0028a9a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028a8a:	83 ec 0c             	sub    esp,0xc
c0028a8d:	68 00 a4 02 c0       	push   0xc002a400
c0028a92:	e8 f2 1a ff ff       	call   c001a589 <Krnl::panic(char const*)>
c0028a97:	83 c4 10             	add    esp,0x10
c0028a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aa0:	85 c0                	test   eax,eax
c0028aa2:	74 34                	je     c0028ad8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028aab:	85 c0                	test   eax,eax
c0028aad:	74 29                	je     c0028ad8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ab6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028aba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ac5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028acc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028acf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ad6:	eb 65                	jmp    c0028b3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028adc:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ade:	85 c0                	test   eax,eax
c0028ae0:	75 4b                	jne    c0028b2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ae9:	85 c0                	test   eax,eax
c0028aeb:	75 40                	jne    c0028b2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028af5:	89 10                	mov    DWORD PTR [eax],edx
c0028af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028afb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028aff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b09:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b17:	85 c0                	test   eax,eax
c0028b19:	74 22                	je     c0028b3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b1b:	83 ec 0c             	sub    esp,0xc
c0028b1e:	68 22 a4 02 c0       	push   0xc002a422
c0028b23:	e8 61 1a ff ff       	call   c001a589 <Krnl::panic(char const*)>
c0028b28:	83 c4 10             	add    esp,0x10
c0028b2b:	eb 10                	jmp    c0028b3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b2d:	83 ec 0c             	sub    esp,0xc
c0028b30:	68 2c a4 02 c0       	push   0xc002a42c
c0028b35:	e8 4f 1a ff ff       	call   c001a589 <Krnl::panic(char const*)>
c0028b3a:	83 c4 10             	add    esp,0x10
c0028b3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b41:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b44:	8d 50 01             	lea    edx,[eax+0x1]
c0028b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b4e:	90                   	nop
c0028b4f:	83 c4 0c             	add    esp,0xc
c0028b52:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028b54 <ACPI::~ACPI()>:
c0028b54:	83 ec 0c             	sub    esp,0xc
c0028b57:	ba 50 b5 02 c0       	mov    edx,0xc002b550
c0028b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b60:	89 10                	mov    DWORD PTR [eax],edx
c0028b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b66:	83 ec 0c             	sub    esp,0xc
c0028b69:	50                   	push   eax
c0028b6a:	e8 27 b6 fe ff       	call   c0014196 <Device::~Device()>
c0028b6f:	83 c4 10             	add    esp,0x10
c0028b72:	90                   	nop
c0028b73:	83 c4 0c             	add    esp,0xc
c0028b76:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028b78 <ACPI::~ACPI()>:
c0028b78:	83 ec 0c             	sub    esp,0xc
c0028b7b:	83 ec 0c             	sub    esp,0xc
c0028b7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b82:	e8 cd ff ff ff       	call   c0028b54 <ACPI::~ACPI()>
c0028b87:	83 c4 10             	add    esp,0x10
c0028b8a:	83 ec 08             	sub    esp,0x8
c0028b8d:	68 68 12 00 00       	push   0x1268
c0028b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b96:	e8 22 a2 fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0028b9b:	83 c4 10             	add    esp,0x10
c0028b9e:	83 c4 0c             	add    esp,0xc
c0028ba1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028ba2 <CPU::~CPU()>:
c0028ba2:	83 ec 0c             	sub    esp,0xc
c0028ba5:	ba 40 b9 02 c0       	mov    edx,0xc002b940
c0028baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bae:	89 10                	mov    DWORD PTR [eax],edx
c0028bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb4:	83 ec 0c             	sub    esp,0xc
c0028bb7:	50                   	push   eax
c0028bb8:	e8 d9 b5 fe ff       	call   c0014196 <Device::~Device()>
c0028bbd:	83 c4 10             	add    esp,0x10
c0028bc0:	90                   	nop
c0028bc1:	83 c4 0c             	add    esp,0xc
c0028bc4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028bc6 <CPU::~CPU()>:
c0028bc6:	83 ec 0c             	sub    esp,0xc
c0028bc9:	83 ec 0c             	sub    esp,0xc
c0028bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bd0:	e8 cd ff ff ff       	call   c0028ba2 <CPU::~CPU()>
c0028bd5:	83 c4 10             	add    esp,0x10
c0028bd8:	83 ec 08             	sub    esp,0x8
c0028bdb:	68 98 11 00 00       	push   0x1198
c0028be0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028be4:	e8 d4 a1 fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0028be9:	83 c4 10             	add    esp,0x10
c0028bec:	83 c4 0c             	add    esp,0xc
c0028bef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028bf0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028bf0:	90                   	nop
c0028bf1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028bf2 <ThreadControlBlock::ThreadControlBlock()>:
c0028bf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bf6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028bfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c01:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028c08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c0c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028c13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c17:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028c1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c22:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c2a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028c2e:	90                   	nop
c0028c2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028c30 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028c30:	83 ec 0c             	sub    esp,0xc
c0028c33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c41:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c4c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028c53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c61:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028c73:	83 ec 0c             	sub    esp,0xc
c0028c76:	68 e6 a3 02 c0       	push   0xc002a3e6
c0028c7b:	e8 1d a2 fe ff       	call   c0012e9d <Dbg::kprintf(char const*, ...)>
c0028c80:	83 c4 10             	add    esp,0x10
c0028c83:	90                   	nop
c0028c84:	83 c4 0c             	add    esp,0xc
c0028c87:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028c88 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028c88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028c8c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028c8f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028c90 <Vm::_FPUState::_FPUState()>:
c0028c90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028c94:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028c9b:	90                   	nop
c0028c9c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028c9e <PCI::~PCI()>:
c0028c9e:	83 ec 0c             	sub    esp,0xc
c0028ca1:	ba b4 c9 02 c0       	mov    edx,0xc002c9b4
c0028ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028caa:	89 10                	mov    DWORD PTR [eax],edx
c0028cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb0:	83 ec 0c             	sub    esp,0xc
c0028cb3:	50                   	push   eax
c0028cb4:	e8 b5 ae fe ff       	call   c0013b6e <Bus::~Bus()>
c0028cb9:	83 c4 10             	add    esp,0x10
c0028cbc:	90                   	nop
c0028cbd:	83 c4 0c             	add    esp,0xc
c0028cc0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028cc2 <PCI::~PCI()>:
c0028cc2:	83 ec 0c             	sub    esp,0xc
c0028cc5:	83 ec 0c             	sub    esp,0xc
c0028cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ccc:	e8 cd ff ff ff       	call   c0028c9e <PCI::~PCI()>
c0028cd1:	83 c4 10             	add    esp,0x10
c0028cd4:	83 ec 08             	sub    esp,0x8
c0028cd7:	68 58 01 00 00       	push   0x158
c0028cdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ce0:	e8 d8 a0 fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0028ce5:	83 c4 10             	add    esp,0x10
c0028ce8:	83 c4 0c             	add    esp,0xc
c0028ceb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028cec <IDE::~IDE()>:
c0028cec:	83 ec 0c             	sub    esp,0xc
c0028cef:	ba 18 cc 02 c0       	mov    edx,0xc002cc18
c0028cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf8:	89 10                	mov    DWORD PTR [eax],edx
c0028cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cfe:	83 ec 0c             	sub    esp,0xc
c0028d01:	50                   	push   eax
c0028d02:	e8 7f b9 fe ff       	call   c0014686 <HardDiskController::~HardDiskController()>
c0028d07:	83 c4 10             	add    esp,0x10
c0028d0a:	90                   	nop
c0028d0b:	83 c4 0c             	add    esp,0xc
c0028d0e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028d10 <IDE::~IDE()>:
c0028d10:	83 ec 0c             	sub    esp,0xc
c0028d13:	83 ec 0c             	sub    esp,0xc
c0028d16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d1a:	e8 cd ff ff ff       	call   c0028cec <IDE::~IDE()>
c0028d1f:	83 c4 10             	add    esp,0x10
c0028d22:	83 ec 08             	sub    esp,0x8
c0028d25:	68 70 02 00 00       	push   0x270
c0028d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d2e:	e8 8a a0 fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0028d33:	83 c4 10             	add    esp,0x10
c0028d36:	83 c4 0c             	add    esp,0xc
c0028d39:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028d3a <SATABus::~SATABus()>:
c0028d3a:	83 ec 0c             	sub    esp,0xc
c0028d3d:	ba f8 cc 02 c0       	mov    edx,0xc002ccf8
c0028d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d46:	89 10                	mov    DWORD PTR [eax],edx
c0028d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d4c:	83 ec 0c             	sub    esp,0xc
c0028d4f:	50                   	push   eax
c0028d50:	e8 31 b9 fe ff       	call   c0014686 <HardDiskController::~HardDiskController()>
c0028d55:	83 c4 10             	add    esp,0x10
c0028d58:	90                   	nop
c0028d59:	83 c4 0c             	add    esp,0xc
c0028d5c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028d5e <SATABus::~SATABus()>:
c0028d5e:	83 ec 0c             	sub    esp,0xc
c0028d61:	83 ec 0c             	sub    esp,0xc
c0028d64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d68:	e8 cd ff ff ff       	call   c0028d3a <SATABus::~SATABus()>
c0028d6d:	83 c4 10             	add    esp,0x10
c0028d70:	83 ec 08             	sub    esp,0x8
c0028d73:	68 64 01 00 00       	push   0x164
c0028d78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d7c:	e8 3c a0 fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0028d81:	83 c4 10             	add    esp,0x10
c0028d84:	83 c4 0c             	add    esp,0xc
c0028d87:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028d88 <ATA::~ATA()>:
c0028d88:	83 ec 0c             	sub    esp,0xc
c0028d8b:	ba 44 cd 02 c0       	mov    edx,0xc002cd44
c0028d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d94:	89 10                	mov    DWORD PTR [eax],edx
c0028d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9a:	83 ec 0c             	sub    esp,0xc
c0028d9d:	50                   	push   eax
c0028d9e:	e8 d5 b9 fe ff       	call   c0014778 <PhysicalDisk::~PhysicalDisk()>
c0028da3:	83 c4 10             	add    esp,0x10
c0028da6:	90                   	nop
c0028da7:	83 c4 0c             	add    esp,0xc
c0028daa:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028dac <ATA::~ATA()>:
c0028dac:	83 ec 0c             	sub    esp,0xc
c0028daf:	83 ec 0c             	sub    esp,0xc
c0028db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028db6:	e8 cd ff ff ff       	call   c0028d88 <ATA::~ATA()>
c0028dbb:	83 c4 10             	add    esp,0x10
c0028dbe:	83 ec 08             	sub    esp,0x8
c0028dc1:	68 7c 01 00 00       	push   0x17c
c0028dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dca:	e8 ee 9f fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0028dcf:	83 c4 10             	add    esp,0x10
c0028dd2:	83 c4 0c             	add    esp,0xc
c0028dd5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028dd6 <ATAPI::~ATAPI()>:
c0028dd6:	83 ec 0c             	sub    esp,0xc
c0028dd9:	ba 7c cd 02 c0       	mov    edx,0xc002cd7c
c0028dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de2:	89 10                	mov    DWORD PTR [eax],edx
c0028de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de8:	83 ec 0c             	sub    esp,0xc
c0028deb:	50                   	push   eax
c0028dec:	e8 87 b9 fe ff       	call   c0014778 <PhysicalDisk::~PhysicalDisk()>
c0028df1:	83 c4 10             	add    esp,0x10
c0028df4:	90                   	nop
c0028df5:	83 c4 0c             	add    esp,0xc
c0028df8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028dfa <ATAPI::~ATAPI()>:
c0028dfa:	83 ec 0c             	sub    esp,0xc
c0028dfd:	83 ec 0c             	sub    esp,0xc
c0028e00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e04:	e8 cd ff ff ff       	call   c0028dd6 <ATAPI::~ATAPI()>
c0028e09:	83 c4 10             	add    esp,0x10
c0028e0c:	83 ec 08             	sub    esp,0x8
c0028e0f:	68 80 01 00 00       	push   0x180
c0028e14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e18:	e8 a0 9f fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0028e1d:	83 c4 10             	add    esp,0x10
c0028e20:	83 c4 0c             	add    esp,0xc
c0028e23:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028e24 <SATA::~SATA()>:
c0028e24:	83 ec 0c             	sub    esp,0xc
c0028e27:	ba 30 ce 02 c0       	mov    edx,0xc002ce30
c0028e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e30:	89 10                	mov    DWORD PTR [eax],edx
c0028e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e36:	83 ec 0c             	sub    esp,0xc
c0028e39:	50                   	push   eax
c0028e3a:	e8 39 b9 fe ff       	call   c0014778 <PhysicalDisk::~PhysicalDisk()>
c0028e3f:	83 c4 10             	add    esp,0x10
c0028e42:	90                   	nop
c0028e43:	83 c4 0c             	add    esp,0xc
c0028e46:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028e48 <SATA::~SATA()>:
c0028e48:	83 ec 0c             	sub    esp,0xc
c0028e4b:	83 ec 0c             	sub    esp,0xc
c0028e4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e52:	e8 cd ff ff ff       	call   c0028e24 <SATA::~SATA()>
c0028e57:	83 c4 10             	add    esp,0x10
c0028e5a:	83 ec 08             	sub    esp,0x8
c0028e5d:	68 7c 01 00 00       	push   0x17c
c0028e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e66:	e8 52 9f fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0028e6b:	83 c4 10             	add    esp,0x10
c0028e6e:	83 c4 0c             	add    esp,0xc
c0028e71:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028e72 <SATAPI::~SATAPI()>:
c0028e72:	83 ec 0c             	sub    esp,0xc
c0028e75:	ba 0c cf 02 c0       	mov    edx,0xc002cf0c
c0028e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e7e:	89 10                	mov    DWORD PTR [eax],edx
c0028e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e84:	83 ec 0c             	sub    esp,0xc
c0028e87:	50                   	push   eax
c0028e88:	e8 eb b8 fe ff       	call   c0014778 <PhysicalDisk::~PhysicalDisk()>
c0028e8d:	83 c4 10             	add    esp,0x10
c0028e90:	90                   	nop
c0028e91:	83 c4 0c             	add    esp,0xc
c0028e94:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028e96 <SATAPI::~SATAPI()>:
c0028e96:	83 ec 0c             	sub    esp,0xc
c0028e99:	83 ec 0c             	sub    esp,0xc
c0028e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea0:	e8 cd ff ff ff       	call   c0028e72 <SATAPI::~SATAPI()>
c0028ea5:	83 c4 10             	add    esp,0x10
c0028ea8:	83 ec 08             	sub    esp,0x8
c0028eab:	68 80 01 00 00       	push   0x180
c0028eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb4:	e8 04 9f fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0028eb9:	83 c4 10             	add    esp,0x10
c0028ebc:	83 c4 0c             	add    esp,0xc
c0028ebf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028ec0 <AVX::~AVX()>:
c0028ec0:	83 ec 0c             	sub    esp,0xc
c0028ec3:	ba 4c cf 02 c0       	mov    edx,0xc002cf4c
c0028ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ecc:	89 10                	mov    DWORD PTR [eax],edx
c0028ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed2:	83 ec 0c             	sub    esp,0xc
c0028ed5:	50                   	push   eax
c0028ed6:	e8 21 b9 fe ff       	call   c00147fc <FPU::~FPU()>
c0028edb:	83 c4 10             	add    esp,0x10
c0028ede:	90                   	nop
c0028edf:	83 c4 0c             	add    esp,0xc
c0028ee2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028ee4 <AVX::~AVX()>:
c0028ee4:	83 ec 0c             	sub    esp,0xc
c0028ee7:	83 ec 0c             	sub    esp,0xc
c0028eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eee:	e8 cd ff ff ff       	call   c0028ec0 <AVX::~AVX()>
c0028ef3:	83 c4 10             	add    esp,0x10
c0028ef6:	83 ec 08             	sub    esp,0x8
c0028ef9:	68 58 01 00 00       	push   0x158
c0028efe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f02:	e8 b6 9e fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0028f07:	83 c4 10             	add    esp,0x10
c0028f0a:	83 c4 0c             	add    esp,0xc
c0028f0d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028f0e <MMX::~MMX()>:
c0028f0e:	83 ec 0c             	sub    esp,0xc
c0028f11:	ba 8c cf 02 c0       	mov    edx,0xc002cf8c
c0028f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f1a:	89 10                	mov    DWORD PTR [eax],edx
c0028f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f20:	83 ec 0c             	sub    esp,0xc
c0028f23:	50                   	push   eax
c0028f24:	e8 d3 b8 fe ff       	call   c00147fc <FPU::~FPU()>
c0028f29:	83 c4 10             	add    esp,0x10
c0028f2c:	90                   	nop
c0028f2d:	83 c4 0c             	add    esp,0xc
c0028f30:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028f32 <MMX::~MMX()>:
c0028f32:	83 ec 0c             	sub    esp,0xc
c0028f35:	83 ec 0c             	sub    esp,0xc
c0028f38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f3c:	e8 cd ff ff ff       	call   c0028f0e <MMX::~MMX()>
c0028f41:	83 c4 10             	add    esp,0x10
c0028f44:	83 ec 08             	sub    esp,0x8
c0028f47:	68 58 01 00 00       	push   0x158
c0028f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f50:	e8 68 9e fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0028f55:	83 c4 10             	add    esp,0x10
c0028f58:	83 c4 0c             	add    esp,0xc
c0028f5b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028f5c <SSE::~SSE()>:
c0028f5c:	83 ec 0c             	sub    esp,0xc
c0028f5f:	ba cc cf 02 c0       	mov    edx,0xc002cfcc
c0028f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f68:	89 10                	mov    DWORD PTR [eax],edx
c0028f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6e:	83 ec 0c             	sub    esp,0xc
c0028f71:	50                   	push   eax
c0028f72:	e8 85 b8 fe ff       	call   c00147fc <FPU::~FPU()>
c0028f77:	83 c4 10             	add    esp,0x10
c0028f7a:	90                   	nop
c0028f7b:	83 c4 0c             	add    esp,0xc
c0028f7e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028f80 <SSE::~SSE()>:
c0028f80:	83 ec 0c             	sub    esp,0xc
c0028f83:	83 ec 0c             	sub    esp,0xc
c0028f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f8a:	e8 cd ff ff ff       	call   c0028f5c <SSE::~SSE()>
c0028f8f:	83 c4 10             	add    esp,0x10
c0028f92:	83 ec 08             	sub    esp,0x8
c0028f95:	68 58 01 00 00       	push   0x158
c0028f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f9e:	e8 1a 9e fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0028fa3:	83 c4 10             	add    esp,0x10
c0028fa6:	83 c4 0c             	add    esp,0xc
c0028fa9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028faa <x87::~x87()>:
c0028faa:	83 ec 0c             	sub    esp,0xc
c0028fad:	ba 0c d0 02 c0       	mov    edx,0xc002d00c
c0028fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb6:	89 10                	mov    DWORD PTR [eax],edx
c0028fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fbc:	83 ec 0c             	sub    esp,0xc
c0028fbf:	50                   	push   eax
c0028fc0:	e8 37 b8 fe ff       	call   c00147fc <FPU::~FPU()>
c0028fc5:	83 c4 10             	add    esp,0x10
c0028fc8:	90                   	nop
c0028fc9:	83 c4 0c             	add    esp,0xc
c0028fcc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028fce <x87::~x87()>:
c0028fce:	83 ec 0c             	sub    esp,0xc
c0028fd1:	83 ec 0c             	sub    esp,0xc
c0028fd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd8:	e8 cd ff ff ff       	call   c0028faa <x87::~x87()>
c0028fdd:	83 c4 10             	add    esp,0x10
c0028fe0:	83 ec 08             	sub    esp,0x8
c0028fe3:	68 58 01 00 00       	push   0x158
c0028fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fec:	e8 cc 9d fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0028ff1:	83 c4 10             	add    esp,0x10
c0028ff4:	83 c4 0c             	add    esp,0xc
c0028ff7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028ff8 <IOAPIC::~IOAPIC()>:
c0028ff8:	83 ec 0c             	sub    esp,0xc
c0028ffb:	ba 64 d1 02 c0       	mov    edx,0xc002d164
c0029000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029004:	89 10                	mov    DWORD PTR [eax],edx
c0029006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900a:	83 ec 0c             	sub    esp,0xc
c002900d:	50                   	push   eax
c002900e:	e8 83 b1 fe ff       	call   c0014196 <Device::~Device()>
c0029013:	83 c4 10             	add    esp,0x10
c0029016:	90                   	nop
c0029017:	83 c4 0c             	add    esp,0xc
c002901a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002901c <IOAPIC::~IOAPIC()>:
c002901c:	83 ec 0c             	sub    esp,0xc
c002901f:	83 ec 0c             	sub    esp,0xc
c0029022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029026:	e8 cd ff ff ff       	call   c0028ff8 <IOAPIC::~IOAPIC()>
c002902b:	83 c4 10             	add    esp,0x10
c002902e:	83 ec 08             	sub    esp,0x8
c0029031:	68 68 01 00 00       	push   0x168
c0029036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002903a:	e8 7e 9d fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c002903f:	83 c4 10             	add    esp,0x10
c0029042:	83 c4 0c             	add    esp,0xc
c0029045:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029046 <APIC::~APIC()>:
c0029046:	83 ec 0c             	sub    esp,0xc
c0029049:	ba 1c d1 02 c0       	mov    edx,0xc002d11c
c002904e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029052:	89 10                	mov    DWORD PTR [eax],edx
c0029054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029058:	83 ec 0c             	sub    esp,0xc
c002905b:	50                   	push   eax
c002905c:	e8 65 bc fe ff       	call   c0014cc6 <InterruptController::~InterruptController()>
c0029061:	83 c4 10             	add    esp,0x10
c0029064:	90                   	nop
c0029065:	83 c4 0c             	add    esp,0xc
c0029068:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002906a <APIC::~APIC()>:
c002906a:	83 ec 0c             	sub    esp,0xc
c002906d:	83 ec 0c             	sub    esp,0xc
c0029070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029074:	e8 cd ff ff ff       	call   c0029046 <APIC::~APIC()>
c0029079:	83 c4 10             	add    esp,0x10
c002907c:	83 ec 08             	sub    esp,0x8
c002907f:	68 58 21 00 00       	push   0x2158
c0029084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029088:	e8 30 9d fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c002908d:	83 c4 10             	add    esp,0x10
c0029090:	83 c4 0c             	add    esp,0xc
c0029093:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029094 <PIC::~PIC()>:
c0029094:	83 ec 0c             	sub    esp,0xc
c0029097:	ba b4 d1 02 c0       	mov    edx,0xc002d1b4
c002909c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a0:	89 10                	mov    DWORD PTR [eax],edx
c00290a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a6:	83 ec 0c             	sub    esp,0xc
c00290a9:	50                   	push   eax
c00290aa:	e8 17 bc fe ff       	call   c0014cc6 <InterruptController::~InterruptController()>
c00290af:	83 c4 10             	add    esp,0x10
c00290b2:	90                   	nop
c00290b3:	83 c4 0c             	add    esp,0xc
c00290b6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00290b8 <PIC::~PIC()>:
c00290b8:	83 ec 0c             	sub    esp,0xc
c00290bb:	83 ec 0c             	sub    esp,0xc
c00290be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290c2:	e8 cd ff ff ff       	call   c0029094 <PIC::~PIC()>
c00290c7:	83 c4 10             	add    esp,0x10
c00290ca:	83 ec 08             	sub    esp,0x8
c00290cd:	68 58 21 00 00       	push   0x2158
c00290d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290d6:	e8 e2 9c fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c00290db:	83 c4 10             	add    esp,0x10
c00290de:	83 c4 0c             	add    esp,0xc
c00290e1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00290e2 <APICTimer::~APICTimer()>:
c00290e2:	83 ec 0c             	sub    esp,0xc
c00290e5:	ba 08 d2 02 c0       	mov    edx,0xc002d208
c00290ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ee:	89 10                	mov    DWORD PTR [eax],edx
c00290f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f4:	83 ec 0c             	sub    esp,0xc
c00290f7:	50                   	push   eax
c00290f8:	e8 4f db fe ff       	call   c0016c4c <Timer::~Timer()>
c00290fd:	83 c4 10             	add    esp,0x10
c0029100:	90                   	nop
c0029101:	83 c4 0c             	add    esp,0xc
c0029104:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029106 <APICTimer::~APICTimer()>:
c0029106:	83 ec 0c             	sub    esp,0xc
c0029109:	83 ec 0c             	sub    esp,0xc
c002910c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029110:	e8 cd ff ff ff       	call   c00290e2 <APICTimer::~APICTimer()>
c0029115:	83 c4 10             	add    esp,0x10
c0029118:	83 ec 08             	sub    esp,0x8
c002911b:	68 60 01 00 00       	push   0x160
c0029120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029124:	e8 94 9c fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0029129:	83 c4 10             	add    esp,0x10
c002912c:	83 c4 0c             	add    esp,0xc
c002912f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029130 <PIT::~PIT()>:
c0029130:	83 ec 0c             	sub    esp,0xc
c0029133:	ba 58 d2 02 c0       	mov    edx,0xc002d258
c0029138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913c:	89 10                	mov    DWORD PTR [eax],edx
c002913e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029142:	83 ec 0c             	sub    esp,0xc
c0029145:	50                   	push   eax
c0029146:	e8 01 db fe ff       	call   c0016c4c <Timer::~Timer()>
c002914b:	83 c4 10             	add    esp,0x10
c002914e:	90                   	nop
c002914f:	83 c4 0c             	add    esp,0xc
c0029152:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029154 <PIT::~PIT()>:
c0029154:	83 ec 0c             	sub    esp,0xc
c0029157:	83 ec 0c             	sub    esp,0xc
c002915a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002915e:	e8 cd ff ff ff       	call   c0029130 <PIT::~PIT()>
c0029163:	83 c4 10             	add    esp,0x10
c0029166:	83 ec 08             	sub    esp,0x8
c0029169:	68 5c 01 00 00       	push   0x15c
c002916e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029172:	e8 46 9c fe ff       	call   c0012dbd <operator delete(void*, unsigned long)>
c0029177:	83 c4 10             	add    esp,0x10
c002917a:	83 c4 0c             	add    esp,0xc
c002917d:	c3                   	ret    
