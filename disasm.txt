
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 a3 f7 00 00       	call   c000f7c3 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 70 02 00       	call   c0027048 <_init>
c0000025:	c3                   	ret    
c0000026:	bb a4 7b 02 c0       	mov    ebx,0xc0027ba4
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb b0 7b 02 c0    	cmp    ebx,0xc0027bb0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 be 02 c0       	mov    eax,0xc002bed8
c0000049:	3d d8 be 02 c0       	cmp    eax,0xc002bed8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 be 02 c0       	push   0xc002bed8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 be 02 c0       	mov    eax,0xc002bed8
c0000075:	2d d8 be 02 c0       	sub    eax,0xc002bed8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 be 02 c0       	push   0xc002bed8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 08 c5 02 c0 00 	cmp    BYTE PTR ds:0xc002c508,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb b8 7b 02 c0       	mov    ebx,0xc0027bb8
c00000bb:	81 eb b4 7b 02 c0    	sub    ebx,0xc0027bb4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be b4 7b 02 c0       	mov    esi,0xc0027bb4
c00000ca:	a1 0c c5 02 c0       	mov    eax,ds:0xc002c50c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 0c c5 02 c0       	mov    ds:0xc002c50c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 0c c5 02 c0       	mov    eax,ds:0xc002c50c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 be 02 c0       	push   0xc002bed8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 08 c5 02 c0 01 	mov    BYTE PTR ds:0xc002c508,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 10 c5 02 c0       	push   0xc002c510
c000012c:	68 d8 be 02 c0       	push   0xc002bed8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	55                   	push   ebp
c00002b0:	89 e5                	mov    ebp,esp
c00002b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002be:	25 ff ff 00 00       	and    eax,0xffff
c00002c3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d5:	52                   	push   edx
c00002d6:	51                   	push   ecx
c00002d7:	68 02 02 02 00       	push   0x20202
c00002dc:	53                   	push   ebx
c00002dd:	50                   	push   eax
c00002de:	cf                   	iret   

c00002df <goToUsermode>:
c00002df:	55                   	push   ebp
c00002e0:	89 e5                	mov    ebp,esp
c00002e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e5:	66 b8 23 00          	mov    ax,0x23
c00002e9:	66 8e d8             	mov    ds,ax
c00002ec:	66 8e c0             	mov    es,ax
c00002ef:	66 8e e0             	mov    fs,ax
c00002f2:	66 8e e8             	mov    gs,ax
c00002f5:	89 e0                	mov    eax,esp
c00002f7:	68 23 00 00 00       	push   0x23
c00002fc:	50                   	push   eax
c00002fd:	68 02 02 00 00       	push   0x202
c0000302:	68 1b 00 00 00       	push   0x1b
c0000307:	53                   	push   ebx
c0000308:	cf                   	iret   

c0000309 <switchToThreadASMFirstTime>:
c0000309:	9c                   	pushf  
c000030a:	fa                   	cli    
c000030b:	50                   	push   eax
c000030c:	53                   	push   ebx
c000030d:	51                   	push   ecx
c000030e:	52                   	push   edx
c000030f:	56                   	push   esi
c0000310:	57                   	push   edi
c0000311:	55                   	push   ebp
c0000312:	e9 11 00 00 00       	jmp    c0000328 <commonThreadSwitch>

c0000317 <switchToThreadASM>:
c0000317:	9c                   	pushf  
c0000318:	50                   	push   eax
c0000319:	53                   	push   ebx
c000031a:	51                   	push   ecx
c000031b:	52                   	push   edx
c000031c:	56                   	push   esi
c000031d:	57                   	push   edi
c000031e:	55                   	push   ebp
c000031f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000325:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000328 <commonThreadSwitch>:
c0000328:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000332:	8b 06                	mov    eax,DWORD PTR [esi]
c0000334:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000337:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033a:	0f 20 d9             	mov    ecx,cr3
c000033d:	39 c8                	cmp    eax,ecx
c000033f:	74 03                	je     c0000344 <commonThreadSwitch.doneVAS>
c0000341:	0f 22 d8             	mov    cr3,eax

c0000344 <commonThreadSwitch.doneVAS>:
c0000344:	85 d2                	test   edx,edx
c0000346:	75 11                	jne    c0000359 <commonThreadSwitch.firstTime>
c0000348:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034b:	e8 a0 c5 01 00       	call   c001c8f0 <changeTSS>
c0000350:	5d                   	pop    ebp
c0000351:	5f                   	pop    edi
c0000352:	5e                   	pop    esi
c0000353:	5a                   	pop    edx
c0000354:	59                   	pop    ecx
c0000355:	5b                   	pop    ebx
c0000356:	58                   	pop    eax
c0000357:	9d                   	popf   
c0000358:	c3                   	ret    

c0000359 <commonThreadSwitch.firstTime>:
c0000359:	fa                   	cli    
c000035a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000362:	60                   	pusha  
c0000363:	e8 f7 21 01 00       	call   c001255f <mapVASFirstTime>
c0000368:	61                   	popa   
c0000369:	89 c4                	mov    esp,eax
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 7e c5 01 00       	call   c001c8f0 <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037b:	5d                   	pop    ebp
c000037c:	5f                   	pop    edi
c000037d:	5e                   	pop    esi
c000037e:	59                   	pop    ecx
c000037f:	59                   	pop    ecx
c0000380:	5b                   	pop    ebx
c0000381:	58                   	pop    eax
c0000382:	81 c4 04 00 00 00    	add    esp,0x4
c0000388:	6a 02                	push   0x2
c000038a:	9d                   	popf   
c000038b:	52                   	push   edx
c000038c:	e8 cc c9 01 00       	call   c001cd5d <taskStartupFunction>
c0000391:	5a                   	pop    edx
c0000392:	50                   	push   eax
c0000393:	ff d2                	call   edx
c0000395:	e8 7a cf 01 00       	call   c001d314 <taskReturned>
c000039a:	e9 fb ff ff ff       	jmp    c000039a <commonThreadSwitch.firstTime+0x41>

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 50 c9 02 c0 	lgdtd  ds:0xc002c950
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 44 01 00 00       	jmp    c0000571 <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 3a 01 00 00       	jmp    c0000571 <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 30 01 00 00       	jmp    c0000571 <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 26 01 00 00       	jmp    c0000571 <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 1c 01 00 00       	jmp    c0000571 <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 12 01 00 00       	jmp    c0000571 <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 08 01 00 00       	jmp    c0000571 <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 fe 00 00 00       	jmp    c0000571 <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 f6 00 00 00       	jmp    c0000571 <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 ec 00 00 00       	jmp    c0000571 <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 e4 00 00 00       	jmp    c0000571 <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 dc 00 00 00       	jmp    c0000571 <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 d4 00 00 00       	jmp    c0000571 <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 cc 00 00 00       	jmp    c0000571 <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 c4 00 00 00       	jmp    c0000571 <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 ba 00 00 00       	jmp    c0000571 <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 b0 00 00 00       	jmp    c0000571 <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 a6 00 00 00       	jmp    c0000571 <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 9c 00 00 00       	jmp    c0000571 <int_common_stub>

c00004d5 <irq3>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 23                	push   0x23
c00004da:	e9 92 00 00 00       	jmp    c0000571 <int_common_stub>

c00004df <irq4>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 24                	push   0x24
c00004e4:	e9 88 00 00 00       	jmp    c0000571 <int_common_stub>

c00004e9 <irq5>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 25                	push   0x25
c00004ee:	e9 7e 00 00 00       	jmp    c0000571 <int_common_stub>

c00004f3 <irq6>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 26                	push   0x26
c00004f8:	e9 74 00 00 00       	jmp    c0000571 <int_common_stub>

c00004fd <irq7>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 27                	push   0x27
c0000502:	e9 6a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000507 <irq8>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 28                	push   0x28
c000050c:	e9 60 00 00 00       	jmp    c0000571 <int_common_stub>

c0000511 <irq9>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 29                	push   0x29
c0000516:	e9 56 00 00 00       	jmp    c0000571 <int_common_stub>

c000051b <irq10>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 2a                	push   0x2a
c0000520:	e9 4c 00 00 00       	jmp    c0000571 <int_common_stub>

c0000525 <irq11>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 2b                	push   0x2b
c000052a:	e9 42 00 00 00       	jmp    c0000571 <int_common_stub>

c000052f <irq12>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 2c                	push   0x2c
c0000534:	e9 38 00 00 00       	jmp    c0000571 <int_common_stub>

c0000539 <irq13>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 2d                	push   0x2d
c000053e:	e9 2e 00 00 00       	jmp    c0000571 <int_common_stub>

c0000543 <irq14>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2e                	push   0x2e
c0000548:	e9 24 00 00 00       	jmp    c0000571 <int_common_stub>

c000054d <irq15>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2f                	push   0x2f
c0000552:	e9 1a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000557 <irq1>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 21                	push   0x21
c000055c:	eb 13                	jmp    c0000571 <int_common_stub>

c000055e <irq2>:
c000055e:	fa                   	cli    
c000055f:	6a 00                	push   0x0
c0000561:	6a 22                	push   0x22
c0000563:	eb 0c                	jmp    c0000571 <int_common_stub>

c0000565 <isr96>:
c0000565:	6a 00                	push   0x0
c0000567:	6a 60                	push   0x60
c0000569:	fb                   	sti    
c000056a:	eb 05                	jmp    c0000571 <int_common_stub>

c000056c <irq0>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 20                	push   0x20

c0000571 <int_common_stub>:
c0000571:	60                   	pusha  
c0000572:	1e                   	push   ds
c0000573:	06                   	push   es
c0000574:	0f a0                	push   fs
c0000576:	0f a8                	push   gs
c0000578:	66 b8 10 00          	mov    ax,0x10
c000057c:	66 8e d8             	mov    ds,ax
c000057f:	66 8e c0             	mov    es,ax
c0000582:	66 8e e0             	mov    fs,ax
c0000585:	66 8e e8             	mov    gs,ax
c0000588:	54                   	push   esp
c0000589:	e8 89 3e 01 00       	call   c0014417 <int_handler>
c000058e:	81 c4 04 00 00 00    	add    esp,0x4
c0000594:	0f a9                	pop    gs
c0000596:	0f a1                	pop    fs
c0000598:	07                   	pop    es
c0000599:	1f                   	pop    ds
c000059a:	61                   	popa   
c000059b:	81 c4 08 00 00 00    	add    esp,0x8
c00005a1:	cf                   	iret   

c00005a2 <irq16>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 30                	push   0x30
c00005a7:	e9 c5 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ac <irq17>:
c00005ac:	fa                   	cli    
c00005ad:	6a 00                	push   0x0
c00005af:	6a 31                	push   0x31
c00005b1:	e9 bb ff ff ff       	jmp    c0000571 <int_common_stub>

c00005b6 <irq18>:
c00005b6:	fa                   	cli    
c00005b7:	6a 00                	push   0x0
c00005b9:	6a 32                	push   0x32
c00005bb:	e9 b1 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005c0 <irq19>:
c00005c0:	fa                   	cli    
c00005c1:	6a 00                	push   0x0
c00005c3:	6a 33                	push   0x33
c00005c5:	e9 a7 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ca <irq20>:
c00005ca:	fa                   	cli    
c00005cb:	6a 00                	push   0x0
c00005cd:	6a 34                	push   0x34
c00005cf:	e9 9d ff ff ff       	jmp    c0000571 <int_common_stub>

c00005d4 <irq21>:
c00005d4:	fa                   	cli    
c00005d5:	6a 00                	push   0x0
c00005d7:	6a 35                	push   0x35
c00005d9:	e9 93 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005de <irq22>:
c00005de:	fa                   	cli    
c00005df:	6a 00                	push   0x0
c00005e1:	6a 36                	push   0x36
c00005e3:	e9 89 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005e8 <irq23>:
c00005e8:	fa                   	cli    
c00005e9:	6a 00                	push   0x0
c00005eb:	6a 37                	push   0x37
c00005ed:	e9 7f ff ff ff       	jmp    c0000571 <int_common_stub>

c00005f2 <memcmp>:
c00005f2:	56                   	push   esi
c00005f3:	53                   	push   ebx
c00005f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000600:	01 d6                	add    esi,edx
c0000602:	39 f2                	cmp    edx,esi
c0000604:	74 0e                	je     c0000614 <memcmp+0x22>
c0000606:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000609:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000060c:	38 c8                	cmp    al,cl
c000060e:	75 08                	jne    c0000618 <memcmp+0x26>
c0000610:	42                   	inc    edx
c0000611:	43                   	inc    ebx
c0000612:	eb ee                	jmp    c0000602 <memcmp+0x10>
c0000614:	31 c0                	xor    eax,eax
c0000616:	eb 02                	jmp    c000061a <memcmp+0x28>
c0000618:	29 c8                	sub    eax,ecx
c000061a:	5b                   	pop    ebx
c000061b:	5e                   	pop    esi
c000061c:	c3                   	ret    

c000061d <memmove>:
c000061d:	56                   	push   esi
c000061e:	53                   	push   ebx
c000061f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000623:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000062b:	39 c8                	cmp    eax,ecx
c000062d:	73 12                	jae    c0000641 <memmove+0x24>
c000062f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000632:	89 c3                	mov    ebx,eax
c0000634:	39 f1                	cmp    ecx,esi
c0000636:	74 1a                	je     c0000652 <memmove+0x35>
c0000638:	8a 11                	mov    dl,BYTE PTR [ecx]
c000063a:	43                   	inc    ebx
c000063b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000063e:	41                   	inc    ecx
c000063f:	eb f3                	jmp    c0000634 <memmove+0x17>
c0000641:	76 0f                	jbe    c0000652 <memmove+0x35>
c0000643:	85 d2                	test   edx,edx
c0000645:	74 0b                	je     c0000652 <memmove+0x35>
c0000647:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000064b:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000064f:	4a                   	dec    edx
c0000650:	eb f1                	jmp    c0000643 <memmove+0x26>
c0000652:	5b                   	pop    ebx
c0000653:	5e                   	pop    esi
c0000654:	c3                   	ret    

c0000655 <memcpy>:
c0000655:	57                   	push   edi
c0000656:	56                   	push   esi
c0000657:	53                   	push   ebx
c0000658:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000660:	89 da                	mov    edx,ebx
c0000662:	89 d9                	mov    ecx,ebx
c0000664:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000668:	83 e2 fc             	and    edx,0xfffffffc
c000066b:	c1 e9 02             	shr    ecx,0x2
c000066e:	89 c7                	mov    edi,eax
c0000670:	fc                   	cld    
c0000671:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000673:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000676:	01 c2                	add    edx,eax
c0000678:	01 de                	add    esi,ebx
c000067a:	39 f1                	cmp    ecx,esi
c000067c:	74 09                	je     c0000687 <memcpy+0x32>
c000067e:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000680:	42                   	inc    edx
c0000681:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000684:	41                   	inc    ecx
c0000685:	eb f3                	jmp    c000067a <memcpy+0x25>
c0000687:	5b                   	pop    ebx
c0000688:	5e                   	pop    esi
c0000689:	5f                   	pop    edi
c000068a:	c3                   	ret    

c000068b <memset>:
c000068b:	53                   	push   ebx
c000068c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000694:	89 c2                	mov    edx,eax
c0000696:	01 c1                	add    ecx,eax
c0000698:	39 ca                	cmp    edx,ecx
c000069a:	74 0a                	je     c00006a6 <memset+0x1b>
c000069c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006a0:	42                   	inc    edx
c00006a1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006a4:	eb f2                	jmp    c0000698 <memset+0xd>
c00006a6:	5b                   	pop    ebx
c00006a7:	c3                   	ret    

c00006a8 <strlen>:
c00006a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ac:	31 c0                	xor    eax,eax
c00006ae:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b2:	74 03                	je     c00006b7 <strlen+0xf>
c00006b4:	40                   	inc    eax
c00006b5:	eb f7                	jmp    c00006ae <strlen+0x6>
c00006b7:	c3                   	ret    

c00006b8 <strpbrk>:
c00006b8:	53                   	push   ebx
c00006b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bd:	8a 08                	mov    cl,BYTE PTR [eax]
c00006bf:	84 c9                	test   cl,cl
c00006c1:	74 14                	je     c00006d7 <strpbrk+0x1f>
c00006c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006c7:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006c9:	84 db                	test   bl,bl
c00006cb:	74 07                	je     c00006d4 <strpbrk+0x1c>
c00006cd:	38 cb                	cmp    bl,cl
c00006cf:	74 08                	je     c00006d9 <strpbrk+0x21>
c00006d1:	42                   	inc    edx
c00006d2:	eb f3                	jmp    c00006c7 <strpbrk+0xf>
c00006d4:	40                   	inc    eax
c00006d5:	eb e6                	jmp    c00006bd <strpbrk+0x5>
c00006d7:	31 c0                	xor    eax,eax
c00006d9:	5b                   	pop    ebx
c00006da:	c3                   	ret    

c00006db <strtok>:
c00006db:	56                   	push   esi
c00006dc:	53                   	push   ebx
c00006dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006e5:	85 db                	test   ebx,ebx
c00006e7:	75 0e                	jne    c00006f7 <strtok+0x1c>
c00006e9:	8b 1d 28 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c528
c00006ef:	85 db                	test   ebx,ebx
c00006f1:	75 04                	jne    c00006f7 <strtok+0x1c>
c00006f3:	31 db                	xor    ebx,ebx
c00006f5:	eb 2e                	jmp    c0000725 <strtok+0x4a>
c00006f7:	56                   	push   esi
c00006f8:	53                   	push   ebx
c00006f9:	e8 ba ff ff ff       	call   c00006b8 <strpbrk>
c00006fe:	5a                   	pop    edx
c00006ff:	a3 28 c5 02 c0       	mov    ds:0xc002c528,eax
c0000704:	59                   	pop    ecx
c0000705:	a1 28 c5 02 c0       	mov    eax,ds:0xc002c528
c000070a:	39 d8                	cmp    eax,ebx
c000070c:	75 07                	jne    c0000715 <strtok+0x3a>
c000070e:	43                   	inc    ebx
c000070f:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000713:	eb e2                	jmp    c00006f7 <strtok+0x1c>
c0000715:	85 c0                	test   eax,eax
c0000717:	74 da                	je     c00006f3 <strtok+0x18>
c0000719:	8d 50 01             	lea    edx,[eax+0x1]
c000071c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071f:	89 15 28 c5 02 c0    	mov    DWORD PTR ds:0xc002c528,edx
c0000725:	89 d8                	mov    eax,ebx
c0000727:	5b                   	pop    ebx
c0000728:	5e                   	pop    esi
c0000729:	c3                   	ret    

c000072a <strcpy>:
c000072a:	53                   	push   ebx
c000072b:	31 d2                	xor    edx,edx
c000072d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000735:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000738:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000073b:	84 c9                	test   cl,cl
c000073d:	74 06                	je     c0000745 <strcpy+0x1b>
c000073f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000742:	42                   	inc    edx
c0000743:	eb ec                	jmp    c0000731 <strcpy+0x7>
c0000745:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000748:	5b                   	pop    ebx
c0000749:	c3                   	ret    

c000074a <strncpy>:
c000074a:	56                   	push   esi
c000074b:	53                   	push   ebx
c000074c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000750:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000754:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000758:	89 c3                	mov    ebx,eax
c000075a:	85 c9                	test   ecx,ecx
c000075c:	74 1a                	je     c0000778 <strncpy+0x2e>
c000075e:	46                   	inc    esi
c000075f:	43                   	inc    ebx
c0000760:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000763:	49                   	dec    ecx
c0000764:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000767:	84 d2                	test   dl,dl
c0000769:	75 ef                	jne    c000075a <strncpy+0x10>
c000076b:	31 d2                	xor    edx,edx
c000076d:	39 d1                	cmp    ecx,edx
c000076f:	74 07                	je     c0000778 <strncpy+0x2e>
c0000771:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000775:	42                   	inc    edx
c0000776:	eb f5                	jmp    c000076d <strncpy+0x23>
c0000778:	5b                   	pop    ebx
c0000779:	5e                   	pop    esi
c000077a:	c3                   	ret    

c000077b <strcmp>:
c000077b:	31 c9                	xor    ecx,ecx
c000077d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000781:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000785:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000789:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000078d:	38 d0                	cmp    al,dl
c000078f:	75 08                	jne    c0000799 <strcmp+0x1e>
c0000791:	41                   	inc    ecx
c0000792:	84 c0                	test   al,al
c0000794:	75 e7                	jne    c000077d <strcmp+0x2>
c0000796:	31 c0                	xor    eax,eax
c0000798:	c3                   	ret    
c0000799:	29 d0                	sub    eax,edx
c000079b:	c3                   	ret    

c000079c <strchr>:
c000079c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007a0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007a2:	84 d2                	test   dl,dl
c00007a4:	74 09                	je     c00007af <strchr+0x13>
c00007a6:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007aa:	74 05                	je     c00007b1 <strchr+0x15>
c00007ac:	40                   	inc    eax
c00007ad:	eb f1                	jmp    c00007a0 <strchr+0x4>
c00007af:	31 c0                	xor    eax,eax
c00007b1:	c3                   	ret    

c00007b2 <strncmp>:
c00007b2:	56                   	push   esi
c00007b3:	53                   	push   ebx
c00007b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c0:	01 d6                	add    esi,edx
c00007c2:	39 f2                	cmp    edx,esi
c00007c4:	74 12                	je     c00007d8 <strncmp+0x26>
c00007c6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007c9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007cc:	38 c8                	cmp    al,cl
c00007ce:	75 0c                	jne    c00007dc <strncmp+0x2a>
c00007d0:	42                   	inc    edx
c00007d1:	84 c0                	test   al,al
c00007d3:	74 03                	je     c00007d8 <strncmp+0x26>
c00007d5:	43                   	inc    ebx
c00007d6:	eb ea                	jmp    c00007c2 <strncmp+0x10>
c00007d8:	31 c0                	xor    eax,eax
c00007da:	eb 02                	jmp    c00007de <strncmp+0x2c>
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5b                   	pop    ebx
c00007df:	5e                   	pop    esi
c00007e0:	c3                   	ret    

c00007e1 <strcat>:
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007e6:	89 c1                	mov    ecx,eax
c00007e8:	8d 51 01             	lea    edx,[ecx+0x1]
c00007eb:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007ef:	74 04                	je     c00007f5 <strcat+0x14>
c00007f1:	89 d1                	mov    ecx,edx
c00007f3:	eb f3                	jmp    c00007e8 <strcat+0x7>
c00007f5:	31 d2                	xor    edx,edx
c00007f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007fb:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007fe:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000801:	42                   	inc    edx
c0000802:	84 db                	test   bl,bl
c0000804:	75 f1                	jne    c00007f7 <strcat+0x16>
c0000806:	5b                   	pop    ebx
c0000807:	c3                   	ret    

c0000808 <strncat>:
c0000808:	56                   	push   esi
c0000809:	53                   	push   ebx
c000080a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000080e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000812:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000816:	89 c2                	mov    edx,eax
c0000818:	85 db                	test   ebx,ebx
c000081a:	74 23                	je     c000083f <strncat+0x37>
c000081c:	8d 72 01             	lea    esi,[edx+0x1]
c000081f:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000823:	74 04                	je     c0000829 <strncat+0x21>
c0000825:	89 f2                	mov    edx,esi
c0000827:	eb f3                	jmp    c000081c <strncat+0x14>
c0000829:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000082c:	41                   	inc    ecx
c000082d:	42                   	inc    edx
c000082e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000831:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000834:	84 db                	test   bl,bl
c0000836:	74 07                	je     c000083f <strncat+0x37>
c0000838:	39 f1                	cmp    ecx,esi
c000083a:	75 f0                	jne    c000082c <strncat+0x24>
c000083c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000083f:	5b                   	pop    ebx
c0000840:	5e                   	pop    esi
c0000841:	c3                   	ret    

c0000842 <strstr>:
c0000842:	57                   	push   edi
c0000843:	56                   	push   esi
c0000844:	53                   	push   ebx
c0000845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000849:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084d:	57                   	push   edi
c000084e:	e8 55 fe ff ff       	call   c00006a8 <strlen>
c0000853:	59                   	pop    ecx
c0000854:	89 c6                	mov    esi,eax
c0000856:	85 c0                	test   eax,eax
c0000858:	74 1f                	je     c0000879 <strstr+0x37>
c000085a:	53                   	push   ebx
c000085b:	e8 48 fe ff ff       	call   c00006a8 <strlen>
c0000860:	5a                   	pop    edx
c0000861:	39 f0                	cmp    eax,esi
c0000863:	72 12                	jb     c0000877 <strstr+0x35>
c0000865:	56                   	push   esi
c0000866:	57                   	push   edi
c0000867:	53                   	push   ebx
c0000868:	e8 85 fd ff ff       	call   c00005f2 <memcmp>
c000086d:	83 c4 0c             	add    esp,0xc
c0000870:	85 c0                	test   eax,eax
c0000872:	74 05                	je     c0000879 <strstr+0x37>
c0000874:	43                   	inc    ebx
c0000875:	eb e3                	jmp    c000085a <strstr+0x18>
c0000877:	31 db                	xor    ebx,ebx
c0000879:	89 d8                	mov    eax,ebx
c000087b:	5b                   	pop    ebx
c000087c:	5e                   	pop    esi
c000087d:	5f                   	pop    edi
c000087e:	c3                   	ret    

c000087f <toupper>:
c000087f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000883:	0f b6 d0             	movzx  edx,al
c0000886:	f6 82 c0 7b 02 c0 02 	test   BYTE PTR [edx-0x3ffd8440],0x2
c000088d:	74 03                	je     c0000892 <toupper+0x13>
c000088f:	83 e8 20             	sub    eax,0x20
c0000892:	c3                   	ret    

c0000893 <tolower>:
c0000893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000897:	0f b6 d0             	movzx  edx,al
c000089a:	f6 82 c0 7b 02 c0 01 	test   BYTE PTR [edx-0x3ffd8440],0x1
c00008a1:	74 03                	je     c00008a6 <tolower+0x13>
c00008a3:	83 c0 20             	add    eax,0x20
c00008a6:	c3                   	ret    

c00008a7 <simple_strtoul>:
c00008a7:	55                   	push   ebp
c00008a8:	57                   	push   edi
c00008a9:	56                   	push   esi
c00008aa:	53                   	push   ebx
c00008ab:	83 ec 08             	sub    esp,0x8
c00008ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008b6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008b9:	f6 82 c0 7b 02 c0 08 	test   BYTE PTR [edx-0x3ffd8440],0x8
c00008c0:	74 03                	je     c00008c5 <simple_strtoul+0x1e>
c00008c2:	41                   	inc    ecx
c00008c3:	eb f1                	jmp    c00008b6 <simple_strtoul+0xf>
c00008c5:	80 fa 09             	cmp    dl,0x9
c00008c8:	74 f8                	je     c00008c2 <simple_strtoul+0x1b>
c00008ca:	80 fa 2d             	cmp    dl,0x2d
c00008cd:	75 0b                	jne    c00008da <simple_strtoul+0x33>
c00008cf:	41                   	inc    ecx
c00008d0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d8:	eb 0e                	jmp    c00008e8 <simple_strtoul+0x41>
c00008da:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008e2:	80 fa 2b             	cmp    dl,0x2b
c00008e5:	75 01                	jne    c00008e8 <simple_strtoul+0x41>
c00008e7:	41                   	inc    ecx
c00008e8:	85 f6                	test   esi,esi
c00008ea:	75 22                	jne    c000090e <simple_strtoul+0x67>
c00008ec:	be 0a 00 00 00       	mov    esi,0xa
c00008f1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008f4:	75 5a                	jne    c0000950 <simple_strtoul+0xa9>
c00008f6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008fa:	50                   	push   eax
c00008fb:	e8 93 ff ff ff       	call   c0000893 <tolower>
c0000900:	5a                   	pop    edx
c0000901:	83 f8 78             	cmp    eax,0x78
c0000904:	74 03                	je     c0000909 <simple_strtoul+0x62>
c0000906:	41                   	inc    ecx
c0000907:	eb 16                	jmp    c000091f <simple_strtoul+0x78>
c0000909:	83 c1 02             	add    ecx,0x2
c000090c:	eb 22                	jmp    c0000930 <simple_strtoul+0x89>
c000090e:	8d 46 fe             	lea    eax,[esi-0x2]
c0000911:	83 f8 22             	cmp    eax,0x22
c0000914:	0f 87 b7 00 00 00    	ja     c00009d1 <simple_strtoul+0x12a>
c000091a:	83 fe 08             	cmp    esi,0x8
c000091d:	75 0c                	jne    c000092b <simple_strtoul+0x84>
c000091f:	be 08 00 00 00       	mov    esi,0x8
c0000924:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000927:	75 27                	jne    c0000950 <simple_strtoul+0xa9>
c0000929:	eb 1f                	jmp    c000094a <simple_strtoul+0xa3>
c000092b:	83 fe 10             	cmp    esi,0x10
c000092e:	75 20                	jne    c0000950 <simple_strtoul+0xa9>
c0000930:	be 10 00 00 00       	mov    esi,0x10
c0000935:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000938:	75 16                	jne    c0000950 <simple_strtoul+0xa9>
c000093a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093e:	50                   	push   eax
c000093f:	e8 4f ff ff ff       	call   c0000893 <tolower>
c0000944:	5d                   	pop    ebp
c0000945:	83 f8 78             	cmp    eax,0x78
c0000948:	74 03                	je     c000094d <simple_strtoul+0xa6>
c000094a:	41                   	inc    ecx
c000094b:	eb 03                	jmp    c0000950 <simple_strtoul+0xa9>
c000094d:	83 c1 02             	add    ecx,0x2
c0000950:	31 ed                	xor    ebp,ebp
c0000952:	31 db                	xor    ebx,ebx
c0000954:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000095b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000095d:	84 d2                	test   dl,dl
c000095f:	74 27                	je     c0000988 <simple_strtoul+0xe1>
c0000961:	0f b6 fa             	movzx  edi,dl
c0000964:	f6 87 c0 7b 02 c0 04 	test   BYTE PTR [edi-0x3ffd8440],0x4
c000096b:	74 05                	je     c0000972 <simple_strtoul+0xcb>
c000096d:	83 ef 30             	sub    edi,0x30
c0000970:	eb 22                	jmp    c0000994 <simple_strtoul+0xed>
c0000972:	0f be d2             	movsx  edx,dl
c0000975:	52                   	push   edx
c0000976:	e8 04 ff ff ff       	call   c000087f <toupper>
c000097b:	5f                   	pop    edi
c000097c:	0f b6 d0             	movzx  edx,al
c000097f:	f6 82 c0 7b 02 c0 01 	test   BYTE PTR [edx-0x3ffd8440],0x1
c0000986:	75 09                	jne    c0000991 <simple_strtoul+0xea>
c0000988:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000098d:	75 2d                	jne    c00009bc <simple_strtoul+0x115>
c000098f:	eb 57                	jmp    c00009e8 <simple_strtoul+0x141>
c0000991:	8d 78 c9             	lea    edi,[eax-0x37]
c0000994:	39 f7                	cmp    edi,esi
c0000996:	73 f0                	jae    c0000988 <simple_strtoul+0xe1>
c0000998:	31 d2                	xor    edx,edx
c000099a:	89 f8                	mov    eax,edi
c000099c:	f7 d0                	not    eax
c000099e:	f7 f6                	div    esi
c00009a0:	39 d8                	cmp    eax,ebx
c00009a2:	72 0e                	jb     c00009b2 <simple_strtoul+0x10b>
c00009a4:	0f af de             	imul   ebx,esi
c00009a7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009ae:	01 fb                	add    ebx,edi
c00009b0:	eb 07                	jmp    c00009b9 <simple_strtoul+0x112>
c00009b2:	bd 01 00 00 00       	mov    ebp,0x1
c00009b7:	31 db                	xor    ebx,ebx
c00009b9:	41                   	inc    ecx
c00009ba:	eb 9f                	jmp    c000095b <simple_strtoul+0xb4>
c00009bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009bf:	09 d8                	or     eax,ebx
c00009c1:	75 1f                	jne    c00009e2 <simple_strtoul+0x13b>
c00009c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009cb:	31 db                	xor    ebx,ebx
c00009cd:	89 38                	mov    DWORD PTR [eax],edi
c00009cf:	eb 17                	jmp    c00009e8 <simple_strtoul+0x141>
c00009d1:	31 db                	xor    ebx,ebx
c00009d3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d8:	74 14                	je     c00009ee <simple_strtoul+0x147>
c00009da:	31 ed                	xor    ebp,ebp
c00009dc:	85 c9                	test   ecx,ecx
c00009de:	75 e3                	jne    c00009c3 <simple_strtoul+0x11c>
c00009e0:	31 db                	xor    ebx,ebx
c00009e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e6:	89 08                	mov    DWORD PTR [eax],ecx
c00009e8:	4d                   	dec    ebp
c00009e9:	75 03                	jne    c00009ee <simple_strtoul+0x147>
c00009eb:	83 cb ff             	or     ebx,0xffffffff
c00009ee:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009f3:	75 02                	jne    c00009f7 <simple_strtoul+0x150>
c00009f5:	f7 db                	neg    ebx
c00009f7:	83 c4 08             	add    esp,0x8
c00009fa:	89 d8                	mov    eax,ebx
c00009fc:	5b                   	pop    ebx
c00009fd:	5e                   	pop    esi
c00009fe:	5f                   	pop    edi
c00009ff:	5d                   	pop    ebp
c0000a00:	c3                   	ret    

c0000a01 <largebin_index>:
c0000a01:	89 c2                	mov    edx,eax
c0000a03:	c1 ea 08             	shr    edx,0x8
c0000a06:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a0c:	77 10                	ja     c0000a1e <largebin_index+0x1d>
c0000a0e:	0f bd d2             	bsr    edx,edx
c0000a11:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a14:	d3 e8                	shr    eax,cl
c0000a16:	83 e0 03             	and    eax,0x3
c0000a19:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a1d:	c3                   	ret    
c0000a1e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a23:	c3                   	ret    

c0000a24 <malloc_init_state>:
c0000a24:	53                   	push   ebx
c0000a25:	8d 50 34             	lea    edx,[eax+0x34]
c0000a28:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a2e:	89 d1                	mov    ecx,edx
c0000a30:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a33:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a36:	83 c2 08             	add    edx,0x8
c0000a39:	39 da                	cmp    edx,ebx
c0000a3b:	75 f3                	jne    c0000a30 <malloc_init_state+0xc>
c0000a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a3f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a49:	83 e2 03             	and    edx,0x3
c0000a4c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a56:	83 ca 48             	or     edx,0x48
c0000a59:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a63:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a6d:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a74:	89 10                	mov    DWORD PTR [eax],edx
c0000a76:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a79:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a83:	5b                   	pop    ebx
c0000a84:	c3                   	ret    

c0000a85 <malloc_consolidate>:
c0000a85:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a87:	85 d2                	test   edx,edx
c0000a89:	0f 84 d8 00 00 00    	je     c0000b67 <malloc_consolidate+0xe2>
c0000a8f:	55                   	push   ebp
c0000a90:	83 e2 fd             	and    edx,0xfffffffd
c0000a93:	57                   	push   edi
c0000a94:	89 c5                	mov    ebp,eax
c0000a96:	56                   	push   esi
c0000a97:	8d 78 34             	lea    edi,[eax+0x34]
c0000a9a:	53                   	push   ebx
c0000a9b:	83 ec 10             	sub    esp,0x10
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aa4:	c1 ea 03             	shr    edx,0x3
c0000aa7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aaf:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ab2:	85 d2                	test   edx,edx
c0000ab4:	0f 84 98 00 00 00    	je     c0000b52 <malloc_consolidate+0xcd>
c0000aba:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ac1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ac4:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ac7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000acb:	89 f9                	mov    ecx,edi
c0000acd:	83 e1 fe             	and    ecx,0xfffffffe
c0000ad0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ad3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ad6:	83 e3 fc             	and    ebx,0xfffffffc
c0000ad9:	83 e7 01             	and    edi,0x1
c0000adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000adf:	75 14                	jne    c0000af5 <malloc_consolidate+0x70>
c0000ae1:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ae3:	29 fa                	sub    edx,edi
c0000ae5:	01 f9                	add    ecx,edi
c0000ae7:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000aea:	89 fb                	mov    ebx,edi
c0000aec:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000aef:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000af2:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000af5:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000af8:	74 40                	je     c0000b3a <malloc_consolidate+0xb5>
c0000afa:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000afd:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b00:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b04:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b07:	83 e7 01             	and    edi,0x1
c0000b0a:	75 0e                	jne    c0000b1a <malloc_consolidate+0x95>
c0000b0c:	01 d9                	add    ecx,ebx
c0000b0e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b11:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b14:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b17:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b1a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b1d:	89 ce                	mov    esi,ecx
c0000b1f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b22:	83 ce 01             	or     esi,0x1
c0000b25:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b28:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b2b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b32:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b35:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b38:	eb 0c                	jmp    c0000b46 <malloc_consolidate+0xc1>
c0000b3a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b43:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b4a:	85 d2                	test   edx,edx
c0000b4c:	0f 85 6f ff ff ff    	jne    c0000ac1 <malloc_consolidate+0x3c>
c0000b52:	83 c5 04             	add    ebp,0x4
c0000b55:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b59:	0f 85 50 ff ff ff    	jne    c0000aaf <malloc_consolidate+0x2a>
c0000b5f:	83 c4 10             	add    esp,0x10
c0000b62:	5b                   	pop    ebx
c0000b63:	5e                   	pop    esi
c0000b64:	5f                   	pop    edi
c0000b65:	5d                   	pop    ebp
c0000b66:	c3                   	ret    
c0000b67:	e9 b8 fe ff ff       	jmp    c0000a24 <malloc_init_state>

c0000b6c <dlfree>:
c0000b6c:	57                   	push   edi
c0000b6d:	56                   	push   esi
c0000b6e:	53                   	push   ebx
c0000b6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b73:	85 db                	test   ebx,ebx
c0000b75:	0f 84 e2 00 00 00    	je     c0000c5d <dlfree+0xf1>
c0000b7b:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b7e:	8b 0d 40 c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c540
c0000b84:	89 f0                	mov    eax,esi
c0000b86:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b89:	83 e0 fc             	and    eax,0xfffffffc
c0000b8c:	39 c1                	cmp    ecx,eax
c0000b8e:	72 24                	jb     c0000bb4 <dlfree+0x48>
c0000b90:	83 c9 03             	or     ecx,0x3
c0000b93:	c1 e8 03             	shr    eax,0x3
c0000b96:	89 0d 40 c5 02 c0    	mov    DWORD PTR ds:0xc002c540,ecx
c0000b9c:	83 e8 02             	sub    eax,0x2
c0000b9f:	8b 0c 85 44 c5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3abc]
c0000ba6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ba8:	89 14 85 44 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3abc],edx
c0000baf:	e9 a9 00 00 00       	jmp    c0000c5d <dlfree+0xf1>
c0000bb4:	83 e6 02             	and    esi,0x2
c0000bb7:	0f 85 a0 00 00 00    	jne    c0000c5d <dlfree+0xf1>
c0000bbd:	83 c9 01             	or     ecx,0x1
c0000bc0:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bc3:	89 0d 40 c5 02 c0    	mov    DWORD PTR ds:0xc002c540,ecx
c0000bc9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bcc:	83 e1 fc             	and    ecx,0xfffffffc
c0000bcf:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bd3:	75 13                	jne    c0000be8 <dlfree+0x7c>
c0000bd5:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bd8:	29 da                	sub    edx,ebx
c0000bda:	01 d8                	add    eax,ebx
c0000bdc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bdf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000be2:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000be5:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000be8:	39 35 6c c5 02 c0    	cmp    DWORD PTR ds:0xc002c56c,esi
c0000bee:	74 40                	je     c0000c30 <dlfree+0xc4>
c0000bf0:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000bf4:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000bf7:	80 e3 01             	and    bl,0x1
c0000bfa:	75 0e                	jne    c0000c0a <dlfree+0x9e>
c0000bfc:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bff:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c02:	01 c8                	add    eax,ecx
c0000c04:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c07:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c0a:	8b 0d 7c c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c57c
c0000c10:	c7 42 0c 74 c5 02 c0 	mov    DWORD PTR [edx+0xc],0xc002c574
c0000c17:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c1a:	89 15 7c c5 02 c0    	mov    DWORD PTR ds:0xc002c57c,edx
c0000c20:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c23:	89 c1                	mov    ecx,eax
c0000c25:	83 c9 01             	or     ecx,0x1
c0000c28:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c2e:	eb 10                	jmp    c0000c40 <dlfree+0xd4>
c0000c30:	01 c8                	add    eax,ecx
c0000c32:	89 c1                	mov    ecx,eax
c0000c34:	83 c9 01             	or     ecx,0x1
c0000c37:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c3a:	89 15 6c c5 02 c0    	mov    DWORD PTR ds:0xc002c56c,edx
c0000c40:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c45:	76 16                	jbe    c0000c5d <dlfree+0xf1>
c0000c47:	f6 05 40 c5 02 c0 02 	test   BYTE PTR ds:0xc002c540,0x2
c0000c4e:	74 0d                	je     c0000c5d <dlfree+0xf1>
c0000c50:	5b                   	pop    ebx
c0000c51:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c0000c56:	5e                   	pop    esi
c0000c57:	5f                   	pop    edi
c0000c58:	e9 28 fe ff ff       	jmp    c0000a85 <malloc_consolidate>
c0000c5d:	5b                   	pop    ebx
c0000c5e:	5e                   	pop    esi
c0000c5f:	5f                   	pop    edi
c0000c60:	c3                   	ret    

c0000c61 <sYSMALLOc>:
c0000c61:	55                   	push   ebp
c0000c62:	57                   	push   edi
c0000c63:	56                   	push   esi
c0000c64:	53                   	push   ebx
c0000c65:	89 d3                	mov    ebx,edx
c0000c67:	83 ec 2c             	sub    esp,0x2c
c0000c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c6e:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c74:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c77:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c7e:	74 1f                	je     c0000c9f <sYSMALLOc+0x3e>
c0000c80:	89 d8                	mov    eax,ebx
c0000c82:	e8 fe fd ff ff       	call   c0000a85 <malloc_consolidate>
c0000c87:	83 ec 0c             	sub    esp,0xc
c0000c8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c8e:	83 e8 07             	sub    eax,0x7
c0000c91:	50                   	push   eax
c0000c92:	e8 30 02 00 00       	call   c0000ec7 <dlmalloc>
c0000c97:	83 c4 10             	add    esp,0x10
c0000c9a:	e9 20 02 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000c9f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ca2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ca8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cab:	83 e0 fc             	and    eax,0xfffffffc
c0000cae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cb6:	83 c0 10             	add    eax,0x10
c0000cb9:	01 c1                	add    ecx,eax
c0000cbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cc6:	74 04                	je     c0000ccc <sYSMALLOc+0x6b>
c0000cc8:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ccc:	f7 da                	neg    edx
c0000cce:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cd6:	21 d1                	and    ecx,edx
c0000cd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cdc:	7f 07                	jg     c0000ce5 <sYSMALLOc+0x84>
c0000cde:	31 c0                	xor    eax,eax
c0000ce0:	e9 da 01 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000ce5:	83 ec 0c             	sub    esp,0xc
c0000ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cec:	e8 3a e6 00 00       	call   c000f32b <sbrk>
c0000cf1:	83 c4 10             	add    esp,0x10
c0000cf4:	89 c6                	mov    esi,eax
c0000cf6:	83 f8 ff             	cmp    eax,0xffffffff
c0000cf9:	74 e3                	je     c0000cde <sYSMALLOc+0x7d>
c0000cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cff:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d03:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d06:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d0c:	39 f1                	cmp    ecx,esi
c0000d0e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d14:	75 13                	jne    c0000d29 <sYSMALLOc+0xc8>
c0000d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d1a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d1e:	83 c8 01             	or     eax,0x1
c0000d21:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d24:	e9 3e 01 00 00       	jmp    c0000e67 <sYSMALLOc+0x206>
c0000d29:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d2f:	88 d0                	mov    al,dl
c0000d31:	83 e0 01             	and    eax,0x1
c0000d34:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d3d:	0f 95 c0             	setne  al
c0000d40:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d44:	39 f1                	cmp    ecx,esi
c0000d46:	76 12                	jbe    c0000d5a <sYSMALLOc+0xf9>
c0000d48:	84 c0                	test   al,al
c0000d4a:	74 0e                	je     c0000d5a <sYSMALLOc+0xf9>
c0000d4c:	83 e2 fe             	and    edx,0xfffffffe
c0000d4f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d55:	e9 83 00 00 00       	jmp    c0000ddd <sYSMALLOc+0x17c>
c0000d5a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d5f:	74 7c                	je     c0000ddd <sYSMALLOc+0x17c>
c0000d61:	84 c0                	test   al,al
c0000d63:	74 0c                	je     c0000d71 <sYSMALLOc+0x110>
c0000d65:	89 f0                	mov    eax,esi
c0000d67:	29 c8                	sub    eax,ecx
c0000d69:	01 e8                	add    eax,ebp
c0000d6b:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d71:	89 f2                	mov    edx,esi
c0000d73:	83 e2 07             	and    edx,0x7
c0000d76:	74 0c                	je     c0000d84 <sYSMALLOc+0x123>
c0000d78:	b8 08 00 00 00       	mov    eax,0x8
c0000d7d:	29 d0                	sub    eax,edx
c0000d7f:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d82:	eb 04                	jmp    c0000d88 <sYSMALLOc+0x127>
c0000d84:	89 f5                	mov    ebp,esi
c0000d86:	31 c0                	xor    eax,eax
c0000d88:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d94:	01 c1                	add    ecx,eax
c0000d96:	83 ec 0c             	sub    esp,0xc
c0000d99:	01 f1                	add    ecx,esi
c0000d9b:	01 ca                	add    edx,ecx
c0000d9d:	29 c8                	sub    eax,ecx
c0000d9f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000da3:	01 c2                	add    edx,eax
c0000da5:	52                   	push   edx
c0000da6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000daa:	e8 7c e5 00 00       	call   c000f32b <sbrk>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	83 f8 ff             	cmp    eax,0xffffffff
c0000db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000db9:	75 0f                	jne    c0000dca <sYSMALLOc+0x169>
c0000dbb:	83 ec 0c             	sub    esp,0xc
c0000dbe:	6a 00                	push   0x0
c0000dc0:	e8 66 e5 00 00       	call   c000f32b <sbrk>
c0000dc5:	83 c4 10             	add    esp,0x10
c0000dc8:	eb 30                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000dca:	39 c6                	cmp    esi,eax
c0000dcc:	76 33                	jbe    c0000e01 <sYSMALLOc+0x1a0>
c0000dce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dd2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dd9:	01 f0                	add    eax,esi
c0000ddb:	eb 1d                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000ddd:	83 ec 0c             	sub    esp,0xc
c0000de0:	89 f5                	mov    ebp,esi
c0000de2:	6a 00                	push   0x0
c0000de4:	e8 42 e5 00 00       	call   c000f32b <sbrk>
c0000de9:	89 c2                	mov    edx,eax
c0000deb:	29 f2                	sub    edx,esi
c0000ded:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000df1:	83 c4 10             	add    esp,0x10
c0000df4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dfa:	31 d2                	xor    edx,edx
c0000dfc:	83 f8 ff             	cmp    eax,0xffffffff
c0000dff:	74 66                	je     c0000e67 <sYSMALLOc+0x206>
c0000e01:	29 e8                	sub    eax,ebp
c0000e03:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e06:	01 d0                	add    eax,edx
c0000e08:	83 c8 01             	or     eax,0x1
c0000e0b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e0e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e14:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e19:	74 4c                	je     c0000e67 <sYSMALLOc+0x206>
c0000e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1f:	83 e8 0c             	sub    eax,0xc
c0000e22:	83 e0 f8             	and    eax,0xfffffff8
c0000e25:	89 c2                	mov    edx,eax
c0000e27:	83 ca 01             	or     edx,0x1
c0000e2a:	83 f8 0f             	cmp    eax,0xf
c0000e2d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e30:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e38:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e40:	76 25                	jbe    c0000e67 <sYSMALLOc+0x206>
c0000e42:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e48:	83 ec 0c             	sub    esp,0xc
c0000e4b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e55:	83 c7 08             	add    edi,0x8
c0000e58:	57                   	push   edi
c0000e59:	e8 0e fd ff ff       	call   c0000b6c <dlfree>
c0000e5e:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e64:	83 c4 10             	add    esp,0x10
c0000e67:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e6d:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e73:	73 06                	jae    c0000e7b <sYSMALLOc+0x21a>
c0000e75:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e7b:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e81:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e87:	73 06                	jae    c0000e8f <sYSMALLOc+0x22e>
c0000e89:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e8f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e95:	83 e2 fc             	and    edx,0xfffffffc
c0000e98:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e9c:	0f 82 3c fe ff ff    	jb     c0000cde <sYSMALLOc+0x7d>
c0000ea2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ea6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ea9:	29 fa                	sub    edx,edi
c0000eab:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000eae:	83 ca 01             	or     edx,0x1
c0000eb1:	89 fb                	mov    ebx,edi
c0000eb3:	83 c0 08             	add    eax,0x8
c0000eb6:	83 cb 01             	or     ebx,0x1
c0000eb9:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ebc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ebf:	83 c4 2c             	add    esp,0x2c
c0000ec2:	5b                   	pop    ebx
c0000ec3:	5e                   	pop    esi
c0000ec4:	5f                   	pop    edi
c0000ec5:	5d                   	pop    ebp
c0000ec6:	c3                   	ret    

c0000ec7 <dlmalloc>:
c0000ec7:	55                   	push   ebp
c0000ec8:	57                   	push   edi
c0000ec9:	56                   	push   esi
c0000eca:	53                   	push   ebx
c0000ecb:	83 ec 1c             	sub    esp,0x1c
c0000ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ed2:	83 f8 df             	cmp    eax,0xffffffdf
c0000ed5:	0f 87 70 03 00 00    	ja     c000124b <dlmalloc+0x384>
c0000edb:	83 c0 0b             	add    eax,0xb
c0000ede:	be 10 00 00 00       	mov    esi,0x10
c0000ee3:	83 f8 0f             	cmp    eax,0xf
c0000ee6:	76 05                	jbe    c0000eed <dlmalloc+0x26>
c0000ee8:	83 e0 f8             	and    eax,0xfffffff8
c0000eeb:	89 c6                	mov    esi,eax
c0000eed:	8b 3d 40 c5 02 c0    	mov    edi,DWORD PTR ds:0xc002c540
c0000ef3:	f7 c7 01 00 00 00    	test   edi,0x1
c0000ef9:	75 17                	jne    c0000f12 <dlmalloc+0x4b>
c0000efb:	85 ff                	test   edi,edi
c0000efd:	0f 85 05 03 00 00    	jne    c0001208 <dlmalloc+0x341>
c0000f03:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c0000f08:	e8 78 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f0d:	e9 f6 02 00 00       	jmp    c0001208 <dlmalloc+0x341>
c0000f12:	39 f7                	cmp    edi,esi
c0000f14:	72 1f                	jb     c0000f35 <dlmalloc+0x6e>
c0000f16:	89 f2                	mov    edx,esi
c0000f18:	c1 ea 03             	shr    edx,0x3
c0000f1b:	83 ea 02             	sub    edx,0x2
c0000f1e:	8b 04 95 44 c5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3abc]
c0000f25:	85 c0                	test   eax,eax
c0000f27:	74 0c                	je     c0000f35 <dlmalloc+0x6e>
c0000f29:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f2c:	89 0c 95 44 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3abc],ecx
c0000f33:	eb 30                	jmp    c0000f65 <dlmalloc+0x9e>
c0000f35:	89 f0                	mov    eax,esi
c0000f37:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f3d:	77 2e                	ja     c0000f6d <dlmalloc+0xa6>
c0000f3f:	c1 e8 03             	shr    eax,0x3
c0000f42:	8d 14 c5 74 c5 02 c0 	lea    edx,[eax*8-0x3ffd3a8c]
c0000f49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f50:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f53:	39 c3                	cmp    ebx,eax
c0000f55:	74 2e                	je     c0000f85 <dlmalloc+0xbe>
c0000f57:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f5a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f62:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f65:	83 c0 08             	add    eax,0x8
c0000f68:	e9 e0 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0000f6d:	e8 8f fa ff ff       	call   c0000a01 <largebin_index>
c0000f72:	83 e7 02             	and    edi,0x2
c0000f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f79:	74 0a                	je     c0000f85 <dlmalloc+0xbe>
c0000f7b:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c0000f80:	e8 00 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f85:	8d 46 10             	lea    eax,[esi+0x10]
c0000f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f8c:	8b 1d 80 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c580
c0000f92:	81 fb 74 c5 02 c0    	cmp    ebx,0xc002c574
c0000f98:	0f 84 13 01 00 00    	je     c00010b1 <dlmalloc+0x1ea>
c0000f9e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fa1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fa4:	83 e7 fc             	and    edi,0xfffffffc
c0000fa7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fad:	77 4c                	ja     c0000ffb <dlmalloc+0x134>
c0000faf:	3d 74 c5 02 c0       	cmp    eax,0xc002c574
c0000fb4:	75 45                	jne    c0000ffb <dlmalloc+0x134>
c0000fb6:	39 1d 70 c5 02 c0    	cmp    DWORD PTR ds:0xc002c570,ebx
c0000fbc:	75 3d                	jne    c0000ffb <dlmalloc+0x134>
c0000fbe:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fc2:	73 37                	jae    c0000ffb <dlmalloc+0x134>
c0000fc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fc7:	89 fa                	mov    edx,edi
c0000fc9:	a3 7c c5 02 c0       	mov    ds:0xc002c57c,eax
c0000fce:	a3 80 c5 02 c0       	mov    ds:0xc002c580,eax
c0000fd3:	a3 70 c5 02 c0       	mov    ds:0xc002c570,eax
c0000fd8:	29 f2                	sub    edx,esi
c0000fda:	c7 40 08 74 c5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c574
c0000fe1:	c7 40 0c 74 c5 02 c0 	mov    DWORD PTR [eax+0xc],0xc002c574
c0000fe8:	83 ce 01             	or     esi,0x1
c0000feb:	89 d1                	mov    ecx,edx
c0000fed:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000ff0:	83 c9 01             	or     ecx,0x1
c0000ff3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000ff6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000ff9:	eb 15                	jmp    c0001010 <dlmalloc+0x149>
c0000ffb:	a3 80 c5 02 c0       	mov    ds:0xc002c580,eax
c0001000:	39 fe                	cmp    esi,edi
c0001002:	c7 40 08 74 c5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c574
c0001009:	75 0d                	jne    c0001018 <dlmalloc+0x151>
c000100b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001010:	8d 43 08             	lea    eax,[ebx+0x8]
c0001013:	e9 35 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0001018:	89 f8                	mov    eax,edi
c000101a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001020:	77 19                	ja     c000103b <dlmalloc+0x174>
c0001022:	c1 e8 03             	shr    eax,0x3
c0001025:	8d 14 00             	lea    edx,[eax+eax*1]
c0001028:	83 c2 0d             	add    edx,0xd
c000102b:	8d 2c 95 38 c5 02 c0 	lea    ebp,[edx*4-0x3ffd3ac8]
c0001032:	8b 14 95 40 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3ac0]
c0001039:	eb 46                	jmp    c0001081 <dlmalloc+0x1ba>
c000103b:	e8 c1 f9 ff ff       	call   c0000a01 <largebin_index>
c0001040:	8d 14 00             	lea    edx,[eax+eax*1]
c0001043:	83 c2 0d             	add    edx,0xd
c0001046:	8d 0c 95 40 c5 02 c0 	lea    ecx,[edx*4-0x3ffd3ac0]
c000104d:	8b 14 95 40 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3ac0]
c0001054:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001057:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000105b:	89 d5                	mov    ebp,edx
c000105d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001061:	74 1e                	je     c0001081 <dlmalloc+0x1ba>
c0001063:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001066:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001069:	77 12                	ja     c000107d <dlmalloc+0x1b6>
c000106b:	83 cf 01             	or     edi,0x1
c000106e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001071:	76 05                	jbe    c0001078 <dlmalloc+0x1b1>
c0001073:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001076:	eb f6                	jmp    c000106e <dlmalloc+0x1a7>
c0001078:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000107b:	eb 04                	jmp    c0001081 <dlmalloc+0x1ba>
c000107d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001081:	89 c7                	mov    edi,eax
c0001083:	88 c1                	mov    cl,al
c0001085:	c1 ff 05             	sar    edi,0x5
c0001088:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000108c:	bf 01 00 00 00       	mov    edi,0x1
c0001091:	d3 e7                	shl    edi,cl
c0001093:	89 f8                	mov    eax,edi
c0001095:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001099:	09 04 bd 74 c8 02 c0 	or     DWORD PTR [edi*4-0x3ffd378c],eax
c00010a0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010a3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010a6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010a9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ac:	e9 db fe ff ff       	jmp    c0000f8c <dlmalloc+0xc5>
c00010b1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010b7:	76 78                	jbe    c0001131 <dlmalloc+0x26a>
c00010b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010bd:	8d 04 c5 74 c5 02 c0 	lea    eax,[eax*8-0x3ffd3a8c]
c00010c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ca:	39 ca                	cmp    edx,ecx
c00010cc:	74 63                	je     c0001131 <dlmalloc+0x26a>
c00010ce:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010d1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010d4:	83 e3 fc             	and    ebx,0xfffffffc
c00010d7:	39 de                	cmp    esi,ebx
c00010d9:	77 52                	ja     c000112d <dlmalloc+0x266>
c00010db:	89 df                	mov    edi,ebx
c00010dd:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010e0:	29 f7                	sub    edi,esi
c00010e2:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010e5:	01 d3                	add    ebx,edx
c00010e7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010ea:	83 ff 0f             	cmp    edi,0xf
c00010ed:	8d 42 08             	lea    eax,[edx+0x8]
c00010f0:	77 09                	ja     c00010fb <dlmalloc+0x234>
c00010f2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010f6:	e9 52 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c00010fb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010fe:	83 ce 01             	or     esi,0x1
c0001101:	89 0d 7c c5 02 c0    	mov    DWORD PTR ds:0xc002c57c,ecx
c0001107:	89 0d 80 c5 02 c0    	mov    DWORD PTR ds:0xc002c580,ecx
c000110d:	c7 41 08 74 c5 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002c574
c0001114:	c7 41 0c 74 c5 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002c574
c000111b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000111e:	89 fa                	mov    edx,edi
c0001120:	83 ca 01             	or     edx,0x1
c0001123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001126:	89 3b                	mov    DWORD PTR [ebx],edi
c0001128:	e9 20 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c000112d:	89 c2                	mov    edx,eax
c000112f:	eb 99                	jmp    c00010ca <dlmalloc+0x203>
c0001131:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001135:	b8 01 00 00 00       	mov    eax,0x1
c000113a:	41                   	inc    ecx
c000113b:	89 cb                	mov    ebx,ecx
c000113d:	8d 14 cd 6c c5 02 c0 	lea    edx,[ecx*8-0x3ffd3a94]
c0001144:	c1 eb 05             	shr    ebx,0x5
c0001147:	d3 e0                	shl    eax,cl
c0001149:	8b 3c 9d 74 c8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd378c]
c0001150:	39 f8                	cmp    eax,edi
c0001152:	77 04                	ja     c0001158 <dlmalloc+0x291>
c0001154:	85 c0                	test   eax,eax
c0001156:	75 26                	jne    c000117e <dlmalloc+0x2b7>
c0001158:	43                   	inc    ebx
c0001159:	83 fb 02             	cmp    ebx,0x2
c000115c:	0f 87 a6 00 00 00    	ja     c0001208 <dlmalloc+0x341>
c0001162:	8b 3c 9d 74 c8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd378c]
c0001169:	85 ff                	test   edi,edi
c000116b:	74 eb                	je     c0001158 <dlmalloc+0x291>
c000116d:	89 d8                	mov    eax,ebx
c000116f:	c1 e0 06             	shl    eax,0x6
c0001172:	8d 14 85 6c c5 02 c0 	lea    edx,[eax*4-0x3ffd3a94]
c0001179:	b8 01 00 00 00       	mov    eax,0x1
c000117e:	85 f8                	test   eax,edi
c0001180:	75 07                	jne    c0001189 <dlmalloc+0x2c2>
c0001182:	83 c2 08             	add    edx,0x8
c0001185:	01 c0                	add    eax,eax
c0001187:	eb f5                	jmp    c000117e <dlmalloc+0x2b7>
c0001189:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000118c:	39 ca                	cmp    edx,ecx
c000118e:	75 14                	jne    c00011a4 <dlmalloc+0x2dd>
c0001190:	89 c1                	mov    ecx,eax
c0001192:	83 c2 08             	add    edx,0x8
c0001195:	f7 d1                	not    ecx
c0001197:	01 c0                	add    eax,eax
c0001199:	21 cf                	and    edi,ecx
c000119b:	89 3c 9d 74 c8 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd378c],edi
c00011a2:	eb ac                	jmp    c0001150 <dlmalloc+0x289>
c00011a4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011a7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011aa:	83 e0 fc             	and    eax,0xfffffffc
c00011ad:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011b0:	89 c3                	mov    ebx,eax
c00011b2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011b5:	29 f3                	sub    ebx,esi
c00011b7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ba:	83 fb 0f             	cmp    ebx,0xf
c00011bd:	8d 41 08             	lea    eax,[ecx+0x8]
c00011c0:	77 09                	ja     c00011cb <dlmalloc+0x304>
c00011c2:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011c6:	e9 82 00 00 00       	jmp    c000124d <dlmalloc+0x386>
c00011cb:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	89 3d 7c c5 02 c0    	mov    DWORD PTR ds:0xc002c57c,edi
c00011da:	89 3d 80 c5 02 c0    	mov    DWORD PTR ds:0xc002c580,edi
c00011e0:	c7 47 08 74 c5 02 c0 	mov    DWORD PTR [edi+0x8],0xc002c574
c00011e7:	c7 47 0c 74 c5 02 c0 	mov    DWORD PTR [edi+0xc],0xc002c574
c00011ee:	77 06                	ja     c00011f6 <dlmalloc+0x32f>
c00011f0:	89 3d 70 c5 02 c0    	mov    DWORD PTR ds:0xc002c570,edi
c00011f6:	83 ce 01             	or     esi,0x1
c00011f9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011fc:	89 d9                	mov    ecx,ebx
c00011fe:	83 c9 01             	or     ecx,0x1
c0001201:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001204:	89 1a                	mov    DWORD PTR [edx],ebx
c0001206:	eb 45                	jmp    c000124d <dlmalloc+0x386>
c0001208:	a1 6c c5 02 c0       	mov    eax,ds:0xc002c56c
c000120d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001210:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001213:	83 e2 fc             	and    edx,0xfffffffc
c0001216:	39 d1                	cmp    ecx,edx
c0001218:	77 1e                	ja     c0001238 <dlmalloc+0x371>
c000121a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000121d:	89 f3                	mov    ebx,esi
c000121f:	89 0d 6c c5 02 c0    	mov    DWORD PTR ds:0xc002c56c,ecx
c0001225:	83 cb 01             	or     ebx,0x1
c0001228:	29 f2                	sub    edx,esi
c000122a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000122d:	83 ca 01             	or     edx,0x1
c0001230:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001233:	e9 2d fd ff ff       	jmp    c0000f65 <dlmalloc+0x9e>
c0001238:	83 c4 1c             	add    esp,0x1c
c000123b:	89 f0                	mov    eax,esi
c000123d:	5b                   	pop    ebx
c000123e:	ba 40 c5 02 c0       	mov    edx,0xc002c540
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	e9 16 fa ff ff       	jmp    c0000c61 <sYSMALLOc>
c000124b:	31 c0                	xor    eax,eax
c000124d:	83 c4 1c             	add    esp,0x1c
c0001250:	5b                   	pop    ebx
c0001251:	5e                   	pop    esi
c0001252:	5f                   	pop    edi
c0001253:	5d                   	pop    ebp
c0001254:	c3                   	ret    

c0001255 <iALLOc>:
c0001255:	55                   	push   ebp
c0001256:	89 c5                	mov    ebp,eax
c0001258:	57                   	push   edi
c0001259:	56                   	push   esi
c000125a:	53                   	push   ebx
c000125b:	83 ec 2c             	sub    esp,0x2c
c000125e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001262:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000126a:	83 3d 40 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c540,0x0
c0001271:	75 12                	jne    c0001285 <iALLOc+0x30>
c0001273:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001277:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c000127c:	e8 04 f8 ff ff       	call   c0000a85 <malloc_consolidate>
c0001281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001285:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000128a:	74 12                	je     c000129e <iALLOc+0x49>
c000128c:	85 ed                	test   ebp,ebp
c000128e:	0f 84 64 01 00 00    	je     c00013f8 <iALLOc+0x1a3>
c0001294:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000129c:	eb 33                	jmp    c00012d1 <iALLOc+0x7c>
c000129e:	85 ed                	test   ebp,ebp
c00012a0:	75 14                	jne    c00012b6 <iALLOc+0x61>
c00012a2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012aa:	83 c4 2c             	add    esp,0x2c
c00012ad:	5b                   	pop    ebx
c00012ae:	5e                   	pop    esi
c00012af:	5f                   	pop    edi
c00012b0:	5d                   	pop    ebp
c00012b1:	e9 11 fc ff ff       	jmp    c0000ec7 <dlmalloc>
c00012b6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012bd:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012c5:	83 f8 0f             	cmp    eax,0xf
c00012c8:	76 07                	jbe    c00012d1 <iALLOc+0x7c>
c00012ca:	83 e0 f8             	and    eax,0xfffffff8
c00012cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012d1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012d6:	75 09                	jne    c00012e1 <iALLOc+0x8c>
c00012d8:	89 d0                	mov    eax,edx
c00012da:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012dd:	31 f6                	xor    esi,esi
c00012df:	eb 3b                	jmp    c000131c <iALLOc+0xc7>
c00012e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00012e3:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012eb:	83 c0 0b             	add    eax,0xb
c00012ee:	83 f8 0f             	cmp    eax,0xf
c00012f1:	76 07                	jbe    c00012fa <iALLOc+0xa5>
c00012f3:	83 e0 f8             	and    eax,0xfffffff8
c00012f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012fe:	0f af f5             	imul   esi,ebp
c0001301:	eb 25                	jmp    c0001328 <iALLOc+0xd3>
c0001303:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001305:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001308:	bb 10 00 00 00       	mov    ebx,0x10
c000130d:	83 f9 0f             	cmp    ecx,0xf
c0001310:	76 05                	jbe    c0001317 <iALLOc+0xc2>
c0001312:	83 e1 f8             	and    ecx,0xfffffff8
c0001315:	89 cb                	mov    ebx,ecx
c0001317:	01 de                	add    esi,ebx
c0001319:	83 c0 04             	add    eax,0x4
c000131c:	39 c7                	cmp    edi,eax
c000131e:	75 e3                	jne    c0001303 <iALLOc+0xae>
c0001320:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000132c:	8b 1d 94 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c894
c0001332:	83 ec 0c             	sub    esp,0xc
c0001335:	c7 05 94 c8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c894,0x0
c000133f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001343:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001347:	50                   	push   eax
c0001348:	e8 7a fb ff ff       	call   c0000ec7 <dlmalloc>
c000134d:	83 c4 10             	add    esp,0x10
c0001350:	89 1d 94 c8 02 c0    	mov    DWORD PTR ds:0xc002c894,ebx
c0001356:	85 c0                	test   eax,eax
c0001358:	0f 84 92 00 00 00    	je     c00013f0 <iALLOc+0x19b>
c000135e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001361:	8d 78 f8             	lea    edi,[eax-0x8]
c0001364:	83 e3 fc             	and    ebx,0xfffffffc
c0001367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000136b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001370:	74 1e                	je     c0001390 <iALLOc+0x13b>
c0001372:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001376:	89 d9                	mov    ecx,ebx
c0001378:	52                   	push   edx
c0001379:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000137d:	83 e9 04             	sub    ecx,0x4
c0001380:	51                   	push   ecx
c0001381:	6a 00                	push   0x0
c0001383:	50                   	push   eax
c0001384:	e8 02 f3 ff ff       	call   c000068b <memset>
c0001389:	83 c4 10             	add    esp,0x10
c000138c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001390:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001395:	75 14                	jne    c00013ab <iALLOc+0x156>
c0001397:	8d 04 37             	lea    eax,[edi+esi*1]
c000139a:	29 f3                	sub    ebx,esi
c000139c:	8d 48 08             	lea    ecx,[eax+0x8]
c000139f:	83 cb 01             	or     ebx,0x1
c00013a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013a9:	89 f3                	mov    ebx,esi
c00013ab:	31 c0                	xor    eax,eax
c00013ad:	4d                   	dec    ebp
c00013ae:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013b1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013b5:	39 c5                	cmp    ebp,eax
c00013b7:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ba:	74 2c                	je     c00013e8 <iALLOc+0x193>
c00013bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c0:	85 c9                	test   ecx,ecx
c00013c2:	75 15                	jne    c00013d9 <iALLOc+0x184>
c00013c4:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013c7:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013ca:	b9 10 00 00 00       	mov    ecx,0x10
c00013cf:	83 fe 0f             	cmp    esi,0xf
c00013d2:	76 05                	jbe    c00013d9 <iALLOc+0x184>
c00013d4:	83 e6 f8             	and    esi,0xfffffff8
c00013d7:	89 f1                	mov    ecx,esi
c00013d9:	89 ce                	mov    esi,ecx
c00013db:	29 cb                	sub    ebx,ecx
c00013dd:	83 ce 01             	or     esi,0x1
c00013e0:	40                   	inc    eax
c00013e1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013e4:	01 cf                	add    edi,ecx
c00013e6:	eb c6                	jmp    c00013ae <iALLOc+0x159>
c00013e8:	83 cb 01             	or     ebx,0x1
c00013eb:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013ee:	eb 08                	jmp    c00013f8 <iALLOc+0x1a3>
c00013f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013fc:	83 c4 2c             	add    esp,0x2c
c00013ff:	5b                   	pop    ebx
c0001400:	5e                   	pop    esi
c0001401:	5f                   	pop    edi
c0001402:	5d                   	pop    ebp
c0001403:	c3                   	ret    

c0001404 <dlrealloc>:
c0001404:	55                   	push   ebp
c0001405:	57                   	push   edi
c0001406:	56                   	push   esi
c0001407:	53                   	push   ebx
c0001408:	83 ec 1c             	sub    esp,0x1c
c000140b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000140f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001413:	85 db                	test   ebx,ebx
c0001415:	75 10                	jne    c0001427 <dlrealloc+0x23>
c0001417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000141b:	83 c4 1c             	add    esp,0x1c
c000141e:	5b                   	pop    ebx
c000141f:	5e                   	pop    esi
c0001420:	5f                   	pop    edi
c0001421:	5d                   	pop    ebp
c0001422:	e9 a0 fa ff ff       	jmp    c0000ec7 <dlmalloc>
c0001427:	83 f8 df             	cmp    eax,0xffffffdf
c000142a:	76 07                	jbe    c0001433 <dlrealloc+0x2f>
c000142c:	31 db                	xor    ebx,ebx
c000142e:	e9 7c 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c0001433:	83 c0 0b             	add    eax,0xb
c0001436:	bf 10 00 00 00       	mov    edi,0x10
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 05                	jbe    c0001445 <dlrealloc+0x41>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 c7                	mov    edi,eax
c0001445:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001448:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000144b:	89 c6                	mov    esi,eax
c000144d:	83 e6 fc             	and    esi,0xfffffffc
c0001450:	a8 02                	test   al,0x2
c0001452:	75 d8                	jne    c000142c <dlrealloc+0x28>
c0001454:	39 f7                	cmp    edi,esi
c0001456:	0f 86 15 01 00 00    	jbe    c0001571 <dlrealloc+0x16d>
c000145c:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001460:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001463:	39 15 6c c5 02 c0    	cmp    DWORD PTR ds:0xc002c56c,edx
c0001469:	75 33                	jne    c000149e <dlrealloc+0x9a>
c000146b:	83 e1 fc             	and    ecx,0xfffffffc
c000146e:	01 f1                	add    ecx,esi
c0001470:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001474:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001477:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000147b:	77 49                	ja     c00014c6 <dlrealloc+0xc2>
c000147d:	01 fd                	add    ebp,edi
c000147f:	83 e0 01             	and    eax,0x1
c0001482:	09 f8                	or     eax,edi
c0001484:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001487:	89 2d 6c c5 02 c0    	mov    DWORD PTR ds:0xc002c56c,ebp
c000148d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001491:	29 f8                	sub    eax,edi
c0001493:	83 c8 01             	or     eax,0x1
c0001496:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001499:	e9 11 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c000149e:	89 c8                	mov    eax,ecx
c00014a0:	83 e0 fe             	and    eax,0xfffffffe
c00014a3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014a8:	75 1c                	jne    c00014c6 <dlrealloc+0xc2>
c00014aa:	83 e1 fc             	and    ecx,0xfffffffc
c00014ad:	01 f1                	add    ecx,esi
c00014af:	39 cf                	cmp    edi,ecx
c00014b1:	77 13                	ja     c00014c6 <dlrealloc+0xc2>
c00014b3:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014b6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014b9:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014bc:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014bf:	89 ce                	mov    esi,ecx
c00014c1:	e9 ab 00 00 00       	jmp    c0001571 <dlrealloc+0x16d>
c00014c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014ca:	8d 47 f9             	lea    eax,[edi-0x7]
c00014cd:	83 ec 0c             	sub    esp,0xc
c00014d0:	50                   	push   eax
c00014d1:	e8 f1 f9 ff ff       	call   c0000ec7 <dlmalloc>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	89 c1                	mov    ecx,eax
c00014db:	85 c0                	test   eax,eax
c00014dd:	0f 84 49 ff ff ff    	je     c000142c <dlrealloc+0x28>
c00014e3:	8d 40 f8             	lea    eax,[eax-0x8]
c00014e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014ea:	39 c2                	cmp    edx,eax
c00014ec:	75 0a                	jne    c00014f8 <dlrealloc+0xf4>
c00014ee:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014f1:	83 e0 fc             	and    eax,0xfffffffc
c00014f4:	01 c6                	add    esi,eax
c00014f6:	eb 79                	jmp    c0001571 <dlrealloc+0x16d>
c00014f8:	83 ee 04             	sub    esi,0x4
c00014fb:	83 fe 27             	cmp    esi,0x27
c00014fe:	76 16                	jbe    c0001516 <dlrealloc+0x112>
c0001500:	50                   	push   eax
c0001501:	56                   	push   esi
c0001502:	53                   	push   ebx
c0001503:	51                   	push   ecx
c0001504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001508:	e8 48 f1 ff ff       	call   c0000655 <memcpy>
c000150d:	83 c4 10             	add    esp,0x10
c0001510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001514:	eb 43                	jmp    c0001559 <dlrealloc+0x155>
c0001516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001518:	83 fe 13             	cmp    esi,0x13
c000151b:	89 01                	mov    DWORD PTR [ecx],eax
c000151d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001520:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001523:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001529:	76 2e                	jbe    c0001559 <dlrealloc+0x155>
c000152b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000152e:	83 fe 1b             	cmp    esi,0x1b
c0001531:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001534:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001537:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000153a:	76 1d                	jbe    c0001559 <dlrealloc+0x155>
c000153c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000153f:	83 fe 23             	cmp    esi,0x23
c0001542:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001548:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000154b:	76 0c                	jbe    c0001559 <dlrealloc+0x155>
c000154d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001550:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001556:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001559:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000155d:	83 ec 0c             	sub    esp,0xc
c0001560:	53                   	push   ebx
c0001561:	e8 06 f6 ff ff       	call   c0000b6c <dlfree>
c0001566:	83 c4 10             	add    esp,0x10
c0001569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	eb 3e                	jmp    c00015af <dlrealloc+0x1ab>
c0001571:	89 f2                	mov    edx,esi
c0001573:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001576:	29 fa                	sub    edx,edi
c0001578:	83 e1 01             	and    ecx,0x1
c000157b:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c000157f:	83 fa 0f             	cmp    edx,0xf
c0001582:	77 0b                	ja     c000158f <dlrealloc+0x18b>
c0001584:	09 ce                	or     esi,ecx
c0001586:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001589:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000158d:	eb 20                	jmp    c00015af <dlrealloc+0x1ab>
c000158f:	01 fd                	add    ebp,edi
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	09 cf                	or     edi,ecx
c0001596:	83 ca 01             	or     edx,0x1
c0001599:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000159c:	83 c5 08             	add    ebp,0x8
c000159f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015a2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015a6:	55                   	push   ebp
c00015a7:	e8 c0 f5 ff ff       	call   c0000b6c <dlfree>
c00015ac:	83 c4 10             	add    esp,0x10
c00015af:	83 c4 1c             	add    esp,0x1c
c00015b2:	89 d8                	mov    eax,ebx
c00015b4:	5b                   	pop    ebx
c00015b5:	5e                   	pop    esi
c00015b6:	5f                   	pop    edi
c00015b7:	5d                   	pop    ebp
c00015b8:	c3                   	ret    

c00015b9 <dlmemalign>:
c00015b9:	55                   	push   ebp
c00015ba:	57                   	push   edi
c00015bb:	56                   	push   esi
c00015bc:	53                   	push   ebx
c00015bd:	83 ec 0c             	sub    esp,0xc
c00015c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015c8:	83 fa 08             	cmp    edx,0x8
c00015cb:	77 10                	ja     c00015dd <dlmemalign+0x24>
c00015cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015d1:	83 c4 0c             	add    esp,0xc
c00015d4:	5b                   	pop    ebx
c00015d5:	5e                   	pop    esi
c00015d6:	5f                   	pop    edi
c00015d7:	5d                   	pop    ebp
c00015d8:	e9 ea f8 ff ff       	jmp    c0000ec7 <dlmalloc>
c00015dd:	bf 10 00 00 00       	mov    edi,0x10
c00015e2:	83 fa 0f             	cmp    edx,0xf
c00015e5:	76 13                	jbe    c00015fa <dlmemalign+0x41>
c00015e7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015ea:	85 d1                	test   ecx,edx
c00015ec:	75 04                	jne    c00015f2 <dlmemalign+0x39>
c00015ee:	89 d7                	mov    edi,edx
c00015f0:	eb 08                	jmp    c00015fa <dlmemalign+0x41>
c00015f2:	39 d7                	cmp    edi,edx
c00015f4:	73 04                	jae    c00015fa <dlmemalign+0x41>
c00015f6:	01 ff                	add    edi,edi
c00015f8:	eb f8                	jmp    c00015f2 <dlmemalign+0x39>
c00015fa:	83 f8 df             	cmp    eax,0xffffffdf
c00015fd:	76 07                	jbe    c0001606 <dlmemalign+0x4d>
c00015ff:	31 c0                	xor    eax,eax
c0001601:	e9 ce 00 00 00       	jmp    c00016d4 <dlmemalign+0x11b>
c0001606:	83 c0 0b             	add    eax,0xb
c0001609:	bd 10 00 00 00       	mov    ebp,0x10
c000160e:	83 f8 0f             	cmp    eax,0xf
c0001611:	76 05                	jbe    c0001618 <dlmemalign+0x5f>
c0001613:	83 e0 f8             	and    eax,0xfffffff8
c0001616:	89 c5                	mov    ebp,eax
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000161f:	50                   	push   eax
c0001620:	e8 a2 f8 ff ff       	call   c0000ec7 <dlmalloc>
c0001625:	83 c4 10             	add    esp,0x10
c0001628:	89 c1                	mov    ecx,eax
c000162a:	85 c0                	test   eax,eax
c000162c:	74 d1                	je     c00015ff <dlmemalign+0x46>
c000162e:	31 d2                	xor    edx,edx
c0001630:	8d 70 f8             	lea    esi,[eax-0x8]
c0001633:	f7 f7                	div    edi
c0001635:	85 d2                	test   edx,edx
c0001637:	74 62                	je     c000169b <dlmemalign+0xe2>
c0001639:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000163d:	89 f8                	mov    eax,edi
c000163f:	f7 d8                	neg    eax
c0001641:	21 c3                	and    ebx,eax
c0001643:	83 eb 08             	sub    ebx,0x8
c0001646:	89 d8                	mov    eax,ebx
c0001648:	29 f0                	sub    eax,esi
c000164a:	83 f8 0f             	cmp    eax,0xf
c000164d:	77 02                	ja     c0001651 <dlmemalign+0x98>
c000164f:	01 fb                	add    ebx,edi
c0001651:	89 d8                	mov    eax,ebx
c0001653:	29 f0                	sub    eax,esi
c0001655:	89 c6                	mov    esi,eax
c0001657:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000165a:	89 c2                	mov    edx,eax
c000165c:	83 e2 fc             	and    edx,0xfffffffc
c000165f:	29 f2                	sub    edx,esi
c0001661:	a8 02                	test   al,0x2
c0001663:	74 10                	je     c0001675 <dlmemalign+0xbc>
c0001665:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001668:	83 ca 02             	or     edx,0x2
c000166b:	8d 43 08             	lea    eax,[ebx+0x8]
c000166e:	89 33                	mov    DWORD PTR [ebx],esi
c0001670:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001673:	eb 5f                	jmp    c00016d4 <dlmemalign+0x11b>
c0001675:	83 ec 0c             	sub    esp,0xc
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 c8 01             	or     eax,0x1
c000167d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001680:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001685:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001688:	83 e0 01             	and    eax,0x1
c000168b:	09 f0                	or     eax,esi
c000168d:	89 de                	mov    esi,ebx
c000168f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001692:	51                   	push   ecx
c0001693:	e8 d4 f4 ff ff       	call   c0000b6c <dlfree>
c0001698:	83 c4 10             	add    esp,0x10
c000169b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000169e:	a8 02                	test   al,0x2
c00016a0:	75 2f                	jne    c00016d1 <dlmemalign+0x118>
c00016a2:	83 e0 fc             	and    eax,0xfffffffc
c00016a5:	8d 55 10             	lea    edx,[ebp+0x10]
c00016a8:	39 c2                	cmp    edx,eax
c00016aa:	73 25                	jae    c00016d1 <dlmemalign+0x118>
c00016ac:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	29 e8                	sub    eax,ebp
c00016b4:	83 c2 08             	add    edx,0x8
c00016b7:	83 c8 01             	or     eax,0x1
c00016ba:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016c0:	83 e0 01             	and    eax,0x1
c00016c3:	09 c5                	or     ebp,eax
c00016c5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016c8:	52                   	push   edx
c00016c9:	e8 9e f4 ff ff       	call   c0000b6c <dlfree>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	8d 46 08             	lea    eax,[esi+0x8]
c00016d4:	83 c4 0c             	add    esp,0xc
c00016d7:	5b                   	pop    ebx
c00016d8:	5e                   	pop    esi
c00016d9:	5f                   	pop    edi
c00016da:	5d                   	pop    ebp
c00016db:	c3                   	ret    

c00016dc <dlcalloc>:
c00016dc:	53                   	push   ebx
c00016dd:	83 ec 14             	sub    esp,0x14
c00016e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016e4:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016e9:	50                   	push   eax
c00016ea:	e8 d8 f7 ff ff       	call   c0000ec7 <dlmalloc>
c00016ef:	83 c4 10             	add    esp,0x10
c00016f2:	89 c3                	mov    ebx,eax
c00016f4:	85 c0                	test   eax,eax
c00016f6:	74 77                	je     c000176f <dlcalloc+0x93>
c00016f8:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016fb:	89 d0                	mov    eax,edx
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	80 e2 02             	and    dl,0x2
c0001703:	75 5a                	jne    c000175f <dlcalloc+0x83>
c0001705:	83 e8 04             	sub    eax,0x4
c0001708:	83 f8 27             	cmp    eax,0x27
c000170b:	76 03                	jbe    c0001710 <dlcalloc+0x34>
c000170d:	51                   	push   ecx
c000170e:	eb 53                	jmp    c0001763 <dlcalloc+0x87>
c0001710:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001716:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000171d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001724:	83 f8 13             	cmp    eax,0x13
c0001727:	76 46                	jbe    c000176f <dlcalloc+0x93>
c0001729:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001730:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001737:	83 f8 1b             	cmp    eax,0x1b
c000173a:	76 33                	jbe    c000176f <dlcalloc+0x93>
c000173c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001743:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000174a:	83 f8 23             	cmp    eax,0x23
c000174d:	76 20                	jbe    c000176f <dlcalloc+0x93>
c000174f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001756:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000175d:	eb 10                	jmp    c000176f <dlcalloc+0x93>
c000175f:	83 e8 08             	sub    eax,0x8
c0001762:	52                   	push   edx
c0001763:	50                   	push   eax
c0001764:	6a 00                	push   0x0
c0001766:	53                   	push   ebx
c0001767:	e8 1f ef ff ff       	call   c000068b <memset>
c000176c:	83 c4 10             	add    esp,0x10
c000176f:	89 d8                	mov    eax,ebx
c0001771:	83 c4 08             	add    esp,0x8
c0001774:	5b                   	pop    ebx
c0001775:	c3                   	ret    

c0001776 <dlcfree>:
c0001776:	e9 f1 f3 ff ff       	jmp    c0000b6c <dlfree>

c000177b <dlindependent_calloc>:
c000177b:	83 ec 28             	sub    esp,0x28
c000177e:	b9 03 00 00 00       	mov    ecx,0x3
c0001783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000178b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000178f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001797:	e8 b9 fa ff ff       	call   c0001255 <iALLOc>
c000179c:	83 c4 2c             	add    esp,0x2c
c000179f:	c3                   	ret    

c00017a0 <dlindependent_comalloc>:
c00017a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017a8:	31 c9                	xor    ecx,ecx
c00017aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017b2:	e9 9e fa ff ff       	jmp    c0001255 <iALLOc>

c00017b7 <dlvalloc>:
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	83 3d 40 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c540,0x0
c00017c1:	75 0a                	jne    c00017cd <dlvalloc+0x16>
c00017c3:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c00017c8:	e8 b8 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017cd:	50                   	push   eax
c00017ce:	50                   	push   eax
c00017cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017d3:	ff 35 9c c8 02 c0    	push   DWORD PTR ds:0xc002c89c
c00017d9:	e8 db fd ff ff       	call   c00015b9 <dlmemalign>
c00017de:	83 c4 1c             	add    esp,0x1c
c00017e1:	c3                   	ret    

c00017e2 <dlpvalloc>:
c00017e2:	83 ec 0c             	sub    esp,0xc
c00017e5:	83 3d 40 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c540,0x0
c00017ec:	75 0a                	jne    c00017f8 <dlpvalloc+0x16>
c00017ee:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c00017f3:	e8 8d f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017f8:	a1 9c c8 02 c0       	mov    eax,ds:0xc002c89c
c00017fd:	89 c1                	mov    ecx,eax
c00017ff:	52                   	push   edx
c0001800:	f7 d9                	neg    ecx
c0001802:	52                   	push   edx
c0001803:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001807:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000180b:	21 ca                	and    edx,ecx
c000180d:	52                   	push   edx
c000180e:	50                   	push   eax
c000180f:	e8 a5 fd ff ff       	call   c00015b9 <dlmemalign>
c0001814:	83 c4 1c             	add    esp,0x1c
c0001817:	c3                   	ret    

c0001818 <dlmalloc_trim>:
c0001818:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c000181d:	e8 63 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001822:	31 c0                	xor    eax,eax
c0001824:	c3                   	ret    

c0001825 <dlmalloc_usable_size>:
c0001825:	53                   	push   ebx
c0001826:	31 c0                	xor    eax,eax
c0001828:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000182c:	85 c9                	test   ecx,ecx
c000182e:	74 24                	je     c0001854 <dlmalloc_usable_size+0x2f>
c0001830:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001833:	f6 c2 02             	test   dl,0x2
c0001836:	74 08                	je     c0001840 <dlmalloc_usable_size+0x1b>
c0001838:	83 e2 fc             	and    edx,0xfffffffc
c000183b:	8d 42 f8             	lea    eax,[edx-0x8]
c000183e:	eb 14                	jmp    c0001854 <dlmalloc_usable_size+0x2f>
c0001840:	89 d3                	mov    ebx,edx
c0001842:	31 c0                	xor    eax,eax
c0001844:	83 e3 fe             	and    ebx,0xfffffffe
c0001847:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000184c:	74 06                	je     c0001854 <dlmalloc_usable_size+0x2f>
c000184e:	83 e2 fc             	and    edx,0xfffffffc
c0001851:	8d 42 fc             	lea    eax,[edx-0x4]
c0001854:	5b                   	pop    ebx
c0001855:	c3                   	ret    

c0001856 <dlmallinfo>:
c0001856:	55                   	push   ebp
c0001857:	57                   	push   edi
c0001858:	56                   	push   esi
c0001859:	53                   	push   ebx
c000185a:	83 ec 08             	sub    esp,0x8
c000185d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001861:	83 3d 6c c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c56c,0x0
c0001868:	75 0a                	jne    c0001874 <dlmallinfo+0x1e>
c000186a:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c000186f:	e8 11 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001874:	a1 6c c5 02 c0       	mov    eax,ds:0xc002c56c
c0001879:	31 ed                	xor    ebp,ebp
c000187b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000187e:	31 c9                	xor    ecx,ecx
c0001880:	83 e0 fc             	and    eax,0xfffffffc
c0001883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001887:	31 c0                	xor    eax,eax
c0001889:	8b 14 85 44 c5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3abc]
c0001890:	85 d2                	test   edx,edx
c0001892:	74 0e                	je     c00018a2 <dlmallinfo+0x4c>
c0001894:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001897:	45                   	inc    ebp
c0001898:	83 e6 fc             	and    esi,0xfffffffc
c000189b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000189e:	01 f1                	add    ecx,esi
c00018a0:	eb ee                	jmp    c0001890 <dlmallinfo+0x3a>
c00018a2:	40                   	inc    eax
c00018a3:	83 f8 0a             	cmp    eax,0xa
c00018a6:	75 e1                	jne    c0001889 <dlmallinfo+0x33>
c00018a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018b3:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018b6:	b8 74 c5 02 c0       	mov    eax,0xc002c574
c00018bb:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018be:	39 f0                	cmp    eax,esi
c00018c0:	74 10                	je     c00018d2 <dlmallinfo+0x7c>
c00018c2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018c5:	ff 04 24             	inc    DWORD PTR [esp]
c00018c8:	83 e7 fc             	and    edi,0xfffffffc
c00018cb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018ce:	01 fa                	add    edx,edi
c00018d0:	eb ec                	jmp    c00018be <dlmallinfo+0x68>
c00018d2:	83 c0 08             	add    eax,0x8
c00018d5:	3d 6c c8 02 c0       	cmp    eax,0xc002c86c
c00018da:	75 df                	jne    c00018bb <dlmallinfo+0x65>
c00018dc:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018df:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018e2:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018e5:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c00018ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018ed:	89 03                	mov    DWORD PTR [ebx],eax
c00018ef:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018f2:	8b 35 90 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c890
c00018f8:	29 d0                	sub    eax,edx
c00018fa:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018fd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001900:	8b 35 a4 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c8a4
c0001906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000190a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000190d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001910:	8b 35 b4 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c8b4
c0001916:	89 d8                	mov    eax,ebx
c0001918:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000191b:	83 c4 08             	add    esp,0x8
c000191e:	5b                   	pop    ebx
c000191f:	5e                   	pop    esi
c0001920:	5f                   	pop    edi
c0001921:	5d                   	pop    ebp
c0001922:	c2 04 00             	ret    0x4

c0001925 <dlmalloc_stats>:
c0001925:	83 ec 30             	sub    esp,0x30
c0001928:	8d 44 24 08          	lea    eax,[esp+0x8]
c000192c:	50                   	push   eax
c000192d:	e8 24 ff ff ff       	call   c0001856 <dlmallinfo>
c0001932:	83 c4 30             	add    esp,0x30
c0001935:	c3                   	ret    

c0001936 <dlmallopt>:
c0001936:	56                   	push   esi
c0001937:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c000193c:	53                   	push   ebx
c000193d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001945:	e8 3b f1 ff ff       	call   c0000a85 <malloc_consolidate>
c000194a:	8d 46 04             	lea    eax,[esi+0x4]
c000194d:	83 f8 05             	cmp    eax,0x5
c0001950:	77 67                	ja     c00019b9 <dlmallopt+0x83>
c0001952:	ff 24 85 c4 7c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd833c]
c0001959:	83 fb 50             	cmp    ebx,0x50
c000195c:	77 5b                	ja     c00019b9 <dlmallopt+0x83>
c000195e:	ba 08 00 00 00       	mov    edx,0x8
c0001963:	85 db                	test   ebx,ebx
c0001965:	74 12                	je     c0001979 <dlmallopt+0x43>
c0001967:	83 c3 0b             	add    ebx,0xb
c000196a:	ba 10 00 00 00       	mov    edx,0x10
c000196f:	83 fb 0f             	cmp    ebx,0xf
c0001972:	76 05                	jbe    c0001979 <dlmallopt+0x43>
c0001974:	89 da                	mov    edx,ebx
c0001976:	83 e2 f8             	and    edx,0xfffffff8
c0001979:	a1 40 c5 02 c0       	mov    eax,ds:0xc002c540
c000197e:	83 e0 03             	and    eax,0x3
c0001981:	09 d0                	or     eax,edx
c0001983:	a3 40 c5 02 c0       	mov    ds:0xc002c540,eax
c0001988:	eb 31                	jmp    c00019bb <dlmallopt+0x85>
c000198a:	89 1d 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,ebx
c0001990:	eb 06                	jmp    c0001998 <dlmallopt+0x62>
c0001992:	89 1d 88 c8 02 c0    	mov    DWORD PTR ds:0xc002c888,ebx
c0001998:	be 01 00 00 00       	mov    esi,0x1
c000199d:	eb 1c                	jmp    c00019bb <dlmallopt+0x85>
c000199f:	89 1d 8c c8 02 c0    	mov    DWORD PTR ds:0xc002c88c,ebx
c00019a5:	eb f1                	jmp    c0001998 <dlmallopt+0x62>
c00019a7:	31 f6                	xor    esi,esi
c00019a9:	85 db                	test   ebx,ebx
c00019ab:	75 0e                	jne    c00019bb <dlmallopt+0x85>
c00019ad:	c7 05 94 c8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c894,0x0
c00019b7:	eb df                	jmp    c0001998 <dlmallopt+0x62>
c00019b9:	31 f6                	xor    esi,esi
c00019bb:	89 f0                	mov    eax,esi
c00019bd:	5b                   	pop    ebx
c00019be:	5e                   	pop    esi
c00019bf:	c3                   	ret    

c00019c0 <disk_status>:
c00019c0:	31 c0                	xor    eax,eax
c00019c2:	c3                   	ret    

c00019c3 <disk_initialize>:
c00019c3:	31 c0                	xor    eax,eax
c00019c5:	c3                   	ret    

c00019c6 <disk_read>:
c00019c6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019cb:	0f b6 04 85 00 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2000]
c00019d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d7:	e9 30 e3 01 00       	jmp    c001fd0c <fatWrapperReadDisk>

c00019dc <disk_write>:
c00019dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019e1:	0f b6 04 85 00 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2000]
c00019e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019ed:	e9 61 e3 01 00       	jmp    c001fd53 <fatWrapperWriteDisk>

c00019f2 <disk_ioctl>:
c00019f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019fb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a00:	0f b6 04 85 00 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2000]
c0001a08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0c:	e9 89 e3 01 00       	jmp    c001fd9a <fatWrapperIoctl>

c0001a11 <ld_word>:
c0001a11:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a18:	c1 e2 08             	shl    edx,0x8
c0001a1b:	09 d0                	or     eax,edx
c0001a1d:	c3                   	ret    

c0001a1e <ld_dword>:
c0001a1e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a22:	89 d1                	mov    ecx,edx
c0001a24:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a28:	c1 e1 08             	shl    ecx,0x8
c0001a2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a2e:	09 ca                	or     edx,ecx
c0001a30:	c1 e2 08             	shl    edx,0x8
c0001a33:	09 d0                	or     eax,edx
c0001a35:	c3                   	ret    

c0001a36 <ld_qword>:
c0001a36:	57                   	push   edi
c0001a37:	56                   	push   esi
c0001a38:	53                   	push   ebx
c0001a39:	31 db                	xor    ebx,ebx
c0001a3b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a3e:	89 df                	mov    edi,ebx
c0001a40:	89 ce                	mov    esi,ecx
c0001a42:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a46:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4a:	c1 e6 08             	shl    esi,0x8
c0001a4d:	09 f2                	or     edx,esi
c0001a4f:	89 d6                	mov    esi,edx
c0001a51:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a55:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a59:	c1 e6 08             	shl    esi,0x8
c0001a5c:	09 f2                	or     edx,esi
c0001a5e:	89 d6                	mov    esi,edx
c0001a60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a64:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6b:	c1 e6 08             	shl    esi,0x8
c0001a6e:	89 fb                	mov    ebx,edi
c0001a70:	09 f2                	or     edx,esi
c0001a72:	89 d1                	mov    ecx,edx
c0001a74:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a78:	c1 e1 08             	shl    ecx,0x8
c0001a7b:	89 da                	mov    edx,ebx
c0001a7d:	09 c8                	or     eax,ecx
c0001a7f:	5b                   	pop    ebx
c0001a80:	5e                   	pop    esi
c0001a81:	5f                   	pop    edi
c0001a82:	c3                   	ret    

c0001a83 <st_word>:
c0001a83:	66 89 10             	mov    WORD PTR [eax],dx
c0001a86:	c3                   	ret    

c0001a87 <st_dword>:
c0001a87:	89 10                	mov    DWORD PTR [eax],edx
c0001a89:	c3                   	ret    

c0001a8a <st_qword>:
c0001a8a:	89 10                	mov    DWORD PTR [eax],edx
c0001a8c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a8f:	c3                   	ret    

c0001a90 <mem_cpy>:
c0001a90:	85 c9                	test   ecx,ecx
c0001a92:	74 10                	je     c0001aa4 <mem_cpy+0x14>
c0001a94:	57                   	push   edi
c0001a95:	01 c1                	add    ecx,eax
c0001a97:	56                   	push   esi
c0001a98:	89 c7                	mov    edi,eax
c0001a9a:	89 d6                	mov    esi,edx
c0001a9c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a9d:	39 f9                	cmp    ecx,edi
c0001a9f:	75 fb                	jne    c0001a9c <mem_cpy+0xc>
c0001aa1:	5e                   	pop    esi
c0001aa2:	5f                   	pop    edi
c0001aa3:	c3                   	ret    
c0001aa4:	c3                   	ret    

c0001aa5 <mem_set>:
c0001aa5:	01 c1                	add    ecx,eax
c0001aa7:	40                   	inc    eax
c0001aa8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001aab:	39 c8                	cmp    eax,ecx
c0001aad:	75 f8                	jne    c0001aa7 <mem_set+0x2>
c0001aaf:	c3                   	ret    

c0001ab0 <mem_cmp>:
c0001ab0:	57                   	push   edi
c0001ab1:	56                   	push   esi
c0001ab2:	89 c6                	mov    esi,eax
c0001ab4:	53                   	push   ebx
c0001ab5:	46                   	inc    esi
c0001ab6:	42                   	inc    edx
c0001ab7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001abb:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001abf:	29 fb                	sub    ebx,edi
c0001ac1:	89 cf                	mov    edi,ecx
c0001ac3:	29 f7                	sub    edi,esi
c0001ac5:	01 c7                	add    edi,eax
c0001ac7:	74 04                	je     c0001acd <mem_cmp+0x1d>
c0001ac9:	85 db                	test   ebx,ebx
c0001acb:	74 e8                	je     c0001ab5 <mem_cmp+0x5>
c0001acd:	89 d8                	mov    eax,ebx
c0001acf:	5b                   	pop    ebx
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    

c0001ad3 <chk_chr>:
c0001ad3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ad6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ad9:	74 07                	je     c0001ae2 <chk_chr+0xf>
c0001adb:	39 d1                	cmp    ecx,edx
c0001add:	74 03                	je     c0001ae2 <chk_chr+0xf>
c0001adf:	40                   	inc    eax
c0001ae0:	eb f1                	jmp    c0001ad3 <chk_chr>
c0001ae2:	89 c8                	mov    eax,ecx
c0001ae4:	c3                   	ret    

c0001ae5 <dbc_1st>:
c0001ae5:	31 c0                	xor    eax,eax
c0001ae7:	c3                   	ret    

c0001ae8 <dbc_2nd>:
c0001ae8:	31 c0                	xor    eax,eax
c0001aea:	c3                   	ret    

c0001aeb <tchar2uni>:
c0001aeb:	57                   	push   edi
c0001aec:	89 c7                	mov    edi,eax
c0001aee:	56                   	push   esi
c0001aef:	53                   	push   ebx
c0001af0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001af2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001af4:	8d 73 01             	lea    esi,[ebx+0x1]
c0001af7:	84 c9                	test   cl,cl
c0001af9:	78 0a                	js     c0001b05 <tchar2uni+0x1a>
c0001afb:	0f b6 d1             	movzx  edx,cl
c0001afe:	89 f3                	mov    ebx,esi
c0001b00:	e9 9f 00 00 00       	jmp    c0001ba4 <tchar2uni+0xb9>
c0001b05:	88 ca                	mov    dl,cl
c0001b07:	83 e2 e0             	and    edx,0xffffffe0
c0001b0a:	80 fa c0             	cmp    dl,0xc0
c0001b0d:	75 0c                	jne    c0001b1b <tchar2uni+0x30>
c0001b0f:	89 ca                	mov    edx,ecx
c0001b11:	b9 01 00 00 00       	mov    ecx,0x1
c0001b16:	83 e2 1f             	and    edx,0x1f
c0001b19:	eb 2e                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b1b:	88 ca                	mov    dl,cl
c0001b1d:	83 e2 f0             	and    edx,0xfffffff0
c0001b20:	80 fa e0             	cmp    dl,0xe0
c0001b23:	75 0c                	jne    c0001b31 <tchar2uni+0x46>
c0001b25:	89 ca                	mov    edx,ecx
c0001b27:	b9 02 00 00 00       	mov    ecx,0x2
c0001b2c:	83 e2 0f             	and    edx,0xf
c0001b2f:	eb 18                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b31:	88 ca                	mov    dl,cl
c0001b33:	83 e2 f8             	and    edx,0xfffffff8
c0001b36:	88 d0                	mov    al,dl
c0001b38:	83 ca ff             	or     edx,0xffffffff
c0001b3b:	3c f0                	cmp    al,0xf0
c0001b3d:	75 6c                	jne    c0001bab <tchar2uni+0xc0>
c0001b3f:	89 ca                	mov    edx,ecx
c0001b41:	b9 03 00 00 00       	mov    ecx,0x3
c0001b46:	83 e2 07             	and    edx,0x7
c0001b49:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b4d:	46                   	inc    esi
c0001b4e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b51:	88 c8                	mov    al,cl
c0001b53:	83 e0 c0             	and    eax,0xffffffc0
c0001b56:	3c 80                	cmp    al,0x80
c0001b58:	75 4e                	jne    c0001ba8 <tchar2uni+0xbd>
c0001b5a:	c1 e2 06             	shl    edx,0x6
c0001b5d:	83 e1 3f             	and    ecx,0x3f
c0001b60:	09 ca                	or     edx,ecx
c0001b62:	39 de                	cmp    esi,ebx
c0001b64:	75 e7                	jne    c0001b4d <tchar2uni+0x62>
c0001b66:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b69:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b6f:	77 37                	ja     c0001ba8 <tchar2uni+0xbd>
c0001b71:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b77:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b7d:	76 29                	jbe    c0001ba8 <tchar2uni+0xbd>
c0001b7f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b85:	76 1d                	jbe    c0001ba4 <tchar2uni+0xb9>
c0001b87:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b8d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b93:	c1 e1 06             	shl    ecx,0x6
c0001b96:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b9c:	09 ca                	or     edx,ecx
c0001b9e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ba4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ba6:	eb 03                	jmp    c0001bab <tchar2uni+0xc0>
c0001ba8:	83 ca ff             	or     edx,0xffffffff
c0001bab:	5b                   	pop    ebx
c0001bac:	89 d0                	mov    eax,edx
c0001bae:	5e                   	pop    esi
c0001baf:	5f                   	pop    edi
c0001bb0:	c3                   	ret    

c0001bb1 <put_utf>:
c0001bb1:	53                   	push   ebx
c0001bb2:	83 f8 7f             	cmp    eax,0x7f
c0001bb5:	89 c3                	mov    ebx,eax
c0001bb7:	b0 00                	mov    al,0x0
c0001bb9:	77 11                	ja     c0001bcc <put_utf+0x1b>
c0001bbb:	85 c9                	test   ecx,ecx
c0001bbd:	0f 84 e5 00 00 00    	je     c0001ca8 <put_utf+0xf7>
c0001bc3:	88 1a                	mov    BYTE PTR [edx],bl
c0001bc5:	b0 01                	mov    al,0x1
c0001bc7:	e9 dc 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bcc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bd2:	77 23                	ja     c0001bf7 <put_utf+0x46>
c0001bd4:	83 f9 01             	cmp    ecx,0x1
c0001bd7:	0f 86 cb 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001bdd:	89 d8                	mov    eax,ebx
c0001bdf:	83 e3 3f             	and    ebx,0x3f
c0001be2:	c1 e8 06             	shr    eax,0x6
c0001be5:	83 cb 80             	or     ebx,0xffffff80
c0001be8:	83 c8 c0             	or     eax,0xffffffc0
c0001beb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bee:	88 02                	mov    BYTE PTR [edx],al
c0001bf0:	b0 02                	mov    al,0x2
c0001bf2:	e9 b1 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bf7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bfd:	77 40                	ja     c0001c3f <put_utf+0x8e>
c0001bff:	83 f9 02             	cmp    ecx,0x2
c0001c02:	0f 86 a0 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c08:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c0e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c14:	0f 86 8e 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c1a:	89 d8                	mov    eax,ebx
c0001c1c:	c1 e8 0c             	shr    eax,0xc
c0001c1f:	83 c8 e0             	or     eax,0xffffffe0
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	89 d8                	mov    eax,ebx
c0001c26:	83 e3 3f             	and    ebx,0x3f
c0001c29:	c1 e8 06             	shr    eax,0x6
c0001c2c:	83 cb 80             	or     ebx,0xffffff80
c0001c2f:	83 e0 3f             	and    eax,0x3f
c0001c32:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c35:	83 c8 80             	or     eax,0xffffff80
c0001c38:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c3b:	b0 03                	mov    al,0x3
c0001c3d:	eb 69                	jmp    c0001ca8 <put_utf+0xf7>
c0001c3f:	83 f9 03             	cmp    ecx,0x3
c0001c42:	76 64                	jbe    c0001ca8 <put_utf+0xf7>
c0001c44:	89 d9                	mov    ecx,ebx
c0001c46:	0f b7 c3             	movzx  eax,bx
c0001c49:	66 31 c9             	xor    cx,cx
c0001c4c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c52:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c58:	c1 e9 06             	shr    ecx,0x6
c0001c5b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c61:	77 43                	ja     c0001ca6 <put_utf+0xf5>
c0001c63:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c69:	77 3b                	ja     c0001ca6 <put_utf+0xf5>
c0001c6b:	09 cb                	or     ebx,ecx
c0001c6d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c73:	89 d8                	mov    eax,ebx
c0001c75:	c1 e8 12             	shr    eax,0x12
c0001c78:	83 c8 f0             	or     eax,0xfffffff0
c0001c7b:	88 02                	mov    BYTE PTR [edx],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	c1 e8 0c             	shr    eax,0xc
c0001c82:	83 e0 3f             	and    eax,0x3f
c0001c85:	83 c8 80             	or     eax,0xffffff80
c0001c88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c8b:	89 d8                	mov    eax,ebx
c0001c8d:	83 e3 3f             	and    ebx,0x3f
c0001c90:	c1 e8 06             	shr    eax,0x6
c0001c93:	83 cb 80             	or     ebx,0xffffff80
c0001c96:	83 e0 3f             	and    eax,0x3f
c0001c99:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c9c:	83 c8 80             	or     eax,0xffffff80
c0001c9f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ca2:	b0 04                	mov    al,0x4
c0001ca4:	eb 02                	jmp    c0001ca8 <put_utf+0xf7>
c0001ca6:	31 c0                	xor    eax,eax
c0001ca8:	5b                   	pop    ebx
c0001ca9:	c3                   	ret    

c0001caa <clst2sect>:
c0001caa:	89 c1                	mov    ecx,eax
c0001cac:	83 ea 02             	sub    edx,0x2
c0001caf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cb2:	83 e8 02             	sub    eax,0x2
c0001cb5:	39 d0                	cmp    eax,edx
c0001cb7:	76 0d                	jbe    c0001cc6 <clst2sect+0x1c>
c0001cb9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cbd:	f7 e2                	mul    edx
c0001cbf:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cc2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cc5:	c3                   	ret    
c0001cc6:	31 c0                	xor    eax,eax
c0001cc8:	31 d2                	xor    edx,edx
c0001cca:	c3                   	ret    

c0001ccb <clmt_clust>:
c0001ccb:	57                   	push   edi
c0001ccc:	89 cf                	mov    edi,ecx
c0001cce:	56                   	push   esi
c0001ccf:	89 d6                	mov    esi,edx
c0001cd1:	53                   	push   ebx
c0001cd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cd6:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cd9:	89 f2                	mov    edx,esi
c0001cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0001cdd:	c1 ef 09             	shr    edi,0x9
c0001ce0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001ce4:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001ce7:	89 f9                	mov    ecx,edi
c0001ce9:	31 ff                	xor    edi,edi
c0001ceb:	57                   	push   edi
c0001cec:	56                   	push   esi
c0001ced:	51                   	push   ecx
c0001cee:	52                   	push   edx
c0001cef:	e8 b8 36 02 00       	call   c00253ac <__udivdi3>
c0001cf4:	83 c4 10             	add    esp,0x10
c0001cf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001cf9:	85 d2                	test   edx,edx
c0001cfb:	74 10                	je     c0001d0d <clmt_clust+0x42>
c0001cfd:	39 d0                	cmp    eax,edx
c0001cff:	72 07                	jb     c0001d08 <clmt_clust+0x3d>
c0001d01:	29 d0                	sub    eax,edx
c0001d03:	83 c3 08             	add    ebx,0x8
c0001d06:	eb ef                	jmp    c0001cf7 <clmt_clust+0x2c>
c0001d08:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d0b:	89 c2                	mov    edx,eax
c0001d0d:	5b                   	pop    ebx
c0001d0e:	89 d0                	mov    eax,edx
c0001d10:	5e                   	pop    esi
c0001d11:	5f                   	pop    edi
c0001d12:	c3                   	ret    

c0001d13 <pick_lfn>:
c0001d13:	55                   	push   ebp
c0001d14:	57                   	push   edi
c0001d15:	56                   	push   esi
c0001d16:	89 d6                	mov    esi,edx
c0001d18:	53                   	push   ebx
c0001d19:	89 c3                	mov    ebx,eax
c0001d1b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1e:	e8 ee fc ff ff       	call   c0001a11 <ld_word>
c0001d23:	66 85 c0             	test   ax,ax
c0001d26:	74 04                	je     c0001d2c <pick_lfn+0x19>
c0001d28:	31 c0                	xor    eax,eax
c0001d2a:	eb 5c                	jmp    c0001d88 <pick_lfn+0x75>
c0001d2c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d2f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d34:	83 e1 bf             	and    ecx,0xffffffbf
c0001d37:	31 ff                	xor    edi,edi
c0001d39:	49                   	dec    ecx
c0001d3a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d3d:	0f b6 87 e0 7d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd8220]
c0001d44:	01 f0                	add    eax,esi
c0001d46:	e8 c6 fc ff ff       	call   c0001a11 <ld_word>
c0001d4b:	66 85 ed             	test   bp,bp
c0001d4e:	74 11                	je     c0001d61 <pick_lfn+0x4e>
c0001d50:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d56:	77 d0                	ja     c0001d28 <pick_lfn+0x15>
c0001d58:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d5c:	89 c5                	mov    ebp,eax
c0001d5e:	41                   	inc    ecx
c0001d5f:	eb 04                	jmp    c0001d65 <pick_lfn+0x52>
c0001d61:	66 40                	inc    ax
c0001d63:	75 c3                	jne    c0001d28 <pick_lfn+0x15>
c0001d65:	47                   	inc    edi
c0001d66:	83 ff 0d             	cmp    edi,0xd
c0001d69:	75 d2                	jne    c0001d3d <pick_lfn+0x2a>
c0001d6b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d6e:	74 13                	je     c0001d83 <pick_lfn+0x70>
c0001d70:	66 85 ed             	test   bp,bp
c0001d73:	74 0e                	je     c0001d83 <pick_lfn+0x70>
c0001d75:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d7b:	77 ab                	ja     c0001d28 <pick_lfn+0x15>
c0001d7d:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d83:	b8 01 00 00 00       	mov    eax,0x1
c0001d88:	5b                   	pop    ebx
c0001d89:	5e                   	pop    esi
c0001d8a:	5f                   	pop    edi
c0001d8b:	5d                   	pop    ebp
c0001d8c:	c3                   	ret    

c0001d8d <put_lfn>:
c0001d8d:	55                   	push   ebp
c0001d8e:	31 ed                	xor    ebp,ebp
c0001d90:	57                   	push   edi
c0001d91:	89 d7                	mov    edi,edx
c0001d93:	56                   	push   esi
c0001d94:	31 f6                	xor    esi,esi
c0001d96:	53                   	push   ebx
c0001d97:	83 ec 08             	sub    esp,0x8
c0001d9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9d:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001da5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dab:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dae:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001db1:	31 d2                	xor    edx,edx
c0001db3:	e8 cb fc ff ff       	call   c0001a83 <st_word>
c0001db8:	0f b6 d9             	movzx  ebx,cl
c0001dbb:	4b                   	dec    ebx
c0001dbc:	6b db 0d             	imul   ebx,ebx,0xd
c0001dbf:	66 83 fe ff          	cmp    si,0xffff
c0001dc3:	74 08                	je     c0001dcd <put_lfn+0x40>
c0001dc5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dc8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dcc:	43                   	inc    ebx
c0001dcd:	0f b6 85 e0 7d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd8220]
c0001dd4:	0f b7 d6             	movzx  edx,si
c0001dd7:	01 f8                	add    eax,edi
c0001dd9:	e8 a5 fc ff ff       	call   c0001a83 <st_word>
c0001dde:	66 85 f6             	test   si,si
c0001de1:	75 03                	jne    c0001de6 <put_lfn+0x59>
c0001de3:	83 ce ff             	or     esi,0xffffffff
c0001de6:	45                   	inc    ebp
c0001de7:	83 fd 0d             	cmp    ebp,0xd
c0001dea:	75 d3                	jne    c0001dbf <put_lfn+0x32>
c0001dec:	66 46                	inc    si
c0001dee:	74 0a                	je     c0001dfa <put_lfn+0x6d>
c0001df0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001df8:	75 09                	jne    c0001e03 <put_lfn+0x76>
c0001dfa:	88 c8                	mov    al,cl
c0001dfc:	83 c8 40             	or     eax,0x40
c0001dff:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e03:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e07:	88 07                	mov    BYTE PTR [edi],al
c0001e09:	83 c4 08             	add    esp,0x8
c0001e0c:	5b                   	pop    ebx
c0001e0d:	5e                   	pop    esi
c0001e0e:	5f                   	pop    edi
c0001e0f:	5d                   	pop    ebp
c0001e10:	c3                   	ret    

c0001e11 <gen_numname>:
c0001e11:	57                   	push   edi
c0001e12:	89 cf                	mov    edi,ecx
c0001e14:	56                   	push   esi
c0001e15:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e1a:	53                   	push   ebx
c0001e1b:	89 c6                	mov    esi,eax
c0001e1d:	83 ec 10             	sub    esp,0x10
c0001e20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e24:	e8 67 fc ff ff       	call   c0001a90 <mem_cpy>
c0001e29:	83 fb 05             	cmp    ebx,0x5
c0001e2c:	76 2d                	jbe    c0001e5b <gen_numname+0x4a>
c0001e2e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e31:	66 85 c0             	test   ax,ax
c0001e34:	74 25                	je     c0001e5b <gen_numname+0x4a>
c0001e36:	83 c7 02             	add    edi,0x2
c0001e39:	ba 10 00 00 00       	mov    edx,0x10
c0001e3e:	01 db                	add    ebx,ebx
c0001e40:	89 c1                	mov    ecx,eax
c0001e42:	66 d1 e8             	shr    ax,1
c0001e45:	83 e1 01             	and    ecx,0x1
c0001e48:	01 cb                	add    ebx,ecx
c0001e4a:	0f ba e3 10          	bt     ebx,0x10
c0001e4e:	73 06                	jae    c0001e56 <gen_numname+0x45>
c0001e50:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e56:	4a                   	dec    edx
c0001e57:	75 e5                	jne    c0001e3e <gen_numname+0x2d>
c0001e59:	eb d3                	jmp    c0001e2e <gen_numname+0x1d>
c0001e5b:	b8 07 00 00 00       	mov    eax,0x7
c0001e60:	88 d9                	mov    cl,bl
c0001e62:	83 e1 0f             	and    ecx,0xf
c0001e65:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e68:	80 fa 39             	cmp    dl,0x39
c0001e6b:	76 03                	jbe    c0001e70 <gen_numname+0x5f>
c0001e6d:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e70:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e73:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e77:	89 da                	mov    edx,ebx
c0001e79:	c1 ea 04             	shr    edx,0x4
c0001e7c:	83 fb 0f             	cmp    ebx,0xf
c0001e7f:	76 06                	jbe    c0001e87 <gen_numname+0x76>
c0001e81:	89 c8                	mov    eax,ecx
c0001e83:	89 d3                	mov    ebx,edx
c0001e85:	eb d9                	jmp    c0001e60 <gen_numname+0x4f>
c0001e87:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e8c:	31 d2                	xor    edx,edx
c0001e8e:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e91:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e94:	39 ca                	cmp    edx,ecx
c0001e96:	73 18                	jae    c0001eb0 <gen_numname+0x9f>
c0001e98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e9b:	3c 20                	cmp    al,0x20
c0001e9d:	74 11                	je     c0001eb0 <gen_numname+0x9f>
c0001e9f:	e8 41 fc ff ff       	call   c0001ae5 <dbc_1st>
c0001ea4:	85 c0                	test   eax,eax
c0001ea6:	74 05                	je     c0001ead <gen_numname+0x9c>
c0001ea8:	39 d3                	cmp    ebx,edx
c0001eaa:	74 04                	je     c0001eb0 <gen_numname+0x9f>
c0001eac:	42                   	inc    edx
c0001ead:	42                   	inc    edx
c0001eae:	eb e1                	jmp    c0001e91 <gen_numname+0x80>
c0001eb0:	b0 20                	mov    al,0x20
c0001eb2:	83 f9 07             	cmp    ecx,0x7
c0001eb5:	77 05                	ja     c0001ebc <gen_numname+0xab>
c0001eb7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ebb:	41                   	inc    ecx
c0001ebc:	42                   	inc    edx
c0001ebd:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ec1:	83 fa 07             	cmp    edx,0x7
c0001ec4:	76 ea                	jbe    c0001eb0 <gen_numname+0x9f>
c0001ec6:	83 c4 10             	add    esp,0x10
c0001ec9:	5b                   	pop    ebx
c0001eca:	5e                   	pop    esi
c0001ecb:	5f                   	pop    edi
c0001ecc:	c3                   	ret    

c0001ecd <sum_sfn>:
c0001ecd:	31 c9                	xor    ecx,ecx
c0001ecf:	31 d2                	xor    edx,edx
c0001ed1:	d0 ca                	ror    dl,1
c0001ed3:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ed6:	41                   	inc    ecx
c0001ed7:	83 f9 0b             	cmp    ecx,0xb
c0001eda:	75 f5                	jne    c0001ed1 <sum_sfn+0x4>
c0001edc:	88 d0                	mov    al,dl
c0001ede:	c3                   	ret    

c0001edf <xdir_sum>:
c0001edf:	56                   	push   esi
c0001ee0:	31 c9                	xor    ecx,ecx
c0001ee2:	53                   	push   ebx
c0001ee3:	31 d2                	xor    edx,edx
c0001ee5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001ee9:	43                   	inc    ebx
c0001eea:	c1 e3 05             	shl    ebx,0x5
c0001eed:	83 fa 02             	cmp    edx,0x2
c0001ef0:	74 0b                	je     c0001efd <xdir_sum+0x1e>
c0001ef2:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ef6:	66 d1 c9             	ror    cx,1
c0001ef9:	01 f1                	add    ecx,esi
c0001efb:	eb 05                	jmp    c0001f02 <xdir_sum+0x23>
c0001efd:	ba 03 00 00 00       	mov    edx,0x3
c0001f02:	42                   	inc    edx
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	77 e6                	ja     c0001eed <xdir_sum+0xe>
c0001f07:	89 c8                	mov    eax,ecx
c0001f09:	5b                   	pop    ebx
c0001f0a:	5e                   	pop    esi
c0001f0b:	c3                   	ret    

c0001f0c <xsum32>:
c0001f0c:	d1 ca                	ror    edx,1
c0001f0e:	0f b6 c0             	movzx  eax,al
c0001f11:	01 d0                	add    eax,edx
c0001f13:	c3                   	ret    

c0001f14 <get_xfileinfo>:
c0001f14:	55                   	push   ebp
c0001f15:	31 c9                	xor    ecx,ecx
c0001f17:	57                   	push   edi
c0001f18:	bd 40 00 00 00       	mov    ebp,0x40
c0001f1d:	56                   	push   esi
c0001f1e:	31 ff                	xor    edi,edi
c0001f20:	53                   	push   ebx
c0001f21:	89 c6                	mov    esi,eax
c0001f23:	83 ec 0c             	sub    esp,0xc
c0001f26:	89 d3                	mov    ebx,edx
c0001f28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f2f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f33:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f36:	76 6d                	jbe    c0001fa5 <get_xfileinfo+0x91>
c0001f38:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f3e:	76 0b                	jbe    c0001f4b <get_xfileinfo+0x37>
c0001f40:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f44:	bf 01 00 00 00       	mov    edi,0x1
c0001f49:	eb 63                	jmp    c0001fae <get_xfileinfo+0x9a>
c0001f4b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f51:	75 03                	jne    c0001f56 <get_xfileinfo+0x42>
c0001f53:	83 c5 02             	add    ebp,0x2
c0001f56:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f59:	83 c5 02             	add    ebp,0x2
c0001f5c:	e8 b0 fa ff ff       	call   c0001a11 <ld_word>
c0001f61:	ff 04 24             	inc    DWORD PTR [esp]
c0001f64:	66 85 c9             	test   cx,cx
c0001f67:	75 0d                	jne    c0001f76 <get_xfileinfo+0x62>
c0001f69:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f6f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f74:	76 2b                	jbe    c0001fa1 <get_xfileinfo+0x8d>
c0001f76:	c1 e1 10             	shl    ecx,0x10
c0001f79:	ba ff 00 00 00       	mov    edx,0xff
c0001f7e:	0f b7 c0             	movzx  eax,ax
c0001f81:	29 fa                	sub    edx,edi
c0001f83:	09 c8                	or     eax,ecx
c0001f85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f89:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f91:	e8 1b fc ff ff       	call   c0001bb1 <put_utf>
c0001f96:	84 c0                	test   al,al
c0001f98:	74 a6                	je     c0001f40 <get_xfileinfo+0x2c>
c0001f9a:	0f b6 c0             	movzx  eax,al
c0001f9d:	01 c7                	add    edi,eax
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	89 c1                	mov    ecx,eax
c0001fa3:	eb 8a                	jmp    c0001f2f <get_xfileinfo+0x1b>
c0001fa5:	85 ff                	test   edi,edi
c0001fa7:	74 97                	je     c0001f40 <get_xfileinfo+0x2c>
c0001fa9:	66 85 c9             	test   cx,cx
c0001fac:	75 92                	jne    c0001f40 <get_xfileinfo+0x2c>
c0001fae:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fb3:	31 c0                	xor    eax,eax
c0001fb5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fb9:	31 d2                	xor    edx,edx
c0001fbb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fbe:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fc1:	80 e1 10             	and    cl,0x10
c0001fc4:	75 08                	jne    c0001fce <get_xfileinfo+0xba>
c0001fc6:	8d 46 38             	lea    eax,[esi+0x38]
c0001fc9:	e8 68 fa ff ff       	call   c0001a36 <ld_qword>
c0001fce:	89 03                	mov    DWORD PTR [ebx],eax
c0001fd0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fd3:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fd6:	e8 36 fa ff ff       	call   c0001a11 <ld_word>
c0001fdb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fdf:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fe2:	e8 2a fa ff ff       	call   c0001a11 <ld_word>
c0001fe7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001feb:	83 c4 0c             	add    esp,0xc
c0001fee:	5b                   	pop    ebx
c0001fef:	5e                   	pop    esi
c0001ff0:	5f                   	pop    edi
c0001ff1:	5d                   	pop    ebp
c0001ff2:	c3                   	ret    

c0001ff3 <get_ldnumber>:
c0001ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0001ff5:	85 d2                	test   edx,edx
c0001ff7:	74 14                	je     c000200d <get_ldnumber+0x1a>
c0001ff9:	56                   	push   esi
c0001ffa:	53                   	push   ebx
c0001ffb:	89 d3                	mov    ebx,edx
c0001ffd:	43                   	inc    ebx
c0001ffe:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002001:	80 f9 1f             	cmp    cl,0x1f
c0002004:	76 0d                	jbe    c0002013 <get_ldnumber+0x20>
c0002006:	80 f9 3a             	cmp    cl,0x3a
c0002009:	75 f2                	jne    c0001ffd <get_ldnumber+0xa>
c000200b:	eb 0a                	jmp    c0002017 <get_ldnumber+0x24>
c000200d:	83 c9 ff             	or     ecx,0xffffffff
c0002010:	89 c8                	mov    eax,ecx
c0002012:	c3                   	ret    
c0002013:	31 c9                	xor    ecx,ecx
c0002015:	eb 24                	jmp    c000203b <get_ldnumber+0x48>
c0002017:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000201a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000201d:	80 f9 09             	cmp    cl,0x9
c0002020:	77 16                	ja     c0002038 <get_ldnumber+0x45>
c0002022:	83 c2 02             	add    edx,0x2
c0002025:	83 c9 ff             	or     ecx,0xffffffff
c0002028:	39 d3                	cmp    ebx,edx
c000202a:	75 0f                	jne    c000203b <get_ldnumber+0x48>
c000202c:	89 f2                	mov    edx,esi
c000202e:	89 18                	mov    DWORD PTR [eax],ebx
c0002030:	0f be ca             	movsx  ecx,dl
c0002033:	83 e9 30             	sub    ecx,0x30
c0002036:	eb 03                	jmp    c000203b <get_ldnumber+0x48>
c0002038:	83 c9 ff             	or     ecx,0xffffffff
c000203b:	89 c8                	mov    eax,ecx
c000203d:	5b                   	pop    ebx
c000203e:	5e                   	pop    esi
c000203f:	c3                   	ret    

c0002040 <crc32>:
c0002040:	56                   	push   esi
c0002041:	89 d6                	mov    esi,edx
c0002043:	53                   	push   ebx
c0002044:	b2 01                	mov    dl,0x1
c0002046:	bb 08 00 00 00       	mov    ebx,0x8
c000204b:	89 f1                	mov    ecx,esi
c000204d:	84 d1                	test   cl,dl
c000204f:	0f 95 c1             	setne  cl
c0002052:	0f b6 c9             	movzx  ecx,cl
c0002055:	31 c1                	xor    ecx,eax
c0002057:	89 c8                	mov    eax,ecx
c0002059:	d1 e8                	shr    eax,1
c000205b:	80 e1 01             	and    cl,0x1
c000205e:	74 05                	je     c0002065 <crc32+0x25>
c0002060:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002065:	d1 e2                	shl    edx,1
c0002067:	4b                   	dec    ebx
c0002068:	75 e1                	jne    c000204b <crc32+0xb>
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    

c000206d <test_gpt_header>:
c000206d:	55                   	push   ebp
c000206e:	b9 10 00 00 00       	mov    ecx,0x10
c0002073:	57                   	push   edi
c0002074:	ba e0 7c 02 c0       	mov    edx,0xc0027ce0
c0002079:	56                   	push   esi
c000207a:	31 ff                	xor    edi,edi
c000207c:	53                   	push   ebx
c000207d:	89 c3                	mov    ebx,eax
c000207f:	e8 2c fa ff ff       	call   c0001ab0 <mem_cmp>
c0002084:	85 c0                	test   eax,eax
c0002086:	75 55                	jne    c00020dd <test_gpt_header+0x70>
c0002088:	89 c7                	mov    edi,eax
c000208a:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000208f:	83 ce ff             	or     esi,0xffffffff
c0002092:	31 d2                	xor    edx,edx
c0002094:	83 fd 03             	cmp    ebp,0x3
c0002097:	76 05                	jbe    c000209e <test_gpt_header+0x31>
c0002099:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000209e:	89 f0                	mov    eax,esi
c00020a0:	45                   	inc    ebp
c00020a1:	e8 9a ff ff ff       	call   c0002040 <crc32>
c00020a6:	83 fd 4c             	cmp    ebp,0x4c
c00020a9:	89 c6                	mov    esi,eax
c00020ab:	75 e5                	jne    c0002092 <test_gpt_header+0x25>
c00020ad:	8d 43 10             	lea    eax,[ebx+0x10]
c00020b0:	f7 d6                	not    esi
c00020b2:	e8 67 f9 ff ff       	call   c0001a1e <ld_dword>
c00020b7:	39 c6                	cmp    esi,eax
c00020b9:	75 22                	jne    c00020dd <test_gpt_header+0x70>
c00020bb:	8d 43 54             	lea    eax,[ebx+0x54]
c00020be:	e8 5b f9 ff ff       	call   c0001a1e <ld_dword>
c00020c3:	83 c0 80             	add    eax,0xffffff80
c00020c6:	75 15                	jne    c00020dd <test_gpt_header+0x70>
c00020c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00020cb:	e8 4e f9 ff ff       	call   c0001a1e <ld_dword>
c00020d0:	3d 80 00 00 00       	cmp    eax,0x80
c00020d5:	0f 96 c0             	setbe  al
c00020d8:	0f b6 c0             	movzx  eax,al
c00020db:	89 c7                	mov    edi,eax
c00020dd:	5b                   	pop    ebx
c00020de:	89 f8                	mov    eax,edi
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	5d                   	pop    ebp
c00020e3:	c3                   	ret    

c00020e4 <make_rand>:
c00020e4:	56                   	push   esi
c00020e5:	85 c0                	test   eax,eax
c00020e7:	53                   	push   ebx
c00020e8:	75 05                	jne    c00020ef <make_rand+0xb>
c00020ea:	b8 01 00 00 00       	mov    eax,0x1
c00020ef:	01 d1                	add    ecx,edx
c00020f1:	bb 08 00 00 00       	mov    ebx,0x8
c00020f6:	89 c6                	mov    esi,eax
c00020f8:	d1 e8                	shr    eax,1
c00020fa:	83 e6 01             	and    esi,0x1
c00020fd:	85 f6                	test   esi,esi
c00020ff:	74 05                	je     c0002106 <make_rand+0x22>
c0002101:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002106:	4b                   	dec    ebx
c0002107:	75 ed                	jne    c00020f6 <make_rand+0x12>
c0002109:	42                   	inc    edx
c000210a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000210d:	39 ca                	cmp    edx,ecx
c000210f:	75 e0                	jne    c00020f1 <make_rand+0xd>
c0002111:	5b                   	pop    ebx
c0002112:	5e                   	pop    esi
c0002113:	c3                   	ret    

c0002114 <validate>:
c0002114:	56                   	push   esi
c0002115:	53                   	push   ebx
c0002116:	89 d6                	mov    esi,edx
c0002118:	51                   	push   ecx
c0002119:	85 c0                	test   eax,eax
c000211b:	75 09                	jne    c0002126 <validate+0x12>
c000211d:	b8 09 00 00 00       	mov    eax,0x9
c0002122:	31 c9                	xor    ecx,ecx
c0002124:	eb 2f                	jmp    c0002155 <validate+0x41>
c0002126:	89 c3                	mov    ebx,eax
c0002128:	8b 00                	mov    eax,DWORD PTR [eax]
c000212a:	85 c0                	test   eax,eax
c000212c:	74 ef                	je     c000211d <validate+0x9>
c000212e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002131:	74 ea                	je     c000211d <validate+0x9>
c0002133:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002137:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000213b:	75 e0                	jne    c000211d <validate+0x9>
c000213d:	83 ec 0c             	sub    esp,0xc
c0002140:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002144:	50                   	push   eax
c0002145:	e8 76 f8 ff ff       	call   c00019c0 <disk_status>
c000214a:	83 c4 10             	add    esp,0x10
c000214d:	a8 01                	test   al,0x1
c000214f:	75 cc                	jne    c000211d <validate+0x9>
c0002151:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002153:	31 c0                	xor    eax,eax
c0002155:	89 0e                	mov    DWORD PTR [esi],ecx
c0002157:	5a                   	pop    edx
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	c3                   	ret    

c000215b <sync_window>:
c000215b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000215f:	0f 84 85 00 00 00    	je     c00021ea <sync_window+0x8f>
c0002165:	55                   	push   ebp
c0002166:	8d 68 54             	lea    ebp,[eax+0x54]
c0002169:	57                   	push   edi
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 28             	sub    esp,0x28
c0002171:	6a 01                	push   0x1
c0002173:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002176:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002179:	55                   	push   ebp
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 58 f8 ff ff       	call   c00019dc <disk_write>
c0002184:	83 c4 20             	add    esp,0x20
c0002187:	ba 01 00 00 00       	mov    edx,0x1
c000218c:	85 c0                	test   eax,eax
c000218e:	75 50                	jne    c00021e0 <sync_window+0x85>
c0002190:	31 ff                	xor    edi,edi
c0002192:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002195:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002199:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000219d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021a0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021a3:	89 c6                	mov    esi,eax
c00021a5:	89 d7                	mov    edi,edx
c00021a7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021aa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021ae:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021b5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021b9:	73 23                	jae    c00021de <sync_window+0x83>
c00021bb:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021bf:	75 1d                	jne    c00021de <sync_window+0x83>
c00021c1:	83 ec 0c             	sub    esp,0xc
c00021c4:	6a 01                	push   0x1
c00021c6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021ca:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021ce:	52                   	push   edx
c00021cf:	50                   	push   eax
c00021d0:	55                   	push   ebp
c00021d1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021d5:	50                   	push   eax
c00021d6:	e8 01 f8 ff ff       	call   c00019dc <disk_write>
c00021db:	83 c4 20             	add    esp,0x20
c00021de:	31 d2                	xor    edx,edx
c00021e0:	83 c4 1c             	add    esp,0x1c
c00021e3:	89 d0                	mov    eax,edx
c00021e5:	5b                   	pop    ebx
c00021e6:	5e                   	pop    esi
c00021e7:	5f                   	pop    edi
c00021e8:	5d                   	pop    ebp
c00021e9:	c3                   	ret    
c00021ea:	31 d2                	xor    edx,edx
c00021ec:	89 d0                	mov    eax,edx
c00021ee:	c3                   	ret    

c00021ef <move_window>:
c00021ef:	56                   	push   esi
c00021f0:	53                   	push   ebx
c00021f1:	89 c3                	mov    ebx,eax
c00021f3:	83 ec 14             	sub    esp,0x14
c00021f6:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021f9:	75 07                	jne    c0002202 <move_window+0x13>
c00021fb:	31 f6                	xor    esi,esi
c00021fd:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002200:	74 59                	je     c000225b <move_window+0x6c>
c0002202:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002206:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000220a:	89 d8                	mov    eax,ebx
c000220c:	e8 4a ff ff ff       	call   c000215b <sync_window>
c0002211:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002215:	89 c6                	mov    esi,eax
c0002217:	85 c0                	test   eax,eax
c0002219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000221d:	75 3c                	jne    c000225b <move_window+0x6c>
c000221f:	83 ec 0c             	sub    esp,0xc
c0002222:	8d 43 54             	lea    eax,[ebx+0x54]
c0002225:	6a 01                	push   0x1
c0002227:	51                   	push   ecx
c0002228:	52                   	push   edx
c0002229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000222d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002231:	50                   	push   eax
c0002232:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002236:	50                   	push   eax
c0002237:	e8 8a f7 ff ff       	call   c00019c6 <disk_read>
c000223c:	83 c4 20             	add    esp,0x20
c000223f:	85 c0                	test   eax,eax
c0002241:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002249:	74 0a                	je     c0002255 <move_window+0x66>
c000224b:	83 ca ff             	or     edx,0xffffffff
c000224e:	be 01 00 00 00       	mov    esi,0x1
c0002253:	89 d1                	mov    ecx,edx
c0002255:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002258:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000225b:	89 f0                	mov    eax,esi
c000225d:	83 c4 14             	add    esp,0x14
c0002260:	5b                   	pop    ebx
c0002261:	5e                   	pop    esi
c0002262:	c3                   	ret    

c0002263 <check_fs>:
c0002263:	53                   	push   ebx
c0002264:	89 c3                	mov    ebx,eax
c0002266:	83 ec 08             	sub    esp,0x8
c0002269:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000226d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002274:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000227b:	e8 6f ff ff ff       	call   c00021ef <move_window>
c0002280:	ba 04 00 00 00       	mov    edx,0x4
c0002285:	85 c0                	test   eax,eax
c0002287:	0f 85 89 00 00 00    	jne    c0002316 <check_fs+0xb3>
c000228d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002293:	e8 79 f7 ff ff       	call   c0001a11 <ld_word>
c0002298:	ba 03 00 00 00       	mov    edx,0x3
c000229d:	66 3d 55 aa          	cmp    ax,0xaa55
c00022a1:	75 73                	jne    c0002316 <check_fs+0xb3>
c00022a3:	ba 00 7e 02 c0       	mov    edx,0xc0027e00
c00022a8:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00022b0:	e8 fb f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022b5:	ba 01 00 00 00       	mov    edx,0x1
c00022ba:	85 c0                	test   eax,eax
c00022bc:	74 58                	je     c0002316 <check_fs+0xb3>
c00022be:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022c1:	8d 50 18             	lea    edx,[eax+0x18]
c00022c4:	80 fa 01             	cmp    dl,0x1
c00022c7:	76 09                	jbe    c00022d2 <check_fs+0x6f>
c00022c9:	ba 02 00 00 00       	mov    edx,0x2
c00022ce:	3c eb                	cmp    al,0xeb
c00022d0:	75 44                	jne    c0002316 <check_fs+0xb3>
c00022d2:	ba b0 ad 02 c0       	mov    edx,0xc002adb0
c00022d7:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022dd:	b9 03 00 00 00       	mov    ecx,0x3
c00022e2:	e8 c9 f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022e7:	31 d2                	xor    edx,edx
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 29                	je     c0002316 <check_fs+0xb3>
c00022ed:	ba 0c 7e 02 c0       	mov    edx,0xc0027e0c
c00022f2:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022f8:	b9 05 00 00 00       	mov    ecx,0x5
c00022fd:	e8 ae f7 ff ff       	call   c0001ab0 <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 0e                	je     c0002316 <check_fs+0xb3>
c0002308:	31 d2                	xor    edx,edx
c000230a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002311:	0f 95 c2             	setne  dl
c0002314:	01 d2                	add    edx,edx
c0002316:	89 d0                	mov    eax,edx
c0002318:	83 c4 08             	add    esp,0x8
c000231b:	5b                   	pop    ebx
c000231c:	c3                   	ret    

c000231d <find_volume>:
c000231d:	55                   	push   ebp
c000231e:	31 c9                	xor    ecx,ecx
c0002320:	57                   	push   edi
c0002321:	56                   	push   esi
c0002322:	89 d6                	mov    esi,edx
c0002324:	53                   	push   ebx
c0002325:	31 d2                	xor    edx,edx
c0002327:	83 ec 3c             	sub    esp,0x3c
c000232a:	89 c3                	mov    ebx,eax
c000232c:	e8 32 ff ff ff       	call   c0002263 <check_fs>
c0002331:	83 f8 02             	cmp    eax,0x2
c0002334:	74 0e                	je     c0002344 <find_volume+0x27>
c0002336:	0f 87 5d 01 00 00    	ja     c0002499 <find_volume+0x17c>
c000233c:	85 f6                	test   esi,esi
c000233e:	0f 84 55 01 00 00    	je     c0002499 <find_volume+0x17c>
c0002344:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000234b:	0f 85 dd 00 00 00    	jne    c000242e <find_volume+0x111>
c0002351:	31 c9                	xor    ecx,ecx
c0002353:	ba 01 00 00 00       	mov    edx,0x1
c0002358:	89 d8                	mov    eax,ebx
c000235a:	e8 90 fe ff ff       	call   c00021ef <move_window>
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0a                	je     c000236d <find_volume+0x50>
c0002363:	b8 04 00 00 00       	mov    eax,0x4
c0002368:	e9 2c 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c000236d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002370:	89 e8                	mov    eax,ebp
c0002372:	e8 f6 fc ff ff       	call   c000206d <test_gpt_header>
c0002377:	85 c0                	test   eax,eax
c0002379:	75 0a                	jne    c0002385 <find_volume+0x68>
c000237b:	b8 03 00 00 00       	mov    eax,0x3
c0002380:	e9 14 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c0002385:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000238b:	e8 8e f6 ff ff       	call   c0001a1e <ld_dword>
c0002390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002394:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000239a:	e8 97 f6 ff ff       	call   c0001a36 <ld_qword>
c000239f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023bb:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023bf:	74 ba                	je     c000237b <find_volume+0x5e>
c00023c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023c5:	31 c9                	xor    ecx,ecx
c00023c7:	c1 e7 07             	shl    edi,0x7
c00023ca:	89 d8                	mov    eax,ebx
c00023cc:	89 fa                	mov    edx,edi
c00023ce:	c1 ea 09             	shr    edx,0x9
c00023d1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023d5:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023d9:	e8 11 fe ff ff       	call   c00021ef <move_window>
c00023de:	85 c0                	test   eax,eax
c00023e0:	75 81                	jne    c0002363 <find_volume+0x46>
c00023e2:	81 e7 80 01 00 00    	and    edi,0x180
c00023e8:	b9 10 00 00 00       	mov    ecx,0x10
c00023ed:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023f1:	ba f0 7d 02 c0       	mov    edx,0xc0027df0
c00023f6:	e8 b5 f6 ff ff       	call   c0001ab0 <mem_cmp>
c00023fb:	85 c0                	test   eax,eax
c00023fd:	75 29                	jne    c0002428 <find_volume+0x10b>
c00023ff:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002403:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002407:	e8 2a f6 ff ff       	call   c0001a36 <ld_qword>
c000240c:	89 d1                	mov    ecx,edx
c000240e:	89 c2                	mov    edx,eax
c0002410:	89 d8                	mov    eax,ebx
c0002412:	e8 4c fe ff ff       	call   c0002263 <check_fs>
c0002417:	85 f6                	test   esi,esi
c0002419:	75 07                	jne    c0002422 <find_volume+0x105>
c000241b:	83 f8 01             	cmp    eax,0x1
c000241e:	77 08                	ja     c0002428 <find_volume+0x10b>
c0002420:	eb 77                	jmp    c0002499 <find_volume+0x17c>
c0002422:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002426:	74 71                	je     c0002499 <find_volume+0x17c>
c0002428:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000242c:	eb 89                	jmp    c00023b7 <find_volume+0x9a>
c000242e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002432:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002438:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000243e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002442:	89 cd                	mov    ebp,ecx
c0002444:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002448:	89 f8                	mov    eax,edi
c000244a:	83 c7 10             	add    edi,0x10
c000244d:	e8 cc f5 ff ff       	call   c0001a1e <ld_dword>
c0002452:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002456:	89 01                	mov    DWORD PTR [ecx],eax
c0002458:	83 c1 04             	add    ecx,0x4
c000245b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000245f:	75 e3                	jne    c0002444 <find_volume+0x127>
c0002461:	31 ff                	xor    edi,edi
c0002463:	85 f6                	test   esi,esi
c0002465:	74 03                	je     c000246a <find_volume+0x14d>
c0002467:	8d 7e ff             	lea    edi,[esi-0x1]
c000246a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000246e:	85 d2                	test   edx,edx
c0002470:	74 14                	je     c0002486 <find_volume+0x169>
c0002472:	31 c9                	xor    ecx,ecx
c0002474:	89 d8                	mov    eax,ebx
c0002476:	e8 e8 fd ff ff       	call   c0002263 <check_fs>
c000247b:	83 f8 01             	cmp    eax,0x1
c000247e:	76 19                	jbe    c0002499 <find_volume+0x17c>
c0002480:	85 f6                	test   esi,esi
c0002482:	74 0f                	je     c0002493 <find_volume+0x176>
c0002484:	eb 13                	jmp    c0002499 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 85 ed fe ff ff    	jne    c000237b <find_volume+0x5e>
c000248e:	b8 03 00 00 00       	mov    eax,0x3
c0002493:	47                   	inc    edi
c0002494:	83 ff 03             	cmp    edi,0x3
c0002497:	76 d1                	jbe    c000246a <find_volume+0x14d>
c0002499:	83 c4 3c             	add    esp,0x3c
c000249c:	5b                   	pop    ebx
c000249d:	5e                   	pop    esi
c000249e:	5f                   	pop    edi
c000249f:	5d                   	pop    ebp
c00024a0:	c3                   	ret    

c00024a1 <mount_volume>:
c00024a1:	55                   	push   ebp
c00024a2:	57                   	push   edi
c00024a3:	89 cf                	mov    edi,ecx
c00024a5:	56                   	push   esi
c00024a6:	53                   	push   ebx
c00024a7:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ac:	83 ec 3c             	sub    esp,0x3c
c00024af:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024b9:	e8 35 fb ff ff       	call   c0001ff3 <get_ldnumber>
c00024be:	85 c0                	test   eax,eax
c00024c0:	0f 88 3a 05 00 00    	js     c0002a00 <mount_volume+0x55f>
c00024c6:	8b 2c 85 e0 c8 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd3720]
c00024cd:	89 c6                	mov    esi,eax
c00024cf:	bb 0c 00 00 00       	mov    ebx,0xc
c00024d4:	85 ed                	test   ebp,ebp
c00024d6:	0f 84 24 05 00 00    	je     c0002a00 <mount_volume+0x55f>
c00024dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024e0:	83 e7 fe             	and    edi,0xfffffffe
c00024e3:	89 2a                	mov    DWORD PTR [edx],ebp
c00024e5:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024e9:	74 32                	je     c000251d <mount_volume+0x7c>
c00024eb:	83 ec 0c             	sub    esp,0xc
c00024ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024f2:	50                   	push   eax
c00024f3:	e8 c8 f4 ff ff       	call   c00019c0 <disk_status>
c00024f8:	83 c4 10             	add    esp,0x10
c00024fb:	a8 01                	test   al,0x1
c00024fd:	75 1e                	jne    c000251d <mount_volume+0x7c>
c00024ff:	31 db                	xor    ebx,ebx
c0002501:	89 f9                	mov    ecx,edi
c0002503:	84 c9                	test   cl,cl
c0002505:	0f 84 f5 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c000250b:	a8 04                	test   al,0x4
c000250d:	0f 84 ed 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c0002513:	bb 0a 00 00 00       	mov    ebx,0xa
c0002518:	e9 e3 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	89 f0                	mov    eax,esi
c0002522:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002526:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002529:	0f b6 f0             	movzx  esi,al
c000252c:	bb 03 00 00 00       	mov    ebx,0x3
c0002531:	56                   	push   esi
c0002532:	e8 8c f4 ff ff       	call   c00019c3 <disk_initialize>
c0002537:	83 c4 10             	add    esp,0x10
c000253a:	a8 01                	test   al,0x1
c000253c:	0f 85 be 04 00 00    	jne    c0002a00 <mount_volume+0x55f>
c0002542:	89 f9                	mov    ecx,edi
c0002544:	84 c9                	test   cl,cl
c0002546:	74 04                	je     c000254c <mount_volume+0xab>
c0002548:	a8 04                	test   al,0x4
c000254a:	75 c7                	jne    c0002513 <mount_volume+0x72>
c000254c:	31 d2                	xor    edx,edx
c000254e:	89 e8                	mov    eax,ebp
c0002550:	e8 c8 fd ff ff       	call   c000231d <find_volume>
c0002555:	83 f8 04             	cmp    eax,0x4
c0002558:	75 0a                	jne    c0002564 <mount_volume+0xc3>
c000255a:	bb 01 00 00 00       	mov    ebx,0x1
c000255f:	e9 9c 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002564:	83 f8 01             	cmp    eax,0x1
c0002567:	76 0a                	jbe    c0002573 <mount_volume+0xd2>
c0002569:	bb 0d 00 00 00       	mov    ebx,0xd
c000256e:	e9 8d 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002573:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002576:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000257d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002581:	75 17                	jne    c000259a <mount_volume+0xf9>
c0002583:	b8 0b 00 00 00       	mov    eax,0xb
c0002588:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000258d:	75 da                	jne    c0002569 <mount_volume+0xc8>
c000258f:	40                   	inc    eax
c0002590:	83 f8 40             	cmp    eax,0x40
c0002593:	75 f3                	jne    c0002588 <mount_volume+0xe7>
c0002595:	e9 5a 02 00 00       	jmp    c00027f4 <mount_volume+0x353>
c000259a:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000259d:	e8 6f f4 ff ff       	call   c0001a11 <ld_word>
c00025a2:	66 3d 00 02          	cmp    ax,0x200
c00025a6:	75 c1                	jne    c0002569 <mount_volume+0xc8>
c00025a8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ab:	e8 61 f4 ff ff       	call   c0001a11 <ld_word>
c00025b0:	0f b7 c0             	movzx  eax,ax
c00025b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b7:	85 c0                	test   eax,eax
c00025b9:	75 0c                	jne    c00025c7 <mount_volume+0x126>
c00025bb:	8d 45 78             	lea    eax,[ebp+0x78]
c00025be:	e8 5b f4 ff ff       	call   c0001a1e <ld_dword>
c00025c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025cb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025ce:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025d1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025d5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025d8:	48                   	dec    eax
c00025d9:	3c 01                	cmp    al,0x1
c00025db:	77 8c                	ja     c0002569 <mount_volume+0xc8>
c00025dd:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025e1:	89 c3                	mov    ebx,eax
c00025e3:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025e7:	66 85 c0             	test   ax,ax
c00025ea:	0f 84 79 ff ff ff    	je     c0002569 <mount_volume+0xc8>
c00025f0:	8d 40 ff             	lea    eax,[eax-0x1]
c00025f3:	85 d8                	test   eax,ebx
c00025f5:	0f 85 6e ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c00025fb:	8d 45 65             	lea    eax,[ebp+0x65]
c00025fe:	e8 0e f4 ff ff       	call   c0001a11 <ld_word>
c0002603:	89 c7                	mov    edi,eax
c0002605:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002609:	a8 0f                	test   al,0xf
c000260b:	0f 85 58 ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002611:	8d 45 67             	lea    eax,[ebp+0x67]
c0002614:	e8 f8 f3 ff ff       	call   c0001a11 <ld_word>
c0002619:	0f b7 f0             	movzx  esi,ax
c000261c:	85 f6                	test   esi,esi
c000261e:	75 0a                	jne    c000262a <mount_volume+0x189>
c0002620:	8d 45 74             	lea    eax,[ebp+0x74]
c0002623:	e8 f6 f3 ff ff       	call   c0001a1e <ld_dword>
c0002628:	89 c6                	mov    esi,eax
c000262a:	8d 45 62             	lea    eax,[ebp+0x62]
c000262d:	e8 df f3 ff ff       	call   c0001a11 <ld_word>
c0002632:	66 85 c0             	test   ax,ax
c0002635:	0f 84 2e ff ff ff    	je     c0002569 <mount_volume+0xc8>
c000263b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002640:	0f b7 c8             	movzx  ecx,ax
c0002643:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000264c:	89 fa                	mov    edx,edi
c000264e:	66 c1 ea 04          	shr    dx,0x4
c0002652:	0f b7 d2             	movzx  edx,dx
c0002655:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002659:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000265c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002660:	39 c6                	cmp    esi,eax
c0002662:	0f 82 01 ff ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002668:	29 c6                	sub    esi,eax
c000266a:	31 d2                	xor    edx,edx
c000266c:	89 f0                	mov    eax,esi
c000266e:	f7 f3                	div    ebx
c0002670:	39 de                	cmp    esi,ebx
c0002672:	0f 82 f1 fe ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002678:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000267d:	0f 87 e6 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002683:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002688:	0f 86 63 03 00 00    	jbe    c00029f1 <mount_volume+0x550>
c000268e:	bb 03 00 00 00       	mov    ebx,0x3
c0002693:	8d 70 02             	lea    esi,[eax+0x2]
c0002696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000269a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000269e:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026a1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 c8                	mov    eax,ecx
c00026a8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026af:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026bb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026be:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026cf:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026d2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026d5:	83 fb 03             	cmp    ebx,0x3
c00026d8:	75 2b                	jne    c0002705 <mount_volume+0x264>
c00026da:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026dd:	e8 2f f3 ff ff       	call   c0001a11 <ld_word>
c00026e2:	66 09 c7             	or     di,ax
c00026e5:	0f 85 7e fe ff ff    	jne    c0002569 <mount_volume+0xc8>
c00026eb:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026f1:	c1 e6 02             	shl    esi,0x2
c00026f4:	e8 25 f3 ff ff       	call   c0001a1e <ld_dword>
c00026f9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002700:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002703:	eb 30                	jmp    c0002735 <mount_volume+0x294>
c0002705:	66 85 ff             	test   di,di
c0002708:	0f 84 5b fe ff ff    	je     c0002569 <mount_volume+0xc8>
c000270e:	31 d2                	xor    edx,edx
c0002710:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002714:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002718:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000271c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000271f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002722:	83 fb 02             	cmp    ebx,0x2
c0002725:	75 04                	jne    c000272b <mount_volume+0x28a>
c0002727:	01 f6                	add    esi,esi
c0002729:	eb 0a                	jmp    c0002735 <mount_volume+0x294>
c000272b:	8d 04 76             	lea    eax,[esi+esi*2]
c000272e:	83 e6 01             	and    esi,0x1
c0002731:	d1 e8                	shr    eax,1
c0002733:	01 c6                	add    esi,eax
c0002735:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000273b:	c1 ee 09             	shr    esi,0x9
c000273e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002742:	0f 87 21 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002748:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000274f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002756:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000275a:	83 fb 03             	cmp    ebx,0x3
c000275d:	75 7a                	jne    c00027d9 <mount_volume+0x338>
c000275f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002765:	e8 a7 f2 ff ff       	call   c0001a11 <ld_word>
c000276a:	66 48                	dec    ax
c000276c:	75 6b                	jne    c00027d9 <mount_volume+0x338>
c000276e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002772:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002776:	83 c2 01             	add    edx,0x1
c0002779:	89 e8                	mov    eax,ebp
c000277b:	83 d1 00             	adc    ecx,0x0
c000277e:	e8 6c fa ff ff       	call   c00021ef <move_window>
c0002783:	85 c0                	test   eax,eax
c0002785:	75 52                	jne    c00027d9 <mount_volume+0x338>
c0002787:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000278b:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002791:	e8 7b f2 ff ff       	call   c0001a11 <ld_word>
c0002796:	66 3d 55 aa          	cmp    ax,0xaa55
c000279a:	75 3d                	jne    c00027d9 <mount_volume+0x338>
c000279c:	8d 45 54             	lea    eax,[ebp+0x54]
c000279f:	e8 7a f2 ff ff       	call   c0001a1e <ld_dword>
c00027a4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027a9:	75 2e                	jne    c00027d9 <mount_volume+0x338>
c00027ab:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027b1:	e8 68 f2 ff ff       	call   c0001a1e <ld_dword>
c00027b6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027bb:	75 1c                	jne    c00027d9 <mount_volume+0x338>
c00027bd:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027c3:	e8 56 f2 ff ff       	call   c0001a1e <ld_dword>
c00027c8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027cb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027d1:	e8 48 f2 ff ff       	call   c0001a1e <ld_dword>
c00027d6:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027d9:	66 a1 c0 c8 02 c0    	mov    ax,ds:0xc002c8c0
c00027df:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027e2:	40                   	inc    eax
c00027e3:	31 db                	xor    ebx,ebx
c00027e5:	66 a3 c0 c8 02 c0    	mov    ds:0xc002c8c0,ax
c00027eb:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027ef:	e9 0c 02 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c00027f4:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027fa:	e8 12 f2 ff ff       	call   c0001a11 <ld_word>
c00027ff:	66 3d 00 01          	cmp    ax,0x100
c0002803:	0f 85 60 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002809:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002810:	0f 85 53 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002816:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000281c:	e8 15 f2 ff ff       	call   c0001a36 <ld_qword>
c0002821:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002825:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002829:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000282f:	e8 ea f1 ff ff       	call   c0001a1e <ld_dword>
c0002834:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002837:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000283d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002840:	fe c8                	dec    al
c0002842:	0f 85 21 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002848:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000284f:	bb 01 00 00 00       	mov    ebx,0x1
c0002854:	d3 e3                	shl    ebx,cl
c0002856:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000285a:	66 85 db             	test   bx,bx
c000285d:	0f 84 06 fd ff ff    	je     c0002569 <mount_volume+0xc8>
c0002863:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002869:	e8 b0 f1 ff ff       	call   c0001a1e <ld_dword>
c000286e:	89 c6                	mov    esi,eax
c0002870:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002875:	0f 87 ee fc ff ff    	ja     c0002569 <mount_volume+0xc8>
c000287b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000287f:	8d 40 02             	lea    eax,[eax+0x2]
c0002882:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002885:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000288c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000288f:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002895:	e8 84 f1 ff ff       	call   c0001a1e <ld_dword>
c000289a:	31 d2                	xor    edx,edx
c000289c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028a0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028ac:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028af:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028b2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028b8:	e8 61 f1 ff ff       	call   c0001a1e <ld_dword>
c00028bd:	31 d2                	xor    edx,edx
c00028bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028cb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ce:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d1:	0f b7 c3             	movzx  eax,bx
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	0f af f0             	imul   esi,eax
c00028d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028e3:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028e7:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028eb:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028ef:	39 c1                	cmp    ecx,eax
c00028f1:	89 df                	mov    edi,ebx
c00028f3:	19 d7                	sbb    edi,edx
c00028f5:	0f 82 6e fc ff ff    	jb     c0002569 <mount_volume+0xc8>
c00028fb:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002901:	31 db                	xor    ebx,ebx
c0002903:	e8 16 f1 ff ff       	call   c0001a1e <ld_dword>
c0002908:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000290f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002912:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000291a:	85 db                	test   ebx,ebx
c000291c:	75 39                	jne    c0002957 <mount_volume+0x4b6>
c000291e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002922:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002926:	0f 86 3d fc ff ff    	jbe    c0002569 <mount_volume+0xc8>
c000292c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000292f:	31 ff                	xor    edi,edi
c0002931:	89 e8                	mov    eax,ebp
c0002933:	e8 72 f3 ff ff       	call   c0001caa <clst2sect>
c0002938:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000293c:	01 c6                	add    esi,eax
c000293e:	89 e8                	mov    eax,ebp
c0002940:	11 d7                	adc    edi,edx
c0002942:	89 f2                	mov    edx,esi
c0002944:	89 f9                	mov    ecx,edi
c0002946:	e8 a4 f8 ff ff       	call   c00021ef <move_window>
c000294b:	85 c0                	test   eax,eax
c000294d:	0f 85 07 fc ff ff    	jne    c000255a <mount_volume+0xb9>
c0002953:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002957:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000295c:	74 0b                	je     c0002969 <mount_volume+0x4c8>
c000295e:	83 c3 20             	add    ebx,0x20
c0002961:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002967:	eb b1                	jmp    c000291a <mount_volume+0x479>
c0002969:	8d 75 54             	lea    esi,[ebp+0x54]
c000296c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002970:	e8 a9 f0 ff ff       	call   c0001a1e <ld_dword>
c0002975:	89 c3                	mov    ebx,eax
c0002977:	83 f8 01             	cmp    eax,0x1
c000297a:	0f 86 e9 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002980:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002983:	0f 86 e0 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002989:	8d 53 fe             	lea    edx,[ebx-0x2]
c000298c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002990:	0f af c2             	imul   eax,edx
c0002993:	31 d2                	xor    edx,edx
c0002995:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002998:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000299b:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000299e:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029a1:	31 c9                	xor    ecx,ecx
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	89 e8                	mov    eax,ebp
c00029a7:	c1 ea 07             	shr    edx,0x7
c00029aa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029ad:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029b0:	e8 3a f8 ff ff       	call   c00021ef <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	0f 85 9d fb ff ff    	jne    c000255a <mount_volume+0xb9>
c00029bd:	89 d8                	mov    eax,ebx
c00029bf:	83 e0 7f             	and    eax,0x7f
c00029c2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029c5:	e8 54 f0 ff ff       	call   c0001a1e <ld_dword>
c00029ca:	83 f8 ff             	cmp    eax,0xffffffff
c00029cd:	74 0a                	je     c00029d9 <mount_volume+0x538>
c00029cf:	43                   	inc    ebx
c00029d0:	39 d8                	cmp    eax,ebx
c00029d2:	74 cd                	je     c00029a1 <mount_volume+0x500>
c00029d4:	e9 90 fb ff ff       	jmp    c0002569 <mount_volume+0xc8>
c00029d9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029e7:	bb 04 00 00 00       	mov    ebx,0x4
c00029ec:	e9 e8 fd ff ff       	jmp    c00027d9 <mount_volume+0x338>
c00029f1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029f6:	19 db                	sbb    ebx,ebx
c00029f8:	83 c3 02             	add    ebx,0x2
c00029fb:	e9 93 fc ff ff       	jmp    c0002693 <mount_volume+0x1f2>
c0002a00:	83 c4 3c             	add    esp,0x3c
c0002a03:	89 d8                	mov    eax,ebx
c0002a05:	5b                   	pop    ebx
c0002a06:	5e                   	pop    esi
c0002a07:	5f                   	pop    edi
c0002a08:	5d                   	pop    ebp
c0002a09:	c3                   	ret    

c0002a0a <find_bitmap>:
c0002a0a:	55                   	push   ebp
c0002a0b:	57                   	push   edi
c0002a0c:	89 c7                	mov    edi,eax
c0002a0e:	56                   	push   esi
c0002a0f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a12:	53                   	push   ebx
c0002a13:	83 ec 1c             	sub    esp,0x1c
c0002a16:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a1d:	83 e8 02             	sub    eax,0x2
c0002a20:	39 f0                	cmp    eax,esi
c0002a22:	77 02                	ja     c0002a26 <find_bitmap+0x1c>
c0002a24:	31 f6                	xor    esi,esi
c0002a26:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a2a:	89 f3                	mov    ebx,esi
c0002a2c:	31 ed                	xor    ebp,ebp
c0002a2e:	31 c9                	xor    ecx,ecx
c0002a30:	89 da                	mov    edx,ebx
c0002a32:	89 f8                	mov    eax,edi
c0002a34:	c1 ea 0c             	shr    edx,0xc
c0002a37:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a3a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a3d:	e8 ad f7 ff ff       	call   c00021ef <move_window>
c0002a42:	85 c0                	test   eax,eax
c0002a44:	75 68                	jne    c0002aae <find_bitmap+0xa4>
c0002a46:	89 da                	mov    edx,ebx
c0002a48:	89 d9                	mov    ecx,ebx
c0002a4a:	c1 ea 03             	shr    edx,0x3
c0002a4d:	83 e1 07             	and    ecx,0x7
c0002a50:	b8 01 00 00 00       	mov    eax,0x1
c0002a55:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a5b:	d3 e0                	shl    eax,cl
c0002a5d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a60:	83 e9 02             	sub    ecx,0x2
c0002a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a67:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a6b:	43                   	inc    ebx
c0002a6c:	21 c1                	and    ecx,eax
c0002a6e:	d1 e0                	shl    eax,1
c0002a70:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a74:	77 09                	ja     c0002a7f <find_bitmap+0x75>
c0002a76:	31 db                	xor    ebx,ebx
c0002a78:	ba 00 02 00 00       	mov    edx,0x200
c0002a7d:	31 c0                	xor    eax,eax
c0002a7f:	84 c9                	test   cl,cl
c0002a81:	75 10                	jne    c0002a93 <find_bitmap+0x89>
c0002a83:	45                   	inc    ebp
c0002a84:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a88:	75 0f                	jne    c0002a99 <find_bitmap+0x8f>
c0002a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a8e:	83 c0 02             	add    eax,0x2
c0002a91:	eb 22                	jmp    c0002ab5 <find_bitmap+0xab>
c0002a93:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a97:	31 ed                	xor    ebp,ebp
c0002a99:	39 de                	cmp    esi,ebx
c0002a9b:	74 16                	je     c0002ab3 <find_bitmap+0xa9>
c0002a9d:	84 c0                	test   al,al
c0002a9f:	75 c6                	jne    c0002a67 <find_bitmap+0x5d>
c0002aa1:	42                   	inc    edx
c0002aa2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aa8:	77 84                	ja     c0002a2e <find_bitmap+0x24>
c0002aaa:	b0 01                	mov    al,0x1
c0002aac:	eb b9                	jmp    c0002a67 <find_bitmap+0x5d>
c0002aae:	83 c8 ff             	or     eax,0xffffffff
c0002ab1:	eb 02                	jmp    c0002ab5 <find_bitmap+0xab>
c0002ab3:	31 c0                	xor    eax,eax
c0002ab5:	83 c4 1c             	add    esp,0x1c
c0002ab8:	5b                   	pop    ebx
c0002ab9:	5e                   	pop    esi
c0002aba:	5f                   	pop    edi
c0002abb:	5d                   	pop    ebp
c0002abc:	c3                   	ret    

c0002abd <change_bitmap>:
c0002abd:	55                   	push   ebp
c0002abe:	89 cd                	mov    ebp,ecx
c0002ac0:	57                   	push   edi
c0002ac1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ac4:	56                   	push   esi
c0002ac5:	89 c7                	mov    edi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	89 c8                	mov    eax,ecx
c0002aca:	83 ec 1c             	sub    esp,0x1c
c0002acd:	31 d2                	xor    edx,edx
c0002acf:	89 ce                	mov    esi,ecx
c0002ad1:	c1 e8 0c             	shr    eax,0xc
c0002ad4:	bb 01 00 00 00       	mov    ebx,0x1
c0002ad9:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002adc:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002adf:	c1 ee 03             	shr    esi,0x3
c0002ae2:	83 e1 07             	and    ecx,0x7
c0002ae5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002aeb:	d3 e3                	shl    ebx,cl
c0002aed:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002af1:	89 c1                	mov    ecx,eax
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 c1 01             	add    ecx,0x1
c0002af8:	83 d3 00             	adc    ebx,0x0
c0002afb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b03:	89 d1                	mov    ecx,edx
c0002b05:	89 c2                	mov    edx,eax
c0002b07:	89 f8                	mov    eax,edi
c0002b09:	e8 e1 f6 ff ff       	call   c00021ef <move_window>
c0002b0e:	89 c1                	mov    ecx,eax
c0002b10:	85 c0                	test   eax,eax
c0002b12:	75 48                	jne    c0002b5c <change_bitmap+0x9f>
c0002b14:	31 d2                	xor    edx,edx
c0002b16:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b1a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b1e:	0f 95 c2             	setne  dl
c0002b21:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b25:	74 3c                	je     c0002b63 <change_bitmap+0xa6>
c0002b27:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b2b:	4d                   	dec    ebp
c0002b2c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b34:	74 32                	je     c0002b68 <change_bitmap+0xab>
c0002b36:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b3a:	75 d8                	jne    c0002b14 <change_bitmap+0x57>
c0002b3c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b3f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b44:	89 c3                	mov    ebx,eax
c0002b46:	31 f6                	xor    esi,esi
c0002b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b50:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b56:	74 99                	je     c0002af1 <change_bitmap+0x34>
c0002b58:	89 de                	mov    esi,ebx
c0002b5a:	eb b8                	jmp    c0002b14 <change_bitmap+0x57>
c0002b5c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b61:	eb 05                	jmp    c0002b68 <change_bitmap+0xab>
c0002b63:	b9 02 00 00 00       	mov    ecx,0x2
c0002b68:	83 c4 1c             	add    esp,0x1c
c0002b6b:	89 c8                	mov    eax,ecx
c0002b6d:	5b                   	pop    ebx
c0002b6e:	5e                   	pop    esi
c0002b6f:	5f                   	pop    edi
c0002b70:	5d                   	pop    ebp
c0002b71:	c3                   	ret    

c0002b72 <put_fat>:
c0002b72:	83 fa 01             	cmp    edx,0x1
c0002b75:	0f 86 7b 01 00 00    	jbe    c0002cf6 <put_fat+0x184>
c0002b7b:	55                   	push   ebp
c0002b7c:	57                   	push   edi
c0002b7d:	89 cf                	mov    edi,ecx
c0002b7f:	56                   	push   esi
c0002b80:	b9 02 00 00 00       	mov    ecx,0x2
c0002b85:	53                   	push   ebx
c0002b86:	89 c6                	mov    esi,eax
c0002b88:	83 ec 1c             	sub    esp,0x1c
c0002b8b:	89 d3                	mov    ebx,edx
c0002b8d:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b90:	0f 86 68 01 00 00    	jbe    c0002cfe <put_fat+0x18c>
c0002b96:	8a 00                	mov    al,BYTE PTR [eax]
c0002b98:	3c 02                	cmp    al,0x2
c0002b9a:	0f 84 c7 00 00 00    	je     c0002c67 <put_fat+0xf5>
c0002ba0:	77 09                	ja     c0002bab <put_fat+0x39>
c0002ba2:	fe c8                	dec    al
c0002ba4:	74 17                	je     c0002bbd <put_fat+0x4b>
c0002ba6:	e9 53 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bab:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb0:	3c 04                	cmp    al,0x4
c0002bb2:	0f 86 e1 00 00 00    	jbe    c0002c99 <put_fat+0x127>
c0002bb8:	e9 41 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bbd:	89 d5                	mov    ebp,edx
c0002bbf:	31 c9                	xor    ecx,ecx
c0002bc1:	d1 ed                	shr    ebp,1
c0002bc3:	89 f0                	mov    eax,esi
c0002bc5:	01 d5                	add    ebp,edx
c0002bc7:	89 ea                	mov    edx,ebp
c0002bc9:	c1 ea 09             	shr    edx,0x9
c0002bcc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bcf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bd2:	e8 18 f6 ff ff       	call   c00021ef <move_window>
c0002bd7:	89 c1                	mov    ecx,eax
c0002bd9:	85 c0                	test   eax,eax
c0002bdb:	0f 85 1d 01 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002be1:	8d 46 54             	lea    eax,[esi+0x54]
c0002be4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002be8:	8d 45 01             	lea    eax,[ebp+0x1]
c0002beb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bf5:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bf9:	89 f8                	mov    eax,edi
c0002bfb:	83 e3 01             	and    ebx,0x1
c0002bfe:	74 0d                	je     c0002c0d <put_fat+0x9b>
c0002c00:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c03:	89 fa                	mov    edx,edi
c0002c05:	83 e0 0f             	and    eax,0xf
c0002c08:	c1 e2 04             	shl    edx,0x4
c0002c0b:	09 d0                	or     eax,edx
c0002c0d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c14:	31 c9                	xor    ecx,ecx
c0002c16:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1a:	c1 ea 09             	shr    edx,0x9
c0002c1d:	89 f0                	mov    eax,esi
c0002c1f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c22:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c25:	e8 c5 f5 ff ff       	call   c00021ef <move_window>
c0002c2a:	89 c1                	mov    ecx,eax
c0002c2c:	85 c0                	test   eax,eax
c0002c2e:	0f 85 ca 00 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002c34:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c38:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c3e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c42:	85 db                	test   ebx,ebx
c0002c44:	74 07                	je     c0002c4d <put_fat+0xdb>
c0002c46:	c1 ef 04             	shr    edi,0x4
c0002c49:	89 fa                	mov    edx,edi
c0002c4b:	eb 0e                	jmp    c0002c5b <put_fat+0xe9>
c0002c4d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c50:	c1 ef 08             	shr    edi,0x8
c0002c53:	83 e2 f0             	and    edx,0xfffffff0
c0002c56:	83 e7 0f             	and    edi,0xf
c0002c59:	09 fa                	or     edx,edi
c0002c5b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c5e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c62:	e9 97 00 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002c67:	31 c9                	xor    ecx,ecx
c0002c69:	c1 ea 08             	shr    edx,0x8
c0002c6c:	89 f0                	mov    eax,esi
c0002c6e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c71:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c74:	e8 76 f5 ff ff       	call   c00021ef <move_window>
c0002c79:	89 c1                	mov    ecx,eax
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	75 7f                	jne    c0002cfe <put_fat+0x18c>
c0002c7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c83:	01 db                	add    ebx,ebx
c0002c85:	0f b7 d7             	movzx  edx,di
c0002c88:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c8e:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c92:	e8 ec ed ff ff       	call   c0001a83 <st_word>
c0002c97:	eb 53                	jmp    c0002cec <put_fat+0x17a>
c0002c99:	31 c9                	xor    ecx,ecx
c0002c9b:	c1 ea 07             	shr    edx,0x7
c0002c9e:	89 f0                	mov    eax,esi
c0002ca0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca6:	e8 44 f5 ff ff       	call   c00021ef <move_window>
c0002cab:	89 c1                	mov    ecx,eax
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 4d                	jne    c0002cfe <put_fat+0x18c>
c0002cb1:	c1 e3 02             	shl    ebx,0x2
c0002cb4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cba:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cbd:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cc1:	74 1c                	je     c0002cdf <put_fat+0x16d>
c0002cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ccd:	89 d8                	mov    eax,ebx
c0002ccf:	e8 4a ed ff ff       	call   c0001a1e <ld_dword>
c0002cd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cd8:	25 00 00 00 f0       	and    eax,0xf0000000
c0002cdd:	09 c7                	or     edi,eax
c0002cdf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ce3:	89 fa                	mov    edx,edi
c0002ce5:	89 d8                	mov    eax,ebx
c0002ce7:	e8 9b ed ff ff       	call   c0001a87 <st_dword>
c0002cec:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cf4:	eb 08                	jmp    c0002cfe <put_fat+0x18c>
c0002cf6:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfb:	89 c8                	mov    eax,ecx
c0002cfd:	c3                   	ret    
c0002cfe:	83 c4 1c             	add    esp,0x1c
c0002d01:	89 c8                	mov    eax,ecx
c0002d03:	5b                   	pop    ebx
c0002d04:	5e                   	pop    esi
c0002d05:	5f                   	pop    edi
c0002d06:	5d                   	pop    ebp
c0002d07:	c3                   	ret    

c0002d08 <fill_last_frag>:
c0002d08:	57                   	push   edi
c0002d09:	89 cf                	mov    edi,ecx
c0002d0b:	56                   	push   esi
c0002d0c:	89 d6                	mov    esi,edx
c0002d0e:	53                   	push   ebx
c0002d0f:	89 c3                	mov    ebx,eax
c0002d11:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d14:	85 c0                	test   eax,eax
c0002d16:	74 21                	je     c0002d39 <fill_last_frag+0x31>
c0002d18:	89 f9                	mov    ecx,edi
c0002d1a:	83 f8 01             	cmp    eax,0x1
c0002d1d:	76 05                	jbe    c0002d24 <fill_last_frag+0x1c>
c0002d1f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d22:	29 c1                	sub    ecx,eax
c0002d24:	8d 56 01             	lea    edx,[esi+0x1]
c0002d27:	29 c2                	sub    edx,eax
c0002d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d2b:	e8 42 fe ff ff       	call   c0002b72 <put_fat>
c0002d30:	85 c0                	test   eax,eax
c0002d32:	75 05                	jne    c0002d39 <fill_last_frag+0x31>
c0002d34:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d37:	eb d8                	jmp    c0002d11 <fill_last_frag+0x9>
c0002d39:	5b                   	pop    ebx
c0002d3a:	5e                   	pop    esi
c0002d3b:	5f                   	pop    edi
c0002d3c:	c3                   	ret    

c0002d3d <fill_first_frag>:
c0002d3d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d41:	75 2d                	jne    c0002d70 <fill_first_frag+0x33>
c0002d43:	57                   	push   edi
c0002d44:	56                   	push   esi
c0002d45:	53                   	push   ebx
c0002d46:	89 c3                	mov    ebx,eax
c0002d48:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d4b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d4e:	01 d7                	add    edi,edx
c0002d50:	39 fa                	cmp    edx,edi
c0002d52:	74 14                	je     c0002d68 <fill_first_frag+0x2b>
c0002d54:	8d 72 01             	lea    esi,[edx+0x1]
c0002d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d59:	89 f1                	mov    ecx,esi
c0002d5b:	e8 12 fe ff ff       	call   c0002b72 <put_fat>
c0002d60:	89 f2                	mov    edx,esi
c0002d62:	85 c0                	test   eax,eax
c0002d64:	74 ea                	je     c0002d50 <fill_first_frag+0x13>
c0002d66:	eb 0b                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d68:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d6c:	31 c0                	xor    eax,eax
c0002d6e:	eb 03                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d70:	31 c0                	xor    eax,eax
c0002d72:	c3                   	ret    
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <get_fat>:
c0002d77:	83 fa 01             	cmp    edx,0x1
c0002d7a:	0f 86 db 01 00 00    	jbe    c0002f5b <get_fat+0x1e4>
c0002d80:	55                   	push   ebp
c0002d81:	b9 01 00 00 00       	mov    ecx,0x1
c0002d86:	57                   	push   edi
c0002d87:	56                   	push   esi
c0002d88:	53                   	push   ebx
c0002d89:	83 ec 1c             	sub    esp,0x1c
c0002d8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d8e:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d91:	0f 86 cc 01 00 00    	jbe    c0002f63 <get_fat+0x1ec>
c0002d97:	89 c3                	mov    ebx,eax
c0002d99:	89 d6                	mov    esi,edx
c0002d9b:	8a 07                	mov    al,BYTE PTR [edi]
c0002d9d:	3c 02                	cmp    al,0x2
c0002d9f:	0f 84 99 00 00 00    	je     c0002e3e <get_fat+0xc7>
c0002da5:	77 09                	ja     c0002db0 <get_fat+0x39>
c0002da7:	fe c8                	dec    al
c0002da9:	74 1a                	je     c0002dc5 <get_fat+0x4e>
c0002dab:	e9 b3 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002db0:	3c 03                	cmp    al,0x3
c0002db2:	0f 84 b5 00 00 00    	je     c0002e6d <get_fat+0xf6>
c0002db8:	3c 04                	cmp    al,0x4
c0002dba:	0f 84 e3 00 00 00    	je     c0002ea3 <get_fat+0x12c>
c0002dc0:	e9 9e 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002dc5:	89 d3                	mov    ebx,edx
c0002dc7:	31 c9                	xor    ecx,ecx
c0002dc9:	d1 eb                	shr    ebx,1
c0002dcb:	89 f8                	mov    eax,edi
c0002dcd:	01 d3                	add    ebx,edx
c0002dcf:	89 da                	mov    edx,ebx
c0002dd1:	c1 ea 09             	shr    edx,0x9
c0002dd4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dd7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dda:	e8 10 f4 ff ff       	call   c00021ef <move_window>
c0002ddf:	85 c0                	test   eax,eax
c0002de1:	74 08                	je     c0002deb <get_fat+0x74>
c0002de3:	83 c9 ff             	or     ecx,0xffffffff
c0002de6:	e9 78 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002deb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002df6:	89 ea                	mov    edx,ebp
c0002df8:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dfc:	c1 ea 09             	shr    edx,0x9
c0002dff:	89 f8                	mov    eax,edi
c0002e01:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e04:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e07:	e8 e3 f3 ff ff       	call   c00021ef <move_window>
c0002e0c:	85 c0                	test   eax,eax
c0002e0e:	75 d3                	jne    c0002de3 <get_fat+0x6c>
c0002e10:	0f b6 c3             	movzx  eax,bl
c0002e13:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e19:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e1e:	c1 e3 08             	shl    ebx,0x8
c0002e21:	09 c3                	or     ebx,eax
c0002e23:	89 d9                	mov    ecx,ebx
c0002e25:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e2b:	83 e6 01             	and    esi,0x1
c0002e2e:	0f 84 2f 01 00 00    	je     c0002f63 <get_fat+0x1ec>
c0002e34:	89 d9                	mov    ecx,ebx
c0002e36:	c1 e9 04             	shr    ecx,0x4
c0002e39:	e9 25 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e3e:	31 c9                	xor    ecx,ecx
c0002e40:	c1 ea 08             	shr    edx,0x8
c0002e43:	89 f8                	mov    eax,edi
c0002e45:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e48:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4b:	e8 9f f3 ff ff       	call   c00021ef <move_window>
c0002e50:	85 c0                	test   eax,eax
c0002e52:	75 8f                	jne    c0002de3 <get_fat+0x6c>
c0002e54:	01 f6                	add    esi,esi
c0002e56:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e5c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e60:	e8 ac eb ff ff       	call   c0001a11 <ld_word>
c0002e65:	0f b7 c8             	movzx  ecx,ax
c0002e68:	e9 f6 00 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	c1 ea 07             	shr    edx,0x7
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7a:	e8 70 f3 ff ff       	call   c00021ef <move_window>
c0002e7f:	85 c0                	test   eax,eax
c0002e81:	0f 85 5c ff ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002e87:	c1 e6 02             	shl    esi,0x2
c0002e8a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e90:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e94:	e8 85 eb ff ff       	call   c0001a1e <ld_dword>
c0002e99:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e9e:	e9 b4 00 00 00       	jmp    c0002f57 <get_fat+0x1e0>
c0002ea3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ea6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ea9:	89 d1                	mov    ecx,edx
c0002eab:	09 c1                	or     ecx,eax
c0002ead:	74 06                	je     c0002eb5 <get_fat+0x13e>
c0002eaf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eb3:	75 0f                	jne    c0002ec4 <get_fat+0x14d>
c0002eb5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eba:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ebe:	0f 85 9f 00 00 00    	jne    c0002f63 <get_fat+0x1ec>
c0002ec4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ec8:	89 f5                	mov    ebp,esi
c0002eca:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ecf:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ed2:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ed5:	80 f9 02             	cmp    cl,0x2
c0002ed8:	75 35                	jne    c0002f0f <get_fat+0x198>
c0002eda:	83 c0 ff             	add    eax,0xffffffff
c0002edd:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ee2:	83 d2 ff             	adc    edx,0xffffffff
c0002ee5:	31 db                	xor    ebx,ebx
c0002ee7:	0f ac d0 09          	shrd   eax,edx,0x9
c0002eeb:	53                   	push   ebx
c0002eec:	c1 ea 09             	shr    edx,0x9
c0002eef:	51                   	push   ecx
c0002ef0:	52                   	push   edx
c0002ef1:	50                   	push   eax
c0002ef2:	e8 b5 24 02 00       	call   c00253ac <__udivdi3>
c0002ef7:	83 c4 10             	add    esp,0x10
c0002efa:	b9 01 00 00 00       	mov    ecx,0x1
c0002eff:	39 c5                	cmp    ebp,eax
c0002f01:	77 60                	ja     c0002f63 <get_fat+0x1ec>
c0002f03:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f08:	74 59                	je     c0002f63 <get_fat+0x1ec>
c0002f0a:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f0d:	eb 54                	jmp    c0002f63 <get_fat+0x1ec>
c0002f0f:	80 f9 03             	cmp    cl,0x3
c0002f12:	75 05                	jne    c0002f19 <get_fat+0x1a2>
c0002f14:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f17:	77 f1                	ja     c0002f0a <get_fat+0x193>
c0002f19:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f1e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f22:	75 3f                	jne    c0002f63 <get_fat+0x1ec>
c0002f24:	31 c9                	xor    ecx,ecx
c0002f26:	89 f2                	mov    edx,esi
c0002f28:	89 f8                	mov    eax,edi
c0002f2a:	c1 ea 07             	shr    edx,0x7
c0002f2d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f30:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f33:	e8 b7 f2 ff ff       	call   c00021ef <move_window>
c0002f38:	85 c0                	test   eax,eax
c0002f3a:	0f 85 a3 fe ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002f40:	c1 e6 02             	shl    esi,0x2
c0002f43:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f49:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f4d:	e8 cc ea ff ff       	call   c0001a1e <ld_dword>
c0002f52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f57:	89 c1                	mov    ecx,eax
c0002f59:	eb 08                	jmp    c0002f63 <get_fat+0x1ec>
c0002f5b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f60:	89 c8                	mov    eax,ecx
c0002f62:	c3                   	ret    
c0002f63:	83 c4 1c             	add    esp,0x1c
c0002f66:	89 c8                	mov    eax,ecx
c0002f68:	5b                   	pop    ebx
c0002f69:	5e                   	pop    esi
c0002f6a:	5f                   	pop    edi
c0002f6b:	5d                   	pop    ebp
c0002f6c:	c3                   	ret    

c0002f6d <dir_sdi>:
c0002f6d:	55                   	push   ebp
c0002f6e:	57                   	push   edi
c0002f6f:	56                   	push   esi
c0002f70:	53                   	push   ebx
c0002f71:	89 c3                	mov    ebx,eax
c0002f73:	83 ec 1c             	sub    esp,0x1c
c0002f76:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f78:	31 c0                	xor    eax,eax
c0002f7a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f7d:	0f 94 c0             	sete   al
c0002f80:	48                   	dec    eax
c0002f81:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f86:	05 00 00 00 10       	add    eax,0x10000000
c0002f8b:	39 d0                	cmp    eax,edx
c0002f8d:	77 0a                	ja     c0002f99 <dir_sdi+0x2c>
c0002f8f:	b8 02 00 00 00       	mov    eax,0x2
c0002f94:	e9 c4 00 00 00       	jmp    c000305d <dir_sdi+0xf0>
c0002f99:	89 d6                	mov    esi,edx
c0002f9b:	f6 c2 1f             	test   dl,0x1f
c0002f9e:	75 ef                	jne    c0002f8f <dir_sdi+0x22>
c0002fa0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fa3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fa6:	85 c9                	test   ecx,ecx
c0002fa8:	75 2d                	jne    c0002fd7 <dir_sdi+0x6a>
c0002faa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fad:	77 1b                	ja     c0002fca <dir_sdi+0x5d>
c0002faf:	89 f2                	mov    edx,esi
c0002fb1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fb5:	c1 ea 05             	shr    edx,0x5
c0002fb8:	39 c2                	cmp    edx,eax
c0002fba:	73 d3                	jae    c0002f8f <dir_sdi+0x22>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fc2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc8:	eb 4b                	jmp    c0003015 <dir_sdi+0xa8>
c0002fca:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fcd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 da                	je     c0002faf <dir_sdi+0x42>
c0002fd5:	89 c1                	mov    ecx,eax
c0002fd7:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fdb:	c1 e5 09             	shl    ebp,0x9
c0002fde:	89 ca                	mov    edx,ecx
c0002fe0:	39 ee                	cmp    esi,ebp
c0002fe2:	72 1c                	jb     c0003000 <dir_sdi+0x93>
c0002fe4:	89 d8                	mov    eax,ebx
c0002fe6:	e8 8c fd ff ff       	call   c0002d77 <get_fat>
c0002feb:	89 c1                	mov    ecx,eax
c0002fed:	83 f8 ff             	cmp    eax,0xffffffff
c0002ff0:	74 66                	je     c0003058 <dir_sdi+0xeb>
c0002ff2:	83 f8 01             	cmp    eax,0x1
c0002ff5:	76 98                	jbe    c0002f8f <dir_sdi+0x22>
c0002ff7:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002ffa:	76 93                	jbe    c0002f8f <dir_sdi+0x22>
c0002ffc:	29 ee                	sub    esi,ebp
c0002ffe:	eb de                	jmp    c0002fde <dir_sdi+0x71>
c0003000:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003004:	89 f8                	mov    eax,edi
c0003006:	e8 9f ec ff ff       	call   c0001caa <clst2sect>
c000300b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000300f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003012:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003015:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003018:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000301b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000301e:	89 d1                	mov    ecx,edx
c0003020:	09 c1                	or     ecx,eax
c0003022:	0f 84 67 ff ff ff    	je     c0002f8f <dir_sdi+0x22>
c0003028:	89 f1                	mov    ecx,esi
c000302a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003032:	c1 e9 09             	shr    ecx,0x9
c0003035:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003039:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000303d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003041:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003044:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000304a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003051:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003054:	31 c0                	xor    eax,eax
c0003056:	eb 05                	jmp    c000305d <dir_sdi+0xf0>
c0003058:	b8 01 00 00 00       	mov    eax,0x1
c000305d:	83 c4 1c             	add    esp,0x1c
c0003060:	5b                   	pop    ebx
c0003061:	5e                   	pop    esi
c0003062:	5f                   	pop    edi
c0003063:	5d                   	pop    ebp
c0003064:	c3                   	ret    

c0003065 <create_chain>:
c0003065:	55                   	push   ebp
c0003066:	89 c5                	mov    ebp,eax
c0003068:	57                   	push   edi
c0003069:	56                   	push   esi
c000306a:	53                   	push   ebx
c000306b:	83 ec 1c             	sub    esp,0x1c
c000306e:	85 d2                	test   edx,edx
c0003070:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003074:	8b 30                	mov    esi,DWORD PTR [eax]
c0003076:	75 0e                	jne    c0003086 <create_chain+0x21>
c0003078:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000307b:	85 ff                	test   edi,edi
c000307d:	74 39                	je     c00030b8 <create_chain+0x53>
c000307f:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003082:	77 39                	ja     c00030bd <create_chain+0x58>
c0003084:	eb 32                	jmp    c00030b8 <create_chain+0x53>
c0003086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000308a:	e8 e8 fc ff ff       	call   c0002d77 <get_fat>
c000308f:	89 c3                	mov    ebx,eax
c0003091:	83 f8 01             	cmp    eax,0x1
c0003094:	77 0a                	ja     c00030a0 <create_chain+0x3b>
c0003096:	bb 01 00 00 00       	mov    ebx,0x1
c000309b:	e9 ba 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030a0:	83 f8 ff             	cmp    eax,0xffffffff
c00030a3:	0f 84 62 01 00 00    	je     c000320b <create_chain+0x1a6>
c00030a9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ac:	0f 87 a8 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030b6:	eb 05                	jmp    c00030bd <create_chain+0x58>
c00030b8:	bf 01 00 00 00       	mov    edi,0x1
c00030bd:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030c1:	75 07                	jne    c00030ca <create_chain+0x65>
c00030c3:	31 db                	xor    ebx,ebx
c00030c5:	e9 90 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030ca:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030cd:	75 74                	jne    c0003143 <create_chain+0xde>
c00030cf:	b9 01 00 00 00       	mov    ecx,0x1
c00030d4:	89 fa                	mov    edx,edi
c00030d6:	89 f0                	mov    eax,esi
c00030d8:	e8 2d f9 ff ff       	call   c0002a0a <find_bitmap>
c00030dd:	89 c3                	mov    ebx,eax
c00030df:	8d 40 ff             	lea    eax,[eax-0x1]
c00030e2:	83 f8 fd             	cmp    eax,0xfffffffd
c00030e5:	0f 87 6f 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030eb:	83 ec 0c             	sub    esp,0xc
c00030ee:	b9 01 00 00 00       	mov    ecx,0x1
c00030f3:	6a 01                	push   0x1
c00030f5:	89 da                	mov    edx,ebx
c00030f7:	89 f0                	mov    eax,esi
c00030f9:	e8 bf f9 ff ff       	call   c0002abd <change_bitmap>
c00030fe:	83 c4 10             	add    esp,0x10
c0003101:	83 f8 02             	cmp    eax,0x2
c0003104:	74 90                	je     c0003096 <create_chain+0x31>
c0003106:	83 f8 01             	cmp    eax,0x1
c0003109:	0f 84 fc 00 00 00    	je     c000320b <create_chain+0x1a6>
c000310f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003114:	75 09                	jne    c000311f <create_chain+0xba>
c0003116:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000311a:	e9 0c 01 00 00       	jmp    c000322b <create_chain+0x1c6>
c000311f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003123:	0f 85 e7 00 00 00    	jne    c0003210 <create_chain+0x1ab>
c0003129:	8d 57 01             	lea    edx,[edi+0x1]
c000312c:	39 da                	cmp    edx,ebx
c000312e:	0f 84 f7 00 00 00    	je     c000322b <create_chain+0x1c6>
c0003134:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003137:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000313b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000313e:	e9 cd 00 00 00       	jmp    c0003210 <create_chain+0x1ab>
c0003143:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003147:	75 41                	jne    c000318a <create_chain+0x125>
c0003149:	8d 5f 01             	lea    ebx,[edi+0x1]
c000314c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000314f:	77 05                	ja     c0003156 <create_chain+0xf1>
c0003151:	bb 02 00 00 00       	mov    ebx,0x2
c0003156:	89 da                	mov    edx,ebx
c0003158:	89 e8                	mov    eax,ebp
c000315a:	e8 18 fc ff ff       	call   c0002d77 <get_fat>
c000315f:	83 f8 01             	cmp    eax,0x1
c0003162:	0f 84 2e ff ff ff    	je     c0003096 <create_chain+0x31>
c0003168:	83 f8 ff             	cmp    eax,0xffffffff
c000316b:	0f 84 9a 00 00 00    	je     c000320b <create_chain+0x1a6>
c0003171:	85 c0                	test   eax,eax
c0003173:	74 11                	je     c0003186 <create_chain+0x121>
c0003175:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003178:	83 f8 01             	cmp    eax,0x1
c000317b:	76 0d                	jbe    c000318a <create_chain+0x125>
c000317d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003180:	76 08                	jbe    c000318a <create_chain+0x125>
c0003182:	89 c7                	mov    edi,eax
c0003184:	eb 04                	jmp    c000318a <create_chain+0x125>
c0003186:	85 db                	test   ebx,ebx
c0003188:	75 38                	jne    c00031c2 <create_chain+0x15d>
c000318a:	89 fb                	mov    ebx,edi
c000318c:	43                   	inc    ebx
c000318d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003190:	77 0e                	ja     c00031a0 <create_chain+0x13b>
c0003192:	83 ff 01             	cmp    edi,0x1
c0003195:	0f 86 28 ff ff ff    	jbe    c00030c3 <create_chain+0x5e>
c000319b:	bb 02 00 00 00       	mov    ebx,0x2
c00031a0:	89 da                	mov    edx,ebx
c00031a2:	89 e8                	mov    eax,ebp
c00031a4:	e8 ce fb ff ff       	call   c0002d77 <get_fat>
c00031a9:	85 c0                	test   eax,eax
c00031ab:	74 15                	je     c00031c2 <create_chain+0x15d>
c00031ad:	83 f8 01             	cmp    eax,0x1
c00031b0:	0f 84 e0 fe ff ff    	je     c0003096 <create_chain+0x31>
c00031b6:	40                   	inc    eax
c00031b7:	74 52                	je     c000320b <create_chain+0x1a6>
c00031b9:	39 fb                	cmp    ebx,edi
c00031bb:	75 cf                	jne    c000318c <create_chain+0x127>
c00031bd:	e9 01 ff ff ff       	jmp    c00030c3 <create_chain+0x5e>
c00031c2:	83 c9 ff             	or     ecx,0xffffffff
c00031c5:	89 da                	mov    edx,ebx
c00031c7:	89 f0                	mov    eax,esi
c00031c9:	e8 a4 f9 ff ff       	call   c0002b72 <put_fat>
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 32                	jne    c0003204 <create_chain+0x19f>
c00031d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031d7:	74 11                	je     c00031ea <create_chain+0x185>
c00031d9:	89 d9                	mov    ecx,ebx
c00031db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031df:	89 f0                	mov    eax,esi
c00031e1:	e8 8c f9 ff ff       	call   c0002b72 <put_fat>
c00031e6:	85 c0                	test   eax,eax
c00031e8:	75 1a                	jne    c0003204 <create_chain+0x19f>
c00031ea:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031ed:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031f0:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031f3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031f6:	39 d0                	cmp    eax,edx
c00031f8:	77 04                	ja     c00031fe <create_chain+0x199>
c00031fa:	48                   	dec    eax
c00031fb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031fe:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003202:	eb 56                	jmp    c000325a <create_chain+0x1f5>
c0003204:	48                   	dec    eax
c0003205:	0f 85 8b fe ff ff    	jne    c0003096 <create_chain+0x31>
c000320b:	83 cb ff             	or     ebx,0xffffffff
c000320e:	eb 4a                	jmp    c000325a <create_chain+0x1f5>
c0003210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003214:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003217:	41                   	inc    ecx
c0003218:	39 d9                	cmp    ecx,ebx
c000321a:	75 19                	jne    c0003235 <create_chain+0x1d0>
c000321c:	b9 02 00 00 00       	mov    ecx,0x2
c0003221:	85 d2                	test   edx,edx
c0003223:	74 03                	je     c0003228 <create_chain+0x1c3>
c0003225:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003228:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000322b:	85 c0                	test   eax,eax
c000322d:	0f 85 63 fe ff ff    	jne    c0003096 <create_chain+0x31>
c0003233:	eb b5                	jmp    c00031ea <create_chain+0x185>
c0003235:	85 d2                	test   edx,edx
c0003237:	75 07                	jne    c0003240 <create_chain+0x1db>
c0003239:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003240:	89 d9                	mov    ecx,ebx
c0003242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003246:	89 e8                	mov    eax,ebp
c0003248:	e8 bb fa ff ff       	call   c0002d08 <fill_last_frag>
c000324d:	85 c0                	test   eax,eax
c000324f:	75 b3                	jne    c0003204 <create_chain+0x19f>
c0003251:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003258:	eb 90                	jmp    c00031ea <create_chain+0x185>
c000325a:	83 c4 1c             	add    esp,0x1c
c000325d:	89 d8                	mov    eax,ebx
c000325f:	5b                   	pop    ebx
c0003260:	5e                   	pop    esi
c0003261:	5f                   	pop    edi
c0003262:	5d                   	pop    ebp
c0003263:	c3                   	ret    

c0003264 <remove_chain>:
c0003264:	55                   	push   ebp
c0003265:	57                   	push   edi
c0003266:	56                   	push   esi
c0003267:	53                   	push   ebx
c0003268:	83 ec 1c             	sub    esp,0x1c
c000326b:	83 fa 01             	cmp    edx,0x1
c000326e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003272:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003274:	77 0a                	ja     c0003280 <remove_chain+0x1c>
c0003276:	b8 02 00 00 00       	mov    eax,0x2
c000327b:	e9 24 01 00 00       	jmp    c00033a4 <remove_chain+0x140>
c0003280:	89 d6                	mov    esi,edx
c0003282:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003285:	76 ef                	jbe    c0003276 <remove_chain+0x12>
c0003287:	89 c7                	mov    edi,eax
c0003289:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000328e:	75 06                	jne    c0003296 <remove_chain+0x32>
c0003290:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003294:	eb 54                	jmp    c00032ea <remove_chain+0x86>
c0003296:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003299:	75 06                	jne    c00032a1 <remove_chain+0x3d>
c000329b:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000329f:	74 ef                	je     c0003290 <remove_chain+0x2c>
c00032a1:	83 c9 ff             	or     ecx,0xffffffff
c00032a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 c3 f8 ff ff       	call   c0002b72 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 dd                	je     c0003290 <remove_chain+0x2c>
c00032b3:	e9 ec 00 00 00       	jmp    c00033a4 <remove_chain+0x140>
c00032b8:	83 f8 01             	cmp    eax,0x1
c00032bb:	74 b9                	je     c0003276 <remove_chain+0x12>
c00032bd:	83 f8 ff             	cmp    eax,0xffffffff
c00032c0:	74 6d                	je     c000332f <remove_chain+0xcb>
c00032c2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c5:	75 6f                	jne    c0003336 <remove_chain+0xd2>
c00032c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ca:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032cd:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032d0:	39 d0                	cmp    eax,edx
c00032d2:	73 08                	jae    c00032dc <remove_chain+0x78>
c00032d4:	40                   	inc    eax
c00032d5:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032dc:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032df:	39 e9                	cmp    ecx,ebp
c00032e1:	75 64                	jne    c0003347 <remove_chain+0xe3>
c00032e3:	89 ee                	mov    esi,ebp
c00032e5:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032e8:	76 0f                	jbe    c00032f9 <remove_chain+0x95>
c00032ea:	89 f2                	mov    edx,esi
c00032ec:	89 f8                	mov    eax,edi
c00032ee:	e8 84 fa ff ff       	call   c0002d77 <get_fat>
c00032f3:	89 c5                	mov    ebp,eax
c00032f5:	85 c0                	test   eax,eax
c00032f7:	75 bf                	jne    c00032b8 <remove_chain+0x54>
c00032f9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fc:	0f 85 a0 00 00 00    	jne    c00033a2 <remove_chain+0x13e>
c0003302:	eb 6c                	jmp    c0003370 <remove_chain+0x10c>
c0003304:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003307:	84 c0                	test   al,al
c0003309:	75 7d                	jne    c0003388 <remove_chain+0x124>
c000330b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000330e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003312:	0f 84 86 00 00 00    	je     c000339e <remove_chain+0x13a>
c0003318:	89 da                	mov    edx,ebx
c000331a:	89 f8                	mov    eax,edi
c000331c:	e8 56 fa ff ff       	call   c0002d77 <get_fat>
c0003321:	83 f8 01             	cmp    eax,0x1
c0003324:	0f 86 4c ff ff ff    	jbe    c0003276 <remove_chain+0x12>
c000332a:	83 f8 ff             	cmp    eax,0xffffffff
c000332d:	75 4e                	jne    c000337d <remove_chain+0x119>
c000332f:	b8 01 00 00 00       	mov    eax,0x1
c0003334:	eb 6e                	jmp    c00033a4 <remove_chain+0x140>
c0003336:	31 c9                	xor    ecx,ecx
c0003338:	89 f2                	mov    edx,esi
c000333a:	89 d8                	mov    eax,ebx
c000333c:	e8 31 f8 ff ff       	call   c0002b72 <put_fat>
c0003341:	85 c0                	test   eax,eax
c0003343:	74 82                	je     c00032c7 <remove_chain+0x63>
c0003345:	eb 5d                	jmp    c00033a4 <remove_chain+0x140>
c0003347:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000334a:	75 1b                	jne    c0003367 <remove_chain+0x103>
c000334c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003350:	89 d8                	mov    eax,ebx
c0003352:	83 ec 0c             	sub    esp,0xc
c0003355:	6a 00                	push   0x0
c0003357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000335b:	e8 5d f7 ff ff       	call   c0002abd <change_bitmap>
c0003360:	83 c4 10             	add    esp,0x10
c0003363:	85 c0                	test   eax,eax
c0003365:	75 3d                	jne    c00033a4 <remove_chain+0x140>
c0003367:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000336b:	e9 73 ff ff ff       	jmp    c00032e3 <remove_chain+0x7f>
c0003370:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003375:	75 8d                	jne    c0003304 <remove_chain+0xa0>
c0003377:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000337b:	eb 25                	jmp    c00033a2 <remove_chain+0x13e>
c000337d:	8d 53 01             	lea    edx,[ebx+0x1]
c0003380:	89 c3                	mov    ebx,eax
c0003382:	39 c2                	cmp    edx,eax
c0003384:	74 88                	je     c000330e <remove_chain+0xaa>
c0003386:	eb 1a                	jmp    c00033a2 <remove_chain+0x13e>
c0003388:	3c 03                	cmp    al,0x3
c000338a:	75 16                	jne    c00033a2 <remove_chain+0x13e>
c000338c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000338f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003393:	77 0d                	ja     c00033a2 <remove_chain+0x13e>
c0003395:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003398:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000339c:	72 04                	jb     c00033a2 <remove_chain+0x13e>
c000339e:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033a2:	31 c0                	xor    eax,eax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <dir_clear>:
c00033ac:	55                   	push   ebp
c00033ad:	57                   	push   edi
c00033ae:	56                   	push   esi
c00033af:	89 c6                	mov    esi,eax
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033b9:	e8 9d ed ff ff       	call   c000215b <sync_window>
c00033be:	85 c0                	test   eax,eax
c00033c0:	0f 85 de 00 00 00    	jne    c00034a4 <dir_clear+0xf8>
c00033c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ca:	89 f0                	mov    eax,esi
c00033cc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033cf:	e8 d6 e8 ff ff       	call   c0001caa <clst2sect>
c00033d4:	b9 00 02 00 00       	mov    ecx,0x200
c00033d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033e1:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033e4:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033e7:	89 e8                	mov    eax,ebp
c00033e9:	31 d2                	xor    edx,edx
c00033eb:	e8 b5 e6 ff ff       	call   c0001aa5 <mem_set>
c00033f0:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033f4:	c1 e3 09             	shl    ebx,0x9
c00033f7:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033fd:	76 1f                	jbe    c000341e <dir_clear+0x72>
c00033ff:	bb 00 80 00 00       	mov    ebx,0x8000
c0003404:	eb 18                	jmp    c000341e <dir_clear+0x72>
c0003406:	83 ec 0c             	sub    esp,0xc
c0003409:	53                   	push   ebx
c000340a:	e8 35 4e 00 00       	call   c0008244 <ff_memalloc>
c000340f:	83 c4 10             	add    esp,0x10
c0003412:	89 c7                	mov    edi,eax
c0003414:	85 c0                	test   eax,eax
c0003416:	0f 85 8f 00 00 00    	jne    c00034ab <dir_clear+0xff>
c000341c:	d1 eb                	shr    ebx,1
c000341e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003424:	77 e0                	ja     c0003406 <dir_clear+0x5a>
c0003426:	31 db                	xor    ebx,ebx
c0003428:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000342c:	39 d8                	cmp    eax,ebx
c000342e:	76 66                	jbe    c0003496 <dir_clear+0xea>
c0003430:	83 ec 0c             	sub    esp,0xc
c0003433:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003437:	6a 01                	push   0x1
c0003439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000343d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003441:	55                   	push   ebp
c0003442:	50                   	push   eax
c0003443:	e8 94 e5 ff ff       	call   c00019dc <disk_write>
c0003448:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000344d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003452:	83 c4 20             	add    esp,0x20
c0003455:	85 c0                	test   eax,eax
c0003457:	75 3d                	jne    c0003496 <dir_clear+0xea>
c0003459:	43                   	inc    ebx
c000345a:	eb cc                	jmp    c0003428 <dir_clear+0x7c>
c000345c:	83 ec 0c             	sub    esp,0xc
c000345f:	31 d2                	xor    edx,edx
c0003461:	55                   	push   ebp
c0003462:	89 d8                	mov    eax,ebx
c0003464:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003468:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000346c:	52                   	push   edx
c000346d:	50                   	push   eax
c000346e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003472:	57                   	push   edi
c0003473:	50                   	push   eax
c0003474:	e8 63 e5 ff ff       	call   c00019dc <disk_write>
c0003479:	83 c4 20             	add    esp,0x20
c000347c:	85 c0                	test   eax,eax
c000347e:	75 0a                	jne    c000348a <dir_clear+0xde>
c0003480:	01 eb                	add    ebx,ebp
c0003482:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003486:	39 d8                	cmp    eax,ebx
c0003488:	77 d2                	ja     c000345c <dir_clear+0xb0>
c000348a:	83 ec 0c             	sub    esp,0xc
c000348d:	57                   	push   edi
c000348e:	e8 c7 4d 00 00       	call   c000825a <ff_memfree>
c0003493:	83 c4 10             	add    esp,0x10
c0003496:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000349a:	39 d8                	cmp    eax,ebx
c000349c:	0f 95 c0             	setne  al
c000349f:	0f b6 c0             	movzx  eax,al
c00034a2:	eb 19                	jmp    c00034bd <dir_clear+0x111>
c00034a4:	b8 01 00 00 00       	mov    eax,0x1
c00034a9:	eb 12                	jmp    c00034bd <dir_clear+0x111>
c00034ab:	89 d9                	mov    ecx,ebx
c00034ad:	31 d2                	xor    edx,edx
c00034af:	c1 eb 09             	shr    ebx,0x9
c00034b2:	e8 ee e5 ff ff       	call   c0001aa5 <mem_set>
c00034b7:	89 dd                	mov    ebp,ebx
c00034b9:	31 db                	xor    ebx,ebx
c00034bb:	eb c5                	jmp    c0003482 <dir_clear+0xd6>
c00034bd:	83 c4 1c             	add    esp,0x1c
c00034c0:	5b                   	pop    ebx
c00034c1:	5e                   	pop    esi
c00034c2:	5f                   	pop    edi
c00034c3:	5d                   	pop    ebp
c00034c4:	c3                   	ret    

c00034c5 <dir_next>:
c00034c5:	55                   	push   ebp
c00034c6:	57                   	push   edi
c00034c7:	56                   	push   esi
c00034c8:	53                   	push   ebx
c00034c9:	89 c3                	mov    ebx,eax
c00034cb:	83 ec 1c             	sub    esp,0x1c
c00034ce:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034d7:	8d 78 20             	lea    edi,[eax+0x20]
c00034da:	31 c0                	xor    eax,eax
c00034dc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034e0:	0f 94 c0             	sete   al
c00034e3:	48                   	dec    eax
c00034e4:	25 00 00 20 f0       	and    eax,0xf0200000
c00034e9:	05 00 00 00 10       	add    eax,0x10000000
c00034ee:	39 f8                	cmp    eax,edi
c00034f0:	77 0e                	ja     c0003500 <dir_next+0x3b>
c00034f2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034f9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003500:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003503:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003506:	b8 04 00 00 00       	mov    eax,0x4
c000350b:	89 ce                	mov    esi,ecx
c000350d:	09 d6                	or     esi,edx
c000350f:	0f 84 da 00 00 00    	je     c00035ef <dir_next+0x12a>
c0003515:	89 f8                	mov    eax,edi
c0003517:	25 ff 01 00 00       	and    eax,0x1ff
c000351c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003520:	0f 85 b9 00 00 00    	jne    c00035df <dir_next+0x11a>
c0003526:	83 c2 01             	add    edx,0x1
c0003529:	83 d1 00             	adc    ecx,0x0
c000352c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000352f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003532:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003535:	85 d2                	test   edx,edx
c0003537:	75 29                	jne    c0003562 <dir_next+0x9d>
c0003539:	89 fa                	mov    edx,edi
c000353b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000353f:	c1 ea 05             	shr    edx,0x5
c0003542:	39 c2                	cmp    edx,eax
c0003544:	0f 82 95 00 00 00    	jb     c00035df <dir_next+0x11a>
c000354a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003551:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003558:	b8 04 00 00 00       	mov    eax,0x4
c000355d:	e9 8d 00 00 00       	jmp    c00035ef <dir_next+0x12a>
c0003562:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003566:	89 f9                	mov    ecx,edi
c0003568:	48                   	dec    eax
c0003569:	c1 e9 09             	shr    ecx,0x9
c000356c:	85 c8                	test   eax,ecx
c000356e:	75 6f                	jne    c00035df <dir_next+0x11a>
c0003570:	89 d8                	mov    eax,ebx
c0003572:	e8 00 f8 ff ff       	call   c0002d77 <get_fat>
c0003577:	89 c6                	mov    esi,eax
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	77 07                	ja     c0003585 <dir_next+0xc0>
c000357e:	b8 02 00 00 00       	mov    eax,0x2
c0003583:	eb 6a                	jmp    c00035ef <dir_next+0x12a>
c0003585:	83 f8 ff             	cmp    eax,0xffffffff
c0003588:	75 07                	jne    c0003591 <dir_next+0xcc>
c000358a:	b8 01 00 00 00       	mov    eax,0x1
c000358f:	eb 5e                	jmp    c00035ef <dir_next+0x12a>
c0003591:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003594:	77 37                	ja     c00035cd <dir_next+0x108>
c0003596:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000359b:	74 ad                	je     c000354a <dir_next+0x85>
c000359d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	e8 be fa ff ff       	call   c0003065 <create_chain>
c00035a7:	89 c6                	mov    esi,eax
c00035a9:	b8 07 00 00 00       	mov    eax,0x7
c00035ae:	85 f6                	test   esi,esi
c00035b0:	74 3d                	je     c00035ef <dir_next+0x12a>
c00035b2:	83 fe 01             	cmp    esi,0x1
c00035b5:	74 c7                	je     c000357e <dir_next+0xb9>
c00035b7:	83 fe ff             	cmp    esi,0xffffffff
c00035ba:	74 ce                	je     c000358a <dir_next+0xc5>
c00035bc:	89 f2                	mov    edx,esi
c00035be:	89 e8                	mov    eax,ebp
c00035c0:	e8 e7 fd ff ff       	call   c00033ac <dir_clear>
c00035c5:	85 c0                	test   eax,eax
c00035c7:	75 c1                	jne    c000358a <dir_next+0xc5>
c00035c9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035cd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	89 e8                	mov    eax,ebp
c00035d4:	e8 d1 e6 ff ff       	call   c0001caa <clst2sect>
c00035d9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035e3:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035e6:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035ea:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035ed:	31 c0                	xor    eax,eax
c00035ef:	83 c4 1c             	add    esp,0x1c
c00035f2:	5b                   	pop    ebx
c00035f3:	5e                   	pop    esi
c00035f4:	5f                   	pop    edi
c00035f5:	5d                   	pop    ebp
c00035f6:	c3                   	ret    

c00035f7 <load_xdir>:
c00035f7:	55                   	push   ebp
c00035f8:	57                   	push   edi
c00035f9:	56                   	push   esi
c00035fa:	89 c6                	mov    esi,eax
c00035fc:	53                   	push   ebx
c00035fd:	83 ec 1c             	sub    esp,0x1c
c0003600:	8b 00                	mov    eax,DWORD PTR [eax]
c0003602:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003605:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003608:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000360b:	e8 df eb ff ff       	call   c00021ef <move_window>
c0003610:	89 c3                	mov    ebx,eax
c0003612:	85 c0                	test   eax,eax
c0003614:	0f 85 0c 01 00 00    	jne    c0003726 <load_xdir+0x12f>
c000361a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000361d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003620:	0f 85 fb 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c0003626:	89 f8                	mov    eax,edi
c0003628:	b9 20 00 00 00       	mov    ecx,0x20
c000362d:	e8 5e e4 ff ff       	call   c0001a90 <mem_cpy>
c0003632:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003636:	40                   	inc    eax
c0003637:	c1 e0 05             	shl    eax,0x5
c000363a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000363e:	83 e8 60             	sub    eax,0x60
c0003641:	3d 00 02 00 00       	cmp    eax,0x200
c0003646:	0f 87 d5 00 00 00    	ja     c0003721 <load_xdir+0x12a>
c000364c:	31 d2                	xor    edx,edx
c000364e:	89 f0                	mov    eax,esi
c0003650:	e8 70 fe ff ff       	call   c00034c5 <dir_next>
c0003655:	89 c3                	mov    ebx,eax
c0003657:	83 f8 04             	cmp    eax,0x4
c000365a:	0f 84 c1 00 00 00    	je     c0003721 <load_xdir+0x12a>
c0003660:	85 c0                	test   eax,eax
c0003662:	0f 85 be 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c0003668:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000366b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000366e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003670:	e8 7a eb ff ff       	call   c00021ef <move_window>
c0003675:	89 c3                	mov    ebx,eax
c0003677:	85 c0                	test   eax,eax
c0003679:	0f 85 a7 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c000367f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003682:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003685:	0f 85 96 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c000368b:	8d 47 20             	lea    eax,[edi+0x20]
c000368e:	b9 20 00 00 00       	mov    ecx,0x20
c0003693:	e8 f8 e3 ff ff       	call   c0001a90 <mem_cpy>
c0003698:	31 d2                	xor    edx,edx
c000369a:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000369e:	b9 0f 00 00 00       	mov    ecx,0xf
c00036a3:	83 c0 2c             	add    eax,0x2c
c00036a6:	f7 f1                	div    ecx
c00036a8:	c1 e0 05             	shl    eax,0x5
c00036ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036af:	77 70                	ja     c0003721 <load_xdir+0x12a>
c00036b1:	bd 40 00 00 00       	mov    ebp,0x40
c00036b6:	31 d2                	xor    edx,edx
c00036b8:	89 f0                	mov    eax,esi
c00036ba:	e8 06 fe ff ff       	call   c00034c5 <dir_next>
c00036bf:	89 c3                	mov    ebx,eax
c00036c1:	83 f8 04             	cmp    eax,0x4
c00036c4:	74 5b                	je     c0003721 <load_xdir+0x12a>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 5c                	jne    c0003726 <load_xdir+0x12f>
c00036ca:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036cd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036d2:	e8 18 eb ff ff       	call   c00021ef <move_window>
c00036d7:	89 c3                	mov    ebx,eax
c00036d9:	85 c0                	test   eax,eax
c00036db:	75 49                	jne    c0003726 <load_xdir+0x12f>
c00036dd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036e0:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036e3:	75 3c                	jne    c0003721 <load_xdir+0x12a>
c00036e5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036eb:	77 0d                	ja     c00036fa <load_xdir+0x103>
c00036ed:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036f0:	b9 20 00 00 00       	mov    ecx,0x20
c00036f5:	e8 96 e3 ff ff       	call   c0001a90 <mem_cpy>
c00036fa:	83 c5 20             	add    ebp,0x20
c00036fd:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003701:	77 b3                	ja     c00036b6 <load_xdir+0xbf>
c0003703:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003709:	77 1b                	ja     c0003726 <load_xdir+0x12f>
c000370b:	89 f8                	mov    eax,edi
c000370d:	e8 cd e7 ff ff       	call   c0001edf <xdir_sum>
c0003712:	89 c1                	mov    ecx,eax
c0003714:	8d 47 02             	lea    eax,[edi+0x2]
c0003717:	e8 f5 e2 ff ff       	call   c0001a11 <ld_word>
c000371c:	66 39 c1             	cmp    cx,ax
c000371f:	74 05                	je     c0003726 <load_xdir+0x12f>
c0003721:	bb 02 00 00 00       	mov    ebx,0x2
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 d8                	mov    eax,ebx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <load_obj_xdir>:
c0003730:	53                   	push   ebx
c0003731:	89 c3                	mov    ebx,eax
c0003733:	83 ec 08             	sub    esp,0x8
c0003736:	8b 02                	mov    eax,DWORD PTR [edx]
c0003738:	89 03                	mov    DWORD PTR [ebx],eax
c000373a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000373d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003740:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003743:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003746:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003749:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003750:	30 c0                	xor    al,al
c0003752:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003759:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000375c:	89 d8                	mov    eax,ebx
c000375e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003761:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003764:	e8 04 f8 ff ff       	call   c0002f6d <dir_sdi>
c0003769:	85 c0                	test   eax,eax
c000376b:	75 0b                	jne    c0003778 <load_obj_xdir+0x48>
c000376d:	89 d8                	mov    eax,ebx
c000376f:	83 c4 08             	add    esp,0x8
c0003772:	5b                   	pop    ebx
c0003773:	e9 7f fe ff ff       	jmp    c00035f7 <load_xdir>
c0003778:	83 c4 08             	add    esp,0x8
c000377b:	5b                   	pop    ebx
c000377c:	c3                   	ret    

c000377d <dir_read>:
c000377d:	55                   	push   ebp
c000377e:	bd 04 00 00 00       	mov    ebp,0x4
c0003783:	57                   	push   edi
c0003784:	56                   	push   esi
c0003785:	be ff ff ff ff       	mov    esi,0xffffffff
c000378a:	53                   	push   ebx
c000378b:	89 c3                	mov    ebx,eax
c000378d:	83 ec 1c             	sub    esp,0x1c
c0003790:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003794:	8b 38                	mov    edi,DWORD PTR [eax]
c0003796:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000379b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a1:	89 c8                	mov    eax,ecx
c00037a3:	09 d0                	or     eax,edx
c00037a5:	0f 84 25 01 00 00    	je     c00038d0 <dir_read+0x153>
c00037ab:	89 f8                	mov    eax,edi
c00037ad:	e8 3d ea ff ff       	call   c00021ef <move_window>
c00037b2:	89 c5                	mov    ebp,eax
c00037b4:	85 c0                	test   eax,eax
c00037b6:	0f 85 23 01 00 00    	jne    c00038df <dir_read+0x162>
c00037bc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037bf:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037c1:	84 c9                	test   cl,cl
c00037c3:	0f 84 11 01 00 00    	je     c00038da <dir_read+0x15d>
c00037c9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037cc:	75 48                	jne    c0003816 <dir_read+0x99>
c00037ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037d3:	74 10                	je     c00037e5 <dir_read+0x68>
c00037d5:	80 f9 83             	cmp    cl,0x83
c00037d8:	0f 85 dd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037de:	31 ed                	xor    ebp,ebp
c00037e0:	e9 08 01 00 00       	jmp    c00038ed <dir_read+0x170>
c00037e5:	80 f9 85             	cmp    cl,0x85
c00037e8:	0f 85 cd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037f1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037f4:	89 d8                	mov    eax,ebx
c00037f6:	e8 fc fd ff ff       	call   c00035f7 <load_xdir>
c00037fb:	89 c5                	mov    ebp,eax
c00037fd:	85 c0                	test   eax,eax
c00037ff:	0f 85 da 00 00 00    	jne    c00038df <dir_read+0x162>
c0003805:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003808:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003811:	e9 d7 00 00 00       	jmp    c00038ed <dir_read+0x170>
c0003816:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003819:	83 e0 3f             	and    eax,0x3f
c000381c:	80 f9 2e             	cmp    cl,0x2e
c000381f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003823:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003826:	0f 84 8a 00 00 00    	je     c00038b6 <dir_read+0x139>
c000382c:	80 f9 e5             	cmp    cl,0xe5
c000382f:	0f 84 81 00 00 00    	je     c00038b6 <dir_read+0x139>
c0003835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003839:	83 e0 1f             	and    eax,0x1f
c000383c:	83 f8 08             	cmp    eax,0x8
c000383f:	0f 94 c0             	sete   al
c0003842:	0f b6 c0             	movzx  eax,al
c0003845:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003849:	75 6b                	jne    c00038b6 <dir_read+0x139>
c000384b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003850:	75 44                	jne    c0003896 <dir_read+0x119>
c0003852:	f6 c1 40             	test   cl,0x40
c0003855:	74 12                	je     c0003869 <dir_read+0xec>
c0003857:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000385a:	83 e1 bf             	and    ecx,0xffffffbf
c000385d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003861:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003864:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003867:	eb 06                	jmp    c000386f <dir_read+0xf2>
c0003869:	89 f0                	mov    eax,esi
c000386b:	38 c8                	cmp    al,cl
c000386d:	75 47                	jne    c00038b6 <dir_read+0x139>
c000386f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003873:	be ff ff ff ff       	mov    esi,0xffffffff
c0003878:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000387b:	75 3e                	jne    c00038bb <dir_read+0x13e>
c000387d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003881:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003884:	e8 8a e4 ff ff       	call   c0001d13 <pick_lfn>
c0003889:	85 c0                	test   eax,eax
c000388b:	74 2e                	je     c00038bb <dir_read+0x13e>
c000388d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003891:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003894:	eb 25                	jmp    c00038bb <dir_read+0x13e>
c0003896:	89 f0                	mov    eax,esi
c0003898:	84 c0                	test   al,al
c000389a:	75 11                	jne    c00038ad <dir_read+0x130>
c000389c:	89 d0                	mov    eax,edx
c000389e:	e8 2a e6 ff ff       	call   c0001ecd <sum_sfn>
c00038a3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038a7:	0f 84 31 ff ff ff    	je     c00037de <dir_read+0x61>
c00038ad:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038b4:	eb 37                	jmp    c00038ed <dir_read+0x170>
c00038b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038bb:	31 d2                	xor    edx,edx
c00038bd:	89 d8                	mov    eax,ebx
c00038bf:	e8 01 fc ff ff       	call   c00034c5 <dir_next>
c00038c4:	89 c5                	mov    ebp,eax
c00038c6:	85 c0                	test   eax,eax
c00038c8:	0f 84 cd fe ff ff    	je     c000379b <dir_read+0x1e>
c00038ce:	eb 0f                	jmp    c00038df <dir_read+0x162>
c00038d0:	85 ed                	test   ebp,ebp
c00038d2:	0f 84 06 ff ff ff    	je     c00037de <dir_read+0x61>
c00038d8:	eb 05                	jmp    c00038df <dir_read+0x162>
c00038da:	bd 04 00 00 00       	mov    ebp,0x4
c00038df:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038ed:	83 c4 1c             	add    esp,0x1c
c00038f0:	89 e8                	mov    eax,ebp
c00038f2:	5b                   	pop    ebx
c00038f3:	5e                   	pop    esi
c00038f4:	5f                   	pop    edi
c00038f5:	5d                   	pop    ebp
c00038f6:	c3                   	ret    

c00038f7 <dir_alloc>:
c00038f7:	55                   	push   ebp
c00038f8:	89 d5                	mov    ebp,edx
c00038fa:	57                   	push   edi
c00038fb:	31 d2                	xor    edx,edx
c00038fd:	56                   	push   esi
c00038fe:	53                   	push   ebx
c00038ff:	89 c3                	mov    ebx,eax
c0003901:	83 ec 0c             	sub    esp,0xc
c0003904:	8b 38                	mov    edi,DWORD PTR [eax]
c0003906:	e8 62 f6 ff ff       	call   c0002f6d <dir_sdi>
c000390b:	85 c0                	test   eax,eax
c000390d:	75 4e                	jne    c000395d <dir_alloc+0x66>
c000390f:	31 f6                	xor    esi,esi
c0003911:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003914:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003917:	89 f8                	mov    eax,edi
c0003919:	e8 d1 e8 ff ff       	call   c00021ef <move_window>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 3b                	jne    c000395d <dir_alloc+0x66>
c0003922:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003925:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003928:	8a 12                	mov    dl,BYTE PTR [edx]
c000392a:	75 07                	jne    c0003933 <dir_alloc+0x3c>
c000392c:	f7 d2                	not    edx
c000392e:	c0 ea 07             	shr    dl,0x7
c0003931:	eb 0d                	jmp    c0003940 <dir_alloc+0x49>
c0003933:	84 d2                	test   dl,dl
c0003935:	0f 94 c1             	sete   cl
c0003938:	80 fa e5             	cmp    dl,0xe5
c000393b:	0f 94 c2             	sete   dl
c000393e:	09 ca                	or     edx,ecx
c0003940:	84 d2                	test   dl,dl
c0003942:	74 07                	je     c000394b <dir_alloc+0x54>
c0003944:	46                   	inc    esi
c0003945:	39 ee                	cmp    esi,ebp
c0003947:	75 04                	jne    c000394d <dir_alloc+0x56>
c0003949:	eb 1c                	jmp    c0003967 <dir_alloc+0x70>
c000394b:	31 f6                	xor    esi,esi
c000394d:	ba 01 00 00 00       	mov    edx,0x1
c0003952:	89 d8                	mov    eax,ebx
c0003954:	e8 6c fb ff ff       	call   c00034c5 <dir_next>
c0003959:	85 c0                	test   eax,eax
c000395b:	74 b4                	je     c0003911 <dir_alloc+0x1a>
c000395d:	83 f8 04             	cmp    eax,0x4
c0003960:	75 05                	jne    c0003967 <dir_alloc+0x70>
c0003962:	b8 07 00 00 00       	mov    eax,0x7
c0003967:	83 c4 0c             	add    esp,0xc
c000396a:	5b                   	pop    ebx
c000396b:	5e                   	pop    esi
c000396c:	5f                   	pop    edi
c000396d:	5d                   	pop    ebp
c000396e:	c3                   	ret    

c000396f <store_xdir>:
c000396f:	55                   	push   ebp
c0003970:	57                   	push   edi
c0003971:	89 c7                	mov    edi,eax
c0003973:	56                   	push   esi
c0003974:	53                   	push   ebx
c0003975:	83 ec 0c             	sub    esp,0xc
c0003978:	8b 00                	mov    eax,DWORD PTR [eax]
c000397a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000397d:	89 e8                	mov    eax,ebp
c000397f:	e8 5b e5 ff ff       	call   c0001edf <xdir_sum>
c0003984:	0f b7 d0             	movzx  edx,ax
c0003987:	8d 45 02             	lea    eax,[ebp+0x2]
c000398a:	e8 f4 e0 ff ff       	call   c0001a83 <st_word>
c000398f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003993:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003996:	89 f8                	mov    eax,edi
c0003998:	e8 d0 f5 ff ff       	call   c0002f6d <dir_sdi>
c000399d:	89 c6                	mov    esi,eax
c000399f:	85 f6                	test   esi,esi
c00039a1:	75 3d                	jne    c00039e0 <store_xdir+0x71>
c00039a3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039a6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ab:	e8 3f e8 ff ff       	call   c00021ef <move_window>
c00039b0:	89 c6                	mov    esi,eax
c00039b2:	85 c0                	test   eax,eax
c00039b4:	75 2a                	jne    c00039e0 <store_xdir+0x71>
c00039b6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039b9:	b9 20 00 00 00       	mov    ecx,0x20
c00039be:	89 ea                	mov    edx,ebp
c00039c0:	e8 cb e0 ff ff       	call   c0001a90 <mem_cpy>
c00039c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039c7:	85 db                	test   ebx,ebx
c00039c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039cd:	74 11                	je     c00039e0 <store_xdir+0x71>
c00039cf:	31 d2                	xor    edx,edx
c00039d1:	89 f8                	mov    eax,edi
c00039d3:	83 c5 20             	add    ebp,0x20
c00039d6:	e8 ea fa ff ff       	call   c00034c5 <dir_next>
c00039db:	4b                   	dec    ebx
c00039dc:	89 c6                	mov    esi,eax
c00039de:	eb bf                	jmp    c000399f <store_xdir+0x30>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	83 fe 02             	cmp    esi,0x2
c00039e5:	76 05                	jbe    c00039ec <store_xdir+0x7d>
c00039e7:	b8 02 00 00 00       	mov    eax,0x2
c00039ec:	83 c4 0c             	add    esp,0xc
c00039ef:	5b                   	pop    ebx
c00039f0:	5e                   	pop    esi
c00039f1:	5f                   	pop    edi
c00039f2:	5d                   	pop    ebp
c00039f3:	c3                   	ret    

c00039f4 <dir_remove>:
c00039f4:	57                   	push   edi
c00039f5:	56                   	push   esi
c00039f6:	53                   	push   ebx
c00039f7:	89 c3                	mov    ebx,eax
c00039f9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fe:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a01:	83 fa ff             	cmp    edx,0xffffffff
c0003a04:	74 09                	je     c0003a0f <dir_remove+0x1b>
c0003a06:	e8 62 f5 ff ff       	call   c0002f6d <dir_sdi>
c0003a0b:	85 c0                	test   eax,eax
c0003a0d:	75 41                	jne    c0003a50 <dir_remove+0x5c>
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 f0                	mov    eax,esi
c0003a17:	e8 d3 e7 ff ff       	call   c00021ef <move_window>
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	75 26                	jne    c0003a46 <dir_remove+0x52>
c0003a20:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a23:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a26:	75 05                	jne    c0003a2d <dir_remove+0x39>
c0003a28:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a2b:	eb 03                	jmp    c0003a30 <dir_remove+0x3c>
c0003a2d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a30:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a34:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a37:	73 17                	jae    c0003a50 <dir_remove+0x5c>
c0003a39:	31 d2                	xor    edx,edx
c0003a3b:	89 d8                	mov    eax,ebx
c0003a3d:	e8 83 fa ff ff       	call   c00034c5 <dir_next>
c0003a42:	85 c0                	test   eax,eax
c0003a44:	74 c9                	je     c0003a0f <dir_remove+0x1b>
c0003a46:	83 f8 04             	cmp    eax,0x4
c0003a49:	75 05                	jne    c0003a50 <dir_remove+0x5c>
c0003a4b:	b8 02 00 00 00       	mov    eax,0x2
c0003a50:	5b                   	pop    ebx
c0003a51:	5e                   	pop    esi
c0003a52:	5f                   	pop    edi
c0003a53:	c3                   	ret    

c0003a54 <create_name>:
c0003a54:	55                   	push   ebp
c0003a55:	89 d5                	mov    ebp,edx
c0003a57:	57                   	push   edi
c0003a58:	89 c7                	mov    edi,eax
c0003a5a:	56                   	push   esi
c0003a5b:	31 f6                	xor    esi,esi
c0003a5d:	53                   	push   ebx
c0003a5e:	83 ec 3c             	sub    esp,0x3c
c0003a61:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a63:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a67:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a70:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a74:	e8 72 e0 ff ff       	call   c0001aeb <tchar2uni>
c0003a79:	89 c3                	mov    ebx,eax
c0003a7b:	83 f8 ff             	cmp    eax,0xffffffff
c0003a7e:	75 0a                	jne    c0003a8a <create_name+0x36>
c0003a80:	b8 06 00 00 00       	mov    eax,0x6
c0003a85:	e9 9e 02 00 00       	jmp    c0003d28 <create_name+0x2d4>
c0003a8a:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a8f:	76 0c                	jbe    c0003a9d <create_name+0x49>
c0003a91:	c1 e8 10             	shr    eax,0x10
c0003a94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a98:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a9c:	46                   	inc    esi
c0003a9d:	66 83 fb 1f          	cmp    bx,0x1f
c0003aa1:	76 4f                	jbe    c0003af2 <create_name+0x9e>
c0003aa3:	66 83 fb 5c          	cmp    bx,0x5c
c0003aa7:	74 35                	je     c0003ade <create_name+0x8a>
c0003aa9:	66 83 fb 2f          	cmp    bx,0x2f
c0003aad:	74 2f                	je     c0003ade <create_name+0x8a>
c0003aaf:	66 83 fb 7f          	cmp    bx,0x7f
c0003ab3:	77 11                	ja     c0003ac6 <create_name+0x72>
c0003ab5:	0f b7 d3             	movzx  edx,bx
c0003ab8:	b8 12 7e 02 c0       	mov    eax,0xc0027e12
c0003abd:	e8 11 e0 ff ff       	call   c0001ad3 <chk_chr>
c0003ac2:	85 c0                	test   eax,eax
c0003ac4:	75 ba                	jne    c0003a80 <create_name+0x2c>
c0003ac6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003acc:	77 b2                	ja     c0003a80 <create_name+0x2c>
c0003ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ad6:	46                   	inc    esi
c0003ad7:	eb 97                	jmp    c0003a70 <create_name+0x1c>
c0003ad9:	40                   	inc    eax
c0003ada:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ae4:	80 fa 2f             	cmp    dl,0x2f
c0003ae7:	74 f0                	je     c0003ad9 <create_name+0x85>
c0003ae9:	80 fa 5c             	cmp    dl,0x5c
c0003aec:	74 eb                	je     c0003ad9 <create_name+0x85>
c0003aee:	31 db                	xor    ebx,ebx
c0003af0:	eb 02                	jmp    c0003af4 <create_name+0xa0>
c0003af2:	b3 04                	mov    bl,0x4
c0003af4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003af8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003afb:	85 f6                	test   esi,esi
c0003afd:	74 18                	je     c0003b17 <create_name+0xc3>
c0003aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b03:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b08:	66 83 f8 20          	cmp    ax,0x20
c0003b0c:	74 06                	je     c0003b14 <create_name+0xc0>
c0003b0e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b12:	75 03                	jne    c0003b17 <create_name+0xc3>
c0003b14:	4e                   	dec    esi
c0003b15:	eb e4                	jmp    c0003afb <create_name+0xa7>
c0003b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1b:	31 ed                	xor    ebp,ebp
c0003b1d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b23:	85 f6                	test   esi,esi
c0003b25:	0f 84 55 ff ff ff    	je     c0003a80 <create_name+0x2c>
c0003b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b32:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b36:	66 83 f8 20          	cmp    ax,0x20
c0003b3a:	75 04                	jne    c0003b40 <create_name+0xec>
c0003b3c:	89 d5                	mov    ebp,edx
c0003b3e:	eb eb                	jmp    c0003b2b <create_name+0xd7>
c0003b40:	85 ed                	test   ebp,ebp
c0003b42:	75 06                	jne    c0003b4a <create_name+0xf6>
c0003b44:	66 83 f8 2e          	cmp    ax,0x2e
c0003b48:	75 08                	jne    c0003b52 <create_name+0xfe>
c0003b4a:	83 cb 03             	or     ebx,0x3
c0003b4d:	eb 03                	jmp    c0003b52 <create_name+0xfe>
c0003b4f:	4e                   	dec    esi
c0003b50:	74 0c                	je     c0003b5e <create_name+0x10a>
c0003b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b56:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b5c:	75 f1                	jne    c0003b4f <create_name+0xfb>
c0003b5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b63:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b66:	ba 20 00 00 00       	mov    edx,0x20
c0003b6b:	e8 35 df ff ff       	call   c0001aa5 <mem_set>
c0003b70:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b78:	31 c9                	xor    ecx,ecx
c0003b7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b8e:	66 85 ed             	test   bp,bp
c0003b91:	0f 84 30 01 00 00    	je     c0003cc7 <create_name+0x273>
c0003b97:	66 83 fd 20          	cmp    bp,0x20
c0003b9b:	74 10                	je     c0003bad <create_name+0x159>
c0003b9d:	66 83 fd 2e          	cmp    bp,0x2e
c0003ba1:	75 13                	jne    c0003bb6 <create_name+0x162>
c0003ba3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ba7:	0f 84 6b 01 00 00    	je     c0003d18 <create_name+0x2c4>
c0003bad:	83 cb 03             	or     ebx,0x3
c0003bb0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bb4:	eb c9                	jmp    c0003b7f <create_name+0x12b>
c0003bb6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bba:	73 0b                	jae    c0003bc7 <create_name+0x173>
c0003bbc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bc0:	75 47                	jne    c0003c09 <create_name+0x1b5>
c0003bc2:	e9 51 01 00 00       	jmp    c0003d18 <create_name+0x2c4>
c0003bc7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bcc:	75 10                	jne    c0003bde <create_name+0x18a>
c0003bce:	83 cb 03             	or     ebx,0x3
c0003bd1:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bd9:	e9 e9 00 00 00       	jmp    c0003cc7 <create_name+0x273>
c0003bde:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be2:	74 0d                	je     c0003bf1 <create_name+0x19d>
c0003be4:	83 cb 03             	or     ebx,0x3
c0003be7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003beb:	0f 87 d6 00 00 00    	ja     c0003cc7 <create_name+0x273>
c0003bf1:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003bf6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bfa:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c02:	b9 08 00 00 00       	mov    ecx,0x8
c0003c07:	eb a7                	jmp    c0003bb0 <create_name+0x15c>
c0003c09:	66 83 fd 7f          	cmp    bp,0x7f
c0003c0d:	76 68                	jbe    c0003c77 <create_name+0x223>
c0003c0f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c13:	88 da                	mov    dl,bl
c0003c15:	83 ca 02             	or     edx,0x2
c0003c18:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c1c:	50                   	push   eax
c0003c1d:	50                   	push   eax
c0003c1e:	68 b5 01 00 00       	push   0x1b5
c0003c23:	55                   	push   ebp
c0003c24:	e8 48 46 00 00       	call   c0008271 <ff_uni2oem>
c0003c29:	83 c4 10             	add    esp,0x10
c0003c2c:	89 c5                	mov    ebp,eax
c0003c2e:	a8 80                	test   al,0x80
c0003c30:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c38:	74 0c                	je     c0003c46 <create_name+0x1f2>
c0003c3a:	83 e5 7f             	and    ebp,0x7f
c0003c3d:	0f b6 ad 60 7d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd82a0]
c0003c44:	eb 2a                	jmp    c0003c70 <create_name+0x21c>
c0003c46:	66 3d ff 00          	cmp    ax,0xff
c0003c4a:	76 24                	jbe    c0003c70 <create_name+0x21c>
c0003c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c50:	48                   	dec    eax
c0003c51:	39 c8                	cmp    eax,ecx
c0003c53:	77 0c                	ja     c0003c61 <create_name+0x20d>
c0003c55:	83 cb 03             	or     ebx,0x3
c0003c58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c5c:	e9 4f ff ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003c61:	89 e8                	mov    eax,ebp
c0003c63:	88 d3                	mov    bl,dl
c0003c65:	66 c1 e8 08          	shr    ax,0x8
c0003c69:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c6d:	41                   	inc    ecx
c0003c6e:	eb 4b                	jmp    c0003cbb <create_name+0x267>
c0003c70:	88 d3                	mov    bl,dl
c0003c72:	66 85 ed             	test   bp,bp
c0003c75:	74 19                	je     c0003c90 <create_name+0x23c>
c0003c77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c7b:	0f b7 d5             	movzx  edx,bp
c0003c7e:	b8 1b 7e 02 c0       	mov    eax,0xc0027e1b
c0003c83:	e8 4b de ff ff       	call   c0001ad3 <chk_chr>
c0003c88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	74 0a                	je     c0003c9a <create_name+0x246>
c0003c90:	83 cb 03             	or     ebx,0x3
c0003c93:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c98:	eb 21                	jmp    c0003cbb <create_name+0x267>
c0003c9a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c9d:	66 83 f8 19          	cmp    ax,0x19
c0003ca1:	77 07                	ja     c0003caa <create_name+0x256>
c0003ca3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ca8:	eb 11                	jmp    c0003cbb <create_name+0x267>
c0003caa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cad:	66 83 f8 19          	cmp    ax,0x19
c0003cb1:	77 08                	ja     c0003cbb <create_name+0x267>
c0003cb3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cb8:	83 ed 20             	sub    ebp,0x20
c0003cbb:	89 e8                	mov    eax,ebp
c0003cbd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc1:	41                   	inc    ecx
c0003cc2:	e9 e9 fe ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003cc7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ccb:	75 04                	jne    c0003cd1 <create_name+0x27d>
c0003ccd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cd1:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cd6:	75 05                	jne    c0003cdd <create_name+0x289>
c0003cd8:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003cdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ce1:	83 e0 0c             	and    eax,0xc
c0003ce4:	3c 0c                	cmp    al,0xc
c0003ce6:	74 0b                	je     c0003cf3 <create_name+0x29f>
c0003ce8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cec:	83 e0 03             	and    eax,0x3
c0003cef:	3c 03                	cmp    al,0x3
c0003cf1:	75 05                	jne    c0003cf8 <create_name+0x2a4>
c0003cf3:	83 cb 02             	or     ebx,0x2
c0003cf6:	eb 19                	jmp    c0003d11 <create_name+0x2bd>
c0003cf8:	f6 c3 02             	test   bl,0x2
c0003cfb:	75 14                	jne    c0003d11 <create_name+0x2bd>
c0003cfd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d02:	74 03                	je     c0003d07 <create_name+0x2b3>
c0003d04:	83 cb 10             	or     ebx,0x10
c0003d07:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d0c:	74 03                	je     c0003d11 <create_name+0x2bd>
c0003d0e:	83 cb 08             	or     ebx,0x8
c0003d11:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d14:	31 c0                	xor    eax,eax
c0003d16:	eb 10                	jmp    c0003d28 <create_name+0x2d4>
c0003d18:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d1d:	0f 85 ce fe ff ff    	jne    c0003bf1 <create_name+0x19d>
c0003d23:	e9 a6 fe ff ff       	jmp    c0003bce <create_name+0x17a>
c0003d28:	83 c4 3c             	add    esp,0x3c
c0003d2b:	5b                   	pop    ebx
c0003d2c:	5e                   	pop    esi
c0003d2d:	5f                   	pop    edi
c0003d2e:	5d                   	pop    ebp
c0003d2f:	c3                   	ret    

c0003d30 <xname_sum>:
c0003d30:	56                   	push   esi
c0003d31:	53                   	push   ebx
c0003d32:	89 c6                	mov    esi,eax
c0003d34:	51                   	push   ecx
c0003d35:	31 db                	xor    ebx,ebx
c0003d37:	83 c6 02             	add    esi,0x2
c0003d3a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d3e:	66 85 c0             	test   ax,ax
c0003d41:	74 1f                	je     c0003d62 <xname_sum+0x32>
c0003d43:	83 ec 0c             	sub    esp,0xc
c0003d46:	66 d1 cb             	ror    bx,1
c0003d49:	50                   	push   eax
c0003d4a:	e8 1e 46 00 00       	call   c000836d <ff_wtoupper>
c0003d4f:	83 c4 10             	add    esp,0x10
c0003d52:	0f b6 d0             	movzx  edx,al
c0003d55:	66 c1 e8 08          	shr    ax,0x8
c0003d59:	01 d3                	add    ebx,edx
c0003d5b:	66 d1 cb             	ror    bx,1
c0003d5e:	01 c3                	add    ebx,eax
c0003d60:	eb d5                	jmp    c0003d37 <xname_sum+0x7>
c0003d62:	89 d8                	mov    eax,ebx
c0003d64:	5a                   	pop    edx
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	c3                   	ret    

c0003d68 <create_xdir>:
c0003d68:	55                   	push   ebp
c0003d69:	b9 40 00 00 00       	mov    ecx,0x40
c0003d6e:	57                   	push   edi
c0003d6f:	bd 01 00 00 00       	mov    ebp,0x1
c0003d74:	56                   	push   esi
c0003d75:	31 ff                	xor    edi,edi
c0003d77:	53                   	push   ebx
c0003d78:	be 40 00 00 00       	mov    esi,0x40
c0003d7d:	89 c3                	mov    ebx,eax
c0003d7f:	83 ec 1c             	sub    esp,0x1c
c0003d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d86:	31 d2                	xor    edx,edx
c0003d88:	e8 18 dd ff ff       	call   c0001aa5 <mem_set>
c0003d8d:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d90:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d94:	31 c9                	xor    ecx,ecx
c0003d96:	8d 46 01             	lea    eax,[esi+0x1]
c0003d99:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d9d:	83 c6 02             	add    esi,0x2
c0003da0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	74 12                	je     c0003dbb <create_xdir+0x53>
c0003da9:	0f b6 c1             	movzx  eax,cl
c0003dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003db0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003db4:	66 83 fd 01          	cmp    bp,0x1
c0003db8:	80 d9 ff             	sbb    cl,0xff
c0003dbb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dbe:	0f b7 d5             	movzx  edx,bp
c0003dc1:	83 c6 02             	add    esi,0x2
c0003dc4:	e8 ba dc ff ff       	call   c0001a83 <st_word>
c0003dc9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dcf:	75 d3                	jne    c0003da4 <create_xdir+0x3c>
c0003dd1:	8d 47 01             	lea    eax,[edi+0x1]
c0003dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ddc:	0f b6 c1             	movzx  eax,cl
c0003ddf:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003de4:	74 07                	je     c0003ded <create_xdir+0x85>
c0003de6:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003deb:	eb a9                	jmp    c0003d96 <create_xdir+0x2e>
c0003ded:	8d 47 02             	lea    eax,[edi+0x2]
c0003df0:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003df3:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003df6:	89 d0                	mov    eax,edx
c0003df8:	e8 33 ff ff ff       	call   c0003d30 <xname_sum>
c0003dfd:	83 c4 1c             	add    esp,0x1c
c0003e00:	0f b7 d0             	movzx  edx,ax
c0003e03:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e06:	5b                   	pop    ebx
c0003e07:	5e                   	pop    esi
c0003e08:	5f                   	pop    edi
c0003e09:	5d                   	pop    ebp
c0003e0a:	e9 74 dc ff ff       	jmp    c0001a83 <st_word>

c0003e0f <cmp_lfn>:
c0003e0f:	55                   	push   ebp
c0003e10:	57                   	push   edi
c0003e11:	89 d7                	mov    edi,edx
c0003e13:	56                   	push   esi
c0003e14:	53                   	push   ebx
c0003e15:	83 ec 1c             	sub    esp,0x1c
c0003e18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e1f:	e8 ed db ff ff       	call   c0001a11 <ld_word>
c0003e24:	66 85 c0             	test   ax,ax
c0003e27:	74 07                	je     c0003e30 <cmp_lfn+0x21>
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	e9 9a 00 00 00       	jmp    c0003eca <cmp_lfn+0xbb>
c0003e30:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e32:	bd 01 00 00 00       	mov    ebp,0x1
c0003e37:	83 e3 3f             	and    ebx,0x3f
c0003e3a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e42:	4b                   	dec    ebx
c0003e43:	6b db 0d             	imul   ebx,ebx,0xd
c0003e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e4a:	0f b6 80 e0 7d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8220]
c0003e51:	01 f8                	add    eax,edi
c0003e53:	e8 b9 db ff ff       	call   c0001a11 <ld_word>
c0003e58:	66 85 ed             	test   bp,bp
c0003e5b:	89 c6                	mov    esi,eax
c0003e5d:	74 3c                	je     c0003e9b <cmp_lfn+0x8c>
c0003e5f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e65:	77 c2                	ja     c0003e29 <cmp_lfn+0x1a>
c0003e67:	83 ec 0c             	sub    esp,0xc
c0003e6a:	0f b7 c0             	movzx  eax,ax
c0003e6d:	50                   	push   eax
c0003e6e:	e8 fa 44 00 00       	call   c000836d <ff_wtoupper>
c0003e73:	89 c5                	mov    ebp,eax
c0003e75:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e80:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e84:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e87:	e8 e1 44 00 00       	call   c000836d <ff_wtoupper>
c0003e8c:	83 c4 10             	add    esp,0x10
c0003e8f:	39 c5                	cmp    ebp,eax
c0003e91:	75 96                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e93:	89 f5                	mov    ebp,esi
c0003e95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e99:	eb 04                	jmp    c0003e9f <cmp_lfn+0x90>
c0003e9b:	66 46                	inc    si
c0003e9d:	75 8a                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e9f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ea3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ea8:	75 9c                	jne    c0003e46 <cmp_lfn+0x37>
c0003eaa:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ead:	74 16                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eaf:	66 85 ed             	test   bp,bp
c0003eb2:	74 11                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ebd:	0f 94 c0             	sete   al
c0003ec0:	0f b6 c0             	movzx  eax,al
c0003ec3:	eb 05                	jmp    c0003eca <cmp_lfn+0xbb>
c0003ec5:	b8 01 00 00 00       	mov    eax,0x1
c0003eca:	83 c4 1c             	add    esp,0x1c
c0003ecd:	5b                   	pop    ebx
c0003ece:	5e                   	pop    esi
c0003ecf:	5f                   	pop    edi
c0003ed0:	5d                   	pop    ebp
c0003ed1:	c3                   	ret    

c0003ed2 <dir_find>:
c0003ed2:	55                   	push   ebp
c0003ed3:	31 d2                	xor    edx,edx
c0003ed5:	57                   	push   edi
c0003ed6:	56                   	push   esi
c0003ed7:	53                   	push   ebx
c0003ed8:	89 c3                	mov    ebx,eax
c0003eda:	83 ec 1c             	sub    esp,0x1c
c0003edd:	8b 30                	mov    esi,DWORD PTR [eax]
c0003edf:	e8 89 f0 ff ff       	call   c0002f6d <dir_sdi>
c0003ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee7:	85 c0                	test   eax,eax
c0003ee9:	0f 85 9e 01 00 00    	jne    c000408d <dir_find+0x1bb>
c0003eef:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ef2:	0f 85 8d 00 00 00    	jne    c0003f85 <dir_find+0xb3>
c0003ef8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003efb:	e8 30 fe ff ff       	call   c0003d30 <xname_sum>
c0003f00:	89 c7                	mov    edi,eax
c0003f02:	31 d2                	xor    edx,edx
c0003f04:	89 d8                	mov    eax,ebx
c0003f06:	e8 72 f8 ff ff       	call   c000377d <dir_read>
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	0f 85 5e 01 00 00    	jne    c0004071 <dir_find+0x19f>
c0003f13:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f16:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f19:	e8 f3 da ff ff       	call   c0001a11 <ld_word>
c0003f1e:	66 39 f8             	cmp    ax,di
c0003f21:	75 df                	jne    c0003f02 <dir_find+0x30>
c0003f23:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f26:	31 ed                	xor    ebp,ebp
c0003f28:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f2c:	ba 40 00 00 00       	mov    edx,0x40
c0003f31:	89 e9                	mov    ecx,ebp
c0003f33:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f37:	0f 84 42 01 00 00    	je     c000407f <dir_find+0x1ad>
c0003f3d:	f6 c2 1f             	test   dl,0x1f
c0003f40:	75 03                	jne    c0003f45 <dir_find+0x73>
c0003f42:	83 c2 02             	add    edx,0x2
c0003f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f49:	89 d0                	mov    eax,edx
c0003f4b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f4e:	e8 be da ff ff       	call   c0001a11 <ld_word>
c0003f53:	83 ec 0c             	sub    esp,0xc
c0003f56:	0f b7 c0             	movzx  eax,ax
c0003f59:	50                   	push   eax
c0003f5a:	e8 0e 44 00 00       	call   c000836d <ff_wtoupper>
c0003f5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f63:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f66:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f6d:	e8 fb 43 00 00       	call   c000836d <ff_wtoupper>
c0003f72:	83 c4 10             	add    esp,0x10
c0003f75:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f79:	75 87                	jne    c0003f02 <dir_find+0x30>
c0003f7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f7f:	45                   	inc    ebp
c0003f80:	83 c2 02             	add    edx,0x2
c0003f83:	eb ac                	jmp    c0003f31 <dir_find+0x5f>
c0003f85:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f8c:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f91:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f96:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f99:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f9c:	89 f0                	mov    eax,esi
c0003f9e:	e8 4c e2 ff ff       	call   c00021ef <move_window>
c0003fa3:	85 c0                	test   eax,eax
c0003fa5:	0f 85 c6 00 00 00    	jne    c0004071 <dir_find+0x19f>
c0003fab:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fae:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fb1:	84 c9                	test   cl,cl
c0003fb3:	0f 84 bd 00 00 00    	je     c0004076 <dir_find+0x1a4>
c0003fb9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fbc:	88 d0                	mov    al,dl
c0003fbe:	83 e0 3f             	and    eax,0x3f
c0003fc1:	80 f9 e5             	cmp    cl,0xe5
c0003fc4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fc7:	0f 84 87 00 00 00    	je     c0004054 <dir_find+0x182>
c0003fcd:	80 e2 08             	and    dl,0x8
c0003fd0:	74 06                	je     c0003fd8 <dir_find+0x106>
c0003fd2:	3c 0f                	cmp    al,0xf
c0003fd4:	75 7e                	jne    c0004054 <dir_find+0x182>
c0003fd6:	eb 04                	jmp    c0003fdc <dir_find+0x10a>
c0003fd8:	3c 0f                	cmp    al,0xf
c0003fda:	75 4c                	jne    c0004028 <dir_find+0x156>
c0003fdc:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fe0:	75 7e                	jne    c0004060 <dir_find+0x18e>
c0003fe2:	f6 c1 40             	test   cl,0x40
c0003fe5:	74 12                	je     c0003ff9 <dir_find+0x127>
c0003fe7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fea:	83 e1 bf             	and    ecx,0xffffffbf
c0003fed:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003ff1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ff4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ff7:	eb 06                	jmp    c0003fff <dir_find+0x12d>
c0003ff9:	89 f8                	mov    eax,edi
c0003ffb:	38 c8                	cmp    al,cl
c0003ffd:	75 5c                	jne    c000405b <dir_find+0x189>
c0003fff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004003:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004008:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000400b:	75 53                	jne    c0004060 <dir_find+0x18e>
c000400d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004011:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004014:	89 ea                	mov    edx,ebp
c0004016:	e8 f4 fd ff ff       	call   c0003e0f <cmp_lfn>
c000401b:	85 c0                	test   eax,eax
c000401d:	74 41                	je     c0004060 <dir_find+0x18e>
c000401f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004023:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004026:	eb 38                	jmp    c0004060 <dir_find+0x18e>
c0004028:	89 f8                	mov    eax,edi
c000402a:	84 c0                	test   al,al
c000402c:	75 0d                	jne    c000403b <dir_find+0x169>
c000402e:	89 e8                	mov    eax,ebp
c0004030:	e8 98 de ff ff       	call   c0001ecd <sum_sfn>
c0004035:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004039:	74 52                	je     c000408d <dir_find+0x1bb>
c000403b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000403f:	75 13                	jne    c0004054 <dir_find+0x182>
c0004041:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004044:	b9 0b 00 00 00       	mov    ecx,0xb
c0004049:	89 e8                	mov    eax,ebp
c000404b:	e8 60 da ff ff       	call   c0001ab0 <mem_cmp>
c0004050:	85 c0                	test   eax,eax
c0004052:	74 39                	je     c000408d <dir_find+0x1bb>
c0004054:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000405b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004060:	31 d2                	xor    edx,edx
c0004062:	89 d8                	mov    eax,ebx
c0004064:	e8 5c f4 ff ff       	call   c00034c5 <dir_next>
c0004069:	85 c0                	test   eax,eax
c000406b:	0f 84 25 ff ff ff    	je     c0003f96 <dir_find+0xc4>
c0004071:	89 04 24             	mov    DWORD PTR [esp],eax
c0004074:	eb 17                	jmp    c000408d <dir_find+0x1bb>
c0004076:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000407d:	eb 0e                	jmp    c000408d <dir_find+0x1bb>
c000407f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004082:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004087:	0f 85 75 fe ff ff    	jne    c0003f02 <dir_find+0x30>
c000408d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004090:	83 c4 1c             	add    esp,0x1c
c0004093:	5b                   	pop    ebx
c0004094:	5e                   	pop    esi
c0004095:	5f                   	pop    edi
c0004096:	5d                   	pop    ebp
c0004097:	c3                   	ret    

c0004098 <dir_register>:
c0004098:	55                   	push   ebp
c0004099:	57                   	push   edi
c000409a:	56                   	push   esi
c000409b:	be 06 00 00 00       	mov    esi,0x6
c00040a0:	53                   	push   ebx
c00040a1:	83 ec 6c             	sub    esp,0x6c
c00040a4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040a8:	0f 85 62 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ae:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040b0:	31 ff                	xor    edi,edi
c00040b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040b5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ba:	74 03                	je     c00040bf <dir_register+0x27>
c00040bc:	47                   	inc    edi
c00040bd:	eb f6                	jmp    c00040b5 <dir_register+0x1d>
c00040bf:	89 c3                	mov    ebx,eax
c00040c1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040c5:	0f 85 e1 00 00 00    	jne    c00041ac <dir_register+0x114>
c00040cb:	83 c7 0e             	add    edi,0xe
c00040ce:	b9 0f 00 00 00       	mov    ecx,0xf
c00040d3:	89 f8                	mov    eax,edi
c00040d5:	31 d2                	xor    edx,edx
c00040d7:	f7 f1                	div    ecx
c00040d9:	8d 50 02             	lea    edx,[eax+0x2]
c00040dc:	89 c7                	mov    edi,eax
c00040de:	89 d8                	mov    eax,ebx
c00040e0:	e8 12 f8 ff ff       	call   c00038f7 <dir_alloc>
c00040e5:	89 c6                	mov    esi,eax
c00040e7:	85 c0                	test   eax,eax
c00040e9:	0f 85 21 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ef:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040f8:	c1 e7 05             	shl    edi,0x5
c00040fb:	29 f8                	sub    eax,edi
c00040fd:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004100:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004103:	a8 04                	test   al,0x4
c0004105:	0f 84 91 00 00 00    	je     c000419c <dir_register+0x104>
c000410b:	83 e0 fb             	and    eax,0xfffffffb
c000410e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004111:	89 d8                	mov    eax,ebx
c0004113:	e8 25 ec ff ff       	call   c0002d3d <fill_first_frag>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 ee 01 00 00    	jne    c000430e <dir_register+0x276>
c0004120:	83 c9 ff             	or     ecx,0xffffffff
c0004123:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004126:	89 d8                	mov    eax,ebx
c0004128:	e8 db eb ff ff       	call   c0002d08 <fill_last_frag>
c000412d:	85 c0                	test   eax,eax
c000412f:	0f 85 d9 01 00 00    	jne    c000430e <dir_register+0x276>
c0004135:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004139:	74 61                	je     c000419c <dir_register+0x104>
c000413b:	89 da                	mov    edx,ebx
c000413d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004141:	e8 ea f5 ff ff       	call   c0003730 <load_obj_xdir>
c0004146:	85 c0                	test   eax,eax
c0004148:	0f 85 c0 01 00 00    	jne    c000430e <dir_register+0x276>
c000414e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004152:	31 c9                	xor    ecx,ecx
c0004154:	c1 e2 09             	shl    edx,0x9
c0004157:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000415a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000415d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004160:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004163:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004166:	83 c0 38             	add    eax,0x38
c0004169:	e8 1c d9 ff ff       	call   c0001a8a <st_qword>
c000416e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004171:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004174:	83 c0 28             	add    eax,0x28
c0004177:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000417a:	e8 0b d9 ff ff       	call   c0001a8a <st_qword>
c000417f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004182:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004185:	83 c8 01             	or     eax,0x1
c0004188:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000418b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000418f:	e8 db f7 ff ff       	call   c000396f <store_xdir>
c0004194:	85 c0                	test   eax,eax
c0004196:	0f 85 72 01 00 00    	jne    c000430e <dir_register+0x276>
c000419c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000419f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a2:	e8 c1 fb ff ff       	call   c0003d68 <create_xdir>
c00041a7:	e9 64 01 00 00       	jmp    c0004310 <dir_register+0x278>
c00041ac:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041af:	b9 0c 00 00 00       	mov    ecx,0xc
c00041b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041b8:	89 c2                	mov    edx,eax
c00041ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041be:	e8 cd d8 ff ff       	call   c0001a90 <mem_cpy>
c00041c3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041c8:	74 58                	je     c0004222 <dir_register+0x18a>
c00041ca:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041ce:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041d6:	83 ec 0c             	sub    esp,0xc
c00041d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041e0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041e8:	e8 24 dc ff ff       	call   c0001e11 <gen_numname>
c00041ed:	89 d8                	mov    eax,ebx
c00041ef:	e8 de fc ff ff       	call   c0003ed2 <dir_find>
c00041f4:	83 c4 10             	add    esp,0x10
c00041f7:	89 c6                	mov    esi,eax
c00041f9:	85 c0                	test   eax,eax
c00041fb:	75 15                	jne    c0004212 <dir_register+0x17a>
c00041fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004201:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004206:	75 ce                	jne    c00041d6 <dir_register+0x13e>
c0004208:	be 07 00 00 00       	mov    esi,0x7
c000420d:	e9 fe 00 00 00       	jmp    c0004310 <dir_register+0x278>
c0004212:	83 f8 04             	cmp    eax,0x4
c0004215:	0f 85 f5 00 00 00    	jne    c0004310 <dir_register+0x278>
c000421b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000421f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004222:	b9 01 00 00 00       	mov    ecx,0x1
c0004227:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000422c:	74 0f                	je     c000423d <dir_register+0x1a5>
c000422e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004233:	8d 47 0c             	lea    eax,[edi+0xc]
c0004236:	31 d2                	xor    edx,edx
c0004238:	f7 f1                	div    ecx
c000423a:	8d 48 01             	lea    ecx,[eax+0x1]
c000423d:	89 ca                	mov    edx,ecx
c000423f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004243:	89 d8                	mov    eax,ebx
c0004245:	e8 ad f6 ff ff       	call   c00038f7 <dir_alloc>
c000424a:	89 c6                	mov    esi,eax
c000424c:	85 c0                	test   eax,eax
c000424e:	0f 85 bc 00 00 00    	jne    c0004310 <dir_register+0x278>
c0004254:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004258:	49                   	dec    ecx
c0004259:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425d:	74 6a                	je     c00042c9 <dir_register+0x231>
c000425f:	89 c8                	mov    eax,ecx
c0004261:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004264:	c1 e0 05             	shl    eax,0x5
c0004267:	29 c2                	sub    edx,eax
c0004269:	89 d8                	mov    eax,ebx
c000426b:	e8 fd ec ff ff       	call   c0002f6d <dir_sdi>
c0004270:	89 c6                	mov    esi,eax
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 96 00 00 00    	jne    c0004310 <dir_register+0x278>
c000427a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000427e:	e8 4a dc ff ff       	call   c0001ecd <sum_sfn>
c0004283:	0f b6 f8             	movzx  edi,al
c0004286:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004289:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000428c:	89 e8                	mov    eax,ebp
c000428e:	e8 5c df ff ff       	call   c00021ef <move_window>
c0004293:	89 c6                	mov    esi,eax
c0004295:	85 c0                	test   eax,eax
c0004297:	75 77                	jne    c0004310 <dir_register+0x278>
c0004299:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000429e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042a1:	83 ec 0c             	sub    esp,0xc
c00042a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042a7:	57                   	push   edi
c00042a8:	e8 e0 da ff ff       	call   c0001d8d <put_lfn>
c00042ad:	31 d2                	xor    edx,edx
c00042af:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042b3:	89 d8                	mov    eax,ebx
c00042b5:	e8 0b f2 ff ff       	call   c00034c5 <dir_next>
c00042ba:	83 c4 10             	add    esp,0x10
c00042bd:	89 c6                	mov    esi,eax
c00042bf:	85 c0                	test   eax,eax
c00042c1:	75 4d                	jne    c0004310 <dir_register+0x278>
c00042c3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042c7:	75 bd                	jne    c0004286 <dir_register+0x1ee>
c00042c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042cc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042cf:	89 e8                	mov    eax,ebp
c00042d1:	e8 19 df ff ff       	call   c00021ef <move_window>
c00042d6:	89 c6                	mov    esi,eax
c00042d8:	85 c0                	test   eax,eax
c00042da:	75 34                	jne    c0004310 <dir_register+0x278>
c00042dc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042df:	b9 20 00 00 00       	mov    ecx,0x20
c00042e4:	31 d2                	xor    edx,edx
c00042e6:	e8 ba d7 ff ff       	call   c0001aa5 <mem_set>
c00042eb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042f2:	b9 0b 00 00 00       	mov    ecx,0xb
c00042f7:	e8 94 d7 ff ff       	call   c0001a90 <mem_cpy>
c00042fc:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004302:	83 e0 18             	and    eax,0x18
c0004305:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004308:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430c:	eb 02                	jmp    c0004310 <dir_register+0x278>
c000430e:	89 c6                	mov    esi,eax
c0004310:	83 c4 6c             	add    esp,0x6c
c0004313:	89 f0                	mov    eax,esi
c0004315:	5b                   	pop    ebx
c0004316:	5e                   	pop    esi
c0004317:	5f                   	pop    edi
c0004318:	5d                   	pop    ebp
c0004319:	c3                   	ret    

c000431a <sync_fs>:
c000431a:	56                   	push   esi
c000431b:	53                   	push   ebx
c000431c:	53                   	push   ebx
c000431d:	89 c3                	mov    ebx,eax
c000431f:	e8 37 de ff ff       	call   c000215b <sync_window>
c0004324:	85 c0                	test   eax,eax
c0004326:	0f 85 b1 00 00 00    	jne    c00043dd <sync_fs+0xc3>
c000432c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000432f:	0f 85 8e 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c0004335:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004339:	0f 85 84 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c000433f:	b9 00 02 00 00       	mov    ecx,0x200
c0004344:	8d 73 54             	lea    esi,[ebx+0x54]
c0004347:	31 d2                	xor    edx,edx
c0004349:	89 f0                	mov    eax,esi
c000434b:	e8 55 d7 ff ff       	call   c0001aa5 <mem_set>
c0004350:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004356:	ba 55 aa 00 00       	mov    edx,0xaa55
c000435b:	e8 23 d7 ff ff       	call   c0001a83 <st_word>
c0004360:	ba 52 52 61 41       	mov    edx,0x41615252
c0004365:	89 f0                	mov    eax,esi
c0004367:	e8 1b d7 ff ff       	call   c0001a87 <st_dword>
c000436c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004372:	ba 72 72 41 61       	mov    edx,0x61417272
c0004377:	e8 0b d7 ff ff       	call   c0001a87 <st_dword>
c000437c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000437f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004385:	e8 fd d6 ff ff       	call   c0001a87 <st_dword>
c000438a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000438d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004393:	e8 ef d6 ff ff       	call   c0001a87 <st_dword>
c0004398:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000439b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000439e:	83 c0 01             	add    eax,0x1
c00043a1:	83 d2 00             	adc    edx,0x0
c00043a4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043a7:	83 ec 0c             	sub    esp,0xc
c00043aa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043ad:	6a 01                	push   0x1
c00043af:	52                   	push   edx
c00043b0:	50                   	push   eax
c00043b1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b5:	56                   	push   esi
c00043b6:	50                   	push   eax
c00043b7:	e8 20 d6 ff ff       	call   c00019dc <disk_write>
c00043bc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043c0:	83 c4 20             	add    esp,0x20
c00043c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c7:	51                   	push   ecx
c00043c8:	6a 00                	push   0x0
c00043ca:	6a 00                	push   0x0
c00043cc:	50                   	push   eax
c00043cd:	e8 20 d6 ff ff       	call   c00019f2 <disk_ioctl>
c00043d2:	83 c4 10             	add    esp,0x10
c00043d5:	85 c0                	test   eax,eax
c00043d7:	0f 95 c0             	setne  al
c00043da:	0f b6 c0             	movzx  eax,al
c00043dd:	5a                   	pop    edx
c00043de:	5b                   	pop    ebx
c00043df:	5e                   	pop    esi
c00043e0:	c3                   	ret    

c00043e1 <create_partition>:
c00043e1:	55                   	push   ebp
c00043e2:	0f b6 c0             	movzx  eax,al
c00043e5:	57                   	push   edi
c00043e6:	56                   	push   esi
c00043e7:	53                   	push   ebx
c00043e8:	83 ec 60             	sub    esp,0x60
c00043eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ef:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043f3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043f7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043fb:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043ff:	50                   	push   eax
c0004400:	6a 01                	push   0x1
c0004402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004406:	e8 e7 d5 ff ff       	call   c00019f2 <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	74 0a                	je     c000441c <create_partition+0x3b>
c0004412:	b8 01 00 00 00       	mov    eax,0x1
c0004417:	e9 67 05 00 00       	jmp    c0004983 <create_partition+0x5a2>
c000441c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004420:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004424:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004428:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000442c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004431:	0f 86 ed 03 00 00    	jbe    c0004824 <create_partition+0x443>
c0004437:	83 c0 df             	add    eax,0xffffffdf
c000443a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004442:	83 d2 ff             	adc    edx,0xffffffff
c0004445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004449:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000444d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004455:	83 c0 bd             	add    eax,0xffffffbd
c0004458:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000445f:	83 d2 ff             	adc    edx,0xffffffff
c0004462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004466:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000446a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004472:	be 22 00 00 00       	mov    esi,0x22
c0004477:	31 ff                	xor    edi,edi
c0004479:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004481:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004489:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004491:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004495:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000449b:	75 0e                	jne    c00044ab <create_partition+0xca>
c000449d:	b9 00 02 00 00       	mov    ecx,0x200
c00044a2:	31 d2                	xor    edx,edx
c00044a4:	89 d8                	mov    eax,ebx
c00044a6:	e8 fa d5 ff ff       	call   c0001aa5 <mem_set>
c00044ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ba:	0f 84 23 01 00 00    	je     c00045e3 <create_partition+0x202>
c00044c0:	89 f0                	mov    eax,esi
c00044c2:	89 fa                	mov    edx,edi
c00044c4:	05 ff 07 00 00       	add    eax,0x7ff
c00044c9:	83 d2 00             	adc    edx,0x0
c00044cc:	89 c1                	mov    ecx,eax
c00044ce:	89 d7                	mov    edi,edx
c00044d0:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044da:	89 ce                	mov    esi,ecx
c00044dc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044e4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044e8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f2:	b8 64 00 00 00       	mov    eax,0x64
c00044f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044fa:	b8 00 00 00 00       	mov    eax,0x0
c00044ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004503:	72 41                	jb     c0004546 <create_partition+0x165>
c0004505:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004511:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004516:	01 c1                	add    ecx,eax
c0004518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000451c:	f7 24 24             	mul    DWORD PTR [esp]
c000451f:	6a 00                	push   0x0
c0004521:	01 ca                	add    edx,ecx
c0004523:	6a 64                	push   0x64
c0004525:	52                   	push   edx
c0004526:	50                   	push   eax
c0004527:	e8 80 0e 02 00       	call   c00253ac <__udivdi3>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	05 ff 07 00 00       	add    eax,0x7ff
c0004534:	83 d2 00             	adc    edx,0x0
c0004537:	89 c1                	mov    ecx,eax
c0004539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000453d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004543:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004546:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000454d:	01 f0                	add    eax,esi
c000454f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004553:	11 fa                	adc    edx,edi
c0004555:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004559:	19 d1                	sbb    ecx,edx
c000455b:	73 2e                	jae    c000458b <create_partition+0x1aa>
c000455d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004561:	89 f8                	mov    eax,edi
c0004563:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000456a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000456e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004576:	73 6b                	jae    c00045e3 <create_partition+0x202>
c0004578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000457c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004580:	29 f0                	sub    eax,esi
c0004582:	19 fa                	sbb    edx,edi
c0004584:	89 04 24             	mov    DWORD PTR [esp],eax
c0004587:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000458b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000458f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004592:	74 4f                	je     c00045e3 <create_partition+0x202>
c0004594:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004597:	b9 10 00 00 00       	mov    ecx,0x10
c000459c:	ba f0 7d 02 c0       	mov    edx,0xc0027df0
c00045a1:	e8 ea d4 ff ff       	call   c0001a90 <mem_cpy>
c00045a6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045aa:	b9 10 00 00 00       	mov    ecx,0x10
c00045af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045b3:	e8 2c db ff ff       	call   c00020e4 <make_rand>
c00045b8:	89 f2                	mov    edx,esi
c00045ba:	89 f9                	mov    ecx,edi
c00045bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045c0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045c4:	e8 c1 d4 ff ff       	call   c0001a8a <st_qword>
c00045c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045cc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045d0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045d4:	89 f2                	mov    edx,esi
c00045d6:	89 f9                	mov    ecx,edi
c00045d8:	83 c2 ff             	add    edx,0xffffffff
c00045db:	83 d1 ff             	adc    ecx,0xffffffff
c00045de:	e8 a7 d4 ff ff       	call   c0001a8a <st_qword>
c00045e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045e7:	83 e8 80             	sub    eax,0xffffff80
c00045ea:	89 c5                	mov    ebp,eax
c00045ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f6:	75 6b                	jne    c0004663 <create_partition+0x282>
c00045f8:	45                   	inc    ebp
c00045f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045fd:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004602:	e8 39 da ff ff       	call   c0002040 <crc32>
c0004607:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000460d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004611:	75 e5                	jne    c00045f8 <create_partition+0x217>
c0004613:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004617:	31 d2                	xor    edx,edx
c0004619:	83 ec 0c             	sub    esp,0xc
c000461c:	c1 ed 09             	shr    ebp,0x9
c000461f:	6a 01                	push   0x1
c0004621:	8d 45 02             	lea    eax,[ebp+0x2]
c0004624:	52                   	push   edx
c0004625:	50                   	push   eax
c0004626:	53                   	push   ebx
c0004627:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000462b:	e8 ac d3 ff ff       	call   c00019dc <disk_write>
c0004630:	83 c4 20             	add    esp,0x20
c0004633:	85 c0                	test   eax,eax
c0004635:	0f 85 d7 fd ff ff    	jne    c0004412 <create_partition+0x31>
c000463b:	83 ec 0c             	sub    esp,0xc
c000463e:	31 d2                	xor    edx,edx
c0004640:	6a 01                	push   0x1
c0004642:	89 e8                	mov    eax,ebp
c0004644:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004648:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000464c:	52                   	push   edx
c000464d:	50                   	push   eax
c000464e:	53                   	push   ebx
c000464f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004653:	e8 84 d3 ff ff       	call   c00019dc <disk_write>
c0004658:	83 c4 20             	add    esp,0x20
c000465b:	85 c0                	test   eax,eax
c000465d:	0f 85 af fd ff ff    	jne    c0004412 <create_partition+0x31>
c0004663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004667:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000466b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004670:	74 0d                	je     c000467f <create_partition+0x29e>
c0004672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000467a:	e9 12 fe ff ff       	jmp    c0004491 <create_partition+0xb0>
c000467f:	31 d2                	xor    edx,edx
c0004681:	b9 00 02 00 00       	mov    ecx,0x200
c0004686:	89 d8                	mov    eax,ebx
c0004688:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000468b:	e8 15 d4 ff ff       	call   c0001aa5 <mem_set>
c0004690:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004693:	b9 10 00 00 00       	mov    ecx,0x10
c0004698:	ba e0 7c 02 c0       	mov    edx,0xc0027ce0
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 ec d3 ff ff       	call   c0001a90 <mem_cpy>
c00046a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046a8:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ab:	f7 d2                	not    edx
c00046ad:	e8 d5 d3 ff ff       	call   c0001a87 <st_dword>
c00046b2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046b5:	31 c9                	xor    ecx,ecx
c00046b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ba:	ba 01 00 00 00       	mov    edx,0x1
c00046bf:	e8 c6 d3 ff ff       	call   c0001a8a <st_qword>
c00046c4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046c8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046cc:	83 c2 ff             	add    edx,0xffffffff
c00046cf:	89 e8                	mov    eax,ebp
c00046d1:	83 d1 ff             	adc    ecx,0xffffffff
c00046d4:	e8 b1 d3 ff ff       	call   c0001a8a <st_qword>
c00046d9:	31 c9                	xor    ecx,ecx
c00046db:	8d 43 28             	lea    eax,[ebx+0x28]
c00046de:	ba 22 00 00 00       	mov    edx,0x22
c00046e3:	e8 a2 d3 ff ff       	call   c0001a8a <st_qword>
c00046e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046f0:	83 c2 de             	add    edx,0xffffffde
c00046f3:	8d 43 30             	lea    eax,[ebx+0x30]
c00046f6:	83 d1 ff             	adc    ecx,0xffffffff
c00046f9:	31 f6                	xor    esi,esi
c00046fb:	e8 8a d3 ff ff       	call   c0001a8a <st_qword>
c0004700:	8d 43 54             	lea    eax,[ebx+0x54]
c0004703:	ba 80 00 00 00       	mov    edx,0x80
c0004708:	e8 7a d3 ff ff       	call   c0001a87 <st_dword>
c000470d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004710:	ba 80 00 00 00       	mov    edx,0x80
c0004715:	e8 6d d3 ff ff       	call   c0001a87 <st_dword>
c000471a:	ba 02 00 00 00       	mov    edx,0x2
c000471f:	89 f8                	mov    eax,edi
c0004721:	e8 61 d3 ff ff       	call   c0001a87 <st_dword>
c0004726:	8d 53 38             	lea    edx,[ebx+0x38]
c0004729:	b9 10 00 00 00       	mov    ecx,0x10
c000472e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004732:	e8 ad d9 ff ff       	call   c00020e4 <make_rand>
c0004737:	83 c8 ff             	or     eax,0xffffffff
c000473a:	46                   	inc    esi
c000473b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004740:	e8 fb d8 ff ff       	call   c0002040 <crc32>
c0004745:	83 fe 5c             	cmp    esi,0x5c
c0004748:	75 f0                	jne    c000473a <create_partition+0x359>
c000474a:	f7 d0                	not    eax
c000474c:	8d 73 10             	lea    esi,[ebx+0x10]
c000474f:	89 c2                	mov    edx,eax
c0004751:	89 f0                	mov    eax,esi
c0004753:	e8 2f d3 ff ff       	call   c0001a87 <st_dword>
c0004758:	83 ec 0c             	sub    esp,0xc
c000475b:	6a 01                	push   0x1
c000475d:	6a 00                	push   0x0
c000475f:	6a 01                	push   0x1
c0004761:	53                   	push   ebx
c0004762:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004766:	e8 71 d2 ff ff       	call   c00019dc <disk_write>
c000476b:	83 c4 20             	add    esp,0x20
c000476e:	85 c0                	test   eax,eax
c0004770:	0f 85 9c fc ff ff    	jne    c0004412 <create_partition+0x31>
c0004776:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000477a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000477e:	83 c2 ff             	add    edx,0xffffffff
c0004781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004784:	83 d1 ff             	adc    ecx,0xffffffff
c0004787:	e8 fe d2 ff ff       	call   c0001a8a <st_qword>
c000478c:	ba 01 00 00 00       	mov    edx,0x1
c0004791:	31 c9                	xor    ecx,ecx
c0004793:	89 e8                	mov    eax,ebp
c0004795:	e8 f0 d2 ff ff       	call   c0001a8a <st_qword>
c000479a:	89 f8                	mov    eax,edi
c000479c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a4:	31 ff                	xor    edi,edi
c00047a6:	e8 df d2 ff ff       	call   c0001a8a <st_qword>
c00047ab:	89 f0                	mov    eax,esi
c00047ad:	31 d2                	xor    edx,edx
c00047af:	e8 d3 d2 ff ff       	call   c0001a87 <st_dword>
c00047b4:	83 c8 ff             	or     eax,0xffffffff
c00047b7:	47                   	inc    edi
c00047b8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047bd:	e8 7e d8 ff ff       	call   c0002040 <crc32>
c00047c2:	83 ff 5c             	cmp    edi,0x5c
c00047c5:	75 f0                	jne    c00047b7 <create_partition+0x3d6>
c00047c7:	f7 d0                	not    eax
c00047c9:	89 c2                	mov    edx,eax
c00047cb:	89 f0                	mov    eax,esi
c00047cd:	e8 b5 d2 ff ff       	call   c0001a87 <st_dword>
c00047d2:	83 ec 0c             	sub    esp,0xc
c00047d5:	6a 01                	push   0x1
c00047d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047db:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047df:	83 c0 ff             	add    eax,0xffffffff
c00047e2:	83 d2 ff             	adc    edx,0xffffffff
c00047e5:	52                   	push   edx
c00047e6:	50                   	push   eax
c00047e7:	53                   	push   ebx
c00047e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ec:	e8 eb d1 ff ff       	call   c00019dc <disk_write>
c00047f1:	83 c4 20             	add    esp,0x20
c00047f4:	85 c0                	test   eax,eax
c00047f6:	0f 85 16 fc ff ff    	jne    c0004412 <create_partition+0x31>
c00047fc:	31 d2                	xor    edx,edx
c00047fe:	89 d8                	mov    eax,ebx
c0004800:	b9 00 02 00 00       	mov    ecx,0x200
c0004805:	e8 9b d2 ff ff       	call   c0001aa5 <mem_set>
c000480a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004810:	b9 10 00 00 00       	mov    ecx,0x10
c0004815:	ba f0 7c 02 c0       	mov    edx,0xc0027cf0
c000481a:	e8 71 d2 ff ff       	call   c0001a90 <mem_cpy>
c000481f:	e9 21 01 00 00       	jmp    c0004945 <create_partition+0x564>
c0004824:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004828:	b9 05 00 00 00       	mov    ecx,0x5
c000482d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004830:	bf 08 00 00 00       	mov    edi,0x8
c0004835:	89 f8                	mov    eax,edi
c0004837:	31 d2                	xor    edx,edx
c0004839:	0f b6 f0             	movzx  esi,al
c000483c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000483f:	f7 f6                	div    esi
c0004841:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004846:	76 0a                	jbe    c0004852 <create_partition+0x471>
c0004848:	d1 e7                	shl    edi,1
c000484a:	49                   	dec    ecx
c000484b:	75 e8                	jne    c0004835 <create_partition+0x454>
c000484d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004852:	b9 00 02 00 00       	mov    ecx,0x200
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004861:	e8 3f d2 ff ff       	call   c0001aa5 <mem_set>
c0004866:	b9 64 00 00 00       	mov    ecx,0x64
c000486b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486e:	31 d2                	xor    edx,edx
c0004870:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004878:	f7 f1                	div    ecx
c000487a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000487f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004883:	89 f8                	mov    eax,edi
c0004885:	0f b6 c0             	movzx  eax,al
c0004888:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000488c:	e9 80 00 00 00       	jmp    c0004911 <create_partition+0x530>
c0004891:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004894:	29 cf                	sub    edi,ecx
c0004896:	89 ca                	mov    edx,ecx
c0004898:	89 f0                	mov    eax,esi
c000489a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000489f:	e8 e3 d1 ff ff       	call   c0001a87 <st_dword>
c00048a4:	8d 46 04             	lea    eax,[esi+0x4]
c00048a7:	89 fa                	mov    edx,edi
c00048a9:	83 c6 10             	add    esi,0x10
c00048ac:	e8 d6 d1 ff ff       	call   c0001a87 <st_dword>
c00048b1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048b5:	31 d2                	xor    edx,edx
c00048b7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ba:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048be:	89 c8                	mov    eax,ecx
c00048c0:	01 f9                	add    ecx,edi
c00048c2:	f7 f5                	div    ebp
c00048c4:	89 d5                	mov    ebp,edx
c00048c6:	31 d2                	xor    edx,edx
c00048c8:	45                   	inc    ebp
c00048c9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048cd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048d0:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048d3:	89 c2                	mov    edx,eax
c00048d5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048d8:	c1 ea 02             	shr    edx,0x2
c00048db:	83 e2 c0             	and    edx,0xffffffc0
c00048de:	09 ea                	or     edx,ebp
c00048e0:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e5:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048e8:	31 d2                	xor    edx,edx
c00048ea:	f7 f5                	div    ebp
c00048ec:	89 d7                	mov    edi,edx
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	47                   	inc    edi
c00048f1:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048f5:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048f8:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048fb:	89 c5                	mov    ebp,eax
c00048fd:	c1 ed 02             	shr    ebp,0x2
c0004900:	83 e5 c0             	and    ebp,0xffffffc0
c0004903:	09 ef                	or     edi,ebp
c0004905:	89 fa                	mov    edx,edi
c0004907:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000490a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000490f:	74 34                	je     c0004945 <create_partition+0x564>
c0004911:	85 c9                	test   ecx,ecx
c0004913:	74 30                	je     c0004945 <create_partition+0x564>
c0004915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004918:	76 2b                	jbe    c0004945 <create_partition+0x564>
c000491a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000491e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004922:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004925:	83 ff 64             	cmp    edi,0x64
c0004928:	76 4b                	jbe    c0004975 <create_partition+0x594>
c000492a:	89 f8                	mov    eax,edi
c000492c:	01 c8                	add    eax,ecx
c000492e:	0f 82 5d ff ff ff    	jb     c0004891 <create_partition+0x4b0>
c0004934:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004937:	0f 87 54 ff ff ff    	ja     c0004891 <create_partition+0x4b0>
c000493d:	85 ff                	test   edi,edi
c000493f:	0f 85 51 ff ff ff    	jne    c0004896 <create_partition+0x4b5>
c0004945:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000494b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004950:	e8 2e d1 ff ff       	call   c0001a83 <st_word>
c0004955:	83 ec 0c             	sub    esp,0xc
c0004958:	6a 01                	push   0x1
c000495a:	6a 00                	push   0x0
c000495c:	6a 00                	push   0x0
c000495e:	53                   	push   ebx
c000495f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004963:	e8 74 d0 ff ff       	call   c00019dc <disk_write>
c0004968:	83 c4 20             	add    esp,0x20
c000496b:	85 c0                	test   eax,eax
c000496d:	0f 95 c0             	setne  al
c0004970:	0f b6 c0             	movzx  eax,al
c0004973:	eb 0e                	jmp    c0004983 <create_partition+0x5a2>
c0004975:	74 07                	je     c000497e <create_partition+0x59d>
c0004977:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000497c:	eb ac                	jmp    c000492a <create_partition+0x549>
c000497e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004981:	eb a7                	jmp    c000492a <create_partition+0x549>
c0004983:	83 c4 5c             	add    esp,0x5c
c0004986:	5b                   	pop    ebx
c0004987:	5e                   	pop    esi
c0004988:	5f                   	pop    edi
c0004989:	5d                   	pop    ebp
c000498a:	c3                   	ret    

c000498b <get_fileinfo>:
c000498b:	55                   	push   ebp
c000498c:	57                   	push   edi
c000498d:	56                   	push   esi
c000498e:	53                   	push   ebx
c000498f:	83 ec 1c             	sub    esp,0x1c
c0004992:	8b 30                	mov    esi,DWORD PTR [eax]
c0004994:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004998:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000499c:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000499f:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049a2:	0f 84 dc 01 00 00    	je     c0004b84 <get_fileinfo+0x1f9>
c00049a8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ab:	75 0f                	jne    c00049bc <get_fileinfo+0x31>
c00049ad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049b0:	83 c4 1c             	add    esp,0x1c
c00049b3:	5b                   	pop    ebx
c00049b4:	5e                   	pop    esi
c00049b5:	5f                   	pop    edi
c00049b6:	5d                   	pop    ebp
c00049b7:	e9 58 d5 ff ff       	jmp    c0001f14 <get_xfileinfo>
c00049bc:	89 d3                	mov    ebx,edx
c00049be:	89 c6                	mov    esi,eax
c00049c0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049c4:	74 6a                	je     c0004a30 <get_fileinfo+0xa5>
c00049c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ce:	31 ed                	xor    ebp,ebp
c00049d0:	31 ff                	xor    edi,edi
c00049d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049dd:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049e1:	66 85 d2             	test   dx,dx
c00049e4:	74 3e                	je     c0004a24 <get_fileinfo+0x99>
c00049e6:	66 85 ed             	test   bp,bp
c00049e9:	75 0c                	jne    c00049f7 <get_fileinfo+0x6c>
c00049eb:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049f1:	66 3d ff 07          	cmp    ax,0x7ff
c00049f5:	76 22                	jbe    c0004a19 <get_fileinfo+0x8e>
c00049f7:	b9 ff 00 00 00       	mov    ecx,0xff
c00049fc:	89 e8                	mov    eax,ebp
c00049fe:	29 f9                	sub    ecx,edi
c0004a00:	c1 e0 10             	shl    eax,0x10
c0004a03:	09 d0                	or     eax,edx
c0004a05:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a09:	e8 a3 d1 ff ff       	call   c0001bb1 <put_utf>
c0004a0e:	84 c0                	test   al,al
c0004a10:	74 10                	je     c0004a22 <get_fileinfo+0x97>
c0004a12:	0f b6 c0             	movzx  eax,al
c0004a15:	31 d2                	xor    edx,edx
c0004a17:	01 c7                	add    edi,eax
c0004a19:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	eb b0                	jmp    c00049d2 <get_fileinfo+0x47>
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	66 85 ed             	test   bp,bp
c0004a27:	74 02                	je     c0004a2b <get_fileinfo+0xa0>
c0004a29:	31 ff                	xor    edi,edi
c0004a2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a30:	31 ff                	xor    edi,edi
c0004a32:	31 c9                	xor    ecx,ecx
c0004a34:	83 f9 0a             	cmp    ecx,0xa
c0004a37:	0f 87 ad 00 00 00    	ja     c0004aea <get_fileinfo+0x15f>
c0004a3d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a40:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a43:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a47:	66 83 fa 20          	cmp    dx,0x20
c0004a4b:	0f 84 92 00 00 00    	je     c0004ae3 <get_fileinfo+0x158>
c0004a51:	66 83 fa 05          	cmp    dx,0x5
c0004a55:	75 05                	jne    c0004a5c <get_fileinfo+0xd1>
c0004a57:	ba e5 00 00 00       	mov    edx,0xe5
c0004a5c:	83 ff 0b             	cmp    edi,0xb
c0004a5f:	77 0b                	ja     c0004a6c <get_fileinfo+0xe1>
c0004a61:	83 fd 09             	cmp    ebp,0x9
c0004a64:	75 06                	jne    c0004a6c <get_fileinfo+0xe1>
c0004a66:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a6b:	47                   	inc    edi
c0004a6c:	0f b7 c2             	movzx  eax,dx
c0004a6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a73:	e8 6d d0 ff ff       	call   c0001ae5 <dbc_1st>
c0004a78:	85 c0                	test   eax,eax
c0004a7a:	74 2f                	je     c0004aab <get_fileinfo+0x120>
c0004a7c:	83 fd 08             	cmp    ebp,0x8
c0004a7f:	74 2a                	je     c0004aab <get_fileinfo+0x120>
c0004a81:	83 fd 0b             	cmp    ebp,0xb
c0004a84:	74 25                	je     c0004aab <get_fileinfo+0x120>
c0004a86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a89:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a8d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a91:	e8 52 d0 ff ff       	call   c0001ae8 <dbc_2nd>
c0004a96:	85 c0                	test   eax,eax
c0004a98:	74 11                	je     c0004aab <get_fileinfo+0x120>
c0004a9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004aa3:	c1 e2 08             	shl    edx,0x8
c0004aa6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004aa9:	09 c2                	or     edx,eax
c0004aab:	0f b7 d2             	movzx  edx,dx
c0004aae:	50                   	push   eax
c0004aaf:	50                   	push   eax
c0004ab0:	68 b5 01 00 00       	push   0x1b5
c0004ab5:	52                   	push   edx
c0004ab6:	e8 46 38 00 00       	call   c0008301 <ff_oem2uni>
c0004abb:	83 c4 10             	add    esp,0x10
c0004abe:	66 85 c0             	test   ax,ax
c0004ac1:	75 04                	jne    c0004ac7 <get_fileinfo+0x13c>
c0004ac3:	31 ff                	xor    edi,edi
c0004ac5:	eb 23                	jmp    c0004aea <get_fileinfo+0x15f>
c0004ac7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004acc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ad0:	29 f9                	sub    ecx,edi
c0004ad2:	0f b7 c0             	movzx  eax,ax
c0004ad5:	e8 d7 d0 ff ff       	call   c0001bb1 <put_utf>
c0004ada:	84 c0                	test   al,al
c0004adc:	74 e5                	je     c0004ac3 <get_fileinfo+0x138>
c0004ade:	0f b6 c0             	movzx  eax,al
c0004ae1:	01 c7                	add    edi,eax
c0004ae3:	89 e9                	mov    ecx,ebp
c0004ae5:	e9 4a ff ff ff       	jmp    c0004a34 <get_fileinfo+0xa9>
c0004aea:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004aef:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004af3:	75 54                	jne    c0004b49 <get_fileinfo+0x1be>
c0004af5:	85 ff                	test   edi,edi
c0004af7:	75 0b                	jne    c0004b04 <get_fileinfo+0x179>
c0004af9:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004afd:	ba 01 00 00 00       	mov    edx,0x1
c0004b02:	eb 33                	jmp    c0004b37 <get_fileinfo+0x1ac>
c0004b04:	b1 08                	mov    cl,0x8
c0004b06:	31 d2                	xor    edx,edx
c0004b08:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b0e:	84 c0                	test   al,al
c0004b10:	74 25                	je     c0004b37 <get_fileinfo+0x1ac>
c0004b12:	66 83 f8 2e          	cmp    ax,0x2e
c0004b16:	74 16                	je     c0004b2e <get_fileinfo+0x1a3>
c0004b18:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b1b:	66 83 ff 19          	cmp    di,0x19
c0004b1f:	77 0f                	ja     c0004b30 <get_fileinfo+0x1a5>
c0004b21:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b24:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b27:	74 07                	je     c0004b30 <get_fileinfo+0x1a5>
c0004b29:	83 c0 20             	add    eax,0x20
c0004b2c:	eb 02                	jmp    c0004b30 <get_fileinfo+0x1a5>
c0004b2e:	b1 10                	mov    cl,0x10
c0004b30:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b34:	42                   	inc    edx
c0004b35:	eb d1                	jmp    c0004b08 <get_fileinfo+0x17d>
c0004b37:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b3c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b43:	75 04                	jne    c0004b49 <get_fileinfo+0x1be>
c0004b45:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b49:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b4c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b4f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b55:	83 c0 1c             	add    eax,0x1c
c0004b58:	e8 c1 ce ff ff       	call   c0001a1e <ld_dword>
c0004b5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b64:	89 03                	mov    DWORD PTR [ebx],eax
c0004b66:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b69:	83 c0 16             	add    eax,0x16
c0004b6c:	e8 a0 ce ff ff       	call   c0001a11 <ld_word>
c0004b71:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	83 c0 18             	add    eax,0x18
c0004b7b:	e8 91 ce ff ff       	call   c0001a11 <ld_word>
c0004b80:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b84:	83 c4 1c             	add    esp,0x1c
c0004b87:	5b                   	pop    ebx
c0004b88:	5e                   	pop    esi
c0004b89:	5f                   	pop    edi
c0004b8a:	5d                   	pop    ebp
c0004b8b:	c3                   	ret    

c0004b8c <ld_clust.isra.0>:
c0004b8c:	56                   	push   esi
c0004b8d:	89 c6                	mov    esi,eax
c0004b8f:	53                   	push   ebx
c0004b90:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b93:	89 d3                	mov    ebx,edx
c0004b95:	e8 77 ce ff ff       	call   c0001a11 <ld_word>
c0004b9a:	0f b7 c8             	movzx  ecx,ax
c0004b9d:	89 f0                	mov    eax,esi
c0004b9f:	3c 03                	cmp    al,0x3
c0004ba1:	75 0d                	jne    c0004bb0 <ld_clust.isra.0+0x24>
c0004ba3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ba6:	e8 66 ce ff ff       	call   c0001a11 <ld_word>
c0004bab:	c1 e0 10             	shl    eax,0x10
c0004bae:	09 c1                	or     ecx,eax
c0004bb0:	89 c8                	mov    eax,ecx
c0004bb2:	5b                   	pop    ebx
c0004bb3:	5e                   	pop    esi
c0004bb4:	c3                   	ret    

c0004bb5 <st_clust.isra.1>:
c0004bb5:	56                   	push   esi
c0004bb6:	89 c6                	mov    esi,eax
c0004bb8:	53                   	push   ebx
c0004bb9:	89 d3                	mov    ebx,edx
c0004bbb:	0f b7 d1             	movzx  edx,cx
c0004bbe:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bc1:	e8 bd ce ff ff       	call   c0001a83 <st_word>
c0004bc6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bc9:	75 0f                	jne    c0004bda <st_clust.isra.1+0x25>
c0004bcb:	c1 e9 10             	shr    ecx,0x10
c0004bce:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd1:	89 ca                	mov    edx,ecx
c0004bd3:	5b                   	pop    ebx
c0004bd4:	5e                   	pop    esi
c0004bd5:	e9 a9 ce ff ff       	jmp    c0001a83 <st_word>
c0004bda:	5b                   	pop    ebx
c0004bdb:	5e                   	pop    esi
c0004bdc:	c3                   	ret    

c0004bdd <init_alloc_info.isra.2>:
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	89 c6                	mov    esi,eax
c0004be1:	89 d3                	mov    ebx,edx
c0004be3:	51                   	push   ecx
c0004be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0004be6:	83 c0 34             	add    eax,0x34
c0004be9:	e8 30 ce ff ff       	call   c0001a1e <ld_dword>
c0004bee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf3:	83 c0 38             	add    eax,0x38
c0004bf6:	e8 3b ce ff ff       	call   c0001a36 <ld_qword>
c0004bfb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bfe:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c01:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c03:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c06:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c0d:	83 e0 02             	and    eax,0x2
c0004c10:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c13:	5b                   	pop    ebx
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <follow_path>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c3                	mov    ebx,eax
c0004c1b:	83 ec 14             	sub    esp,0x14
c0004c1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c22:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c28:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c2a:	80 fa 5c             	cmp    dl,0x5c
c0004c2d:	75 07                	jne    c0004c36 <follow_path+0x1f>
c0004c2f:	40                   	inc    eax
c0004c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c34:	eb ee                	jmp    c0004c24 <follow_path+0xd>
c0004c36:	80 fa 2f             	cmp    dl,0x2f
c0004c39:	74 f4                	je     c0004c2f <follow_path+0x18>
c0004c3b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c42:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c49:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c4c:	77 52                	ja     c0004ca0 <follow_path+0x89>
c0004c4e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c52:	31 d2                	xor    edx,edx
c0004c54:	89 d8                	mov    eax,ebx
c0004c56:	e8 12 e3 ff ff       	call   c0002f6d <dir_sdi>
c0004c5b:	eb 7c                	jmp    c0004cd9 <follow_path+0xc2>
c0004c5d:	89 d8                	mov    eax,ebx
c0004c5f:	e8 6e f2 ff ff       	call   c0003ed2 <dir_find>
c0004c64:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c67:	85 c0                	test   eax,eax
c0004c69:	75 46                	jne    c0004cb1 <follow_path+0x9a>
c0004c6b:	80 e2 04             	and    dl,0x4
c0004c6e:	75 69                	jne    c0004cd9 <follow_path+0xc2>
c0004c70:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c74:	74 5e                	je     c0004cd4 <follow_path+0xbd>
c0004c76:	8a 06                	mov    al,BYTE PTR [esi]
c0004c78:	3c 04                	cmp    al,0x4
c0004c7a:	75 41                	jne    c0004cbd <follow_path+0xa6>
c0004c7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c7f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c83:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c86:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c89:	30 c0                	xor    al,al
c0004c8b:	09 d0                	or     eax,edx
c0004c8d:	89 da                	mov    edx,ebx
c0004c8f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c92:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c98:	8d 46 10             	lea    eax,[esi+0x10]
c0004c9b:	e8 3d ff ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ca0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ca4:	89 d8                	mov    eax,ebx
c0004ca6:	e8 a9 ed ff ff       	call   c0003a54 <create_name>
c0004cab:	85 c0                	test   eax,eax
c0004cad:	74 ae                	je     c0004c5d <follow_path+0x46>
c0004caf:	eb 28                	jmp    c0004cd9 <follow_path+0xc2>
c0004cb1:	83 f8 04             	cmp    eax,0x4
c0004cb4:	75 23                	jne    c0004cd9 <follow_path+0xc2>
c0004cb6:	80 e2 04             	and    dl,0x4
c0004cb9:	74 19                	je     c0004cd4 <follow_path+0xbd>
c0004cbb:	eb 1c                	jmp    c0004cd9 <follow_path+0xc2>
c0004cbd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cc0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cc6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cca:	e8 bd fe ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cd2:	eb cc                	jmp    c0004ca0 <follow_path+0x89>
c0004cd4:	b8 05 00 00 00       	mov    eax,0x5
c0004cd9:	83 c4 14             	add    esp,0x14
c0004cdc:	5b                   	pop    ebx
c0004cdd:	5e                   	pop    esi
c0004cde:	c3                   	ret    

c0004cdf <f_mount>:
c0004cdf:	53                   	push   ebx
c0004ce0:	83 ec 18             	sub    esp,0x18
c0004ce3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004ce7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004cf3:	e8 fb d2 ff ff       	call   c0001ff3 <get_ldnumber>
c0004cf8:	89 c2                	mov    edx,eax
c0004cfa:	b8 0b 00 00 00       	mov    eax,0xb
c0004cff:	85 d2                	test   edx,edx
c0004d01:	78 39                	js     c0004d3c <f_mount+0x5d>
c0004d03:	8b 04 95 e0 c8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3720]
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 03                	je     c0004d11 <f_mount+0x32>
c0004d0e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d15:	85 c0                	test   eax,eax
c0004d17:	74 03                	je     c0004d1c <f_mount+0x3d>
c0004d19:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d20:	89 04 95 e0 c8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3720],eax
c0004d27:	31 c0                	xor    eax,eax
c0004d29:	84 db                	test   bl,bl
c0004d2b:	74 0f                	je     c0004d3c <f_mount+0x5d>
c0004d2d:	31 c9                	xor    ecx,ecx
c0004d2f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d37:	e8 65 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d3c:	83 c4 18             	add    esp,0x18
c0004d3f:	5b                   	pop    ebx
c0004d40:	c3                   	ret    

c0004d41 <f_open>:
c0004d41:	55                   	push   ebp
c0004d42:	bd 09 00 00 00       	mov    ebp,0x9
c0004d47:	57                   	push   edi
c0004d48:	56                   	push   esi
c0004d49:	53                   	push   ebx
c0004d4a:	83 ec 7c             	sub    esp,0x7c
c0004d4d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d54:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d5b:	85 db                	test   ebx,ebx
c0004d5d:	0f 84 10 04 00 00    	je     c0005173 <f_open+0x432>
c0004d63:	89 fe                	mov    esi,edi
c0004d65:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d69:	83 e6 3f             	and    esi,0x3f
c0004d6c:	89 f0                	mov    eax,esi
c0004d6e:	0f b6 c8             	movzx  ecx,al
c0004d71:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d78:	e8 24 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d7d:	89 c5                	mov    ebp,eax
c0004d7f:	85 c0                	test   eax,eax
c0004d81:	0f 85 e6 03 00 00    	jne    c000516d <f_open+0x42c>
c0004d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d8b:	bd 11 00 00 00       	mov    ebp,0x11
c0004d90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d94:	83 ec 0c             	sub    esp,0xc
c0004d97:	68 60 04 00 00       	push   0x460
c0004d9c:	e8 a3 34 00 00       	call   c0008244 <ff_memalloc>
c0004da1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004da5:	83 c4 10             	add    esp,0x10
c0004da8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dad:	0f 84 c0 03 00 00    	je     c0005173 <f_open+0x432>
c0004db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dbb:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dc1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dc7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dce:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dd2:	e8 40 fe ff ff       	call   c0004c17 <follow_path>
c0004dd7:	89 c5                	mov    ebp,eax
c0004dd9:	85 c0                	test   eax,eax
c0004ddb:	75 0c                	jne    c0004de9 <f_open+0xa8>
c0004ddd:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004de2:	79 05                	jns    c0004de9 <f_open+0xa8>
c0004de4:	bd 06 00 00 00       	mov    ebp,0x6
c0004de9:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004def:	0f 84 84 01 00 00    	je     c0004f79 <f_open+0x238>
c0004df5:	85 ed                	test   ebp,ebp
c0004df7:	74 20                	je     c0004e19 <f_open+0xd8>
c0004df9:	83 fd 04             	cmp    ebp,0x4
c0004dfc:	0f 85 58 03 00 00    	jne    c000515a <f_open+0x419>
c0004e02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e06:	83 ce 08             	or     esi,0x8
c0004e09:	e8 8a f2 ff ff       	call   c0004098 <dir_register>
c0004e0e:	89 c5                	mov    ebp,eax
c0004e10:	85 c0                	test   eax,eax
c0004e12:	74 2f                	je     c0004e43 <f_open+0x102>
c0004e14:	e9 41 03 00 00       	jmp    c000515a <f_open+0x419>
c0004e19:	bd 07 00 00 00       	mov    ebp,0x7
c0004e1e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e23:	0f 85 31 03 00 00    	jne    c000515a <f_open+0x419>
c0004e29:	bd 08 00 00 00       	mov    ebp,0x8
c0004e2e:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e34:	0f 85 20 03 00 00    	jne    c000515a <f_open+0x419>
c0004e3a:	83 e7 08             	and    edi,0x8
c0004e3d:	0f 84 65 01 00 00    	je     c0004fa8 <f_open+0x267>
c0004e43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e47:	8a 02                	mov    al,BYTE PTR [edx]
c0004e49:	3c 04                	cmp    al,0x4
c0004e4b:	0f 85 97 00 00 00    	jne    c0004ee8 <f_open+0x1a7>
c0004e51:	8d 42 10             	lea    eax,[edx+0x10]
c0004e54:	89 13                	mov    DWORD PTR [ebx],edx
c0004e56:	89 da                	mov    edx,ebx
c0004e58:	e8 80 fd ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004e5d:	31 d2                	xor    edx,edx
c0004e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e63:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e6b:	83 c0 02             	add    eax,0x2
c0004e6e:	e8 32 cc ff ff       	call   c0001aa5 <mem_set>
c0004e73:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e78:	31 d2                	xor    edx,edx
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e81:	83 c0 26             	add    eax,0x26
c0004e84:	e8 1c cc ff ff       	call   c0001aa5 <mem_set>
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e90:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e94:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9c:	83 c0 08             	add    eax,0x8
c0004e9f:	e8 e3 cb ff ff       	call   c0001a87 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eab:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004eaf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb3:	e8 b7 ea ff ff       	call   c000396f <store_xdir>
c0004eb8:	89 c5                	mov    ebp,eax
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 98 02 00 00    	jne    c000515a <f_open+0x419>
c0004ec2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ec5:	85 d2                	test   edx,edx
c0004ec7:	0f 84 db 00 00 00    	je     c0004fa8 <f_open+0x267>
c0004ecd:	31 c9                	xor    ecx,ecx
c0004ecf:	89 d8                	mov    eax,ebx
c0004ed1:	e8 8e e3 ff ff       	call   c0003264 <remove_chain>
c0004ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eda:	89 c5                	mov    ebp,eax
c0004edc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004edf:	48                   	dec    eax
c0004ee0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ee3:	e9 b8 00 00 00       	jmp    c0004fa0 <f_open+0x25f>
c0004ee8:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004eec:	89 ea                	mov    edx,ebp
c0004eee:	e8 99 fc ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ef3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef8:	89 c7                	mov    edi,eax
c0004efa:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004efd:	e8 85 cb ff ff       	call   c0001a87 <st_dword>
c0004f02:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f10:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f14:	e8 9c fc ff ff       	call   c0004bb5 <st_clust.isra.1>
c0004f19:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f1d:	31 d2                	xor    edx,edx
c0004f1f:	83 c0 1c             	add    eax,0x1c
c0004f22:	e8 60 cb ff ff       	call   c0001a87 <st_dword>
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 ff                	test   edi,edi
c0004f2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f31:	74 75                	je     c0004fa8 <f_open+0x267>
c0004f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f37:	31 c9                	xor    ecx,ecx
c0004f39:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f3c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f47:	89 fa                	mov    edx,edi
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 12 e3 ff ff       	call   c0003264 <remove_chain>
c0004f52:	89 c5                	mov    ebp,eax
c0004f54:	85 c0                	test   eax,eax
c0004f56:	0f 85 fe 01 00 00    	jne    c000515a <f_open+0x419>
c0004f5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f68:	4f                   	dec    edi
c0004f69:	e8 81 d2 ff ff       	call   c00021ef <move_window>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f74:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f77:	eb 27                	jmp    c0004fa0 <f_open+0x25f>
c0004f79:	85 ed                	test   ebp,ebp
c0004f7b:	0f 85 d9 01 00 00    	jne    c000515a <f_open+0x419>
c0004f81:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f85:	bd 04 00 00 00       	mov    ebp,0x4
c0004f8a:	a8 10                	test   al,0x10
c0004f8c:	0f 85 c8 01 00 00    	jne    c000515a <f_open+0x419>
c0004f92:	83 e7 02             	and    edi,0x2
c0004f95:	74 11                	je     c0004fa8 <f_open+0x267>
c0004f97:	bd 07 00 00 00       	mov    ebp,0x7
c0004f9c:	a8 01                	test   al,0x1
c0004f9e:	eb 02                	jmp    c0004fa2 <f_open+0x261>
c0004fa0:	85 ed                	test   ebp,ebp
c0004fa2:	0f 85 b2 01 00 00    	jne    c000515a <f_open+0x419>
c0004fa8:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fae:	74 03                	je     c0004fb3 <f_open+0x272>
c0004fb0:	83 ce 40             	or     esi,0x40
c0004fb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fb7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fba:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fbd:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fc0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fc3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fc7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fca:	8a 02                	mov    al,BYTE PTR [edx]
c0004fcc:	3c 04                	cmp    al,0x4
c0004fce:	75 2a                	jne    c0004ffa <f_open+0x2b9>
c0004fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fd4:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fd9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fe0:	30 c0                	xor    al,al
c0004fe2:	09 c8                	or     eax,ecx
c0004fe4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fe7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004feb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fee:	8d 42 10             	lea    eax,[edx+0x10]
c0004ff1:	89 da                	mov    edx,ebx
c0004ff3:	e8 e5 fb ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ff8:	eb 1c                	jmp    c0005016 <f_open+0x2d5>
c0004ffa:	89 fa                	mov    edx,edi
c0004ffc:	e8 8b fb ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005001:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005004:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005007:	e8 12 ca ff ff       	call   c0001a1e <ld_dword>
c000500c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005013:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000501a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005021:	89 03                	mov    DWORD PTR [ebx],eax
c0005023:	31 d2                	xor    edx,edx
c0005025:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005029:	b9 00 02 00 00       	mov    ecx,0x200
c000502e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005032:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005036:	89 f0                	mov    eax,esi
c0005038:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000503f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005042:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005049:	8d 43 50             	lea    eax,[ebx+0x50]
c000504c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005053:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000505a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000505e:	e8 42 ca ff ff       	call   c0001aa5 <mem_set>
c0005063:	83 e6 20             	and    esi,0x20
c0005066:	75 07                	jne    c000506f <f_open+0x32e>
c0005068:	31 ed                	xor    ebp,ebp
c000506a:	e9 eb 00 00 00       	jmp    c000515a <f_open+0x419>
c000506f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005072:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000507d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005081:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005085:	74 e1                	je     c0005068 <f_open+0x327>
c0005087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000508b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000508f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005092:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005099:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000509c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050a0:	31 ff                	xor    edi,edi
c00050a2:	c1 e5 09             	shl    ebp,0x9
c00050a5:	89 ee                	mov    esi,ebp
c00050a7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ab:	89 f8                	mov    eax,edi
c00050ad:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050b1:	73 22                	jae    c00050d5 <f_open+0x394>
c00050b3:	89 d8                	mov    eax,ebx
c00050b5:	e8 bd dc ff ff       	call   c0002d77 <get_fat>
c00050ba:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050be:	89 c2                	mov    edx,eax
c00050c0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050c4:	83 f8 01             	cmp    eax,0x1
c00050c7:	76 10                	jbe    c00050d9 <f_open+0x398>
c00050c9:	83 f8 ff             	cmp    eax,0xffffffff
c00050cc:	75 d9                	jne    c00050a7 <f_open+0x366>
c00050ce:	bd 01 00 00 00       	mov    ebp,0x1
c00050d3:	eb 09                	jmp    c00050de <f_open+0x39d>
c00050d5:	31 ed                	xor    ebp,ebp
c00050d7:	eb 05                	jmp    c00050de <f_open+0x39d>
c00050d9:	bd 02 00 00 00       	mov    ebp,0x2
c00050de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050e1:	85 ed                	test   ebp,ebp
c00050e3:	75 75                	jne    c000515a <f_open+0x419>
c00050e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e9:	25 ff 01 00 00       	and    eax,0x1ff
c00050ee:	0f 84 74 ff ff ff    	je     c0005068 <f_open+0x327>
c00050f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050f8:	bd 02 00 00 00       	mov    ebp,0x2
c00050fd:	89 c8                	mov    eax,ecx
c00050ff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005103:	e8 a2 cb ff ff       	call   c0001caa <clst2sect>
c0005108:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000510c:	89 d7                	mov    edi,edx
c000510e:	09 c7                	or     edi,eax
c0005110:	74 48                	je     c000515a <f_open+0x419>
c0005112:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000511a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005122:	0f ac fe 09          	shrd   esi,edi,0x9
c0005126:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000512a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000512e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005135:	83 ec 0c             	sub    esp,0xc
c0005138:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000513b:	6a 01                	push   0x1
c000513d:	52                   	push   edx
c000513e:	50                   	push   eax
c000513f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005143:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005147:	50                   	push   eax
c0005148:	e8 79 c8 ff ff       	call   c00019c6 <disk_read>
c000514d:	83 c4 20             	add    esp,0x20
c0005150:	85 c0                	test   eax,eax
c0005152:	0f 95 c0             	setne  al
c0005155:	0f b6 c0             	movzx  eax,al
c0005158:	89 c5                	mov    ebp,eax
c000515a:	83 ec 0c             	sub    esp,0xc
c000515d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005161:	e8 f4 30 00 00       	call   c000825a <ff_memfree>
c0005166:	83 c4 10             	add    esp,0x10
c0005169:	85 ed                	test   ebp,ebp
c000516b:	74 06                	je     c0005173 <f_open+0x432>
c000516d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005173:	83 c4 7c             	add    esp,0x7c
c0005176:	89 e8                	mov    eax,ebp
c0005178:	5b                   	pop    ebx
c0005179:	5e                   	pop    esi
c000517a:	5f                   	pop    edi
c000517b:	5d                   	pop    ebp
c000517c:	c3                   	ret    

c000517d <f_read>:
c000517d:	55                   	push   ebp
c000517e:	57                   	push   edi
c000517f:	56                   	push   esi
c0005180:	53                   	push   ebx
c0005181:	83 ec 2c             	sub    esp,0x2c
c0005184:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005188:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000518c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005192:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005196:	89 d8                	mov    eax,ebx
c0005198:	e8 77 cf ff ff       	call   c0002114 <validate>
c000519d:	89 c5                	mov    ebp,eax
c000519f:	85 c0                	test   eax,eax
c00051a1:	0f 85 4c 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051a7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 40 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051b3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051b7:	0f 84 31 02 00 00    	je     c00053ee <f_read+0x271>
c00051bd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051c0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051c3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051c6:	bf 00 00 00 00       	mov    edi,0x0
c00051cb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051d2:	89 d1                	mov    ecx,edx
c00051d4:	19 f9                	sbb    ecx,edi
c00051d6:	0f 83 cf 00 00 00    	jae    c00052ab <f_read+0x12e>
c00051dc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051e0:	e9 c6 00 00 00       	jmp    c00052ab <f_read+0x12e>
c00051e5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051e8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051eb:	89 d0                	mov    eax,edx
c00051ed:	25 ff 01 00 00       	and    eax,0x1ff
c00051f2:	0f 85 c9 01 00 00    	jne    c00053c1 <f_read+0x244>
c00051f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051fc:	89 d6                	mov    esi,edx
c00051fe:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005202:	89 cf                	mov    edi,ecx
c0005204:	48                   	dec    eax
c0005205:	0f ac fe 09          	shrd   esi,edi,0x9
c0005209:	21 f0                	and    eax,esi
c000520b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000520f:	0f 84 a6 00 00 00    	je     c00052bb <f_read+0x13e>
c0005215:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005219:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000521c:	89 c8                	mov    eax,ecx
c000521e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005221:	e8 84 ca ff ff       	call   c0001caa <clst2sect>
c0005226:	89 d7                	mov    edi,edx
c0005228:	09 c7                	or     edi,eax
c000522a:	0f 84 b4 00 00 00    	je     c00052e4 <f_read+0x167>
c0005230:	31 ff                	xor    edi,edi
c0005232:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005236:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005239:	01 c6                	add    esi,eax
c000523b:	11 d7                	adc    edi,edx
c000523d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005245:	0f 86 fd 00 00 00    	jbe    c0005348 <f_read+0x1cb>
c000524b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000524f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005253:	c1 e8 09             	shr    eax,0x9
c0005256:	89 04 24             	mov    DWORD PTR [esp],eax
c0005259:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000525d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005260:	39 c2                	cmp    edx,eax
c0005262:	76 07                	jbe    c000526b <f_read+0xee>
c0005264:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005268:	89 04 24             	mov    DWORD PTR [esp],eax
c000526b:	83 ec 0c             	sub    esp,0xc
c000526e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005272:	57                   	push   edi
c0005273:	56                   	push   esi
c0005274:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005278:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000527c:	50                   	push   eax
c000527d:	e8 44 c7 ff ff       	call   c00019c6 <disk_read>
c0005282:	83 c4 20             	add    esp,0x20
c0005285:	85 c0                	test   eax,eax
c0005287:	75 6e                	jne    c00052f7 <f_read+0x17a>
c0005289:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000528d:	78 7e                	js     c000530d <f_read+0x190>
c000528f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005292:	c1 e6 09             	shl    esi,0x9
c0005295:	31 ff                	xor    edi,edi
c0005297:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000529b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000529f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052a3:	01 30                	add    DWORD PTR [eax],esi
c00052a5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052a8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052b0:	0f 85 2f ff ff ff    	jne    c00051e5 <f_read+0x68>
c00052b6:	e9 38 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052bb:	89 c8                	mov    eax,ecx
c00052bd:	09 d0                	or     eax,edx
c00052bf:	75 05                	jne    c00052c6 <f_read+0x149>
c00052c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052c4:	eb 19                	jmp    c00052df <f_read+0x162>
c00052c6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ca:	74 09                	je     c00052d5 <f_read+0x158>
c00052cc:	89 d8                	mov    eax,ebx
c00052ce:	e8 f8 c9 ff ff       	call   c0001ccb <clmt_clust>
c00052d3:	eb 0a                	jmp    c00052df <f_read+0x162>
c00052d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 98 da ff ff       	call   c0002d77 <get_fat>
c00052df:	83 f8 01             	cmp    eax,0x1
c00052e2:	77 0e                	ja     c00052f2 <f_read+0x175>
c00052e4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052e8:	bd 02 00 00 00       	mov    ebp,0x2
c00052ed:	e9 01 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052f2:	83 f8 ff             	cmp    eax,0xffffffff
c00052f5:	75 0e                	jne    c0005305 <f_read+0x188>
c00052f7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052fb:	bd 01 00 00 00       	mov    ebp,0x1
c0005300:	e9 ee 00 00 00       	jmp    c00053f3 <f_read+0x276>
c0005305:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005308:	e9 08 ff ff ff       	jmp    c0005215 <f_read+0x98>
c000530d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005310:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005313:	29 f0                	sub    eax,esi
c0005315:	19 fa                	sbb    edx,edi
c0005317:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000531a:	89 d7                	mov    edi,edx
c000531c:	ba 00 00 00 00       	mov    edx,0x0
c0005321:	89 f9                	mov    ecx,edi
c0005323:	19 d1                	sbb    ecx,edx
c0005325:	0f 83 64 ff ff ff    	jae    c000528f <f_read+0x112>
c000532b:	89 c7                	mov    edi,eax
c000532d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005337:	b9 00 02 00 00       	mov    ecx,0x200
c000533c:	01 f8                	add    eax,edi
c000533e:	e8 4d c7 ff ff       	call   c0001a90 <mem_cpy>
c0005343:	e9 47 ff ff ff       	jmp    c000528f <f_read+0x112>
c0005348:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005355:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005359:	75 05                	jne    c0005360 <f_read+0x1e3>
c000535b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000535e:	74 5b                	je     c00053bb <f_read+0x23e>
c0005360:	8d 43 50             	lea    eax,[ebx+0x50]
c0005363:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000536b:	79 2a                	jns    c0005397 <f_read+0x21a>
c000536d:	83 ec 0c             	sub    esp,0xc
c0005370:	6a 01                	push   0x1
c0005372:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000537a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000537e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005382:	50                   	push   eax
c0005383:	e8 54 c6 ff ff       	call   c00019dc <disk_write>
c0005388:	83 c4 20             	add    esp,0x20
c000538b:	85 c0                	test   eax,eax
c000538d:	0f 85 64 ff ff ff    	jne    c00052f7 <f_read+0x17a>
c0005393:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005397:	83 ec 0c             	sub    esp,0xc
c000539a:	6a 01                	push   0x1
c000539c:	57                   	push   edi
c000539d:	56                   	push   esi
c000539e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053aa:	50                   	push   eax
c00053ab:	e8 16 c6 ff ff       	call   c00019c6 <disk_read>
c00053b0:	83 c4 20             	add    esp,0x20
c00053b3:	85 c0                	test   eax,eax
c00053b5:	0f 85 3c ff ff ff    	jne    c00052f7 <f_read+0x17a>
c00053bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053c4:	ba 00 02 00 00       	mov    edx,0x200
c00053c9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053d2:	29 c2                	sub    edx,eax
c00053d4:	39 d6                	cmp    esi,edx
c00053d6:	76 02                	jbe    c00053da <f_read+0x25d>
c00053d8:	89 d6                	mov    esi,edx
c00053da:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053de:	89 f1                	mov    ecx,esi
c00053e0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e4:	e8 a7 c6 ff ff       	call   c0001a90 <mem_cpy>
c00053e9:	e9 a7 fe ff ff       	jmp    c0005295 <f_read+0x118>
c00053ee:	bd 07 00 00 00       	mov    ebp,0x7
c00053f3:	83 c4 2c             	add    esp,0x2c
c00053f6:	89 e8                	mov    eax,ebp
c00053f8:	5b                   	pop    ebx
c00053f9:	5e                   	pop    esi
c00053fa:	5f                   	pop    edi
c00053fb:	5d                   	pop    ebp
c00053fc:	c3                   	ret    

c00053fd <f_write>:
c00053fd:	55                   	push   ebp
c00053fe:	57                   	push   edi
c00053ff:	56                   	push   esi
c0005400:	53                   	push   ebx
c0005401:	83 ec 2c             	sub    esp,0x2c
c0005404:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000540c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005412:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f7 cc ff ff       	call   c0002114 <validate>
c000541d:	89 c5                	mov    ebp,eax
c000541f:	85 c0                	test   eax,eax
c0005421:	0f 85 86 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005427:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000542b:	85 ed                	test   ebp,ebp
c000542d:	0f 85 7a 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005433:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005437:	0f 84 6b 02 00 00    	je     c00056a8 <f_write+0x2ab>
c000543d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005441:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005444:	0f 84 43 01 00 00    	je     c000558d <f_write+0x190>
c000544a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000544d:	89 c1                	mov    ecx,eax
c000544f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005453:	0f 83 34 01 00 00    	jae    c000558d <f_write+0x190>
c0005459:	f7 d0                	not    eax
c000545b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000545f:	e9 29 01 00 00       	jmp    c000558d <f_write+0x190>
c0005464:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005467:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000546a:	89 d0                	mov    eax,edx
c000546c:	25 ff 01 00 00       	and    eax,0x1ff
c0005471:	0f 85 00 02 00 00    	jne    c0005677 <f_write+0x27a>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	89 d6                	mov    esi,edx
c000547d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005481:	89 cf                	mov    edi,ecx
c0005483:	48                   	dec    eax
c0005484:	0f ac fe 09          	shrd   esi,edi,0x9
c0005488:	21 f0                	and    eax,esi
c000548a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000548e:	0f 84 06 01 00 00    	je     c000559a <f_write+0x19d>
c0005494:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005498:	0f 88 6e 01 00 00    	js     c000560c <f_write+0x20f>
c000549e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054a2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054a5:	89 c8                	mov    eax,ecx
c00054a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ab:	e8 fa c7 ff ff       	call   c0001caa <clst2sect>
c00054b0:	89 d1                	mov    ecx,edx
c00054b2:	09 c1                	or     ecx,eax
c00054b4:	0f 84 1c 01 00 00    	je     c00055d6 <f_write+0x1d9>
c00054ba:	31 ff                	xor    edi,edi
c00054bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054c4:	01 c6                	add    esi,eax
c00054c6:	11 d7                	adc    edi,edx
c00054c8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054d0:	0f 86 63 01 00 00    	jbe    c0005639 <f_write+0x23c>
c00054d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054de:	c1 e8 09             	shr    eax,0x9
c00054e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054e9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054ed:	39 c2                	cmp    edx,eax
c00054ef:	76 08                	jbe    c00054f9 <f_write+0xfc>
c00054f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054f9:	83 ec 0c             	sub    esp,0xc
c00054fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005500:	57                   	push   edi
c0005501:	56                   	push   esi
c0005502:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005506:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000550a:	50                   	push   eax
c000550b:	e8 cc c4 ff ff       	call   c00019dc <disk_write>
c0005510:	83 c4 20             	add    esp,0x20
c0005513:	85 c0                	test   eax,eax
c0005515:	0f 85 ce 00 00 00    	jne    c00055e9 <f_write+0x1ec>
c000551b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000551e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005521:	29 f0                	sub    eax,esi
c0005523:	19 fa                	sbb    edx,edi
c0005525:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005529:	89 d7                	mov    edi,edx
c000552b:	ba 00 00 00 00       	mov    edx,0x0
c0005530:	89 f9                	mov    ecx,edi
c0005532:	19 d1                	sbb    ecx,edx
c0005534:	73 1c                	jae    c0005552 <f_write+0x155>
c0005536:	89 c7                	mov    edi,eax
c0005538:	b9 00 02 00 00       	mov    ecx,0x200
c000553d:	c1 e7 09             	shl    edi,0x9
c0005540:	8d 43 50             	lea    eax,[ebx+0x50]
c0005543:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005547:	89 fa                	mov    edx,edi
c0005549:	e8 42 c5 ff ff       	call   c0001a90 <mem_cpy>
c000554e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005552:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005556:	c1 e6 09             	shl    esi,0x9
c0005559:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000555d:	31 ff                	xor    edi,edi
c000555f:	01 30                	add    DWORD PTR [eax],esi
c0005561:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005565:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005569:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000556c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000556f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005572:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005575:	89 c1                	mov    ecx,eax
c0005577:	39 f2                	cmp    edx,esi
c0005579:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000557c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000557f:	19 f9                	sbb    ecx,edi
c0005581:	73 04                	jae    c0005587 <f_write+0x18a>
c0005583:	89 f2                	mov    edx,esi
c0005585:	89 f8                	mov    eax,edi
c0005587:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000558a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000558d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005592:	0f 85 cc fe ff ff    	jne    c0005464 <f_write+0x67>
c0005598:	eb 2e                	jmp    c00055c8 <f_write+0x1cb>
c000559a:	89 c8                	mov    eax,ecx
c000559c:	09 d0                	or     eax,edx
c000559e:	75 0b                	jne    c00055ab <f_write+0x1ae>
c00055a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055a3:	31 d2                	xor    edx,edx
c00055a5:	85 c0                	test   eax,eax
c00055a7:	75 28                	jne    c00055d1 <f_write+0x1d4>
c00055a9:	eb 12                	jmp    c00055bd <f_write+0x1c0>
c00055ab:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055af:	74 09                	je     c00055ba <f_write+0x1bd>
c00055b1:	89 d8                	mov    eax,ebx
c00055b3:	e8 13 c7 ff ff       	call   c0001ccb <clmt_clust>
c00055b8:	eb 0a                	jmp    c00055c4 <f_write+0x1c7>
c00055ba:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055bd:	89 d8                	mov    eax,ebx
c00055bf:	e8 a1 da ff ff       	call   c0003065 <create_chain>
c00055c4:	85 c0                	test   eax,eax
c00055c6:	75 09                	jne    c00055d1 <f_write+0x1d4>
c00055c8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055cc:	e9 dc 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055d1:	83 f8 01             	cmp    eax,0x1
c00055d4:	75 0e                	jne    c00055e4 <f_write+0x1e7>
c00055d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055da:	bd 02 00 00 00       	mov    ebp,0x2
c00055df:	e9 c9 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055e4:	83 f8 ff             	cmp    eax,0xffffffff
c00055e7:	75 0e                	jne    c00055f7 <f_write+0x1fa>
c00055e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055ed:	bd 01 00 00 00       	mov    ebp,0x1
c00055f2:	e9 b6 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055fa:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055fe:	0f 85 90 fe ff ff    	jne    c0005494 <f_write+0x97>
c0005604:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005607:	e9 88 fe ff ff       	jmp    c0005494 <f_write+0x97>
c000560c:	83 ec 0c             	sub    esp,0xc
c000560f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005612:	6a 01                	push   0x1
c0005614:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005617:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000561a:	50                   	push   eax
c000561b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005623:	50                   	push   eax
c0005624:	e8 b3 c3 ff ff       	call   c00019dc <disk_write>
c0005629:	83 c4 20             	add    esp,0x20
c000562c:	85 c0                	test   eax,eax
c000562e:	75 b9                	jne    c00055e9 <f_write+0x1ec>
c0005630:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005634:	e9 65 fe ff ff       	jmp    c000549e <f_write+0xa1>
c0005639:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000563c:	75 05                	jne    c0005643 <f_write+0x246>
c000563e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005641:	74 2e                	je     c0005671 <f_write+0x274>
c0005643:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005646:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005649:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000564c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000564f:	73 20                	jae    c0005671 <f_write+0x274>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	57                   	push   edi
c000565a:	56                   	push   esi
c000565b:	50                   	push   eax
c000565c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005660:	50                   	push   eax
c0005661:	e8 60 c3 ff ff       	call   c00019c6 <disk_read>
c0005666:	83 c4 20             	add    esp,0x20
c0005669:	85 c0                	test   eax,eax
c000566b:	0f 85 78 ff ff ff    	jne    c00055e9 <f_write+0x1ec>
c0005671:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005674:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005677:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567a:	ba 00 02 00 00       	mov    edx,0x200
c000567f:	25 ff 01 00 00       	and    eax,0x1ff
c0005684:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005688:	29 c2                	sub    edx,eax
c000568a:	39 d6                	cmp    esi,edx
c000568c:	76 02                	jbe    c0005690 <f_write+0x293>
c000568e:	89 d6                	mov    esi,edx
c0005690:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005694:	89 f1                	mov    ecx,esi
c0005696:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000569a:	e8 f1 c3 ff ff       	call   c0001a90 <mem_cpy>
c000569f:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056a3:	e9 b1 fe ff ff       	jmp    c0005559 <f_write+0x15c>
c00056a8:	bd 07 00 00 00       	mov    ebp,0x7
c00056ad:	83 c4 2c             	add    esp,0x2c
c00056b0:	89 e8                	mov    eax,ebp
c00056b2:	5b                   	pop    ebx
c00056b3:	5e                   	pop    esi
c00056b4:	5f                   	pop    edi
c00056b5:	5d                   	pop    ebp
c00056b6:	c3                   	ret    

c00056b7 <f_sync>:
c00056b7:	56                   	push   esi
c00056b8:	53                   	push   ebx
c00056b9:	83 ec 64             	sub    esp,0x64
c00056bc:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056c4:	89 d8                	mov    eax,ebx
c00056c6:	e8 49 ca ff ff       	call   c0002114 <validate>
c00056cb:	85 c0                	test   eax,eax
c00056cd:	0f 85 ba 01 00 00    	jne    c000588d <f_sync+0x1d6>
c00056d3:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056d6:	f6 c2 40             	test   dl,0x40
c00056d9:	0f 84 ae 01 00 00    	je     c000588d <f_sync+0x1d6>
c00056df:	84 d2                	test   dl,dl
c00056e1:	79 33                	jns    c0005716 <f_sync+0x5f>
c00056e3:	83 ec 0c             	sub    esp,0xc
c00056e6:	8d 43 50             	lea    eax,[ebx+0x50]
c00056e9:	6a 01                	push   0x1
c00056eb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056f1:	50                   	push   eax
c00056f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056fa:	50                   	push   eax
c00056fb:	e8 dc c2 ff ff       	call   c00019dc <disk_write>
c0005700:	83 c4 20             	add    esp,0x20
c0005703:	89 c2                	mov    edx,eax
c0005705:	b8 01 00 00 00       	mov    eax,0x1
c000570a:	85 d2                	test   edx,edx
c000570c:	0f 85 7b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005712:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000571d:	0f 85 11 01 00 00    	jne    c0005834 <f_sync+0x17d>
c0005723:	89 d8                	mov    eax,ebx
c0005725:	e8 13 d6 ff ff       	call   c0002d3d <fill_first_frag>
c000572a:	85 c0                	test   eax,eax
c000572c:	0f 85 5b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005732:	83 c9 ff             	or     ecx,0xffffffff
c0005735:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005738:	89 d8                	mov    eax,ebx
c000573a:	e8 c9 d5 ff ff       	call   c0002d08 <fill_last_frag>
c000573f:	85 c0                	test   eax,eax
c0005741:	0f 85 46 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005747:	83 ec 0c             	sub    esp,0xc
c000574a:	68 60 04 00 00       	push   0x460
c000574f:	e8 f0 2a 00 00       	call   c0008244 <ff_memalloc>
c0005754:	83 c4 10             	add    esp,0x10
c0005757:	89 c6                	mov    esi,eax
c0005759:	b8 11 00 00 00       	mov    eax,0x11
c000575e:	85 f6                	test   esi,esi
c0005760:	0f 84 27 01 00 00    	je     c000588d <f_sync+0x1d6>
c0005766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005770:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005773:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005776:	89 da                	mov    edx,ebx
c0005778:	8d 44 24 14          	lea    eax,[esp+0x14]
c000577c:	e8 af df ff ff       	call   c0003730 <load_obj_xdir>
c0005781:	85 c0                	test   eax,eax
c0005783:	0f 85 95 00 00 00    	jne    c000581e <f_sync+0x167>
c0005789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005790:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005794:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005797:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000579a:	83 ca 01             	or     edx,0x1
c000579d:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057a0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a6:	83 c0 34             	add    eax,0x34
c00057a9:	e8 d9 c2 ff ff       	call   c0001a87 <st_dword>
c00057ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057bb:	83 c0 38             	add    eax,0x38
c00057be:	e8 c7 c2 ff ff       	call   c0001a8a <st_qword>
c00057c3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d0:	83 c0 28             	add    eax,0x28
c00057d3:	e8 b2 c2 ff ff       	call   c0001a8a <st_qword>
c00057d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057dc:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e4:	83 c0 0c             	add    eax,0xc
c00057e7:	e8 9b c2 ff ff       	call   c0001a87 <st_dword>
c00057ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057f3:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057f7:	31 d2                	xor    edx,edx
c00057f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fc:	83 c0 10             	add    eax,0x10
c00057ff:	e8 83 c2 ff ff       	call   c0001a87 <st_dword>
c0005804:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005808:	e8 62 e1 ff ff       	call   c000396f <store_xdir>
c000580d:	85 c0                	test   eax,eax
c000580f:	75 0d                	jne    c000581e <f_sync+0x167>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	e8 00 eb ff ff       	call   c000431a <sync_fs>
c000581a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000581e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	56                   	push   esi
c0005826:	e8 2f 2a 00 00       	call   c000825a <ff_memfree>
c000582b:	83 c4 10             	add    esp,0x10
c000582e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005832:	eb 59                	jmp    c000588d <f_sync+0x1d6>
c0005834:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005837:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000583a:	e8 b0 c9 ff ff       	call   c00021ef <move_window>
c000583f:	85 c0                	test   eax,eax
c0005841:	75 4a                	jne    c000588d <f_sync+0x1d6>
c0005843:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005846:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000584a:	89 f2                	mov    edx,esi
c000584c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000584f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005851:	e8 5f f3 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0005856:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005859:	8d 46 1c             	lea    eax,[esi+0x1c]
c000585c:	e8 26 c2 ff ff       	call   c0001a87 <st_dword>
c0005861:	8d 46 16             	lea    eax,[esi+0x16]
c0005864:	ba 00 00 21 50       	mov    edx,0x50210000
c0005869:	e8 19 c2 ff ff       	call   c0001a87 <st_dword>
c000586e:	8d 46 12             	lea    eax,[esi+0x12]
c0005871:	31 d2                	xor    edx,edx
c0005873:	e8 0b c2 ff ff       	call   c0001a83 <st_word>
c0005878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000587c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005884:	e8 91 ea ff ff       	call   c000431a <sync_fs>
c0005889:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000588d:	83 c4 64             	add    esp,0x64
c0005890:	5b                   	pop    ebx
c0005891:	5e                   	pop    esi
c0005892:	c3                   	ret    

c0005893 <f_close>:
c0005893:	53                   	push   ebx
c0005894:	83 ec 24             	sub    esp,0x24
c0005897:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000589b:	53                   	push   ebx
c000589c:	e8 16 fe ff ff       	call   c00056b7 <f_sync>
c00058a1:	83 c4 10             	add    esp,0x10
c00058a4:	85 c0                	test   eax,eax
c00058a6:	75 15                	jne    c00058bd <f_close+0x2a>
c00058a8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058ac:	89 d8                	mov    eax,ebx
c00058ae:	e8 61 c8 ff ff       	call   c0002114 <validate>
c00058b3:	85 c0                	test   eax,eax
c00058b5:	75 06                	jne    c00058bd <f_close+0x2a>
c00058b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058bd:	83 c4 18             	add    esp,0x18
c00058c0:	5b                   	pop    ebx
c00058c1:	c3                   	ret    

c00058c2 <f_lseek>:
c00058c2:	55                   	push   ebp
c00058c3:	57                   	push   edi
c00058c4:	56                   	push   esi
c00058c5:	53                   	push   ebx
c00058c6:	83 ec 3c             	sub    esp,0x3c
c00058c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058cd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058d1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00058d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058e2:	e8 2d c8 ff ff       	call   c0002114 <validate>
c00058e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058eb:	85 c0                	test   eax,eax
c00058ed:	0f 85 7a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c00058f3:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058fb:	85 c0                	test   eax,eax
c00058fd:	0f 85 6a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c0005903:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005907:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000590a:	74 0c                	je     c0005918 <f_lseek+0x56>
c000590c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000590f:	85 c0                	test   eax,eax
c0005911:	75 1f                	jne    c0005932 <f_lseek+0x70>
c0005913:	e9 b5 01 00 00       	jmp    c0005acd <f_lseek+0x20b>
c0005918:	83 c9 ff             	or     ecx,0xffffffff
c000591b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000591e:	89 d8                	mov    eax,ebx
c0005920:	e8 e3 d3 ff ff       	call   c0002d08 <fill_last_frag>
c0005925:	85 c0                	test   eax,eax
c0005927:	74 e3                	je     c000590c <f_lseek+0x4a>
c0005929:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592d:	e9 3b 04 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c0005932:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005937:	0f 85 ac 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c000593d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005941:	0f 85 a2 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c0005947:	8d 78 04             	lea    edi,[eax+0x4]
c000594a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000594d:	8b 00                	mov    eax,DWORD PTR [eax]
c000594f:	be 02 00 00 00       	mov    esi,0x2
c0005954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005958:	85 ed                	test   ebp,ebp
c000595a:	74 73                	je     c00059cf <f_lseek+0x10d>
c000595c:	89 e9                	mov    ecx,ebp
c000595e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005965:	ff 04 24             	inc    DWORD PTR [esp]
c0005968:	89 ca                	mov    edx,ecx
c000596a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000596e:	89 d8                	mov    eax,ebx
c0005970:	e8 02 d4 ff ff       	call   c0002d77 <get_fat>
c0005975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005979:	83 f8 01             	cmp    eax,0x1
c000597c:	77 11                	ja     c000598f <f_lseek+0xcd>
c000597e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005982:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000598a:	e9 de 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c000598f:	83 f8 ff             	cmp    eax,0xffffffff
c0005992:	75 11                	jne    c00059a5 <f_lseek+0xe3>
c0005994:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005998:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059a0:	e9 c8 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00059a8:	89 c1                	mov    ecx,eax
c00059aa:	39 c2                	cmp    edx,eax
c00059ac:	74 b7                	je     c0005965 <f_lseek+0xa3>
c00059ae:	83 c6 02             	add    esi,0x2
c00059b1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059b5:	72 0b                	jb     c00059c2 <f_lseek+0x100>
c00059b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ba:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059bd:	89 0f                	mov    DWORD PTR [edi],ecx
c00059bf:	83 c7 08             	add    edi,0x8
c00059c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059c6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059c9:	76 04                	jbe    c00059cf <f_lseek+0x10d>
c00059cb:	89 c5                	mov    ebp,eax
c00059cd:	eb 8d                	jmp    c000595c <f_lseek+0x9a>
c00059cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059d2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059d6:	89 30                	mov    DWORD PTR [eax],esi
c00059d8:	0f 87 87 03 00 00    	ja     c0005d65 <f_lseek+0x4a3>
c00059de:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059e4:	e9 84 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059e9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059ec:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059fb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a02:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a06:	73 0f                	jae    c0005a17 <f_lseek+0x155>
c0005a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a1f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a22:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a29:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a2d:	0f 84 3a 03 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a33:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a37:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a3b:	83 c6 ff             	add    esi,0xffffffff
c0005a3e:	89 d8                	mov    eax,ebx
c0005a40:	83 d7 ff             	adc    edi,0xffffffff
c0005a43:	89 f2                	mov    edx,esi
c0005a45:	89 f9                	mov    ecx,edi
c0005a47:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a4e:	e8 78 c2 ff ff       	call   c0001ccb <clmt_clust>
c0005a53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a57:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a5a:	89 c2                	mov    edx,eax
c0005a5c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a60:	89 c8                	mov    eax,ecx
c0005a62:	e8 43 c2 ff ff       	call   c0001caa <clst2sect>
c0005a67:	89 d7                	mov    edi,edx
c0005a69:	09 c7                	or     edi,eax
c0005a6b:	0f 84 0d ff ff ff    	je     c000597e <f_lseek+0xbc>
c0005a71:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a75:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a7b:	0f 84 ec 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a81:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a89:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a8c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a90:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a94:	4d                   	dec    ebp
c0005a95:	31 ff                	xor    edi,edi
c0005a97:	21 ee                	and    esi,ebp
c0005a99:	01 c6                	add    esi,eax
c0005a9b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a9e:	11 d7                	adc    edi,edx
c0005aa0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aa3:	39 fa                	cmp    edx,edi
c0005aa5:	75 08                	jne    c0005aaf <f_lseek+0x1ed>
c0005aa7:	39 f0                	cmp    eax,esi
c0005aa9:	0f 84 be 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005aaf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ab2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ab6:	0f 89 80 02 00 00    	jns    c0005d3c <f_lseek+0x47a>
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	6a 01                	push   0x1
c0005ac1:	52                   	push   edx
c0005ac2:	50                   	push   eax
c0005ac3:	55                   	push   ebp
c0005ac4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac8:	e9 5a 02 00 00       	jmp    c0005d27 <f_lseek+0x465>
c0005acd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ad1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ad4:	74 16                	je     c0005aec <f_lseek+0x22a>
c0005ad6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005adb:	76 0f                	jbe    c0005aec <f_lseek+0x22a>
c0005add:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ae4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005aec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005af2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005af5:	89 c7                	mov    edi,eax
c0005af7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005afb:	73 0d                	jae    c0005b0a <f_lseek+0x248>
c0005afd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b01:	75 07                	jne    c0005b0a <f_lseek+0x248>
c0005b03:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b14:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b1b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b22:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b25:	75 09                	jne    c0005b30 <f_lseek+0x26e>
c0005b27:	31 f6                	xor    esi,esi
c0005b29:	31 ff                	xor    edi,edi
c0005b2b:	e9 af 01 00 00       	jmp    c0005cdf <f_lseek+0x41d>
c0005b30:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b34:	89 d7                	mov    edi,edx
c0005b36:	c1 e1 09             	shl    ecx,0x9
c0005b39:	09 c7                	or     edi,eax
c0005b3b:	89 cd                	mov    ebp,ecx
c0005b3d:	74 6d                	je     c0005bac <f_lseek+0x2ea>
c0005b3f:	83 c0 ff             	add    eax,0xffffffff
c0005b42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b46:	83 d2 ff             	adc    edx,0xffffffff
c0005b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b50:	83 c0 ff             	add    eax,0xffffffff
c0005b53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b57:	83 d2 ff             	adc    edx,0xffffffff
c0005b5a:	31 ff                	xor    edi,edi
c0005b5c:	57                   	push   edi
c0005b5d:	51                   	push   ecx
c0005b5e:	52                   	push   edx
c0005b5f:	50                   	push   eax
c0005b60:	e8 47 f8 01 00       	call   c00253ac <__udivdi3>
c0005b65:	83 c4 10             	add    esp,0x10
c0005b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b70:	57                   	push   edi
c0005b71:	55                   	push   ebp
c0005b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b7a:	e8 2d f8 01 00       	call   c00253ac <__udivdi3>
c0005b7f:	83 c4 10             	add    esp,0x10
c0005b82:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b8a:	19 d1                	sbb    ecx,edx
c0005b8c:	72 1e                	jb     c0005bac <f_lseek+0x2ea>
c0005b8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b92:	89 e9                	mov    ecx,ebp
c0005b94:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b97:	f7 d9                	neg    ecx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ba0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ba3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ba6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005baa:	eb 28                	jmp    c0005bd4 <f_lseek+0x312>
c0005bac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005baf:	85 c0                	test   eax,eax
c0005bb1:	75 1e                	jne    c0005bd1 <f_lseek+0x30f>
c0005bb3:	31 d2                	xor    edx,edx
c0005bb5:	89 d8                	mov    eax,ebx
c0005bb7:	e8 a9 d4 ff ff       	call   c0003065 <create_chain>
c0005bbc:	83 f8 01             	cmp    eax,0x1
c0005bbf:	0f 84 b9 fd ff ff    	je     c000597e <f_lseek+0xbc>
c0005bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc8:	0f 84 c6 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005bce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bd1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	0f 84 4b ff ff ff    	je     c0005b27 <f_lseek+0x265>
c0005bdc:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005be0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005be8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005beb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bef:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bf2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bf5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005bf9:	0f 83 9d 00 00 00    	jae    c0005c9c <f_lseek+0x3da>
c0005bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c07:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c0a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c0e:	01 f2                	add    edx,esi
c0005c10:	11 f9                	adc    ecx,edi
c0005c12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c1a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c1d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c20:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c23:	f6 c1 02             	test   cl,0x2
c0005c26:	74 35                	je     c0005c5d <f_lseek+0x39b>
c0005c28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c2c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c2f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c32:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c36:	73 16                	jae    c0005c4e <f_lseek+0x38c>
c0005c38:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c40:	88 ca                	mov    dl,cl
c0005c42:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c45:	83 ca 40             	or     edx,0x40
c0005c48:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c4b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c4e:	89 c2                	mov    edx,eax
c0005c50:	89 d8                	mov    eax,ebx
c0005c52:	e8 0e d4 ff ff       	call   c0003065 <create_chain>
c0005c57:	85 c0                	test   eax,eax
c0005c59:	75 0b                	jne    c0005c66 <f_lseek+0x3a4>
c0005c5b:	eb 30                	jmp    c0005c8d <f_lseek+0x3cb>
c0005c5d:	89 c2                	mov    edx,eax
c0005c5f:	89 d8                	mov    eax,ebx
c0005c61:	e8 11 d1 ff ff       	call   c0002d77 <get_fat>
c0005c66:	83 f8 ff             	cmp    eax,0xffffffff
c0005c69:	0f 84 25 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005c6f:	83 f8 01             	cmp    eax,0x1
c0005c72:	0f 86 06 fd ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c7c:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c7f:	0f 86 f9 fc ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c85:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c88:	e9 5b ff ff ff       	jmp    c0005be8 <f_lseek+0x326>
c0005c8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c9f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ca3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ca6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ca9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cac:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cb2:	0f 84 6f fe ff ff    	je     c0005b27 <f_lseek+0x265>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cbe:	e8 e7 bf ff ff       	call   c0001caa <clst2sect>
c0005cc3:	89 d7                	mov    edi,edx
c0005cc5:	09 c7                	or     edi,eax
c0005cc7:	0f 84 b1 fc ff ff    	je     c000597e <f_lseek+0xbc>
c0005ccd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cd4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cd8:	c1 ef 09             	shr    edi,0x9
c0005cdb:	01 c6                	add    esi,eax
c0005cdd:	11 d7                	adc    edi,edx
c0005cdf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ce2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005ce5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005ce8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005ceb:	19 d1                	sbb    ecx,edx
c0005ced:	73 0a                	jae    c0005cf9 <f_lseek+0x437>
c0005cef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cf2:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cf5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cf9:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cfe:	74 6d                	je     c0005d6d <f_lseek+0x4ab>
c0005d00:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d06:	39 fa                	cmp    edx,edi
c0005d08:	75 04                	jne    c0005d0e <f_lseek+0x44c>
c0005d0a:	39 f0                	cmp    eax,esi
c0005d0c:	74 5f                	je     c0005d6d <f_lseek+0x4ab>
c0005d0e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d11:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d15:	79 25                	jns    c0005d3c <f_lseek+0x47a>
c0005d17:	83 ec 0c             	sub    esp,0xc
c0005d1a:	6a 01                	push   0x1
c0005d1c:	52                   	push   edx
c0005d1d:	50                   	push   eax
c0005d1e:	55                   	push   ebp
c0005d1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d23:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d27:	50                   	push   eax
c0005d28:	e8 af bc ff ff       	call   c00019dc <disk_write>
c0005d2d:	83 c4 20             	add    esp,0x20
c0005d30:	85 c0                	test   eax,eax
c0005d32:	0f 85 5c fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d38:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d3c:	83 ec 0c             	sub    esp,0xc
c0005d3f:	6a 01                	push   0x1
c0005d41:	57                   	push   edi
c0005d42:	56                   	push   esi
c0005d43:	55                   	push   ebp
c0005d44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d48:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d4c:	50                   	push   eax
c0005d4d:	e8 74 bc ff ff       	call   c00019c6 <disk_read>
c0005d52:	83 c4 20             	add    esp,0x20
c0005d55:	85 c0                	test   eax,eax
c0005d57:	0f 85 37 fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d5d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d60:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d63:	eb 08                	jmp    c0005d6d <f_lseek+0x4ab>
c0005d65:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d71:	83 c4 3c             	add    esp,0x3c
c0005d74:	5b                   	pop    ebx
c0005d75:	5e                   	pop    esi
c0005d76:	5f                   	pop    edi
c0005d77:	5d                   	pop    ebp
c0005d78:	c3                   	ret    

c0005d79 <f_opendir>:
c0005d79:	56                   	push   esi
c0005d7a:	b8 09 00 00 00       	mov    eax,0x9
c0005d7f:	53                   	push   ebx
c0005d80:	83 ec 24             	sub    esp,0x24
c0005d83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d87:	85 db                	test   ebx,ebx
c0005d89:	0f 84 e6 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005d8f:	31 c9                	xor    ecx,ecx
c0005d91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d95:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d99:	e8 03 c7 ff ff       	call   c00024a1 <mount_volume>
c0005d9e:	85 c0                	test   eax,eax
c0005da0:	0f 85 c9 00 00 00    	jne    c0005e6f <f_opendir+0xf6>
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	83 ec 0c             	sub    esp,0xc
c0005dad:	89 03                	mov    DWORD PTR [ebx],eax
c0005daf:	68 60 04 00 00       	push   0x460
c0005db4:	e8 8b 24 00 00       	call   c0008244 <ff_memalloc>
c0005db9:	83 c4 10             	add    esp,0x10
c0005dbc:	89 c6                	mov    esi,eax
c0005dbe:	b8 11 00 00 00       	mov    eax,0x11
c0005dc3:	85 f6                	test   esi,esi
c0005dc5:	0f 84 aa 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005dcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ddf:	89 d8                	mov    eax,ebx
c0005de1:	e8 31 ee ff ff       	call   c0004c17 <follow_path>
c0005de6:	85 c0                	test   eax,eax
c0005de8:	75 61                	jne    c0005e4b <f_opendir+0xd2>
c0005dea:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dee:	78 46                	js     c0005e36 <f_opendir+0xbd>
c0005df0:	b8 05 00 00 00       	mov    eax,0x5
c0005df5:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005df9:	74 50                	je     c0005e4b <f_opendir+0xd2>
c0005dfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dff:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e01:	3c 04                	cmp    al,0x4
c0005e03:	75 26                	jne    c0005e2b <f_opendir+0xb2>
c0005e05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e0b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e0e:	30 d2                	xor    dl,dl
c0005e10:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e14:	09 c2                	or     edx,eax
c0005e16:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e19:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e1c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e1f:	89 da                	mov    edx,ebx
c0005e21:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e24:	e8 b4 ed ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0005e29:	eb 0b                	jmp    c0005e36 <f_opendir+0xbd>
c0005e2b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e2e:	e8 59 ed ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005e33:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3a:	31 d2                	xor    edx,edx
c0005e3c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e40:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e44:	89 d8                	mov    eax,ebx
c0005e46:	e8 22 d1 ff ff       	call   c0002f6d <dir_sdi>
c0005e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	56                   	push   esi
c0005e53:	e8 02 24 00 00       	call   c000825a <ff_memfree>
c0005e58:	83 c4 10             	add    esp,0x10
c0005e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e5f:	83 f8 04             	cmp    eax,0x4
c0005e62:	74 06                	je     c0005e6a <f_opendir+0xf1>
c0005e64:	85 c0                	test   eax,eax
c0005e66:	74 0d                	je     c0005e75 <f_opendir+0xfc>
c0005e68:	eb 05                	jmp    c0005e6f <f_opendir+0xf6>
c0005e6a:	b8 05 00 00 00       	mov    eax,0x5
c0005e6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e75:	83 c4 24             	add    esp,0x24
c0005e78:	5b                   	pop    ebx
c0005e79:	5e                   	pop    esi
c0005e7a:	c3                   	ret    

c0005e7b <f_closedir>:
c0005e7b:	53                   	push   ebx
c0005e7c:	83 ec 18             	sub    esp,0x18
c0005e7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e87:	89 d8                	mov    eax,ebx
c0005e89:	e8 86 c2 ff ff       	call   c0002114 <validate>
c0005e8e:	85 c0                	test   eax,eax
c0005e90:	75 06                	jne    c0005e98 <f_closedir+0x1d>
c0005e92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e98:	83 c4 18             	add    esp,0x18
c0005e9b:	5b                   	pop    ebx
c0005e9c:	c3                   	ret    

c0005e9d <f_readdir>:
c0005e9d:	57                   	push   edi
c0005e9e:	56                   	push   esi
c0005e9f:	53                   	push   ebx
c0005ea0:	83 ec 20             	sub    esp,0x20
c0005ea3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ea7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eab:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 5e c2 ff ff       	call   c0002114 <validate>
c0005eb6:	85 c0                	test   eax,eax
c0005eb8:	75 77                	jne    c0005f31 <f_readdir+0x94>
c0005eba:	85 ff                	test   edi,edi
c0005ebc:	75 0b                	jne    c0005ec9 <f_readdir+0x2c>
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 a6 d0 ff ff       	call   c0002f6d <dir_sdi>
c0005ec7:	eb 68                	jmp    c0005f31 <f_readdir+0x94>
c0005ec9:	83 ec 0c             	sub    esp,0xc
c0005ecc:	68 60 04 00 00       	push   0x460
c0005ed1:	e8 6e 23 00 00       	call   c0008244 <ff_memalloc>
c0005ed6:	83 c4 10             	add    esp,0x10
c0005ed9:	89 c6                	mov    esi,eax
c0005edb:	b8 11 00 00 00       	mov    eax,0x11
c0005ee0:	85 f6                	test   esi,esi
c0005ee2:	74 4d                	je     c0005f31 <f_readdir+0x94>
c0005ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eee:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ef1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef4:	31 d2                	xor    edx,edx
c0005ef6:	89 d8                	mov    eax,ebx
c0005ef8:	e8 80 d8 ff ff       	call   c000377d <dir_read>
c0005efd:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f02:	75 19                	jne    c0005f1d <f_readdir+0x80>
c0005f04:	89 fa                	mov    edx,edi
c0005f06:	89 d8                	mov    eax,ebx
c0005f08:	e8 7e ea ff ff       	call   c000498b <get_fileinfo>
c0005f0d:	31 d2                	xor    edx,edx
c0005f0f:	89 d8                	mov    eax,ebx
c0005f11:	e8 af d5 ff ff       	call   c00034c5 <dir_next>
c0005f16:	83 f8 04             	cmp    eax,0x4
c0005f19:	75 02                	jne    c0005f1d <f_readdir+0x80>
c0005f1b:	31 c0                	xor    eax,eax
c0005f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	56                   	push   esi
c0005f25:	e8 30 23 00 00       	call   c000825a <ff_memfree>
c0005f2a:	83 c4 10             	add    esp,0x10
c0005f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f31:	83 c4 20             	add    esp,0x20
c0005f34:	5b                   	pop    ebx
c0005f35:	5e                   	pop    esi
c0005f36:	5f                   	pop    edi
c0005f37:	c3                   	ret    

c0005f38 <f_stat>:
c0005f38:	57                   	push   edi
c0005f39:	31 c9                	xor    ecx,ecx
c0005f3b:	56                   	push   esi
c0005f3c:	53                   	push   ebx
c0005f3d:	83 ec 50             	sub    esp,0x50
c0005f40:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f44:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f48:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f4c:	e8 50 c5 ff ff       	call   c00024a1 <mount_volume>
c0005f51:	89 c3                	mov    ebx,eax
c0005f53:	85 c0                	test   eax,eax
c0005f55:	75 67                	jne    c0005fbe <f_stat+0x86>
c0005f57:	83 ec 0c             	sub    esp,0xc
c0005f5a:	bb 11 00 00 00       	mov    ebx,0x11
c0005f5f:	68 60 04 00 00       	push   0x460
c0005f64:	e8 db 22 00 00       	call   c0008244 <ff_memalloc>
c0005f69:	83 c4 10             	add    esp,0x10
c0005f6c:	89 c6                	mov    esi,eax
c0005f6e:	85 c0                	test   eax,eax
c0005f70:	74 4c                	je     c0005fbe <f_stat+0x86>
c0005f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f76:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f7c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f7f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f82:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f86:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f8a:	e8 88 ec ff ff       	call   c0004c17 <follow_path>
c0005f8f:	89 c3                	mov    ebx,eax
c0005f91:	85 c0                	test   eax,eax
c0005f93:	75 1d                	jne    c0005fb2 <f_stat+0x7a>
c0005f95:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f9a:	78 11                	js     c0005fad <f_stat+0x75>
c0005f9c:	85 ff                	test   edi,edi
c0005f9e:	74 12                	je     c0005fb2 <f_stat+0x7a>
c0005fa0:	89 fa                	mov    edx,edi
c0005fa2:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fa6:	e8 e0 e9 ff ff       	call   c000498b <get_fileinfo>
c0005fab:	eb 05                	jmp    c0005fb2 <f_stat+0x7a>
c0005fad:	bb 06 00 00 00       	mov    ebx,0x6
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	56                   	push   esi
c0005fb6:	e8 9f 22 00 00       	call   c000825a <ff_memfree>
c0005fbb:	83 c4 10             	add    esp,0x10
c0005fbe:	83 c4 50             	add    esp,0x50
c0005fc1:	89 d8                	mov    eax,ebx
c0005fc3:	5b                   	pop    ebx
c0005fc4:	5e                   	pop    esi
c0005fc5:	5f                   	pop    edi
c0005fc6:	c3                   	ret    

c0005fc7 <f_getfree>:
c0005fc7:	55                   	push   ebp
c0005fc8:	31 c9                	xor    ecx,ecx
c0005fca:	57                   	push   edi
c0005fcb:	56                   	push   esi
c0005fcc:	53                   	push   ebx
c0005fcd:	83 ec 5c             	sub    esp,0x5c
c0005fd0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fd4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fd8:	e8 c4 c4 ff ff       	call   c00024a1 <mount_volume>
c0005fdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	0f 85 9d 01 00 00    	jne    c0006186 <f_getfree+0x1bf>
c0005fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fed:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005ff1:	89 02                	mov    DWORD PTR [edx],eax
c0005ff3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005ff6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005ff9:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005ffc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006000:	39 f2                	cmp    edx,esi
c0006002:	77 0b                	ja     c000600f <f_getfree+0x48>
c0006004:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006008:	89 10                	mov    DWORD PTR [eax],edx
c000600a:	e9 77 01 00 00       	jmp    c0006186 <f_getfree+0x1bf>
c000600f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006011:	80 fa 01             	cmp    dl,0x1
c0006014:	75 3a                	jne    c0006050 <f_getfree+0x89>
c0006016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000601a:	be 02 00 00 00       	mov    esi,0x2
c000601f:	31 db                	xor    ebx,ebx
c0006021:	89 f2                	mov    edx,esi
c0006023:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006027:	e8 4b cd ff ff       	call   c0002d77 <get_fat>
c000602c:	83 f8 ff             	cmp    eax,0xffffffff
c000602f:	0f 84 28 01 00 00    	je     c000615d <f_getfree+0x196>
c0006035:	83 f8 01             	cmp    eax,0x1
c0006038:	0f 84 29 01 00 00    	je     c0006167 <f_getfree+0x1a0>
c000603e:	83 d3 00             	adc    ebx,0x0
c0006041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006045:	46                   	inc    esi
c0006046:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006049:	77 d6                	ja     c0006021 <f_getfree+0x5a>
c000604b:	e9 25 01 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c0006050:	80 fa 04             	cmp    dl,0x4
c0006053:	0f 85 88 00 00 00    	jne    c00060e1 <f_getfree+0x11a>
c0006059:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000605c:	31 ed                	xor    ebp,ebp
c000605e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006061:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006069:	31 db                	xor    ebx,ebx
c000606b:	85 ed                	test   ebp,ebp
c000606d:	75 3f                	jne    c00060ae <f_getfree+0xe7>
c000606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006077:	83 c0 01             	add    eax,0x1
c000607a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000607e:	83 d2 00             	adc    edx,0x0
c0006081:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006085:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006091:	e8 59 c1 ff ff       	call   c00021ef <move_window>
c0006096:	85 c0                	test   eax,eax
c0006098:	0f 85 d3 00 00 00    	jne    c0006171 <f_getfree+0x1aa>
c000609e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060b5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060b9:	89 cf                	mov    edi,ecx
c00060bb:	85 f6                	test   esi,esi
c00060bd:	74 12                	je     c00060d1 <f_getfree+0x10a>
c00060bf:	88 c1                	mov    cl,al
c00060c1:	83 e1 01             	and    ecx,0x1
c00060c4:	80 f9 01             	cmp    cl,0x1
c00060c7:	83 d3 00             	adc    ebx,0x0
c00060ca:	d0 e8                	shr    al,1
c00060cc:	4e                   	dec    esi
c00060cd:	39 fe                	cmp    esi,edi
c00060cf:	75 ea                	jne    c00060bb <f_getfree+0xf4>
c00060d1:	45                   	inc    ebp
c00060d2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060d8:	85 f6                	test   esi,esi
c00060da:	75 8f                	jne    c000606b <f_getfree+0xa4>
c00060dc:	e9 94 00 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c00060e1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060e4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060e7:	31 f6                	xor    esi,esi
c00060e9:	31 db                	xor    ebx,ebx
c00060eb:	85 f6                	test   esi,esi
c00060ed:	75 1b                	jne    c000610a <f_getfree+0x143>
c00060ef:	89 d7                	mov    edi,edx
c00060f1:	89 cd                	mov    ebp,ecx
c00060f3:	83 c7 01             	add    edi,0x1
c00060f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fa:	83 d5 00             	adc    ebp,0x0
c00060fd:	e8 ed c0 ff ff       	call   c00021ef <move_window>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 6b                	jne    c0006171 <f_getfree+0x1aa>
c0006106:	89 fa                	mov    edx,edi
c0006108:	89 e9                	mov    ecx,ebp
c000610a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006112:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006116:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006119:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000611d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006121:	75 11                	jne    c0006134 <f_getfree+0x16d>
c0006123:	e8 e9 b8 ff ff       	call   c0001a11 <ld_word>
c0006128:	66 83 f8 01          	cmp    ax,0x1
c000612c:	83 d3 00             	adc    ebx,0x0
c000612f:	83 c6 02             	add    esi,0x2
c0006132:	eb 13                	jmp    c0006147 <f_getfree+0x180>
c0006134:	e8 e5 b8 ff ff       	call   c0001a1e <ld_dword>
c0006139:	25 ff ff ff 0f       	and    eax,0xfffffff
c000613e:	83 f8 01             	cmp    eax,0x1
c0006141:	83 d3 00             	adc    ebx,0x0
c0006144:	83 c6 04             	add    esi,0x4
c0006147:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000614d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006151:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006155:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006159:	75 90                	jne    c00060eb <f_getfree+0x124>
c000615b:	eb 18                	jmp    c0006175 <f_getfree+0x1ae>
c000615d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006165:	eb 0e                	jmp    c0006175 <f_getfree+0x1ae>
c0006167:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000616f:	eb 04                	jmp    c0006175 <f_getfree+0x1ae>
c0006171:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006175:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006179:	89 18                	mov    DWORD PTR [eax],ebx
c000617b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000617f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006182:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000618a:	83 c4 5c             	add    esp,0x5c
c000618d:	5b                   	pop    ebx
c000618e:	5e                   	pop    esi
c000618f:	5f                   	pop    edi
c0006190:	5d                   	pop    ebp
c0006191:	c3                   	ret    

c0006192 <f_truncate>:
c0006192:	56                   	push   esi
c0006193:	53                   	push   ebx
c0006194:	83 ec 14             	sub    esp,0x14
c0006197:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000619b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000619f:	89 d8                	mov    eax,ebx
c00061a1:	e8 6e bf ff ff       	call   c0002114 <validate>
c00061a6:	89 c6                	mov    esi,eax
c00061a8:	85 c0                	test   eax,eax
c00061aa:	0f 85 d2 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061b0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061b4:	85 f6                	test   esi,esi
c00061b6:	0f 85 c6 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061bc:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061c0:	0f 84 b7 00 00 00    	je     c000627d <f_truncate+0xeb>
c00061c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061cc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061cf:	89 d1                	mov    ecx,edx
c00061d1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061d4:	0f 83 a8 00 00 00    	jae    c0006282 <f_truncate+0xf0>
c00061da:	09 c2                	or     edx,eax
c00061dc:	75 15                	jne    c00061f3 <f_truncate+0x61>
c00061de:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061e1:	31 c9                	xor    ecx,ecx
c00061e3:	89 d8                	mov    eax,ebx
c00061e5:	e8 7a d0 ff ff       	call   c0003264 <remove_chain>
c00061ea:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061f1:	eb 35                	jmp    c0006228 <f_truncate+0x96>
c00061f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061f6:	89 d8                	mov    eax,ebx
c00061f8:	e8 7a cb ff ff       	call   c0002d77 <get_fat>
c00061fd:	89 c2                	mov    edx,eax
c00061ff:	b8 01 00 00 00       	mov    eax,0x1
c0006204:	83 fa ff             	cmp    edx,0xffffffff
c0006207:	74 1f                	je     c0006228 <f_truncate+0x96>
c0006209:	b8 02 00 00 00       	mov    eax,0x2
c000620e:	83 fa 01             	cmp    edx,0x1
c0006211:	74 15                	je     c0006228 <f_truncate+0x96>
c0006213:	31 c0                	xor    eax,eax
c0006215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006219:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000621c:	76 0a                	jbe    c0006228 <f_truncate+0x96>
c000621e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006221:	89 d8                	mov    eax,ebx
c0006223:	e8 3c d0 ff ff       	call   c0003264 <remove_chain>
c0006228:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000622b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000622e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006231:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006234:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006237:	83 ca 40             	or     edx,0x40
c000623a:	85 c0                	test   eax,eax
c000623c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000623f:	75 35                	jne    c0006276 <f_truncate+0xe4>
c0006241:	84 d2                	test   dl,dl
c0006243:	79 3d                	jns    c0006282 <f_truncate+0xf0>
c0006245:	83 ec 0c             	sub    esp,0xc
c0006248:	8d 43 50             	lea    eax,[ebx+0x50]
c000624b:	6a 01                	push   0x1
c000624d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006250:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006253:	50                   	push   eax
c0006254:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006258:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000625c:	50                   	push   eax
c000625d:	e8 7a b7 ff ff       	call   c00019dc <disk_write>
c0006262:	83 c4 20             	add    esp,0x20
c0006265:	85 c0                	test   eax,eax
c0006267:	75 08                	jne    c0006271 <f_truncate+0xdf>
c0006269:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000626d:	31 f6                	xor    esi,esi
c000626f:	eb 11                	jmp    c0006282 <f_truncate+0xf0>
c0006271:	b8 01 00 00 00       	mov    eax,0x1
c0006276:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006279:	89 c6                	mov    esi,eax
c000627b:	eb 05                	jmp    c0006282 <f_truncate+0xf0>
c000627d:	be 07 00 00 00       	mov    esi,0x7
c0006282:	89 f0                	mov    eax,esi
c0006284:	83 c4 14             	add    esp,0x14
c0006287:	5b                   	pop    ebx
c0006288:	5e                   	pop    esi
c0006289:	c3                   	ret    

c000628a <f_unlink>:
c000628a:	56                   	push   esi
c000628b:	b9 02 00 00 00       	mov    ecx,0x2
c0006290:	53                   	push   ebx
c0006291:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006297:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000629b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062a2:	e8 fa c1 ff ff       	call   c00024a1 <mount_volume>
c00062a7:	85 c0                	test   eax,eax
c00062a9:	0f 85 55 01 00 00    	jne    c0006404 <f_unlink+0x17a>
c00062af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ba:	68 60 04 00 00       	push   0x460
c00062bf:	e8 80 1f 00 00       	call   c0008244 <ff_memalloc>
c00062c4:	83 c4 10             	add    esp,0x10
c00062c7:	89 c3                	mov    ebx,eax
c00062c9:	b8 11 00 00 00       	mov    eax,0x11
c00062ce:	85 db                	test   ebx,ebx
c00062d0:	0f 84 2e 01 00 00    	je     c0006404 <f_unlink+0x17a>
c00062d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062da:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062e0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062e6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062f1:	e8 21 e9 ff ff       	call   c0004c17 <follow_path>
c00062f6:	85 c0                	test   eax,eax
c00062f8:	0f 85 f2 00 00 00    	jne    c00063f0 <f_unlink+0x166>
c00062fe:	b8 06 00 00 00       	mov    eax,0x6
c0006303:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000630b:	0f 88 df 00 00 00    	js     c00063f0 <f_unlink+0x166>
c0006311:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006316:	74 0a                	je     c0006322 <f_unlink+0x98>
c0006318:	b8 07 00 00 00       	mov    eax,0x7
c000631d:	e9 ce 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006326:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000632a:	8a 02                	mov    al,BYTE PTR [edx]
c000632c:	3c 04                	cmp    al,0x4
c000632e:	75 12                	jne    c0006342 <f_unlink+0xb8>
c0006330:	8d 42 10             	lea    eax,[edx+0x10]
c0006333:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006337:	e8 a1 e8 ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c000633c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006340:	eb 0e                	jmp    c0006350 <f_unlink+0xc6>
c0006342:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006349:	e8 3e e8 ff ff       	call   c0004b8c <ld_clust.isra.0>
c000634e:	89 c6                	mov    esi,eax
c0006350:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006355:	75 12                	jne    c0006369 <f_unlink+0xdf>
c0006357:	8d 44 24 48          	lea    eax,[esp+0x48]
c000635b:	e8 94 d6 ff ff       	call   c00039f4 <dir_remove>
c0006360:	85 c0                	test   eax,eax
c0006362:	74 6c                	je     c00063d0 <f_unlink+0x146>
c0006364:	e9 87 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000636d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006374:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000637b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637e:	75 21                	jne    c00063a1 <f_unlink+0x117>
c0006380:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006388:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006396:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000639a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063a1:	31 d2                	xor    edx,edx
c00063a3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063aa:	e8 be cb ff ff       	call   c0002f6d <dir_sdi>
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 3d                	jne    c00063f0 <f_unlink+0x166>
c00063b3:	31 d2                	xor    edx,edx
c00063b5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063bc:	e8 bc d3 ff ff       	call   c000377d <dir_read>
c00063c1:	85 c0                	test   eax,eax
c00063c3:	0f 84 4f ff ff ff    	je     c0006318 <f_unlink+0x8e>
c00063c9:	83 f8 04             	cmp    eax,0x4
c00063cc:	75 22                	jne    c00063f0 <f_unlink+0x166>
c00063ce:	eb 87                	jmp    c0006357 <f_unlink+0xcd>
c00063d0:	85 f6                	test   esi,esi
c00063d2:	75 0b                	jne    c00063df <f_unlink+0x155>
c00063d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d8:	e8 3d df ff ff       	call   c000431a <sync_fs>
c00063dd:	eb 11                	jmp    c00063f0 <f_unlink+0x166>
c00063df:	31 c9                	xor    ecx,ecx
c00063e1:	89 f2                	mov    edx,esi
c00063e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063e7:	e8 78 ce ff ff       	call   c0003264 <remove_chain>
c00063ec:	85 c0                	test   eax,eax
c00063ee:	74 e4                	je     c00063d4 <f_unlink+0x14a>
c00063f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063f4:	83 ec 0c             	sub    esp,0xc
c00063f7:	53                   	push   ebx
c00063f8:	e8 5d 1e 00 00       	call   c000825a <ff_memfree>
c00063fd:	83 c4 10             	add    esp,0x10
c0006400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006404:	81 c4 e4 00 00 00    	add    esp,0xe4
c000640a:	5b                   	pop    ebx
c000640b:	5e                   	pop    esi
c000640c:	c3                   	ret    

c000640d <f_mkdir>:
c000640d:	57                   	push   edi
c000640e:	b9 02 00 00 00       	mov    ecx,0x2
c0006413:	56                   	push   esi
c0006414:	53                   	push   ebx
c0006415:	83 c4 80             	add    esp,0xffffff80
c0006418:	8d 54 24 08          	lea    edx,[esp+0x8]
c000641c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006423:	e8 79 c0 ff ff       	call   c00024a1 <mount_volume>
c0006428:	89 c3                	mov    ebx,eax
c000642a:	85 c0                	test   eax,eax
c000642c:	0f 85 fe 01 00 00    	jne    c0006630 <f_mkdir+0x223>
c0006432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006436:	bb 11 00 00 00       	mov    ebx,0x11
c000643b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	68 60 04 00 00       	push   0x460
c0006447:	e8 f8 1d 00 00       	call   c0008244 <ff_memalloc>
c000644c:	83 c4 10             	add    esp,0x10
c000644f:	89 c7                	mov    edi,eax
c0006451:	85 c0                	test   eax,eax
c0006453:	0f 84 d7 01 00 00    	je     c0006630 <f_mkdir+0x223>
c0006459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000645d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006463:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006466:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006469:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006470:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006474:	e8 9e e7 ff ff       	call   c0004c17 <follow_path>
c0006479:	89 c3                	mov    ebx,eax
c000647b:	85 c0                	test   eax,eax
c000647d:	74 3e                	je     c00064bd <f_mkdir+0xb0>
c000647f:	83 f8 04             	cmp    eax,0x4
c0006482:	75 3e                	jne    c00064c2 <f_mkdir+0xb5>
c0006484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006488:	31 d2                	xor    edx,edx
c000648a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006492:	e8 ce cb ff ff       	call   c0003065 <create_chain>
c0006497:	89 c6                	mov    esi,eax
c0006499:	85 c0                	test   eax,eax
c000649b:	74 0c                	je     c00064a9 <f_mkdir+0x9c>
c000649d:	bb 02 00 00 00       	mov    ebx,0x2
c00064a2:	83 f8 01             	cmp    eax,0x1
c00064a5:	74 07                	je     c00064ae <f_mkdir+0xa1>
c00064a7:	eb 2a                	jmp    c00064d3 <f_mkdir+0xc6>
c00064a9:	bb 07 00 00 00       	mov    ebx,0x7
c00064ae:	31 c9                	xor    ecx,ecx
c00064b0:	89 f2                	mov    edx,esi
c00064b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064b6:	e8 a9 cd ff ff       	call   c0003264 <remove_chain>
c00064bb:	eb 05                	jmp    c00064c2 <f_mkdir+0xb5>
c00064bd:	bb 08 00 00 00       	mov    ebx,0x8
c00064c2:	83 ec 0c             	sub    esp,0xc
c00064c5:	57                   	push   edi
c00064c6:	e8 8f 1d 00 00       	call   c000825a <ff_memfree>
c00064cb:	83 c4 10             	add    esp,0x10
c00064ce:	e9 5d 01 00 00       	jmp    c0006630 <f_mkdir+0x223>
c00064d3:	bb 01 00 00 00       	mov    ebx,0x1
c00064d8:	83 f8 ff             	cmp    eax,0xffffffff
c00064db:	74 d1                	je     c00064ae <f_mkdir+0xa1>
c00064dd:	89 f2                	mov    edx,esi
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	e8 c4 ce ff ff       	call   c00033ac <dir_clear>
c00064e8:	89 c3                	mov    ebx,eax
c00064ea:	85 c0                	test   eax,eax
c00064ec:	75 c0                	jne    c00064ae <f_mkdir+0xa1>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f5:	74 69                	je     c0006560 <f_mkdir+0x153>
c00064f7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064fc:	83 c0 54             	add    eax,0x54
c00064ff:	ba 20 00 00 00       	mov    edx,0x20
c0006504:	e8 9c b5 ff ff       	call   c0001aa5 <mem_set>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006512:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006516:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000651a:	83 c0 6a             	add    eax,0x6a
c000651d:	e8 65 b5 ff ff       	call   c0001a87 <st_dword>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	89 f1                	mov    ecx,esi
c0006528:	8d 50 54             	lea    edx,[eax+0x54]
c000652b:	e8 85 e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	b9 20 00 00 00       	mov    ecx,0x20
c0006539:	8d 50 54             	lea    edx,[eax+0x54]
c000653c:	83 c0 74             	add    eax,0x74
c000653f:	e8 4c b5 ff ff       	call   c0001a90 <mem_cpy>
c0006544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006548:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000654c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006550:	8d 50 74             	lea    edx,[eax+0x74]
c0006553:	e8 5d e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006560:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006564:	e8 2f db ff ff       	call   c0004098 <dir_register>
c0006569:	89 c3                	mov    ebx,eax
c000656b:	85 c0                	test   eax,eax
c000656d:	0f 85 3b ff ff ff    	jne    c00064ae <f_mkdir+0xa1>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000657a:	75 74                	jne    c00065f0 <f_mkdir+0x1e3>
c000657c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006584:	83 c0 0c             	add    eax,0xc
c0006587:	e8 fb b4 ff ff       	call   c0001a87 <st_dword>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	89 f2                	mov    edx,esi
c0006592:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006595:	83 c0 34             	add    eax,0x34
c0006598:	e8 ea b4 ff ff       	call   c0001a87 <st_dword>
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a8:	c1 e2 09             	shl    edx,0x9
c00065ab:	83 c0 38             	add    eax,0x38
c00065ae:	e8 d4 b4 ff ff       	call   c0001a87 <st_dword>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065be:	c1 e2 09             	shl    edx,0x9
c00065c1:	83 c0 28             	add    eax,0x28
c00065c4:	e8 be b4 ff ff       	call   c0001a87 <st_dword>
c00065c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065d0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065db:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065df:	e8 8b d3 ff ff       	call   c000396f <store_xdir>
c00065e4:	89 c3                	mov    ebx,eax
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 d4 fe ff ff    	jne    c00064c2 <f_mkdir+0xb5>
c00065ee:	eb 30                	jmp    c0006620 <f_mkdir+0x213>
c00065f0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065f9:	83 c0 16             	add    eax,0x16
c00065fc:	e8 86 b4 ff ff       	call   c0001a87 <st_dword>
c0006601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006605:	89 f1                	mov    ecx,esi
c0006607:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000660b:	e8 a5 e5 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006610:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006614:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006624:	e8 f1 dc ff ff       	call   c000431a <sync_fs>
c0006629:	89 c3                	mov    ebx,eax
c000662b:	e9 92 fe ff ff       	jmp    c00064c2 <f_mkdir+0xb5>
c0006630:	83 ec 80             	sub    esp,0xffffff80
c0006633:	89 d8                	mov    eax,ebx
c0006635:	5b                   	pop    ebx
c0006636:	5e                   	pop    esi
c0006637:	5f                   	pop    edi
c0006638:	c3                   	ret    

c0006639 <f_rename>:
c0006639:	55                   	push   ebp
c000663a:	57                   	push   edi
c000663b:	56                   	push   esi
c000663c:	53                   	push   ebx
c000663d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006643:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000664a:	e8 a4 b9 ff ff       	call   c0001ff3 <get_ldnumber>
c000664f:	b9 02 00 00 00       	mov    ecx,0x2
c0006654:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006658:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000665f:	e8 3d be ff ff       	call   c00024a1 <mount_volume>
c0006664:	85 c0                	test   eax,eax
c0006666:	0f 85 b5 02 00 00    	jne    c0006921 <f_rename+0x2e8>
c000666c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006670:	83 ec 0c             	sub    esp,0xc
c0006673:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006677:	68 60 04 00 00       	push   0x460
c000667c:	e8 c3 1b 00 00       	call   c0008244 <ff_memalloc>
c0006681:	83 c4 10             	add    esp,0x10
c0006684:	89 c3                	mov    ebx,eax
c0006686:	b8 11 00 00 00       	mov    eax,0x11
c000668b:	85 db                	test   ebx,ebx
c000668d:	0f 84 8e 02 00 00    	je     c0006921 <f_rename+0x2e8>
c0006693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006697:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000669d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066aa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066ae:	e8 64 e5 ff ff       	call   c0004c17 <follow_path>
c00066b3:	85 c0                	test   eax,eax
c00066b5:	0f 85 52 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066bb:	b8 06 00 00 00       	mov    eax,0x6
c00066c0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066c8:	0f 85 3f 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d5:	0f 85 05 01 00 00    	jne    c00067e0 <f_rename+0x1a7>
c00066db:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066de:	b9 40 00 00 00       	mov    ecx,0x40
c00066e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066e7:	e8 a4 b3 ff ff       	call   c0001a90 <mem_cpy>
c00066ec:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066f5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fc:	e8 8f b3 ff ff       	call   c0001a90 <mem_cpy>
c0006701:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006708:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000670f:	e8 03 e5 ff ff       	call   c0004c17 <follow_path>
c0006714:	85 c0                	test   eax,eax
c0006716:	75 29                	jne    c0006741 <f_rename+0x108>
c0006718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000671c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006723:	74 0a                	je     c000672f <f_rename+0xf6>
c0006725:	b8 08 00 00 00       	mov    eax,0x8
c000672a:	e9 de 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c000672f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006736:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000673d:	75 e6                	jne    c0006725 <f_rename+0xec>
c000673f:	eb 09                	jmp    c000674a <f_rename+0x111>
c0006741:	83 f8 04             	cmp    eax,0x4
c0006744:	0f 85 c3 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000674a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006751:	e8 42 d9 ff ff       	call   c0004098 <dir_register>
c0006756:	85 c0                	test   eax,eax
c0006758:	0f 85 af 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000675e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006762:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006765:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006768:	89 c5                	mov    ebp,eax
c000676a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000676d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006771:	8d 46 24             	lea    eax,[esi+0x24]
c0006774:	e8 98 b2 ff ff       	call   c0001a11 <ld_word>
c0006779:	b9 40 00 00 00       	mov    ecx,0x40
c000677e:	89 c7                	mov    edi,eax
c0006780:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006784:	89 f0                	mov    eax,esi
c0006786:	e8 05 b3 ff ff       	call   c0001a90 <mem_cpy>
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	89 e9                	mov    ecx,ebp
c0006791:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006794:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006797:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000679b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067a5:	0f b7 d7             	movzx  edx,di
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 24             	add    eax,0x24
c00067ae:	e8 d0 b2 ff ff       	call   c0001a83 <st_word>
c00067b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067bd:	a8 10                	test   al,0x10
c00067bf:	75 06                	jne    c00067c7 <f_rename+0x18e>
c00067c1:	83 c8 20             	or     eax,0x20
c00067c4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ce:	e8 9c d1 ff ff       	call   c000396f <store_xdir>
c00067d3:	85 c0                	test   eax,eax
c00067d5:	0f 84 1c 01 00 00    	je     c00068f7 <f_rename+0x2be>
c00067db:	e9 2d 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c00067e0:	b9 20 00 00 00       	mov    ecx,0x20
c00067e5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067f0:	e8 9b b2 ff ff       	call   c0001a90 <mem_cpy>
c00067f5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067fa:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067fe:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006805:	e8 86 b2 ff ff       	call   c0001a90 <mem_cpy>
c000680a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006811:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006818:	e8 fa e3 ff ff       	call   c0004c17 <follow_path>
c000681d:	85 c0                	test   eax,eax
c000681f:	75 27                	jne    c0006848 <f_rename+0x20f>
c0006821:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006825:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000682c:	0f 85 f3 fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006832:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006839:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006840:	0f 85 df fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006846:	eb 09                	jmp    c0006851 <f_rename+0x218>
c0006848:	83 f8 04             	cmp    eax,0x4
c000684b:	0f 85 bc 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006851:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006858:	e8 3b d8 ff ff       	call   c0004098 <dir_register>
c000685d:	85 c0                	test   eax,eax
c000685f:	0f 85 a8 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006865:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000686c:	b9 13 00 00 00       	mov    ecx,0x13
c0006871:	8d 46 0d             	lea    eax,[esi+0xd]
c0006874:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006878:	e8 13 b2 ff ff       	call   c0001a90 <mem_cpy>
c000687d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006881:	a8 10                	test   al,0x10
c0006883:	75 03                	jne    c0006888 <f_rename+0x24f>
c0006885:	83 c8 20             	or     eax,0x20
c0006888:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000688b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000688f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006893:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006897:	74 5e                	je     c00068f7 <f_rename+0x2be>
c0006899:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068a0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068a4:	74 51                	je     c00068f7 <f_rename+0x2be>
c00068a6:	89 f2                	mov    edx,esi
c00068a8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ac:	8a 07                	mov    al,BYTE PTR [edi]
c00068ae:	e8 d9 e2 ff ff       	call   c0004b8c <ld_clust.isra.0>
c00068b3:	89 c2                	mov    edx,eax
c00068b5:	89 f8                	mov    eax,edi
c00068b7:	e8 ee b3 ff ff       	call   c0001caa <clst2sect>
c00068bc:	89 c6                	mov    esi,eax
c00068be:	89 d1                	mov    ecx,edx
c00068c0:	b8 02 00 00 00       	mov    eax,0x2
c00068c5:	09 f2                	or     edx,esi
c00068c7:	74 44                	je     c000690d <f_rename+0x2d4>
c00068c9:	89 f2                	mov    edx,esi
c00068cb:	89 f8                	mov    eax,edi
c00068cd:	e8 1d b9 ff ff       	call   c00021ef <move_window>
c00068d2:	85 c0                	test   eax,eax
c00068d4:	75 37                	jne    c000690d <f_rename+0x2d4>
c00068d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068da:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068de:	75 17                	jne    c00068f7 <f_rename+0x2be>
c00068e0:	8d 50 74             	lea    edx,[eax+0x74]
c00068e3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068ea:	e8 c6 e2 ff ff       	call   c0004bb5 <st_clust.isra.1>
c00068ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fb:	e8 f4 d0 ff ff       	call   c00039f4 <dir_remove>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 09                	jne    c000690d <f_rename+0x2d4>
c0006904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006908:	e8 0d da ff ff       	call   c000431a <sync_fs>
c000690d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006911:	83 ec 0c             	sub    esp,0xc
c0006914:	53                   	push   ebx
c0006915:	e8 40 19 00 00       	call   c000825a <ff_memfree>
c000691a:	83 c4 10             	add    esp,0x10
c000691d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006921:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006927:	5b                   	pop    ebx
c0006928:	5e                   	pop    esi
c0006929:	5f                   	pop    edi
c000692a:	5d                   	pop    ebp
c000692b:	c3                   	ret    

c000692c <f_chmod>:
c000692c:	57                   	push   edi
c000692d:	b9 02 00 00 00       	mov    ecx,0x2
c0006932:	56                   	push   esi
c0006933:	53                   	push   ebx
c0006934:	83 ec 60             	sub    esp,0x60
c0006937:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000693b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000693f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006943:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006947:	e8 55 bb ff ff       	call   c00024a1 <mount_volume>
c000694c:	85 c0                	test   eax,eax
c000694e:	0f 85 af 00 00 00    	jne    c0006a03 <f_chmod+0xd7>
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	83 ec 0c             	sub    esp,0xc
c000695b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000695f:	68 60 04 00 00       	push   0x460
c0006964:	e8 db 18 00 00       	call   c0008244 <ff_memalloc>
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	89 c6                	mov    esi,eax
c000696e:	b8 11 00 00 00       	mov    eax,0x11
c0006973:	85 f6                	test   esi,esi
c0006975:	0f 84 88 00 00 00    	je     c0006a03 <f_chmod+0xd7>
c000697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000697f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006985:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006988:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000698b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000698f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006993:	e8 7f e2 ff ff       	call   c0004c17 <follow_path>
c0006998:	85 c0                	test   eax,eax
c000699a:	75 53                	jne    c00069ef <f_chmod+0xc3>
c000699c:	b8 06 00 00 00       	mov    eax,0x6
c00069a1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069a6:	75 47                	jne    c00069ef <f_chmod+0xc3>
c00069a8:	89 f9                	mov    ecx,edi
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 e1 27             	and    ecx,0x27
c00069b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069b4:	75 1d                	jne    c00069d3 <f_chmod+0xa7>
c00069b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069b9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069bc:	21 cb                	and    ebx,ecx
c00069be:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069c1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c8:	e8 a2 cf ff ff       	call   c000396f <store_xdir>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	75 1e                	jne    c00069ef <f_chmod+0xc3>
c00069d1:	eb 13                	jmp    c00069e6 <f_chmod+0xba>
c00069d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069d7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069da:	21 cb                	and    ebx,ecx
c00069dc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069df:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ea:	e8 2b d9 ff ff       	call   c000431a <sync_fs>
c00069ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069f3:	83 ec 0c             	sub    esp,0xc
c00069f6:	56                   	push   esi
c00069f7:	e8 5e 18 00 00       	call   c000825a <ff_memfree>
c00069fc:	83 c4 10             	add    esp,0x10
c00069ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a03:	83 c4 60             	add    esp,0x60
c0006a06:	5b                   	pop    ebx
c0006a07:	5e                   	pop    esi
c0006a08:	5f                   	pop    edi
c0006a09:	c3                   	ret    

c0006a0a <f_utime>:
c0006a0a:	56                   	push   esi
c0006a0b:	b9 02 00 00 00       	mov    ecx,0x2
c0006a10:	53                   	push   ebx
c0006a11:	83 ec 64             	sub    esp,0x64
c0006a14:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a1c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a20:	e8 7c ba ff ff       	call   c00024a1 <mount_volume>
c0006a25:	85 c0                	test   eax,eax
c0006a27:	0f 85 b5 00 00 00    	jne    c0006ae2 <f_utime+0xd8>
c0006a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a31:	83 ec 0c             	sub    esp,0xc
c0006a34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a38:	68 60 04 00 00       	push   0x460
c0006a3d:	e8 02 18 00 00       	call   c0008244 <ff_memalloc>
c0006a42:	83 c4 10             	add    esp,0x10
c0006a45:	89 c3                	mov    ebx,eax
c0006a47:	b8 11 00 00 00       	mov    eax,0x11
c0006a4c:	85 db                	test   ebx,ebx
c0006a4e:	0f 84 8e 00 00 00    	je     c0006ae2 <f_utime+0xd8>
c0006a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a58:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a5e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a64:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a68:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a6c:	e8 a6 e1 ff ff       	call   c0004c17 <follow_path>
c0006a71:	85 c0                	test   eax,eax
c0006a73:	75 59                	jne    c0006ace <f_utime+0xc4>
c0006a75:	b8 06 00 00 00       	mov    eax,0x6
c0006a7a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a7f:	75 4d                	jne    c0006ace <f_utime+0xc4>
c0006a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a85:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a89:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a8d:	c1 e2 10             	shl    edx,0x10
c0006a90:	09 ca                	or     edx,ecx
c0006a92:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a95:	75 1a                	jne    c0006ab1 <f_utime+0xa7>
c0006a97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a9a:	83 c0 0c             	add    eax,0xc
c0006a9d:	e8 e5 af ff ff       	call   c0001a87 <st_dword>
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 c4 ce ff ff       	call   c000396f <store_xdir>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 1f                	jne    c0006ace <f_utime+0xc4>
c0006aaf:	eb 14                	jmp    c0006ac5 <f_utime+0xbb>
c0006ab1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ab5:	83 c0 16             	add    eax,0x16
c0006ab8:	e8 ca af ff ff       	call   c0001a87 <st_dword>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	e8 4c d8 ff ff       	call   c000431a <sync_fs>
c0006ace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ad2:	83 ec 0c             	sub    esp,0xc
c0006ad5:	53                   	push   ebx
c0006ad6:	e8 7f 17 00 00       	call   c000825a <ff_memfree>
c0006adb:	83 c4 10             	add    esp,0x10
c0006ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ae2:	83 c4 64             	add    esp,0x64
c0006ae5:	5b                   	pop    ebx
c0006ae6:	5e                   	pop    esi
c0006ae7:	c3                   	ret    

c0006ae8 <f_getlabel>:
c0006ae8:	55                   	push   ebp
c0006ae9:	31 c9                	xor    ecx,ecx
c0006aeb:	57                   	push   edi
c0006aec:	56                   	push   esi
c0006aed:	53                   	push   ebx
c0006aee:	83 ec 6c             	sub    esp,0x6c
c0006af1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006af5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006afc:	e8 a0 b9 ff ff       	call   c00024a1 <mount_volume>
c0006b01:	89 c6                	mov    esi,eax
c0006b03:	85 c0                	test   eax,eax
c0006b05:	0f 85 c1 01 00 00    	jne    c0006ccc <f_getlabel+0x1e4>
c0006b0b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b13:	0f 84 5f 01 00 00    	je     c0006c78 <f_getlabel+0x190>
c0006b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1d:	31 d2                	xor    edx,edx
c0006b1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2f:	e8 39 c4 ff ff       	call   c0002f6d <dir_sdi>
c0006b34:	85 c0                	test   eax,eax
c0006b36:	0f 85 2d 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b3c:	ba 01 00 00 00       	mov    edx,0x1
c0006b41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b45:	e8 33 cc ff ff       	call   c000377d <dir_read>
c0006b4a:	85 c0                	test   eax,eax
c0006b4c:	0f 85 17 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b59:	74 09                	je     c0006b64 <f_getlabel+0x7c>
c0006b5b:	31 db                	xor    ebx,ebx
c0006b5d:	31 c9                	xor    ecx,ecx
c0006b5f:	e9 c8 00 00 00       	jmp    c0006c2c <f_getlabel+0x144>
c0006b64:	31 ed                	xor    ebp,ebp
c0006b66:	31 db                	xor    ebx,ebx
c0006b68:	31 ff                	xor    edi,edi
c0006b6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b72:	39 fa                	cmp    edx,edi
c0006b74:	76 4b                	jbe    c0006bc1 <f_getlabel+0xd9>
c0006b76:	47                   	inc    edi
c0006b77:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b7a:	01 d0                	add    eax,edx
c0006b7c:	e8 90 ae ff ff       	call   c0001a11 <ld_word>
c0006b81:	66 85 ed             	test   bp,bp
c0006b84:	75 0d                	jne    c0006b93 <f_getlabel+0xab>
c0006b86:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b8c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b91:	76 28                	jbe    c0006bbb <f_getlabel+0xd3>
c0006b93:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b9a:	89 e9                	mov    ecx,ebp
c0006b9c:	01 da                	add    edx,ebx
c0006b9e:	c1 e1 10             	shl    ecx,0x10
c0006ba1:	0f b7 c0             	movzx  eax,ax
c0006ba4:	09 c8                	or     eax,ecx
c0006ba6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bab:	e8 01 b0 ff ff       	call   c0001bb1 <put_utf>
c0006bb0:	84 c0                	test   al,al
c0006bb2:	74 0b                	je     c0006bbf <f_getlabel+0xd7>
c0006bb4:	0f b6 c0             	movzx  eax,al
c0006bb7:	01 c3                	add    ebx,eax
c0006bb9:	31 c0                	xor    eax,eax
c0006bbb:	89 c5                	mov    ebp,eax
c0006bbd:	eb ab                	jmp    c0006b6a <f_getlabel+0x82>
c0006bbf:	31 db                	xor    ebx,ebx
c0006bc1:	66 85 ed             	test   bp,bp
c0006bc4:	74 02                	je     c0006bc8 <f_getlabel+0xe0>
c0006bc6:	31 db                	xor    ebx,ebx
c0006bc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bcf:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bd3:	e9 a0 00 00 00       	jmp    c0006c78 <f_getlabel+0x190>
c0006bd8:	83 ff 0b             	cmp    edi,0xb
c0006bdb:	74 11                	je     c0006bee <f_getlabel+0x106>
c0006bdd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006be6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006be9:	c1 e0 08             	shl    eax,0x8
c0006bec:	09 c2                	or     edx,eax
c0006bee:	0f b7 d2             	movzx  edx,dx
c0006bf1:	50                   	push   eax
c0006bf2:	50                   	push   eax
c0006bf3:	68 b5 01 00 00       	push   0x1b5
c0006bf8:	52                   	push   edx
c0006bf9:	e8 03 17 00 00       	call   c0008301 <ff_oem2uni>
c0006bfe:	83 c4 10             	add    esp,0x10
c0006c01:	66 85 c0             	test   ax,ax
c0006c04:	74 46                	je     c0006c4c <f_getlabel+0x164>
c0006c06:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c0d:	0f b7 c0             	movzx  eax,ax
c0006c10:	01 da                	add    edx,ebx
c0006c12:	b9 04 00 00 00       	mov    ecx,0x4
c0006c17:	e8 95 af ff ff       	call   c0001bb1 <put_utf>
c0006c1c:	84 c0                	test   al,al
c0006c1e:	74 2c                	je     c0006c4c <f_getlabel+0x164>
c0006c20:	0f b6 c0             	movzx  eax,al
c0006c23:	01 c3                	add    ebx,eax
c0006c25:	83 ff 0b             	cmp    edi,0xb
c0006c28:	74 24                	je     c0006c4e <f_getlabel+0x166>
c0006c2a:	89 f9                	mov    ecx,edi
c0006c2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c30:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c33:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c38:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c41:	e8 9f ae ff ff       	call   c0001ae5 <dbc_1st>
c0006c46:	85 c0                	test   eax,eax
c0006c48:	74 a4                	je     c0006bee <f_getlabel+0x106>
c0006c4a:	eb 8c                	jmp    c0006bd8 <f_getlabel+0xf0>
c0006c4c:	31 db                	xor    ebx,ebx
c0006c4e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c58:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c5f:	74 17                	je     c0006c78 <f_getlabel+0x190>
c0006c61:	4b                   	dec    ebx
c0006c62:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c65:	74 ee                	je     c0006c55 <f_getlabel+0x16d>
c0006c67:	eb 0f                	jmp    c0006c78 <f_getlabel+0x190>
c0006c69:	83 f8 04             	cmp    eax,0x4
c0006c6c:	75 5c                	jne    c0006cca <f_getlabel+0x1e2>
c0006c6e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c78:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c80:	74 4a                	je     c0006ccc <f_getlabel+0x1e4>
c0006c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c86:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c89:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c8c:	e8 5e b5 ff ff       	call   c00021ef <move_window>
c0006c91:	89 c6                	mov    esi,eax
c0006c93:	85 c0                	test   eax,eax
c0006c95:	75 35                	jne    c0006ccc <f_getlabel+0x1e4>
c0006c97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c9b:	b8 43 00 00 00       	mov    eax,0x43
c0006ca0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ca2:	80 f9 03             	cmp    cl,0x3
c0006ca5:	74 0f                	je     c0006cb6 <f_getlabel+0x1ce>
c0006ca7:	31 c0                	xor    eax,eax
c0006ca9:	80 f9 04             	cmp    cl,0x4
c0006cac:	0f 94 c0             	sete   al
c0006caf:	48                   	dec    eax
c0006cb0:	83 e0 c3             	and    eax,0xffffffc3
c0006cb3:	83 c0 64             	add    eax,0x64
c0006cb6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cba:	e8 5f ad ff ff       	call   c0001a1e <ld_dword>
c0006cbf:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cc6:	89 07                	mov    DWORD PTR [edi],eax
c0006cc8:	eb 02                	jmp    c0006ccc <f_getlabel+0x1e4>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	83 c4 6c             	add    esp,0x6c
c0006ccf:	89 f0                	mov    eax,esi
c0006cd1:	5b                   	pop    ebx
c0006cd2:	5e                   	pop    esi
c0006cd3:	5f                   	pop    edi
c0006cd4:	5d                   	pop    ebp
c0006cd5:	c3                   	ret    

c0006cd6 <f_setlabel>:
c0006cd6:	56                   	push   esi
c0006cd7:	b9 02 00 00 00       	mov    ecx,0x2
c0006cdc:	53                   	push   ebx
c0006cdd:	83 ec 74             	sub    esp,0x74
c0006ce0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ce4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ceb:	e8 b1 b7 ff ff       	call   c00024a1 <mount_volume>
c0006cf0:	89 c6                	mov    esi,eax
c0006cf2:	85 c0                	test   eax,eax
c0006cf4:	0f 85 41 02 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cfe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d01:	0f 85 8e 00 00 00    	jne    c0006d95 <f_setlabel+0xbf>
c0006d07:	b9 16 00 00 00       	mov    ecx,0x16
c0006d0c:	31 d2                	xor    edx,edx
c0006d0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d12:	31 db                	xor    ebx,ebx
c0006d14:	e8 8c ad ff ff       	call   c0001aa5 <mem_set>
c0006d19:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d20:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d23:	0f 86 0a 01 00 00    	jbe    c0006e33 <f_setlabel+0x15d>
c0006d29:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d30:	e8 b6 ad ff ff       	call   c0001aeb <tchar2uni>
c0006d35:	89 c6                	mov    esi,eax
c0006d37:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d3c:	76 2a                	jbe    c0006d68 <f_setlabel+0x92>
c0006d3e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d41:	74 05                	je     c0006d48 <f_setlabel+0x72>
c0006d43:	83 fb 09             	cmp    ebx,0x9
c0006d46:	76 0a                	jbe    c0006d52 <f_setlabel+0x7c>
c0006d48:	be 06 00 00 00       	mov    esi,0x6
c0006d4d:	e9 e9 01 00 00       	jmp    c0006f3b <f_setlabel+0x265>
c0006d52:	89 c2                	mov    edx,eax
c0006d54:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d58:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d5b:	c1 ea 10             	shr    edx,0x10
c0006d5e:	01 c8                	add    eax,ecx
c0006d60:	43                   	inc    ebx
c0006d61:	e8 1d ad ff ff       	call   c0001a83 <st_word>
c0006d66:	eb 04                	jmp    c0006d6c <f_setlabel+0x96>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	74 dc                	je     c0006d48 <f_setlabel+0x72>
c0006d6c:	89 f2                	mov    edx,esi
c0006d6e:	b8 37 7d 02 c0       	mov    eax,0xc0027d37
c0006d73:	e8 5b ad ff ff       	call   c0001ad3 <chk_chr>
c0006d78:	85 c0                	test   eax,eax
c0006d7a:	75 cc                	jne    c0006d48 <f_setlabel+0x72>
c0006d7c:	83 fb 0a             	cmp    ebx,0xa
c0006d7f:	77 c7                	ja     c0006d48 <f_setlabel+0x72>
c0006d81:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d84:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d88:	0f b7 d6             	movzx  edx,si
c0006d8b:	01 c8                	add    eax,ecx
c0006d8d:	43                   	inc    ebx
c0006d8e:	e8 f0 ac ff ff       	call   c0001a83 <st_word>
c0006d93:	eb 84                	jmp    c0006d19 <f_setlabel+0x43>
c0006d95:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d9a:	ba 20 00 00 00       	mov    edx,0x20
c0006d9f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	e8 fb ac ff ff       	call   c0001aa5 <mem_set>
c0006daa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006db1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006db4:	76 60                	jbe    c0006e16 <f_setlabel+0x140>
c0006db6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dbd:	e8 29 ad ff ff       	call   c0001aeb <tchar2uni>
c0006dc2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dc7:	0f 87 7b ff ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006dcd:	83 ec 0c             	sub    esp,0xc
c0006dd0:	50                   	push   eax
c0006dd1:	e8 97 15 00 00       	call   c000836d <ff_wtoupper>
c0006dd6:	5a                   	pop    edx
c0006dd7:	59                   	pop    ecx
c0006dd8:	68 b5 01 00 00       	push   0x1b5
c0006ddd:	50                   	push   eax
c0006dde:	e8 8e 14 00 00       	call   c0008271 <ff_uni2oem>
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	89 c6                	mov    esi,eax
c0006de8:	66 85 c0             	test   ax,ax
c0006deb:	0f 84 57 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006df1:	0f b7 d0             	movzx  edx,ax
c0006df4:	b8 30 7d 02 c0       	mov    eax,0xc0027d30
c0006df9:	e8 d5 ac ff ff       	call   c0001ad3 <chk_chr>
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	0f 85 42 ff ff ff    	jne    c0006d48 <f_setlabel+0x72>
c0006e06:	66 81 fe ff 00       	cmp    si,0xff
c0006e0b:	0f 87 14 01 00 00    	ja     c0006f25 <f_setlabel+0x24f>
c0006e11:	e9 fa 00 00 00       	jmp    c0006f10 <f_setlabel+0x23a>
c0006e16:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e1b:	0f 84 27 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006e21:	85 db                	test   ebx,ebx
c0006e23:	74 0e                	je     c0006e33 <f_setlabel+0x15d>
c0006e25:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e28:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e2d:	75 04                	jne    c0006e33 <f_setlabel+0x15d>
c0006e2f:	89 c3                	mov    ebx,eax
c0006e31:	eb ee                	jmp    c0006e21 <f_setlabel+0x14b>
c0006e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e37:	31 d2                	xor    edx,edx
c0006e39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e49:	e8 1f c1 ff ff       	call   c0002f6d <dir_sdi>
c0006e4e:	89 c6                	mov    esi,eax
c0006e50:	85 c0                	test   eax,eax
c0006e52:	0f 85 e3 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006e58:	ba 01 00 00 00       	mov    edx,0x1
c0006e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e61:	e8 17 c9 ff ff       	call   c000377d <dir_read>
c0006e66:	85 c0                	test   eax,eax
c0006e68:	75 21                	jne    c0006e8b <f_setlabel+0x1b5>
c0006e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e72:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e75:	74 5d                	je     c0006ed4 <f_setlabel+0x1fe>
c0006e77:	85 db                	test   ebx,ebx
c0006e79:	74 0b                	je     c0006e86 <f_setlabel+0x1b0>
c0006e7b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e80:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e84:	eb 70                	jmp    c0006ef6 <f_setlabel+0x220>
c0006e86:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e89:	eb 70                	jmp    c0006efb <f_setlabel+0x225>
c0006e8b:	83 f8 04             	cmp    eax,0x4
c0006e8e:	75 7c                	jne    c0006f0c <f_setlabel+0x236>
c0006e90:	85 db                	test   ebx,ebx
c0006e92:	0f 84 a3 00 00 00    	je     c0006f3b <f_setlabel+0x265>
c0006e98:	ba 01 00 00 00       	mov    edx,0x1
c0006e9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea1:	e8 51 ca ff ff       	call   c00038f7 <dir_alloc>
c0006ea6:	89 c6                	mov    esi,eax
c0006ea8:	85 c0                	test   eax,eax
c0006eaa:	0f 85 8b 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006eb0:	31 d2                	xor    edx,edx
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	b9 20 00 00 00       	mov    ecx,0x20
c0006ebb:	e8 e5 ab ff ff       	call   c0001aa5 <mem_set>
c0006ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	75 18                	jne    c0006ee5 <f_setlabel+0x20f>
c0006ecd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ed0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ed7:	b9 16 00 00 00       	mov    ecx,0x16
c0006edc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee0:	83 c0 02             	add    eax,0x2
c0006ee3:	eb 9b                	jmp    c0006e80 <f_setlabel+0x1aa>
c0006ee5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ee9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ef2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef6:	e8 95 ab ff ff       	call   c0001a90 <mem_cpy>
c0006efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eff:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f07:	e8 0e d4 ff ff       	call   c000431a <sync_fs>
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	eb 2b                	jmp    c0006f3b <f_setlabel+0x265>
c0006f10:	83 fb 0a             	cmp    ebx,0xa
c0006f13:	0f 87 2f fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f1f:	43                   	inc    ebx
c0006f20:	e9 85 fe ff ff       	jmp    c0006daa <f_setlabel+0xd4>
c0006f25:	83 fb 09             	cmp    ebx,0x9
c0006f28:	0f 87 1a fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f2e:	89 f0                	mov    eax,esi
c0006f30:	66 c1 e8 08          	shr    ax,0x8
c0006f34:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f38:	43                   	inc    ebx
c0006f39:	eb de                	jmp    c0006f19 <f_setlabel+0x243>
c0006f3b:	89 f0                	mov    eax,esi
c0006f3d:	83 c4 74             	add    esp,0x74
c0006f40:	5b                   	pop    ebx
c0006f41:	5e                   	pop    esi
c0006f42:	c3                   	ret    

c0006f43 <f_forward>:
c0006f43:	55                   	push   ebp
c0006f44:	57                   	push   edi
c0006f45:	56                   	push   esi
c0006f46:	53                   	push   ebx
c0006f47:	83 ec 2c             	sub    esp,0x2c
c0006f4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f58:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f5c:	89 d8                	mov    eax,ebx
c0006f5e:	e8 b1 b1 ff ff       	call   c0002114 <validate>
c0006f63:	89 c5                	mov    ebp,eax
c0006f65:	85 c0                	test   eax,eax
c0006f67:	0f 85 aa 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f6d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f71:	85 ed                	test   ebp,ebp
c0006f73:	0f 85 9e 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f79:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f7d:	0f 84 8f 01 00 00    	je     c0007112 <f_forward+0x1cf>
c0006f83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f89:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f8c:	bf 00 00 00 00       	mov    edi,0x0
c0006f91:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f94:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f98:	89 d1                	mov    ecx,edx
c0006f9a:	19 f9                	sbb    ecx,edi
c0006f9c:	0f 83 cf 00 00 00    	jae    c0007071 <f_forward+0x12e>
c0006fa2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fa6:	e9 c6 00 00 00       	jmp    c0007071 <f_forward+0x12e>
c0006fab:	50                   	push   eax
c0006fac:	50                   	push   eax
c0006fad:	6a 00                	push   0x0
c0006faf:	6a 00                	push   0x0
c0006fb1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fb5:	83 c4 10             	add    esp,0x10
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	0f 84 57 01 00 00    	je     c0007117 <f_forward+0x1d4>
c0006fc0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fc7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fca:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fce:	89 d7                	mov    edi,edx
c0006fd0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fd3:	89 c6                	mov    esi,eax
c0006fd5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fd9:	21 ce                	and    esi,ecx
c0006fdb:	89 c1                	mov    ecx,eax
c0006fdd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fe3:	0f 84 98 00 00 00    	je     c0007081 <f_forward+0x13e>
c0006fe9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fed:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006ff0:	89 c8                	mov    eax,ecx
c0006ff2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ff6:	e8 af ac ff ff       	call   c0001caa <clst2sect>
c0006ffb:	89 d7                	mov    edi,edx
c0006ffd:	09 c7                	or     edi,eax
c0006fff:	0f 84 9e 00 00 00    	je     c00070a3 <f_forward+0x160>
c0007005:	31 ff                	xor    edi,edi
c0007007:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000700a:	01 c6                	add    esi,eax
c000700c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007010:	11 d7                	adc    edi,edx
c0007012:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007015:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007018:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000701c:	39 fa                	cmp    edx,edi
c000701e:	0f 85 a2 00 00 00    	jne    c00070c6 <f_forward+0x183>
c0007024:	39 f0                	cmp    eax,esi
c0007026:	0f 85 9a 00 00 00    	jne    c00070c6 <f_forward+0x183>
c000702c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000702f:	ba 00 02 00 00       	mov    edx,0x200
c0007034:	25 ff 01 00 00       	and    eax,0x1ff
c0007039:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000703d:	29 c2                	sub    edx,eax
c000703f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007042:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007045:	39 d1                	cmp    ecx,edx
c0007047:	76 02                	jbe    c000704b <f_forward+0x108>
c0007049:	89 d1                	mov    ecx,edx
c000704b:	8d 73 50             	lea    esi,[ebx+0x50]
c000704e:	52                   	push   edx
c000704f:	01 c6                	add    esi,eax
c0007051:	52                   	push   edx
c0007052:	51                   	push   ecx
c0007053:	56                   	push   esi
c0007054:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007058:	83 c4 10             	add    esp,0x10
c000705b:	85 c0                	test   eax,eax
c000705d:	74 44                	je     c00070a3 <f_forward+0x160>
c000705f:	31 ff                	xor    edi,edi
c0007061:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007064:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007067:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000706b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000706f:	01 07                	add    DWORD PTR [edi],eax
c0007071:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007076:	0f 85 2f ff ff ff    	jne    c0006fab <f_forward+0x68>
c000707c:	e9 96 00 00 00       	jmp    c0007117 <f_forward+0x1d4>
c0007081:	85 f6                	test   esi,esi
c0007083:	0f 85 60 ff ff ff    	jne    c0006fe9 <f_forward+0xa6>
c0007089:	89 d7                	mov    edi,edx
c000708b:	09 c7                	or     edi,eax
c000708d:	75 05                	jne    c0007094 <f_forward+0x151>
c000708f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007092:	eb 0a                	jmp    c000709e <f_forward+0x15b>
c0007094:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007097:	89 d8                	mov    eax,ebx
c0007099:	e8 d9 bc ff ff       	call   c0002d77 <get_fat>
c000709e:	83 f8 01             	cmp    eax,0x1
c00070a1:	77 0b                	ja     c00070ae <f_forward+0x16b>
c00070a3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070a7:	bd 02 00 00 00       	mov    ebp,0x2
c00070ac:	eb 69                	jmp    c0007117 <f_forward+0x1d4>
c00070ae:	83 f8 ff             	cmp    eax,0xffffffff
c00070b1:	75 0b                	jne    c00070be <f_forward+0x17b>
c00070b3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070b7:	bd 01 00 00 00       	mov    ebp,0x1
c00070bc:	eb 59                	jmp    c0007117 <f_forward+0x1d4>
c00070be:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070c1:	e9 23 ff ff ff       	jmp    c0006fe9 <f_forward+0xa6>
c00070c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ca:	79 20                	jns    c00070ec <f_forward+0x1a9>
c00070cc:	83 ec 0c             	sub    esp,0xc
c00070cf:	6a 01                	push   0x1
c00070d1:	52                   	push   edx
c00070d2:	50                   	push   eax
c00070d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070db:	50                   	push   eax
c00070dc:	e8 fb a8 ff ff       	call   c00019dc <disk_write>
c00070e1:	83 c4 20             	add    esp,0x20
c00070e4:	85 c0                	test   eax,eax
c00070e6:	75 cb                	jne    c00070b3 <f_forward+0x170>
c00070e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	6a 01                	push   0x1
c00070f1:	57                   	push   edi
c00070f2:	56                   	push   esi
c00070f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ff:	50                   	push   eax
c0007100:	e8 c1 a8 ff ff       	call   c00019c6 <disk_read>
c0007105:	83 c4 20             	add    esp,0x20
c0007108:	85 c0                	test   eax,eax
c000710a:	0f 84 1c ff ff ff    	je     c000702c <f_forward+0xe9>
c0007110:	eb a1                	jmp    c00070b3 <f_forward+0x170>
c0007112:	bd 07 00 00 00       	mov    ebp,0x7
c0007117:	83 c4 2c             	add    esp,0x2c
c000711a:	89 e8                	mov    eax,ebp
c000711c:	5b                   	pop    ebx
c000711d:	5e                   	pop    esi
c000711e:	5f                   	pop    edi
c000711f:	5d                   	pop    ebp
c0007120:	c3                   	ret    

c0007121 <f_mkfs>:
c0007121:	55                   	push   ebp
c0007122:	57                   	push   edi
c0007123:	56                   	push   esi
c0007124:	53                   	push   ebx
c0007125:	bb 0b 00 00 00       	mov    ebx,0xb
c000712a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007130:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007137:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000713e:	e8 b0 ae ff ff       	call   c0001ff3 <get_ldnumber>
c0007143:	85 c0                	test   eax,eax
c0007145:	0f 88 ec 10 00 00    	js     c0008237 <f_mkfs+0x1116>
c000714b:	8b 14 85 e0 c8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3720]
c0007152:	85 d2                	test   edx,edx
c0007154:	74 03                	je     c0007159 <f_mkfs+0x38>
c0007156:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007159:	85 f6                	test   esi,esi
c000715b:	75 05                	jne    c0007162 <f_mkfs+0x41>
c000715d:	be 20 7d 02 c0       	mov    esi,0xc0027d20
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	0f b6 c0             	movzx  eax,al
c0007168:	bb 03 00 00 00       	mov    ebx,0x3
c000716d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007171:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007175:	e8 49 a8 ff ff       	call   c00019c3 <disk_initialize>
c000717a:	83 c4 10             	add    esp,0x10
c000717d:	a8 01                	test   al,0x1
c000717f:	0f 85 b2 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007185:	bb 0a 00 00 00       	mov    ebx,0xa
c000718a:	a8 04                	test   al,0x4
c000718c:	0f 85 a5 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007192:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007195:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007199:	85 c0                	test   eax,eax
c000719b:	75 20                	jne    c00071bd <f_mkfs+0x9c>
c000719d:	51                   	push   ecx
c000719e:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071a2:	50                   	push   eax
c00071a3:	6a 03                	push   0x3
c00071a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a9:	e8 44 a8 ff ff       	call   c00019f2 <disk_ioctl>
c00071ae:	83 c4 10             	add    esp,0x10
c00071b1:	85 c0                	test   eax,eax
c00071b3:	74 08                	je     c00071bd <f_mkfs+0x9c>
c00071b5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071bd:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071c1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071c4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071c9:	77 04                	ja     c00071cf <f_mkfs+0xae>
c00071cb:	85 c2                	test   edx,eax
c00071cd:	74 08                	je     c00071d7 <f_mkfs+0xb6>
c00071cf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071d7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071da:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071de:	48                   	dec    eax
c00071df:	3c 01                	cmp    al,0x1
c00071e1:	76 05                	jbe    c00071e8 <f_mkfs+0xc7>
c00071e3:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071e8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071ef:	48                   	dec    eax
c00071f0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f5:	77 07                	ja     c00071fe <f_mkfs+0xdd>
c00071f7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071fc:	74 08                	je     c0007206 <f_mkfs+0xe5>
c00071fe:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007206:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007209:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000720f:	77 07                	ja     c0007218 <f_mkfs+0xf7>
c0007211:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007214:	85 d8                	test   eax,ebx
c0007216:	74 02                	je     c000721a <f_mkfs+0xf9>
c0007218:	31 db                	xor    ebx,ebx
c000721a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007225:	77 0a                	ja     c0007231 <f_mkfs+0x110>
c0007227:	bb 11 00 00 00       	mov    ebx,0x11
c000722c:	e9 06 10 00 00       	jmp    c0008237 <f_mkfs+0x1116>
c0007231:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007238:	8b 36                	mov    esi,DWORD PTR [esi]
c000723a:	85 ed                	test   ebp,ebp
c000723c:	75 1e                	jne    c000725c <f_mkfs+0x13b>
c000723e:	83 ec 0c             	sub    esp,0xc
c0007241:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007248:	25 00 fe ff ff       	and    eax,0xfffffe00
c000724d:	50                   	push   eax
c000724e:	e8 f1 0f 00 00       	call   c0008244 <ff_memalloc>
c0007253:	83 c4 10             	add    esp,0x10
c0007256:	89 c5                	mov    ebp,eax
c0007258:	85 c0                	test   eax,eax
c000725a:	74 cb                	je     c0007227 <f_mkfs+0x106>
c000725c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007264:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000726c:	52                   	push   edx
c000726d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007271:	50                   	push   eax
c0007272:	6a 01                	push   0x1
c0007274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007278:	e8 75 a7 ff ff       	call   c00019f2 <disk_ioctl>
c000727d:	83 c4 10             	add    esp,0x10
c0007280:	85 c0                	test   eax,eax
c0007282:	0f 85 4a 0f 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007288:	89 f1                	mov    ecx,esi
c000728a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007292:	83 e1 0f             	and    ecx,0xf
c0007295:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000729d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072a1:	83 e6 08             	and    esi,0x8
c00072a4:	75 56                	jne    c00072fc <f_mkfs+0x1db>
c00072a6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072aa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072ae:	83 ff 00             	cmp    edi,0x0
c00072b1:	76 20                	jbe    c00072d3 <f_mkfs+0x1b2>
c00072b3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072b8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072c0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072c6:	83 d7 ff             	adc    edi,0xffffffff
c00072c9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072cd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072d1:	eb 21                	jmp    c00072f4 <f_mkfs+0x1d3>
c00072d3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072d8:	39 f2                	cmp    edx,esi
c00072da:	19 f8                	sbb    eax,edi
c00072dc:	73 1e                	jae    c00072fc <f_mkfs+0x1db>
c00072de:	83 c6 c1             	add    esi,0xffffffc1
c00072e1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072e9:	83 d7 ff             	adc    edi,0xffffffff
c00072ec:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072f0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007300:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007304:	89 04 24             	mov    DWORD PTR [esp],eax
c0007307:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000730b:	31 c0                	xor    eax,eax
c000730d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007312:	89 c7                	mov    edi,eax
c0007314:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007317:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000731b:	0f 83 c5 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c0007321:	89 df                	mov    edi,ebx
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000732a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007331:	c1 ef 09             	shr    edi,0x9
c0007334:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007339:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000733d:	74 29                	je     c0007368 <f_mkfs+0x247>
c000733f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007345:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000734a:	0f 97 c2             	seta   dl
c000734d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007350:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007354:	0f 92 c0             	setb   al
c0007357:	08 c2                	or     dl,al
c0007359:	75 5b                	jne    c00073b6 <f_mkfs+0x295>
c000735b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000735f:	83 e0 07             	and    eax,0x7
c0007362:	3c 04                	cmp    al,0x4
c0007364:	74 50                	je     c00073b6 <f_mkfs+0x295>
c0007366:	eb 1b                	jmp    c0007383 <f_mkfs+0x262>
c0007368:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000736d:	0f 87 73 0a 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007373:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007379:	76 08                	jbe    c0007383 <f_mkfs+0x262>
c000737b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007383:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007387:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000738b:	83 e0 01             	and    eax,0x1
c000738e:	80 e1 02             	and    cl,0x2
c0007391:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007395:	74 0d                	je     c00073a4 <f_mkfs+0x283>
c0007397:	84 c0                	test   al,al
c0007399:	0f 84 53 09 00 00    	je     c0007cf2 <f_mkfs+0xbd1>
c000739f:	e9 12 08 00 00       	jmp    c0007bb6 <f_mkfs+0xa95>
c00073a4:	bb 13 00 00 00       	mov    ebx,0x13
c00073a9:	84 c0                	test   al,al
c00073ab:	0f 85 05 08 00 00    	jne    c0007bb6 <f_mkfs+0xa95>
c00073b1:	e9 39 0e 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c00073b6:	31 c0                	xor    eax,eax
c00073b8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073bd:	89 c7                	mov    edi,eax
c00073bf:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073c2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073c6:	0f 83 1a 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00073cc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073d2:	77 39                	ja     c000740d <f_mkfs+0x2ec>
c00073d4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073d9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073e1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073e4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073e8:	73 08                	jae    c00073f2 <f_mkfs+0x2d1>
c00073ea:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073f2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073fa:	b8 00 00 00 00       	mov    eax,0x0
c00073ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007403:	73 08                	jae    c000740d <f_mkfs+0x2ec>
c0007405:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000740d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007415:	83 c0 20             	add    eax,0x20
c0007418:	83 d2 00             	adc    edx,0x0
c000741b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000741f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007427:	31 d2                	xor    edx,edx
c0007429:	31 ff                	xor    edi,edi
c000742b:	52                   	push   edx
c000742c:	89 fb                	mov    ebx,edi
c000742e:	50                   	push   eax
c000742f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007433:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007437:	e8 70 df 01 00       	call   c00253ac <__udivdi3>
c000743c:	83 c4 10             	add    esp,0x10
c000743f:	c1 e0 02             	shl    eax,0x2
c0007442:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007446:	05 07 02 00 00       	add    eax,0x207
c000744b:	89 f1                	mov    ecx,esi
c000744d:	c1 e8 09             	shr    eax,0x9
c0007450:	83 c1 ff             	add    ecx,0xffffffff
c0007453:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007457:	83 d3 ff             	adc    ebx,0xffffffff
c000745a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000745e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007462:	31 d2                	xor    edx,edx
c0007464:	01 c8                	add    eax,ecx
c0007466:	11 da                	adc    edx,ebx
c0007468:	89 c1                	mov    ecx,eax
c000746a:	f7 de                	neg    esi
c000746c:	89 d0                	mov    eax,edx
c000746e:	83 d7 00             	adc    edi,0x0
c0007471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007475:	f7 df                	neg    edi
c0007477:	21 f1                	and    ecx,esi
c0007479:	21 f8                	and    eax,edi
c000747b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000747f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007483:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007487:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000748b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000748f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007492:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007496:	0f ac d0 01          	shrd   eax,edx,0x1
c000749a:	89 df                	mov    edi,ebx
c000749c:	d1 ea                	shr    edx,1
c000749e:	39 c1                	cmp    ecx,eax
c00074a0:	19 d7                	sbb    edi,edx
c00074a2:	0f 83 3e 09 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00074a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ac:	31 d2                	xor    edx,edx
c00074ae:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074bd:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074c1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074cd:	83 f8 0f             	cmp    eax,0xf
c00074d0:	0f 86 10 09 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c00074d6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074de:	0f 87 02 09 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c00074e4:	31 d2                	xor    edx,edx
c00074e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074ea:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074f2:	83 c0 07             	add    eax,0x7
c00074f5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074fd:	c1 e8 03             	shr    eax,0x3
c0007500:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007507:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000750b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000750f:	c1 e0 09             	shl    eax,0x9
c0007512:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007516:	48                   	dec    eax
c0007517:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000751b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000751f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007523:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007527:	31 d2                	xor    edx,edx
c0007529:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000752d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007538:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000753d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007541:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007545:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007549:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000754d:	31 ff                	xor    edi,edi
c000754f:	31 f6                	xor    esi,esi
c0007551:	31 db                	xor    ebx,ebx
c0007553:	85 ff                	test   edi,edi
c0007555:	74 05                	je     c000755c <f_mkfs+0x43b>
c0007557:	4f                   	dec    edi
c0007558:	74 44                	je     c000759e <f_mkfs+0x47d>
c000755a:	eb 4f                	jmp    c00075ab <f_mkfs+0x48a>
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	0f b7 c3             	movzx  eax,bx
c0007562:	50                   	push   eax
c0007563:	e8 05 0e 00 00       	call   c000836d <ff_wtoupper>
c0007568:	83 c4 10             	add    esp,0x10
c000756b:	89 c1                	mov    ecx,eax
c000756d:	8d 53 01             	lea    edx,[ebx+0x1]
c0007570:	66 39 c3             	cmp    bx,ax
c0007573:	75 3e                	jne    c00075b3 <f_mkfs+0x492>
c0007575:	be 01 00 00 00       	mov    esi,0x1
c000757a:	89 df                	mov    edi,ebx
c000757c:	66 01 f7             	add    di,si
c000757f:	75 07                	jne    c0007588 <f_mkfs+0x467>
c0007581:	83 fe 7f             	cmp    esi,0x7f
c0007584:	77 31                	ja     c00075b7 <f_mkfs+0x496>
c0007586:	eb 16                	jmp    c000759e <f_mkfs+0x47d>
c0007588:	83 ec 0c             	sub    esp,0xc
c000758b:	0f b7 ff             	movzx  edi,di
c000758e:	57                   	push   edi
c000758f:	e8 d9 0d 00 00       	call   c000836d <ff_wtoupper>
c0007594:	83 c4 10             	add    esp,0x10
c0007597:	39 c7                	cmp    edi,eax
c0007599:	75 e6                	jne    c0007581 <f_mkfs+0x460>
c000759b:	46                   	inc    esi
c000759c:	eb dc                	jmp    c000757a <f_mkfs+0x459>
c000759e:	31 c0                	xor    eax,eax
c00075a0:	89 d9                	mov    ecx,ebx
c00075a2:	4e                   	dec    esi
c00075a3:	0f 95 c0             	setne  al
c00075a6:	43                   	inc    ebx
c00075a7:	89 c7                	mov    edi,eax
c00075a9:	eb 14                	jmp    c00075bf <f_mkfs+0x49e>
c00075ab:	89 f1                	mov    ecx,esi
c00075ad:	01 f3                	add    ebx,esi
c00075af:	31 ff                	xor    edi,edi
c00075b1:	eb 0c                	jmp    c00075bf <f_mkfs+0x49e>
c00075b3:	89 d3                	mov    ebx,edx
c00075b5:	eb 08                	jmp    c00075bf <f_mkfs+0x49e>
c00075b7:	bf 02 00 00 00       	mov    edi,0x2
c00075bc:	83 c9 ff             	or     ecx,0xffffffff
c00075bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ca:	0f b6 c1             	movzx  eax,cl
c00075cd:	e8 3a a9 ff ff       	call   c0001f0c <xsum32>
c00075d2:	66 c1 e9 08          	shr    cx,0x8
c00075d6:	89 c2                	mov    edx,eax
c00075d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075db:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075df:	0f b7 c1             	movzx  eax,cx
c00075e2:	e8 25 a9 ff ff       	call   c0001f0c <xsum32>
c00075e7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075ec:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075f0:	66 85 db             	test   bx,bx
c00075f3:	74 1f                	je     c0007614 <f_mkfs+0x4f3>
c00075f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ff:	83 c0 02             	add    eax,0x2
c0007602:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007608:	39 c2                	cmp    edx,eax
c000760a:	74 08                	je     c0007614 <f_mkfs+0x4f3>
c000760c:	89 04 24             	mov    DWORD PTR [esp],eax
c000760f:	e9 3f ff ff ff       	jmp    c0007553 <f_mkfs+0x432>
c0007614:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007617:	83 ec 0c             	sub    esp,0xc
c000761a:	05 01 02 00 00       	add    eax,0x201
c000761f:	c1 e8 09             	shr    eax,0x9
c0007622:	50                   	push   eax
c0007623:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007627:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762f:	55                   	push   ebp
c0007630:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007634:	e8 a3 a3 ff ff       	call   c00019dc <disk_write>
c0007639:	83 c4 20             	add    esp,0x20
c000763c:	85 c0                	test   eax,eax
c000763e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007641:	0f 85 8b 0b 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007647:	89 d0                	mov    eax,edx
c0007649:	31 d2                	xor    edx,edx
c000764b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000764f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007653:	66 85 db             	test   bx,bx
c0007656:	74 04                	je     c000765c <f_mkfs+0x53b>
c0007658:	31 c0                	xor    eax,eax
c000765a:	eb b0                	jmp    c000760c <f_mkfs+0x4eb>
c000765c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007660:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007664:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007668:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766e:	31 d2                	xor    edx,edx
c0007670:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000767b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000767f:	c1 eb 09             	shr    ebx,0x9
c0007682:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000768d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007695:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007699:	8d 70 01             	lea    esi,[eax+0x1]
c000769c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076a4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076ab:	31 d2                	xor    edx,edx
c00076ad:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076b5:	89 c1                	mov    ecx,eax
c00076b7:	89 e8                	mov    eax,ebp
c00076b9:	e8 e7 a3 ff ff       	call   c0001aa5 <mem_set>
c00076be:	31 c0                	xor    eax,eax
c00076c0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c3:	76 10                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076c5:	83 fe 07             	cmp    esi,0x7
c00076c8:	76 0b                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076ca:	40                   	inc    eax
c00076cb:	83 ee 08             	sub    esi,0x8
c00076ce:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076d3:	eb eb                	jmp    c00076c0 <f_mkfs+0x59f>
c00076d5:	b2 01                	mov    dl,0x1
c00076d7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076db:	85 f6                	test   esi,esi
c00076dd:	74 0c                	je     c00076eb <f_mkfs+0x5ca>
c00076df:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076e2:	76 07                	jbe    c00076eb <f_mkfs+0x5ca>
c00076e4:	08 11                	or     BYTE PTR [ecx],dl
c00076e6:	4e                   	dec    esi
c00076e7:	d1 e2                	shl    edx,1
c00076e9:	eb f0                	jmp    c00076db <f_mkfs+0x5ba>
c00076eb:	89 df                	mov    edi,ebx
c00076ed:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076f1:	76 04                	jbe    c00076f7 <f_mkfs+0x5d6>
c00076f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076f7:	83 ec 0c             	sub    esp,0xc
c00076fa:	57                   	push   edi
c00076fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007703:	55                   	push   ebp
c0007704:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007708:	e8 cf a2 ff ff       	call   c00019dc <disk_write>
c000770d:	83 c4 20             	add    esp,0x20
c0007710:	85 c0                	test   eax,eax
c0007712:	0f 85 ba 0a 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007718:	31 d2                	xor    edx,edx
c000771a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000771e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007722:	29 fb                	sub    ebx,edi
c0007724:	0f 85 7a ff ff ff    	jne    c00076a4 <f_mkfs+0x583>
c000772a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000772e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007736:	31 f6                	xor    esi,esi
c0007738:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000773c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000773f:	31 d2                	xor    edx,edx
c0007741:	89 e8                	mov    eax,ebp
c0007743:	e8 5d a3 ff ff       	call   c0001aa5 <mem_set>
c0007748:	31 c9                	xor    ecx,ecx
c000774a:	85 db                	test   ebx,ebx
c000774c:	75 40                	jne    c000778e <f_mkfs+0x66d>
c000774e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007753:	89 e8                	mov    eax,ebp
c0007755:	bb 02 00 00 00       	mov    ebx,0x2
c000775a:	e8 28 a3 ff ff       	call   c0001a87 <st_dword>
c000775f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007762:	83 ca ff             	or     edx,0xffffffff
c0007765:	e8 1d a3 ff ff       	call   c0001a87 <st_dword>
c000776a:	b9 08 00 00 00       	mov    ecx,0x8
c000776f:	eb 1d                	jmp    c000778e <f_mkfs+0x66d>
c0007771:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007774:	76 3b                	jbe    c00077b1 <f_mkfs+0x690>
c0007776:	43                   	inc    ebx
c0007777:	83 fe 01             	cmp    esi,0x1
c000777a:	89 da                	mov    edx,ebx
c000777c:	77 03                	ja     c0007781 <f_mkfs+0x660>
c000777e:	83 ca ff             	or     edx,0xffffffff
c0007781:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007785:	4e                   	dec    esi
c0007786:	e8 fc a2 ff ff       	call   c0001a87 <st_dword>
c000778b:	83 c1 04             	add    ecx,0x4
c000778e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007792:	85 f6                	test   esi,esi
c0007794:	75 db                	jne    c0007771 <f_mkfs+0x650>
c0007796:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000779b:	77 14                	ja     c00077b1 <f_mkfs+0x690>
c000779d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077a1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077a8:	85 f6                	test   esi,esi
c00077aa:	74 05                	je     c00077b1 <f_mkfs+0x690>
c00077ac:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077af:	77 dd                	ja     c000778e <f_mkfs+0x66d>
c00077b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077b9:	39 cf                	cmp    edi,ecx
c00077bb:	76 02                	jbe    c00077bf <f_mkfs+0x69e>
c00077bd:	89 cf                	mov    edi,ecx
c00077bf:	83 ec 0c             	sub    esp,0xc
c00077c2:	57                   	push   edi
c00077c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077cb:	55                   	push   ebp
c00077cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d0:	e8 07 a2 ff ff       	call   c00019dc <disk_write>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	85 c0                	test   eax,eax
c00077da:	0f 85 f2 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00077e0:	31 d2                	xor    edx,edx
c00077e2:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077e6:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077ea:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077ee:	0f 85 48 ff ff ff    	jne    c000773c <f_mkfs+0x61b>
c00077f4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077f7:	31 d2                	xor    edx,edx
c00077f9:	89 e8                	mov    eax,ebp
c00077fb:	31 ff                	xor    edi,edi
c00077fd:	e8 a3 a2 ff ff       	call   c0001aa5 <mem_set>
c0007802:	8d 45 34             	lea    eax,[ebp+0x34]
c0007805:	ba 02 00 00 00       	mov    edx,0x2
c000780a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000780e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007812:	e8 70 a2 ff ff       	call   c0001a87 <st_dword>
c0007817:	8d 45 38             	lea    eax,[ebp+0x38]
c000781a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000781e:	e8 64 a2 ff ff       	call   c0001a87 <st_dword>
c0007823:	8d 45 44             	lea    eax,[ebp+0x44]
c0007826:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000782a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000782e:	e8 54 a2 ff ff       	call   c0001a87 <st_dword>
c0007833:	8d 45 54             	lea    eax,[ebp+0x54]
c0007836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000783a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000783e:	83 c2 02             	add    edx,0x2
c0007841:	e8 41 a2 ff ff       	call   c0001a87 <st_dword>
c0007846:	8d 45 58             	lea    eax,[ebp+0x58]
c0007849:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000784d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007851:	e8 31 a2 ff ff       	call   c0001a87 <st_dword>
c0007856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000785a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000785f:	89 c6                	mov    esi,eax
c0007861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007865:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007869:	89 04 24             	mov    DWORD PTR [esp],eax
c000786c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007870:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007873:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007877:	39 cb                	cmp    ebx,ecx
c0007879:	76 02                	jbe    c000787d <f_mkfs+0x75c>
c000787b:	89 cb                	mov    ebx,ecx
c000787d:	83 ec 0c             	sub    esp,0xc
c0007880:	53                   	push   ebx
c0007881:	57                   	push   edi
c0007882:	56                   	push   esi
c0007883:	55                   	push   ebp
c0007884:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007888:	e8 4f a1 ff ff       	call   c00019dc <disk_write>
c000788d:	83 c4 20             	add    esp,0x20
c0007890:	85 c0                	test   eax,eax
c0007892:	0f 85 3a 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007898:	31 d2                	xor    edx,edx
c000789a:	b9 00 02 00 00       	mov    ecx,0x200
c000789f:	89 e8                	mov    eax,ebp
c00078a1:	e8 ff a1 ff ff       	call   c0001aa5 <mem_set>
c00078a6:	31 d2                	xor    edx,edx
c00078a8:	01 de                	add    esi,ebx
c00078aa:	11 d7                	adc    edi,edx
c00078ac:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078af:	75 bf                	jne    c0007870 <f_mkfs+0x74f>
c00078b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078b9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078c1:	b9 00 02 00 00       	mov    ecx,0x200
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	89 e8                	mov    eax,ebp
c00078ca:	e8 d6 a1 ff ff       	call   c0001aa5 <mem_set>
c00078cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078d4:	ba 00 7e 02 c0       	mov    edx,0xc0027e00
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 b0 a1 ff ff       	call   c0001a90 <mem_cpy>
c00078e0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078eb:	e8 9a a1 ff ff       	call   c0001a8a <st_qword>
c00078f0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078f4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078f7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078fb:	e8 8a a1 ff ff       	call   c0001a8a <st_qword>
c0007900:	8d 45 50             	lea    eax,[ebp+0x50]
c0007903:	ba 20 00 00 00       	mov    edx,0x20
c0007908:	e8 7a a1 ff ff       	call   c0001a87 <st_dword>
c000790d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007911:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007915:	e8 6d a1 ff ff       	call   c0001a87 <st_dword>
c000791a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007926:	e8 5c a1 ff ff       	call   c0001a87 <st_dword>
c000792b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000792e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007932:	e8 50 a1 ff ff       	call   c0001a87 <st_dword>
c0007937:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000793b:	8d 50 02             	lea    edx,[eax+0x2]
c000793e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007941:	e8 41 a1 ff ff       	call   c0001a87 <st_dword>
c0007946:	8d 45 64             	lea    eax,[ebp+0x64]
c0007949:	ba 00 00 21 50       	mov    edx,0x50210000
c000794e:	e8 34 a1 ff ff       	call   c0001a87 <st_dword>
c0007953:	8d 45 68             	lea    eax,[ebp+0x68]
c0007956:	ba 00 01 00 00       	mov    edx,0x100
c000795b:	e8 23 a1 ff ff       	call   c0001a83 <st_word>
c0007960:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007964:	b8 0a 00 00 00       	mov    eax,0xa
c0007969:	48                   	dec    eax
c000796a:	74 05                	je     c0007971 <f_mkfs+0x850>
c000796c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000796f:	eb f8                	jmp    c0007969 <f_mkfs+0x848>
c0007971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007975:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000797d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007981:	74 05                	je     c0007988 <f_mkfs+0x867>
c0007983:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007986:	eb f5                	jmp    c000797d <f_mkfs+0x85c>
c0007988:	8d 45 78             	lea    eax,[ebp+0x78]
c000798b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007990:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007996:	31 db                	xor    ebx,ebx
c0007998:	e8 e6 a0 ff ff       	call   c0001a83 <st_word>
c000799d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079a3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00079ab:	e8 d3 a0 ff ff       	call   c0001a83 <st_word>
c00079b0:	31 c9                	xor    ecx,ecx
c00079b2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079b5:	83 f8 01             	cmp    eax,0x1
c00079b8:	76 13                	jbe    c00079cd <f_mkfs+0x8ac>
c00079ba:	83 f9 70             	cmp    ecx,0x70
c00079bd:	74 0e                	je     c00079cd <f_mkfs+0x8ac>
c00079bf:	89 da                	mov    edx,ebx
c00079c1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079c6:	e8 41 a5 ff ff       	call   c0001f0c <xsum32>
c00079cb:	89 c3                	mov    ebx,eax
c00079cd:	41                   	inc    ecx
c00079ce:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d4:	75 dc                	jne    c00079b2 <f_mkfs+0x891>
c00079d6:	89 f0                	mov    eax,esi
c00079d8:	89 fa                	mov    edx,edi
c00079da:	83 c0 01             	add    eax,0x1
c00079dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079e1:	83 d2 00             	adc    edx,0x0
c00079e4:	83 ec 0c             	sub    esp,0xc
c00079e7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079eb:	6a 01                	push   0x1
c00079ed:	57                   	push   edi
c00079ee:	56                   	push   esi
c00079ef:	55                   	push   ebp
c00079f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079f4:	e8 e3 9f ff ff       	call   c00019dc <disk_write>
c00079f9:	83 c4 20             	add    esp,0x20
c00079fc:	85 c0                	test   eax,eax
c00079fe:	0f 85 ce 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a04:	31 d2                	xor    edx,edx
c0007a06:	b9 00 02 00 00       	mov    ecx,0x200
c0007a0b:	89 e8                	mov    eax,ebp
c0007a0d:	e8 93 a0 ff ff       	call   c0001aa5 <mem_set>
c0007a12:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a1a:	e8 64 a0 ff ff       	call   c0001a83 <st_word>
c0007a1f:	89 f0                	mov    eax,esi
c0007a21:	89 fa                	mov    edx,edi
c0007a23:	83 c0 09             	add    eax,0x9
c0007a26:	83 d2 00             	adc    edx,0x0
c0007a29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a30:	31 c9                	xor    ecx,ecx
c0007a32:	41                   	inc    ecx
c0007a33:	89 da                	mov    edx,ebx
c0007a35:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a3a:	e8 cd a4 ff ff       	call   c0001f0c <xsum32>
c0007a3f:	89 c3                	mov    ebx,eax
c0007a41:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a47:	75 e9                	jne    c0007a32 <f_mkfs+0x911>
c0007a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a4d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a51:	83 c0 01             	add    eax,0x1
c0007a54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a58:	83 d2 00             	adc    edx,0x0
c0007a5b:	83 ec 0c             	sub    esp,0xc
c0007a5e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a62:	6a 01                	push   0x1
c0007a64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a6c:	55                   	push   ebp
c0007a6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a71:	e8 66 9f ff ff       	call   c00019dc <disk_write>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	85 c0                	test   eax,eax
c0007a7b:	0f 85 51 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a85:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a89:	75 09                	jne    c0007a94 <f_mkfs+0x973>
c0007a8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a8e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a92:	74 12                	je     c0007aa6 <f_mkfs+0x985>
c0007a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007aa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aa4:	eb 8a                	jmp    c0007a30 <f_mkfs+0x90f>
c0007aa6:	31 d2                	xor    edx,edx
c0007aa8:	b9 00 02 00 00       	mov    ecx,0x200
c0007aad:	89 e8                	mov    eax,ebp
c0007aaf:	e8 f1 9f ff ff       	call   c0001aa5 <mem_set>
c0007ab4:	83 c6 0b             	add    esi,0xb
c0007ab7:	83 d7 00             	adc    edi,0x0
c0007aba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007abe:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ac2:	31 c9                	xor    ecx,ecx
c0007ac4:	41                   	inc    ecx
c0007ac5:	89 da                	mov    edx,ebx
c0007ac7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007acc:	e8 3b a4 ff ff       	call   c0001f0c <xsum32>
c0007ad1:	89 c3                	mov    ebx,eax
c0007ad3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ad9:	75 e9                	jne    c0007ac4 <f_mkfs+0x9a3>
c0007adb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ade:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ae2:	83 c6 01             	add    esi,0x1
c0007ae5:	83 d7 00             	adc    edi,0x0
c0007ae8:	83 ec 0c             	sub    esp,0xc
c0007aeb:	6a 01                	push   0x1
c0007aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af5:	55                   	push   ebp
c0007af6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afa:	e8 dd 9e ff ff       	call   c00019dc <disk_write>
c0007aff:	83 c4 20             	add    esp,0x20
c0007b02:	85 c0                	test   eax,eax
c0007b04:	0f 85 c8 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b0a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b0e:	75 06                	jne    c0007b16 <f_mkfs+0x9f5>
c0007b10:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b14:	74 09                	je     c0007b1f <f_mkfs+0x9fe>
c0007b16:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b19:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b1d:	eb a3                	jmp    c0007ac2 <f_mkfs+0x9a1>
c0007b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b23:	89 da                	mov    edx,ebx
c0007b25:	01 e8                	add    eax,ebp
c0007b27:	e8 5b 9f ff ff       	call   c0001a87 <st_dword>
c0007b2c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b31:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b39:	75 e4                	jne    c0007b1f <f_mkfs+0x9fe>
c0007b3b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b42:	83 c6 02             	add    esi,0x2
c0007b45:	83 d7 00             	adc    edi,0x0
c0007b48:	83 ec 0c             	sub    esp,0xc
c0007b4b:	6a 01                	push   0x1
c0007b4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b55:	55                   	push   ebp
c0007b56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5a:	e8 7d 9e ff ff       	call   c00019dc <disk_write>
c0007b5f:	83 c4 20             	add    esp,0x20
c0007b62:	85 c0                	test   eax,eax
c0007b64:	0f 85 68 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b6a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b6f:	74 0d                	je     c0007b7e <f_mkfs+0xa5d>
c0007b71:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b79:	e9 43 fd ff ff       	jmp    c00078c1 <f_mkfs+0x7a0>
c0007b7e:	b1 07                	mov    cl,0x7
c0007b80:	e9 e3 05 00 00       	jmp    c0008168 <f_mkfs+0x1047>
c0007b85:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b8a:	0f 85 4f 02 00 00    	jne    c0007ddf <f_mkfs+0xcbe>
c0007b90:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b95:	0f 86 22 02 00 00    	jbe    c0007dbd <f_mkfs+0xc9c>
c0007b9b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba0:	0f 85 81 06 00 00    	jne    c0008227 <f_mkfs+0x1106>
c0007ba6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bad:	83 f8 40             	cmp    eax,0x40
c0007bb0:	0f 87 51 06 00 00    	ja     c0008207 <f_mkfs+0x10e6>
c0007bb6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bba:	85 ff                	test   edi,edi
c0007bbc:	75 1c                	jne    c0007bda <f_mkfs+0xab9>
c0007bbe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bc1:	ba 00 7d 02 c0       	mov    edx,0xc0027d00
c0007bc6:	c1 e9 0c             	shr    ecx,0xc
c0007bc9:	bf 01 00 00 00       	mov    edi,0x1
c0007bce:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bd1:	66 85 c0             	test   ax,ax
c0007bd4:	0f 85 95 01 00 00    	jne    c0007d6f <f_mkfs+0xc4e>
c0007bda:	31 d2                	xor    edx,edx
c0007bdc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bdf:	f7 f7                	div    edi
c0007be1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007be6:	0f 86 95 01 00 00    	jbe    c0007d81 <f_mkfs+0xc60>
c0007bec:	83 c0 02             	add    eax,0x2
c0007bef:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bf4:	01 c0                	add    eax,eax
c0007bf6:	05 ff 01 00 00       	add    eax,0x1ff
c0007bfb:	be 01 00 00 00       	mov    esi,0x1
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c0b:	c1 e0 05             	shl    eax,0x5
c0007c0e:	c1 e8 09             	shr    eax,0x9
c0007c11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c15:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c20:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c24:	89 f0                	mov    eax,esi
c0007c26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c2a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c3a:	31 d2                	xor    edx,edx
c0007c3c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c41:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c45:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c49:	31 db                	xor    ebx,ebx
c0007c4b:	01 c8                	add    eax,ecx
c0007c4d:	11 da                	adc    edx,ebx
c0007c4f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c53:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c57:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c5b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c5f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c63:	f7 da                	neg    edx
c0007c65:	21 d1                	and    ecx,edx
c0007c67:	29 d9                	sub    ecx,ebx
c0007c69:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c6e:	0f 85 20 01 00 00    	jne    c0007d94 <f_mkfs+0xc73>
c0007c74:	31 db                	xor    ebx,ebx
c0007c76:	01 ce                	add    esi,ecx
c0007c78:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c7c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c80:	31 d2                	xor    edx,edx
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c88:	c1 e0 04             	shl    eax,0x4
c0007c8b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c8f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c93:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c97:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c9b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c9e:	19 d3                	sbb    ebx,edx
c0007ca0:	0f 82 40 01 00 00    	jb     c0007de6 <f_mkfs+0xcc5>
c0007ca6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ca9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cad:	89 c8                	mov    eax,ecx
c0007caf:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cb4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cb8:	29 f0                	sub    eax,esi
c0007cba:	29 d0                	sub    eax,edx
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	f7 f7                	div    edi
c0007cc0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc5:	89 c3                	mov    ebx,eax
c0007cc7:	0f 85 b8 fe ff ff    	jne    c0007b85 <f_mkfs+0xa64>
c0007ccd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cd2:	0f 87 1d 01 00 00    	ja     c0007df5 <f_mkfs+0xcd4>
c0007cd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cdd:	0f 85 03 01 00 00    	jne    c0007de6 <f_mkfs+0xcc5>
c0007ce3:	83 ff 01             	cmp    edi,0x1
c0007ce6:	0f 86 fa 00 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c0007cec:	d1 ef                	shr    edi,1
c0007cee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cf2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cf6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf9:	85 db                	test   ebx,ebx
c0007cfb:	75 2d                	jne    c0007d2a <f_mkfs+0xc09>
c0007cfd:	89 cb                	mov    ebx,ecx
c0007cff:	ba 10 7d 02 c0       	mov    edx,0xc0027d10
c0007d04:	c1 eb 11             	shr    ebx,0x11
c0007d07:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d0f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d12:	66 85 c0             	test   ax,ax
c0007d15:	74 11                	je     c0007d28 <f_mkfs+0xc07>
c0007d17:	83 c2 02             	add    edx,0x2
c0007d1a:	39 d8                	cmp    eax,ebx
c0007d1c:	77 0a                	ja     c0007d28 <f_mkfs+0xc07>
c0007d1e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d22:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d26:	eb e7                	jmp    c0007d0f <f_mkfs+0xbee>
c0007d28:	31 db                	xor    ebx,ebx
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	89 c8                	mov    eax,ecx
c0007d2e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d32:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d39:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d3e:	c1 ea 09             	shr    edx,0x9
c0007d41:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d46:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d4a:	0f 87 96 00 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007d50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d54:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d60:	be 20 00 00 00       	mov    esi,0x20
c0007d65:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d6a:	e9 a6 fe ff ff       	jmp    c0007c15 <f_mkfs+0xaf4>
c0007d6f:	83 c2 02             	add    edx,0x2
c0007d72:	39 c8                	cmp    eax,ecx
c0007d74:	0f 87 60 fe ff ff    	ja     c0007bda <f_mkfs+0xab9>
c0007d7a:	01 ff                	add    edi,edi
c0007d7c:	e9 4d fe ff ff       	jmp    c0007bce <f_mkfs+0xaad>
c0007d81:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d84:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d89:	40                   	inc    eax
c0007d8a:	d1 e8                	shr    eax,1
c0007d8c:	83 c0 03             	add    eax,0x3
c0007d8f:	e9 62 fe ff ff       	jmp    c0007bf6 <f_mkfs+0xad5>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	89 c8                	mov    eax,ecx
c0007d98:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d9c:	85 d2                	test   edx,edx
c0007d9e:	74 0c                	je     c0007dac <f_mkfs+0xc8b>
c0007da0:	49                   	dec    ecx
c0007da1:	46                   	inc    esi
c0007da2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007da7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007dac:	89 c8                	mov    eax,ecx
c0007dae:	31 d2                	xor    edx,edx
c0007db0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007db4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007db8:	e9 c3 fe ff ff       	jmp    c0007c80 <f_mkfs+0xb5f>
c0007dbd:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc2:	77 31                	ja     c0007df5 <f_mkfs+0xcd4>
c0007dc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dc9:	75 1b                	jne    c0007de6 <f_mkfs+0xcc5>
c0007dcb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dd2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dd7:	0f 86 d9 fd ff ff    	jbe    c0007bb6 <f_mkfs+0xa95>
c0007ddd:	eb 07                	jmp    c0007de6 <f_mkfs+0xcc5>
c0007ddf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007de4:	76 0a                	jbe    c0007df0 <f_mkfs+0xccf>
c0007de6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007deb:	e9 ff 03 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c0007df0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007df5:	31 d2                	xor    edx,edx
c0007df7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dfc:	89 e8                	mov    eax,ebp
c0007dfe:	e8 a2 9c ff ff       	call   c0001aa5 <mem_set>
c0007e03:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e08:	ba 22 7e 02 c0       	mov    edx,0xc0027e22
c0007e0d:	89 e8                	mov    eax,ebp
c0007e0f:	e8 7c 9c ff ff       	call   c0001a90 <mem_cpy>
c0007e14:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e17:	ba 00 02 00 00       	mov    edx,0x200
c0007e1c:	e8 62 9c ff ff       	call   c0001a83 <st_word>
c0007e21:	89 f8                	mov    eax,edi
c0007e23:	0f b7 d6             	movzx  edx,si
c0007e26:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e2c:	e8 52 9c ff ff       	call   c0001a83 <st_word>
c0007e31:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e35:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e3a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e3d:	75 08                	jne    c0007e47 <f_mkfs+0xd26>
c0007e3f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e47:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e4e:	e8 30 9c ff ff       	call   c0001a83 <st_word>
c0007e53:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e58:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e5c:	39 d0                	cmp    eax,edx
c0007e5e:	b8 00 00 00 00       	mov    eax,0x0
c0007e63:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e67:	72 0a                	jb     c0007e73 <f_mkfs+0xd52>
c0007e69:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e6c:	e8 12 9c ff ff       	call   c0001a83 <st_word>
c0007e71:	eb 08                	jmp    c0007e7b <f_mkfs+0xd5a>
c0007e73:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e76:	e8 0c 9c ff ff       	call   c0001a87 <st_dword>
c0007e7b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e7e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e83:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e87:	e8 f7 9b ff ff       	call   c0001a83 <st_word>
c0007e8c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e8f:	ba ff 00 00 00       	mov    edx,0xff
c0007e94:	e8 ea 9b ff ff       	call   c0001a83 <st_word>
c0007e99:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ea0:	e8 e2 9b ff ff       	call   c0001a87 <st_dword>
c0007ea5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eaa:	75 57                	jne    c0007f03 <f_mkfs+0xde2>
c0007eac:	8d 45 43             	lea    eax,[ebp+0x43]
c0007eaf:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eb4:	e8 ce 9b ff ff       	call   c0001a87 <st_dword>
c0007eb9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ebc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec0:	e8 c2 9b ff ff       	call   c0001a87 <st_dword>
c0007ec5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ec8:	ba 02 00 00 00       	mov    edx,0x2
c0007ecd:	e8 b5 9b ff ff       	call   c0001a87 <st_dword>
c0007ed2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ed5:	ba 01 00 00 00       	mov    edx,0x1
c0007eda:	e8 a4 9b ff ff       	call   c0001a83 <st_word>
c0007edf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ee2:	ba 06 00 00 00       	mov    edx,0x6
c0007ee7:	e8 97 9b ff ff       	call   c0001a83 <st_word>
c0007eec:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ef0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ef4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ef7:	b9 13 00 00 00       	mov    ecx,0x13
c0007efc:	ba 2e 7e 02 c0       	mov    edx,0xc0027e2e
c0007f01:	eb 2f                	jmp    c0007f32 <f_mkfs+0xe11>
c0007f03:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f06:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0b:	e8 77 9b ff ff       	call   c0001a87 <st_dword>
c0007f10:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f15:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f18:	e8 66 9b ff ff       	call   c0001a83 <st_word>
c0007f1d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f21:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f25:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f28:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2d:	ba 42 7e 02 c0       	mov    edx,0xc0027e42
c0007f32:	e8 59 9b ff ff       	call   c0001a90 <mem_cpy>
c0007f37:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f42:	89 f0                	mov    eax,esi
c0007f44:	e8 3a 9b ff ff       	call   c0001a83 <st_word>
c0007f49:	83 ec 0c             	sub    esp,0xc
c0007f4c:	6a 01                	push   0x1
c0007f4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f56:	55                   	push   ebp
c0007f57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5b:	e8 7c 9a ff ff       	call   c00019dc <disk_write>
c0007f60:	83 c4 20             	add    esp,0x20
c0007f63:	85 c0                	test   eax,eax
c0007f65:	0f 85 67 02 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007f6b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f70:	0f 85 b7 00 00 00    	jne    c000802d <f_mkfs+0xf0c>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f83:	83 c0 06             	add    eax,0x6
c0007f86:	83 d2 00             	adc    edx,0x0
c0007f89:	52                   	push   edx
c0007f8a:	50                   	push   eax
c0007f8b:	55                   	push   ebp
c0007f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f90:	e8 47 9a ff ff       	call   c00019dc <disk_write>
c0007f95:	83 c4 20             	add    esp,0x20
c0007f98:	b9 00 02 00 00       	mov    ecx,0x200
c0007f9d:	31 d2                	xor    edx,edx
c0007f9f:	89 e8                	mov    eax,ebp
c0007fa1:	e8 ff 9a ff ff       	call   c0001aa5 <mem_set>
c0007fa6:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fab:	89 e8                	mov    eax,ebp
c0007fad:	e8 d5 9a ff ff       	call   c0001a87 <st_dword>
c0007fb2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fb8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fbd:	e8 c5 9a ff ff       	call   c0001a87 <st_dword>
c0007fc2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fc5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fcb:	e8 b7 9a ff ff       	call   c0001a87 <st_dword>
c0007fd0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fd6:	ba 02 00 00 00       	mov    edx,0x2
c0007fdb:	e8 a7 9a ff ff       	call   c0001a87 <st_dword>
c0007fe0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fe5:	89 f0                	mov    eax,esi
c0007fe7:	e8 97 9a ff ff       	call   c0001a83 <st_word>
c0007fec:	83 ec 0c             	sub    esp,0xc
c0007fef:	6a 01                	push   0x1
c0007ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ff5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ff9:	83 c0 07             	add    eax,0x7
c0007ffc:	83 d2 00             	adc    edx,0x0
c0007fff:	52                   	push   edx
c0008000:	50                   	push   eax
c0008001:	55                   	push   ebp
c0008002:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008006:	e8 d1 99 ff ff       	call   c00019dc <disk_write>
c000800b:	83 c4 14             	add    esp,0x14
c000800e:	6a 01                	push   0x1
c0008010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008014:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008018:	83 c0 01             	add    eax,0x1
c000801b:	83 d2 00             	adc    edx,0x0
c000801e:	52                   	push   edx
c000801f:	50                   	push   eax
c0008020:	55                   	push   ebp
c0008021:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008025:	e8 b2 99 ff ff       	call   c00019dc <disk_write>
c000802a:	83 c4 20             	add    esp,0x20
c000802d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008034:	31 d2                	xor    edx,edx
c0008036:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000803c:	31 db                	xor    ebx,ebx
c000803e:	89 e8                	mov    eax,ebp
c0008040:	e8 60 9a ff ff       	call   c0001aa5 <mem_set>
c0008045:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000804a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008051:	0f 94 c3             	sete   bl
c0008054:	4b                   	dec    ebx
c0008055:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000805b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008061:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008066:	75 21                	jne    c0008089 <f_mkfs+0xf68>
c0008068:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 13 9a ff ff       	call   c0001a87 <st_dword>
c0008074:	8d 45 04             	lea    eax,[ebp+0x4]
c0008077:	83 ca ff             	or     edx,0xffffffff
c000807a:	e8 08 9a ff ff       	call   c0001a87 <st_dword>
c000807f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008082:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008087:	eb 04                	jmp    c000808d <f_mkfs+0xf6c>
c0008089:	89 da                	mov    edx,ebx
c000808b:	89 e8                	mov    eax,ebp
c000808d:	e8 f5 99 ff ff       	call   c0001a87 <st_dword>
c0008092:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000809a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080a2:	39 ce                	cmp    esi,ecx
c00080a4:	76 02                	jbe    c00080a8 <f_mkfs+0xf87>
c00080a6:	89 ce                	mov    esi,ecx
c00080a8:	83 ec 0c             	sub    esp,0xc
c00080ab:	56                   	push   esi
c00080ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b4:	55                   	push   ebp
c00080b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080b9:	e8 1e 99 ff ff       	call   c00019dc <disk_write>
c00080be:	83 c4 20             	add    esp,0x20
c00080c1:	85 c0                	test   eax,eax
c00080c3:	0f 85 09 01 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	b9 00 02 00 00       	mov    ecx,0x200
c00080d0:	89 e8                	mov    eax,ebp
c00080d2:	e8 ce 99 ff ff       	call   c0001aa5 <mem_set>
c00080d7:	31 d2                	xor    edx,edx
c00080d9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080dd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080e1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080e5:	75 b3                	jne    c000809a <f_mkfs+0xf79>
c00080e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080f1:	40                   	inc    eax
c00080f2:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080f6:	0f 87 65 ff ff ff    	ja     c0008061 <f_mkfs+0xf40>
c00080fc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008101:	74 04                	je     c0008107 <f_mkfs+0xfe6>
c0008103:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008107:	89 fb                	mov    ebx,edi
c0008109:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000810d:	76 04                	jbe    c0008113 <f_mkfs+0xff2>
c000810f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008113:	83 ec 0c             	sub    esp,0xc
c0008116:	53                   	push   ebx
c0008117:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811f:	55                   	push   ebp
c0008120:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008124:	e8 b3 98 ff ff       	call   c00019dc <disk_write>
c0008129:	83 c4 20             	add    esp,0x20
c000812c:	85 c0                	test   eax,eax
c000812e:	0f 85 9e 00 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0008134:	31 d2                	xor    edx,edx
c0008136:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000813a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813e:	29 df                	sub    edi,ebx
c0008140:	75 c5                	jne    c0008107 <f_mkfs+0xfe6>
c0008142:	b1 0c                	mov    cl,0xc
c0008144:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008149:	74 1d                	je     c0008168 <f_mkfs+0x1047>
c000814b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008150:	b1 06                	mov    cl,0x6
c0008152:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008156:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000815a:	72 0c                	jb     c0008168 <f_mkfs+0x1047>
c000815c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008161:	0f 94 c1             	sete   cl
c0008164:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008168:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000816d:	75 4c                	jne    c00081bb <f_mkfs+0x109a>
c000816f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008173:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008177:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000817e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008185:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008190:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000819b:	0f b6 c9             	movzx  ecx,cl
c000819e:	83 ec 0c             	sub    esp,0xc
c00081a1:	55                   	push   ebp
c00081a2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	e8 2f c2 ff ff       	call   c00043e1 <create_partition>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	89 c3                	mov    ebx,eax
c00081b7:	85 c0                	test   eax,eax
c00081b9:	75 34                	jne    c00081ef <f_mkfs+0x10ce>
c00081bb:	31 db                	xor    ebx,ebx
c00081bd:	50                   	push   eax
c00081be:	6a 00                	push   0x0
c00081c0:	6a 00                	push   0x0
c00081c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c6:	e8 27 98 ff ff       	call   c00019f2 <disk_ioctl>
c00081cb:	83 c4 10             	add    esp,0x10
c00081ce:	85 c0                	test   eax,eax
c00081d0:	74 1d                	je     c00081ef <f_mkfs+0x10ce>
c00081d2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081da:	75 0c                	jne    c00081e8 <f_mkfs+0x10c7>
c00081dc:	83 ec 0c             	sub    esp,0xc
c00081df:	55                   	push   ebp
c00081e0:	e8 75 00 00 00       	call   c000825a <ff_memfree>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	bb 01 00 00 00       	mov    ebx,0x1
c00081ed:	eb 48                	jmp    c0008237 <f_mkfs+0x1116>
c00081ef:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081f7:	75 3e                	jne    c0008237 <f_mkfs+0x1116>
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	e8 58 00 00 00       	call   c000825a <ff_memfree>
c0008202:	83 c4 10             	add    esp,0x10
c0008205:	eb 30                	jmp    c0008237 <f_mkfs+0x1116>
c0008207:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000820c:	0f 85 eb fa ff ff    	jne    c0007cfd <f_mkfs+0xbdc>
c0008212:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008216:	81 ff 80 00 00 00    	cmp    edi,0x80
c000821c:	0f 86 b8 f9 ff ff    	jbe    c0007bda <f_mkfs+0xab9>
c0008222:	e9 bf fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008227:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000822c:	0f 85 c0 fa ff ff    	jne    c0007cf2 <f_mkfs+0xbd1>
c0008232:	e9 af fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008237:	81 c4 9c 00 00 00    	add    esp,0x9c
c000823d:	89 d8                	mov    eax,ebx
c000823f:	5b                   	pop    ebx
c0008240:	5e                   	pop    esi
c0008241:	5f                   	pop    edi
c0008242:	5d                   	pop    ebp
c0008243:	c3                   	ret    

c0008244 <ff_memalloc>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 81 72 00 00       	call   c000f4d4 <malloc>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 c4 0c             	add    esp,0xc
c0008259:	c3                   	ret    

c000825a <ff_memfree>:
c000825a:	83 ec 0c             	sub    esp,0xc
c000825d:	83 ec 0c             	sub    esp,0xc
c0008260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008264:	e8 7b 72 00 00       	call   c000f4e4 <free>
c0008269:	83 c4 10             	add    esp,0x10
c000826c:	90                   	nop
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    

c0008271 <ff_uni2oem>:
c0008271:	83 ec 14             	sub    esp,0x14
c0008274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008278:	66 89 04 24          	mov    WORD PTR [esp],ax
c000827c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008283:	c7 44 24 0c 60 81 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028160
c000828b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008290:	77 0b                	ja     c000829d <ff_uni2oem+0x2c>
c0008292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008296:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000829b:	eb 5b                	jmp    c00082f8 <ff_uni2oem+0x87>
c000829d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082a5:	77 51                	ja     c00082f8 <ff_uni2oem+0x87>
c00082a7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ad:	75 49                	jne    c00082f8 <ff_uni2oem+0x87>
c00082af:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b6:	eb 0b                	jmp    c00082c3 <ff_uni2oem+0x52>
c00082b8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082bd:	40                   	inc    eax
c00082be:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082c9:	77 1b                	ja     c00082e6 <ff_uni2oem+0x75>
c00082cb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082d0:	01 c0                	add    eax,eax
c00082d2:	89 c2                	mov    edx,eax
c00082d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082d8:	01 d0                	add    eax,edx
c00082da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dd:	0f b7 c0             	movzx  eax,ax
c00082e0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082e4:	75 d2                	jne    c00082b8 <ff_uni2oem+0x47>
c00082e6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082eb:	83 e8 80             	sub    eax,0xffffff80
c00082ee:	25 ff 00 00 00       	and    eax,0xff
c00082f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082fd:	83 c4 14             	add    esp,0x14
c0008300:	c3                   	ret    

c0008301 <ff_oem2uni>:
c0008301:	83 ec 18             	sub    esp,0x18
c0008304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008311:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008315:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000831c:	c7 44 24 10 60 81 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028160
c0008324:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000832a:	77 0b                	ja     c0008337 <ff_oem2uni+0x36>
c000832c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008330:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008335:	eb 2d                	jmp    c0008364 <ff_oem2uni+0x63>
c0008337:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000833d:	75 25                	jne    c0008364 <ff_oem2uni+0x63>
c000833f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008346:	77 1c                	ja     c0008364 <ff_oem2uni+0x63>
c0008348:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000834d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008352:	01 c0                	add    eax,eax
c0008354:	89 c2                	mov    edx,eax
c0008356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000835a:	01 d0                	add    eax,edx
c000835c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008364:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008369:	83 c4 18             	add    esp,0x18
c000836c:	c3                   	ret    

c000836d <ff_wtoupper>:
c000836d:	83 ec 10             	sub    esp,0x10
c0008370:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008378:	0f 87 3e 01 00 00    	ja     c00084bc <ff_wtoupper+0x14f>
c000837e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008382:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008387:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000838e:	77 07                	ja     c0008397 <ff_wtoupper+0x2a>
c0008390:	b8 60 7f 02 c0       	mov    eax,0xc0027f60
c0008395:	eb 05                	jmp    c000839c <ff_wtoupper+0x2f>
c0008397:	b8 a0 7e 02 c0       	mov    eax,0xc0027ea0
c000839c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	8d 50 02             	lea    edx,[eax+0x2]
c00083a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ae:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083b3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b9:	0f 84 f4 00 00 00    	je     c00084b3 <ff_wtoupper+0x146>
c00083bf:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083c4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c9:	0f 82 e4 00 00 00    	jb     c00084b3 <ff_wtoupper+0x146>
c00083cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d3:	8d 50 02             	lea    edx,[eax+0x2]
c00083d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083dd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083e2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083e7:	66 c1 e8 08          	shr    ax,0x8
c00083eb:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083f0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083f7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083fc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008401:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008406:	01 ca                	add    edx,ecx
c0008408:	39 d0                	cmp    eax,edx
c000840a:	0f 8d 86 00 00 00    	jge    c0008496 <ff_wtoupper+0x129>
c0008410:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008415:	83 f8 08             	cmp    eax,0x8
c0008418:	0f 87 94 00 00 00    	ja     c00084b2 <ff_wtoupper+0x145>
c000841e:	8b 04 85 60 7e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd81a0]
c0008425:	ff e0                	jmp    eax
c0008427:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000842c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008431:	29 c2                	sub    edx,eax
c0008433:	89 d0                	mov    eax,edx
c0008435:	01 c0                	add    eax,eax
c0008437:	89 c2                	mov    edx,eax
c0008439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000843d:	01 d0                	add    eax,edx
c000843f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008442:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008447:	eb 4b                	jmp    c0008494 <ff_wtoupper+0x127>
c0008449:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000844e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008452:	83 e0 01             	and    eax,0x1
c0008455:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000845a:	eb 38                	jmp    c0008494 <ff_wtoupper+0x127>
c000845c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008462:	eb 30                	jmp    c0008494 <ff_wtoupper+0x127>
c0008464:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000846a:	eb 28                	jmp    c0008494 <ff_wtoupper+0x127>
c000846c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008472:	eb 20                	jmp    c0008494 <ff_wtoupper+0x127>
c0008474:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000847a:	eb 18                	jmp    c0008494 <ff_wtoupper+0x127>
c000847c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008482:	eb 10                	jmp    c0008494 <ff_wtoupper+0x127>
c0008484:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000848a:	eb 08                	jmp    c0008494 <ff_wtoupper+0x127>
c000848c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008493:	90                   	nop
c0008494:	eb 1c                	jmp    c00084b2 <ff_wtoupper+0x145>
c0008496:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000849c:	0f 85 fe fe ff ff    	jne    c00083a0 <ff_wtoupper+0x33>
c00084a2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084a7:	01 c0                	add    eax,eax
c00084a9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084ad:	e9 ee fe ff ff       	jmp    c00083a0 <ff_wtoupper+0x33>
c00084b2:	90                   	nop
c00084b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	c3                   	ret    

c00084c4 <psrc_set_converter>:
c00084c4:	56                   	push   esi
c00084c5:	89 d6                	mov    esi,edx
c00084c7:	53                   	push   ebx
c00084c8:	89 c3                	mov    ebx,eax
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	52                   	push   edx
c00084ce:	50                   	push   eax
c00084cf:	e8 6f 55 00 00       	call   c000da43 <sinc_set_converter>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	85 c0                	test   eax,eax
c00084d9:	74 25                	je     c0008500 <psrc_set_converter+0x3c>
c00084db:	50                   	push   eax
c00084dc:	50                   	push   eax
c00084dd:	56                   	push   esi
c00084de:	53                   	push   ebx
c00084df:	e8 17 5d 00 00       	call   c000e1fb <zoh_set_converter>
c00084e4:	83 c4 10             	add    esp,0x10
c00084e7:	85 c0                	test   eax,eax
c00084e9:	74 15                	je     c0008500 <psrc_set_converter+0x3c>
c00084eb:	51                   	push   ecx
c00084ec:	51                   	push   ecx
c00084ed:	56                   	push   esi
c00084ee:	53                   	push   ebx
c00084ef:	e8 0f 11 00 00       	call   c0009603 <linear_set_converter>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	ba 0a 00 00 00       	mov    edx,0xa
c00084fc:	85 c0                	test   eax,eax
c00084fe:	75 02                	jne    c0008502 <psrc_set_converter+0x3e>
c0008500:	31 d2                	xor    edx,edx
c0008502:	89 d0                	mov    eax,edx
c0008504:	5a                   	pop    edx
c0008505:	5b                   	pop    ebx
c0008506:	5e                   	pop    esi
c0008507:	c3                   	ret    

c0008508 <src_delete>:
c0008508:	53                   	push   ebx
c0008509:	83 ec 08             	sub    esp,0x8
c000850c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008510:	85 db                	test   ebx,ebx
c0008512:	74 29                	je     c000853d <src_delete+0x35>
c0008514:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008517:	85 c0                	test   eax,eax
c0008519:	74 0c                	je     c0008527 <src_delete+0x1f>
c000851b:	83 ec 0c             	sub    esp,0xc
c000851e:	50                   	push   eax
c000851f:	e8 c0 6f 00 00       	call   c000f4e4 <free>
c0008524:	83 c4 10             	add    esp,0x10
c0008527:	50                   	push   eax
c0008528:	6a 3c                	push   0x3c
c000852a:	6a 00                	push   0x0
c000852c:	53                   	push   ebx
c000852d:	e8 59 81 ff ff       	call   c000068b <memset>
c0008532:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008535:	e8 aa 6f 00 00       	call   c000f4e4 <free>
c000853a:	83 c4 10             	add    esp,0x10
c000853d:	31 c0                	xor    eax,eax
c000853f:	83 c4 08             	add    esp,0x8
c0008542:	5b                   	pop    ebx
c0008543:	c3                   	ret    

c0008544 <src_process>:
c0008544:	55                   	push   ebp
c0008545:	57                   	push   edi
c0008546:	56                   	push   esi
c0008547:	53                   	push   ebx
c0008548:	83 ec 1c             	sub    esp,0x1c
c000854b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000854f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008553:	85 ed                	test   ebp,ebp
c0008555:	0f 84 6f 01 00 00    	je     c00086ca <src_process+0x186>
c000855b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000855f:	0f 84 6c 01 00 00    	je     c00086d1 <src_process+0x18d>
c0008565:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008569:	0f 84 62 01 00 00    	je     c00086d1 <src_process+0x18d>
c000856f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008576:	0f 85 5c 01 00 00    	jne    c00086d8 <src_process+0x194>
c000857c:	85 db                	test   ebx,ebx
c000857e:	0f 84 5b 01 00 00    	je     c00086df <src_process+0x19b>
c0008584:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008586:	85 f6                	test   esi,esi
c0008588:	0f 84 58 01 00 00    	je     c00086e6 <src_process+0x1a2>
c000858e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008591:	85 ff                	test   edi,edi
c0008593:	0f 84 4d 01 00 00    	je     c00086e6 <src_process+0x1a2>
c0008599:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000859c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000859f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085a7:	68 00 00 70 3f       	push   0x3f700000
c00085ac:	6a 00                	push   0x0
c00085ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b6:	e8 c4 e8 01 00       	call   c0026e7f <__ltdf2>
c00085bb:	83 c4 10             	add    esp,0x10
c00085be:	85 c0                	test   eax,eax
c00085c0:	0f 88 27 01 00 00    	js     c00086ed <src_process+0x1a9>
c00085c6:	68 00 00 70 40       	push   0x40700000
c00085cb:	6a 00                	push   0x0
c00085cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d5:	e8 87 e8 01 00       	call   c0026e61 <__gtdf2>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	85 c0                	test   eax,eax
c00085df:	0f 8f 08 01 00 00    	jg     c00086ed <src_process+0x1a9>
c00085e5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085e9:	79 07                	jns    c00085f2 <src_process+0xae>
c00085eb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085f5:	85 c0                	test   eax,eax
c00085f7:	79 50                	jns    c0008649 <src_process+0x105>
c00085f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008600:	39 fe                	cmp    esi,edi
c0008602:	72 37                	jb     c000863b <src_process+0xf7>
c0008604:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000860b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008612:	68 00 00 70 3f       	push   0x3f700000
c0008617:	6a 00                	push   0x0
c0008619:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000861c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000861f:	e8 5b e8 01 00       	call   c0026e7f <__ltdf2>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	85 c0                	test   eax,eax
c0008629:	79 37                	jns    c0008662 <src_process+0x11e>
c000862b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000862f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008633:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008636:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008639:	eb 27                	jmp    c0008662 <src_process+0x11e>
c000863b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000863e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008642:	8d 04 86             	lea    eax,[esi+eax*4]
c0008645:	39 c7                	cmp    edi,eax
c0008647:	eb 0d                	jmp    c0008656 <src_process+0x112>
c0008649:	39 fe                	cmp    esi,edi
c000864b:	72 ee                	jb     c000863b <src_process+0xf7>
c000864d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008651:	8d 04 87             	lea    eax,[edi+eax*4]
c0008654:	39 c6                	cmp    esi,eax
c0008656:	73 ac                	jae    c0008604 <src_process+0xc0>
c0008658:	b8 10 00 00 00       	mov    eax,0x10
c000865d:	e9 90 00 00 00       	jmp    c00086f2 <src_process+0x1ae>
c0008662:	83 ec 10             	sub    esp,0x10
c0008665:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008668:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000866b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000866e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008671:	e8 0e df 01 00       	call   c0026584 <__subdf3>
c0008676:	83 c4 18             	add    esp,0x18
c0008679:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000867d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008681:	52                   	push   edx
c0008682:	50                   	push   eax
c0008683:	e8 88 e9 01 00       	call   c0027010 <fabs>
c0008688:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000868c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	68 af 03 d2 3c       	push   0x3cd203af
c0008698:	68 16 56 e7 9e       	push   0x9ee75616
c000869d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a5:	e8 d5 e7 01 00       	call   c0026e7f <__ltdf2>
c00086aa:	83 c4 10             	add    esp,0x10
c00086ad:	85 c0                	test   eax,eax
c00086af:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086b3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086b7:	79 05                	jns    c00086be <src_process+0x17a>
c00086b9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086bc:	eb 03                	jmp    c00086c1 <src_process+0x17d>
c00086be:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086c1:	83 c4 1c             	add    esp,0x1c
c00086c4:	5b                   	pop    ebx
c00086c5:	5e                   	pop    esi
c00086c6:	5f                   	pop    edi
c00086c7:	5d                   	pop    ebp
c00086c8:	ff e0                	jmp    eax
c00086ca:	b8 02 00 00 00       	mov    eax,0x2
c00086cf:	eb 21                	jmp    c00086f2 <src_process+0x1ae>
c00086d1:	b8 07 00 00 00       	mov    eax,0x7
c00086d6:	eb 1a                	jmp    c00086f2 <src_process+0x1ae>
c00086d8:	b8 12 00 00 00       	mov    eax,0x12
c00086dd:	eb 13                	jmp    c00086f2 <src_process+0x1ae>
c00086df:	b8 03 00 00 00       	mov    eax,0x3
c00086e4:	eb 0c                	jmp    c00086f2 <src_process+0x1ae>
c00086e6:	b8 04 00 00 00       	mov    eax,0x4
c00086eb:	eb 05                	jmp    c00086f2 <src_process+0x1ae>
c00086ed:	b8 06 00 00 00       	mov    eax,0x6
c00086f2:	83 c4 1c             	add    esp,0x1c
c00086f5:	5b                   	pop    ebx
c00086f6:	5e                   	pop    esi
c00086f7:	5f                   	pop    edi
c00086f8:	5d                   	pop    ebp
c00086f9:	c3                   	ret    

c00086fa <src_callback_read>:
c00086fa:	55                   	push   ebp
c00086fb:	57                   	push   edi
c00086fc:	56                   	push   esi
c00086fd:	53                   	push   ebx
c00086fe:	83 ec 3c             	sub    esp,0x3c
c0008701:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008705:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008709:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000870d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008711:	85 ed                	test   ebp,ebp
c0008713:	0f 8e 52 01 00 00    	jle    c000886b <src_callback_read+0x171>
c0008719:	85 db                	test   ebx,ebx
c000871b:	0f 84 4a 01 00 00    	je     c000886b <src_callback_read+0x171>
c0008721:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008728:	74 0c                	je     c0008736 <src_callback_read+0x3c>
c000872a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008731:	e9 35 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008736:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000873a:	75 0c                	jne    c0008748 <src_callback_read+0x4e>
c000873c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008743:	e9 23 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008748:	51                   	push   ecx
c0008749:	6a 24                	push   0x24
c000874b:	6a 00                	push   0x0
c000874d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008751:	50                   	push   eax
c0008752:	e8 34 7f ff ff       	call   c000068b <memset>
c0008757:	83 c4 10             	add    esp,0x10
c000875a:	68 00 00 70 3f       	push   0x3f700000
c000875f:	6a 00                	push   0x0
c0008761:	57                   	push   edi
c0008762:	56                   	push   esi
c0008763:	e8 17 e7 01 00       	call   c0026e7f <__ltdf2>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	85 c0                	test   eax,eax
c000876d:	78 3e                	js     c00087ad <src_callback_read+0xb3>
c000876f:	68 00 00 70 40       	push   0x40700000
c0008774:	6a 00                	push   0x0
c0008776:	57                   	push   edi
c0008777:	56                   	push   esi
c0008778:	e8 e4 e6 01 00       	call   c0026e61 <__gtdf2>
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	7f 29                	jg     c00087ad <src_callback_read+0xb3>
c0008784:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008788:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008790:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008794:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008797:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000879f:	31 f6                	xor    esi,esi
c00087a1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087a8:	e9 97 00 00 00       	jmp    c0008844 <src_callback_read+0x14a>
c00087ad:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087b4:	e9 b2 00 00 00       	jmp    c000886b <src_callback_read+0x171>
c00087b9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087c1:	52                   	push   edx
c00087c2:	52                   	push   edx
c00087c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087c7:	50                   	push   eax
c00087c8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087cb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	85 c0                	test   eax,eax
c00087df:	75 08                	jne    c00087e9 <src_callback_read+0xef>
c00087e1:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087f0:	50                   	push   eax
c00087f1:	50                   	push   eax
c00087f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087f6:	50                   	push   eax
c00087f7:	53                   	push   ebx
c00087f8:	e8 47 fd ff ff       	call   c0008544 <src_process>
c00087fd:	83 c4 10             	add    esp,0x10
c0008800:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008807:	85 c0                	test   eax,eax
c0008809:	75 49                	jne    c0008854 <src_callback_read+0x15a>
c000880b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000880f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008812:	89 f9                	mov    ecx,edi
c0008814:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008818:	0f af ca             	imul   ecx,edx
c000881b:	c1 e1 02             	shl    ecx,0x2
c000881e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008822:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008826:	0f af d1             	imul   edx,ecx
c0008829:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000882d:	c1 e2 02             	shl    edx,0x2
c0008830:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008834:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008837:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000883c:	74 12                	je     c0008850 <src_callback_read+0x156>
c000883e:	39 d5                	cmp    ebp,edx
c0008840:	7e 14                	jle    c0008856 <src_callback_read+0x15c>
c0008842:	89 d6                	mov    esi,edx
c0008844:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008849:	75 9e                	jne    c00087e9 <src_callback_read+0xef>
c000884b:	e9 69 ff ff ff       	jmp    c00087b9 <src_callback_read+0xbf>
c0008850:	85 c9                	test   ecx,ecx
c0008852:	75 ea                	jne    c000883e <src_callback_read+0x144>
c0008854:	89 f2                	mov    edx,esi
c0008856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000885a:	85 c0                	test   eax,eax
c000885c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000885f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008863:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008866:	74 05                	je     c000886d <src_callback_read+0x173>
c0008868:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000886b:	31 d2                	xor    edx,edx
c000886d:	83 c4 3c             	add    esp,0x3c
c0008870:	89 d0                	mov    eax,edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	5f                   	pop    edi
c0008875:	5d                   	pop    ebp
c0008876:	c3                   	ret    

c0008877 <src_set_ratio>:
c0008877:	57                   	push   edi
c0008878:	ba 02 00 00 00       	mov    edx,0x2
c000887d:	56                   	push   esi
c000887e:	53                   	push   ebx
c000887f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008883:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008887:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000888b:	85 db                	test   ebx,ebx
c000888d:	74 4c                	je     c00088db <src_set_ratio+0x64>
c000888f:	ba 07 00 00 00       	mov    edx,0x7
c0008894:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008898:	74 41                	je     c00088db <src_set_ratio+0x64>
c000889a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000889e:	74 3b                	je     c00088db <src_set_ratio+0x64>
c00088a0:	68 00 00 70 3f       	push   0x3f700000
c00088a5:	6a 00                	push   0x0
c00088a7:	57                   	push   edi
c00088a8:	56                   	push   esi
c00088a9:	e8 d1 e5 01 00       	call   c0026e7f <__ltdf2>
c00088ae:	83 c4 10             	add    esp,0x10
c00088b1:	ba 06 00 00 00       	mov    edx,0x6
c00088b6:	85 c0                	test   eax,eax
c00088b8:	78 21                	js     c00088db <src_set_ratio+0x64>
c00088ba:	68 00 00 70 40       	push   0x40700000
c00088bf:	6a 00                	push   0x0
c00088c1:	57                   	push   edi
c00088c2:	56                   	push   esi
c00088c3:	e8 99 e5 01 00       	call   c0026e61 <__gtdf2>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	ba 06 00 00 00       	mov    edx,0x6
c00088d0:	85 c0                	test   eax,eax
c00088d2:	7f 07                	jg     c00088db <src_set_ratio+0x64>
c00088d4:	89 33                	mov    DWORD PTR [ebx],esi
c00088d6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088d9:	31 d2                	xor    edx,edx
c00088db:	5b                   	pop    ebx
c00088dc:	89 d0                	mov    eax,edx
c00088de:	5e                   	pop    esi
c00088df:	5f                   	pop    edi
c00088e0:	c3                   	ret    

c00088e1 <src_get_channels>:
c00088e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088e5:	b8 02 00 00 00       	mov    eax,0x2
c00088ea:	85 d2                	test   edx,edx
c00088ec:	74 14                	je     c0008902 <src_get_channels+0x21>
c00088ee:	b8 07 00 00 00       	mov    eax,0x7
c00088f3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088f7:	74 09                	je     c0008902 <src_get_channels+0x21>
c00088f9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088fd:	74 03                	je     c0008902 <src_get_channels+0x21>
c00088ff:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008902:	c3                   	ret    

c0008903 <src_reset>:
c0008903:	53                   	push   ebx
c0008904:	b8 02 00 00 00       	mov    eax,0x2
c0008909:	83 ec 08             	sub    esp,0x8
c000890c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008910:	85 db                	test   ebx,ebx
c0008912:	74 36                	je     c000894a <src_reset+0x47>
c0008914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008917:	85 c0                	test   eax,eax
c0008919:	74 09                	je     c0008924 <src_reset+0x21>
c000891b:	83 ec 0c             	sub    esp,0xc
c000891e:	53                   	push   ebx
c000891f:	ff d0                	call   eax
c0008921:	83 c4 10             	add    esp,0x10
c0008924:	31 c0                	xor    eax,eax
c0008926:	31 d2                	xor    edx,edx
c0008928:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000892b:	89 03                	mov    DWORD PTR [ebx],eax
c000892d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008930:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008933:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000893a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008941:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008948:	31 c0                	xor    eax,eax
c000894a:	83 c4 08             	add    esp,0x8
c000894d:	5b                   	pop    ebx
c000894e:	c3                   	ret    

c000894f <src_new>:
c000894f:	57                   	push   edi
c0008950:	56                   	push   esi
c0008951:	53                   	push   ebx
c0008952:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008956:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000895a:	85 f6                	test   esi,esi
c000895c:	74 73                	je     c00089d1 <src_new+0x82>
c000895e:	85 ff                	test   edi,edi
c0008960:	7f 08                	jg     c000896a <src_new+0x1b>
c0008962:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008968:	eb 1e                	jmp    c0008988 <src_new+0x39>
c000896a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008970:	50                   	push   eax
c0008971:	50                   	push   eax
c0008972:	6a 3c                	push   0x3c
c0008974:	6a 01                	push   0x1
c0008976:	e8 89 6b 00 00       	call   c000f504 <calloc>
c000897b:	83 c4 10             	add    esp,0x10
c000897e:	89 c3                	mov    ebx,eax
c0008980:	85 c0                	test   eax,eax
c0008982:	75 10                	jne    c0008994 <src_new+0x45>
c0008984:	85 f6                	test   esi,esi
c0008986:	75 04                	jne    c000898c <src_new+0x3d>
c0008988:	31 db                	xor    ebx,ebx
c000898a:	eb 4b                	jmp    c00089d7 <src_new+0x88>
c000898c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008992:	eb 43                	jmp    c00089d7 <src_new+0x88>
c0008994:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008997:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000899e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089a2:	e8 1d fb ff ff       	call   c00084c4 <psrc_set_converter>
c00089a7:	85 c0                	test   eax,eax
c00089a9:	74 18                	je     c00089c3 <src_new+0x74>
c00089ab:	85 f6                	test   esi,esi
c00089ad:	74 06                	je     c00089b5 <src_new+0x66>
c00089af:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	31 db                	xor    ebx,ebx
c00089bb:	e8 24 6b 00 00       	call   c000f4e4 <free>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	53                   	push   ebx
c00089c7:	e8 37 ff ff ff       	call   c0008903 <src_reset>
c00089cc:	83 c4 10             	add    esp,0x10
c00089cf:	eb 06                	jmp    c00089d7 <src_new+0x88>
c00089d1:	85 ff                	test   edi,edi
c00089d3:	7f 9b                	jg     c0008970 <src_new+0x21>
c00089d5:	eb b1                	jmp    c0008988 <src_new+0x39>
c00089d7:	89 d8                	mov    eax,ebx
c00089d9:	5b                   	pop    ebx
c00089da:	5e                   	pop    esi
c00089db:	5f                   	pop    edi
c00089dc:	c3                   	ret    

c00089dd <src_callback_new>:
c00089dd:	56                   	push   esi
c00089de:	53                   	push   ebx
c00089df:	53                   	push   ebx
c00089e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e8:	85 f6                	test   esi,esi
c00089ea:	75 0e                	jne    c00089fa <src_callback_new+0x1d>
c00089ec:	31 db                	xor    ebx,ebx
c00089ee:	85 c0                	test   eax,eax
c00089f0:	74 47                	je     c0008a39 <src_callback_new+0x5c>
c00089f2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089f8:	eb 3f                	jmp    c0008a39 <src_callback_new+0x5c>
c00089fa:	85 c0                	test   eax,eax
c00089fc:	74 06                	je     c0008a04 <src_callback_new+0x27>
c00089fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a04:	51                   	push   ecx
c0008a05:	50                   	push   eax
c0008a06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0e:	e8 3c ff ff ff       	call   c000894f <src_new>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	89 c3                	mov    ebx,eax
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	74 1d                	je     c0008a39 <src_callback_new+0x5c>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	50                   	push   eax
c0008a20:	e8 de fe ff ff       	call   c0008903 <src_reset>
c0008a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a29:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a30:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a33:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 d8                	mov    eax,ebx
c0008a3b:	5a                   	pop    edx
c0008a3c:	5b                   	pop    ebx
c0008a3d:	5e                   	pop    esi
c0008a3e:	c3                   	ret    

c0008a3f <src_get_name>:
c0008a3f:	53                   	push   ebx
c0008a40:	83 ec 14             	sub    esp,0x14
c0008a43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a47:	53                   	push   ebx
c0008a48:	e8 d0 4f 00 00       	call   c000da1d <sinc_get_name>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	85 c0                	test   eax,eax
c0008a52:	75 1d                	jne    c0008a71 <src_get_name+0x32>
c0008a54:	83 ec 0c             	sub    esp,0xc
c0008a57:	53                   	push   ebx
c0008a58:	e8 80 57 00 00       	call   c000e1dd <zoh_get_name>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	85 c0                	test   eax,eax
c0008a62:	75 0d                	jne    c0008a71 <src_get_name+0x32>
c0008a64:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a68:	83 c4 08             	add    esp,0x8
c0008a6b:	5b                   	pop    ebx
c0008a6c:	e9 74 0b 00 00       	jmp    c00095e5 <linear_get_name>
c0008a71:	83 c4 08             	add    esp,0x8
c0008a74:	5b                   	pop    ebx
c0008a75:	c3                   	ret    

c0008a76 <src_get_description>:
c0008a76:	53                   	push   ebx
c0008a77:	83 ec 14             	sub    esp,0x14
c0008a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 ac 4f 00 00       	call   c000da30 <sinc_get_description>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 1d                	jne    c0008aa8 <src_get_description+0x32>
c0008a8b:	83 ec 0c             	sub    esp,0xc
c0008a8e:	53                   	push   ebx
c0008a8f:	e8 58 57 00 00       	call   c000e1ec <zoh_get_description>
c0008a94:	83 c4 10             	add    esp,0x10
c0008a97:	85 c0                	test   eax,eax
c0008a99:	75 0d                	jne    c0008aa8 <src_get_description+0x32>
c0008a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a9f:	83 c4 08             	add    esp,0x8
c0008aa2:	5b                   	pop    ebx
c0008aa3:	e9 4c 0b 00 00       	jmp    c00095f4 <linear_get_description>
c0008aa8:	83 c4 08             	add    esp,0x8
c0008aab:	5b                   	pop    ebx
c0008aac:	c3                   	ret    

c0008aad <src_get_version>:
c0008aad:	b8 60 82 02 c0       	mov    eax,0xc0028260
c0008ab2:	c3                   	ret    

c0008ab3 <src_is_valid_ratio>:
c0008ab3:	83 ec 1c             	sub    esp,0x1c
c0008ab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008abe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ac6:	68 00 00 70 3f       	push   0x3f700000
c0008acb:	6a 00                	push   0x0
c0008acd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad5:	e8 a5 e3 01 00       	call   c0026e7f <__ltdf2>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	31 d2                	xor    edx,edx
c0008adf:	85 c0                	test   eax,eax
c0008ae1:	78 1e                	js     c0008b01 <src_is_valid_ratio+0x4e>
c0008ae3:	68 00 00 70 40       	push   0x40700000
c0008ae8:	6a 00                	push   0x0
c0008aea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af2:	e8 6a e3 01 00       	call   c0026e61 <__gtdf2>
c0008af7:	31 d2                	xor    edx,edx
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	85 c0                	test   eax,eax
c0008afe:	0f 9e c2             	setle  dl
c0008b01:	89 d0                	mov    eax,edx
c0008b03:	83 c4 1c             	add    esp,0x1c
c0008b06:	c3                   	ret    

c0008b07 <src_error>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	85 d2                	test   edx,edx
c0008b0f:	74 03                	je     c0008b14 <src_error+0xd>
c0008b11:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b14:	c3                   	ret    

c0008b15 <src_strerror>:
c0008b15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b19:	31 c0                	xor    eax,eax
c0008b1b:	83 fa 17             	cmp    edx,0x17
c0008b1e:	77 07                	ja     c0008b27 <src_strerror+0x12>
c0008b20:	8b 04 95 c0 86 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7940]
c0008b27:	c3                   	ret    

c0008b28 <src_simple>:
c0008b28:	56                   	push   esi
c0008b29:	53                   	push   ebx
c0008b2a:	83 ec 18             	sub    esp,0x18
c0008b2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b31:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b35:	50                   	push   eax
c0008b36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3e:	e8 0c fe ff ff       	call   c000894f <src_new>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	85 c0                	test   eax,eax
c0008b48:	75 06                	jne    c0008b50 <src_simple+0x28>
c0008b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4e:	eb 25                	jmp    c0008b75 <src_simple+0x4d>
c0008b50:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b57:	89 c3                	mov    ebx,eax
c0008b59:	50                   	push   eax
c0008b5a:	50                   	push   eax
c0008b5b:	56                   	push   esi
c0008b5c:	53                   	push   ebx
c0008b5d:	e8 e2 f9 ff ff       	call   c0008544 <src_process>
c0008b62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b69:	e8 9a f9 ff ff       	call   c0008508 <src_delete>
c0008b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b72:	83 c4 10             	add    esp,0x10
c0008b75:	83 c4 14             	add    esp,0x14
c0008b78:	5b                   	pop    ebx
c0008b79:	5e                   	pop    esi
c0008b7a:	c3                   	ret    

c0008b7b <src_short_to_float_array>:
c0008b7b:	53                   	push   ebx
c0008b7c:	83 ec 18             	sub    esp,0x18
c0008b7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b83:	85 db                	test   ebx,ebx
c0008b85:	74 54                	je     c0008bdb <src_short_to_float_array+0x60>
c0008b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b8b:	4b                   	dec    ebx
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b93:	50                   	push   eax
c0008b94:	e8 7a e0 01 00       	call   c0026c13 <__floatsidf>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba4:	68 00 00 00 3f       	push   0x3f000000
c0008ba9:	6a 00                	push   0x0
c0008bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	e8 f8 d9 01 00       	call   c00265b0 <__muldf3>
c0008bb8:	59                   	pop    ecx
c0008bb9:	59                   	pop    ecx
c0008bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bca:	e8 b4 e2 01 00       	call   c0026e83 <__truncdfsf2>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bd6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bd9:	eb a8                	jmp    c0008b83 <src_short_to_float_array+0x8>
c0008bdb:	83 c4 18             	add    esp,0x18
c0008bde:	5b                   	pop    ebx
c0008bdf:	c3                   	ret    

c0008be0 <src_float_to_short_array>:
c0008be0:	56                   	push   esi
c0008be1:	53                   	push   ebx
c0008be2:	83 ec 14             	sub    esp,0x14
c0008be5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008be9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bed:	85 db                	test   ebx,ebx
c0008bef:	0f 84 a4 00 00 00    	je     c0008c99 <src_float_to_short_array+0xb9>
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	4b                   	dec    ebx
c0008bf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bfd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c00:	e8 a2 e3 01 00       	call   c0026fa7 <__extendsfdf2>
c0008c05:	83 c4 10             	add    esp,0x10
c0008c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c10:	68 00 00 e0 41       	push   0x41e00000
c0008c15:	6a 00                	push   0x0
c0008c17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1f:	e8 8c d9 01 00       	call   c00265b0 <__muldf3>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c2f:	68 ff ff df 41       	push   0x41dfffff
c0008c34:	68 00 00 c0 ff       	push   0xffc00000
c0008c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c41:	e8 37 e2 01 00       	call   c0026e7d <__gedf2>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	78 08                	js     c0008c55 <src_float_to_short_array+0x75>
c0008c4d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c53:	eb 98                	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c55:	68 00 00 e0 c1       	push   0xc1e00000
c0008c5a:	6a 00                	push   0x0
c0008c5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c64:	e8 18 e2 01 00       	call   c0026e81 <__ledf2>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	85 c0                	test   eax,eax
c0008c6e:	7f 0b                	jg     c0008c7b <src_float_to_short_array+0x9b>
c0008c70:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c76:	e9 72 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c7b:	50                   	push   eax
c0008c7c:	50                   	push   eax
c0008c7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c85:	e8 a6 e3 01 00       	call   c0027030 <lrint>
c0008c8a:	83 c4 10             	add    esp,0x10
c0008c8d:	c1 f8 10             	sar    eax,0x10
c0008c90:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c94:	e9 54 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c99:	83 c4 14             	add    esp,0x14
c0008c9c:	5b                   	pop    ebx
c0008c9d:	5e                   	pop    esi
c0008c9e:	c3                   	ret    

c0008c9f <src_int_to_float_array>:
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 18             	sub    esp,0x18
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	74 52                	je     c0008cfd <src_int_to_float_array+0x5e>
c0008cab:	83 ec 0c             	sub    esp,0xc
c0008cae:	4b                   	dec    ebx
c0008caf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cb6:	e8 58 df 01 00       	call   c0026c13 <__floatsidf>
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cc6:	68 00 00 00 3e       	push   0x3e000000
c0008ccb:	6a 00                	push   0x0
c0008ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	e8 d6 d8 01 00       	call   c00265b0 <__muldf3>
c0008cda:	59                   	pop    ecx
c0008cdb:	59                   	pop    ecx
c0008cdc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cec:	e8 92 e1 01 00       	call   c0026e83 <__truncdfsf2>
c0008cf1:	83 c4 10             	add    esp,0x10
c0008cf4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cfb:	eb aa                	jmp    c0008ca7 <src_int_to_float_array+0x8>
c0008cfd:	83 c4 18             	add    esp,0x18
c0008d00:	5b                   	pop    ebx
c0008d01:	c3                   	ret    

c0008d02 <src_float_to_int_array>:
c0008d02:	56                   	push   esi
c0008d03:	53                   	push   ebx
c0008d04:	83 ec 14             	sub    esp,0x14
c0008d07:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d0f:	85 db                	test   ebx,ebx
c0008d11:	0f 84 a2 00 00 00    	je     c0008db9 <src_float_to_int_array+0xb7>
c0008d17:	83 ec 0c             	sub    esp,0xc
c0008d1a:	4b                   	dec    ebx
c0008d1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d1f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d22:	e8 80 e2 01 00       	call   c0026fa7 <__extendsfdf2>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d32:	68 00 00 e0 41       	push   0x41e00000
c0008d37:	6a 00                	push   0x0
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 6a d8 01 00       	call   c00265b0 <__muldf3>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d51:	68 ff ff df 41       	push   0x41dfffff
c0008d56:	68 00 00 c0 ff       	push   0xffc00000
c0008d5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	e8 15 e1 01 00       	call   c0026e7d <__gedf2>
c0008d68:	83 c4 10             	add    esp,0x10
c0008d6b:	85 c0                	test   eax,eax
c0008d6d:	78 09                	js     c0008d78 <src_float_to_int_array+0x76>
c0008d6f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d76:	eb 97                	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d78:	68 00 00 e0 c1       	push   0xc1e00000
c0008d7d:	6a 00                	push   0x0
c0008d7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d87:	e8 f5 e0 01 00       	call   c0026e81 <__ledf2>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	85 c0                	test   eax,eax
c0008d91:	7f 0c                	jg     c0008d9f <src_float_to_int_array+0x9d>
c0008d93:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d9a:	e9 70 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d9f:	50                   	push   eax
c0008da0:	50                   	push   eax
c0008da1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da9:	e8 82 e2 01 00       	call   c0027030 <lrint>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008db4:	e9 56 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008db9:	83 c4 14             	add    esp,0x14
c0008dbc:	5b                   	pop    ebx
c0008dbd:	5e                   	pop    esi
c0008dbe:	c3                   	ret    

c0008dbf <linear_vari_process>:
c0008dbf:	55                   	push   ebp
c0008dc0:	31 d2                	xor    edx,edx
c0008dc2:	57                   	push   edi
c0008dc3:	56                   	push   esi
c0008dc4:	53                   	push   ebx
c0008dc5:	83 ec 3c             	sub    esp,0x3c
c0008dc8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dcc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dd0:	0f 8e d3 07 00 00    	jle    c00095a9 <linear_vari_process+0x7ea>
c0008dd6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dda:	ba 05 00 00 00       	mov    edx,0x5
c0008ddf:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008de2:	85 db                	test   ebx,ebx
c0008de4:	0f 84 bf 07 00 00    	je     c00095a9 <linear_vari_process+0x7ea>
c0008dea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ded:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008df1:	74 19                	je     c0008e0c <linear_vari_process+0x4d>
c0008df3:	31 d2                	xor    edx,edx
c0008df5:	39 c2                	cmp    edx,eax
c0008df7:	7d 0c                	jge    c0008e05 <linear_vari_process+0x46>
c0008df9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dfb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008dfe:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e02:	42                   	inc    edx
c0008e03:	eb f0                	jmp    c0008df5 <linear_vari_process+0x36>
c0008e05:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e0c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e0f:	0f af d0             	imul   edx,eax
c0008e12:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e15:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e19:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e20:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e23:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e2a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e3b:	68 00 00 70 3f       	push   0x3f700000
c0008e40:	6a 00                	push   0x0
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e4a:	e8 30 e0 01 00       	call   c0026e7f <__ltdf2>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	ba 16 00 00 00       	mov    edx,0x16
c0008e57:	85 c0                	test   eax,eax
c0008e59:	0f 88 4a 07 00 00    	js     c00095a9 <linear_vari_process+0x7ea>
c0008e5f:	68 00 00 70 40       	push   0x40700000
c0008e64:	6a 00                	push   0x0
c0008e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6e:	e8 ee df 01 00       	call   c0026e61 <__gtdf2>
c0008e73:	83 c4 10             	add    esp,0x10
c0008e76:	ba 16 00 00 00       	mov    edx,0x16
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	0f 8f 26 07 00 00    	jg     c00095a9 <linear_vari_process+0x7ea>
c0008e83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e87:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e95:	68 00 00 f0 3f       	push   0x3ff00000
c0008e9a:	6a 00                	push   0x0
c0008e9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea4:	e8 d6 df 01 00       	call   c0026e7f <__ltdf2>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	0f 89 89 02 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008eb4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008eb7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eba:	0f 8d 7d 02 00 00    	jge    c000913d <linear_vari_process+0x37e>
c0008ec0:	83 ec 0c             	sub    esp,0xc
c0008ec3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008ec6:	e8 48 dd 01 00       	call   c0026c13 <__floatsidf>
c0008ecb:	83 c4 10             	add    esp,0x10
c0008ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ed1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ed5:	68 00 00 f0 3f       	push   0x3ff00000
c0008eda:	6a 00                	push   0x0
c0008edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee4:	e8 4a d0 01 00       	call   c0025f33 <__adddf3>
c0008ee9:	83 c4 10             	add    esp,0x10
c0008eec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ef0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ef4:	52                   	push   edx
c0008ef5:	50                   	push   eax
c0008ef6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efe:	e8 ad d6 01 00       	call   c00265b0 <__muldf3>
c0008f03:	5d                   	pop    ebp
c0008f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f0c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f0f:	e8 ff dc 01 00       	call   c0026c13 <__floatsidf>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f1f:	52                   	push   edx
c0008f20:	50                   	push   eax
c0008f21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f29:	e8 05 d0 01 00       	call   c0025f33 <__adddf3>
c0008f2e:	59                   	pop    ecx
c0008f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f33:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f37:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f3a:	e8 d4 dc 01 00       	call   c0026c13 <__floatsidf>
c0008f3f:	83 c4 10             	add    esp,0x10
c0008f42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f4a:	52                   	push   edx
c0008f4b:	50                   	push   eax
c0008f4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f54:	e8 24 df 01 00       	call   c0026e7d <__gedf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	85 c0                	test   eax,eax
c0008f5e:	0f 89 d9 01 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008f64:	85 ff                	test   edi,edi
c0008f66:	0f 8e f4 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008f6c:	83 ec 10             	sub    esp,0x10
c0008f6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f72:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f75:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f7c:	ff 30                	push   DWORD PTR [eax]
c0008f7e:	e8 01 d6 01 00       	call   c0026584 <__subdf3>
c0008f83:	83 c4 18             	add    esp,0x18
c0008f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8e:	52                   	push   edx
c0008f8f:	50                   	push   eax
c0008f90:	e8 7b e0 01 00       	call   c0027010 <fabs>
c0008f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fa5:	68 23 42 92 0c       	push   0xc924223
c0008faa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb2:	e8 aa de 01 00       	call   c0026e61 <__gtdf2>
c0008fb7:	83 c4 10             	add    esp,0x10
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	0f 8e 9e 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008fc2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fc6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fd2:	52                   	push   edx
c0008fd3:	50                   	push   eax
c0008fd4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fd7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fda:	e8 a5 d5 01 00       	call   c0026584 <__subdf3>
c0008fdf:	59                   	pop    ecx
c0008fe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fe4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fe8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008feb:	e8 23 dc 01 00       	call   c0026c13 <__floatsidf>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ffb:	52                   	push   edx
c0008ffc:	50                   	push   eax
c0008ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009005:	e8 a6 d5 01 00       	call   c00265b0 <__muldf3>
c000900a:	5f                   	pop    edi
c000900b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000900f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009013:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009016:	e8 f8 db 01 00       	call   c0026c13 <__floatsidf>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009026:	52                   	push   edx
c0009027:	50                   	push   eax
c0009028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000902c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009030:	e8 5f d8 01 00       	call   c0026894 <__divdf3>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000903c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009050:	e8 de ce 01 00       	call   c0025f33 <__adddf3>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009060:	31 ff                	xor    edi,edi
c0009062:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009065:	0f 8e 9d 00 00 00    	jle    c0009108 <linear_vari_process+0x349>
c000906b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000906e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009072:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009075:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009079:	89 04 24             	mov    DWORD PTR [esp],eax
c000907c:	8b 06                	mov    eax,DWORD PTR [esi]
c000907e:	52                   	push   edx
c000907f:	52                   	push   edx
c0009080:	55                   	push   ebp
c0009081:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009084:	47                   	inc    edi
c0009085:	e8 3e c8 01 00       	call   c00258c8 <__subsf3>
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	e8 15 df 01 00       	call   c0026fa7 <__extendsfdf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000909d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ad:	e8 fe d4 01 00       	call   c00265b0 <__muldf3>
c00090b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090bd:	e8 e5 de 01 00       	call   c0026fa7 <__extendsfdf2>
c00090c2:	83 c4 10             	add    esp,0x10
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090cd:	52                   	push   edx
c00090ce:	50                   	push   eax
c00090cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d7:	e8 57 ce 01 00       	call   c0025f33 <__adddf3>
c00090dc:	59                   	pop    ecx
c00090dd:	5d                   	pop    ebp
c00090de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ee:	e8 90 dd 01 00       	call   c0026e83 <__truncdfsf2>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090fd:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009100:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009103:	e9 5a ff ff ff       	jmp    c0009062 <linear_vari_process+0x2a3>
c0009108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000910c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009110:	68 00 00 f0 3f       	push   0x3ff00000
c0009115:	6a 00                	push   0x0
c0009117:	e8 78 d7 01 00       	call   c0026894 <__divdf3>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009122:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	e8 fe cd 01 00       	call   c0025f33 <__adddf3>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	e9 50 fd ff ff       	jmp    c0008e8d <linear_vari_process+0xce>
c000913d:	50                   	push   eax
c000913e:	50                   	push   eax
c000913f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009147:	e8 e4 de 01 00       	call   c0027030 <lrint>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	50                   	push   eax
c0009150:	e8 be da 01 00       	call   c0026c13 <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000915c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009166:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916a:	e8 15 d4 01 00       	call   c0026584 <__subdf3>
c000916f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009173:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009177:	83 c4 20             	add    esp,0x20
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 f4 dc 01 00       	call   c0026e7f <__ltdf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	79 1e                	jns    c00091b0 <linear_vari_process+0x3f1>
c0009192:	68 00 00 f0 3f       	push   0x3ff00000
c0009197:	6a 00                	push   0x0
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a1:	e8 8d cd 01 00       	call   c0025f33 <__adddf3>
c00091a6:	83 c4 10             	add    esp,0x10
c00091a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00091ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091b3:	83 ec 10             	sub    esp,0x10
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c6:	e8 b9 d3 01 00       	call   c0026584 <__subdf3>
c00091cb:	83 c4 18             	add    esp,0x18
c00091ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091d6:	52                   	push   edx
c00091d7:	50                   	push   eax
c00091d8:	e8 53 de 01 00       	call   c0027030 <lrint>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	0f af f8             	imul   edi,eax
c00091e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091e6:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091e9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091ec:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091ef:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091f2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091f6:	0f 8d 13 03 00 00    	jge    c000950f <linear_vari_process+0x750>
c00091fc:	83 ec 0c             	sub    esp,0xc
c00091ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009202:	e8 0c da 01 00       	call   c0026c13 <__floatsidf>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000920e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009212:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009216:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000921a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009222:	e8 89 d3 01 00       	call   c00265b0 <__muldf3>
c0009227:	89 3c 24             	mov    DWORD PTR [esp],edi
c000922a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009232:	e8 dc d9 01 00       	call   c0026c13 <__floatsidf>
c0009237:	83 c4 10             	add    esp,0x10
c000923a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000923e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009242:	52                   	push   edx
c0009243:	50                   	push   eax
c0009244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924c:	e8 e2 cc 01 00       	call   c0025f33 <__adddf3>
c0009251:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925c:	e8 b2 d9 01 00       	call   c0026c13 <__floatsidf>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926c:	52                   	push   edx
c000926d:	50                   	push   eax
c000926e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009276:	e8 04 dc 01 00       	call   c0026e7f <__ltdf2>
c000927b:	83 c4 10             	add    esp,0x10
c000927e:	85 c0                	test   eax,eax
c0009280:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009284:	0f 89 85 02 00 00    	jns    c000950f <linear_vari_process+0x750>
c000928a:	85 c9                	test   ecx,ecx
c000928c:	0f 8e f5 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c0009292:	83 ec 10             	sub    esp,0x10
c0009295:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009298:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000929b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000929f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092a2:	ff 30                	push   DWORD PTR [eax]
c00092a4:	e8 db d2 01 00       	call   c0026584 <__subdf3>
c00092a9:	83 c4 18             	add    esp,0x18
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	52                   	push   edx
c00092b5:	50                   	push   eax
c00092b6:	e8 55 dd 01 00       	call   c0027010 <fabs>
c00092bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092cb:	68 23 42 92 0c       	push   0xc924223
c00092d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d8:	e8 84 db 01 00       	call   c0026e61 <__gtdf2>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	85 c0                	test   eax,eax
c00092e2:	0f 8e 9f 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c00092e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00092f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092f9:	52                   	push   edx
c00092fa:	50                   	push   eax
c00092fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092fe:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009301:	e8 7e d2 01 00       	call   c0026584 <__subdf3>
c0009306:	5f                   	pop    edi
c0009307:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000930b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000930f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009312:	e8 fc d8 01 00       	call   c0026c13 <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009322:	52                   	push   edx
c0009323:	50                   	push   eax
c0009324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000932c:	e8 7f d2 01 00       	call   c00265b0 <__muldf3>
c0009331:	5d                   	pop    ebp
c0009332:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009336:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000933a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000933d:	e8 d1 d8 01 00       	call   c0026c13 <__floatsidf>
c0009342:	83 c4 10             	add    esp,0x10
c0009345:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009349:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000934d:	52                   	push   edx
c000934e:	50                   	push   eax
c000934f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009357:	e8 38 d5 01 00       	call   c0026894 <__divdf3>
c000935c:	83 c4 10             	add    esp,0x10
c000935f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009367:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009377:	e8 b7 cb 01 00       	call   c0025f33 <__adddf3>
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009387:	31 ff                	xor    edi,edi
c0009389:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000938c:	39 f8                	cmp    eax,edi
c000938e:	0f 8e ac 00 00 00    	jle    c0009440 <linear_vari_process+0x681>
c0009394:	8b 16                	mov    edx,DWORD PTR [esi]
c0009396:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009399:	29 c1                	sub    ecx,eax
c000939b:	89 c8                	mov    eax,ecx
c000939d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093a0:	01 f8                	add    eax,edi
c00093a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093a6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093b3:	51                   	push   ecx
c00093b4:	01 f8                	add    eax,edi
c00093b6:	51                   	push   ecx
c00093b7:	47                   	inc    edi
c00093b8:	55                   	push   ebp
c00093b9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093bc:	e8 07 c5 01 00       	call   c00258c8 <__subsf3>
c00093c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c4:	e8 de db 01 00       	call   c0026fa7 <__extendsfdf2>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093d4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e4:	e8 c7 d1 01 00       	call   c00265b0 <__muldf3>
c00093e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093f4:	e8 ae db 01 00       	call   c0026fa7 <__extendsfdf2>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009400:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009404:	52                   	push   edx
c0009405:	50                   	push   eax
c0009406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940e:	e8 20 cb 01 00       	call   c0025f33 <__adddf3>
c0009413:	5d                   	pop    ebp
c0009414:	59                   	pop    ecx
c0009415:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009419:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000941d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009425:	e8 59 da 01 00       	call   c0026e83 <__truncdfsf2>
c000942a:	83 c4 10             	add    esp,0x10
c000942d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009431:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009435:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009438:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000943b:	e9 49 ff ff ff       	jmp    c0009389 <linear_vari_process+0x5ca>
c0009440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009448:	68 00 00 f0 3f       	push   0x3ff00000
c000944d:	6a 00                	push   0x0
c000944f:	e8 40 d4 01 00       	call   c0026894 <__divdf3>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000945f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009463:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946f:	e8 bf ca 01 00       	call   c0025f33 <__adddf3>
c0009474:	59                   	pop    ecx
c0009475:	5f                   	pop    edi
c0009476:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000947a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000947e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009486:	e8 a5 db 01 00       	call   c0027030 <lrint>
c000948b:	83 ec 0c             	sub    esp,0xc
c000948e:	50                   	push   eax
c000948f:	e8 7f d7 01 00       	call   c0026c13 <__floatsidf>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000949b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000949f:	52                   	push   edx
c00094a0:	50                   	push   eax
c00094a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a9:	e8 d6 d0 01 00       	call   c0026584 <__subdf3>
c00094ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094b6:	83 c4 20             	add    esp,0x20
c00094b9:	6a 00                	push   0x0
c00094bb:	6a 00                	push   0x0
c00094bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c5:	e8 b5 d9 01 00       	call   c0026e7f <__ltdf2>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	79 1e                	jns    c00094ef <linear_vari_process+0x730>
c00094d1:	68 00 00 f0 3f       	push   0x3ff00000
c00094d6:	6a 00                	push   0x0
c00094d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094e0:	e8 4e ca 01 00       	call   c0025f33 <__adddf3>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00094eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094f2:	83 ec 10             	sub    esp,0x10
c00094f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009505:	e8 7a d0 01 00       	call   c0026584 <__subdf3>
c000950a:	e9 bc fc ff ff       	jmp    c00091cb <linear_vari_process+0x40c>
c000950f:	39 fd                	cmp    ebp,edi
c0009511:	7d 38                	jge    c000954b <linear_vari_process+0x78c>
c0009513:	83 ec 0c             	sub    esp,0xc
c0009516:	89 f8                	mov    eax,edi
c0009518:	29 e8                	sub    eax,ebp
c000951a:	99                   	cdq    
c000951b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951e:	50                   	push   eax
c000951f:	e8 ef d6 01 00       	call   c0026c13 <__floatsidf>
c0009524:	83 c4 10             	add    esp,0x10
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952f:	52                   	push   edx
c0009530:	50                   	push   eax
c0009531:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009535:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009539:	e8 f5 c9 01 00       	call   c0025f33 <__adddf3>
c000953e:	83 c4 10             	add    esp,0x10
c0009541:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009544:	89 04 24             	mov    DWORD PTR [esp],eax
c0009547:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000954b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009552:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009556:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009559:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000955c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955f:	85 c0                	test   eax,eax
c0009561:	7f 29                	jg     c000958c <linear_vari_process+0x7cd>
c0009563:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956f:	89 01                	mov    DWORD PTR [ecx],eax
c0009571:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009574:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009577:	99                   	cdq    
c0009578:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000957b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009581:	99                   	cdq    
c0009582:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009585:	31 d2                	xor    edx,edx
c0009587:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000958a:	eb 1d                	jmp    c00095a9 <linear_vari_process+0x7ea>
c000958c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958f:	31 d2                	xor    edx,edx
c0009591:	29 c8                	sub    eax,ecx
c0009593:	c1 e0 02             	shl    eax,0x2
c0009596:	39 d1                	cmp    ecx,edx
c0009598:	7e c9                	jle    c0009563 <linear_vari_process+0x7a4>
c000959a:	8b 3e                	mov    edi,DWORD PTR [esi]
c000959c:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959f:	83 c0 04             	add    eax,0x4
c00095a2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a6:	42                   	inc    edx
c00095a7:	eb ed                	jmp    c0009596 <linear_vari_process+0x7d7>
c00095a9:	83 c4 3c             	add    esp,0x3c
c00095ac:	89 d0                	mov    eax,edx
c00095ae:	5b                   	pop    ebx
c00095af:	5e                   	pop    esi
c00095b0:	5f                   	pop    edi
c00095b1:	5d                   	pop    ebp
c00095b2:	c3                   	ret    

c00095b3 <linear_reset>:
c00095b3:	83 ec 0c             	sub    esp,0xc
c00095b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ba:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095bd:	85 c0                	test   eax,eax
c00095bf:	74 20                	je     c00095e1 <linear_reset+0x2e>
c00095c1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c4:	83 c0 1c             	add    eax,0x1c
c00095c7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095ca:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d1:	c1 e2 02             	shl    edx,0x2
c00095d4:	51                   	push   ecx
c00095d5:	52                   	push   edx
c00095d6:	6a 00                	push   0x0
c00095d8:	50                   	push   eax
c00095d9:	e8 ad 70 ff ff       	call   c000068b <memset>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	83 c4 0c             	add    esp,0xc
c00095e4:	c3                   	ret    

c00095e5 <linear_get_name>:
c00095e5:	31 c0                	xor    eax,eax
c00095e7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ec:	75 05                	jne    c00095f3 <linear_get_name+0xe>
c00095ee:	b8 20 87 02 c0       	mov    eax,0xc0028720
c00095f3:	c3                   	ret    

c00095f4 <linear_get_description>:
c00095f4:	31 c0                	xor    eax,eax
c00095f6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095fb:	75 05                	jne    c0009602 <linear_get_description+0xe>
c00095fd:	b8 34 87 02 c0       	mov    eax,0xc0028734
c0009602:	c3                   	ret    

c0009603 <linear_set_converter>:
c0009603:	53                   	push   ebx
c0009604:	b8 0a 00 00 00       	mov    eax,0xa
c0009609:	83 ec 08             	sub    esp,0x8
c000960c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009610:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009615:	75 6e                	jne    c0009685 <linear_set_converter+0x82>
c0009617:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961a:	85 c0                	test   eax,eax
c000961c:	74 13                	je     c0009631 <linear_set_converter+0x2e>
c000961e:	83 ec 0c             	sub    esp,0xc
c0009621:	50                   	push   eax
c0009622:	e8 bd 5e 00 00       	call   c000f4e4 <free>
c0009627:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000962e:	83 c4 10             	add    esp,0x10
c0009631:	50                   	push   eax
c0009632:	50                   	push   eax
c0009633:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009636:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000963d:	50                   	push   eax
c000963e:	6a 01                	push   0x1
c0009640:	e8 bf 5e 00 00       	call   c000f504 <calloc>
c0009645:	83 c4 10             	add    esp,0x10
c0009648:	89 c2                	mov    edx,eax
c000964a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000964d:	85 d2                	test   edx,edx
c000964f:	b8 01 00 00 00       	mov    eax,0x1
c0009654:	74 2f                	je     c0009685 <linear_set_converter+0x82>
c0009656:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009659:	83 ec 0c             	sub    esp,0xc
c000965c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000965f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009665:	c7 43 24 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008dbf
c000966c:	c7 43 20 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008dbf
c0009673:	c7 43 28 b3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b3
c000967a:	53                   	push   ebx
c000967b:	e8 33 ff ff ff       	call   c00095b3 <linear_reset>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	31 c0                	xor    eax,eax
c0009685:	83 c4 08             	add    esp,0x8
c0009688:	5b                   	pop    ebx
c0009689:	c3                   	ret    

c000968a <int_to_fp>:
c000968a:	c1 e0 0c             	shl    eax,0xc
c000968d:	c3                   	ret    

c000968e <fp_to_int>:
c000968e:	c1 f8 0c             	sar    eax,0xc
c0009691:	c3                   	ret    

c0009692 <fp_fraction_part>:
c0009692:	25 ff 0f 00 00       	and    eax,0xfff
c0009697:	c3                   	ret    

c0009698 <fp_to_double>:
c0009698:	83 ec 1c             	sub    esp,0x1c
c000969b:	e8 f2 ff ff ff       	call   c0009692 <fp_fraction_part>
c00096a0:	83 ec 0c             	sub    esp,0xc
c00096a3:	50                   	push   eax
c00096a4:	e8 6a d5 01 00       	call   c0026c13 <__floatsidf>
c00096a9:	83 c4 10             	add    esp,0x10
c00096ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b4:	68 00 00 30 3f       	push   0x3f300000
c00096b9:	6a 00                	push   0x0
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	e8 e8 ce 01 00       	call   c00265b0 <__muldf3>
c00096c8:	83 c4 2c             	add    esp,0x2c
c00096cb:	c3                   	ret    

c00096cc <calc_output_single>:
c00096cc:	55                   	push   ebp
c00096cd:	57                   	push   edi
c00096ce:	56                   	push   esi
c00096cf:	89 c6                	mov    esi,eax
c00096d1:	53                   	push   ebx
c00096d2:	89 d3                	mov    ebx,edx
c00096d4:	83 ec 4c             	sub    esp,0x4c
c00096d7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096de:	e8 a7 ff ff ff       	call   c000968a <int_to_fp>
c00096e3:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096ea:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096ee:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096f2:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096f5:	99                   	cdq    
c00096f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096fe:	f7 fb                	idiv   ebx
c0009700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009708:	89 da                	mov    edx,ebx
c000970a:	0f af d0             	imul   edx,eax
c000970d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009711:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009715:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009719:	29 c2                	sub    edx,eax
c000971b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	83 c5 04             	add    ebp,0x4
c0009725:	e8 6e ff ff ff       	call   c0009698 <fp_to_double>
c000972a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000972e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009736:	e8 53 ff ff ff       	call   c000968e <fp_to_int>
c000973b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000973e:	52                   	push   edx
c000973f:	52                   	push   edx
c0009740:	51                   	push   ecx
c0009741:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009745:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009749:	e8 7a c1 01 00       	call   c00258c8 <__subsf3>
c000974e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009751:	e8 51 d8 01 00       	call   c0026fa7 <__extendsfdf2>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000975d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009769:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000976d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009771:	e8 3a ce 01 00       	call   c00265b0 <__muldf3>
c0009776:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000977a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000977e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009781:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009785:	e8 1d d8 01 00       	call   c0026fa7 <__extendsfdf2>
c000978a:	83 c4 10             	add    esp,0x10
c000978d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009795:	52                   	push   edx
c0009796:	50                   	push   eax
c0009797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979f:	e8 8f c7 01 00       	call   c0025f33 <__adddf3>
c00097a4:	59                   	pop    ecx
c00097a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097ad:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097b3:	e8 ef d7 01 00       	call   c0026fa7 <__extendsfdf2>
c00097b8:	83 c4 10             	add    esp,0x10
c00097bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097bf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c3:	52                   	push   edx
c00097c4:	50                   	push   eax
c00097c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097cd:	e8 de cd 01 00       	call   c00265b0 <__muldf3>
c00097d2:	83 c4 10             	add    esp,0x10
c00097d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097dd:	52                   	push   edx
c00097de:	50                   	push   eax
c00097df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e7:	e8 47 c7 01 00       	call   c0025f33 <__adddf3>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097f7:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097fb:	0f 89 1d ff ff ff    	jns    c000971e <calc_output_single+0x52>
c0009801:	89 d9                	mov    ecx,ebx
c0009803:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009807:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000980b:	89 dd                	mov    ebp,ebx
c000980d:	29 c8                	sub    eax,ecx
c000980f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009817:	99                   	cdq    
c0009818:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009820:	f7 fb                	idiv   ebx
c0009822:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009826:	0f af e8             	imul   ebp,eax
c0009829:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000982d:	01 cd                	add    ebp,ecx
c000982f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009832:	89 e8                	mov    eax,ebp
c0009834:	83 ee 04             	sub    esi,0x4
c0009837:	e8 5c fe ff ff       	call   c0009698 <fp_to_double>
c000983c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009844:	89 e8                	mov    eax,ebp
c0009846:	29 dd                	sub    ebp,ebx
c0009848:	e8 41 fe ff ff       	call   c000968e <fp_to_int>
c000984d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009850:	52                   	push   edx
c0009851:	52                   	push   edx
c0009852:	51                   	push   ecx
c0009853:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009857:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000985b:	e8 68 c0 01 00       	call   c00258c8 <__subsf3>
c0009860:	89 04 24             	mov    DWORD PTR [esp],eax
c0009863:	e8 3f d7 01 00       	call   c0026fa7 <__extendsfdf2>
c0009868:	83 c4 10             	add    esp,0x10
c000986b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000986f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000987b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000987f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009883:	e8 28 cd 01 00       	call   c00265b0 <__muldf3>
c0009888:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000988c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009890:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009897:	e8 0b d7 01 00       	call   c0026fa7 <__extendsfdf2>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098a7:	52                   	push   edx
c00098a8:	50                   	push   eax
c00098a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098b1:	e8 7d c6 01 00       	call   c0025f33 <__adddf3>
c00098b6:	59                   	pop    ecx
c00098b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098bf:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098c5:	e8 dd d6 01 00       	call   c0026fa7 <__extendsfdf2>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098d5:	52                   	push   edx
c00098d6:	50                   	push   eax
c00098d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098df:	e8 cc cc 01 00       	call   c00265b0 <__muldf3>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098ef:	52                   	push   edx
c00098f0:	50                   	push   eax
c00098f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f9:	e8 35 c6 01 00       	call   c0025f33 <__adddf3>
c00098fe:	83 c4 10             	add    esp,0x10
c0009901:	85 ed                	test   ebp,ebp
c0009903:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009907:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000990b:	0f 8f 21 ff ff ff    	jg     c0009832 <calc_output_single+0x166>
c0009911:	52                   	push   edx
c0009912:	50                   	push   eax
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 13 c6 01 00       	call   c0025f33 <__adddf3>
c0009920:	83 c4 5c             	add    esp,0x5c
c0009923:	5b                   	pop    ebx
c0009924:	5e                   	pop    esi
c0009925:	5f                   	pop    edi
c0009926:	5d                   	pop    ebp
c0009927:	c3                   	ret    

c0009928 <calc_output_stereo>:
c0009928:	55                   	push   ebp
c0009929:	89 cd                	mov    ebp,ecx
c000992b:	57                   	push   edi
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	89 c3                	mov    ebx,eax
c0009930:	83 ec 6c             	sub    esp,0x6c
c0009933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009937:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000993e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009945:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009949:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000994d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009950:	e8 35 fd ff ff       	call   c000968a <int_to_fp>
c0009955:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000995d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009961:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009969:	29 c8                	sub    eax,ecx
c000996b:	99                   	cdq    
c000996c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	0f af d0             	imul   edx,eax
c0009977:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000997a:	31 d2                	xor    edx,edx
c000997c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009980:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009984:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009987:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000998b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000998e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009992:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009996:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009999:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000999e:	29 c1                	sub    ecx,eax
c00099a0:	31 c0                	xor    eax,eax
c00099a2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099ad:	83 c7 08             	add    edi,0x8
c00099b0:	e8 e3 fc ff ff       	call   c0009698 <fp_to_double>
c00099b5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099c1:	e8 c8 fc ff ff       	call   c000968e <fp_to_int>
c00099c6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099c9:	52                   	push   edx
c00099ca:	52                   	push   edx
c00099cb:	51                   	push   ecx
c00099cc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099d0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099d4:	e8 ef be 01 00       	call   c00258c8 <__subsf3>
c00099d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099dc:	e8 c6 d5 01 00       	call   c0026fa7 <__extendsfdf2>
c00099e1:	83 c4 10             	add    esp,0x10
c00099e4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099e8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099fc:	e8 af cb 01 00       	call   c00265b0 <__muldf3>
c0009a01:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a05:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a0c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a10:	e8 92 d5 01 00       	call   c0026fa7 <__extendsfdf2>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a1c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a20:	52                   	push   edx
c0009a21:	50                   	push   eax
c0009a22:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a26:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a2a:	e8 04 c5 01 00       	call   c0025f33 <__adddf3>
c0009a2f:	59                   	pop    ecx
c0009a30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a34:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a38:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a3e:	e8 64 d5 01 00       	call   c0026fa7 <__extendsfdf2>
c0009a43:	83 c4 10             	add    esp,0x10
c0009a46:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a4a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5e:	e8 4d cb 01 00       	call   c00265b0 <__muldf3>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	52                   	push   edx
c0009a6f:	50                   	push   eax
c0009a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a78:	e8 b6 c4 01 00       	call   c0025f33 <__adddf3>
c0009a7d:	59                   	pop    ecx
c0009a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a82:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a86:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a8c:	e8 16 d5 01 00       	call   c0026fa7 <__extendsfdf2>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a98:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aa8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aac:	e8 ff ca 01 00       	call   c00265b0 <__muldf3>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ab8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009abc:	52                   	push   edx
c0009abd:	50                   	push   eax
c0009abe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac6:	e8 68 c4 01 00       	call   c0025f33 <__adddf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ad2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ada:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ade:	0f 89 c5 fe ff ff    	jns    c00099a9 <calc_output_stereo+0x81>
c0009ae4:	29 e9                	sub    ecx,ebp
c0009ae6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009aea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009aee:	29 c8                	sub    eax,ecx
c0009af0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009af8:	99                   	cdq    
c0009af9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009afd:	31 d2                	xor    edx,edx
c0009aff:	0f af f8             	imul   edi,eax
c0009b02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b06:	40                   	inc    eax
c0009b07:	01 cf                	add    edi,ecx
c0009b09:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b0e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b12:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b1a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b1d:	31 c0                	xor    eax,eax
c0009b1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b23:	89 f8                	mov    eax,edi
c0009b25:	83 eb 08             	sub    ebx,0x8
c0009b28:	e8 6b fb ff ff       	call   c0009698 <fp_to_double>
c0009b2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b35:	89 f8                	mov    eax,edi
c0009b37:	e8 52 fb ff ff       	call   c000968e <fp_to_int>
c0009b3c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b3f:	52                   	push   edx
c0009b40:	52                   	push   edx
c0009b41:	55                   	push   ebp
c0009b42:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b46:	e8 7d bd 01 00       	call   c00258c8 <__subsf3>
c0009b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b4e:	e8 54 d4 01 00       	call   c0026fa7 <__extendsfdf2>
c0009b53:	83 c4 10             	add    esp,0x10
c0009b56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6e:	e8 3d ca 01 00       	call   c00265b0 <__muldf3>
c0009b73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7e:	e8 24 d4 01 00       	call   c0026fa7 <__extendsfdf2>
c0009b83:	83 c4 10             	add    esp,0x10
c0009b86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b8a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b8e:	52                   	push   edx
c0009b8f:	50                   	push   eax
c0009b90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b98:	e8 96 c3 01 00       	call   c0025f33 <__adddf3>
c0009b9d:	59                   	pop    ecx
c0009b9e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ba2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ba6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bac:	e8 f6 d3 01 00       	call   c0026fa7 <__extendsfdf2>
c0009bb1:	83 c4 10             	add    esp,0x10
c0009bb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bcc:	e8 df c9 01 00       	call   c00265b0 <__muldf3>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	52                   	push   edx
c0009bdd:	50                   	push   eax
c0009bde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be6:	e8 48 c3 01 00       	call   c0025f33 <__adddf3>
c0009beb:	5d                   	pop    ebp
c0009bec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009bf0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009bf4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bfa:	e8 a8 d3 01 00       	call   c0026fa7 <__extendsfdf2>
c0009bff:	83 c4 10             	add    esp,0x10
c0009c02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c12:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c1a:	e8 91 c9 01 00       	call   c00265b0 <__muldf3>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c2a:	52                   	push   edx
c0009c2b:	50                   	push   eax
c0009c2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c34:	e8 fa c2 01 00       	call   c0025f33 <__adddf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c48:	85 ff                	test   edi,edi
c0009c4a:	0f 8f d3 fe ff ff    	jg     c0009b23 <calc_output_stereo+0x1fb>
c0009c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c60:	e8 ce c2 01 00       	call   c0025f33 <__adddf3>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c70:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c80:	e8 2b c9 01 00       	call   c00265b0 <__muldf3>
c0009c85:	59                   	pop    ecx
c0009c86:	5b                   	pop    ebx
c0009c87:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c97:	e8 e7 d1 01 00       	call   c0026e83 <__truncdfsf2>
c0009c9c:	83 c4 10             	add    esp,0x10
c0009c9f:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb8:	e8 76 c2 01 00       	call   c0025f33 <__adddf3>
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ccc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd8:	e8 d3 c8 01 00       	call   c00265b0 <__muldf3>
c0009cdd:	5e                   	pop    esi
c0009cde:	5f                   	pop    edi
c0009cdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ce3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cef:	e8 8f d1 01 00       	call   c0026e83 <__truncdfsf2>
c0009cf4:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009cfb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cfe:	83 c4 7c             	add    esp,0x7c
c0009d01:	5b                   	pop    ebx
c0009d02:	5e                   	pop    esi
c0009d03:	5f                   	pop    edi
c0009d04:	5d                   	pop    ebp
c0009d05:	c3                   	ret    

c0009d06 <calc_output_quad>:
c0009d06:	55                   	push   ebp
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	89 c6                	mov    esi,eax
c0009d0b:	53                   	push   ebx
c0009d0c:	83 ec 7c             	sub    esp,0x7c
c0009d0f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d13:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d17:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d1e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d2d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d30:	e8 55 f9 ff ff       	call   c000968a <int_to_fp>
c0009d35:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d38:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d3b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d43:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d47:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d4b:	99                   	cdq    
c0009d4c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d50:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d54:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d57:	31 d2                	xor    edx,edx
c0009d59:	0f af d8             	imul   ebx,eax
c0009d5c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d64:	0f af c7             	imul   eax,edi
c0009d67:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d6b:	29 c1                	sub    ecx,eax
c0009d6d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d8e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d92:	89 d8                	mov    eax,ebx
c0009d94:	83 c7 10             	add    edi,0x10
c0009d97:	e8 fc f8 ff ff       	call   c0009698 <fp_to_double>
c0009d9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da4:	89 d8                	mov    eax,ebx
c0009da6:	e8 e3 f8 ff ff       	call   c000968e <fp_to_int>
c0009dab:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009daf:	52                   	push   edx
c0009db0:	52                   	push   edx
c0009db1:	51                   	push   ecx
c0009db2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009db6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dba:	e8 09 bb 01 00       	call   c00258c8 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 e0 d1 01 00       	call   c0026fa7 <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dde:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009de2:	e8 c9 c7 01 00       	call   c00265b0 <__muldf3>
c0009de7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009deb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009def:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009df6:	e8 ac d1 01 00       	call   c0026fa7 <__extendsfdf2>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e02:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e06:	52                   	push   edx
c0009e07:	50                   	push   eax
c0009e08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e10:	e8 1e c1 01 00       	call   c0025f33 <__adddf3>
c0009e15:	59                   	pop    ecx
c0009e16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e1a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e1e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e24:	e8 7e d1 01 00       	call   c0026fa7 <__extendsfdf2>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e30:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e44:	e8 67 c7 01 00       	call   c00265b0 <__muldf3>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	52                   	push   edx
c0009e55:	50                   	push   eax
c0009e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5e:	e8 d0 c0 01 00       	call   c0025f33 <__adddf3>
c0009e63:	59                   	pop    ecx
c0009e64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e6c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e72:	e8 30 d1 01 00       	call   c0026fa7 <__extendsfdf2>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e7e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e92:	e8 19 c7 01 00       	call   c00265b0 <__muldf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	52                   	push   edx
c0009ea3:	50                   	push   eax
c0009ea4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eac:	e8 82 c0 01 00       	call   c0025f33 <__adddf3>
c0009eb1:	59                   	pop    ecx
c0009eb2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eb6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eba:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ec0:	e8 e2 d0 01 00       	call   c0026fa7 <__extendsfdf2>
c0009ec5:	83 c4 10             	add    esp,0x10
c0009ec8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ecc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009edc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ee0:	e8 cb c6 01 00       	call   c00265b0 <__muldf3>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	52                   	push   edx
c0009ef1:	50                   	push   eax
c0009ef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009efa:	e8 34 c0 01 00       	call   c0025f33 <__adddf3>
c0009eff:	59                   	pop    ecx
c0009f00:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f04:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f08:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f0e:	e8 94 d0 01 00       	call   c0026fa7 <__extendsfdf2>
c0009f13:	83 c4 10             	add    esp,0x10
c0009f16:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f1a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2e:	e8 7d c6 01 00       	call   c00265b0 <__muldf3>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f3e:	52                   	push   edx
c0009f3f:	50                   	push   eax
c0009f40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f48:	e8 e6 bf 01 00       	call   c0025f33 <__adddf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f54:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f58:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f5c:	0f 89 30 fe ff ff    	jns    c0009d92 <calc_output_quad+0x8c>
c0009f62:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f6a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f6e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f72:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f7a:	29 c8                	sub    eax,ecx
c0009f7c:	99                   	cdq    
c0009f7d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f81:	31 d2                	xor    edx,edx
c0009f83:	0f af d8             	imul   ebx,eax
c0009f86:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f8a:	40                   	inc    eax
c0009f8b:	01 cb                	add    ebx,ecx
c0009f8d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f92:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f96:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f9e:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fa1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fa9:	31 c0                	xor    eax,eax
c0009fab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fb7:	89 d8                	mov    eax,ebx
c0009fb9:	83 ee 10             	sub    esi,0x10
c0009fbc:	e8 d7 f6 ff ff       	call   c0009698 <fp_to_double>
c0009fc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc9:	89 d8                	mov    eax,ebx
c0009fcb:	e8 be f6 ff ff       	call   c000968e <fp_to_int>
c0009fd0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fd4:	52                   	push   edx
c0009fd5:	52                   	push   edx
c0009fd6:	57                   	push   edi
c0009fd7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fdb:	e8 e8 b8 01 00       	call   c00258c8 <__subsf3>
c0009fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fe3:	e8 bf cf 01 00       	call   c0026fa7 <__extendsfdf2>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fef:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ffb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a003:	e8 a8 c5 01 00       	call   c00265b0 <__muldf3>
c000a008:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a00b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a00f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a013:	e8 8f cf 01 00       	call   c0026fa7 <__extendsfdf2>
c000a018:	83 c4 10             	add    esp,0x10
c000a01b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a023:	52                   	push   edx
c000a024:	50                   	push   eax
c000a025:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02d:	e8 01 bf 01 00       	call   c0025f33 <__adddf3>
c000a032:	59                   	pop    ecx
c000a033:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a037:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a03b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a041:	e8 61 cf 01 00       	call   c0026fa7 <__extendsfdf2>
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a04d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a059:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a061:	e8 4a c5 01 00       	call   c00265b0 <__muldf3>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	52                   	push   edx
c000a072:	50                   	push   eax
c000a073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07b:	e8 b3 be 01 00       	call   c0025f33 <__adddf3>
c000a080:	5f                   	pop    edi
c000a081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a085:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a089:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a08f:	e8 13 cf 01 00       	call   c0026fa7 <__extendsfdf2>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a09b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0af:	e8 fc c4 01 00       	call   c00265b0 <__muldf3>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	52                   	push   edx
c000a0c0:	50                   	push   eax
c000a0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c9:	e8 65 be 01 00       	call   c0025f33 <__adddf3>
c000a0ce:	59                   	pop    ecx
c000a0cf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0d3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0d7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0dd:	e8 c5 ce 01 00       	call   c0026fa7 <__extendsfdf2>
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0fd:	e8 ae c4 01 00       	call   c00265b0 <__muldf3>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	52                   	push   edx
c000a10e:	50                   	push   eax
c000a10f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a113:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a117:	e8 17 be 01 00       	call   c0025f33 <__adddf3>
c000a11c:	5f                   	pop    edi
c000a11d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a121:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a125:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a12b:	e8 77 ce 01 00       	call   c0026fa7 <__extendsfdf2>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a137:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a143:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a147:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a14b:	e8 60 c4 01 00       	call   c00265b0 <__muldf3>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a157:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a15b:	52                   	push   edx
c000a15c:	50                   	push   eax
c000a15d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a161:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a165:	e8 c9 bd 01 00       	call   c0025f33 <__adddf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a171:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a175:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a179:	85 db                	test   ebx,ebx
c000a17b:	0f 8f 36 fe ff ff    	jg     c0009fb7 <calc_output_quad+0x2b1>
c000a181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a191:	e8 9d bd 01 00       	call   c0025f33 <__adddf3>
c000a196:	83 c4 10             	add    esp,0x10
c000a199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a19d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b1:	e8 fa c3 01 00       	call   c00265b0 <__muldf3>
c000a1b6:	59                   	pop    ecx
c000a1b7:	5b                   	pop    ebx
c000a1b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c8:	e8 b6 cc 01 00       	call   c0026e83 <__truncdfsf2>
c000a1cd:	83 c4 10             	add    esp,0x10
c000a1d0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1d7:	89 06                	mov    DWORD PTR [esi],eax
c000a1d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e9:	e8 45 bd 01 00       	call   c0025f33 <__adddf3>
c000a1ee:	83 c4 10             	add    esp,0x10
c000a1f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a209:	e8 a2 c3 01 00       	call   c00265b0 <__muldf3>
c000a20e:	5e                   	pop    esi
c000a20f:	5f                   	pop    edi
c000a210:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a220:	e8 5e cc 01 00       	call   c0026e83 <__truncdfsf2>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a22f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a232:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a236:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a23e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a242:	e8 ec bc 01 00       	call   c0025f33 <__adddf3>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a24e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a262:	e8 49 c3 01 00       	call   c00265b0 <__muldf3>
c000a267:	5d                   	pop    ebp
c000a268:	59                   	pop    ecx
c000a269:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a271:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a279:	e8 05 cc 01 00       	call   c0026e83 <__truncdfsf2>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a288:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a28b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a297:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a29b:	e8 93 bc 01 00       	call   c0025f33 <__adddf3>
c000a2a0:	83 c4 10             	add    esp,0x10
c000a2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2bb:	e8 f0 c2 01 00       	call   c00265b0 <__muldf3>
c000a2c0:	5b                   	pop    ebx
c000a2c1:	5e                   	pop    esi
c000a2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d2:	e8 ac cb 01 00       	call   c0026e83 <__truncdfsf2>
c000a2d7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2de:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2e1:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2e7:	5b                   	pop    ebx
c000a2e8:	5e                   	pop    esi
c000a2e9:	5f                   	pop    edi
c000a2ea:	5d                   	pop    ebp
c000a2eb:	c3                   	ret    

c000a2ec <calc_output_hex>:
c000a2ec:	55                   	push   ebp
c000a2ed:	89 cd                	mov    ebp,ecx
c000a2ef:	57                   	push   edi
c000a2f0:	56                   	push   esi
c000a2f1:	53                   	push   ebx
c000a2f2:	89 c3                	mov    ebx,eax
c000a2f4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2fa:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2fd:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a304:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a316:	e8 6f f3 ff ff       	call   c000968a <int_to_fp>
c000a31b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a31e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a322:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a325:	29 c8                	sub    eax,ecx
c000a327:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a32b:	99                   	cdq    
c000a32c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a334:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a337:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a33f:	0f af f8             	imul   edi,eax
c000a342:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a345:	01 cf                	add    edi,ecx
c000a347:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a34b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a34e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a352:	0f af c2             	imul   eax,edx
c000a355:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a359:	29 c1                	sub    ecx,eax
c000a35b:	31 d2                	xor    edx,edx
c000a35d:	31 c0                	xor    eax,eax
c000a35f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a36a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a36e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a372:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a376:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a37a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a37e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	89 f8                	mov    eax,edi
c000a38c:	e8 07 f3 ff ff       	call   c0009698 <fp_to_double>
c000a391:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a395:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a399:	89 f8                	mov    eax,edi
c000a39b:	e8 ee f2 ff ff       	call   c000968e <fp_to_int>
c000a3a0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3a4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3a7:	52                   	push   edx
c000a3a8:	52                   	push   edx
c000a3a9:	51                   	push   ecx
c000a3aa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ae:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3b5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3b9:	e8 0a b5 01 00       	call   c00258c8 <__subsf3>
c000a3be:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3c1:	e8 e1 cb 01 00       	call   c0026fa7 <__extendsfdf2>
c000a3c6:	83 c4 10             	add    esp,0x10
c000a3c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3e1:	e8 ca c1 01 00       	call   c00265b0 <__muldf3>
c000a3e6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3f5:	e8 ad cb 01 00       	call   c0026fa7 <__extendsfdf2>
c000a3fa:	83 c4 10             	add    esp,0x10
c000a3fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a401:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a405:	52                   	push   edx
c000a406:	50                   	push   eax
c000a407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40f:	e8 1f bb 01 00       	call   c0025f33 <__adddf3>
c000a414:	59                   	pop    ecx
c000a415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a419:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a41d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a423:	e8 7f cb 01 00       	call   c0026fa7 <__extendsfdf2>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a42f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a43f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a443:	e8 68 c1 01 00       	call   c00265b0 <__muldf3>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	52                   	push   edx
c000a454:	50                   	push   eax
c000a455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a45d:	e8 d1 ba 01 00       	call   c0025f33 <__adddf3>
c000a462:	59                   	pop    ecx
c000a463:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a467:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a46b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a471:	e8 31 cb 01 00       	call   c0026fa7 <__extendsfdf2>
c000a476:	83 c4 10             	add    esp,0x10
c000a479:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a47d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a489:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a48d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a491:	e8 1a c1 01 00       	call   c00265b0 <__muldf3>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	52                   	push   edx
c000a4a2:	50                   	push   eax
c000a4a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ab:	e8 83 ba 01 00       	call   c0025f33 <__adddf3>
c000a4b0:	59                   	pop    ecx
c000a4b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4b5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4b9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4bf:	e8 e3 ca 01 00       	call   c0026fa7 <__extendsfdf2>
c000a4c4:	83 c4 10             	add    esp,0x10
c000a4c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4cb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4df:	e8 cc c0 01 00       	call   c00265b0 <__muldf3>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	52                   	push   edx
c000a4f0:	50                   	push   eax
c000a4f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f9:	e8 35 ba 01 00       	call   c0025f33 <__adddf3>
c000a4fe:	59                   	pop    ecx
c000a4ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a503:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a507:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a50d:	e8 95 ca 01 00       	call   c0026fa7 <__extendsfdf2>
c000a512:	83 c4 10             	add    esp,0x10
c000a515:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a519:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a525:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a529:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a52d:	e8 7e c0 01 00       	call   c00265b0 <__muldf3>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	52                   	push   edx
c000a53e:	50                   	push   eax
c000a53f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a543:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a547:	e8 e7 b9 01 00       	call   c0025f33 <__adddf3>
c000a54c:	59                   	pop    ecx
c000a54d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a551:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a555:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a55b:	e8 47 ca 01 00       	call   c0026fa7 <__extendsfdf2>
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a567:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a573:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a577:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a57b:	e8 30 c0 01 00       	call   c00265b0 <__muldf3>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	83 c6 18             	add    esi,0x18
c000a586:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a58a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58e:	52                   	push   edx
c000a58f:	50                   	push   eax
c000a590:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a594:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a598:	e8 96 b9 01 00       	call   c0025f33 <__adddf3>
c000a59d:	59                   	pop    ecx
c000a59e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5a2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5a6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5ac:	e8 f6 c9 01 00       	call   c0026fa7 <__extendsfdf2>
c000a5b1:	83 c4 10             	add    esp,0x10
c000a5b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5cc:	e8 df bf 01 00       	call   c00265b0 <__muldf3>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5dc:	52                   	push   edx
c000a5dd:	50                   	push   eax
c000a5de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e6:	e8 48 b9 01 00       	call   c0025f33 <__adddf3>
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5f2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5f6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5f9:	0f 89 8b fd ff ff    	jns    c000a38a <calc_output_hex+0x9e>
c000a5ff:	31 f6                	xor    esi,esi
c000a601:	31 ff                	xor    edi,edi
c000a603:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a607:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a60a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a60e:	29 e9                	sub    ecx,ebp
c000a610:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a614:	29 c8                	sub    eax,ecx
c000a616:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a619:	99                   	cdq    
c000a61a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a61e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a621:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a625:	0f af e8             	imul   ebp,eax
c000a628:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a62c:	40                   	inc    eax
c000a62d:	01 cd                	add    ebp,ecx
c000a62f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a634:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a638:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a63c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a640:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a643:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a647:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a64b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a64f:	89 e8                	mov    eax,ebp
c000a651:	e8 42 f0 ff ff       	call   c0009698 <fp_to_double>
c000a656:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a65a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a65e:	89 e8                	mov    eax,ebp
c000a660:	e8 29 f0 ff ff       	call   c000968e <fp_to_int>
c000a665:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a669:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a66c:	52                   	push   edx
c000a66d:	52                   	push   edx
c000a66e:	51                   	push   ecx
c000a66f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a676:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a67d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a681:	e8 42 b2 01 00       	call   c00258c8 <__subsf3>
c000a686:	89 04 24             	mov    DWORD PTR [esp],eax
c000a689:	e8 19 c9 01 00       	call   c0026fa7 <__extendsfdf2>
c000a68e:	83 c4 10             	add    esp,0x10
c000a691:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a695:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a9:	e8 02 bf 01 00       	call   c00265b0 <__muldf3>
c000a6ae:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6bc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6c0:	e8 e2 c8 01 00       	call   c0026fa7 <__extendsfdf2>
c000a6c5:	83 c4 10             	add    esp,0x10
c000a6c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d0:	52                   	push   edx
c000a6d1:	50                   	push   eax
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6da:	e8 54 b8 01 00       	call   c0025f33 <__adddf3>
c000a6df:	59                   	pop    ecx
c000a6e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6e4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6e8:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6ee:	e8 b4 c8 01 00       	call   c0026fa7 <__extendsfdf2>
c000a6f3:	83 c4 10             	add    esp,0x10
c000a6f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a706:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70e:	e8 9d be 01 00       	call   c00265b0 <__muldf3>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	52                   	push   edx
c000a71f:	50                   	push   eax
c000a720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a724:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a728:	e8 06 b8 01 00       	call   c0025f33 <__adddf3>
c000a72d:	59                   	pop    ecx
c000a72e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a732:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a736:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a73c:	e8 66 c8 01 00       	call   c0026fa7 <__extendsfdf2>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a748:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a74c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a754:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a758:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a75c:	e8 4f be 01 00       	call   c00265b0 <__muldf3>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	52                   	push   edx
c000a76d:	50                   	push   eax
c000a76e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a772:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a776:	e8 b8 b7 01 00       	call   c0025f33 <__adddf3>
c000a77b:	59                   	pop    ecx
c000a77c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a780:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a784:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a78a:	e8 18 c8 01 00       	call   c0026fa7 <__extendsfdf2>
c000a78f:	83 c4 10             	add    esp,0x10
c000a792:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a796:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a79a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7aa:	e8 01 be 01 00       	call   c00265b0 <__muldf3>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	52                   	push   edx
c000a7bb:	50                   	push   eax
c000a7bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c4:	e8 6a b7 01 00       	call   c0025f33 <__adddf3>
c000a7c9:	59                   	pop    ecx
c000a7ca:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ce:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7d2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7d8:	e8 ca c7 01 00       	call   c0026fa7 <__extendsfdf2>
c000a7dd:	83 c4 10             	add    esp,0x10
c000a7e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f8:	e8 b3 bd 01 00       	call   c00265b0 <__muldf3>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	52                   	push   edx
c000a809:	50                   	push   eax
c000a80a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a80e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a812:	e8 1c b7 01 00       	call   c0025f33 <__adddf3>
c000a817:	59                   	pop    ecx
c000a818:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a81c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a820:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a826:	e8 7c c7 01 00       	call   c0026fa7 <__extendsfdf2>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a832:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a842:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a846:	e8 65 bd 01 00       	call   c00265b0 <__muldf3>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	83 eb 18             	sub    ebx,0x18
c000a851:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a855:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a859:	52                   	push   edx
c000a85a:	50                   	push   eax
c000a85b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a85f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a863:	e8 cb b6 01 00       	call   c0025f33 <__adddf3>
c000a868:	59                   	pop    ecx
c000a869:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a86d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a871:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a877:	e8 2b c7 01 00       	call   c0026fa7 <__extendsfdf2>
c000a87c:	83 c4 10             	add    esp,0x10
c000a87f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a883:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a887:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a893:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a897:	e8 14 bd 01 00       	call   c00265b0 <__muldf3>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8a7:	52                   	push   edx
c000a8a8:	50                   	push   eax
c000a8a9:	57                   	push   edi
c000a8aa:	56                   	push   esi
c000a8ab:	e8 83 b6 01 00       	call   c0025f33 <__adddf3>
c000a8b0:	83 c4 10             	add    esp,0x10
c000a8b3:	89 c6                	mov    esi,eax
c000a8b5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8b8:	89 d7                	mov    edi,edx
c000a8ba:	85 ed                	test   ebp,ebp
c000a8bc:	0f 8f 8d fd ff ff    	jg     c000a64f <calc_output_hex+0x363>
c000a8c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8d2:	e8 5c b6 01 00       	call   c0025f33 <__adddf3>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f1:	e8 ba bc 01 00       	call   c00265b0 <__muldf3>
c000a8f6:	59                   	pop    ecx
c000a8f7:	5b                   	pop    ebx
c000a8f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a900:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a904:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a908:	e8 76 c5 01 00       	call   c0026e83 <__truncdfsf2>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a917:	89 03                	mov    DWORD PTR [ebx],eax
c000a919:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a91d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a929:	e8 05 b6 01 00       	call   c0025f33 <__adddf3>
c000a92e:	83 c4 10             	add    esp,0x10
c000a931:	89 04 24             	mov    DWORD PTR [esp],eax
c000a934:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a940:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a948:	e8 63 bc 01 00       	call   c00265b0 <__muldf3>
c000a94d:	5d                   	pop    ebp
c000a94e:	59                   	pop    ecx
c000a94f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95f:	e8 1f c5 01 00       	call   c0026e83 <__truncdfsf2>
c000a964:	83 c4 10             	add    esp,0x10
c000a967:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a96e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a971:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a975:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a979:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a97d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a981:	e8 ad b5 01 00       	call   c0025f33 <__adddf3>
c000a986:	83 c4 10             	add    esp,0x10
c000a989:	89 04 24             	mov    DWORD PTR [esp],eax
c000a98c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a99c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a0:	e8 0b bc 01 00       	call   c00265b0 <__muldf3>
c000a9a5:	5b                   	pop    ebx
c000a9a6:	5d                   	pop    ebp
c000a9a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b7:	e8 c7 c4 01 00       	call   c0026e83 <__truncdfsf2>
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9c6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d9:	e8 55 b5 01 00       	call   c0025f33 <__adddf3>
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f8:	e8 b3 bb 01 00       	call   c00265b0 <__muldf3>
c000a9fd:	59                   	pop    ecx
c000a9fe:	5b                   	pop    ebx
c000a9ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0f:	e8 6f c4 01 00       	call   c0026e83 <__truncdfsf2>
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa31:	e8 fd b4 01 00       	call   c0025f33 <__adddf3>
c000aa36:	83 c4 10             	add    esp,0x10
c000aa39:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa50:	e8 5b bb 01 00       	call   c00265b0 <__muldf3>
c000aa55:	5d                   	pop    ebp
c000aa56:	59                   	pop    ecx
c000aa57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa67:	e8 17 c4 01 00       	call   c0026e83 <__truncdfsf2>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa79:	57                   	push   edi
c000aa7a:	56                   	push   esi
c000aa7b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa83:	e8 ab b4 01 00       	call   c0025f33 <__adddf3>
c000aa88:	83 c4 10             	add    esp,0x10
c000aa8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa2:	e8 09 bb 01 00       	call   c00265b0 <__muldf3>
c000aaa7:	5b                   	pop    ebx
c000aaa8:	5e                   	pop    esi
c000aaa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aab1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab9:	e8 c5 c3 01 00       	call   c0026e83 <__truncdfsf2>
c000aabe:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aac5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aac8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aace:	5b                   	pop    ebx
c000aacf:	5e                   	pop    esi
c000aad0:	5f                   	pop    edi
c000aad1:	5d                   	pop    ebp
c000aad2:	c3                   	ret    

c000aad3 <sinc_reset>:
c000aad3:	56                   	push   esi
c000aad4:	53                   	push   ebx
c000aad5:	51                   	push   ecx
c000aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aada:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aadd:	85 db                	test   ebx,ebx
c000aadf:	74 59                	je     c000ab3a <sinc_reset+0x67>
c000aae1:	31 d2                	xor    edx,edx
c000aae3:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aaea:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aaed:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aaf0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aaf7:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aafe:	31 c0                	xor    eax,eax
c000ab00:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab06:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab09:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab0c:	52                   	push   edx
c000ab0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab10:	c1 e0 02             	shl    eax,0x2
c000ab13:	50                   	push   eax
c000ab14:	6a 00                	push   0x0
c000ab16:	56                   	push   esi
c000ab17:	e8 6f 5b ff ff       	call   c000068b <memset>
c000ab1c:	83 c4 0c             	add    esp,0xc
c000ab1f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab22:	c1 e0 02             	shl    eax,0x2
c000ab25:	50                   	push   eax
c000ab26:	68 aa 00 00 00       	push   0xaa
c000ab2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab2e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab31:	50                   	push   eax
c000ab32:	e8 54 5b ff ff       	call   c000068b <memset>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	58                   	pop    eax
c000ab3b:	5b                   	pop    ebx
c000ab3c:	5e                   	pop    esi
c000ab3d:	c3                   	ret    

c000ab3e <calc_output_multi>:
c000ab3e:	55                   	push   ebp
c000ab3f:	57                   	push   edi
c000ab40:	56                   	push   esi
c000ab41:	89 c6                	mov    esi,eax
c000ab43:	53                   	push   ebx
c000ab44:	83 ec 4c             	sub    esp,0x4c
c000ab47:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab53:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab57:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab63:	8d 46 44             	lea    eax,[esi+0x44]
c000ab66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab69:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab73:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab76:	e8 0f eb ff ff       	call   c000968a <int_to_fp>
c000ab7b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab7e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab82:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab86:	99                   	cdq    
c000ab87:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab8f:	0f af d0             	imul   edx,eax
c000ab92:	0f af c3             	imul   eax,ebx
c000ab95:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab99:	29 c1                	sub    ecx,eax
c000ab9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aba3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abae:	57                   	push   edi
c000abaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abb3:	6a 00                	push   0x0
c000abb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb9:	e8 cd 5a ff ff       	call   c000068b <memset>
c000abbe:	83 c4 10             	add    esp,0x10
c000abc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc5:	89 df                	mov    edi,ebx
c000abc7:	e8 cc ea ff ff       	call   c0009698 <fp_to_double>
c000abcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abd8:	e8 b1 ea ff ff       	call   c000968e <fp_to_int>
c000abdd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abe0:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abe3:	51                   	push   ecx
c000abe4:	51                   	push   ecx
c000abe5:	55                   	push   ebp
c000abe6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abea:	e8 d9 ac 01 00       	call   c00258c8 <__subsf3>
c000abef:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf2:	e8 b0 c3 01 00       	call   c0026fa7 <__extendsfdf2>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac0a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac0e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac12:	e8 99 b9 01 00       	call   c00265b0 <__muldf3>
c000ac17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac22:	e8 80 c3 01 00       	call   c0026fa7 <__extendsfdf2>
c000ac27:	83 c4 10             	add    esp,0x10
c000ac2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac32:	52                   	push   edx
c000ac33:	50                   	push   eax
c000ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac3c:	e8 f2 b2 01 00       	call   c0025f33 <__adddf3>
c000ac41:	83 c4 10             	add    esp,0x10
c000ac44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac4c:	89 f8                	mov    eax,edi
c000ac4e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac53:	99                   	cdq    
c000ac54:	f7 f9                	idiv   ecx
c000ac56:	4a                   	dec    edx
c000ac57:	83 fa 06             	cmp    edx,0x6
c000ac5a:	77 07                	ja     c000ac63 <calc_output_multi+0x125>
c000ac5c:	ff 24 95 64 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd789c]
c000ac63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac66:	4f                   	dec    edi
c000ac67:	83 ec 0c             	sub    esp,0xc
c000ac6a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac71:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac78:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac7c:	e8 26 c3 01 00       	call   c0026fa7 <__extendsfdf2>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac88:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9c:	e8 0f b9 01 00       	call   c00265b0 <__muldf3>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	52                   	push   edx
c000acad:	50                   	push   eax
c000acae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acb1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acb4:	e8 7a b2 01 00       	call   c0025f33 <__adddf3>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acbf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acc2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acc5:	4f                   	dec    edi
c000acc6:	83 ec 0c             	sub    esp,0xc
c000acc9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000accc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acd7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acdb:	e8 c7 c2 01 00       	call   c0026fa7 <__extendsfdf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acf7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acfb:	e8 b0 b8 01 00       	call   c00265b0 <__muldf3>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	52                   	push   edx
c000ad0c:	50                   	push   eax
c000ad0d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad10:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad13:	e8 1b b2 01 00       	call   c0025f33 <__adddf3>
c000ad18:	83 c4 10             	add    esp,0x10
c000ad1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad24:	4f                   	dec    edi
c000ad25:	83 ec 0c             	sub    esp,0xc
c000ad28:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad2f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad36:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad3a:	e8 68 c2 01 00       	call   c0026fa7 <__extendsfdf2>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad46:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad52:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5a:	e8 51 b8 01 00       	call   c00265b0 <__muldf3>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	52                   	push   edx
c000ad6b:	50                   	push   eax
c000ad6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad6f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad72:	e8 bc b1 01 00       	call   c0025f33 <__adddf3>
c000ad77:	83 c4 10             	add    esp,0x10
c000ad7a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad7d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad83:	4f                   	dec    edi
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad8e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad95:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad99:	e8 09 c2 01 00       	call   c0026fa7 <__extendsfdf2>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ada5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb9:	e8 f2 b7 01 00       	call   c00265b0 <__muldf3>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	52                   	push   edx
c000adca:	50                   	push   eax
c000adcb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adce:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000add1:	e8 5d b1 01 00       	call   c0025f33 <__adddf3>
c000add6:	83 c4 10             	add    esp,0x10
c000add9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000addc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000addf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ade2:	4f                   	dec    edi
c000ade3:	83 ec 0c             	sub    esp,0xc
c000ade6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ade9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aded:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adf4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adf8:	e8 aa c1 01 00       	call   c0026fa7 <__extendsfdf2>
c000adfd:	83 c4 10             	add    esp,0x10
c000ae00:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae04:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae18:	e8 93 b7 01 00       	call   c00265b0 <__muldf3>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	52                   	push   edx
c000ae29:	50                   	push   eax
c000ae2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae2d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae30:	e8 fe b0 01 00       	call   c0025f33 <__adddf3>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae3b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae41:	4f                   	dec    edi
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae4c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae53:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae57:	e8 4b c1 01 00       	call   c0026fa7 <__extendsfdf2>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae63:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae77:	e8 34 b7 01 00       	call   c00265b0 <__muldf3>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	52                   	push   edx
c000ae88:	50                   	push   eax
c000ae89:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae8c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae8f:	e8 9f b0 01 00       	call   c0025f33 <__adddf3>
c000ae94:	83 c4 10             	add    esp,0x10
c000ae97:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae9a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea0:	4f                   	dec    edi
c000aea1:	83 ec 0c             	sub    esp,0xc
c000aea4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeab:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeb2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeb6:	e8 ec c0 01 00       	call   c0026fa7 <__extendsfdf2>
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aec2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aece:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed6:	e8 d5 b6 01 00       	call   c00265b0 <__muldf3>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	52                   	push   edx
c000aee7:	50                   	push   eax
c000aee8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeeb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeee:	e8 40 b0 01 00       	call   c0025f33 <__adddf3>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aefc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeff:	4f                   	dec    edi
c000af00:	83 ec 0c             	sub    esp,0xc
c000af03:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af0a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af11:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af15:	e8 8d c0 01 00       	call   c0026fa7 <__extendsfdf2>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af21:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af35:	e8 76 b6 01 00       	call   c00265b0 <__muldf3>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	52                   	push   edx
c000af46:	50                   	push   eax
c000af47:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af4a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af4d:	e8 e1 af 01 00       	call   c0025f33 <__adddf3>
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af58:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af5b:	85 ff                	test   edi,edi
c000af5d:	0f 8f e9 fc ff ff    	jg     c000ac4c <calc_output_multi+0x10e>
c000af63:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af6b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af6f:	0f 89 4c fc ff ff    	jns    c000abc1 <calc_output_multi+0x83>
c000af75:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af7d:	29 c8                	sub    eax,ecx
c000af7f:	99                   	cdq    
c000af80:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af88:	0f af d0             	imul   edx,eax
c000af8b:	40                   	inc    eax
c000af8c:	01 d1                	add    ecx,edx
c000af8e:	0f af c3             	imul   eax,ebx
c000af91:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af95:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af9c:	55                   	push   ebp
c000af9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afa1:	6a 00                	push   0x0
c000afa3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afa7:	e8 df 56 ff ff       	call   c000068b <memset>
c000afac:	83 c4 10             	add    esp,0x10
c000afaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb3:	e8 e0 e6 ff ff       	call   c0009698 <fp_to_double>
c000afb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afc4:	e8 c5 e6 ff ff       	call   c000968e <fp_to_int>
c000afc9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afcc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afcf:	57                   	push   edi
c000afd0:	57                   	push   edi
c000afd1:	89 df                	mov    edi,ebx
c000afd3:	55                   	push   ebp
c000afd4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afd8:	e8 eb a8 01 00       	call   c00258c8 <__subsf3>
c000afdd:	89 04 24             	mov    DWORD PTR [esp],eax
c000afe0:	e8 c2 bf 01 00       	call   c0026fa7 <__extendsfdf2>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000aff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000affc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b000:	e8 ab b5 01 00       	call   c00265b0 <__muldf3>
c000b005:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b008:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b00c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b010:	e8 92 bf 01 00       	call   c0026fa7 <__extendsfdf2>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b01c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b020:	52                   	push   edx
c000b021:	50                   	push   eax
c000b022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02a:	e8 04 af 01 00       	call   c0025f33 <__adddf3>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b036:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b03a:	89 f8                	mov    eax,edi
c000b03c:	b9 08 00 00 00       	mov    ecx,0x8
c000b041:	99                   	cdq    
c000b042:	f7 f9                	idiv   ecx
c000b044:	4a                   	dec    edx
c000b045:	83 fa 06             	cmp    edx,0x6
c000b048:	77 07                	ja     c000b051 <calc_output_multi+0x513>
c000b04a:	ff 24 95 80 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7880]
c000b051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b055:	4f                   	dec    edi
c000b056:	83 ec 0c             	sub    esp,0xc
c000b059:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b060:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b067:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06b:	e8 37 bf 01 00       	call   c0026fa7 <__extendsfdf2>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08b:	e8 20 b5 01 00       	call   c00265b0 <__muldf3>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	52                   	push   edx
c000b09c:	50                   	push   eax
c000b09d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a3:	e8 8b ae 01 00       	call   c0025f33 <__adddf3>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 d7 be 01 00       	call   c0026fa7 <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0eb:	e8 c0 b4 01 00       	call   c00265b0 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 2b ae 01 00       	call   c0025f33 <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 77 be 01 00       	call   c0026fa7 <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b137:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14b:	e8 60 b4 01 00       	call   c00265b0 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 cb ad 01 00       	call   c0025f33 <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b175:	4f                   	dec    edi
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b180:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b187:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b18b:	e8 17 be 01 00       	call   c0026fa7 <__extendsfdf2>
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ab:	e8 00 b4 01 00       	call   c00265b0 <__muldf3>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	52                   	push   edx
c000b1bc:	50                   	push   eax
c000b1bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c3:	e8 6b ad 01 00       	call   c0025f33 <__adddf3>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d5:	4f                   	dec    edi
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1eb:	e8 b7 bd 01 00       	call   c0026fa7 <__extendsfdf2>
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20b:	e8 a0 b3 01 00       	call   c00265b0 <__muldf3>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	52                   	push   edx
c000b21c:	50                   	push   eax
c000b21d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b220:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b223:	e8 0b ad 01 00       	call   c0025f33 <__adddf3>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b22e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b235:	4f                   	dec    edi
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b23c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b240:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b247:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b24b:	e8 57 bd 01 00       	call   c0026fa7 <__extendsfdf2>
c000b250:	83 c4 10             	add    esp,0x10
c000b253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b25b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b267:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26b:	e8 40 b3 01 00       	call   c00265b0 <__muldf3>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	52                   	push   edx
c000b27c:	50                   	push   eax
c000b27d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b280:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b283:	e8 ab ac 01 00       	call   c0025f33 <__adddf3>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b28e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b295:	4f                   	dec    edi
c000b296:	83 ec 0c             	sub    esp,0xc
c000b299:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b29c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2ab:	e8 f7 bc 01 00       	call   c0026fa7 <__extendsfdf2>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cb:	e8 e0 b2 01 00       	call   c00265b0 <__muldf3>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	52                   	push   edx
c000b2dc:	50                   	push   eax
c000b2dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2e3:	e8 4b ac 01 00       	call   c0025f33 <__adddf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f5:	4f                   	dec    edi
c000b2f6:	83 ec 0c             	sub    esp,0xc
c000b2f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b300:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b307:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b30b:	e8 97 bc 01 00       	call   c0026fa7 <__extendsfdf2>
c000b310:	83 c4 10             	add    esp,0x10
c000b313:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b317:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b327:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32b:	e8 80 b2 01 00       	call   c00265b0 <__muldf3>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	52                   	push   edx
c000b33c:	50                   	push   eax
c000b33d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b340:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b343:	e8 eb ab 01 00       	call   c0025f33 <__adddf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b34e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b351:	85 ff                	test   edi,edi
c000b353:	0f 8f e1 fc ff ff    	jg     c000b03a <calc_output_multi+0x4fc>
c000b359:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b35d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b361:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b365:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b36a:	0f 8f 3f fc ff ff    	jg     c000afaf <calc_output_multi+0x471>
c000b370:	be 08 00 00 00       	mov    esi,0x8
c000b375:	89 d8                	mov    eax,ebx
c000b377:	99                   	cdq    
c000b378:	f7 fe                	idiv   esi
c000b37a:	4a                   	dec    edx
c000b37b:	83 fa 06             	cmp    edx,0x6
c000b37e:	77 07                	ja     c000b387 <calc_output_multi+0x849>
c000b380:	ff 24 95 9c 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7864]
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4b                   	dec    ebx
c000b38c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b390:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b397:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b39b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b39e:	e8 90 ab 01 00       	call   c0025f33 <__adddf3>
c000b3a3:	83 c4 10             	add    esp,0x10
c000b3a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3be:	e8 ed b1 01 00       	call   c00265b0 <__muldf3>
c000b3c3:	5d                   	pop    ebp
c000b3c4:	59                   	pop    ecx
c000b3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 a9 ba 01 00       	call   c0026e83 <__truncdfsf2>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3e1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e8:	4b                   	dec    ebx
c000b3e9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ed:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	e8 33 ab 01 00       	call   c0025f33 <__adddf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41b:	e8 90 b1 01 00       	call   c00265b0 <__muldf3>
c000b420:	59                   	pop    ecx
c000b421:	5f                   	pop    edi
c000b422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b42a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b432:	e8 4c ba 01 00       	call   c0026e83 <__truncdfsf2>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b43e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b445:	4b                   	dec    ebx
c000b446:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b44a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	e8 d6 aa 01 00       	call   c0025f33 <__adddf3>
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b478:	e8 33 b1 01 00       	call   c00265b0 <__muldf3>
c000b47d:	5f                   	pop    edi
c000b47e:	5d                   	pop    ebp
c000b47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48f:	e8 ef b9 01 00       	call   c0026e83 <__truncdfsf2>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b49b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a2:	4b                   	dec    ebx
c000b4a3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	e8 79 aa 01 00       	call   c0025f33 <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	e8 d6 b0 01 00       	call   c00265b0 <__muldf3>
c000b4da:	5d                   	pop    ebp
c000b4db:	59                   	pop    ecx
c000b4dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ec:	e8 92 b9 01 00       	call   c0026e83 <__truncdfsf2>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4f8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ff:	4b                   	dec    ebx
c000b500:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b504:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	e8 1c aa 01 00       	call   c0025f33 <__adddf3>
c000b517:	83 c4 10             	add    esp,0x10
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b532:	e8 79 b0 01 00       	call   c00265b0 <__muldf3>
c000b537:	59                   	pop    ecx
c000b538:	5f                   	pop    edi
c000b539:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b53d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b549:	e8 35 b9 01 00       	call   c0026e83 <__truncdfsf2>
c000b54e:	83 c4 10             	add    esp,0x10
c000b551:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b555:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	4b                   	dec    ebx
c000b55d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b561:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	e8 bf a9 01 00       	call   c0025f33 <__adddf3>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	e8 1c b0 01 00       	call   c00265b0 <__muldf3>
c000b594:	5f                   	pop    edi
c000b595:	5d                   	pop    ebp
c000b596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b59a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a6:	e8 d8 b8 01 00       	call   c0026e83 <__truncdfsf2>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b9:	4b                   	dec    ebx
c000b5ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	e8 62 a9 01 00       	call   c0025f33 <__adddf3>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	e8 bf af 01 00       	call   c00265b0 <__muldf3>
c000b5f1:	5d                   	pop    ebp
c000b5f2:	59                   	pop    ecx
c000b5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	e8 7b b8 01 00       	call   c0026e83 <__truncdfsf2>
c000b608:	83 c4 10             	add    esp,0x10
c000b60b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b60f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b616:	4b                   	dec    ebx
c000b617:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	e8 05 a9 01 00       	call   c0025f33 <__adddf3>
c000b62e:	83 c4 10             	add    esp,0x10
c000b631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 62 af 01 00       	call   c00265b0 <__muldf3>
c000b64e:	59                   	pop    ecx
c000b64f:	5f                   	pop    edi
c000b650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b654:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	e8 1e b8 01 00       	call   c0026e83 <__truncdfsf2>
c000b665:	83 c4 10             	add    esp,0x10
c000b668:	85 db                	test   ebx,ebx
c000b66a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b66e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b671:	0f 8f fe fc ff ff    	jg     c000b375 <calc_output_multi+0x837>
c000b677:	83 c4 4c             	add    esp,0x4c
c000b67a:	5b                   	pop    ebx
c000b67b:	5e                   	pop    esi
c000b67c:	5f                   	pop    edi
c000b67d:	5d                   	pop    ebp
c000b67e:	c3                   	ret    

c000b67f <double_to_fp>:
c000b67f:	83 ec 0c             	sub    esp,0xc
c000b682:	68 00 00 b0 40       	push   0x40b00000
c000b687:	6a 00                	push   0x0
c000b689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b68d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b691:	e8 1a af 01 00       	call   c00265b0 <__muldf3>
c000b696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b69a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b69e:	83 c4 1c             	add    esp,0x1c
c000b6a1:	e9 8a b9 01 00       	jmp    c0027030 <lrint>

c000b6a6 <prepare_data>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	56                   	push   esi
c000b6a9:	53                   	push   ebx
c000b6aa:	83 ec 1c             	sub    esp,0x1c
c000b6ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6b5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6b9:	0f 89 57 01 00 00    	jns    c000b816 <prepare_data+0x170>
c000b6bf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6c5:	85 d2                	test   edx,edx
c000b6c7:	75 0d                	jne    c000b6d6 <prepare_data+0x30>
c000b6c9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6cf:	29 d0                	sub    eax,edx
c000b6d1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6d4:	eb 44                	jmp    c000b71a <prepare_data+0x74>
c000b6d6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6d9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6dc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6df:	39 c1                	cmp    ecx,eax
c000b6e1:	7d 04                	jge    c000b6e7 <prepare_data+0x41>
c000b6e3:	29 d0                	sub    eax,edx
c000b6e5:	eb 2d                	jmp    c000b714 <prepare_data+0x6e>
c000b6e7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6ed:	29 d7                	sub    edi,edx
c000b6ef:	01 f7                	add    edi,esi
c000b6f1:	51                   	push   ecx
c000b6f2:	29 f2                	sub    edx,esi
c000b6f4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6fb:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6fe:	51                   	push   ecx
c000b6ff:	52                   	push   edx
c000b700:	50                   	push   eax
c000b701:	e8 17 4f ff ff       	call   c000061d <memmove>
c000b706:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b709:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b70f:	29 f0                	sub    eax,esi
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	29 f0                	sub    eax,esi
c000b716:	79 02                	jns    c000b71a <prepare_data+0x74>
c000b718:	31 c0                	xor    eax,eax
c000b71a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b71d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b720:	29 ef                	sub    edi,ebp
c000b722:	39 c7                	cmp    edi,eax
c000b724:	7e 02                	jle    c000b728 <prepare_data+0x82>
c000b726:	89 c7                	mov    edi,eax
c000b728:	89 f8                	mov    eax,edi
c000b72a:	99                   	cdq    
c000b72b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b72e:	b8 15 00 00 00       	mov    eax,0x15
c000b733:	29 d7                	sub    edi,edx
c000b735:	0f 88 dd 00 00 00    	js     c000b818 <prepare_data+0x172>
c000b73b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b73e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b741:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b744:	0f 8f ce 00 00 00    	jg     c000b818 <prepare_data+0x172>
c000b74a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b750:	50                   	push   eax
c000b751:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b758:	50                   	push   eax
c000b759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b75d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b75f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b762:	50                   	push   eax
c000b763:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b766:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b76a:	50                   	push   eax
c000b76b:	e8 e5 4e ff ff       	call   c0000655 <memcpy>
c000b770:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b773:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b776:	01 fd                	add    ebp,edi
c000b778:	01 f9                	add    ecx,edi
c000b77a:	83 c4 10             	add    esp,0x10
c000b77d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b780:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b783:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b78a:	0f 85 86 00 00 00    	jne    c000b816 <prepare_data+0x170>
c000b790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b793:	89 e8                	mov    eax,ebp
c000b795:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b798:	29 c8                	sub    eax,ecx
c000b79a:	39 f8                	cmp    eax,edi
c000b79c:	7d 78                	jge    c000b816 <prepare_data+0x170>
c000b79e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7a2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7a6:	74 6e                	je     c000b816 <prepare_data+0x170>
c000b7a8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7af:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7b2:	29 ef                	sub    edi,ebp
c000b7b4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7b8:	7c 29                	jl     c000b7e3 <prepare_data+0x13d>
c000b7ba:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7bd:	29 f1                	sub    ecx,esi
c000b7bf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7c6:	55                   	push   ebp
c000b7c7:	50                   	push   eax
c000b7c8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7cb:	50                   	push   eax
c000b7cc:	52                   	push   edx
c000b7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7d1:	e8 47 4e ff ff       	call   c000061d <memmove>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7dc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7e6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7e9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7ec:	83 c6 05             	add    esi,0x5
c000b7ef:	78 07                	js     c000b7f8 <prepare_data+0x152>
c000b7f1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f4:	39 cf                	cmp    edi,ecx
c000b7f6:	7e 04                	jle    c000b7fc <prepare_data+0x156>
c000b7f8:	89 ce                	mov    esi,ecx
c000b7fa:	29 c6                	sub    esi,eax
c000b7fc:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7ff:	51                   	push   ecx
c000b800:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b807:	51                   	push   ecx
c000b808:	6a 00                	push   0x0
c000b80a:	50                   	push   eax
c000b80b:	e8 7b 4e ff ff       	call   c000068b <memset>
c000b810:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b813:	83 c4 10             	add    esp,0x10
c000b816:	31 c0                	xor    eax,eax
c000b818:	83 c4 1c             	add    esp,0x1c
c000b81b:	5b                   	pop    ebx
c000b81c:	5e                   	pop    esi
c000b81d:	5f                   	pop    edi
c000b81e:	5d                   	pop    ebp
c000b81f:	c3                   	ret    

c000b820 <sinc_multichan_vari_process>:
c000b820:	55                   	push   ebp
c000b821:	ba 05 00 00 00       	mov    edx,0x5
c000b826:	57                   	push   edi
c000b827:	56                   	push   esi
c000b828:	53                   	push   ebx
c000b829:	83 ec 4c             	sub    esp,0x4c
c000b82c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b830:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b834:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b837:	85 db                	test   ebx,ebx
c000b839:	0f 84 9b 06 00 00    	je     c000beda <sinc_multichan_vari_process+0x6ba>
c000b83f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b842:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b845:	0f af c5             	imul   eax,ebp
c000b848:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b84b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b84e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b855:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b85c:	0f af c5             	imul   eax,ebp
c000b85f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b862:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b865:	8b 06                	mov    eax,DWORD PTR [esi]
c000b867:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86f:	68 00 00 70 3f       	push   0x3f700000
c000b874:	6a 00                	push   0x0
c000b876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87e:	e8 fc b5 01 00       	call   c0026e7f <__ltdf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	ba 16 00 00 00       	mov    edx,0x16
c000b88b:	85 c0                	test   eax,eax
c000b88d:	0f 88 47 06 00 00    	js     c000beda <sinc_multichan_vari_process+0x6ba>
c000b893:	68 00 00 70 40       	push   0x40700000
c000b898:	6a 00                	push   0x0
c000b89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a2:	e8 ba b5 01 00       	call   c0026e61 <__gtdf2>
c000b8a7:	83 c4 10             	add    esp,0x10
c000b8aa:	ba 16 00 00 00       	mov    edx,0x16
c000b8af:	85 c0                	test   eax,eax
c000b8b1:	0f 8f 23 06 00 00    	jg     c000beda <sinc_multichan_vari_process+0x6ba>
c000b8b7:	83 ec 0c             	sub    esp,0xc
c000b8ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8bd:	e8 51 b3 01 00       	call   c0026c13 <__floatsidf>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8cd:	68 00 00 00 40       	push   0x40000000
c000b8d2:	6a 00                	push   0x0
c000b8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8dc:	e8 52 a6 01 00       	call   c0025f33 <__adddf3>
c000b8e1:	59                   	pop    ecx
c000b8e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8ed:	e8 21 b3 01 00       	call   c0026c13 <__floatsidf>
c000b8f2:	83 c4 10             	add    esp,0x10
c000b8f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8fd:	52                   	push   edx
c000b8fe:	50                   	push   eax
c000b8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b907:	e8 88 af 01 00       	call   c0026894 <__divdf3>
c000b90c:	83 c4 10             	add    esp,0x10
c000b90f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b913:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b917:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b91a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b91d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b921:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b935:	e8 27 b5 01 00       	call   c0026e61 <__gtdf2>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	85 c0                	test   eax,eax
c000b93f:	7e 2d                	jle    c000b96e <sinc_multichan_vari_process+0x14e>
c000b941:	68 00 00 f0 3f       	push   0x3ff00000
c000b946:	6a 00                	push   0x0
c000b948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b950:	e8 2a b5 01 00       	call   c0026e7f <__ltdf2>
c000b955:	83 c4 10             	add    esp,0x10
c000b958:	85 c0                	test   eax,eax
c000b95a:	79 4d                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96c:	eb 1b                	jmp    c000b989 <sinc_multichan_vari_process+0x169>
c000b96e:	68 00 00 f0 3f       	push   0x3ff00000
c000b973:	6a 00                	push   0x0
c000b975:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97d:	e8 fd b4 01 00       	call   c0026e7f <__ltdf2>
c000b982:	83 c4 10             	add    esp,0x10
c000b985:	85 c0                	test   eax,eax
c000b987:	79 20                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b999:	e8 f6 ae 01 00       	call   c0026894 <__divdf3>
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a9:	50                   	push   eax
c000b9aa:	50                   	push   eax
c000b9ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9b3:	e8 78 b6 01 00       	call   c0027030 <lrint>
c000b9b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9bb:	40                   	inc    eax
c000b9bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9c0:	0f af c5             	imul   eax,ebp
c000b9c3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9c7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9ce:	58                   	pop    eax
c000b9cf:	5a                   	pop    edx
c000b9d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d8:	e8 53 b6 01 00       	call   c0027030 <lrint>
c000b9dd:	83 ec 0c             	sub    esp,0xc
c000b9e0:	50                   	push   eax
c000b9e1:	e8 2d b2 01 00       	call   c0026c13 <__floatsidf>
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f1:	52                   	push   edx
c000b9f2:	50                   	push   eax
c000b9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9fb:	e8 84 ab 01 00       	call   c0026584 <__subdf3>
c000ba00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba08:	83 c4 20             	add    esp,0x20
c000ba0b:	6a 00                	push   0x0
c000ba0d:	6a 00                	push   0x0
c000ba0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba17:	e8 63 b4 01 00       	call   c0026e7f <__ltdf2>
c000ba1c:	83 c4 10             	add    esp,0x10
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	79 1f                	jns    c000ba42 <sinc_multichan_vari_process+0x222>
c000ba23:	68 00 00 f0 3f       	push   0x3ff00000
c000ba28:	6a 00                	push   0x0
c000ba2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba32:	e8 fc a4 01 00       	call   c0025f33 <__adddf3>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba42:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba4c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5f:	e8 20 ab 01 00       	call   c0026584 <__subdf3>
c000ba64:	83 c4 18             	add    esp,0x18
c000ba67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba6f:	52                   	push   edx
c000ba70:	50                   	push   eax
c000ba71:	e8 ba b5 01 00       	call   c0027030 <lrint>
c000ba76:	0f af e8             	imul   ebp,eax
c000ba79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba7d:	01 e8                	add    eax,ebp
c000ba7f:	99                   	cdq    
c000ba80:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba83:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba93:	6a 00                	push   0x0
c000ba95:	e8 fa ad 01 00       	call   c0026894 <__divdf3>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000baaa:	68 23 42 92 0c       	push   0xc924223
c000baaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab7:	e8 77 a4 01 00       	call   c0025f33 <__adddf3>
c000babc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bac0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bac4:	83 c4 20             	add    esp,0x20
c000bac7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bacf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bad7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bada:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000badd:	7d 50                	jge    c000bb2f <sinc_multichan_vari_process+0x30f>
c000badf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bae2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bae5:	01 c8                	add    eax,ecx
c000bae7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000baea:	99                   	cdq    
c000baeb:	f7 f9                	idiv   ecx
c000baed:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000baf1:	7d 0c                	jge    c000baff <sinc_multichan_vari_process+0x2df>
c000baf3:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000baf6:	85 ed                	test   ebp,ebp
c000baf8:	79 6b                	jns    c000bb65 <sinc_multichan_vari_process+0x345>
c000bafa:	e9 e6 00 00 00       	jmp    c000bbe5 <sinc_multichan_vari_process+0x3c5>
c000baff:	50                   	push   eax
c000bb00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb04:	57                   	push   edi
c000bb05:	53                   	push   ebx
c000bb06:	e8 9b fb ff ff       	call   c000b6a6 <prepare_data>
c000bb0b:	83 c4 10             	add    esp,0x10
c000bb0e:	89 c2                	mov    edx,eax
c000bb10:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb13:	85 c0                	test   eax,eax
c000bb15:	0f 85 bf 03 00 00    	jne    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb1b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb21:	01 c8                	add    eax,ecx
c000bb23:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb26:	99                   	cdq    
c000bb27:	f7 f9                	idiv   ecx
c000bb29:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2d:	7c c4                	jl     c000baf3 <sinc_multichan_vari_process+0x2d3>
c000bb2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb37:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb3a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb45:	89 06                	mov    DWORD PTR [esi],eax
c000bb47:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb4a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb4d:	99                   	cdq    
c000bb4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb51:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb57:	99                   	cdq    
c000bb58:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb5b:	31 d2                	xor    edx,edx
c000bb5d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb60:	e9 75 03 00 00       	jmp    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb6b:	e8 a3 b0 01 00       	call   c0026c13 <__floatsidf>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb8b:	e8 a3 a3 01 00       	call   c0025f33 <__adddf3>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb97:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbab:	e8 83 a3 01 00       	call   c0025f33 <__adddf3>
c000bbb0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbbb:	e8 53 b0 01 00       	call   c0026c13 <__floatsidf>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbcb:	52                   	push   edx
c000bbcc:	50                   	push   eax
c000bbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd5:	e8 a3 b2 01 00       	call   c0026e7d <__gedf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	0f 89 4a ff ff ff    	jns    c000bb2f <sinc_multichan_vari_process+0x30f>
c000bbe5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbe9:	0f 8e ed 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bbef:	83 ec 10             	sub    esp,0x10
c000bbf2:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbf5:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbf8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbfb:	ff 36                	push   DWORD PTR [esi]
c000bbfd:	e8 82 a9 01 00       	call   c0026584 <__subdf3>
c000bc02:	83 c4 18             	add    esp,0x18
c000bc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc0d:	52                   	push   edx
c000bc0e:	50                   	push   eax
c000bc0f:	e8 fc b3 01 00       	call   c0027010 <fabs>
c000bc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc1c:	83 c4 10             	add    esp,0x10
c000bc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	e8 2b b2 01 00       	call   c0026e61 <__gtdf2>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	85 c0                	test   eax,eax
c000bc3b:	0f 8e 9b 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bc41:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc43:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc4a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc4e:	52                   	push   edx
c000bc4f:	50                   	push   eax
c000bc50:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc53:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc56:	e8 29 a9 01 00       	call   c0026584 <__subdf3>
c000bc5b:	59                   	pop    ecx
c000bc5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc60:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc64:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc67:	e8 a7 af 01 00       	call   c0026c13 <__floatsidf>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc73:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc77:	52                   	push   edx
c000bc78:	50                   	push   eax
c000bc79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc81:	e8 2a a9 01 00       	call   c00265b0 <__muldf3>
c000bc86:	5d                   	pop    ebp
c000bc87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc8f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc92:	e8 7c af 01 00       	call   c0026c13 <__floatsidf>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca2:	52                   	push   edx
c000bca3:	50                   	push   eax
c000bca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcac:	e8 e3 ab 01 00       	call   c0026894 <__divdf3>
c000bcb1:	83 c4 10             	add    esp,0x10
c000bcb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcb8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bccc:	e8 62 a2 01 00       	call   c0025f33 <__adddf3>
c000bcd1:	83 c4 10             	add    esp,0x10
c000bcd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcdc:	83 ec 0c             	sub    esp,0xc
c000bcdf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bce2:	e8 2c af 01 00       	call   c0026c13 <__floatsidf>
c000bce7:	83 c4 10             	add    esp,0x10
c000bcea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd02:	e8 78 b1 01 00       	call   c0026e7f <__ltdf2>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	85 c0                	test   eax,eax
c000bd0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd14:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd18:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd1c:	78 10                	js     c000bd2e <sinc_multichan_vari_process+0x50e>
c000bd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3e:	e8 6d a8 01 00       	call   c00265b0 <__muldf3>
c000bd43:	59                   	pop    ecx
c000bd44:	5d                   	pop    ebp
c000bd45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd55:	e8 25 f9 ff ff       	call   c000b67f <double_to_fp>
c000bd5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd5e:	89 c5                	mov    ebp,eax
c000bd60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6c:	e8 3f a8 01 00       	call   c00265b0 <__muldf3>
c000bd71:	83 c4 18             	add    esp,0x18
c000bd74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd7c:	52                   	push   edx
c000bd7d:	50                   	push   eax
c000bd7e:	e8 fc f8 ff ff       	call   c000b67f <double_to_fp>
c000bd83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd8a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd8d:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd90:	50                   	push   eax
c000bd91:	50                   	push   eax
c000bd92:	50                   	push   eax
c000bd93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd96:	e8 78 ae 01 00       	call   c0026c13 <__floatsidf>
c000bd9b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd9f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bda3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdb3:	e8 dc aa 01 00       	call   c0026894 <__divdf3>
c000bdb8:	83 c4 1c             	add    esp,0x1c
c000bdbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdbf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdc3:	52                   	push   edx
c000bdc4:	89 ea                	mov    edx,ebp
c000bdc6:	50                   	push   eax
c000bdc7:	89 d8                	mov    eax,ebx
c000bdc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdcc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdd0:	e8 69 ed ff ff       	call   c000ab3e <calc_output_multi>
c000bdd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdd8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bddb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bddf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bde3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdeb:	e8 a4 aa 01 00       	call   c0026894 <__divdf3>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bdf7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be0b:	e8 23 a1 01 00       	call   c0025f33 <__adddf3>
c000be10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be18:	83 c4 28             	add    esp,0x28
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be23:	e8 08 b2 01 00       	call   c0027030 <lrint>
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	50                   	push   eax
c000be2c:	e8 e2 ad 01 00       	call   c0026c13 <__floatsidf>
c000be31:	83 c4 10             	add    esp,0x10
c000be34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3c:	52                   	push   edx
c000be3d:	50                   	push   eax
c000be3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be46:	e8 39 a7 01 00       	call   c0026584 <__subdf3>
c000be4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be53:	83 c4 20             	add    esp,0x20
c000be56:	6a 00                	push   0x0
c000be58:	6a 00                	push   0x0
c000be5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be62:	e8 18 b0 01 00       	call   c0026e7f <__ltdf2>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	79 20                	jns    c000be8e <sinc_multichan_vari_process+0x66e>
c000be6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 b0 a0 01 00       	call   c0025f33 <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bea7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000beab:	e8 d4 a6 01 00       	call   c0026584 <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 6e b1 01 00       	call   c0027030 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	01 e8                	add    eax,ebp
c000bece:	99                   	cdq    
c000becf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bed2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed5:	e9 fd fb ff ff       	jmp    c000bad7 <sinc_multichan_vari_process+0x2b7>
c000beda:	83 c4 4c             	add    esp,0x4c
c000bedd:	89 d0                	mov    eax,edx
c000bedf:	5b                   	pop    ebx
c000bee0:	5e                   	pop    esi
c000bee1:	5f                   	pop    edi
c000bee2:	5d                   	pop    ebp
c000bee3:	c3                   	ret    

c000bee4 <sinc_hex_vari_process>:
c000bee4:	55                   	push   ebp
c000bee5:	ba 05 00 00 00       	mov    edx,0x5
c000beea:	57                   	push   edi
c000beeb:	56                   	push   esi
c000beec:	53                   	push   ebx
c000beed:	83 ec 4c             	sub    esp,0x4c
c000bef0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bef4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bef8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000befb:	85 db                	test   ebx,ebx
c000befd:	0f 84 9c 06 00 00    	je     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf03:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf06:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf09:	0f af c7             	imul   eax,edi
c000bf0c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf0f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf12:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf20:	0f af c7             	imul   eax,edi
c000bf23:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf26:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf34:	68 00 00 70 3f       	push   0x3f700000
c000bf39:	6a 00                	push   0x0
c000bf3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf43:	e8 37 af 01 00       	call   c0026e7f <__ltdf2>
c000bf48:	83 c4 10             	add    esp,0x10
c000bf4b:	ba 16 00 00 00       	mov    edx,0x16
c000bf50:	85 c0                	test   eax,eax
c000bf52:	0f 88 47 06 00 00    	js     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf58:	68 00 00 70 40       	push   0x40700000
c000bf5d:	6a 00                	push   0x0
c000bf5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf67:	e8 f5 ae 01 00       	call   c0026e61 <__gtdf2>
c000bf6c:	83 c4 10             	add    esp,0x10
c000bf6f:	ba 16 00 00 00       	mov    edx,0x16
c000bf74:	85 c0                	test   eax,eax
c000bf76:	0f 8f 23 06 00 00    	jg     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf82:	e8 8c ac 01 00       	call   c0026c13 <__floatsidf>
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf92:	68 00 00 00 40       	push   0x40000000
c000bf97:	6a 00                	push   0x0
c000bf99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfa1:	e8 8d 9f 01 00       	call   c0025f33 <__adddf3>
c000bfa6:	59                   	pop    ecx
c000bfa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfaf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfb2:	e8 5c ac 01 00       	call   c0026c13 <__floatsidf>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc2:	52                   	push   edx
c000bfc3:	50                   	push   eax
c000bfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfcc:	e8 c3 a8 01 00       	call   c0026894 <__divdf3>
c000bfd1:	83 c4 10             	add    esp,0x10
c000bfd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfdc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfdf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfe2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfe6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffa:	e8 62 ae 01 00       	call   c0026e61 <__gtdf2>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	85 c0                	test   eax,eax
c000c004:	7e 2d                	jle    c000c033 <sinc_hex_vari_process+0x14f>
c000c006:	68 00 00 f0 3f       	push   0x3ff00000
c000c00b:	6a 00                	push   0x0
c000c00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c015:	e8 65 ae 01 00       	call   c0026e7f <__ltdf2>
c000c01a:	83 c4 10             	add    esp,0x10
c000c01d:	85 c0                	test   eax,eax
c000c01f:	79 4d                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c025:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c029:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c02d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c031:	eb 1b                	jmp    c000c04e <sinc_hex_vari_process+0x16a>
c000c033:	68 00 00 f0 3f       	push   0x3ff00000
c000c038:	6a 00                	push   0x0
c000c03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c042:	e8 38 ae 01 00       	call   c0026e7f <__ltdf2>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	85 c0                	test   eax,eax
c000c04c:	79 20                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c04e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05e:	e8 31 a8 01 00       	call   c0026894 <__divdf3>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	50                   	push   eax
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c074:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c078:	e8 b3 af 01 00       	call   c0027030 <lrint>
c000c07d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c080:	40                   	inc    eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	0f af c7             	imul   eax,edi
c000c088:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c093:	58                   	pop    eax
c000c094:	5a                   	pop    edx
c000c095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c09d:	e8 8e af 01 00       	call   c0027030 <lrint>
c000c0a2:	83 ec 0c             	sub    esp,0xc
c000c0a5:	50                   	push   eax
c000c0a6:	e8 68 ab 01 00       	call   c0026c13 <__floatsidf>
c000c0ab:	83 c4 10             	add    esp,0x10
c000c0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b6:	52                   	push   edx
c000c0b7:	50                   	push   eax
c000c0b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c0:	e8 bf a4 01 00       	call   c0026584 <__subdf3>
c000c0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	83 c4 20             	add    esp,0x20
c000c0d0:	6a 00                	push   0x0
c000c0d2:	6a 00                	push   0x0
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0dc:	e8 9e ad 01 00       	call   c0026e7f <__ltdf2>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	85 c0                	test   eax,eax
c000c0e6:	79 1f                	jns    c000c107 <sinc_hex_vari_process+0x223>
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f7:	e8 37 9e 01 00       	call   c0025f33 <__adddf3>
c000c0fc:	83 c4 10             	add    esp,0x10
c000c0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c107:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c10a:	83 ec 10             	sub    esp,0x10
c000c10d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c111:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c124:	e8 5b a4 01 00       	call   c0026584 <__subdf3>
c000c129:	83 c4 18             	add    esp,0x18
c000c12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c130:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c134:	52                   	push   edx
c000c135:	50                   	push   eax
c000c136:	e8 f5 ae 01 00       	call   c0027030 <lrint>
c000c13b:	0f af f8             	imul   edi,eax
c000c13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c142:	01 f8                	add    eax,edi
c000c144:	99                   	cdq    
c000c145:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c148:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c14b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c14f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c153:	68 00 00 f0 3f       	push   0x3ff00000
c000c158:	6a 00                	push   0x0
c000c15a:	e8 35 a7 01 00       	call   c0026894 <__divdf3>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c16a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c16f:	68 23 42 92 0c       	push   0xc924223
c000c174:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	e8 b2 9d 01 00       	call   c0025f33 <__adddf3>
c000c181:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c185:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c189:	83 c4 20             	add    esp,0x20
c000c18c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c194:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c19c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c19f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1a2:	7d 50                	jge    c000c1f4 <sinc_hex_vari_process+0x310>
c000c1a4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1aa:	01 c8                	add    eax,ecx
c000c1ac:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1af:	99                   	cdq    
c000c1b0:	f7 f9                	idiv   ecx
c000c1b2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1b6:	7d 0c                	jge    c000c1c4 <sinc_hex_vari_process+0x2e0>
c000c1b8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1bb:	85 ff                	test   edi,edi
c000c1bd:	79 6c                	jns    c000c22b <sinc_hex_vari_process+0x347>
c000c1bf:	e9 e7 00 00 00       	jmp    c000c2ab <sinc_hex_vari_process+0x3c7>
c000c1c4:	50                   	push   eax
c000c1c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1c9:	56                   	push   esi
c000c1ca:	53                   	push   ebx
c000c1cb:	e8 d6 f4 ff ff       	call   c000b6a6 <prepare_data>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 c2                	mov    edx,eax
c000c1d5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1d8:	85 c0                	test   eax,eax
c000c1da:	0f 85 bf 03 00 00    	jne    c000c59f <sinc_hex_vari_process+0x6bb>
c000c1e0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e6:	01 c8                	add    eax,ecx
c000c1e8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1eb:	99                   	cdq    
c000c1ec:	f7 f9                	idiv   ecx
c000c1ee:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1f2:	7c c4                	jl     c000c1b8 <sinc_hex_vari_process+0x2d4>
c000c1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1fc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1ff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c20a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c20d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c210:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c213:	99                   	cdq    
c000c214:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c217:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c21a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c21d:	99                   	cdq    
c000c21e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c221:	31 d2                	xor    edx,edx
c000c223:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c226:	e9 74 03 00 00       	jmp    c000c59f <sinc_hex_vari_process+0x6bb>
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c231:	e8 dd a9 01 00       	call   c0026c13 <__floatsidf>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c23d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c241:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c251:	e8 dd 9c 01 00       	call   c0025f33 <__adddf3>
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c25d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c261:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c265:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c271:	e8 bd 9c 01 00       	call   c0025f33 <__adddf3>
c000c276:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c27d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c281:	e8 8d a9 01 00       	call   c0026c13 <__floatsidf>
c000c286:	83 c4 10             	add    esp,0x10
c000c289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c291:	52                   	push   edx
c000c292:	50                   	push   eax
c000c293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29b:	e8 dd ab 01 00       	call   c0026e7d <__gedf2>
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	85 c0                	test   eax,eax
c000c2a5:	0f 89 49 ff ff ff    	jns    c000c1f4 <sinc_hex_vari_process+0x310>
c000c2ab:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2af:	0f 8e ef 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c2b5:	83 ec 10             	sub    esp,0x10
c000c2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2c1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2c4:	e8 bb a2 01 00       	call   c0026584 <__subdf3>
c000c2c9:	83 c4 18             	add    esp,0x18
c000c2cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d4:	52                   	push   edx
c000c2d5:	50                   	push   eax
c000c2d6:	e8 35 ad 01 00       	call   c0027010 <fabs>
c000c2db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2eb:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f8:	e8 64 ab 01 00       	call   c0026e61 <__gtdf2>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	85 c0                	test   eax,eax
c000c302:	0f 8e 9c 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c308:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c30b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c30e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c312:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c316:	52                   	push   edx
c000c317:	50                   	push   eax
c000c318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c31b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c31e:	e8 61 a2 01 00       	call   c0026584 <__subdf3>
c000c323:	59                   	pop    ecx
c000c324:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c328:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c32c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c32f:	e8 df a8 01 00       	call   c0026c13 <__floatsidf>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c33f:	52                   	push   edx
c000c340:	50                   	push   eax
c000c341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c345:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c349:	e8 62 a2 01 00       	call   c00265b0 <__muldf3>
c000c34e:	5f                   	pop    edi
c000c34f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c353:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c357:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c35a:	e8 b4 a8 01 00       	call   c0026c13 <__floatsidf>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36a:	52                   	push   edx
c000c36b:	50                   	push   eax
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c374:	e8 1b a5 01 00       	call   c0026894 <__divdf3>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c380:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c388:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c38c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c390:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c394:	e8 9a 9b 01 00       	call   c0025f33 <__adddf3>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 64 a8 01 00       	call   c0026c13 <__floatsidf>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ca:	e8 b0 aa 01 00       	call   c0026e7f <__ltdf2>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	85 c0                	test   eax,eax
c000c3d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3dc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3e0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3e4:	78 10                	js     c000c3f6 <sinc_hex_vari_process+0x512>
c000c3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c406:	e8 a5 a1 01 00       	call   c00265b0 <__muldf3>
c000c40b:	59                   	pop    ecx
c000c40c:	5f                   	pop    edi
c000c40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c411:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c41d:	e8 5d f2 ff ff       	call   c000b67f <double_to_fp>
c000c422:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c426:	89 c7                	mov    edi,eax
c000c428:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c430:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c434:	e8 77 a1 01 00       	call   c00265b0 <__muldf3>
c000c439:	83 c4 18             	add    esp,0x18
c000c43c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c440:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c444:	52                   	push   edx
c000c445:	50                   	push   eax
c000c446:	e8 34 f2 ff ff       	call   c000b67f <double_to_fp>
c000c44b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c452:	83 c4 0c             	add    esp,0xc
c000c455:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c458:	8d 04 90             	lea    eax,[eax+edx*4]
c000c45b:	50                   	push   eax
c000c45c:	50                   	push   eax
c000c45d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c460:	e8 ae a7 01 00       	call   c0026c13 <__floatsidf>
c000c465:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c469:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c471:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c479:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c47d:	e8 12 a4 01 00       	call   c0026894 <__divdf3>
c000c482:	83 c4 18             	add    esp,0x18
c000c485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c48d:	52                   	push   edx
c000c48e:	89 fa                	mov    edx,edi
c000c490:	50                   	push   eax
c000c491:	89 d8                	mov    eax,ebx
c000c493:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c497:	e8 50 de ff ff       	call   c000a2ec <calc_output_hex>
c000c49c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b0:	e8 df a3 01 00       	call   c0026894 <__divdf3>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4d0:	e8 5e 9a 01 00       	call   c0025f33 <__adddf3>
c000c4d5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4d9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4dd:	83 c4 18             	add    esp,0x18
c000c4e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e8:	e8 43 ab 01 00       	call   c0027030 <lrint>
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	50                   	push   eax
c000c4f1:	e8 1d a7 01 00       	call   c0026c13 <__floatsidf>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c501:	52                   	push   edx
c000c502:	50                   	push   eax
c000c503:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c507:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c50b:	e8 74 a0 01 00       	call   c0026584 <__subdf3>
c000c510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c514:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c518:	83 c4 20             	add    esp,0x20
c000c51b:	6a 00                	push   0x0
c000c51d:	6a 00                	push   0x0
c000c51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c527:	e8 53 a9 01 00       	call   c0026e7f <__ltdf2>
c000c52c:	83 c4 10             	add    esp,0x10
c000c52f:	85 c0                	test   eax,eax
c000c531:	79 20                	jns    c000c553 <sinc_hex_vari_process+0x66f>
c000c533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 eb 99 01 00       	call   c0025f33 <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c56c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c570:	e8 0f a0 01 00       	call   c0026584 <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 a9 aa 01 00       	call   c0027030 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c58e:	83 c4 10             	add    esp,0x10
c000c591:	01 f8                	add    eax,edi
c000c593:	99                   	cdq    
c000c594:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c597:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c59a:	e9 fd fb ff ff       	jmp    c000c19c <sinc_hex_vari_process+0x2b8>
c000c59f:	83 c4 4c             	add    esp,0x4c
c000c5a2:	89 d0                	mov    eax,edx
c000c5a4:	5b                   	pop    ebx
c000c5a5:	5e                   	pop    esi
c000c5a6:	5f                   	pop    edi
c000c5a7:	5d                   	pop    ebp
c000c5a8:	c3                   	ret    

c000c5a9 <sinc_quad_vari_process>:
c000c5a9:	55                   	push   ebp
c000c5aa:	ba 05 00 00 00       	mov    edx,0x5
c000c5af:	57                   	push   edi
c000c5b0:	56                   	push   esi
c000c5b1:	53                   	push   ebx
c000c5b2:	83 ec 4c             	sub    esp,0x4c
c000c5b5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5b9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5bd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5c0:	85 db                	test   ebx,ebx
c000c5c2:	0f 84 9c 06 00 00    	je     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c5c8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5ce:	0f af c7             	imul   eax,edi
c000c5d1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5d4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5d7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5e5:	0f af c7             	imul   eax,edi
c000c5e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5eb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f9:	68 00 00 70 3f       	push   0x3f700000
c000c5fe:	6a 00                	push   0x0
c000c600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c608:	e8 72 a8 01 00       	call   c0026e7f <__ltdf2>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	ba 16 00 00 00       	mov    edx,0x16
c000c615:	85 c0                	test   eax,eax
c000c617:	0f 88 47 06 00 00    	js     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c61d:	68 00 00 70 40       	push   0x40700000
c000c622:	6a 00                	push   0x0
c000c624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62c:	e8 30 a8 01 00       	call   c0026e61 <__gtdf2>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	ba 16 00 00 00       	mov    edx,0x16
c000c639:	85 c0                	test   eax,eax
c000c63b:	0f 8f 23 06 00 00    	jg     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c641:	83 ec 0c             	sub    esp,0xc
c000c644:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c647:	e8 c7 a5 01 00       	call   c0026c13 <__floatsidf>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c653:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c657:	68 00 00 00 40       	push   0x40000000
c000c65c:	6a 00                	push   0x0
c000c65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c666:	e8 c8 98 01 00       	call   c0025f33 <__adddf3>
c000c66b:	59                   	pop    ecx
c000c66c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c670:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c674:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c677:	e8 97 a5 01 00       	call   c0026c13 <__floatsidf>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c683:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c687:	52                   	push   edx
c000c688:	50                   	push   eax
c000c689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c691:	e8 fe a1 01 00       	call   c0026894 <__divdf3>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c69d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6a4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bf:	e8 9d a7 01 00       	call   c0026e61 <__gtdf2>
c000c6c4:	83 c4 10             	add    esp,0x10
c000c6c7:	85 c0                	test   eax,eax
c000c6c9:	7e 2d                	jle    c000c6f8 <sinc_quad_vari_process+0x14f>
c000c6cb:	68 00 00 f0 3f       	push   0x3ff00000
c000c6d0:	6a 00                	push   0x0
c000c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	e8 a0 a7 01 00       	call   c0026e7f <__ltdf2>
c000c6df:	83 c4 10             	add    esp,0x10
c000c6e2:	85 c0                	test   eax,eax
c000c6e4:	79 4d                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6f6:	eb 1b                	jmp    c000c713 <sinc_quad_vari_process+0x16a>
c000c6f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6fd:	6a 00                	push   0x0
c000c6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c707:	e8 73 a7 01 00       	call   c0026e7f <__ltdf2>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	85 c0                	test   eax,eax
c000c711:	79 20                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c713:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c717:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c71b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c723:	e8 6c a1 01 00       	call   c0026894 <__divdf3>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	50                   	push   eax
c000c734:	50                   	push   eax
c000c735:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c739:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c73d:	e8 ee a8 01 00       	call   c0027030 <lrint>
c000c742:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c745:	40                   	inc    eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	0f af c7             	imul   eax,edi
c000c74d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c754:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c758:	58                   	pop    eax
c000c759:	5a                   	pop    edx
c000c75a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c762:	e8 c9 a8 01 00       	call   c0027030 <lrint>
c000c767:	83 ec 0c             	sub    esp,0xc
c000c76a:	50                   	push   eax
c000c76b:	e8 a3 a4 01 00       	call   c0026c13 <__floatsidf>
c000c770:	83 c4 10             	add    esp,0x10
c000c773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c77b:	52                   	push   edx
c000c77c:	50                   	push   eax
c000c77d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c781:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c785:	e8 fa 9d 01 00       	call   c0026584 <__subdf3>
c000c78a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	83 c4 20             	add    esp,0x20
c000c795:	6a 00                	push   0x0
c000c797:	6a 00                	push   0x0
c000c799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a1:	e8 d9 a6 01 00       	call   c0026e7f <__ltdf2>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	85 c0                	test   eax,eax
c000c7ab:	79 1f                	jns    c000c7cc <sinc_quad_vari_process+0x223>
c000c7ad:	68 00 00 f0 3f       	push   0x3ff00000
c000c7b2:	6a 00                	push   0x0
c000c7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7bc:	e8 72 97 01 00       	call   c0025f33 <__adddf3>
c000c7c1:	83 c4 10             	add    esp,0x10
c000c7c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7cc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7cf:	83 ec 10             	sub    esp,0x10
c000c7d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e9:	e8 96 9d 01 00       	call   c0026584 <__subdf3>
c000c7ee:	83 c4 18             	add    esp,0x18
c000c7f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	e8 30 a8 01 00       	call   c0027030 <lrint>
c000c800:	0f af f8             	imul   edi,eax
c000c803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c807:	01 f8                	add    eax,edi
c000c809:	99                   	cdq    
c000c80a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c810:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c818:	68 00 00 f0 3f       	push   0x3ff00000
c000c81d:	6a 00                	push   0x0
c000c81f:	e8 70 a0 01 00       	call   c0026894 <__divdf3>
c000c824:	83 c4 10             	add    esp,0x10
c000c827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c834:	68 23 42 92 0c       	push   0xc924223
c000c839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c841:	e8 ed 96 01 00       	call   c0025f33 <__adddf3>
c000c846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c84e:	83 c4 20             	add    esp,0x20
c000c851:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c859:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c861:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c864:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c867:	7d 50                	jge    c000c8b9 <sinc_quad_vari_process+0x310>
c000c869:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c86c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c86f:	01 c8                	add    eax,ecx
c000c871:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c874:	99                   	cdq    
c000c875:	f7 f9                	idiv   ecx
c000c877:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c87b:	7d 0c                	jge    c000c889 <sinc_quad_vari_process+0x2e0>
c000c87d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c880:	85 ff                	test   edi,edi
c000c882:	79 6c                	jns    c000c8f0 <sinc_quad_vari_process+0x347>
c000c884:	e9 e7 00 00 00       	jmp    c000c970 <sinc_quad_vari_process+0x3c7>
c000c889:	50                   	push   eax
c000c88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c88e:	56                   	push   esi
c000c88f:	53                   	push   ebx
c000c890:	e8 11 ee ff ff       	call   c000b6a6 <prepare_data>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	89 c2                	mov    edx,eax
c000c89a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c89d:	85 c0                	test   eax,eax
c000c89f:	0f 85 bf 03 00 00    	jne    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8a5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8ab:	01 c8                	add    eax,ecx
c000c8ad:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8b0:	99                   	cdq    
c000c8b1:	f7 f9                	idiv   ecx
c000c8b3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b7:	7c c4                	jl     c000c87d <sinc_quad_vari_process+0x2d4>
c000c8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8c1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8c4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8d2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8d8:	99                   	cdq    
c000c8d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8dc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8e2:	99                   	cdq    
c000c8e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8e6:	31 d2                	xor    edx,edx
c000c8e8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8eb:	e9 74 03 00 00       	jmp    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8f6:	e8 18 a3 01 00       	call   c0026c13 <__floatsidf>
c000c8fb:	83 c4 10             	add    esp,0x10
c000c8fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c902:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c906:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c916:	e8 18 96 01 00       	call   c0025f33 <__adddf3>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c922:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c936:	e8 f8 95 01 00       	call   c0025f33 <__adddf3>
c000c93b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c93e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c942:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c946:	e8 c8 a2 01 00       	call   c0026c13 <__floatsidf>
c000c94b:	83 c4 10             	add    esp,0x10
c000c94e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c952:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c956:	52                   	push   edx
c000c957:	50                   	push   eax
c000c958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c960:	e8 18 a5 01 00       	call   c0026e7d <__gedf2>
c000c965:	83 c4 10             	add    esp,0x10
c000c968:	85 c0                	test   eax,eax
c000c96a:	0f 89 49 ff ff ff    	jns    c000c8b9 <sinc_quad_vari_process+0x310>
c000c970:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c974:	0f 8e ef 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c97a:	83 ec 10             	sub    esp,0x10
c000c97d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c980:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c983:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c986:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c989:	e8 f6 9b 01 00       	call   c0026584 <__subdf3>
c000c98e:	83 c4 18             	add    esp,0x18
c000c991:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c995:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c999:	52                   	push   edx
c000c99a:	50                   	push   eax
c000c99b:	e8 70 a6 01 00       	call   c0027010 <fabs>
c000c9a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9a8:	83 c4 10             	add    esp,0x10
c000c9ab:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9b0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	e8 9f a4 01 00       	call   c0026e61 <__gtdf2>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	0f 8e 9c 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c9cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9e0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9e3:	e8 9c 9b 01 00       	call   c0026584 <__subdf3>
c000c9e8:	59                   	pop    ecx
c000c9e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9ed:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9f4:	e8 1a a2 01 00       	call   c0026c13 <__floatsidf>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca04:	52                   	push   edx
c000ca05:	50                   	push   eax
c000ca06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0e:	e8 9d 9b 01 00       	call   c00265b0 <__muldf3>
c000ca13:	5f                   	pop    edi
c000ca14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca18:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca1c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca1f:	e8 ef a1 01 00       	call   c0026c13 <__floatsidf>
c000ca24:	83 c4 10             	add    esp,0x10
c000ca27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca2f:	52                   	push   edx
c000ca30:	50                   	push   eax
c000ca31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca39:	e8 56 9e 01 00       	call   c0026894 <__divdf3>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca59:	e8 d5 94 01 00       	call   c0025f33 <__adddf3>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca6f:	e8 9f a1 01 00       	call   c0026c13 <__floatsidf>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8f:	e8 eb a3 01 00       	call   c0026e7f <__ltdf2>
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	85 c0                	test   eax,eax
c000ca99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000caa1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000caa5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000caa9:	78 10                	js     c000cabb <sinc_quad_vari_process+0x512>
c000caab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cab3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cabb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cabf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cacb:	e8 e0 9a 01 00       	call   c00265b0 <__muldf3>
c000cad0:	59                   	pop    ecx
c000cad1:	5f                   	pop    edi
c000cad2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cae2:	e8 98 eb ff ff       	call   c000b67f <double_to_fp>
c000cae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caeb:	89 c7                	mov    edi,eax
c000caed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf9:	e8 b2 9a 01 00       	call   c00265b0 <__muldf3>
c000cafe:	83 c4 18             	add    esp,0x18
c000cb01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb09:	52                   	push   edx
c000cb0a:	50                   	push   eax
c000cb0b:	e8 6f eb ff ff       	call   c000b67f <double_to_fp>
c000cb10:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb13:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb17:	83 c4 0c             	add    esp,0xc
c000cb1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb1d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb20:	50                   	push   eax
c000cb21:	50                   	push   eax
c000cb22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb25:	e8 e9 a0 01 00       	call   c0026c13 <__floatsidf>
c000cb2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb42:	e8 4d 9d 01 00       	call   c0026894 <__divdf3>
c000cb47:	83 c4 18             	add    esp,0x18
c000cb4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb52:	52                   	push   edx
c000cb53:	89 fa                	mov    edx,edi
c000cb55:	50                   	push   eax
c000cb56:	89 d8                	mov    eax,ebx
c000cb58:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb5c:	e8 a5 d1 ff ff       	call   c0009d06 <calc_output_quad>
c000cb61:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb75:	e8 1a 9d 01 00       	call   c0026894 <__divdf3>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb95:	e8 99 93 01 00       	call   c0025f33 <__adddf3>
c000cb9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb9e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cba2:	83 c4 18             	add    esp,0x18
c000cba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbad:	e8 7e a4 01 00       	call   c0027030 <lrint>
c000cbb2:	83 ec 0c             	sub    esp,0xc
c000cbb5:	50                   	push   eax
c000cbb6:	e8 58 a0 01 00       	call   c0026c13 <__floatsidf>
c000cbbb:	83 c4 10             	add    esp,0x10
c000cbbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc6:	52                   	push   edx
c000cbc7:	50                   	push   eax
c000cbc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbd0:	e8 af 99 01 00       	call   c0026584 <__subdf3>
c000cbd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbdd:	83 c4 20             	add    esp,0x20
c000cbe0:	6a 00                	push   0x0
c000cbe2:	6a 00                	push   0x0
c000cbe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbec:	e8 8e a2 01 00       	call   c0026e7f <__ltdf2>
c000cbf1:	83 c4 10             	add    esp,0x10
c000cbf4:	85 c0                	test   eax,eax
c000cbf6:	79 20                	jns    c000cc18 <sinc_quad_vari_process+0x66f>
c000cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 26 93 01 00       	call   c0025f33 <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc35:	e8 4a 99 01 00       	call   c0026584 <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 e4 a3 01 00       	call   c0027030 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	01 f8                	add    eax,edi
c000cc58:	99                   	cdq    
c000cc59:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc5c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5f:	e9 fd fb ff ff       	jmp    c000c861 <sinc_quad_vari_process+0x2b8>
c000cc64:	83 c4 4c             	add    esp,0x4c
c000cc67:	89 d0                	mov    eax,edx
c000cc69:	5b                   	pop    ebx
c000cc6a:	5e                   	pop    esi
c000cc6b:	5f                   	pop    edi
c000cc6c:	5d                   	pop    ebp
c000cc6d:	c3                   	ret    

c000cc6e <sinc_stereo_vari_process>:
c000cc6e:	55                   	push   ebp
c000cc6f:	ba 05 00 00 00       	mov    edx,0x5
c000cc74:	57                   	push   edi
c000cc75:	56                   	push   esi
c000cc76:	53                   	push   ebx
c000cc77:	83 ec 4c             	sub    esp,0x4c
c000cc7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc85:	85 db                	test   ebx,ebx
c000cc87:	0f 84 9c 06 00 00    	je     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cc8d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc93:	0f af c7             	imul   eax,edi
c000cc96:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc99:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cca3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccaa:	0f af c7             	imul   eax,edi
c000ccad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ccb0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbe:	68 00 00 70 3f       	push   0x3f700000
c000ccc3:	6a 00                	push   0x0
c000ccc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 ad a1 01 00       	call   c0026e7f <__ltdf2>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	ba 16 00 00 00       	mov    edx,0x16
c000ccda:	85 c0                	test   eax,eax
c000ccdc:	0f 88 47 06 00 00    	js     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cce2:	68 00 00 70 40       	push   0x40700000
c000cce7:	6a 00                	push   0x0
c000cce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf1:	e8 6b a1 01 00       	call   c0026e61 <__gtdf2>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	ba 16 00 00 00       	mov    edx,0x16
c000ccfe:	85 c0                	test   eax,eax
c000cd00:	0f 8f 23 06 00 00    	jg     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd0c:	e8 02 9f 01 00       	call   c0026c13 <__floatsidf>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd1c:	68 00 00 00 40       	push   0x40000000
c000cd21:	6a 00                	push   0x0
c000cd23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd2b:	e8 03 92 01 00       	call   c0025f33 <__adddf3>
c000cd30:	59                   	pop    ecx
c000cd31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd39:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3c:	e8 d2 9e 01 00       	call   c0026c13 <__floatsidf>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd4c:	52                   	push   edx
c000cd4d:	50                   	push   eax
c000cd4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd56:	e8 39 9b 01 00       	call   c0026894 <__divdf3>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd66:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd69:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd84:	e8 d8 a0 01 00       	call   c0026e61 <__gtdf2>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	85 c0                	test   eax,eax
c000cd8e:	7e 2d                	jle    c000cdbd <sinc_stereo_vari_process+0x14f>
c000cd90:	68 00 00 f0 3f       	push   0x3ff00000
c000cd95:	6a 00                	push   0x0
c000cd97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	e8 db a0 01 00       	call   c0026e7f <__ltdf2>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	85 c0                	test   eax,eax
c000cda9:	79 4d                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdbb:	eb 1b                	jmp    c000cdd8 <sinc_stereo_vari_process+0x16a>
c000cdbd:	68 00 00 f0 3f       	push   0x3ff00000
c000cdc2:	6a 00                	push   0x0
c000cdc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdcc:	e8 ae a0 01 00       	call   c0026e7f <__ltdf2>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	79 20                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cde0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde8:	e8 a7 9a 01 00       	call   c0026894 <__divdf3>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	50                   	push   eax
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce02:	e8 29 a2 01 00       	call   c0027030 <lrint>
c000ce07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce0a:	40                   	inc    eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	0f af c7             	imul   eax,edi
c000ce12:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce1d:	58                   	pop    eax
c000ce1e:	5a                   	pop    edx
c000ce1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce27:	e8 04 a2 01 00       	call   c0027030 <lrint>
c000ce2c:	83 ec 0c             	sub    esp,0xc
c000ce2f:	50                   	push   eax
c000ce30:	e8 de 9d 01 00       	call   c0026c13 <__floatsidf>
c000ce35:	83 c4 10             	add    esp,0x10
c000ce38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce40:	52                   	push   edx
c000ce41:	50                   	push   eax
c000ce42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce4a:	e8 35 97 01 00       	call   c0026584 <__subdf3>
c000ce4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	83 c4 20             	add    esp,0x20
c000ce5a:	6a 00                	push   0x0
c000ce5c:	6a 00                	push   0x0
c000ce5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce66:	e8 14 a0 01 00       	call   c0026e7f <__ltdf2>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	85 c0                	test   eax,eax
c000ce70:	79 1f                	jns    c000ce91 <sinc_stereo_vari_process+0x223>
c000ce72:	68 00 00 f0 3f       	push   0x3ff00000
c000ce77:	6a 00                	push   0x0
c000ce79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce81:	e8 ad 90 01 00       	call   c0025f33 <__adddf3>
c000ce86:	83 c4 10             	add    esp,0x10
c000ce89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce91:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce94:	83 ec 10             	sub    esp,0x10
c000ce97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce9b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceae:	e8 d1 96 01 00       	call   c0026584 <__subdf3>
c000ceb3:	83 c4 18             	add    esp,0x18
c000ceb6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cebe:	52                   	push   edx
c000cebf:	50                   	push   eax
c000cec0:	e8 6b a1 01 00       	call   c0027030 <lrint>
c000cec5:	0f af f8             	imul   edi,eax
c000cec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cecc:	01 f8                	add    eax,edi
c000cece:	99                   	cdq    
c000cecf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ced9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cedd:	68 00 00 f0 3f       	push   0x3ff00000
c000cee2:	6a 00                	push   0x0
c000cee4:	e8 ab 99 01 00       	call   c0026894 <__divdf3>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cef0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cef4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cef9:	68 23 42 92 0c       	push   0xc924223
c000cefe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf06:	e8 28 90 01 00       	call   c0025f33 <__adddf3>
c000cf0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf0f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf1e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf29:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf2c:	7d 50                	jge    c000cf7e <sinc_stereo_vari_process+0x310>
c000cf2e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf31:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf34:	01 c8                	add    eax,ecx
c000cf36:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf39:	99                   	cdq    
c000cf3a:	f7 f9                	idiv   ecx
c000cf3c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf40:	7d 0c                	jge    c000cf4e <sinc_stereo_vari_process+0x2e0>
c000cf42:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf45:	85 ff                	test   edi,edi
c000cf47:	79 6c                	jns    c000cfb5 <sinc_stereo_vari_process+0x347>
c000cf49:	e9 e7 00 00 00       	jmp    c000d035 <sinc_stereo_vari_process+0x3c7>
c000cf4e:	50                   	push   eax
c000cf4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf53:	56                   	push   esi
c000cf54:	53                   	push   ebx
c000cf55:	e8 4c e7 ff ff       	call   c000b6a6 <prepare_data>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	89 c2                	mov    edx,eax
c000cf5f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf62:	85 c0                	test   eax,eax
c000cf64:	0f 85 bf 03 00 00    	jne    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cf6a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf70:	01 c8                	add    eax,ecx
c000cf72:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf75:	99                   	cdq    
c000cf76:	f7 f9                	idiv   ecx
c000cf78:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf7c:	7c c4                	jl     c000cf42 <sinc_stereo_vari_process+0x2d4>
c000cf7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf86:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf94:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf97:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf9d:	99                   	cdq    
c000cf9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfa1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfa4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfa7:	99                   	cdq    
c000cfa8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfab:	31 d2                	xor    edx,edx
c000cfad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfb0:	e9 74 03 00 00       	jmp    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cfb5:	83 ec 0c             	sub    esp,0xc
c000cfb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfbb:	e8 53 9c 01 00       	call   c0026c13 <__floatsidf>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfdb:	e8 53 8f 01 00       	call   c0025f33 <__adddf3>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cffb:	e8 33 8f 01 00       	call   c0025f33 <__adddf3>
c000d000:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d003:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d007:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d00b:	e8 03 9c 01 00       	call   c0026c13 <__floatsidf>
c000d010:	83 c4 10             	add    esp,0x10
c000d013:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d017:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d01b:	52                   	push   edx
c000d01c:	50                   	push   eax
c000d01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d025:	e8 53 9e 01 00       	call   c0026e7d <__gedf2>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	85 c0                	test   eax,eax
c000d02f:	0f 89 49 ff ff ff    	jns    c000cf7e <sinc_stereo_vari_process+0x310>
c000d035:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d039:	0f 8e ef 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d03f:	83 ec 10             	sub    esp,0x10
c000d042:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d045:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d048:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d04b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d04e:	e8 31 95 01 00       	call   c0026584 <__subdf3>
c000d053:	83 c4 18             	add    esp,0x18
c000d056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d05a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05e:	52                   	push   edx
c000d05f:	50                   	push   eax
c000d060:	e8 ab 9f 01 00       	call   c0027010 <fabs>
c000d065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d069:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d06d:	83 c4 10             	add    esp,0x10
c000d070:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d075:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d07a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d07e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d082:	e8 da 9d 01 00       	call   c0026e61 <__gtdf2>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	85 c0                	test   eax,eax
c000d08c:	0f 8e 9c 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d092:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d095:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d09c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0a0:	52                   	push   edx
c000d0a1:	50                   	push   eax
c000d0a2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0a5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0a8:	e8 d7 94 01 00       	call   c0026584 <__subdf3>
c000d0ad:	59                   	pop    ecx
c000d0ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0b2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0b6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0b9:	e8 55 9b 01 00       	call   c0026c13 <__floatsidf>
c000d0be:	83 c4 10             	add    esp,0x10
c000d0c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0c9:	52                   	push   edx
c000d0ca:	50                   	push   eax
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d3:	e8 d8 94 01 00       	call   c00265b0 <__muldf3>
c000d0d8:	5f                   	pop    edi
c000d0d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0dd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0e1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0e4:	e8 2a 9b 01 00       	call   c0026c13 <__floatsidf>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0f4:	52                   	push   edx
c000d0f5:	50                   	push   eax
c000d0f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fe:	e8 91 97 01 00       	call   c0026894 <__divdf3>
c000d103:	83 c4 10             	add    esp,0x10
c000d106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11e:	e8 10 8e 01 00       	call   c0025f33 <__adddf3>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d12e:	83 ec 0c             	sub    esp,0xc
c000d131:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d134:	e8 da 9a 01 00       	call   c0026c13 <__floatsidf>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d154:	e8 26 9d 01 00       	call   c0026e7f <__ltdf2>
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	85 c0                	test   eax,eax
c000d15e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d162:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d166:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d16a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d16e:	78 10                	js     c000d180 <sinc_stereo_vari_process+0x512>
c000d170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d178:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d17c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d188:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d190:	e8 1b 94 01 00       	call   c00265b0 <__muldf3>
c000d195:	59                   	pop    ecx
c000d196:	5f                   	pop    edi
c000d197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a7:	e8 d3 e4 ff ff       	call   c000b67f <double_to_fp>
c000d1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b0:	89 c7                	mov    edi,eax
c000d1b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1be:	e8 ed 93 01 00       	call   c00265b0 <__muldf3>
c000d1c3:	83 c4 18             	add    esp,0x18
c000d1c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1ce:	52                   	push   edx
c000d1cf:	50                   	push   eax
c000d1d0:	e8 aa e4 ff ff       	call   c000b67f <double_to_fp>
c000d1d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1dc:	83 c4 0c             	add    esp,0xc
c000d1df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1e2:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1e5:	50                   	push   eax
c000d1e6:	50                   	push   eax
c000d1e7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1ea:	e8 24 9a 01 00       	call   c0026c13 <__floatsidf>
c000d1ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d203:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d207:	e8 88 96 01 00       	call   c0026894 <__divdf3>
c000d20c:	83 c4 18             	add    esp,0x18
c000d20f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d213:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d217:	52                   	push   edx
c000d218:	89 fa                	mov    edx,edi
c000d21a:	50                   	push   eax
c000d21b:	89 d8                	mov    eax,ebx
c000d21d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d221:	e8 02 c7 ff ff       	call   c0009928 <calc_output_stereo>
c000d226:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d22a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23a:	e8 55 96 01 00       	call   c0026894 <__divdf3>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d246:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d256:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d25a:	e8 d4 8c 01 00       	call   c0025f33 <__adddf3>
c000d25f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d263:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d267:	83 c4 18             	add    esp,0x18
c000d26a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d272:	e8 b9 9d 01 00       	call   c0027030 <lrint>
c000d277:	83 ec 0c             	sub    esp,0xc
c000d27a:	50                   	push   eax
c000d27b:	e8 93 99 01 00       	call   c0026c13 <__floatsidf>
c000d280:	83 c4 10             	add    esp,0x10
c000d283:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28b:	52                   	push   edx
c000d28c:	50                   	push   eax
c000d28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d291:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d295:	e8 ea 92 01 00       	call   c0026584 <__subdf3>
c000d29a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a2:	83 c4 20             	add    esp,0x20
c000d2a5:	6a 00                	push   0x0
c000d2a7:	6a 00                	push   0x0
c000d2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b1:	e8 c9 9b 01 00       	call   c0026e7f <__ltdf2>
c000d2b6:	83 c4 10             	add    esp,0x10
c000d2b9:	85 c0                	test   eax,eax
c000d2bb:	79 20                	jns    c000d2dd <sinc_stereo_vari_process+0x66f>
c000d2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 61 8c 01 00       	call   c0025f33 <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2fa:	e8 85 92 01 00       	call   c0026584 <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d306:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 1f 9d 01 00       	call   c0027030 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	01 f8                	add    eax,edi
c000d31d:	99                   	cdq    
c000d31e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d321:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d324:	e9 fd fb ff ff       	jmp    c000cf26 <sinc_stereo_vari_process+0x2b8>
c000d329:	83 c4 4c             	add    esp,0x4c
c000d32c:	89 d0                	mov    eax,edx
c000d32e:	5b                   	pop    ebx
c000d32f:	5e                   	pop    esi
c000d330:	5f                   	pop    edi
c000d331:	5d                   	pop    ebp
c000d332:	c3                   	ret    

c000d333 <sinc_mono_vari_process>:
c000d333:	55                   	push   ebp
c000d334:	ba 05 00 00 00       	mov    edx,0x5
c000d339:	57                   	push   edi
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 4c             	sub    esp,0x4c
c000d33f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d343:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d347:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d34a:	85 db                	test   ebx,ebx
c000d34c:	0f 84 c1 06 00 00    	je     c000da13 <sinc_mono_vari_process+0x6e0>
c000d352:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d355:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d358:	0f af c7             	imul   eax,edi
c000d35b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d35e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d361:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d368:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d36f:	0f af c7             	imul   eax,edi
c000d372:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d375:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d379:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d37c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d37e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d382:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d386:	68 00 00 70 3f       	push   0x3f700000
c000d38b:	6a 00                	push   0x0
c000d38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d395:	e8 e5 9a 01 00       	call   c0026e7f <__ltdf2>
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	ba 16 00 00 00       	mov    edx,0x16
c000d3a2:	85 c0                	test   eax,eax
c000d3a4:	0f 88 69 06 00 00    	js     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3aa:	68 00 00 70 40       	push   0x40700000
c000d3af:	6a 00                	push   0x0
c000d3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b9:	e8 a3 9a 01 00       	call   c0026e61 <__gtdf2>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	ba 16 00 00 00       	mov    edx,0x16
c000d3c6:	85 c0                	test   eax,eax
c000d3c8:	0f 8f 45 06 00 00    	jg     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3ce:	83 ec 0c             	sub    esp,0xc
c000d3d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3d4:	e8 3a 98 01 00       	call   c0026c13 <__floatsidf>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3e4:	68 00 00 00 40       	push   0x40000000
c000d3e9:	6a 00                	push   0x0
c000d3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3f3:	e8 3b 8b 01 00       	call   c0025f33 <__adddf3>
c000d3f8:	59                   	pop    ecx
c000d3f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d401:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d404:	e8 0a 98 01 00       	call   c0026c13 <__floatsidf>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d410:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d414:	52                   	push   edx
c000d415:	50                   	push   eax
c000d416:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41e:	e8 71 94 01 00       	call   c0026894 <__divdf3>
c000d423:	83 c4 10             	add    esp,0x10
c000d426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d42e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d431:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44c:	e8 10 9a 01 00       	call   c0026e61 <__gtdf2>
c000d451:	83 c4 10             	add    esp,0x10
c000d454:	85 c0                	test   eax,eax
c000d456:	7e 2d                	jle    c000d485 <sinc_mono_vari_process+0x152>
c000d458:	68 00 00 f0 3f       	push   0x3ff00000
c000d45d:	6a 00                	push   0x0
c000d45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d467:	e8 13 9a 01 00       	call   c0026e7f <__ltdf2>
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	85 c0                	test   eax,eax
c000d471:	79 4d                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d477:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d483:	eb 1b                	jmp    c000d4a0 <sinc_mono_vari_process+0x16d>
c000d485:	68 00 00 f0 3f       	push   0x3ff00000
c000d48a:	6a 00                	push   0x0
c000d48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d494:	e8 e6 99 01 00       	call   c0026e7f <__ltdf2>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	85 c0                	test   eax,eax
c000d49e:	79 20                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d4a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b0:	e8 df 93 01 00       	call   c0026894 <__divdf3>
c000d4b5:	83 c4 10             	add    esp,0x10
c000d4b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4c0:	50                   	push   eax
c000d4c1:	50                   	push   eax
c000d4c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ca:	e8 61 9b 01 00       	call   c0027030 <lrint>
c000d4cf:	40                   	inc    eax
c000d4d0:	0f af c7             	imul   eax,edi
c000d4d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4d7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4db:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e9:	58                   	pop    eax
c000d4ea:	5a                   	pop    edx
c000d4eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f3:	e8 38 9b 01 00       	call   c0027030 <lrint>
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	50                   	push   eax
c000d4fc:	e8 12 97 01 00       	call   c0026c13 <__floatsidf>
c000d501:	83 c4 10             	add    esp,0x10
c000d504:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d508:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d512:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d516:	e8 69 90 01 00       	call   c0026584 <__subdf3>
c000d51b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d51f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d523:	83 c4 20             	add    esp,0x20
c000d526:	6a 00                	push   0x0
c000d528:	6a 00                	push   0x0
c000d52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d532:	e8 48 99 01 00       	call   c0026e7f <__ltdf2>
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	85 c0                	test   eax,eax
c000d53c:	79 1f                	jns    c000d55d <sinc_mono_vari_process+0x22a>
c000d53e:	68 00 00 f0 3f       	push   0x3ff00000
c000d543:	6a 00                	push   0x0
c000d545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d54d:	e8 e1 89 01 00       	call   c0025f33 <__adddf3>
c000d552:	83 c4 10             	add    esp,0x10
c000d555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d559:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d55d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d560:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d563:	83 ec 10             	sub    esp,0x10
c000d566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d572:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d576:	e8 09 90 01 00       	call   c0026584 <__subdf3>
c000d57b:	83 c4 18             	add    esp,0x18
c000d57e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d582:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d586:	52                   	push   edx
c000d587:	50                   	push   eax
c000d588:	e8 a3 9a 01 00       	call   c0027030 <lrint>
c000d58d:	0f af f8             	imul   edi,eax
c000d590:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d593:	31 ff                	xor    edi,edi
c000d595:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d59a:	99                   	cdq    
c000d59b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d59e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a9:	55                   	push   ebp
c000d5aa:	57                   	push   edi
c000d5ab:	e8 e4 92 01 00       	call   c0026894 <__divdf3>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5bb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5c0:	68 23 42 92 0c       	push   0xc924223
c000d5c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5cd:	e8 61 89 01 00       	call   c0025f33 <__adddf3>
c000d5d2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5d6:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5da:	83 c4 20             	add    esp,0x20
c000d5dd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5e1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5e8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5eb:	7d 54                	jge    c000d641 <sinc_mono_vari_process+0x30e>
c000d5ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5f0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5f3:	01 c8                	add    eax,ecx
c000d5f5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5f8:	99                   	cdq    
c000d5f9:	f7 f9                	idiv   ecx
c000d5fb:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5ff:	7d 0c                	jge    c000d60d <sinc_mono_vari_process+0x2da>
c000d601:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d604:	85 ff                	test   edi,edi
c000d606:	79 73                	jns    c000d67b <sinc_mono_vari_process+0x348>
c000d608:	e9 ee 00 00 00       	jmp    c000d6fb <sinc_mono_vari_process+0x3c8>
c000d60d:	50                   	push   eax
c000d60e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d612:	56                   	push   esi
c000d613:	53                   	push   ebx
c000d614:	e8 8d e0 ff ff       	call   c000b6a6 <prepare_data>
c000d619:	89 c2                	mov    edx,eax
c000d61b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d625:	85 d2                	test   edx,edx
c000d627:	0f 85 e6 03 00 00    	jne    c000da13 <sinc_mono_vari_process+0x6e0>
c000d62d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d630:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d633:	01 c8                	add    eax,ecx
c000d635:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d638:	99                   	cdq    
c000d639:	f7 f9                	idiv   ecx
c000d63b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d63f:	7c c0                	jl     c000d601 <sinc_mono_vari_process+0x2ce>
c000d641:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d64d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d650:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d65b:	89 01                	mov    DWORD PTR [ecx],eax
c000d65d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d660:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d663:	99                   	cdq    
c000d664:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d66a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d66d:	99                   	cdq    
c000d66e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d671:	31 d2                	xor    edx,edx
c000d673:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d676:	e9 98 03 00 00       	jmp    c000da13 <sinc_mono_vari_process+0x6e0>
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d681:	e8 8d 95 01 00       	call   c0026c13 <__floatsidf>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d68d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d695:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d69d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6a1:	e8 8d 88 01 00       	call   c0025f33 <__adddf3>
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6c1:	e8 6d 88 01 00       	call   c0025f33 <__adddf3>
c000d6c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6cd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6d1:	e8 3d 95 01 00       	call   c0026c13 <__floatsidf>
c000d6d6:	83 c4 10             	add    esp,0x10
c000d6d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6e1:	52                   	push   edx
c000d6e2:	50                   	push   eax
c000d6e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6eb:	e8 71 97 01 00       	call   c0026e61 <__gtdf2>
c000d6f0:	83 c4 10             	add    esp,0x10
c000d6f3:	85 c0                	test   eax,eax
c000d6f5:	0f 8f 46 ff ff ff    	jg     c000d641 <sinc_mono_vari_process+0x30e>
c000d6fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6ff:	0f 8e f5 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d705:	83 ec 10             	sub    esp,0x10
c000d708:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d70b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d70e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d712:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d715:	ff 30                	push   DWORD PTR [eax]
c000d717:	e8 68 8e 01 00       	call   c0026584 <__subdf3>
c000d71c:	83 c4 18             	add    esp,0x18
c000d71f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d723:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d727:	52                   	push   edx
c000d728:	50                   	push   eax
c000d729:	e8 e2 98 01 00       	call   c0027010 <fabs>
c000d72e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d732:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d73e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d743:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d747:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d74b:	e8 11 97 01 00       	call   c0026e61 <__gtdf2>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	85 c0                	test   eax,eax
c000d755:	0f 8e 9f 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d75b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d75f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d762:	8b 00                	mov    eax,DWORD PTR [eax]
c000d764:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d768:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d76c:	52                   	push   edx
c000d76d:	50                   	push   eax
c000d76e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d771:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d774:	e8 0b 8e 01 00       	call   c0026584 <__subdf3>
c000d779:	5f                   	pop    edi
c000d77a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d77e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d782:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d785:	e8 89 94 01 00       	call   c0026c13 <__floatsidf>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d795:	52                   	push   edx
c000d796:	50                   	push   eax
c000d797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79f:	e8 0c 8e 01 00       	call   c00265b0 <__muldf3>
c000d7a4:	5d                   	pop    ebp
c000d7a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7ad:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7b0:	e8 5e 94 01 00       	call   c0026c13 <__floatsidf>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7c0:	52                   	push   edx
c000d7c1:	50                   	push   eax
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	e8 c5 90 01 00       	call   c0026894 <__divdf3>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 44 87 01 00       	call   c0025f33 <__adddf3>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d800:	e8 0e 94 01 00       	call   c0026c13 <__floatsidf>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d80c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d820:	e8 5a 96 01 00       	call   c0026e7f <__ltdf2>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	85 c0                	test   eax,eax
c000d82a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d82e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d832:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d836:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d83a:	78 10                	js     c000d84c <sinc_mono_vari_process+0x519>
c000d83c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d840:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d848:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d854:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d858:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d85c:	e8 4f 8d 01 00       	call   c00265b0 <__muldf3>
c000d861:	59                   	pop    ecx
c000d862:	5f                   	pop    edi
c000d863:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d867:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d86b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d86f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d873:	e8 07 de ff ff       	call   c000b67f <double_to_fp>
c000d878:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d87c:	89 c7                	mov    edi,eax
c000d87e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d882:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d886:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d88a:	e8 21 8d 01 00       	call   c00265b0 <__muldf3>
c000d88f:	83 c4 18             	add    esp,0x18
c000d892:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d896:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d89a:	52                   	push   edx
c000d89b:	50                   	push   eax
c000d89c:	e8 de dd ff ff       	call   c000b67f <double_to_fp>
c000d8a1:	83 ec 0c             	sub    esp,0xc
c000d8a4:	89 c5                	mov    ebp,eax
c000d8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8a9:	e8 65 93 01 00       	call   c0026c13 <__floatsidf>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8b5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8b9:	52                   	push   edx
c000d8ba:	50                   	push   eax
c000d8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8c3:	e8 cc 8f 01 00       	call   c0026894 <__divdf3>
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	89 e9                	mov    ecx,ebp
c000d8cd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8d1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8d5:	89 d8                	mov    eax,ebx
c000d8d7:	89 fa                	mov    edx,edi
c000d8d9:	e8 ee bd ff ff       	call   c00096cc <calc_output_single>
c000d8de:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8e1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8ec:	52                   	push   edx
c000d8ed:	50                   	push   eax
c000d8ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f6:	e8 b5 8c 01 00       	call   c00265b0 <__muldf3>
c000d8fb:	59                   	pop    ecx
c000d8fc:	59                   	pop    ecx
c000d8fd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d901:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d905:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d909:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d90d:	e8 71 95 01 00       	call   c0026e83 <__truncdfsf2>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d918:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d91b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d91f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d923:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d927:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d92b:	e8 64 8f 01 00       	call   c0026894 <__divdf3>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d937:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d93b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d943:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d947:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d94b:	e8 e3 85 01 00       	call   c0025f33 <__adddf3>
c000d950:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d954:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d958:	83 c4 18             	add    esp,0x18
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d963:	e8 c8 96 01 00       	call   c0027030 <lrint>
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	50                   	push   eax
c000d96c:	e8 a2 92 01 00       	call   c0026c13 <__floatsidf>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d978:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d97c:	52                   	push   edx
c000d97d:	50                   	push   eax
c000d97e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d982:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d986:	e8 f9 8b 01 00       	call   c0026584 <__subdf3>
c000d98b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d98f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d993:	83 c4 20             	add    esp,0x20
c000d996:	6a 00                	push   0x0
c000d998:	6a 00                	push   0x0
c000d99a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a2:	e8 d8 94 01 00       	call   c0026e7f <__ltdf2>
c000d9a7:	83 c4 10             	add    esp,0x10
c000d9aa:	85 c0                	test   eax,eax
c000d9ac:	79 20                	jns    c000d9ce <sinc_mono_vari_process+0x69b>
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9be:	e8 70 85 01 00       	call   c0025f33 <__adddf3>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9ce:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9d4:	83 ec 10             	sub    esp,0x10
c000d9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e7:	e8 98 8b 01 00       	call   c0026584 <__subdf3>
c000d9ec:	83 c4 18             	add    esp,0x18
c000d9ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9f7:	52                   	push   edx
c000d9f8:	50                   	push   eax
c000d9f9:	e8 32 96 01 00       	call   c0027030 <lrint>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	0f af f8             	imul   edi,eax
c000da04:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da07:	99                   	cdq    
c000da08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da0e:	e9 d2 fb ff ff       	jmp    c000d5e5 <sinc_mono_vari_process+0x2b2>
c000da13:	83 c4 4c             	add    esp,0x4c
c000da16:	89 d0                	mov    eax,edx
c000da18:	5b                   	pop    ebx
c000da19:	5e                   	pop    esi
c000da1a:	5f                   	pop    edi
c000da1b:	5d                   	pop    ebp
c000da1c:	c3                   	ret    

c000da1d <sinc_get_name>:
c000da1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da21:	31 c0                	xor    eax,eax
c000da23:	83 fa 02             	cmp    edx,0x2
c000da26:	77 07                	ja     c000da2f <sinc_get_name+0x12>
c000da28:	8b 04 95 c4 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd783c]
c000da2f:	c3                   	ret    

c000da30 <sinc_get_description>:
c000da30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da34:	31 c0                	xor    eax,eax
c000da36:	83 fa 02             	cmp    edx,0x2
c000da39:	77 07                	ja     c000da42 <sinc_get_description+0x12>
c000da3b:	8b 04 95 b8 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7848]
c000da42:	c3                   	ret    

c000da43 <sinc_set_converter>:
c000da43:	53                   	push   ebx
c000da44:	81 ec 58 08 00 00    	sub    esp,0x858
c000da4a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da51:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da54:	85 c0                	test   eax,eax
c000da56:	74 13                	je     c000da6b <sinc_set_converter+0x28>
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	50                   	push   eax
c000da5c:	e8 83 1a 00 00       	call   c000f4e4 <free>
c000da61:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	50                   	push   eax
c000da6c:	68 44 08 00 00       	push   0x844
c000da71:	6a 00                	push   0x0
c000da73:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da77:	50                   	push   eax
c000da78:	e8 0e 2c ff ff       	call   c000068b <memset>
c000da7d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	b8 0b 00 00 00       	mov    eax,0xb
c000da88:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da8e:	7f 6e                	jg     c000dafe <sinc_set_converter+0xbb>
c000da90:	83 fa 01             	cmp    edx,0x1
c000da93:	75 10                	jne    c000daa5 <sinc_set_converter+0x62>
c000da95:	c7 43 24 33 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d333
c000da9c:	c7 43 20 33 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d333
c000daa3:	eb 4d                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daa5:	83 fa 02             	cmp    edx,0x2
c000daa8:	75 10                	jne    c000daba <sinc_set_converter+0x77>
c000daaa:	c7 43 24 6e cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc6e
c000dab1:	c7 43 20 6e cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc6e
c000dab8:	eb 38                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daba:	83 fa 04             	cmp    edx,0x4
c000dabd:	75 10                	jne    c000dacf <sinc_set_converter+0x8c>
c000dabf:	c7 43 24 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5a9
c000dac6:	c7 43 20 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5a9
c000dacd:	eb 23                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dacf:	83 fa 06             	cmp    edx,0x6
c000dad2:	75 10                	jne    c000dae4 <sinc_set_converter+0xa1>
c000dad4:	c7 43 24 e4 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bee4
c000dadb:	c7 43 20 e4 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bee4
c000dae2:	eb 0e                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dae4:	c7 43 24 20 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b820
c000daeb:	c7 43 20 20 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b820
c000daf2:	c7 43 28 d3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aad3
c000daf9:	b8 0a 00 00 00       	mov    eax,0xa
c000dafe:	81 c4 58 08 00 00    	add    esp,0x858
c000db04:	5b                   	pop    ebx
c000db05:	c3                   	ret    

c000db06 <zoh_vari_process>:
c000db06:	55                   	push   ebp
c000db07:	31 d2                	xor    edx,edx
c000db09:	57                   	push   edi
c000db0a:	56                   	push   esi
c000db0b:	53                   	push   ebx
c000db0c:	83 ec 3c             	sub    esp,0x3c
c000db0f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db13:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db17:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db1b:	0f 8e 80 06 00 00    	jle    c000e1a1 <zoh_vari_process+0x69b>
c000db21:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db24:	ba 05 00 00 00       	mov    edx,0x5
c000db29:	85 db                	test   ebx,ebx
c000db2b:	0f 84 70 06 00 00    	je     c000e1a1 <zoh_vari_process+0x69b>
c000db31:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db34:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db38:	74 19                	je     c000db53 <zoh_vari_process+0x4d>
c000db3a:	31 d2                	xor    edx,edx
c000db3c:	39 c2                	cmp    edx,eax
c000db3e:	7d 0c                	jge    c000db4c <zoh_vari_process+0x46>
c000db40:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db42:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db45:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db49:	42                   	inc    edx
c000db4a:	eb f0                	jmp    c000db3c <zoh_vari_process+0x36>
c000db4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db53:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db56:	0f af d0             	imul   edx,eax
c000db59:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db5c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db67:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db71:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db74:	8b 07                	mov    eax,DWORD PTR [edi]
c000db76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db7e:	68 00 00 70 3f       	push   0x3f700000
c000db83:	6a 00                	push   0x0
c000db85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db8d:	e8 ed 92 01 00       	call   c0026e7f <__ltdf2>
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	ba 16 00 00 00       	mov    edx,0x16
c000db9a:	85 c0                	test   eax,eax
c000db9c:	0f 88 ff 05 00 00    	js     c000e1a1 <zoh_vari_process+0x69b>
c000dba2:	68 00 00 70 40       	push   0x40700000
c000dba7:	6a 00                	push   0x0
c000dba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb1:	e8 ab 92 01 00       	call   c0026e61 <__gtdf2>
c000dbb6:	83 c4 10             	add    esp,0x10
c000dbb9:	ba 16 00 00 00       	mov    edx,0x16
c000dbbe:	85 c0                	test   eax,eax
c000dbc0:	0f 8f db 05 00 00    	jg     c000e1a1 <zoh_vari_process+0x69b>
c000dbc6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbc9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbd4:	68 00 00 f0 3f       	push   0x3ff00000
c000dbd9:	6a 00                	push   0x0
c000dbdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	e8 97 92 01 00       	call   c0026e7f <__ltdf2>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	85 c0                	test   eax,eax
c000dbed:	0f 89 da 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dbf3:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbf6:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbf9:	0f 8d ce 01 00 00    	jge    c000ddcd <zoh_vari_process+0x2c7>
c000dbff:	83 ec 0c             	sub    esp,0xc
c000dc02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc05:	e8 09 90 01 00       	call   c0026c13 <__floatsidf>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc24:	e8 87 89 01 00       	call   c00265b0 <__muldf3>
c000dc29:	59                   	pop    ecx
c000dc2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc35:	e8 d9 8f 01 00       	call   c0026c13 <__floatsidf>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc45:	52                   	push   edx
c000dc46:	50                   	push   eax
c000dc47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4f:	e8 df 82 01 00       	call   c0025f33 <__adddf3>
c000dc54:	59                   	pop    ecx
c000dc55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc59:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc5d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc60:	e8 ae 8f 01 00       	call   c0026c13 <__floatsidf>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc70:	52                   	push   edx
c000dc71:	50                   	push   eax
c000dc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc7a:	e8 fe 91 01 00       	call   c0026e7d <__gedf2>
c000dc7f:	83 c4 10             	add    esp,0x10
c000dc82:	85 c0                	test   eax,eax
c000dc84:	0f 89 43 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dc8a:	85 ed                	test   ebp,ebp
c000dc8c:	0f 8e ec 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dc92:	83 ec 10             	sub    esp,0x10
c000dc95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc98:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc9b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc9e:	ff 37                	push   DWORD PTR [edi]
c000dca0:	e8 df 88 01 00       	call   c0026584 <__subdf3>
c000dca5:	83 c4 18             	add    esp,0x18
c000dca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcb0:	52                   	push   edx
c000dcb1:	50                   	push   eax
c000dcb2:	e8 59 93 01 00       	call   c0027010 <fabs>
c000dcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcc7:	68 23 42 92 0c       	push   0xc924223
c000dccc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd4:	e8 88 91 01 00       	call   c0026e61 <__gtdf2>
c000dcd9:	83 c4 10             	add    esp,0x10
c000dcdc:	85 c0                	test   eax,eax
c000dcde:	0f 8e 9a 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dce4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dce6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dce9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dcf0:	52                   	push   edx
c000dcf1:	50                   	push   eax
c000dcf2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcf5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcf8:	e8 87 88 01 00       	call   c0026584 <__subdf3>
c000dcfd:	59                   	pop    ecx
c000dcfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd09:	e8 05 8f 01 00       	call   c0026c13 <__floatsidf>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd19:	52                   	push   edx
c000dd1a:	50                   	push   eax
c000dd1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd23:	e8 88 88 01 00       	call   c00265b0 <__muldf3>
c000dd28:	5d                   	pop    ebp
c000dd29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd34:	e8 da 8e 01 00       	call   c0026c13 <__floatsidf>
c000dd39:	83 c4 10             	add    esp,0x10
c000dd3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd44:	52                   	push   edx
c000dd45:	50                   	push   eax
c000dd46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4e:	e8 41 8b 01 00       	call   c0026894 <__divdf3>
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd5e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6e:	e8 c0 81 01 00       	call   c0025f33 <__adddf3>
c000dd73:	83 c4 10             	add    esp,0x10
c000dd76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd7e:	31 c0                	xor    eax,eax
c000dd80:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd83:	7e 13                	jle    c000dd98 <zoh_vari_process+0x292>
c000dd85:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd89:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd8c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd8f:	40                   	inc    eax
c000dd90:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd93:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd96:	eb e8                	jmp    c000dd80 <zoh_vari_process+0x27a>
c000dd98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dda0:	68 00 00 f0 3f       	push   0x3ff00000
c000dda5:	6a 00                	push   0x0
c000dda7:	e8 e8 8a 01 00       	call   c0026894 <__divdf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddb6:	52                   	push   edx
c000ddb7:	50                   	push   eax
c000ddb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc0:	e8 6e 81 01 00       	call   c0025f33 <__adddf3>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	e9 ff fd ff ff       	jmp    c000dbcc <zoh_vari_process+0xc6>
c000ddcd:	55                   	push   ebp
c000ddce:	55                   	push   ebp
c000ddcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd7:	e8 54 92 01 00       	call   c0027030 <lrint>
c000dddc:	83 ec 0c             	sub    esp,0xc
c000dddf:	50                   	push   eax
c000dde0:	e8 2e 8e 01 00       	call   c0026c13 <__floatsidf>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddf0:	52                   	push   edx
c000ddf1:	50                   	push   eax
c000ddf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddfa:	e8 85 87 01 00       	call   c0026584 <__subdf3>
c000ddff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de07:	83 c4 20             	add    esp,0x20
c000de0a:	6a 00                	push   0x0
c000de0c:	6a 00                	push   0x0
c000de0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de16:	e8 64 90 01 00       	call   c0026e7f <__ltdf2>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	85 c0                	test   eax,eax
c000de20:	79 1e                	jns    c000de40 <zoh_vari_process+0x33a>
c000de22:	68 00 00 f0 3f       	push   0x3ff00000
c000de27:	6a 00                	push   0x0
c000de29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de31:	e8 fd 80 01 00       	call   c0025f33 <__adddf3>
c000de36:	83 c4 10             	add    esp,0x10
c000de39:	89 04 24             	mov    DWORD PTR [esp],eax
c000de3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de40:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de43:	83 ec 10             	sub    esp,0x10
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de56:	e8 29 87 01 00       	call   c0026584 <__subdf3>
c000de5b:	83 c4 18             	add    esp,0x18
c000de5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de66:	52                   	push   edx
c000de67:	50                   	push   eax
c000de68:	e8 c3 91 01 00       	call   c0027030 <lrint>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	0f af e8             	imul   ebp,eax
c000de73:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de76:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de79:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de80:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de87:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de8a:	0f 8d 7a 02 00 00    	jge    c000e10a <zoh_vari_process+0x604>
c000de90:	83 ec 0c             	sub    esp,0xc
c000de93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de96:	e8 78 8d 01 00       	call   c0026c13 <__floatsidf>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dea2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deaa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb6:	e8 f5 86 01 00       	call   c00265b0 <__muldf3>
c000debb:	59                   	pop    ecx
c000debc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dec0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec8:	e8 46 8d 01 00       	call   c0026c13 <__floatsidf>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ded4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ded8:	52                   	push   edx
c000ded9:	50                   	push   eax
c000deda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee2:	e8 4c 80 01 00       	call   c0025f33 <__adddf3>
c000dee7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000deea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000deee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000def2:	e8 1c 8d 01 00       	call   c0026c13 <__floatsidf>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000defe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df02:	52                   	push   edx
c000df03:	50                   	push   eax
c000df04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0c:	e8 70 8f 01 00       	call   c0026e81 <__ledf2>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	85 c0                	test   eax,eax
c000df16:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df1a:	0f 8f ea 01 00 00    	jg     c000e10a <zoh_vari_process+0x604>
c000df20:	85 c9                	test   ecx,ecx
c000df22:	0f 8e ed 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df28:	83 ec 10             	sub    esp,0x10
c000df2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df31:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df34:	ff 37                	push   DWORD PTR [edi]
c000df36:	e8 49 86 01 00       	call   c0026584 <__subdf3>
c000df3b:	83 c4 18             	add    esp,0x18
c000df3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df46:	52                   	push   edx
c000df47:	50                   	push   eax
c000df48:	e8 c3 90 01 00       	call   c0027010 <fabs>
c000df4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df5d:	68 23 42 92 0c       	push   0xc924223
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	e8 f2 8e 01 00       	call   c0026e61 <__gtdf2>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	85 c0                	test   eax,eax
c000df74:	0f 8e 9b 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df7a:	8b 07                	mov    eax,DWORD PTR [edi]
c000df7c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df87:	52                   	push   edx
c000df88:	50                   	push   eax
c000df89:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df8c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df8f:	e8 f0 85 01 00       	call   c0026584 <__subdf3>
c000df94:	5d                   	pop    ebp
c000df95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df99:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df9d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfa0:	e8 6e 8c 01 00       	call   c0026c13 <__floatsidf>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb0:	52                   	push   edx
c000dfb1:	50                   	push   eax
c000dfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 f1 85 01 00       	call   c00265b0 <__muldf3>
c000dfbf:	59                   	pop    ecx
c000dfc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfc8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfcb:	e8 43 8c 01 00       	call   c0026c13 <__floatsidf>
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfdb:	52                   	push   edx
c000dfdc:	50                   	push   eax
c000dfdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe5:	e8 aa 88 01 00       	call   c0026894 <__divdf3>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dff5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	e8 29 7f 01 00       	call   c0025f33 <__adddf3>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e011:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e015:	31 d2                	xor    edx,edx
c000e017:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e01a:	39 d0                	cmp    eax,edx
c000e01c:	7e 1d                	jle    c000e03b <zoh_vari_process+0x535>
c000e01e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e021:	29 c1                	sub    ecx,eax
c000e023:	89 c8                	mov    eax,ecx
c000e025:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e027:	01 d0                	add    eax,edx
c000e029:	42                   	inc    edx
c000e02a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e02d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e030:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e033:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e036:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e039:	eb dc                	jmp    c000e017 <zoh_vari_process+0x511>
c000e03b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	68 00 00 f0 3f       	push   0x3ff00000
c000e048:	6a 00                	push   0x0
c000e04a:	e8 45 88 01 00       	call   c0026894 <__divdf3>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e05a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e05e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	e8 c4 7e 01 00       	call   c0025f33 <__adddf3>
c000e06f:	5d                   	pop    ebp
c000e070:	59                   	pop    ecx
c000e071:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e075:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e081:	e8 aa 8f 01 00       	call   c0027030 <lrint>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	50                   	push   eax
c000e08a:	e8 84 8b 01 00       	call   c0026c13 <__floatsidf>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e09a:	52                   	push   edx
c000e09b:	50                   	push   eax
c000e09c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a4:	e8 db 84 01 00       	call   c0026584 <__subdf3>
c000e0a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0b1:	83 c4 20             	add    esp,0x20
c000e0b4:	6a 00                	push   0x0
c000e0b6:	6a 00                	push   0x0
c000e0b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c0:	e8 ba 8d 01 00       	call   c0026e7f <__ltdf2>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	85 c0                	test   eax,eax
c000e0ca:	79 1e                	jns    c000e0ea <zoh_vari_process+0x5e4>
c000e0cc:	68 00 00 f0 3f       	push   0x3ff00000
c000e0d1:	6a 00                	push   0x0
c000e0d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0db:	e8 53 7e 01 00       	call   c0025f33 <__adddf3>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0ea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0ed:	83 ec 10             	sub    esp,0x10
c000e0f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e100:	e8 7f 84 01 00       	call   c0026584 <__subdf3>
c000e105:	e9 51 fd ff ff       	jmp    c000de5b <zoh_vari_process+0x355>
c000e10a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e10e:	7d 3a                	jge    c000e14a <zoh_vari_process+0x644>
c000e110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e114:	83 ec 0c             	sub    esp,0xc
c000e117:	29 e8                	sub    eax,ebp
c000e119:	99                   	cdq    
c000e11a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e11d:	50                   	push   eax
c000e11e:	e8 f0 8a 01 00       	call   c0026c13 <__floatsidf>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e12e:	52                   	push   edx
c000e12f:	50                   	push   eax
c000e130:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e138:	e8 f6 7d 01 00       	call   c0025f33 <__adddf3>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e143:	89 04 24             	mov    DWORD PTR [esp],eax
c000e146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e14a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e14d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e151:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e154:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e157:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15a:	85 c0                	test   eax,eax
c000e15c:	7f 25                	jg     c000e183 <zoh_vari_process+0x67d>
c000e15e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e166:	89 07                	mov    DWORD PTR [edi],eax
c000e168:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e16b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e16e:	99                   	cdq    
c000e16f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e172:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e175:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e178:	99                   	cdq    
c000e179:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e17c:	31 d2                	xor    edx,edx
c000e17e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e181:	eb 1e                	jmp    c000e1a1 <zoh_vari_process+0x69b>
c000e183:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e186:	31 d2                	xor    edx,edx
c000e188:	29 c8                	sub    eax,ecx
c000e18a:	c1 e0 02             	shl    eax,0x2
c000e18d:	39 d1                	cmp    ecx,edx
c000e18f:	7e cd                	jle    c000e15e <zoh_vari_process+0x658>
c000e191:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e193:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e197:	83 c0 04             	add    eax,0x4
c000e19a:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e19e:	42                   	inc    edx
c000e19f:	eb ec                	jmp    c000e18d <zoh_vari_process+0x687>
c000e1a1:	83 c4 3c             	add    esp,0x3c
c000e1a4:	89 d0                	mov    eax,edx
c000e1a6:	5b                   	pop    ebx
c000e1a7:	5e                   	pop    esi
c000e1a8:	5f                   	pop    edi
c000e1a9:	5d                   	pop    ebp
c000e1aa:	c3                   	ret    

c000e1ab <zoh_reset>:
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1b5:	85 c0                	test   eax,eax
c000e1b7:	74 20                	je     c000e1d9 <zoh_reset+0x2e>
c000e1b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1bc:	83 c0 1c             	add    eax,0x1c
c000e1bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1c9:	c1 e2 02             	shl    edx,0x2
c000e1cc:	51                   	push   ecx
c000e1cd:	52                   	push   edx
c000e1ce:	6a 00                	push   0x0
c000e1d0:	50                   	push   eax
c000e1d1:	e8 b5 24 ff ff       	call   c000068b <memset>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	83 c4 0c             	add    esp,0xc
c000e1dc:	c3                   	ret    

c000e1dd <zoh_get_name>:
c000e1dd:	31 c0                	xor    eax,eax
c000e1df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e4:	75 05                	jne    c000e1eb <zoh_get_name+0xe>
c000e1e6:	b8 de 88 02 c0       	mov    eax,0xc00288de
c000e1eb:	c3                   	ret    

c000e1ec <zoh_get_description>:
c000e1ec:	31 c0                	xor    eax,eax
c000e1ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1f3:	75 05                	jne    c000e1fa <zoh_get_description+0xe>
c000e1f5:	b8 ef 88 02 c0       	mov    eax,0xc00288ef
c000e1fa:	c3                   	ret    

c000e1fb <zoh_set_converter>:
c000e1fb:	53                   	push   ebx
c000e1fc:	b8 0a 00 00 00       	mov    eax,0xa
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e208:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e20d:	75 6e                	jne    c000e27d <zoh_set_converter+0x82>
c000e20f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e212:	85 c0                	test   eax,eax
c000e214:	74 13                	je     c000e229 <zoh_set_converter+0x2e>
c000e216:	83 ec 0c             	sub    esp,0xc
c000e219:	50                   	push   eax
c000e21a:	e8 c5 12 00 00       	call   c000f4e4 <free>
c000e21f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	50                   	push   eax
c000e22a:	50                   	push   eax
c000e22b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e22e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e235:	50                   	push   eax
c000e236:	6a 01                	push   0x1
c000e238:	e8 c7 12 00 00       	call   c000f504 <calloc>
c000e23d:	83 c4 10             	add    esp,0x10
c000e240:	89 c2                	mov    edx,eax
c000e242:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e245:	85 d2                	test   edx,edx
c000e247:	b8 01 00 00 00       	mov    eax,0x1
c000e24c:	74 2f                	je     c000e27d <zoh_set_converter+0x82>
c000e24e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e257:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e25d:	c7 43 24 06 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db06
c000e264:	c7 43 20 06 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db06
c000e26b:	c7 43 28 ab e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1ab
c000e272:	53                   	push   ebx
c000e273:	e8 33 ff ff ff       	call   c000e1ab <zoh_reset>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	31 c0                	xor    eax,eax
c000e27d:	83 c4 08             	add    esp,0x8
c000e280:	5b                   	pop    ebx
c000e281:	c3                   	ret    

c000e282 <CPU::current()>:
c000e282:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c000e287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e28d:	90                   	nop
c000e28e:	c3                   	ret    

c000e28f <operator new(unsigned long)>:
c000e28f:	83 ec 0c             	sub    esp,0xc
c000e292:	83 ec 0c             	sub    esp,0xc
c000e295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e299:	e8 36 12 00 00       	call   c000f4d4 <malloc>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	83 c4 0c             	add    esp,0xc
c000e2a4:	c3                   	ret    
c000e2a5:	90                   	nop

c000e2a6 <Computer::close(int, int, void*)>:
c000e2a6:	57                   	push   edi
c000e2a7:	56                   	push   esi
c000e2a8:	53                   	push   ebx
c000e2a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2b5:	83 ec 0c             	sub    esp,0xc
c000e2b8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2be:	e8 23 5a 00 00       	call   c0013ce6 <Device::closeAll()>
c000e2c3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2ce:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2d2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2da:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e2:	5b                   	pop    ebx
c000e2e3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2e6:	5e                   	pop    esi
c000e2e7:	5f                   	pop    edi
c000e2e8:	ff e0                	jmp    eax

c000e2ea <Computer::Computer()>:
c000e2ea:	83 ec 0c             	sub    esp,0xc
c000e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f1:	83 ec 08             	sub    esp,0x8
c000e2f4:	68 26 89 02 c0       	push   0xc0028926
c000e2f9:	50                   	push   eax
c000e2fa:	e8 61 5a 00 00       	call   c0013d60 <Device::Device(char const*)>
c000e2ff:	83 c4 10             	add    esp,0x10
c000e302:	ba f0 8a 02 c0       	mov    edx,0xc0028af0
c000e307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30b:	89 10                	mov    DWORD PTR [eax],edx
c000e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e311:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e333:	83 ca 04             	or     edx,0x4
c000e336:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e340:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e346:	0f b6 d0             	movzx  edx,al
c000e349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e358:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e35e:	0f b6 d0             	movzx  edx,al
c000e361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e365:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e374:	8d 50 01             	lea    edx,[eax+0x1]
c000e377:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e37b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e381:	0f b6 d0             	movzx  edx,al
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e38c:	83 e1 3f             	and    ecx,0x3f
c000e38f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e397:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e39d:	0f b6 d0             	movzx  edx,al
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3b5:	0f b6 d0             	movzx  edx,al
c000e3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bc:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3cb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3d2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3d8:	0f b6 d0             	movzx  edx,al
c000e3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3e3:	83 e1 3f             	and    ecx,0x3f
c000e3e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3f4:	0f b6 d0             	movzx  edx,al
c000e3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e406:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e40c:	0f b6 d0             	movzx  edx,al
c000e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e413:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e422:	8d 50 01             	lea    edx,[eax+0x1]
c000e425:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e429:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e42f:	0f b6 d0             	movzx  edx,al
c000e432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e436:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e43a:	83 e1 3f             	and    ecx,0x3f
c000e43d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e441:	90                   	nop
c000e442:	83 c4 0c             	add    esp,0xc
c000e445:	c3                   	ret    

c000e446 <Computer::setBootMessage(char const*)>:
c000e446:	c3                   	ret    
c000e447:	90                   	nop

c000e448 <Computer::start()>:
c000e448:	56                   	push   esi
c000e449:	53                   	push   ebx
c000e44a:	83 ec 10             	sub    esp,0x10
c000e44d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e451:	fb                   	sti    
c000e452:	68 3f 07 00 00       	push   0x73f
c000e457:	e8 78 10 00 00       	call   c000f4d4 <malloc>
c000e45c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e463:	89 c6                	mov    esi,eax
c000e465:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c000e46b:	68 2f 89 02 c0       	push   0xc002892f
c000e470:	6a 01                	push   0x1
c000e472:	50                   	push   eax
c000e473:	e8 e6 e6 00 00       	call   c001cb5e <Process::Process(bool, char const*, Process*, char**)>
c000e478:	83 c4 20             	add    esp,0x20
c000e47b:	68 ff 00 00 00       	push   0xff
c000e480:	6a 00                	push   0x0
c000e482:	68 69 ee 00 c0       	push   0xc000ee69
c000e487:	56                   	push   esi
c000e488:	e8 cf e9 00 00       	call   c001ce5c <Process::createThread(void (*)(void*), void*, int)>
c000e48d:	6a 7a                	push   0x7a
c000e48f:	6a 00                	push   0x0
c000e491:	68 ba d6 01 c0       	push   0xc001d6ba
c000e496:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c000e49c:	e8 bb e9 00 00       	call   c001ce5c <Process::createThread(void (*)(void*), void*, int)>
c000e4a1:	83 c4 20             	add    esp,0x20
c000e4a4:	a3 48 de 02 c0       	mov    ds:0xc002de48,eax
c000e4a9:	e8 8d f5 00 00       	call   c001da3b <Vm::initialise8086()>
c000e4ae:	c6 05 4d c9 02 c0 01 	mov    BYTE PTR ds:0xc002c94d,0x1
c000e4b5:	e8 22 46 00 00       	call   c0012adc <initVFS()>
c000e4ba:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4c2:	6a 00                	push   0x0
c000e4c4:	6a 00                	push   0x0
c000e4c6:	6a 00                	push   0x0
c000e4c8:	50                   	push   eax
c000e4c9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4cc:	e8 91 b2 00 00       	call   c0019762 <Krnl::loadSystemEnv()>
c000e4d1:	e8 30 d0 00 00       	call   c001b506 <setupSystemCalls()>
c000e4d6:	e8 13 51 00 00       	call   c00135ee <loadClockSettings()>
c000e4db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4de:	e8 d7 57 00 00       	call   c0013cba <Device::loadDriversForAll()>
c000e4e3:	58                   	pop    eax
c000e4e4:	8b 1d 48 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c948
c000e4ea:	5a                   	pop    edx
c000e4eb:	6a 01                	push   0x1
c000e4ed:	68 3c 89 02 c0       	push   0xc002893c
c000e4f2:	e8 bf e1 00 00       	call   c001c6b6 <Thr::loadDLL(char const*, bool)>
c000e4f7:	59                   	pop    ecx
c000e4f8:	5e                   	pop    esi
c000e4f9:	53                   	push   ebx
c000e4fa:	50                   	push   eax
c000e4fb:	e8 c5 e3 00 00       	call   c001c8c5 <Thr::executeDLL(unsigned long, void*)>
c000e500:	c7 04 24 b8 9b 02 c0 	mov    DWORD PTR [esp],0xc0029bb8
c000e507:	e8 75 42 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 a7 ec 00 00       	call   c001d1c0 <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Computer::start()+0xc7>

c000e51e <firstTask()>:
c000e51e:	83 ec 18             	sub    esp,0x18
c000e521:	ff 35 48 c9 02 c0    	push   DWORD PTR ds:0xc002c948
c000e527:	e8 1c ff ff ff       	call   c000e448 <Computer::start()>

c000e52c <Computer::detectFeatures()>:
c000e52c:	55                   	push   ebp
c000e52d:	57                   	push   edi
c000e52e:	56                   	push   esi
c000e52f:	53                   	push   ebx
c000e530:	83 ec 1c             	sub    esp,0x1c
c000e533:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e537:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e541:	e8 53 1d ff ff       	call   c0000299 <detectCPUID>
c000e546:	85 c0                	test   eax,eax
c000e548:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e54e:	0f 95 c2             	setne  dl
c000e551:	83 e0 fd             	and    eax,0xfffffffd
c000e554:	d1 e2                	shl    edx,1
c000e556:	09 d0                	or     eax,edx
c000e558:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e55e:	a8 02                	test   al,0x2
c000e560:	75 46                	jne    c000e5a8 <Computer::detectFeatures()+0x7c>
c000e562:	f6 05 61 c9 02 c0 04 	test   BYTE PTR ds:0xc002c961,0x4
c000e569:	74 07                	je     c000e572 <Computer::detectFeatures()+0x46>
c000e56b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e572:	e8 ff 6a 01 00       	call   c0025076 <x87Detect>
c000e577:	83 e0 01             	and    eax,0x1
c000e57a:	c1 e0 04             	shl    eax,0x4
c000e57d:	88 c2                	mov    dl,al
c000e57f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e585:	83 e0 ef             	and    eax,0xffffffef
c000e588:	09 d0                	or     eax,edx
c000e58a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e590:	a8 10                	test   al,0x10
c000e592:	0f 85 2a 01 00 00    	jne    c000e6c2 <Computer::detectFeatures()+0x196>
c000e598:	84 c0                	test   al,al
c000e59a:	0f 88 45 01 00 00    	js     c000e6e5 <Computer::detectFeatures()+0x1b9>
c000e5a0:	83 c4 1c             	add    esp,0x1c
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	5d                   	pop    ebp
c000e5a7:	c3                   	ret    
c000e5a8:	83 ec 0c             	sub    esp,0xc
c000e5ab:	6a 20                	push   0x20
c000e5ad:	e8 72 9b 00 00       	call   c0018124 <CPU::cpuidCheckEDX(unsigned int)>
c000e5b2:	83 e0 01             	and    eax,0x1
c000e5b5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5c2:	83 e0 f7             	and    eax,0xfffffff7
c000e5c5:	09 d0                	or     eax,edx
c000e5c7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5cd:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5d4:	e8 4b 9b 00 00       	call   c0018124 <CPU::cpuidCheckEDX(unsigned int)>
c000e5d9:	83 e0 01             	and    eax,0x1
c000e5dc:	88 c2                	mov    dl,al
c000e5de:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5e4:	83 e0 fe             	and    eax,0xfffffffe
c000e5e7:	09 d0                	or     eax,edx
c000e5e9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5ef:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5f6:	e8 29 9b 00 00       	call   c0018124 <CPU::cpuidCheckEDX(unsigned int)>
c000e5fb:	c1 e0 07             	shl    eax,0x7
c000e5fe:	88 c2                	mov    dl,al
c000e600:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e606:	83 e0 7f             	and    eax,0x7f
c000e609:	09 d0                	or     eax,edx
c000e60b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e611:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e618:	e8 07 9b 00 00       	call   c0018124 <CPU::cpuidCheckEDX(unsigned int)>
c000e61d:	83 c4 10             	add    esp,0x10
c000e620:	83 e0 01             	and    eax,0x1
c000e623:	c1 e0 05             	shl    eax,0x5
c000e626:	88 c2                	mov    dl,al
c000e628:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e62e:	83 e0 df             	and    eax,0xffffffdf
c000e631:	09 d0                	or     eax,edx
c000e633:	f7 05 60 c9 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002c960,0x401
c000e63d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e643:	0f 84 c2 00 00 00    	je     c000e70b <Computer::detectFeatures()+0x1df>
c000e649:	83 e0 fe             	and    eax,0xfffffffe
c000e64c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e652:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e658:	88 c2                	mov    dl,al
c000e65a:	83 e2 09             	and    edx,0x9
c000e65d:	fe ca                	dec    dl
c000e65f:	75 09                	jne    c000e66a <Computer::detectFeatures()+0x13e>
c000e661:	83 e0 fe             	and    eax,0xfffffffe
c000e664:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e66a:	83 ec 0c             	sub    esp,0xc
c000e66d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e671:	50                   	push   eax
c000e672:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e676:	55                   	push   ebp
c000e677:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e67b:	57                   	push   edi
c000e67c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e680:	56                   	push   esi
c000e681:	68 00 00 00 80       	push   0x80000000
c000e686:	e8 15 9a 00 00       	call   c00180a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e68b:	83 c4 20             	add    esp,0x20
c000e68e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e695:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e699:	0f 86 c3 fe ff ff    	jbe    c000e562 <Computer::detectFeatures()+0x36>
c000e69f:	83 ec 0c             	sub    esp,0xc
c000e6a2:	50                   	push   eax
c000e6a3:	55                   	push   ebp
c000e6a4:	57                   	push   edi
c000e6a5:	56                   	push   esi
c000e6a6:	68 01 00 00 80       	push   0x80000001
c000e6ab:	e8 f0 99 00 00       	call   c00180a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e6b0:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6ba:	83 c4 20             	add    esp,0x20
c000e6bd:	e9 a0 fe ff ff       	jmp    c000e562 <Computer::detectFeatures()+0x36>
c000e6c2:	e8 69 69 01 00       	call   c0025030 <absolutelyNoChanceInHell>
c000e6c7:	88 c2                	mov    dl,al
c000e6c9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6cf:	c1 e2 07             	shl    edx,0x7
c000e6d2:	83 e0 7f             	and    eax,0x7f
c000e6d5:	09 d0                	or     eax,edx
c000e6d7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6dd:	84 c0                	test   al,al
c000e6df:	0f 89 bb fe ff ff    	jns    c000e5a0 <Computer::detectFeatures()+0x74>
c000e6e5:	e8 26 69 01 00       	call   c0025010 <avxDetect>
c000e6ea:	83 e0 01             	and    eax,0x1
c000e6ed:	c1 e0 05             	shl    eax,0x5
c000e6f0:	88 c2                	mov    dl,al
c000e6f2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6f8:	83 e0 df             	and    eax,0xffffffdf
c000e6fb:	09 d0                	or     eax,edx
c000e6fd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e703:	83 c4 1c             	add    esp,0x1c
c000e706:	5b                   	pop    ebx
c000e707:	5e                   	pop    esi
c000e708:	5f                   	pop    edi
c000e709:	5d                   	pop    ebp
c000e70a:	c3                   	ret    
c000e70b:	83 ec 0c             	sub    esp,0xc
c000e70e:	68 00 02 00 00       	push   0x200
c000e713:	e8 0c 9a 00 00       	call   c0018124 <CPU::cpuidCheckEDX(unsigned int)>
c000e718:	83 c4 10             	add    esp,0x10
c000e71b:	83 e0 01             	and    eax,0x1
c000e71e:	88 c2                	mov    dl,al
c000e720:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e726:	83 e0 fe             	and    eax,0xfffffffe
c000e729:	09 d0                	or     eax,edx
c000e72b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e731:	e9 1c ff ff ff       	jmp    c000e652 <Computer::detectFeatures()+0x126>

c000e736 <Computer::displayFeatures()>:
c000e736:	53                   	push   ebx
c000e737:	83 ec 14             	sub    esp,0x14
c000e73a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e73e:	68 5f 89 02 c0       	push   0xc002895f
c000e743:	e8 39 40 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e748:	83 c4 10             	add    esp,0x10
c000e74b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e752:	0f 85 73 02 00 00    	jne    c000e9cb <Computer::displayFeatures()+0x295>
c000e758:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e75d:	83 ec 08             	sub    esp,0x8
c000e760:	50                   	push   eax
c000e761:	68 72 89 02 c0       	push   0xc0028972
c000e766:	e8 16 40 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e76b:	83 c4 10             	add    esp,0x10
c000e76e:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e775:	0f 85 8c 02 00 00    	jne    c000ea07 <Computer::displayFeatures()+0x2d1>
c000e77b:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e780:	83 ec 08             	sub    esp,0x8
c000e783:	50                   	push   eax
c000e784:	68 83 89 02 c0       	push   0xc0028983
c000e789:	e8 f3 3f 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e78e:	83 c4 10             	add    esp,0x10
c000e791:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e798:	0f 85 5f 02 00 00    	jne    c000e9fd <Computer::displayFeatures()+0x2c7>
c000e79e:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e7a3:	83 ec 08             	sub    esp,0x8
c000e7a6:	50                   	push   eax
c000e7a7:	68 94 89 02 c0       	push   0xc0028994
c000e7ac:	e8 d0 3f 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e7b1:	83 c4 10             	add    esp,0x10
c000e7b4:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7bb:	0f 85 32 02 00 00    	jne    c000e9f3 <Computer::displayFeatures()+0x2bd>
c000e7c1:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	50                   	push   eax
c000e7ca:	68 a5 89 02 c0       	push   0xc00289a5
c000e7cf:	e8 ad 3f 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7de:	0f 85 05 02 00 00    	jne    c000e9e9 <Computer::displayFeatures()+0x2b3>
c000e7e4:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e7e9:	83 ec 08             	sub    esp,0x8
c000e7ec:	50                   	push   eax
c000e7ed:	68 b6 89 02 c0       	push   0xc00289b6
c000e7f2:	e8 8a 3f 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e7f7:	83 c4 10             	add    esp,0x10
c000e7fa:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e801:	0f 85 d8 01 00 00    	jne    c000e9df <Computer::displayFeatures()+0x2a9>
c000e807:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e80c:	83 ec 08             	sub    esp,0x8
c000e80f:	50                   	push   eax
c000e810:	68 c7 89 02 c0       	push   0xc00289c7
c000e815:	e8 67 3f 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e824:	0f 85 ab 01 00 00    	jne    c000e9d5 <Computer::displayFeatures()+0x29f>
c000e82a:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e82f:	83 ec 08             	sub    esp,0x8
c000e832:	50                   	push   eax
c000e833:	68 d8 89 02 c0       	push   0xc00289d8
c000e838:	e8 44 3f 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e847:	0f 88 1b 02 00 00    	js     c000ea68 <Computer::displayFeatures()+0x332>
c000e84d:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e852:	83 ec 08             	sub    esp,0x8
c000e855:	50                   	push   eax
c000e856:	68 e9 89 02 c0       	push   0xc00289e9
c000e85b:	e8 21 3f 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e860:	83 c4 10             	add    esp,0x10
c000e863:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e86a:	0f 85 a1 01 00 00    	jne    c000ea11 <Computer::displayFeatures()+0x2db>
c000e870:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e875:	83 ec 08             	sub    esp,0x8
c000e878:	50                   	push   eax
c000e879:	68 fa 89 02 c0       	push   0xc00289fa
c000e87e:	e8 fe 3e 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e88d:	0f 85 cb 01 00 00    	jne    c000ea5e <Computer::displayFeatures()+0x328>
c000e893:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e898:	83 ec 08             	sub    esp,0x8
c000e89b:	50                   	push   eax
c000e89c:	68 0b 8a 02 c0       	push   0xc0028a0b
c000e8a1:	e8 db 3e 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e8a6:	83 c4 10             	add    esp,0x10
c000e8a9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e8b0:	0f 85 9e 01 00 00    	jne    c000ea54 <Computer::displayFeatures()+0x31e>
c000e8b6:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e8bb:	83 ec 08             	sub    esp,0x8
c000e8be:	50                   	push   eax
c000e8bf:	68 1c 8a 02 c0       	push   0xc0028a1c
c000e8c4:	e8 b8 3e 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e8c9:	83 c4 10             	add    esp,0x10
c000e8cc:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8d3:	0f 85 71 01 00 00    	jne    c000ea4a <Computer::displayFeatures()+0x314>
c000e8d9:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e8de:	83 ec 08             	sub    esp,0x8
c000e8e1:	50                   	push   eax
c000e8e2:	68 2d 8a 02 c0       	push   0xc0028a2d
c000e8e7:	e8 95 3e 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e8ec:	83 c4 10             	add    esp,0x10
c000e8ef:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8f6:	0f 85 44 01 00 00    	jne    c000ea40 <Computer::displayFeatures()+0x30a>
c000e8fc:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e901:	83 ec 08             	sub    esp,0x8
c000e904:	50                   	push   eax
c000e905:	68 3e 8a 02 c0       	push   0xc0028a3e
c000e90a:	e8 72 3e 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e90f:	83 c4 10             	add    esp,0x10
c000e912:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e919:	0f 85 17 01 00 00    	jne    c000ea36 <Computer::displayFeatures()+0x300>
c000e91f:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e924:	83 ec 08             	sub    esp,0x8
c000e927:	50                   	push   eax
c000e928:	68 4f 8a 02 c0       	push   0xc0028a4f
c000e92d:	e8 4f 3e 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e932:	83 c4 10             	add    esp,0x10
c000e935:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e93c:	0f 85 ea 00 00 00    	jne    c000ea2c <Computer::displayFeatures()+0x2f6>
c000e942:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e947:	83 ec 08             	sub    esp,0x8
c000e94a:	50                   	push   eax
c000e94b:	68 60 8a 02 c0       	push   0xc0028a60
c000e950:	e8 2c 3e 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e955:	83 c4 10             	add    esp,0x10
c000e958:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e95f:	0f 88 0d 01 00 00    	js     c000ea72 <Computer::displayFeatures()+0x33c>
c000e965:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e96a:	83 ec 08             	sub    esp,0x8
c000e96d:	50                   	push   eax
c000e96e:	68 71 8a 02 c0       	push   0xc0028a71
c000e973:	e8 09 3e 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e978:	83 c4 10             	add    esp,0x10
c000e97b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e982:	0f 85 9a 00 00 00    	jne    c000ea22 <Computer::displayFeatures()+0x2ec>
c000e988:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e98d:	83 ec 08             	sub    esp,0x8
c000e990:	50                   	push   eax
c000e991:	68 82 8a 02 c0       	push   0xc0028a82
c000e996:	e8 e6 3d 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e99b:	83 c4 10             	add    esp,0x10
c000e99e:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e9a5:	75 74                	jne    c000ea1b <Computer::displayFeatures()+0x2e5>
c000e9a7:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e9ac:	83 ec 08             	sub    esp,0x8
c000e9af:	50                   	push   eax
c000e9b0:	68 93 8a 02 c0       	push   0xc0028a93
c000e9b5:	e8 c7 3d 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000e9ba:	c7 44 24 20 5b a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a25b
c000e9c2:	83 c4 18             	add    esp,0x18
c000e9c5:	5b                   	pop    ebx
c000e9c6:	e9 b6 3d 00 00       	jmp    c0012781 <Dbg::kprintf(char const*, ...)>
c000e9cb:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000e9d0:	e9 88 fd ff ff       	jmp    c000e75d <Computer::displayFeatures()+0x27>
c000e9d5:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000e9da:	e9 50 fe ff ff       	jmp    c000e82f <Computer::displayFeatures()+0xf9>
c000e9df:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000e9e4:	e9 23 fe ff ff       	jmp    c000e80c <Computer::displayFeatures()+0xd6>
c000e9e9:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000e9ee:	e9 f6 fd ff ff       	jmp    c000e7e9 <Computer::displayFeatures()+0xb3>
c000e9f3:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000e9f8:	e9 c9 fd ff ff       	jmp    c000e7c6 <Computer::displayFeatures()+0x90>
c000e9fd:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea02:	e9 9c fd ff ff       	jmp    c000e7a3 <Computer::displayFeatures()+0x6d>
c000ea07:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea0c:	e9 6f fd ff ff       	jmp    c000e780 <Computer::displayFeatures()+0x4a>
c000ea11:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea16:	e9 5a fe ff ff       	jmp    c000e875 <Computer::displayFeatures()+0x13f>
c000ea1b:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea20:	eb 8a                	jmp    c000e9ac <Computer::displayFeatures()+0x276>
c000ea22:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea27:	e9 61 ff ff ff       	jmp    c000e98d <Computer::displayFeatures()+0x257>
c000ea2c:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea31:	e9 11 ff ff ff       	jmp    c000e947 <Computer::displayFeatures()+0x211>
c000ea36:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea3b:	e9 e4 fe ff ff       	jmp    c000e924 <Computer::displayFeatures()+0x1ee>
c000ea40:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea45:	e9 b7 fe ff ff       	jmp    c000e901 <Computer::displayFeatures()+0x1cb>
c000ea4a:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea4f:	e9 8a fe ff ff       	jmp    c000e8de <Computer::displayFeatures()+0x1a8>
c000ea54:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea59:	e9 5d fe ff ff       	jmp    c000e8bb <Computer::displayFeatures()+0x185>
c000ea5e:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea63:	e9 30 fe ff ff       	jmp    c000e898 <Computer::displayFeatures()+0x162>
c000ea68:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea6d:	e9 e0 fd ff ff       	jmp    c000e852 <Computer::displayFeatures()+0x11c>
c000ea72:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea77:	e9 ee fe ff ff       	jmp    c000e96a <Computer::displayFeatures()+0x234>

c000ea7c <Computer::rdmsr(unsigned int)>:
c000ea7c:	83 ec 0c             	sub    esp,0xc
c000ea7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea83:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea8a:	74 0a                	je     c000ea96 <Computer::rdmsr(unsigned int)+0x1a>
c000ea8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea90:	0f 32                	rdmsr  
c000ea92:	83 c4 0c             	add    esp,0xc
c000ea95:	c3                   	ret    
c000ea96:	83 ec 0c             	sub    esp,0xc
c000ea99:	68 a4 8a 02 c0       	push   0xc0028aa4
c000ea9e:	e8 f8 ad 00 00       	call   c001989b <Krnl::panic(char const*)>
c000eaa3:	83 c4 10             	add    esp,0x10
c000eaa6:	eb e4                	jmp    c000ea8c <Computer::rdmsr(unsigned int)+0x10>

c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eaa8:	57                   	push   edi
c000eaa9:	56                   	push   esi
c000eaaa:	52                   	push   edx
c000eaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaaf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eab3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eab7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eabe:	74 0e                	je     c000eace <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eac0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eac4:	89 f0                	mov    eax,esi
c000eac6:	89 fa                	mov    edx,edi
c000eac8:	0f 30                	wrmsr  
c000eaca:	58                   	pop    eax
c000eacb:	5e                   	pop    esi
c000eacc:	5f                   	pop    edi
c000eacd:	c3                   	ret    
c000eace:	83 ec 0c             	sub    esp,0xc
c000ead1:	68 aa 8a 02 c0       	push   0xc0028aaa
c000ead6:	e8 c0 ad 00 00       	call   c001989b <Krnl::panic(char const*)>
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	eb e0                	jmp    c000eac0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eae0 <Computer::nmiEnabled()>:
c000eae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eae4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eaea:	c3                   	ret    
c000eaeb:	90                   	nop

c000eaec <Computer::readCMOS(unsigned char)>:
c000eaec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaf0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eaf7:	19 c0                	sbb    eax,eax
c000eaf9:	83 e0 80             	and    eax,0xffffff80
c000eafc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eb00:	e6 70                	out    0x70,al
c000eb02:	e4 71                	in     al,0x71
c000eb04:	c3                   	ret    
c000eb05:	90                   	nop

c000eb06 <Computer::enableNMI(bool)>:
c000eb06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb0e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb14:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb1c:	eb ce                	jmp    c000eaec <Computer::readCMOS(unsigned char)>

c000eb1e <Computer::open(int, int, void*)>:
c000eb1e:	56                   	push   esi
c000eb1f:	53                   	push   ebx
c000eb20:	83 ec 10             	sub    esp,0x10
c000eb23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb27:	f6 05 60 c9 02 c0 04 	test   BYTE PTR ds:0xc002c960,0x4
c000eb2e:	68 68 22 00 00       	push   0x2268
c000eb33:	0f 94 05 84 b8 02 c0 	sete   BYTE PTR ds:0xc002b884
c000eb3a:	e8 95 09 00 00       	call   c000f4d4 <malloc>
c000eb3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb42:	89 c6                	mov    esi,eax
c000eb44:	e8 e7 8b 00 00       	call   c0017730 <ACPI::ACPI()>
c000eb49:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb4f:	58                   	pop    eax
c000eb50:	5a                   	pop    edx
c000eb51:	56                   	push   esi
c000eb52:	53                   	push   ebx
c000eb53:	e8 18 50 00 00       	call   c0013b70 <Device::addChild(Device*)>
c000eb58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb5b:	e8 cc f9 ff ff       	call   c000e52c <Computer::detectFeatures()>
c000eb60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb63:	e8 ce fb ff ff       	call   c000e736 <Computer::displayFeatures()>
c000eb68:	59                   	pop    ecx
c000eb69:	5e                   	pop    esi
c000eb6a:	6a 01                	push   0x1
c000eb6c:	53                   	push   ebx
c000eb6d:	e8 94 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000eb72:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb79:	e8 56 09 00 00       	call   c000f4d4 <malloc>
c000eb7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb81:	89 c6                	mov    esi,eax
c000eb83:	e8 54 96 00 00       	call   c00181dc <CPU::CPU()>
c000eb88:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb8e:	58                   	pop    eax
c000eb8f:	5a                   	pop    edx
c000eb90:	56                   	push   esi
c000eb91:	53                   	push   ebx
c000eb92:	e8 d9 4f 00 00       	call   c0013b70 <Device::addChild(Device*)>
c000eb97:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eba3:	6a 00                	push   0x0
c000eba5:	6a 00                	push   0x0
c000eba7:	50                   	push   eax
c000eba8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebab:	83 c4 20             	add    esp,0x20
c000ebae:	e8 2f 55 00 00       	call   c00140e2 <setupFPU()>
c000ebb3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ebb9:	85 c0                	test   eax,eax
c000ebbb:	74 1f                	je     c000ebdc <Computer::open(int, int, void*)+0xbe>
c000ebbd:	83 ec 08             	sub    esp,0x8
c000ebc0:	50                   	push   eax
c000ebc1:	53                   	push   ebx
c000ebc2:	e8 a9 4f 00 00       	call   c0013b70 <Device::addChild(Device*)>
c000ebc7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebcd:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebcf:	6a 00                	push   0x0
c000ebd1:	6a 00                	push   0x0
c000ebd3:	6a 00                	push   0x0
c000ebd5:	50                   	push   eax
c000ebd6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebd9:	83 c4 20             	add    esp,0x20
c000ebdc:	83 ec 0c             	sub    esp,0xc
c000ebdf:	68 1e e5 00 c0       	push   0xc000e51e
c000ebe4:	e8 73 e3 00 00       	call   c001cf5c <setupMultitasking(void (*)())>
c000ebe9:	83 c4 14             	add    esp,0x14
c000ebec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebf1:	5b                   	pop    ebx
c000ebf2:	5e                   	pop    esi
c000ebf3:	c3                   	ret    

c000ebf4 <Computer::disableNMI()>:
c000ebf4:	6a 00                	push   0x0
c000ebf6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebfa:	e8 07 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000ebff:	58                   	pop    eax
c000ec00:	5a                   	pop    edx
c000ec01:	c3                   	ret    

c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec0d:	19 c0                	sbb    eax,eax
c000ec0f:	83 e0 80             	and    eax,0xffffff80
c000ec12:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec16:	e6 70                	out    0x70,al
c000ec18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec1c:	e6 71                	out    0x71,al
c000ec1e:	c3                   	ret    
c000ec1f:	90                   	nop

c000ec20 <Computer::handleNMI()>:
c000ec20:	56                   	push   esi
c000ec21:	53                   	push   ebx
c000ec22:	83 ec 10             	sub    esp,0x10
c000ec25:	e4 92                	in     al,0x92
c000ec27:	89 c6                	mov    esi,eax
c000ec29:	e4 61                	in     al,0x61
c000ec2b:	68 b0 8a 02 c0       	push   0xc0028ab0
c000ec30:	88 c3                	mov    bl,al
c000ec32:	e8 4a 3b 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000ec37:	83 c4 10             	add    esp,0x10
c000ec3a:	83 e6 10             	and    esi,0x10
c000ec3d:	75 0d                	jne    c000ec4c <Computer::handleNMI()+0x2c>
c000ec3f:	f6 c3 40             	test   bl,0x40
c000ec42:	75 1d                	jne    c000ec61 <Computer::handleNMI()+0x41>
c000ec44:	84 db                	test   bl,bl
c000ec46:	78 2d                	js     c000ec75 <Computer::handleNMI()+0x55>
c000ec48:	58                   	pop    eax
c000ec49:	5b                   	pop    ebx
c000ec4a:	5e                   	pop    esi
c000ec4b:	c3                   	ret    
c000ec4c:	83 ec 0c             	sub    esp,0xc
c000ec4f:	68 c1 8a 02 c0       	push   0xc0028ac1
c000ec54:	e8 42 ac 00 00       	call   c001989b <Krnl::panic(char const*)>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	f6 c3 40             	test   bl,0x40
c000ec5f:	74 e3                	je     c000ec44 <Computer::handleNMI()+0x24>
c000ec61:	83 ec 0c             	sub    esp,0xc
c000ec64:	68 ce 8a 02 c0       	push   0xc0028ace
c000ec69:	e8 2d ac 00 00       	call   c001989b <Krnl::panic(char const*)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	84 db                	test   bl,bl
c000ec73:	79 d3                	jns    c000ec48 <Computer::handleNMI()+0x28>
c000ec75:	c7 44 24 10 d8 8a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028ad8
c000ec7d:	5a                   	pop    edx
c000ec7e:	5b                   	pop    ebx
c000ec7f:	5e                   	pop    esi
c000ec80:	e9 16 ac 00 00       	jmp    c001989b <Krnl::panic(char const*)>
c000ec85:	90                   	nop

c000ec86 <Computer::setDiskActivityLight(int, bool)>:
c000ec86:	56                   	push   esi
c000ec87:	53                   	push   ebx
c000ec88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec8c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec91:	77 1b                	ja     c000ecae <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec93:	e4 92                	in     al,0x92
c000ec95:	bb 40 00 00 00       	mov    ebx,0x40
c000ec9a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec9e:	89 da                	mov    edx,ebx
c000eca0:	d3 e2                	shl    edx,cl
c000eca2:	89 f1                	mov    ecx,esi
c000eca4:	f7 d2                	not    edx
c000eca6:	d3 e3                	shl    ebx,cl
c000eca8:	21 d0                	and    eax,edx
c000ecaa:	09 d8                	or     eax,ebx
c000ecac:	e6 92                	out    0x92,al
c000ecae:	5b                   	pop    ebx
c000ecaf:	5e                   	pop    esi
c000ecb0:	c3                   	ret    
c000ecb1:	90                   	nop

c000ecb2 <GDTEntry::setBase(unsigned int)>:
c000ecb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecba:	89 c1                	mov    ecx,eax
c000ecbc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecc0:	c1 e9 10             	shr    ecx,0x10
c000ecc3:	c1 e8 18             	shr    eax,0x18
c000ecc6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecc9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000eccc:	c3                   	ret    
c000eccd:	90                   	nop

c000ecce <GDTEntry::setLimit(unsigned int)>:
c000ecce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecd6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecd9:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecdc:	83 e2 f0             	and    edx,0xfffffff0
c000ecdf:	c1 e8 10             	shr    eax,0x10
c000ece2:	83 e0 0f             	and    eax,0xf
c000ece5:	09 d0                	or     eax,edx
c000ece7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecea:	c3                   	ret    
c000eceb:	90                   	nop

c000ecec <GDT::GDT()>:
c000ecec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed00:	90                   	nop
c000ed01:	c3                   	ret    

c000ed02 <GDT::addEntry(GDTEntry)>:
c000ed02:	53                   	push   ebx
c000ed03:	83 ec 0c             	sub    esp,0xc
c000ed06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed0c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ed13:	52                   	push   edx
c000ed14:	50                   	push   eax
c000ed15:	68 14 8b 02 c0       	push   0xc0028b14
c000ed1a:	e8 62 3a 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000ed1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed25:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed29:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed2d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed31:	8d 50 01             	lea    edx,[eax+0x1]
c000ed34:	c1 e0 03             	shl    eax,0x3
c000ed37:	89 13                	mov    DWORD PTR [ebx],edx
c000ed39:	83 c4 18             	add    esp,0x18
c000ed3c:	5b                   	pop    ebx
c000ed3d:	c3                   	ret    

c000ed3e <GDT::getNumberOfEntries()>:
c000ed3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed42:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed44:	c3                   	ret    
c000ed45:	90                   	nop

c000ed46 <GDT::flush()>:
c000ed46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed4a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed4c:	83 c0 04             	add    eax,0x4
c000ed4f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed56:	a3 52 c9 02 c0       	mov    ds:0xc002c952,eax
c000ed5b:	66 89 15 50 c9 02 c0 	mov    WORD PTR ds:0xc002c950,dx
c000ed62:	e9 96 16 ff ff       	jmp    c00003fd <loadGDT>
c000ed67:	90                   	nop

c000ed68 <GDT::setup()>:
c000ed68:	55                   	push   ebp
c000ed69:	57                   	push   edi
c000ed6a:	56                   	push   esi
c000ed6b:	53                   	push   ebx
c000ed6c:	83 ec 3c             	sub    esp,0x3c
c000ed6f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed73:	6a 00                	push   0x0
c000ed75:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed79:	53                   	push   ebx
c000ed7a:	e8 33 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed7f:	6a 00                	push   0x0
c000ed81:	53                   	push   ebx
c000ed82:	e8 47 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000ed87:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed8f:	6a 00                	push   0x0
c000ed91:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed95:	53                   	push   ebx
c000ed96:	e8 17 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed9b:	68 ff ff ff 00       	push   0xffffff
c000eda0:	53                   	push   ebx
c000eda1:	e8 28 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000eda6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edaa:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edaf:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edb4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edb8:	83 c4 20             	add    esp,0x20
c000edbb:	6a 00                	push   0x0
c000edbd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edc1:	53                   	push   ebx
c000edc2:	e8 eb fe ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000edc7:	68 ff ff ff 00       	push   0xffffff
c000edcc:	53                   	push   ebx
c000edcd:	e8 fc fe ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000edd2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edda:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edde:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ede2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ede6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edeb:	0d 00 92 c0 00       	or     eax,0xc09200
c000edf0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edf4:	89 d8                	mov    eax,ebx
c000edf6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edfa:	80 cc 60             	or     ah,0x60
c000edfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee01:	83 c4 0c             	add    esp,0xc
c000ee04:	89 f8                	mov    eax,edi
c000ee06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee0a:	80 cc 60             	or     ah,0x60
c000ee0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee11:	89 c7                	mov    edi,eax
c000ee13:	55                   	push   ebp
c000ee14:	e8 e9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee19:	83 c4 0c             	add    esp,0xc
c000ee1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee20:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee24:	55                   	push   ebp
c000ee25:	e8 d8 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee2a:	83 c4 0c             	add    esp,0xc
c000ee2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee35:	55                   	push   ebp
c000ee36:	e8 c7 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee3b:	83 c4 0c             	add    esp,0xc
c000ee3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee46:	53                   	push   ebx
c000ee47:	51                   	push   ecx
c000ee48:	55                   	push   ebp
c000ee49:	e8 b4 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee4e:	83 c4 0c             	add    esp,0xc
c000ee51:	57                   	push   edi
c000ee52:	56                   	push   esi
c000ee53:	55                   	push   ebp
c000ee54:	e8 a9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee59:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee5c:	e8 e5 fe ff ff       	call   c000ed46 <GDT::flush()>
c000ee61:	83 c4 4c             	add    esp,0x4c
c000ee64:	5b                   	pop    ebx
c000ee65:	5e                   	pop    esi
c000ee66:	5f                   	pop    edi
c000ee67:	5d                   	pop    ebp
c000ee68:	c3                   	ret    

c000ee69 <idleFunction(void*)>:
c000ee69:	53                   	push   ebx
c000ee6a:	83 ec 08             	sub    esp,0x8
c000ee6d:	e8 ba de 00 00       	call   c001cd2c <unlockScheduler()>
c000ee72:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c000ee77:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee7d:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee84:	74 3c                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee86:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee8d:	74 33                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee8f:	31 db                	xor    ebx,ebx
c000ee91:	52                   	push   edx
c000ee92:	52                   	push   edx
c000ee93:	68 e1 00 00 00       	push   0xe1
c000ee98:	50                   	push   eax
c000ee99:	e8 de fb ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c000ee9e:	53                   	push   ebx
c000ee9f:	83 e0 02             	and    eax,0x2
c000eea2:	50                   	push   eax
c000eea3:	68 e1 00 00 00       	push   0xe1
c000eea8:	ff 35 48 c9 02 c0    	push   DWORD PTR ds:0xc002c948
c000eeae:	e8 f5 fb ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eeb3:	83 c4 20             	add    esp,0x20
c000eeb6:	e8 79 13 ff ff       	call   c0000234 <doTPAUSE>
c000eebb:	e8 f0 81 01 00       	call   c00270b0 <idleCommon()>
c000eec0:	eb f4                	jmp    c000eeb6 <idleFunction(void*)+0x4d>
c000eec2:	fb                   	sti    
c000eec3:	f4                   	hlt    
c000eec4:	e8 e7 81 01 00       	call   c00270b0 <idleCommon()>
c000eec9:	eb f7                	jmp    c000eec2 <idleFunction(void*)+0x59>
c000eecb:	90                   	nop

c000eecc <IDTEntry::IDTEntry(bool)>:
c000eecc:	83 ec 04             	sub    esp,0x4
c000eecf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed3:	88 04 24             	mov    BYTE PTR [esp],al
c000eed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeda:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeec:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeef:	83 e2 f0             	and    edx,0xfffffff0
c000eef2:	83 ca 0e             	or     edx,0xe
c000eef5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eefc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeff:	83 e2 ef             	and    edx,0xffffffef
c000ef02:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef05:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ef09:	74 04                	je     c000ef0f <IDTEntry::IDTEntry(bool)+0x43>
c000ef0b:	b2 03                	mov    dl,0x3
c000ef0d:	eb 02                	jmp    c000ef11 <IDTEntry::IDTEntry(bool)+0x45>
c000ef0f:	b2 00                	mov    dl,0x0
c000ef11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef15:	83 e2 03             	and    edx,0x3
c000ef18:	88 d1                	mov    cl,dl
c000ef1a:	c1 e1 05             	shl    ecx,0x5
c000ef1d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef20:	83 e2 9f             	and    edx,0xffffff9f
c000ef23:	09 ca                	or     edx,ecx
c000ef25:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef2c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef2f:	83 ca 80             	or     edx,0xffffff80
c000ef32:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef35:	90                   	nop
c000ef36:	83 c4 04             	add    esp,0x4
c000ef39:	c3                   	ret    

c000ef3a <IDTEntry::setOffset(unsigned int)>:
c000ef3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef42:	66 89 02             	mov    WORD PTR [edx],ax
c000ef45:	c1 e8 10             	shr    eax,0x10
c000ef48:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef4c:	c3                   	ret    
c000ef4d:	90                   	nop

c000ef4e <IDT::IDT()>:
c000ef4e:	90                   	nop
c000ef4f:	c3                   	ret    

c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef54:	83 c0 30             	add    eax,0x30
c000ef57:	c3                   	ret    

c000ef58 <IDT::addEntry(IDTEntry, int)>:
c000ef58:	53                   	push   ebx
c000ef59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef69:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef6c:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef70:	5b                   	pop    ebx
c000ef71:	c3                   	ret    

c000ef72 <IDT::addEntry(int, void (*)(), bool)>:
c000ef72:	53                   	push   ebx
c000ef73:	83 ec 10             	sub    esp,0x10
c000ef76:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef7b:	50                   	push   eax
c000ef7c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef80:	53                   	push   ebx
c000ef81:	e8 46 ff ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000ef86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef8a:	53                   	push   ebx
c000ef8b:	e8 aa ff ff ff       	call   c000ef3a <IDTEntry::setOffset(unsigned int)>
c000ef90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efa0:	e8 b3 ff ff ff       	call   c000ef58 <IDT::addEntry(IDTEntry, int)>
c000efa5:	83 c4 30             	add    esp,0x30
c000efa8:	5b                   	pop    ebx
c000efa9:	c3                   	ret    

c000efaa <IDT::flush()>:
c000efaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efae:	66 c7 05 58 c9 02 c0 ff 07 	mov    WORD PTR ds:0xc002c958,0x7ff
c000efb7:	a3 5a c9 02 c0       	mov    ds:0xc002c95a,eax
c000efbc:	0f 01 1d 58 c9 02 c0 	lidtd  ds:0xc002c958
c000efc3:	c3                   	ret    

c000efc4 <IDT::setup()>:
c000efc4:	57                   	push   edi
c000efc5:	56                   	push   esi
c000efc6:	53                   	push   ebx
c000efc7:	83 ec 10             	sub    esp,0x10
c000efca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efce:	6a 00                	push   0x0
c000efd0:	68 1d 04 00 c0       	push   0xc000041d
c000efd5:	6a 00                	push   0x0
c000efd7:	53                   	push   ebx
c000efd8:	e8 95 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efdd:	6a 00                	push   0x0
c000efdf:	68 2d 04 00 c0       	push   0xc000042d
c000efe4:	6a 01                	push   0x1
c000efe6:	53                   	push   ebx
c000efe7:	e8 86 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efec:	83 c4 20             	add    esp,0x20
c000efef:	6a 00                	push   0x0
c000eff1:	68 37 04 00 c0       	push   0xc0000437
c000eff6:	6a 02                	push   0x2
c000eff8:	53                   	push   ebx
c000eff9:	e8 74 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000effe:	6a 00                	push   0x0
c000f000:	68 41 04 00 c0       	push   0xc0000441
c000f005:	6a 03                	push   0x3
c000f007:	53                   	push   ebx
c000f008:	e8 65 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f00d:	83 c4 20             	add    esp,0x20
c000f010:	6a 00                	push   0x0
c000f012:	68 4b 04 00 c0       	push   0xc000044b
c000f017:	6a 04                	push   0x4
c000f019:	53                   	push   ebx
c000f01a:	e8 53 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f01f:	6a 00                	push   0x0
c000f021:	68 55 04 00 c0       	push   0xc0000455
c000f026:	6a 05                	push   0x5
c000f028:	53                   	push   ebx
c000f029:	e8 44 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f02e:	83 c4 20             	add    esp,0x20
c000f031:	6a 00                	push   0x0
c000f033:	68 5f 04 00 c0       	push   0xc000045f
c000f038:	6a 06                	push   0x6
c000f03a:	53                   	push   ebx
c000f03b:	e8 32 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f040:	6a 00                	push   0x0
c000f042:	68 69 04 00 c0       	push   0xc0000469
c000f047:	6a 07                	push   0x7
c000f049:	53                   	push   ebx
c000f04a:	e8 23 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f04f:	83 c4 20             	add    esp,0x20
c000f052:	6a 00                	push   0x0
c000f054:	68 73 04 00 c0       	push   0xc0000473
c000f059:	6a 08                	push   0x8
c000f05b:	53                   	push   ebx
c000f05c:	e8 11 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f061:	6a 00                	push   0x0
c000f063:	68 7b 04 00 c0       	push   0xc000047b
c000f068:	6a 09                	push   0x9
c000f06a:	53                   	push   ebx
c000f06b:	e8 02 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f070:	83 c4 20             	add    esp,0x20
c000f073:	6a 00                	push   0x0
c000f075:	68 85 04 00 c0       	push   0xc0000485
c000f07a:	6a 0a                	push   0xa
c000f07c:	53                   	push   ebx
c000f07d:	e8 f0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f082:	6a 00                	push   0x0
c000f084:	68 8d 04 00 c0       	push   0xc000048d
c000f089:	6a 0b                	push   0xb
c000f08b:	53                   	push   ebx
c000f08c:	e8 e1 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f091:	83 c4 20             	add    esp,0x20
c000f094:	6a 00                	push   0x0
c000f096:	68 95 04 00 c0       	push   0xc0000495
c000f09b:	6a 0c                	push   0xc
c000f09d:	53                   	push   ebx
c000f09e:	e8 cf fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0a3:	6a 00                	push   0x0
c000f0a5:	68 9d 04 00 c0       	push   0xc000049d
c000f0aa:	6a 0d                	push   0xd
c000f0ac:	53                   	push   ebx
c000f0ad:	e8 c0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0b2:	83 c4 20             	add    esp,0x20
c000f0b5:	6a 00                	push   0x0
c000f0b7:	68 a5 04 00 c0       	push   0xc00004a5
c000f0bc:	6a 0e                	push   0xe
c000f0be:	53                   	push   ebx
c000f0bf:	e8 ae fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0c4:	6a 00                	push   0x0
c000f0c6:	68 ad 04 00 c0       	push   0xc00004ad
c000f0cb:	6a 0f                	push   0xf
c000f0cd:	53                   	push   ebx
c000f0ce:	e8 9f fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0d3:	83 c4 20             	add    esp,0x20
c000f0d6:	6a 00                	push   0x0
c000f0d8:	68 b7 04 00 c0       	push   0xc00004b7
c000f0dd:	6a 10                	push   0x10
c000f0df:	53                   	push   ebx
c000f0e0:	e8 8d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0e5:	6a 00                	push   0x0
c000f0e7:	68 c1 04 00 c0       	push   0xc00004c1
c000f0ec:	6a 11                	push   0x11
c000f0ee:	53                   	push   ebx
c000f0ef:	e8 7e fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0f4:	83 c4 20             	add    esp,0x20
c000f0f7:	6a 00                	push   0x0
c000f0f9:	68 cb 04 00 c0       	push   0xc00004cb
c000f0fe:	6a 12                	push   0x12
c000f100:	53                   	push   ebx
c000f101:	e8 6c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f106:	6a 01                	push   0x1
c000f108:	68 65 05 00 c0       	push   0xc0000565
c000f10d:	6a 60                	push   0x60
c000f10f:	53                   	push   ebx
c000f110:	e8 5d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f115:	83 c4 20             	add    esp,0x20
c000f118:	6a 00                	push   0x0
c000f11a:	68 6c 05 00 c0       	push   0xc000056c
c000f11f:	6a 20                	push   0x20
c000f121:	53                   	push   ebx
c000f122:	e8 4b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f127:	6a 00                	push   0x0
c000f129:	68 57 05 00 c0       	push   0xc0000557
c000f12e:	6a 21                	push   0x21
c000f130:	53                   	push   ebx
c000f131:	e8 3c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f136:	83 c4 20             	add    esp,0x20
c000f139:	6a 00                	push   0x0
c000f13b:	68 5e 05 00 c0       	push   0xc000055e
c000f140:	6a 22                	push   0x22
c000f142:	53                   	push   ebx
c000f143:	e8 2a fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f148:	6a 00                	push   0x0
c000f14a:	68 d5 04 00 c0       	push   0xc00004d5
c000f14f:	6a 23                	push   0x23
c000f151:	53                   	push   ebx
c000f152:	e8 1b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f157:	83 c4 20             	add    esp,0x20
c000f15a:	6a 00                	push   0x0
c000f15c:	68 df 04 00 c0       	push   0xc00004df
c000f161:	6a 24                	push   0x24
c000f163:	53                   	push   ebx
c000f164:	e8 09 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f169:	6a 00                	push   0x0
c000f16b:	68 e9 04 00 c0       	push   0xc00004e9
c000f170:	6a 25                	push   0x25
c000f172:	53                   	push   ebx
c000f173:	e8 fa fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f178:	83 c4 20             	add    esp,0x20
c000f17b:	6a 00                	push   0x0
c000f17d:	68 f3 04 00 c0       	push   0xc00004f3
c000f182:	6a 26                	push   0x26
c000f184:	53                   	push   ebx
c000f185:	e8 e8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f18a:	6a 00                	push   0x0
c000f18c:	68 fd 04 00 c0       	push   0xc00004fd
c000f191:	6a 27                	push   0x27
c000f193:	53                   	push   ebx
c000f194:	e8 d9 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f199:	83 c4 20             	add    esp,0x20
c000f19c:	6a 00                	push   0x0
c000f19e:	68 07 05 00 c0       	push   0xc0000507
c000f1a3:	6a 28                	push   0x28
c000f1a5:	53                   	push   ebx
c000f1a6:	e8 c7 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ab:	6a 00                	push   0x0
c000f1ad:	68 11 05 00 c0       	push   0xc0000511
c000f1b2:	6a 29                	push   0x29
c000f1b4:	53                   	push   ebx
c000f1b5:	e8 b8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ba:	83 c4 20             	add    esp,0x20
c000f1bd:	6a 00                	push   0x0
c000f1bf:	68 1b 05 00 c0       	push   0xc000051b
c000f1c4:	6a 2a                	push   0x2a
c000f1c6:	53                   	push   ebx
c000f1c7:	e8 a6 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1cc:	6a 00                	push   0x0
c000f1ce:	68 25 05 00 c0       	push   0xc0000525
c000f1d3:	6a 2b                	push   0x2b
c000f1d5:	53                   	push   ebx
c000f1d6:	e8 97 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1db:	83 c4 20             	add    esp,0x20
c000f1de:	6a 00                	push   0x0
c000f1e0:	68 2f 05 00 c0       	push   0xc000052f
c000f1e5:	6a 2c                	push   0x2c
c000f1e7:	53                   	push   ebx
c000f1e8:	e8 85 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ed:	6a 00                	push   0x0
c000f1ef:	68 39 05 00 c0       	push   0xc0000539
c000f1f4:	6a 2d                	push   0x2d
c000f1f6:	53                   	push   ebx
c000f1f7:	e8 76 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1fc:	83 c4 20             	add    esp,0x20
c000f1ff:	6a 00                	push   0x0
c000f201:	68 43 05 00 c0       	push   0xc0000543
c000f206:	6a 2e                	push   0x2e
c000f208:	53                   	push   ebx
c000f209:	e8 64 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f20e:	6a 00                	push   0x0
c000f210:	68 4d 05 00 c0       	push   0xc000054d
c000f215:	6a 2f                	push   0x2f
c000f217:	53                   	push   ebx
c000f218:	e8 55 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f21d:	83 c4 20             	add    esp,0x20
c000f220:	6a 00                	push   0x0
c000f222:	68 a2 05 00 c0       	push   0xc00005a2
c000f227:	6a 30                	push   0x30
c000f229:	53                   	push   ebx
c000f22a:	e8 43 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f22f:	6a 00                	push   0x0
c000f231:	68 ac 05 00 c0       	push   0xc00005ac
c000f236:	6a 31                	push   0x31
c000f238:	53                   	push   ebx
c000f239:	e8 34 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f23e:	83 c4 20             	add    esp,0x20
c000f241:	6a 00                	push   0x0
c000f243:	68 b6 05 00 c0       	push   0xc00005b6
c000f248:	6a 32                	push   0x32
c000f24a:	53                   	push   ebx
c000f24b:	e8 22 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f250:	6a 00                	push   0x0
c000f252:	68 c0 05 00 c0       	push   0xc00005c0
c000f257:	6a 33                	push   0x33
c000f259:	53                   	push   ebx
c000f25a:	e8 13 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f25f:	83 c4 20             	add    esp,0x20
c000f262:	6a 00                	push   0x0
c000f264:	68 ca 05 00 c0       	push   0xc00005ca
c000f269:	6a 34                	push   0x34
c000f26b:	53                   	push   ebx
c000f26c:	e8 01 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f271:	6a 00                	push   0x0
c000f273:	68 d4 05 00 c0       	push   0xc00005d4
c000f278:	6a 35                	push   0x35
c000f27a:	53                   	push   ebx
c000f27b:	e8 f2 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f280:	83 c4 20             	add    esp,0x20
c000f283:	6a 00                	push   0x0
c000f285:	68 de 05 00 c0       	push   0xc00005de
c000f28a:	6a 36                	push   0x36
c000f28c:	53                   	push   ebx
c000f28d:	e8 e0 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f292:	6a 00                	push   0x0
c000f294:	68 e8 05 00 c0       	push   0xc00005e8
c000f299:	6a 37                	push   0x37
c000f29b:	53                   	push   ebx
c000f29c:	e8 d1 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f2a1:	83 c4 20             	add    esp,0x20
c000f2a4:	e8 78 26 00 00       	call   c0011921 <Virt::getAKernelVAS()>
c000f2a9:	52                   	push   edx
c000f2aa:	6a 03                	push   0x3
c000f2ac:	6a 02                	push   0x2
c000f2ae:	50                   	push   eax
c000f2af:	e8 a8 2c 00 00       	call   c0011f5c <VAS::allocatePages(int, int)>
c000f2b4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2bb:	89 c6                	mov    esi,eax
c000f2bd:	e8 12 02 00 00       	call   c000f4d4 <malloc>
c000f2c2:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2cb:	89 c7                	mov    edi,eax
c000f2cd:	e8 f0 1d 00 00       	call   c00110c2 <TSS::TSS()>
c000f2d2:	83 c4 0c             	add    esp,0xc
c000f2d5:	68 73 04 00 c0       	push   0xc0000473
c000f2da:	56                   	push   esi
c000f2db:	57                   	push   edi
c000f2dc:	e8 21 1e 00 00       	call   c0011102 <TSS::setup(unsigned long, unsigned long)>
c000f2e1:	59                   	pop    ecx
c000f2e2:	89 c6                	mov    esi,eax
c000f2e4:	5f                   	pop    edi
c000f2e5:	6a 00                	push   0x0
c000f2e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2eb:	50                   	push   eax
c000f2ec:	e8 db fb ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000f2f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2f5:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2fa:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f301:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f307:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f30b:	80 ce 05             	or     dh,0x5
c000f30e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f311:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f315:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f319:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f31c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f31f:	e8 86 fc ff ff       	call   c000efaa <IDT::flush()>
c000f324:	83 c4 20             	add    esp,0x20
c000f327:	5b                   	pop    ebx
c000f328:	5e                   	pop    esi
c000f329:	5f                   	pop    edi
c000f32a:	c3                   	ret    

c000f32b <sbrk>:
c000f32b:	55                   	push   ebp
c000f32c:	57                   	push   edi
c000f32d:	56                   	push   esi
c000f32e:	53                   	push   ebx
c000f32f:	83 ec 1c             	sub    esp,0x1c
c000f332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f336:	85 c0                	test   eax,eax
c000f338:	74 3e                	je     c000f378 <sbrk+0x4d>
c000f33a:	78 43                	js     c000f37f <sbrk+0x54>
c000f33c:	8b 15 48 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c948
c000f342:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f348:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f34e:	83 e2 01             	and    edx,0x1
c000f351:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f355:	8b 0d 6c b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b86c
c000f35b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f35f:	05 ff 0f 00 00       	add    eax,0xfff
c000f364:	89 c2                	mov    edx,eax
c000f366:	78 2f                	js     c000f397 <sbrk+0x6c>
c000f368:	c1 fa 0c             	sar    edx,0xc
c000f36b:	89 d7                	mov    edi,edx
c000f36d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f371:	be 00 00 00 00       	mov    esi,0x0
c000f376:	eb 36                	jmp    c000f3ae <sbrk+0x83>
c000f378:	a1 6c b8 02 c0       	mov    eax,ds:0xc002b86c
c000f37d:	eb 74                	jmp    c000f3f3 <sbrk+0xc8>
c000f37f:	83 ec 08             	sub    esp,0x8
c000f382:	50                   	push   eax
c000f383:	68 30 8b 02 c0       	push   0xc0028b30
c000f388:	e8 f4 33 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f395:	eb 5c                	jmp    c000f3f3 <sbrk+0xc8>
c000f397:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f39d:	eb c9                	jmp    c000f368 <sbrk+0x3d>
c000f39f:	81 05 6c b8 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002b86c,0x1000
c000f3a9:	46                   	inc    esi
c000f3aa:	39 f7                	cmp    edi,esi
c000f3ac:	74 34                	je     c000f3e2 <sbrk+0xb7>
c000f3ae:	e8 6e 25 00 00       	call   c0011921 <Virt::getAKernelVAS()>
c000f3b3:	89 c3                	mov    ebx,eax
c000f3b5:	8b 2d 6c b8 02 c0    	mov    ebp,DWORD PTR ds:0xc002b86c
c000f3bb:	e8 be 06 00 00       	call   c000fa7e <Phys::allocatePage()>
c000f3c0:	68 01 04 00 00       	push   0x401
c000f3c5:	55                   	push   ebp
c000f3c6:	50                   	push   eax
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 8f 2a 00 00       	call   c0011e5c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3cd:	83 c4 10             	add    esp,0x10
c000f3d0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d5:	74 c8                	je     c000f39f <sbrk+0x74>
c000f3d7:	8b 1d 6c b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b86c
c000f3dd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3e0:	eb bd                	jmp    c000f39f <sbrk+0x74>
c000f3e2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3e7:	75 12                	jne    c000f3fb <sbrk+0xd0>
c000f3e9:	0f 20 d8             	mov    eax,cr3
c000f3ec:	0f 22 d8             	mov    cr3,eax
c000f3ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3f3:	83 c4 1c             	add    esp,0x1c
c000f3f6:	5b                   	pop    ebx
c000f3f7:	5e                   	pop    esi
c000f3f8:	5f                   	pop    edi
c000f3f9:	5d                   	pop    ebp
c000f3fa:	c3                   	ret    
c000f3fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3ff:	89 cb                	mov    ebx,ecx
c000f401:	c1 eb 0a             	shr    ebx,0xa
c000f404:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f40a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f414:	c1 e0 0c             	shl    eax,0xc
c000f417:	01 c8                	add    eax,ecx
c000f419:	c1 e8 0a             	shr    eax,0xa
c000f41c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f421:	2d 00 00 40 00       	sub    eax,0x400000
c000f426:	39 c3                	cmp    ebx,eax
c000f428:	77 c5                	ja     c000f3ef <sbrk+0xc4>
c000f42a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f42d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f433:	39 d8                	cmp    eax,ebx
c000f435:	73 f3                	jae    c000f42a <sbrk+0xff>
c000f437:	eb b6                	jmp    c000f3ef <sbrk+0xc4>

c000f439 <mmap>:
c000f439:	83 ec 18             	sub    esp,0x18
c000f43c:	68 60 8b 02 c0       	push   0xc0028b60
c000f441:	e8 55 a4 00 00       	call   c001989b <Krnl::panic(char const*)>
c000f446:	b8 00 00 00 00       	mov    eax,0x0
c000f44b:	83 c4 1c             	add    esp,0x1c
c000f44e:	c3                   	ret    

c000f44f <munmap>:
c000f44f:	83 ec 18             	sub    esp,0x18
c000f452:	68 65 8b 02 c0       	push   0xc0028b65
c000f457:	e8 3f a4 00 00       	call   c001989b <Krnl::panic(char const*)>
c000f45c:	b8 00 00 00 00       	mov    eax,0x0
c000f461:	83 c4 1c             	add    esp,0x1c
c000f464:	c3                   	ret    

c000f465 <liballoc_lock()>:
c000f465:	83 ec 0c             	sub    esp,0xc
c000f468:	e8 bd d8 00 00       	call   c001cd2a <lockScheduler()>
c000f46d:	b8 00 00 00 00       	mov    eax,0x0
c000f472:	83 c4 0c             	add    esp,0xc
c000f475:	c3                   	ret    

c000f476 <liballoc_unlock()>:
c000f476:	83 ec 0c             	sub    esp,0xc
c000f479:	e8 ae d8 00 00       	call   c001cd2c <unlockScheduler()>
c000f47e:	b8 00 00 00 00       	mov    eax,0x0
c000f483:	83 c4 0c             	add    esp,0xc
c000f486:	c3                   	ret    

c000f487 <liballoc_alloc(int)>:
c000f487:	83 ec 0c             	sub    esp,0xc
c000f48a:	e8 92 24 00 00       	call   c0011921 <Virt::getAKernelVAS()>
c000f48f:	83 ec 04             	sub    esp,0x4
c000f492:	6a 01                	push   0x1
c000f494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f498:	50                   	push   eax
c000f499:	e8 be 2a 00 00       	call   c0011f5c <VAS::allocatePages(int, int)>
c000f49e:	83 c4 1c             	add    esp,0x1c
c000f4a1:	c3                   	ret    

c000f4a2 <liballoc_free(void*, int)>:
c000f4a2:	83 ec 0c             	sub    esp,0xc
c000f4a5:	e8 77 24 00 00       	call   c0011921 <Virt::getAKernelVAS()>
c000f4aa:	83 ec 08             	sub    esp,0x8
c000f4ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4b1:	50                   	push   eax
c000f4b2:	e8 61 27 00 00       	call   c0011c18 <VAS::freeAllocatedPages(unsigned long)>
c000f4b7:	b8 00 00 00 00       	mov    eax,0x0
c000f4bc:	83 c4 1c             	add    esp,0x1c
c000f4bf:	c3                   	ret    

c000f4c0 <realloc>:
c000f4c0:	83 ec 14             	sub    esp,0x14
c000f4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4cb:	e8 34 1f ff ff       	call   c0001404 <dlrealloc>
c000f4d0:	83 c4 1c             	add    esp,0x1c
c000f4d3:	c3                   	ret    

c000f4d4 <malloc>:
c000f4d4:	83 ec 18             	sub    esp,0x18
c000f4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4db:	e8 e7 19 ff ff       	call   c0000ec7 <dlmalloc>
c000f4e0:	83 c4 1c             	add    esp,0x1c
c000f4e3:	c3                   	ret    

c000f4e4 <free>:
c000f4e4:	83 ec 18             	sub    esp,0x18
c000f4e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4eb:	e8 7c 16 ff ff       	call   c0000b6c <dlfree>
c000f4f0:	83 c4 1c             	add    esp,0x1c
c000f4f3:	c3                   	ret    

c000f4f4 <rfree>:
c000f4f4:	83 ec 18             	sub    esp,0x18
c000f4f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4fb:	e8 6c 16 ff ff       	call   c0000b6c <dlfree>
c000f500:	83 c4 1c             	add    esp,0x1c
c000f503:	c3                   	ret    

c000f504 <calloc>:
c000f504:	56                   	push   esi
c000f505:	53                   	push   ebx
c000f506:	83 ec 10             	sub    esp,0x10
c000f509:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f50d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f512:	53                   	push   ebx
c000f513:	e8 bc ff ff ff       	call   c000f4d4 <malloc>
c000f518:	89 c6                	mov    esi,eax
c000f51a:	83 c4 0c             	add    esp,0xc
c000f51d:	53                   	push   ebx
c000f51e:	6a 00                	push   0x0
c000f520:	50                   	push   eax
c000f521:	e8 65 11 ff ff       	call   c000068b <memset>
c000f526:	89 f0                	mov    eax,esi
c000f528:	83 c4 14             	add    esp,0x14
c000f52b:	5b                   	pop    ebx
c000f52c:	5e                   	pop    esi
c000f52d:	c3                   	ret    

c000f52e <hwTextMode_loadInData(VgaText*)>:
c000f52e:	57                   	push   edi
c000f52f:	56                   	push   esi
c000f530:	53                   	push   ebx
c000f531:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f535:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f53b:	85 c0                	test   eax,eax
c000f53d:	7e 30                	jle    c000f56f <hwTextMode_loadInData(VgaText*)+0x41>
c000f53f:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f542:	31 f6                	xor    esi,esi
c000f544:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f547:	31 c0                	xor    eax,eax
c000f549:	c1 e1 05             	shl    ecx,0x5
c000f54c:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f552:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f556:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f55a:	40                   	inc    eax
c000f55b:	83 f8 50             	cmp    eax,0x50
c000f55e:	75 f2                	jne    c000f552 <hwTextMode_loadInData(VgaText*)+0x24>
c000f560:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f566:	46                   	inc    esi
c000f567:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f56d:	7f d5                	jg     c000f544 <hwTextMode_loadInData(VgaText*)+0x16>
c000f56f:	5b                   	pop    ebx
c000f570:	5e                   	pop    esi
c000f571:	5f                   	pop    edi
c000f572:	c3                   	ret    

c000f573 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f573:	56                   	push   esi
c000f574:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f579:	53                   	push   ebx
c000f57a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f57e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f582:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f588:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f58e:	c1 e0 04             	shl    eax,0x4
c000f591:	83 e6 0f             	and    esi,0xf
c000f594:	0f b6 c0             	movzx  eax,al
c000f597:	41                   	inc    ecx
c000f598:	09 f0                	or     eax,esi
c000f59a:	83 c2 02             	add    edx,0x2
c000f59d:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f5a1:	c1 e0 08             	shl    eax,0x8
c000f5a4:	09 f0                	or     eax,esi
c000f5a6:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f5aa:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f5b0:	75 d0                	jne    c000f582 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f5b2:	5b                   	pop    ebx
c000f5b3:	5e                   	pop    esi
c000f5b4:	c3                   	ret    

c000f5b5 <hwTextMode_showCursor(VgaText*, bool)>:
c000f5b5:	56                   	push   esi
c000f5b6:	53                   	push   ebx
c000f5b7:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f5bc:	74 38                	je     c000f5f6 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f5be:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f5c3:	b0 0a                	mov    al,0xa
c000f5c5:	89 da                	mov    edx,ebx
c000f5c7:	ee                   	out    dx,al
c000f5c8:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f5cd:	89 ca                	mov    edx,ecx
c000f5cf:	ec                   	in     al,dx
c000f5d0:	b2 0f                	mov    dl,0xf
c000f5d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f5d6:	83 e0 c0             	and    eax,0xffffffc0
c000f5d9:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f5df:	09 d0                	or     eax,edx
c000f5e1:	89 ca                	mov    edx,ecx
c000f5e3:	ee                   	out    dx,al
c000f5e4:	b0 0b                	mov    al,0xb
c000f5e6:	89 da                	mov    edx,ebx
c000f5e8:	ee                   	out    dx,al
c000f5e9:	89 ca                	mov    edx,ecx
c000f5eb:	ec                   	in     al,dx
c000f5ec:	83 e0 e0             	and    eax,0xffffffe0
c000f5ef:	83 c8 0f             	or     eax,0xf
c000f5f2:	ee                   	out    dx,al
c000f5f3:	5b                   	pop    ebx
c000f5f4:	5e                   	pop    esi
c000f5f5:	c3                   	ret    
c000f5f6:	b0 0a                	mov    al,0xa
c000f5f8:	ba d4 03 00 00       	mov    edx,0x3d4
c000f5fd:	ee                   	out    dx,al
c000f5fe:	b0 20                	mov    al,0x20
c000f600:	ba d5 03 00 00       	mov    edx,0x3d5
c000f605:	ee                   	out    dx,al
c000f606:	5b                   	pop    ebx
c000f607:	5e                   	pop    esi
c000f608:	c3                   	ret    

c000f609 <hwTextMode_update(VgaText*)>:
c000f609:	c3                   	ret    

c000f60a <hwTextMode_updateCursor(VgaText*)>:
c000f60a:	56                   	push   esi
c000f60b:	b9 19 00 00 00       	mov    ecx,0x19
c000f610:	53                   	push   ebx
c000f611:	be d4 03 00 00       	mov    esi,0x3d4
c000f616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f61a:	89 f2                	mov    edx,esi
c000f61c:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f622:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f628:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f62b:	c1 e1 04             	shl    ecx,0x4
c000f62e:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f634:	b0 0f                	mov    al,0xf
c000f636:	ee                   	out    dx,al
c000f637:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f63c:	88 c8                	mov    al,cl
c000f63e:	89 da                	mov    edx,ebx
c000f640:	ee                   	out    dx,al
c000f641:	b0 0e                	mov    al,0xe
c000f643:	89 f2                	mov    edx,esi
c000f645:	ee                   	out    dx,al
c000f646:	89 c8                	mov    eax,ecx
c000f648:	89 da                	mov    edx,ebx
c000f64a:	66 c1 e8 08          	shr    ax,0x8
c000f64e:	ee                   	out    dx,al
c000f64f:	5b                   	pop    ebx
c000f650:	5e                   	pop    esi
c000f651:	c3                   	ret    

c000f652 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f652:	ba da 03 00 00       	mov    edx,0x3da
c000f657:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f65c:	75 18                	jne    c000f676 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f65e:	ec                   	in     al,dx
c000f65f:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f664:	b0 30                	mov    al,0x30
c000f666:	89 ca                	mov    edx,ecx
c000f668:	ee                   	out    dx,al
c000f669:	ba c1 03 00 00       	mov    edx,0x3c1
c000f66e:	ec                   	in     al,dx
c000f66f:	83 c8 08             	or     eax,0x8
c000f672:	89 ca                	mov    edx,ecx
c000f674:	ee                   	out    dx,al
c000f675:	c3                   	ret    
c000f676:	ec                   	in     al,dx
c000f677:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f67c:	b0 30                	mov    al,0x30
c000f67e:	89 ca                	mov    edx,ecx
c000f680:	ee                   	out    dx,al
c000f681:	ba c1 03 00 00       	mov    edx,0x3c1
c000f686:	ec                   	in     al,dx
c000f687:	83 e0 f7             	and    eax,0xfffffff7
c000f68a:	89 ca                	mov    edx,ecx
c000f68c:	ee                   	out    dx,al
c000f68d:	c3                   	ret    

c000f68e <hwTextMode_scrollScreen(VgaText*)>:
c000f68e:	55                   	push   ebp
c000f68f:	bd 02 00 00 00       	mov    ebp,0x2
c000f694:	57                   	push   edi
c000f695:	56                   	push   esi
c000f696:	53                   	push   ebx
c000f697:	83 ec 1c             	sub    esp,0x1c
c000f69a:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f6a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f6a6:	31 c0                	xor    eax,eax
c000f6a8:	eb 0b                	jmp    c000f6b5 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f6aa:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6b0:	74 57                	je     c000f709 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f6b2:	43                   	inc    ebx
c000f6b3:	89 f0                	mov    eax,esi
c000f6b5:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f6bb:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f6c1:	88 13                	mov    BYTE PTR [ebx],dl
c000f6c3:	8d 70 01             	lea    esi,[eax+0x1]
c000f6c6:	83 fd 18             	cmp    ebp,0x18
c000f6c9:	75 df                	jne    c000f6aa <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f6cb:	a8 01                	test   al,0x1
c000f6cd:	75 13                	jne    c000f6e2 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f6cf:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f6d2:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6d8:	75 d8                	jne    c000f6b2 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f6da:	83 c4 1c             	add    esp,0x1c
c000f6dd:	5b                   	pop    ebx
c000f6de:	5e                   	pop    esi
c000f6df:	5f                   	pop    edi
c000f6e0:	5d                   	pop    ebp
c000f6e1:	c3                   	ret    
c000f6e2:	83 ec 08             	sub    esp,0x8
c000f6e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6e9:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f6f0:	50                   	push   eax
c000f6f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6f5:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f6fc:	50                   	push   eax
c000f6fd:	e8 c0 0b 00 00       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c000f702:	83 c4 10             	add    esp,0x10
c000f705:	88 07                	mov    BYTE PTR [edi],al
c000f707:	eb c9                	jmp    c000f6d2 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f709:	45                   	inc    ebp
c000f70a:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f712:	eb 8e                	jmp    c000f6a2 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f714 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f714:	56                   	push   esi
c000f715:	53                   	push   ebx
c000f716:	83 ec 0c             	sub    esp,0xc
c000f719:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f71d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f721:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f726:	50                   	push   eax
c000f727:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f72c:	50                   	push   eax
c000f72d:	e8 90 0b 00 00       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c000f732:	5a                   	pop    edx
c000f733:	0f b6 c0             	movzx  eax,al
c000f736:	59                   	pop    ecx
c000f737:	50                   	push   eax
c000f738:	89 f0                	mov    eax,esi
c000f73a:	0f be f0             	movsx  esi,al
c000f73d:	56                   	push   esi
c000f73e:	e8 39 0c 00 00       	call   c001037c <VgaText::combineCharAndColour(char, unsigned char)>
c000f743:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f747:	ba 19 00 00 00       	mov    edx,0x19
c000f74c:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f752:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f755:	8d 14 92             	lea    edx,[edx+edx*4]
c000f758:	c1 e1 04             	shl    ecx,0x4
c000f75b:	c1 e2 04             	shl    edx,0x4
c000f75e:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f762:	01 ca                	add    edx,ecx
c000f764:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f76c:	83 c4 14             	add    esp,0x14
c000f76f:	5b                   	pop    ebx
c000f770:	5e                   	pop    esi
c000f771:	c3                   	ret    

c000f772 <setupTextMode()>:
c000f772:	c7 05 18 ca 02 c0 52 f6 00 c0 	mov    DWORD PTR ds:0xc002ca18,0xc000f652
c000f77c:	c7 05 04 ca 02 c0 2e f5 00 c0 	mov    DWORD PTR ds:0xc002ca04,0xc000f52e
c000f786:	c7 05 00 ca 02 c0 73 f5 00 c0 	mov    DWORD PTR ds:0xc002ca00,0xc000f573
c000f790:	c7 05 0c ca 02 c0 8e f6 00 c0 	mov    DWORD PTR ds:0xc002ca0c,0xc000f68e
c000f79a:	c7 05 14 ca 02 c0 b5 f5 00 c0 	mov    DWORD PTR ds:0xc002ca14,0xc000f5b5
c000f7a4:	c7 05 08 ca 02 c0 09 f6 00 c0 	mov    DWORD PTR ds:0xc002ca08,0xc000f609
c000f7ae:	c7 05 10 ca 02 c0 0a f6 00 c0 	mov    DWORD PTR ds:0xc002ca10,0xc000f60a
c000f7b8:	c7 05 1c ca 02 c0 14 f7 00 c0 	mov    DWORD PTR ds:0xc002ca1c,0xc000f714
c000f7c2:	c3                   	ret    

c000f7c3 <kernel_main>:
c000f7c3:	57                   	push   edi
c000f7c4:	bf f9 03 00 00       	mov    edi,0x3f9
c000f7c9:	56                   	push   esi
c000f7ca:	31 f6                	xor    esi,esi
c000f7cc:	53                   	push   ebx
c000f7cd:	83 ec 10             	sub    esp,0x10
c000f7d0:	e8 47 09 00 00       	call   c001011c <installVgaTextImplementation()>
c000f7d5:	e8 98 ff ff ff       	call   c000f772 <setupTextMode()>
c000f7da:	89 f0                	mov    eax,esi
c000f7dc:	89 fa                	mov    edx,edi
c000f7de:	ee                   	out    dx,al
c000f7df:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f7e4:	b0 80                	mov    al,0x80
c000f7e6:	89 da                	mov    edx,ebx
c000f7e8:	ee                   	out    dx,al
c000f7e9:	b1 03                	mov    cl,0x3
c000f7eb:	ba f8 03 00 00       	mov    edx,0x3f8
c000f7f0:	88 c8                	mov    al,cl
c000f7f2:	ee                   	out    dx,al
c000f7f3:	89 f0                	mov    eax,esi
c000f7f5:	89 fa                	mov    edx,edi
c000f7f7:	ee                   	out    dx,al
c000f7f8:	88 c8                	mov    al,cl
c000f7fa:	89 da                	mov    edx,ebx
c000f7fc:	ee                   	out    dx,al
c000f7fd:	b0 c7                	mov    al,0xc7
c000f7ff:	ba fa 03 00 00       	mov    edx,0x3fa
c000f804:	ee                   	out    dx,al
c000f805:	b0 0b                	mov    al,0xb
c000f807:	ba fc 03 00 00       	mov    edx,0x3fc
c000f80c:	ee                   	out    dx,al
c000f80d:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f812:	83 ec 0c             	sub    esp,0xc
c000f815:	05 ff 0f 00 00       	add    eax,0xfff
c000f81a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f81f:	50                   	push   eax
c000f820:	e8 b3 03 00 00       	call   c000fbd8 <Phys::physicalMemorySetup(unsigned int)>
c000f825:	e8 78 20 00 00       	call   c00118a2 <Virt::virtualMemorySetup()>
c000f82a:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f830:	83 c4 10             	add    esp,0x10
c000f833:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f839:	75 0e                	jne    c000f849 <kernel_main+0x86>
c000f83b:	89 d8                	mov    eax,ebx
c000f83d:	25 48 03 00 00       	and    eax,0x348
c000f842:	3d 00 03 00 00       	cmp    eax,0x300
c000f847:	74 10                	je     c000f859 <kernel_main+0x96>
c000f849:	83 ec 0c             	sub    esp,0xc
c000f84c:	68 5c a2 02 c0       	push   0xc002a25c
c000f851:	e8 45 a0 00 00       	call   c001989b <Krnl::panic(char const*)>
c000f856:	83 c4 10             	add    esp,0x10
c000f859:	83 ec 0c             	sub    esp,0xc
c000f85c:	89 1d 60 c9 02 c0    	mov    DWORD PTR ds:0xc002c960,ebx
c000f862:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f866:	53                   	push   ebx
c000f867:	e8 ea 21 00 00       	call   c0011a56 <VAS::VAS()>
c000f86c:	89 1d c4 ca 02 c0    	mov    DWORD PTR ds:0xc002cac4,ebx
c000f872:	e8 a9 07 ff ff       	call   c0000020 <callGlobalConstructors>
c000f877:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f87e:	e8 51 fc ff ff       	call   c000f4d4 <malloc>
c000f883:	89 04 24             	mov    DWORD PTR [esp],eax
c000f886:	89 c6                	mov    esi,eax
c000f888:	e8 5d ea ff ff       	call   c000e2ea <Computer::Computer()>
c000f88d:	6a 00                	push   0x0
c000f88f:	89 35 48 c9 02 c0    	mov    DWORD PTR ds:0xc002c948,esi
c000f895:	6a 00                	push   0x0
c000f897:	6a 00                	push   0x0
c000f899:	56                   	push   esi
c000f89a:	e8 7f f2 ff ff       	call   c000eb1e <Computer::open(int, int, void*)>
c000f89f:	83 c4 14             	add    esp,0x14
c000f8a2:	53                   	push   ebx
c000f8a3:	e8 48 24 00 00       	call   c0011cf0 <VAS::~VAS()>
c000f8a8:	c7 04 24 6c 8b 02 c0 	mov    DWORD PTR [esp],0xc0028b6c
c000f8af:	e8 e7 9f 00 00       	call   c001989b <Krnl::panic(char const*)>
c000f8b4:	83 c4 20             	add    esp,0x20
c000f8b7:	5b                   	pop    ebx
c000f8b8:	5e                   	pop    esi
c000f8b9:	5f                   	pop    edi
c000f8ba:	c3                   	ret    

c000f8bb <Phys::allocateDMA(unsigned long)>:
c000f8bb:	55                   	push   ebp
c000f8bc:	31 d2                	xor    edx,edx
c000f8be:	57                   	push   edi
c000f8bf:	31 ed                	xor    ebp,ebp
c000f8c1:	56                   	push   esi
c000f8c2:	31 c9                	xor    ecx,ecx
c000f8c4:	53                   	push   ebx
c000f8c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8c9:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f8cf:	31 c0                	xor    eax,eax
c000f8d1:	c1 ee 0c             	shr    esi,0xc
c000f8d4:	eb 17                	jmp    c000f8ed <Phys::allocateDMA(unsigned long)+0x32>
c000f8d6:	85 c9                	test   ecx,ecx
c000f8d8:	75 04                	jne    c000f8de <Phys::allocateDMA(unsigned long)+0x23>
c000f8da:	89 d5                	mov    ebp,edx
c000f8dc:	89 d0                	mov    eax,edx
c000f8de:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f8e1:	39 de                	cmp    esi,ebx
c000f8e3:	74 20                	je     c000f905 <Phys::allocateDMA(unsigned long)+0x4a>
c000f8e5:	42                   	inc    edx
c000f8e6:	89 d9                	mov    ecx,ebx
c000f8e8:	83 fa 2f             	cmp    edx,0x2f
c000f8eb:	7f 11                	jg     c000f8fe <Phys::allocateDMA(unsigned long)+0x43>
c000f8ed:	80 ba a0 c9 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd3660],0x0
c000f8f4:	74 e0                	je     c000f8d6 <Phys::allocateDMA(unsigned long)+0x1b>
c000f8f6:	31 c9                	xor    ecx,ecx
c000f8f8:	42                   	inc    edx
c000f8f9:	83 fa 2f             	cmp    edx,0x2f
c000f8fc:	7e ef                	jle    c000f8ed <Phys::allocateDMA(unsigned long)+0x32>
c000f8fe:	5b                   	pop    ebx
c000f8ff:	31 c0                	xor    eax,eax
c000f901:	5e                   	pop    esi
c000f902:	5f                   	pop    edi
c000f903:	5d                   	pop    ebp
c000f904:	c3                   	ret    
c000f905:	8d 14 30             	lea    edx,[eax+esi*1]
c000f908:	89 d7                	mov    edi,edx
c000f90a:	4f                   	dec    edi
c000f90b:	79 03                	jns    c000f910 <Phys::allocateDMA(unsigned long)+0x55>
c000f90d:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f910:	c1 ff 04             	sar    edi,0x4
c000f913:	89 c2                	mov    edx,eax
c000f915:	c1 fa 04             	sar    edx,0x4
c000f918:	39 fa                	cmp    edx,edi
c000f91a:	75 2f                	jne    c000f94b <Phys::allocateDMA(unsigned long)+0x90>
c000f91c:	85 db                	test   ebx,ebx
c000f91e:	74 1a                	je     c000f93a <Phys::allocateDMA(unsigned long)+0x7f>
c000f920:	be a0 c9 02 c0       	mov    esi,0xc002c9a0
c000f925:	8d 90 a0 c9 02 c0    	lea    edx,[eax-0x3ffd3660]
c000f92b:	f7 d6                	not    esi
c000f92d:	29 c6                	sub    esi,eax
c000f92f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f932:	42                   	inc    edx
c000f933:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f936:	39 d9                	cmp    ecx,ebx
c000f938:	7f f5                	jg     c000f92f <Phys::allocateDMA(unsigned long)+0x74>
c000f93a:	85 ff                	test   edi,edi
c000f93c:	74 13                	je     c000f951 <Phys::allocateDMA(unsigned long)+0x96>
c000f93e:	5b                   	pop    ebx
c000f93f:	05 50 20 0c 00       	add    eax,0xc2050
c000f944:	5e                   	pop    esi
c000f945:	c1 e0 0c             	shl    eax,0xc
c000f948:	5f                   	pop    edi
c000f949:	5d                   	pop    ebp
c000f94a:	c3                   	ret    
c000f94b:	89 ea                	mov    edx,ebp
c000f94d:	31 c9                	xor    ecx,ecx
c000f94f:	eb a7                	jmp    c000f8f8 <Phys::allocateDMA(unsigned long)+0x3d>
c000f951:	5b                   	pop    ebx
c000f952:	c1 e0 0c             	shl    eax,0xc
c000f955:	5e                   	pop    esi
c000f956:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f95b:	5f                   	pop    edi
c000f95c:	5d                   	pop    ebp
c000f95d:	c3                   	ret    

c000f95e <Phys::freeDMA(unsigned long, unsigned long)>:
c000f95e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f962:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f966:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f96c:	c1 e9 0c             	shr    ecx,0xc
c000f96f:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f974:	76 25                	jbe    c000f99b <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f976:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f97b:	c1 e8 0c             	shr    eax,0xc
c000f97e:	8d 50 10             	lea    edx,[eax+0x10]
c000f981:	85 c9                	test   ecx,ecx
c000f983:	74 15                	je     c000f99a <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f985:	8d 82 a0 c9 02 c0    	lea    eax,[edx-0x3ffd3660]
c000f98b:	8d 94 11 a0 c9 02 c0 	lea    edx,[ecx+edx*1-0x3ffd3660]
c000f992:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f995:	40                   	inc    eax
c000f996:	39 d0                	cmp    eax,edx
c000f998:	75 f8                	jne    c000f992 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f99a:	c3                   	ret    
c000f99b:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f9a1:	c1 ea 0c             	shr    edx,0xc
c000f9a4:	eb db                	jmp    c000f981 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f9a6 <Phys::setPageState(unsigned long, bool)>:
c000f9a6:	56                   	push   esi
c000f9a7:	ba 01 00 00 00       	mov    edx,0x1
c000f9ac:	53                   	push   ebx
c000f9ad:	8b 35 70 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b870
c000f9b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9bb:	89 c8                	mov    eax,ecx
c000f9bd:	83 e1 07             	and    ecx,0x7
c000f9c0:	c1 e8 03             	shr    eax,0x3
c000f9c3:	d3 e3                	shl    ebx,cl
c000f9c5:	01 c6                	add    esi,eax
c000f9c7:	d3 e2                	shl    edx,cl
c000f9c9:	f7 d2                	not    edx
c000f9cb:	20 16                	and    BYTE PTR [esi],dl
c000f9cd:	03 05 70 b8 02 c0    	add    eax,DWORD PTR ds:0xc002b870
c000f9d3:	08 18                	or     BYTE PTR [eax],bl
c000f9d5:	5b                   	pop    ebx
c000f9d6:	5e                   	pop    esi
c000f9d7:	c3                   	ret    

c000f9d8 <Phys::getPageState(unsigned long)>:
c000f9d8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9dc:	8b 15 70 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b870
c000f9e2:	89 c8                	mov    eax,ecx
c000f9e4:	83 e1 07             	and    ecx,0x7
c000f9e7:	c1 e8 03             	shr    eax,0x3
c000f9ea:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f9ee:	d3 f8                	sar    eax,cl
c000f9f0:	83 e0 01             	and    eax,0x1
c000f9f3:	c3                   	ret    

c000f9f4 <Phys::freePage(unsigned long)>:
c000f9f4:	53                   	push   ebx
c000f9f5:	83 ec 08             	sub    esp,0x8
c000f9f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9fc:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fa02:	76 57                	jbe    c000fa5b <Phys::freePage(unsigned long)+0x67>
c000fa04:	c1 eb 0c             	shr    ebx,0xc
c000fa07:	53                   	push   ebx
c000fa08:	e8 cb ff ff ff       	call   c000f9d8 <Phys::getPageState(unsigned long)>
c000fa0d:	5a                   	pop    edx
c000fa0e:	84 c0                	test   al,al
c000fa10:	74 5b                	je     c000fa6d <Phys::freePage(unsigned long)+0x79>
c000fa12:	a1 8c c9 02 c0       	mov    eax,ds:0xc002c98c
c000fa17:	48                   	dec    eax
c000fa18:	a3 8c c9 02 c0       	mov    ds:0xc002c98c,eax
c000fa1d:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa20:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa23:	c1 e0 02             	shl    eax,0x2
c000fa26:	99                   	cdq    
c000fa27:	f7 3d 90 c9 02 c0    	idiv   DWORD PTR ds:0xc002c990
c000fa2d:	39 05 88 c9 02 c0    	cmp    DWORD PTR ds:0xc002c988,eax
c000fa33:	75 13                	jne    c000fa48 <Phys::freePage(unsigned long)+0x54>
c000fa35:	83 ec 08             	sub    esp,0x8
c000fa38:	6a 00                	push   0x0
c000fa3a:	53                   	push   ebx
c000fa3b:	e8 66 ff ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fa40:	83 c4 10             	add    esp,0x10
c000fa43:	83 c4 08             	add    esp,0x8
c000fa46:	5b                   	pop    ebx
c000fa47:	c3                   	ret    
c000fa48:	83 ec 0c             	sub    esp,0xc
c000fa4b:	a3 88 c9 02 c0       	mov    ds:0xc002c988,eax
c000fa50:	50                   	push   eax
c000fa51:	e8 6e 0a 00 00       	call   c00104c4 <VgaText::updateRAMUsageDisplay(int)>
c000fa56:	83 c4 10             	add    esp,0x10
c000fa59:	eb da                	jmp    c000fa35 <Phys::freePage(unsigned long)+0x41>
c000fa5b:	68 00 10 00 00       	push   0x1000
c000fa60:	53                   	push   ebx
c000fa61:	e8 f8 fe ff ff       	call   c000f95e <Phys::freeDMA(unsigned long, unsigned long)>
c000fa66:	59                   	pop    ecx
c000fa67:	5b                   	pop    ebx
c000fa68:	83 c4 08             	add    esp,0x8
c000fa6b:	5b                   	pop    ebx
c000fa6c:	c3                   	ret    
c000fa6d:	c7 44 24 10 87 8b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028b87
c000fa75:	83 c4 08             	add    esp,0x8
c000fa78:	5b                   	pop    ebx
c000fa79:	e9 1d 9e 00 00       	jmp    c001989b <Krnl::panic(char const*)>

c000fa7e <Phys::allocatePage()>:
c000fa7e:	56                   	push   esi
c000fa7f:	53                   	push   ebx
c000fa80:	51                   	push   ecx
c000fa81:	8b 35 80 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c980
c000fa87:	89 f3                	mov    ebx,esi
c000fa89:	eb 0a                	jmp    c000fa95 <Phys::allocatePage()+0x17>
c000fa8b:	89 1d 80 c9 02 c0    	mov    DWORD PTR ds:0xc002c980,ebx
c000fa91:	39 de                	cmp    esi,ebx
c000fa93:	74 24                	je     c000fab9 <Phys::allocatePage()+0x3b>
c000fa95:	53                   	push   ebx
c000fa96:	e8 3d ff ff ff       	call   c000f9d8 <Phys::getPageState(unsigned long)>
c000fa9b:	5a                   	pop    edx
c000fa9c:	84 c0                	test   al,al
c000fa9e:	74 5a                	je     c000fafa <Phys::allocatePage()+0x7c>
c000faa0:	43                   	inc    ebx
c000faa1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000faa7:	75 e2                	jne    c000fa8b <Phys::allocatePage()+0xd>
c000faa9:	31 db                	xor    ebx,ebx
c000faab:	c7 05 80 c9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c980,0x0
c000fab5:	39 de                	cmp    esi,ebx
c000fab7:	75 dc                	jne    c000fa95 <Phys::allocatePage()+0x17>
c000fab9:	83 ec 0c             	sub    esp,0xc
c000fabc:	68 9d 8b 02 c0       	push   0xc0028b9d
c000fac1:	e8 bb 2c 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000fac6:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000facd:	e8 e9 fd ff ff       	call   c000f8bb <Phys::allocateDMA(unsigned long)>
c000fad2:	83 c4 10             	add    esp,0x10
c000fad5:	85 c0                	test   eax,eax
c000fad7:	75 56                	jne    c000fb2f <Phys::allocatePage()+0xb1>
c000fad9:	83 ec 0c             	sub    esp,0xc
c000fadc:	68 ae 8b 02 c0       	push   0xc0028bae
c000fae1:	e8 b5 9d 00 00       	call   c001989b <Krnl::panic(char const*)>
c000fae6:	83 c4 10             	add    esp,0x10
c000fae9:	8b 1d 80 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c980
c000faef:	53                   	push   ebx
c000faf0:	e8 e3 fe ff ff       	call   c000f9d8 <Phys::getPageState(unsigned long)>
c000faf5:	5a                   	pop    edx
c000faf6:	84 c0                	test   al,al
c000faf8:	75 a6                	jne    c000faa0 <Phys::allocatePage()+0x22>
c000fafa:	6a 01                	push   0x1
c000fafc:	53                   	push   ebx
c000fafd:	e8 a4 fe ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fb02:	a1 8c c9 02 c0       	mov    eax,ds:0xc002c98c
c000fb07:	59                   	pop    ecx
c000fb08:	40                   	inc    eax
c000fb09:	5b                   	pop    ebx
c000fb0a:	a3 8c c9 02 c0       	mov    ds:0xc002c98c,eax
c000fb0f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb12:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb15:	c1 e0 02             	shl    eax,0x2
c000fb18:	99                   	cdq    
c000fb19:	f7 3d 90 c9 02 c0    	idiv   DWORD PTR ds:0xc002c990
c000fb1f:	39 05 88 c9 02 c0    	cmp    DWORD PTR ds:0xc002c988,eax
c000fb25:	75 0c                	jne    c000fb33 <Phys::allocatePage()+0xb5>
c000fb27:	a1 80 c9 02 c0       	mov    eax,ds:0xc002c980
c000fb2c:	c1 e0 0c             	shl    eax,0xc
c000fb2f:	5a                   	pop    edx
c000fb30:	5b                   	pop    ebx
c000fb31:	5e                   	pop    esi
c000fb32:	c3                   	ret    
c000fb33:	83 ec 0c             	sub    esp,0xc
c000fb36:	a3 88 c9 02 c0       	mov    ds:0xc002c988,eax
c000fb3b:	50                   	push   eax
c000fb3c:	e8 83 09 00 00       	call   c00104c4 <VgaText::updateRAMUsageDisplay(int)>
c000fb41:	83 c4 10             	add    esp,0x10
c000fb44:	eb e1                	jmp    c000fb27 <Phys::allocatePage()+0xa9>

c000fb46 <Phys::allocateContiguousPages(int)>:
c000fb46:	57                   	push   edi
c000fb47:	56                   	push   esi
c000fb48:	53                   	push   ebx
c000fb49:	31 db                	xor    ebx,ebx
c000fb4b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fb4f:	e8 d6 d1 00 00       	call   c001cd2a <lockScheduler()>
c000fb54:	85 db                	test   ebx,ebx
c000fb56:	75 11                	jne    c000fb69 <Phys::allocateContiguousPages(int)+0x23>
c000fb58:	e8 21 ff ff ff       	call   c000fa7e <Phys::allocatePage()>
c000fb5d:	83 ff 01             	cmp    edi,0x1
c000fb60:	89 c6                	mov    esi,eax
c000fb62:	74 21                	je     c000fb85 <Phys::allocateContiguousPages(int)+0x3f>
c000fb64:	bb 01 00 00 00       	mov    ebx,0x1
c000fb69:	e8 10 ff ff ff       	call   c000fa7e <Phys::allocatePage()>
c000fb6e:	89 da                	mov    edx,ebx
c000fb70:	c1 e2 0c             	shl    edx,0xc
c000fb73:	01 f2                	add    edx,esi
c000fb75:	39 c2                	cmp    edx,eax
c000fb77:	74 17                	je     c000fb90 <Phys::allocateContiguousPages(int)+0x4a>
c000fb79:	bb 01 00 00 00       	mov    ebx,0x1
c000fb7e:	89 c6                	mov    esi,eax
c000fb80:	83 ff 01             	cmp    edi,0x1
c000fb83:	75 e4                	jne    c000fb69 <Phys::allocateContiguousPages(int)+0x23>
c000fb85:	e8 a2 d1 00 00       	call   c001cd2c <unlockScheduler()>
c000fb8a:	89 f0                	mov    eax,esi
c000fb8c:	5b                   	pop    ebx
c000fb8d:	5e                   	pop    esi
c000fb8e:	5f                   	pop    edi
c000fb8f:	c3                   	ret    
c000fb90:	43                   	inc    ebx
c000fb91:	39 fb                	cmp    ebx,edi
c000fb93:	75 bf                	jne    c000fb54 <Phys::allocateContiguousPages(int)+0xe>
c000fb95:	e8 92 d1 00 00       	call   c001cd2c <unlockScheduler()>
c000fb9a:	89 f0                	mov    eax,esi
c000fb9c:	5b                   	pop    ebx
c000fb9d:	5e                   	pop    esi
c000fb9e:	5f                   	pop    edi
c000fb9f:	c3                   	ret    

c000fba0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fba0:	56                   	push   esi
c000fba1:	53                   	push   ebx
c000fba2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fba6:	39 1d 84 c9 02 c0    	cmp    DWORD PTR ds:0xc002c984,ebx
c000fbac:	73 06                	jae    c000fbb4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fbae:	89 1d 84 c9 02 c0    	mov    DWORD PTR ds:0xc002c984,ebx
c000fbb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbb8:	c1 eb 0c             	shr    ebx,0xc
c000fbbb:	c1 e8 0c             	shr    eax,0xc
c000fbbe:	39 d8                	cmp    eax,ebx
c000fbc0:	73 13                	jae    c000fbd5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fbc2:	6a 00                	push   0x0
c000fbc4:	8d 70 01             	lea    esi,[eax+0x1]
c000fbc7:	50                   	push   eax
c000fbc8:	e8 d9 fd ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fbcd:	5a                   	pop    edx
c000fbce:	89 f0                	mov    eax,esi
c000fbd0:	59                   	pop    ecx
c000fbd1:	39 f3                	cmp    ebx,esi
c000fbd3:	75 ed                	jne    c000fbc2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fbd5:	5b                   	pop    ebx
c000fbd6:	5e                   	pop    esi
c000fbd7:	c3                   	ret    

c000fbd8 <Phys::physicalMemorySetup(unsigned int)>:
c000fbd8:	55                   	push   ebp
c000fbd9:	57                   	push   edi
c000fbda:	56                   	push   esi
c000fbdb:	53                   	push   ebx
c000fbdc:	31 db                	xor    ebx,ebx
c000fbde:	83 ec 40             	sub    esp,0x40
c000fbe1:	6a 30                	push   0x30
c000fbe3:	6a 00                	push   0x0
c000fbe5:	68 a0 c9 02 c0       	push   0xc002c9a0
c000fbea:	e8 9c 0a ff ff       	call   c000068b <memset>
c000fbef:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fbf3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fbf8:	05 00 10 00 00       	add    eax,0x1000
c000fbfd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fc01:	83 c4 10             	add    esp,0x10
c000fc04:	83 ec 08             	sub    esp,0x8
c000fc07:	6a 01                	push   0x1
c000fc09:	53                   	push   ebx
c000fc0a:	43                   	inc    ebx
c000fc0b:	e8 96 fd ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fc10:	83 c4 10             	add    esp,0x10
c000fc13:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc19:	75 e9                	jne    c000fc04 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fc1b:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fc22:	66 85 c0             	test   ax,ax
c000fc25:	0f 84 8e 01 00 00    	je     c000fdb9 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fc2b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fc2f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fc37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc3b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fc40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fc44:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fc4c:	eb 15                	jmp    c000fc63 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fc4e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fc52:	83 c3 18             	add    ebx,0x18
c000fc55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc59:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fc5d:	0f 84 66 01 00 00    	je     c000fdc9 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fc63:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fc66:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fc69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fc6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc70:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc74:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fc76:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fc79:	01 f0                	add    eax,esi
c000fc7b:	55                   	push   ebp
c000fc7c:	11 fa                	adc    edx,edi
c000fc7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc82:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fc86:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc8a:	56                   	push   esi
c000fc8b:	68 e8 8b 02 c0       	push   0xc0028be8
c000fc90:	e8 ec 2a 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000fc95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	09 f8                	or     eax,edi
c000fc9e:	0f 85 25 01 00 00    	jne    c000fdc9 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fca4:	4d                   	dec    ebp
c000fca5:	75 a7                	jne    c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fca7:	ba 00 00 08 00       	mov    edx,0x80000
c000fcac:	89 c1                	mov    ecx,eax
c000fcae:	39 f2                	cmp    edx,esi
c000fcb0:	19 f9                	sbb    ecx,edi
c000fcb2:	0f 82 a7 00 00 00    	jb     c000fd5f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fcb8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fcbc:	89 c1                	mov    ecx,eax
c000fcbe:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fcc2:	0f 83 97 00 00 00    	jae    c000fd5f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fcc8:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fcd1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fcd5:	39 fa                	cmp    edx,edi
c000fcd7:	19 e8                	sbb    eax,ebp
c000fcd9:	0f 82 14 01 00 00    	jb     c000fdf3 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fcdf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fce3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fce7:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fced:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcf2:	83 d5 ff             	adc    ebp,0xffffffff
c000fcf5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fcf9:	31 c0                	xor    eax,eax
c000fcfb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fcff:	39 fa                	cmp    edx,edi
c000fd01:	89 c1                	mov    ecx,eax
c000fd03:	19 e9                	sbb    ecx,ebp
c000fd05:	0f 83 43 ff ff ff    	jae    c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd0b:	be 00 00 08 00       	mov    esi,0x80000
c000fd10:	50                   	push   eax
c000fd11:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fd15:	57                   	push   edi
c000fd16:	56                   	push   esi
c000fd17:	68 0c 8c 02 c0       	push   0xc0028c0c
c000fd1c:	e8 60 2a 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000fd21:	5a                   	pop    edx
c000fd22:	59                   	pop    ecx
c000fd23:	57                   	push   edi
c000fd24:	56                   	push   esi
c000fd25:	e8 76 fe ff ff       	call   c000fba0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fd2a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fd2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fd32:	83 c4 0c             	add    esp,0xc
c000fd35:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fd39:	03 05 90 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c990
c000fd3f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd46:	a3 90 c9 02 c0       	mov    ds:0xc002c990,eax
c000fd4b:	52                   	push   edx
c000fd4c:	50                   	push   eax
c000fd4d:	68 ca 8b 02 c0       	push   0xc0028bca
c000fd52:	e8 2a 2a 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c000fd57:	83 c4 10             	add    esp,0x10
c000fd5a:	e9 ef fe ff ff       	jmp    c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd5f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fd63:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd6b:	39 ea                	cmp    edx,ebp
c000fd6d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fd71:	0f 82 d7 fe ff ff    	jb     c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd77:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fd7c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fd80:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fd84:	0f 83 c4 fe ff ff    	jae    c000fc4e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd8a:	39 ee                	cmp    esi,ebp
c000fd8c:	89 f8                	mov    eax,edi
c000fd8e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fd92:	0f 83 78 ff ff ff    	jae    c000fd10 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fd98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fda0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fda4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fda8:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fdac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fdb0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fdb4:	e9 57 ff ff ff       	jmp    c000fd10 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fdb9:	83 ec 0c             	sub    esp,0xc
c000fdbc:	68 bc 8b 02 c0       	push   0xc0028bbc
c000fdc1:	e8 d5 9a 00 00       	call   c001989b <Krnl::panic(char const*)>
c000fdc6:	83 c4 10             	add    esp,0x10
c000fdc9:	bb 40 01 00 00       	mov    ebx,0x140
c000fdce:	83 ec 08             	sub    esp,0x8
c000fdd1:	6a 00                	push   0x0
c000fdd3:	53                   	push   ebx
c000fdd4:	43                   	inc    ebx
c000fdd5:	e8 cc fb ff ff       	call   c000f9a6 <Phys::setPageState(unsigned long, bool)>
c000fdda:	ff 05 90 c9 02 c0    	inc    DWORD PTR ds:0xc002c990
c000fde0:	83 c4 10             	add    esp,0x10
c000fde3:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fde9:	75 e3                	jne    c000fdce <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fdeb:	83 c4 3c             	add    esp,0x3c
c000fdee:	5b                   	pop    ebx
c000fdef:	5e                   	pop    esi
c000fdf0:	5f                   	pop    edi
c000fdf1:	5d                   	pop    ebp
c000fdf2:	c3                   	ret    
c000fdf3:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fdfb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fe03:	e9 d7 fe ff ff       	jmp    c000fcdf <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fe08 <Pipe::isAtty()>:
c000fe08:	31 c0                	xor    eax,eax
c000fe0a:	c3                   	ret    
c000fe0b:	90                   	nop

c000fe0c <Pipe::~Pipe()>:
c000fe0c:	83 ec 0c             	sub    esp,0xc
c000fe0f:	ba 78 8c 02 c0       	mov    edx,0xc0028c78
c000fe14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe18:	89 10                	mov    DWORD PTR [eax],edx
c000fe1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe1e:	83 ec 0c             	sub    esp,0xc
c000fe21:	50                   	push   eax
c000fe22:	e8 09 17 00 00       	call   c0011530 <UnixFile::~UnixFile()>
c000fe27:	83 c4 10             	add    esp,0x10
c000fe2a:	90                   	nop
c000fe2b:	83 c4 0c             	add    esp,0xc
c000fe2e:	c3                   	ret    
c000fe2f:	90                   	nop

c000fe30 <Pipe::~Pipe()>:
c000fe30:	83 ec 0c             	sub    esp,0xc
c000fe33:	83 ec 0c             	sub    esp,0xc
c000fe36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe3a:	e8 cd ff ff ff       	call   c000fe0c <Pipe::~Pipe()>
c000fe3f:	83 c4 10             	add    esp,0x10
c000fe42:	83 ec 08             	sub    esp,0x8
c000fe45:	6a 20                	push   0x20
c000fe47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe4b:	e8 51 28 00 00       	call   c00126a1 <operator delete(void*, unsigned long)>
c000fe50:	83 c4 10             	add    esp,0x10
c000fe53:	83 c4 0c             	add    esp,0xc
c000fe56:	c3                   	ret    
c000fe57:	90                   	nop

c000fe58 <Pipe::read(unsigned long long, void*, int*)>:
c000fe58:	55                   	push   ebp
c000fe59:	57                   	push   edi
c000fe5a:	56                   	push   esi
c000fe5b:	53                   	push   ebx
c000fe5c:	83 ec 1c             	sub    esp,0x1c
c000fe5f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fe63:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fe67:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fe6b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fe6e:	89 c8                	mov    eax,ecx
c000fe70:	99                   	cdq    
c000fe71:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fe75:	74 19                	je     c000fe90 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe77:	39 f9                	cmp    ecx,edi
c000fe79:	89 d1                	mov    ecx,edx
c000fe7b:	19 f1                	sbb    ecx,esi
c000fe7d:	73 11                	jae    c000fe90 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe7f:	e8 a6 ce 00 00       	call   c001cd2a <lockScheduler()>
c000fe84:	e8 dd d1 00 00       	call   c001d066 <schedule()>
c000fe89:	e8 9e ce 00 00       	call   c001cd2c <unlockScheduler()>
c000fe8e:	eb db                	jmp    c000fe6b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fe90:	39 f8                	cmp    eax,edi
c000fe92:	89 d1                	mov    ecx,edx
c000fe94:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fe98:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fe9c:	19 f1                	sbb    ecx,esi
c000fe9e:	73 08                	jae    c000fea8 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fea0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fea4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fea8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000feab:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000feae:	29 c6                	sub    esi,eax
c000feb0:	89 f1                	mov    ecx,esi
c000feb2:	c1 f9 1f             	sar    ecx,0x1f
c000feb5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000feb9:	89 ca                	mov    edx,ecx
c000febb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000febf:	19 d1                	sbb    ecx,edx
c000fec1:	73 04                	jae    c000fec7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fec3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fec7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fecb:	89 fd                	mov    ebp,edi
c000fecd:	29 f5                	sub    ebp,esi
c000fecf:	85 f6                	test   esi,esi
c000fed1:	74 12                	je     c000fee5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fed3:	52                   	push   edx
c000fed4:	56                   	push   esi
c000fed5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fed8:	50                   	push   eax
c000fed9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fedd:	e8 73 07 ff ff       	call   c0000655 <memcpy>
c000fee2:	83 c4 10             	add    esp,0x10
c000fee5:	85 ed                	test   ebp,ebp
c000fee7:	74 12                	je     c000fefb <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fee9:	50                   	push   eax
c000feea:	55                   	push   ebp
c000feeb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000feee:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fef2:	56                   	push   esi
c000fef3:	e8 5d 07 ff ff       	call   c0000655 <memcpy>
c000fef8:	83 c4 10             	add    esp,0x10
c000fefb:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fefe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ff01:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ff04:	99                   	cdq    
c000ff05:	89 f7                	mov    edi,esi
c000ff07:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ff0b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ff0f:	c1 ff 1f             	sar    edi,0x1f
c000ff12:	57                   	push   edi
c000ff13:	56                   	push   esi
c000ff14:	52                   	push   edx
c000ff15:	50                   	push   eax
c000ff16:	e8 91 55 01 00       	call   c00254ac <__umoddi3>
c000ff1b:	83 c4 10             	add    esp,0x10
c000ff1e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ff21:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff26:	75 10                	jne    c000ff38 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ff28:	83 ec 0c             	sub    esp,0xc
c000ff2b:	68 35 8c 02 c0       	push   0xc0028c35
c000ff30:	e8 66 99 00 00       	call   c001989b <Krnl::panic(char const*)>
c000ff35:	83 c4 10             	add    esp,0x10
c000ff38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff40:	89 10                	mov    DWORD PTR [eax],edx
c000ff42:	83 c4 1c             	add    esp,0x1c
c000ff45:	31 c0                	xor    eax,eax
c000ff47:	5b                   	pop    ebx
c000ff48:	5e                   	pop    esi
c000ff49:	5f                   	pop    edi
c000ff4a:	5d                   	pop    ebp
c000ff4b:	c3                   	ret    

c000ff4c <Pipe::write(unsigned long long, void*, int*)>:
c000ff4c:	55                   	push   ebp
c000ff4d:	57                   	push   edi
c000ff4e:	56                   	push   esi
c000ff4f:	53                   	push   ebx
c000ff50:	83 ec 1c             	sub    esp,0x1c
c000ff53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff57:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ff5b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ff5f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff62:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ff65:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ff68:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ff6c:	89 de                	mov    esi,ebx
c000ff6e:	89 df                	mov    edi,ebx
c000ff70:	c1 ff 1f             	sar    edi,0x1f
c000ff73:	01 c6                	add    esi,eax
c000ff75:	89 c8                	mov    eax,ecx
c000ff77:	11 d7                	adc    edi,edx
c000ff79:	99                   	cdq    
c000ff7a:	39 f1                	cmp    ecx,esi
c000ff7c:	89 d0                	mov    eax,edx
c000ff7e:	19 f8                	sbb    eax,edi
c000ff80:	b8 01 00 00 00       	mov    eax,0x1
c000ff85:	0f 82 80 00 00 00    	jb     c001000b <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ff8b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ff8e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ff91:	01 d8                	add    eax,ebx
c000ff93:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ff97:	99                   	cdq    
c000ff98:	f7 f9                	idiv   ecx
c000ff9a:	29 d1                	sub    ecx,edx
c000ff9c:	89 d7                	mov    edi,edx
c000ff9e:	89 c8                	mov    eax,ecx
c000ffa0:	99                   	cdq    
c000ffa1:	39 ce                	cmp    esi,ecx
c000ffa3:	19 d3                	sbb    ebx,edx
c000ffa5:	bb 00 00 00 00       	mov    ebx,0x0
c000ffaa:	72 04                	jb     c000ffb0 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ffac:	89 f3                	mov    ebx,esi
c000ffae:	29 cb                	sub    ebx,ecx
c000ffb0:	89 f1                	mov    ecx,esi
c000ffb2:	29 d9                	sub    ecx,ebx
c000ffb4:	74 1a                	je     c000ffd0 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ffb6:	52                   	push   edx
c000ffb7:	51                   	push   ecx
c000ffb8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ffbc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ffc0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ffc3:	57                   	push   edi
c000ffc4:	e8 8c 06 ff ff       	call   c0000655 <memcpy>
c000ffc9:	83 c4 10             	add    esp,0x10
c000ffcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffd0:	85 db                	test   ebx,ebx
c000ffd2:	74 12                	je     c000ffe6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000ffd4:	50                   	push   eax
c000ffd5:	53                   	push   ebx
c000ffd6:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000ffda:	51                   	push   ecx
c000ffdb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ffde:	e8 72 06 ff ff       	call   c0000655 <memcpy>
c000ffe3:	83 c4 10             	add    esp,0x10
c000ffe6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000ffe9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ffee:	75 10                	jne    c0010000 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000fff0:	83 ec 0c             	sub    esp,0xc
c000fff3:	68 51 8c 02 c0       	push   0xc0028c51
c000fff8:	e8 9e 98 00 00       	call   c001989b <Krnl::panic(char const*)>
c000fffd:	83 c4 10             	add    esp,0x10
c0010000:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010004:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010007:	89 38                	mov    DWORD PTR [eax],edi
c0010009:	31 c0                	xor    eax,eax
c001000b:	83 c4 1c             	add    esp,0x1c
c001000e:	5b                   	pop    ebx
c001000f:	5e                   	pop    esi
c0010010:	5f                   	pop    edi
c0010011:	5d                   	pop    ebp
c0010012:	c3                   	ret    
c0010013:	90                   	nop

c0010014 <Pipe::Pipe(int)>:
c0010014:	83 ec 0c             	sub    esp,0xc
c0010017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001001b:	83 ec 08             	sub    esp,0x8
c001001e:	6a 00                	push   0x0
c0010020:	50                   	push   eax
c0010021:	e8 28 13 00 00       	call   c001134e <UnixFile::UnixFile(int)>
c0010026:	83 c4 10             	add    esp,0x10
c0010029:	ba 78 8c 02 c0       	mov    edx,0xc0028c78
c001002e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010032:	89 10                	mov    DWORD PTR [eax],edx
c0010034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010038:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001003c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001003f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010043:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001004a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001004e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010055:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010059:	83 ec 0c             	sub    esp,0xc
c001005c:	50                   	push   eax
c001005d:	e8 72 f4 ff ff       	call   c000f4d4 <malloc>
c0010062:	83 c4 10             	add    esp,0x10
c0010065:	89 c2                	mov    edx,eax
c0010067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001006b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001006e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010072:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010076:	90                   	nop
c0010077:	83 c4 0c             	add    esp,0xc
c001007a:	c3                   	ret    
c001007b:	90                   	nop

c001007c <VgaText::isAtty()>:
c001007c:	b0 01                	mov    al,0x1
c001007e:	c3                   	ret    
c001007f:	90                   	nop

c0010080 <VgaText::~VgaText()>:
c0010080:	83 ec 0c             	sub    esp,0xc
c0010083:	ba 34 8d 02 c0       	mov    edx,0xc0028d34
c0010088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001008c:	89 10                	mov    DWORD PTR [eax],edx
c001008e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010092:	83 ec 0c             	sub    esp,0xc
c0010095:	50                   	push   eax
c0010096:	e8 95 14 00 00       	call   c0011530 <UnixFile::~UnixFile()>
c001009b:	83 c4 10             	add    esp,0x10
c001009e:	90                   	nop
c001009f:	83 c4 0c             	add    esp,0xc
c00100a2:	c3                   	ret    
c00100a3:	90                   	nop

c00100a4 <VgaText::~VgaText()>:
c00100a4:	83 ec 0c             	sub    esp,0xc
c00100a7:	83 ec 0c             	sub    esp,0xc
c00100aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100ae:	e8 cd ff ff ff       	call   c0010080 <VgaText::~VgaText()>
c00100b3:	83 c4 10             	add    esp,0x10
c00100b6:	83 ec 08             	sub    esp,0x8
c00100b9:	68 60 12 00 00       	push   0x1260
c00100be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100c2:	e8 da 25 00 00       	call   c00126a1 <operator delete(void*, unsigned long)>
c00100c7:	83 c4 10             	add    esp,0x10
c00100ca:	83 c4 0c             	add    esp,0xc
c00100cd:	c3                   	ret    

c00100ce <VgaText::read(unsigned long long, void*, int*)>:
c00100ce:	83 ec 10             	sub    esp,0x10
c00100d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00100d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100dd:	e8 d3 58 00 00       	call   c00159b5 <readKeyboard(VgaText*, char*, unsigned long)>
c00100e2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00100e6:	89 02                	mov    DWORD PTR [edx],eax
c00100e8:	31 c0                	xor    eax,eax
c00100ea:	83 c4 1c             	add    esp,0x1c
c00100ed:	c3                   	ret    

c00100ee <setTerminalScrollLock(bool)>:
c00100ee:	c3                   	ret    

c00100ef <addToTerminalCycle(VgaText*)>:
c00100ef:	8b 15 20 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca20
c00100f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100f9:	85 d2                	test   edx,edx
c00100fb:	75 0c                	jne    c0010109 <addToTerminalCycle(VgaText*)+0x1a>
c00100fd:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010103:	a3 20 ca 02 c0       	mov    ds:0xc002ca20,eax
c0010108:	c3                   	ret    
c0010109:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001010f:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010115:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001011b:	c3                   	ret    

c001011c <installVgaTextImplementation()>:
c001011c:	83 ec 10             	sub    esp,0x10
c001011f:	6a 20                	push   0x20
c0010121:	6a 00                	push   0x0
c0010123:	68 00 ca 02 c0       	push   0xc002ca00
c0010128:	e8 5e 05 ff ff       	call   c000068b <memset>
c001012d:	83 c4 1c             	add    esp,0x1c
c0010130:	c3                   	ret    

c0010131 <scrollTerminalScrollLock(int)>:
c0010131:	c3                   	ret    

c0010132 <VgaText::load()>:
c0010132:	53                   	push   ebx
c0010133:	31 c0                	xor    eax,eax
c0010135:	83 ec 58             	sub    esp,0x58
c0010138:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001013c:	89 e2                	mov    edx,esp
c001013e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010142:	40                   	inc    eax
c0010143:	83 f8 50             	cmp    eax,0x50
c0010146:	75 f6                	jne    c001013e <VgaText::load()+0xc>
c0010148:	31 c0                	xor    eax,eax
c001014a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010151:	84 c9                	test   cl,cl
c0010153:	74 06                	je     c001015b <VgaText::load()+0x29>
c0010155:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010158:	40                   	inc    eax
c0010159:	eb ef                	jmp    c001014a <VgaText::load()+0x18>
c001015b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010161:	85 c0                	test   eax,eax
c0010163:	74 09                	je     c001016e <VgaText::load()+0x3c>
c0010165:	51                   	push   ecx
c0010166:	51                   	push   ecx
c0010167:	52                   	push   edx
c0010168:	53                   	push   ebx
c0010169:	ff d0                	call   eax
c001016b:	83 c4 10             	add    esp,0x10
c001016e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010174:	85 c0                	test   eax,eax
c0010176:	74 09                	je     c0010181 <VgaText::load()+0x4f>
c0010178:	83 ec 0c             	sub    esp,0xc
c001017b:	53                   	push   ebx
c001017c:	ff d0                	call   eax
c001017e:	83 c4 10             	add    esp,0x10
c0010181:	83 c4 58             	add    esp,0x58
c0010184:	5b                   	pop    ebx
c0010185:	c3                   	ret    

c0010186 <VgaText::updateCursor()>:
c0010186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001018a:	39 05 24 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca24,eax
c0010190:	75 0c                	jne    c001019e <VgaText::updateCursor()+0x18>
c0010192:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010198:	85 c0                	test   eax,eax
c001019a:	74 02                	je     c001019e <VgaText::updateCursor()+0x18>
c001019c:	ff e0                	jmp    eax
c001019e:	c3                   	ret    
c001019f:	90                   	nop

c00101a0 <VgaText::showCursor(bool)>:
c00101a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101a8:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00101ae:	c3                   	ret    
c00101af:	90                   	nop

c00101b0 <VgaText::disableBlink(bool)>:
c00101b0:	56                   	push   esi
c00101b1:	53                   	push   ebx
c00101b2:	51                   	push   ecx
c00101b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00101bb:	39 1d 24 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca24,ebx
c00101c1:	75 18                	jne    c00101db <VgaText::disableBlink(bool)+0x2b>
c00101c3:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00101c9:	85 c0                	test   eax,eax
c00101cb:	74 0e                	je     c00101db <VgaText::disableBlink(bool)+0x2b>
c00101cd:	89 f1                	mov    ecx,esi
c00101cf:	52                   	push   edx
c00101d0:	52                   	push   edx
c00101d1:	0f b6 d1             	movzx  edx,cl
c00101d4:	52                   	push   edx
c00101d5:	53                   	push   ebx
c00101d6:	ff d0                	call   eax
c00101d8:	83 c4 10             	add    esp,0x10
c00101db:	89 f0                	mov    eax,esi
c00101dd:	83 f0 01             	xor    eax,0x1
c00101e0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00101e6:	58                   	pop    eax
c00101e7:	5b                   	pop    ebx
c00101e8:	5e                   	pop    esi
c00101e9:	c3                   	ret    

c00101ea <VgaText::doANSI_SGR(int)>:
c00101ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101f2:	85 d2                	test   edx,edx
c00101f4:	75 14                	jne    c001020a <VgaText::doANSI_SGR(int)+0x20>
c00101f6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00101fc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010202:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010208:	eb 65                	jmp    c001026f <VgaText::doANSI_SGR(int)+0x85>
c001020a:	83 fa 07             	cmp    edx,0x7
c001020d:	75 14                	jne    c0010223 <VgaText::doANSI_SGR(int)+0x39>
c001020f:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010215:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001021b:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010221:	eb 4c                	jmp    c001026f <VgaText::doANSI_SGR(int)+0x85>
c0010223:	83 fa 1b             	cmp    edx,0x1b
c0010226:	74 ce                	je     c00101f6 <VgaText::doANSI_SGR(int)+0xc>
c0010228:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001022b:	83 f9 07             	cmp    ecx,0x7
c001022e:	77 09                	ja     c0010239 <VgaText::doANSI_SGR(int)+0x4f>
c0010230:	8b 14 8d a0 b8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4760]
c0010237:	eb 20                	jmp    c0010259 <VgaText::doANSI_SGR(int)+0x6f>
c0010239:	8d 4a d8             	lea    ecx,[edx-0x28]
c001023c:	83 f9 07             	cmp    ecx,0x7
c001023f:	77 09                	ja     c001024a <VgaText::doANSI_SGR(int)+0x60>
c0010241:	8b 14 8d a0 b8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4760]
c0010248:	eb 25                	jmp    c001026f <VgaText::doANSI_SGR(int)+0x85>
c001024a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001024d:	83 f9 07             	cmp    ecx,0x7
c0010250:	77 0e                	ja     c0010260 <VgaText::doANSI_SGR(int)+0x76>
c0010252:	8b 14 95 58 b7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd48a8]
c0010259:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001025f:	c3                   	ret    
c0010260:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010263:	83 f9 07             	cmp    ecx,0x7
c0010266:	77 0d                	ja     c0010275 <VgaText::doANSI_SGR(int)+0x8b>
c0010268:	8b 14 95 30 b7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd48d0]
c001026f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010275:	c3                   	ret    

c0010276 <VgaText::setDefaultBgColour(VgaColour)>:
c0010276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001027a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001027e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010284:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001028a:	c3                   	ret    
c001028b:	90                   	nop

c001028c <VgaText::setDefaultFgColour(VgaColour)>:
c001028c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010290:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010294:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001029a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00102a0:	c3                   	ret    
c00102a1:	90                   	nop

c00102a2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00102a2:	53                   	push   ebx
c00102a3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00102ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00102af:	51                   	push   ecx
c00102b0:	e8 c1 ff ff ff       	call   c0010276 <VgaText::setDefaultBgColour(VgaColour)>
c00102b5:	58                   	pop    eax
c00102b6:	5a                   	pop    edx
c00102b7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00102bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00102bf:	5b                   	pop    ebx
c00102c0:	eb ca                	jmp    c001028c <VgaText::setDefaultFgColour(VgaColour)>

c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>:
c00102c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00102c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102ca:	b0 01                	mov    al,0x1
c00102cc:	80 3d e0 c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c9e0,0x0
c00102d3:	75 0a                	jne    c00102df <VgaText::combineColours(unsigned char, unsigned char)+0x1d>
c00102d5:	83 e2 0f             	and    edx,0xf
c00102d8:	c1 e1 04             	shl    ecx,0x4
c00102db:	88 c8                	mov    al,cl
c00102dd:	09 d0                	or     eax,edx
c00102df:	c3                   	ret    

c00102e0 <VgaText::scrollScreen()>:
c00102e0:	55                   	push   ebp
c00102e1:	57                   	push   edi
c00102e2:	bf 01 00 00 00       	mov    edi,0x1
c00102e7:	56                   	push   esi
c00102e8:	53                   	push   ebx
c00102e9:	83 ec 0c             	sub    esp,0xc
c00102ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00102f0:	69 f7 a0 00 00 00    	imul   esi,edi,0xa0
c00102f6:	31 ed                	xor    ebp,ebp
c00102f8:	01 de                	add    esi,ebx
c00102fa:	8a 46 0c             	mov    al,BYTE PTR [esi+0xc]
c00102fd:	83 ff 17             	cmp    edi,0x17
c0010300:	88 86 6c ff ff ff    	mov    BYTE PTR [esi-0x94],al
c0010306:	75 28                	jne    c0010330 <VgaText::scrollScreen()+0x50>
c0010308:	f7 c5 01 00 00 00    	test   ebp,0x1
c001030e:	74 1c                	je     c001032c <VgaText::scrollScreen()+0x4c>
c0010310:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010317:	50                   	push   eax
c0010318:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001031f:	50                   	push   eax
c0010320:	e8 9d ff ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010325:	5a                   	pop    edx
c0010326:	59                   	pop    ecx
c0010327:	88 46 0c             	mov    BYTE PTR [esi+0xc],al
c001032a:	eb 04                	jmp    c0010330 <VgaText::scrollScreen()+0x50>
c001032c:	c6 46 0c 20          	mov    BYTE PTR [esi+0xc],0x20
c0010330:	45                   	inc    ebp
c0010331:	46                   	inc    esi
c0010332:	81 fd a0 00 00 00    	cmp    ebp,0xa0
c0010338:	75 c0                	jne    c00102fa <VgaText::scrollScreen()+0x1a>
c001033a:	47                   	inc    edi
c001033b:	83 ff 18             	cmp    edi,0x18
c001033e:	75 b0                	jne    c00102f0 <VgaText::scrollScreen()+0x10>
c0010340:	39 1d 24 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca24,ebx
c0010346:	75 24                	jne    c001036c <VgaText::scrollScreen()+0x8c>
c0010348:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001034f:	74 08                	je     c0010359 <VgaText::scrollScreen()+0x79>
c0010351:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010357:	eb 13                	jmp    c001036c <VgaText::scrollScreen()+0x8c>
c0010359:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001035f:	85 c0                	test   eax,eax
c0010361:	74 09                	je     c001036c <VgaText::scrollScreen()+0x8c>
c0010363:	83 ec 0c             	sub    esp,0xc
c0010366:	53                   	push   ebx
c0010367:	ff d0                	call   eax
c0010369:	83 c4 10             	add    esp,0x10
c001036c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010370:	83 c4 0c             	add    esp,0xc
c0010373:	5b                   	pop    ebx
c0010374:	5e                   	pop    esi
c0010375:	5f                   	pop    edi
c0010376:	5d                   	pop    ebp
c0010377:	e9 0a fe ff ff       	jmp    c0010186 <VgaText::updateCursor()>

c001037c <VgaText::combineCharAndColour(char, unsigned char)>:
c001037c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010381:	c1 e0 08             	shl    eax,0x8
c0010384:	89 c2                	mov    edx,eax
c0010386:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001038b:	09 d0                	or     eax,edx
c001038d:	c3                   	ret    

c001038e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001038e:	53                   	push   ebx
c001038f:	83 ec 08             	sub    esp,0x8
c0010392:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010396:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001039b:	50                   	push   eax
c001039c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00103a1:	50                   	push   eax
c00103a2:	e8 1b ff ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c00103a7:	5a                   	pop    edx
c00103a8:	0f b6 c0             	movzx  eax,al
c00103ab:	59                   	pop    ecx
c00103ac:	0f be 4c 24 14       	movsx  ecx,BYTE PTR [esp+0x14]
c00103b1:	50                   	push   eax
c00103b2:	51                   	push   ecx
c00103b3:	e8 c4 ff ff ff       	call   c001037c <VgaText::combineCharAndColour(char, unsigned char)>
c00103b8:	5a                   	pop    edx
c00103b9:	5a                   	pop    edx
c00103ba:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00103c0:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00103c4:	0f b7 d2             	movzx  edx,dx
c00103c7:	66 89 44 53 0c       	mov    WORD PTR [ebx+edx*2+0xc],ax
c00103cc:	39 1d 24 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca24,ebx
c00103d2:	75 14                	jne    c00103e8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00103d4:	8b 83 18 10 00 00    	mov    eax,DWORD PTR [ebx+0x1018]
c00103da:	85 c0                	test   eax,eax
c00103dc:	74 0a                	je     c00103e8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00103de:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00103e2:	83 c4 08             	add    esp,0x8
c00103e5:	5b                   	pop    ebx
c00103e6:	ff e0                	jmp    eax
c00103e8:	83 c4 08             	add    esp,0x8
c00103eb:	5b                   	pop    ebx
c00103ec:	c3                   	ret    
c00103ed:	90                   	nop

c00103ee <VgaText::getCursorX()>:
c00103ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103f2:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00103f8:	c3                   	ret    
c00103f9:	90                   	nop

c00103fa <VgaText::getCursorY()>:
c00103fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103fe:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010404:	c3                   	ret    
c0010405:	90                   	nop

c0010406 <VgaText::setCursor(int, int)>:
c0010406:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001040a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001040e:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010414:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010418:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001041e:	e9 63 fd ff ff       	jmp    c0010186 <VgaText::updateCursor()>
c0010423:	90                   	nop

c0010424 <VgaText::setCursorX(int)>:
c0010424:	83 ec 10             	sub    esp,0x10
c0010427:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001042b:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010431:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010435:	50                   	push   eax
c0010436:	e8 cb ff ff ff       	call   c0010406 <VgaText::setCursor(int, int)>
c001043b:	83 c4 1c             	add    esp,0x1c
c001043e:	c3                   	ret    
c001043f:	90                   	nop

c0010440 <VgaText::setCursorY(int)>:
c0010440:	83 ec 10             	sub    esp,0x10
c0010443:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010447:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001044b:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010451:	50                   	push   eax
c0010452:	e8 af ff ff ff       	call   c0010406 <VgaText::setCursor(int, int)>
c0010457:	83 c4 1c             	add    esp,0x1c
c001045a:	c3                   	ret    
c001045b:	90                   	nop

c001045c <VgaText::incrementCursor(bool)>:
c001045c:	56                   	push   esi
c001045d:	53                   	push   ebx
c001045e:	51                   	push   ecx
c001045f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010463:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010467:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001046d:	40                   	inc    eax
c001046e:	83 f8 50             	cmp    eax,0x50
c0010471:	74 08                	je     c001047b <VgaText::incrementCursor(bool)+0x1f>
c0010473:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010479:	eb 33                	jmp    c00104ae <VgaText::incrementCursor(bool)+0x52>
c001047b:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010481:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001048b:	8d 50 01             	lea    edx,[eax+0x1]
c001048e:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010494:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001049a:	75 12                	jne    c00104ae <VgaText::incrementCursor(bool)+0x52>
c001049c:	83 ec 0c             	sub    esp,0xc
c001049f:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00104a5:	53                   	push   ebx
c00104a6:	e8 35 fe ff ff       	call   c00102e0 <VgaText::scrollScreen()>
c00104ab:	83 c4 10             	add    esp,0x10
c00104ae:	89 f0                	mov    eax,esi
c00104b0:	84 c0                	test   al,al
c00104b2:	74 0c                	je     c00104c0 <VgaText::incrementCursor(bool)+0x64>
c00104b4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104b8:	5a                   	pop    edx
c00104b9:	5b                   	pop    ebx
c00104ba:	5e                   	pop    esi
c00104bb:	e9 c6 fc ff ff       	jmp    c0010186 <VgaText::updateCursor()>
c00104c0:	58                   	pop    eax
c00104c1:	5b                   	pop    ebx
c00104c2:	5e                   	pop    esi
c00104c3:	c3                   	ret    

c00104c4 <VgaText::updateRAMUsageDisplay(int)>:
c00104c4:	56                   	push   esi
c00104c5:	8b 35 80 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b880
c00104cb:	53                   	push   ebx
c00104cc:	6a 0f                	push   0xf
c00104ce:	6a 00                	push   0x0
c00104d0:	e8 ed fd ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c00104d5:	5a                   	pop    edx
c00104d6:	0f b6 c0             	movzx  eax,al
c00104d9:	59                   	pop    ecx
c00104da:	b9 0a 00 00 00       	mov    ecx,0xa
c00104df:	50                   	push   eax
c00104e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e4:	99                   	cdq    
c00104e5:	f7 f9                	idiv   ecx
c00104e7:	89 d3                	mov    ebx,edx
c00104e9:	83 c0 30             	add    eax,0x30
c00104ec:	83 c3 30             	add    ebx,0x30
c00104ef:	0f be c0             	movsx  eax,al
c00104f2:	0f b6 db             	movzx  ebx,bl
c00104f5:	50                   	push   eax
c00104f6:	e8 81 fe ff ff       	call   c001037c <VgaText::combineCharAndColour(char, unsigned char)>
c00104fb:	5a                   	pop    edx
c00104fc:	59                   	pop    ecx
c00104fd:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010504:	6a 0f                	push   0xf
c0010506:	6a 00                	push   0x0
c0010508:	e8 b5 fd ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c001050d:	5a                   	pop    edx
c001050e:	0f b6 c0             	movzx  eax,al
c0010511:	59                   	pop    ecx
c0010512:	50                   	push   eax
c0010513:	53                   	push   ebx
c0010514:	e8 63 fe ff ff       	call   c001037c <VgaText::combineCharAndColour(char, unsigned char)>
c0010519:	5b                   	pop    ebx
c001051a:	5a                   	pop    edx
c001051b:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010522:	6a 0f                	push   0xf
c0010524:	6a 00                	push   0x0
c0010526:	e8 97 fd ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c001052b:	59                   	pop    ecx
c001052c:	0f b6 c0             	movzx  eax,al
c001052f:	5b                   	pop    ebx
c0010530:	50                   	push   eax
c0010531:	6a 25                	push   0x25
c0010533:	e8 44 fe ff ff       	call   c001037c <VgaText::combineCharAndColour(char, unsigned char)>
c0010538:	5a                   	pop    edx
c0010539:	59                   	pop    ecx
c001053a:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010541:	5b                   	pop    ebx
c0010542:	5e                   	pop    esi
c0010543:	c3                   	ret    

c0010544 <VgaText::updateDiskUsage()>:
c0010544:	55                   	push   ebp
c0010545:	57                   	push   edi
c0010546:	8b 3d 80 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b880
c001054c:	56                   	push   esi
c001054d:	53                   	push   ebx
c001054e:	bb 0a 00 00 00       	mov    ebx,0xa
c0010553:	6a 0f                	push   0xf
c0010555:	6a 00                	push   0x0
c0010557:	e8 66 fd ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c001055c:	5a                   	pop    edx
c001055d:	8b 35 88 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec88
c0010563:	59                   	pop    ecx
c0010564:	0f b6 c0             	movzx  eax,al
c0010567:	b9 10 27 00 00       	mov    ecx,0x2710
c001056c:	50                   	push   eax
c001056d:	89 f0                	mov    eax,esi
c001056f:	99                   	cdq    
c0010570:	f7 f9                	idiv   ecx
c0010572:	99                   	cdq    
c0010573:	f7 fb                	idiv   ebx
c0010575:	83 c2 30             	add    edx,0x30
c0010578:	0f b6 d2             	movzx  edx,dl
c001057b:	52                   	push   edx
c001057c:	e8 fb fd ff ff       	call   c001037c <VgaText::combineCharAndColour(char, unsigned char)>
c0010581:	5d                   	pop    ebp
c0010582:	5a                   	pop    edx
c0010583:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010587:	6a 0f                	push   0xf
c0010589:	6a 00                	push   0x0
c001058b:	e8 32 fd ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010590:	59                   	pop    ecx
c0010591:	0f b6 c0             	movzx  eax,al
c0010594:	5d                   	pop    ebp
c0010595:	bd e8 03 00 00       	mov    ebp,0x3e8
c001059a:	50                   	push   eax
c001059b:	89 f0                	mov    eax,esi
c001059d:	99                   	cdq    
c001059e:	f7 fd                	idiv   ebp
c00105a0:	99                   	cdq    
c00105a1:	f7 fb                	idiv   ebx
c00105a3:	8d 42 30             	lea    eax,[edx+0x30]
c00105a6:	0f b6 c0             	movzx  eax,al
c00105a9:	50                   	push   eax
c00105aa:	e8 cd fd ff ff       	call   c001037c <VgaText::combineCharAndColour(char, unsigned char)>
c00105af:	5a                   	pop    edx
c00105b0:	59                   	pop    ecx
c00105b1:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00105b8:	6a 0f                	push   0xf
c00105ba:	6a 00                	push   0x0
c00105bc:	e8 01 fd ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c00105c1:	5a                   	pop    edx
c00105c2:	0f b6 c0             	movzx  eax,al
c00105c5:	59                   	pop    ecx
c00105c6:	b9 64 00 00 00       	mov    ecx,0x64
c00105cb:	50                   	push   eax
c00105cc:	89 f0                	mov    eax,esi
c00105ce:	99                   	cdq    
c00105cf:	f7 f9                	idiv   ecx
c00105d1:	99                   	cdq    
c00105d2:	f7 fb                	idiv   ebx
c00105d4:	8d 42 30             	lea    eax,[edx+0x30]
c00105d7:	0f b6 c0             	movzx  eax,al
c00105da:	50                   	push   eax
c00105db:	e8 9c fd ff ff       	call   c001037c <VgaText::combineCharAndColour(char, unsigned char)>
c00105e0:	5a                   	pop    edx
c00105e1:	59                   	pop    ecx
c00105e2:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00105e9:	6a 0f                	push   0xf
c00105eb:	6a 00                	push   0x0
c00105ed:	e8 d0 fc ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c00105f2:	5a                   	pop    edx
c00105f3:	0f b6 c0             	movzx  eax,al
c00105f6:	59                   	pop    ecx
c00105f7:	50                   	push   eax
c00105f8:	89 f0                	mov    eax,esi
c00105fa:	99                   	cdq    
c00105fb:	f7 fb                	idiv   ebx
c00105fd:	89 d6                	mov    esi,edx
c00105ff:	99                   	cdq    
c0010600:	f7 fb                	idiv   ebx
c0010602:	8d 42 30             	lea    eax,[edx+0x30]
c0010605:	0f b6 c0             	movzx  eax,al
c0010608:	50                   	push   eax
c0010609:	e8 6e fd ff ff       	call   c001037c <VgaText::combineCharAndColour(char, unsigned char)>
c001060e:	5a                   	pop    edx
c001060f:	59                   	pop    ecx
c0010610:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010617:	6a 0f                	push   0xf
c0010619:	6a 00                	push   0x0
c001061b:	e8 a2 fc ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010620:	5a                   	pop    edx
c0010621:	0f b6 c0             	movzx  eax,al
c0010624:	59                   	pop    ecx
c0010625:	50                   	push   eax
c0010626:	8d 46 30             	lea    eax,[esi+0x30]
c0010629:	0f b6 f0             	movzx  esi,al
c001062c:	56                   	push   esi
c001062d:	e8 4a fd ff ff       	call   c001037c <VgaText::combineCharAndColour(char, unsigned char)>
c0010632:	5e                   	pop    esi
c0010633:	5a                   	pop    edx
c0010634:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c001063b:	6a 0f                	push   0xf
c001063d:	6a 00                	push   0x0
c001063f:	e8 7e fc ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010644:	59                   	pop    ecx
c0010645:	0f b6 c0             	movzx  eax,al
c0010648:	5e                   	pop    esi
c0010649:	b9 10 27 00 00       	mov    ecx,0x2710
c001064e:	8b 35 84 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec84
c0010654:	50                   	push   eax
c0010655:	89 f0                	mov    eax,esi
c0010657:	99                   	cdq    
c0010658:	f7 f9                	idiv   ecx
c001065a:	99                   	cdq    
c001065b:	f7 fb                	idiv   ebx
c001065d:	8d 42 30             	lea    eax,[edx+0x30]
c0010660:	0f b6 c0             	movzx  eax,al
c0010663:	50                   	push   eax
c0010664:	e8 13 fd ff ff       	call   c001037c <VgaText::combineCharAndColour(char, unsigned char)>
c0010669:	5a                   	pop    edx
c001066a:	59                   	pop    ecx
c001066b:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010672:	6a 0f                	push   0xf
c0010674:	6a 00                	push   0x0
c0010676:	e8 47 fc ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c001067b:	5a                   	pop    edx
c001067c:	0f b6 c0             	movzx  eax,al
c001067f:	59                   	pop    ecx
c0010680:	50                   	push   eax
c0010681:	89 f0                	mov    eax,esi
c0010683:	99                   	cdq    
c0010684:	f7 fd                	idiv   ebp
c0010686:	99                   	cdq    
c0010687:	f7 fb                	idiv   ebx
c0010689:	83 c2 30             	add    edx,0x30
c001068c:	0f b6 d2             	movzx  edx,dl
c001068f:	52                   	push   edx
c0010690:	e8 e7 fc ff ff       	call   c001037c <VgaText::combineCharAndColour(char, unsigned char)>
c0010695:	5d                   	pop    ebp
c0010696:	5a                   	pop    edx
c0010697:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c001069e:	6a 0f                	push   0xf
c00106a0:	6a 00                	push   0x0
c00106a2:	e8 1b fc ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c00106a7:	59                   	pop    ecx
c00106a8:	0f b6 c0             	movzx  eax,al
c00106ab:	5d                   	pop    ebp
c00106ac:	b9 64 00 00 00       	mov    ecx,0x64
c00106b1:	50                   	push   eax
c00106b2:	89 f0                	mov    eax,esi
c00106b4:	99                   	cdq    
c00106b5:	f7 f9                	idiv   ecx
c00106b7:	99                   	cdq    
c00106b8:	f7 fb                	idiv   ebx
c00106ba:	83 c2 30             	add    edx,0x30
c00106bd:	0f b6 d2             	movzx  edx,dl
c00106c0:	52                   	push   edx
c00106c1:	e8 b6 fc ff ff       	call   c001037c <VgaText::combineCharAndColour(char, unsigned char)>
c00106c6:	5a                   	pop    edx
c00106c7:	59                   	pop    ecx
c00106c8:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c00106cf:	6a 0f                	push   0xf
c00106d1:	6a 00                	push   0x0
c00106d3:	e8 ea fb ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c00106d8:	5d                   	pop    ebp
c00106d9:	0f b6 c0             	movzx  eax,al
c00106dc:	5a                   	pop    edx
c00106dd:	50                   	push   eax
c00106de:	89 f0                	mov    eax,esi
c00106e0:	99                   	cdq    
c00106e1:	f7 fb                	idiv   ebx
c00106e3:	89 d6                	mov    esi,edx
c00106e5:	99                   	cdq    
c00106e6:	f7 fb                	idiv   ebx
c00106e8:	8d 42 30             	lea    eax,[edx+0x30]
c00106eb:	0f b6 c0             	movzx  eax,al
c00106ee:	50                   	push   eax
c00106ef:	e8 88 fc ff ff       	call   c001037c <VgaText::combineCharAndColour(char, unsigned char)>
c00106f4:	59                   	pop    ecx
c00106f5:	5b                   	pop    ebx
c00106f6:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c00106fd:	6a 0f                	push   0xf
c00106ff:	6a 00                	push   0x0
c0010701:	e8 bc fb ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010706:	5d                   	pop    ebp
c0010707:	0f b6 c0             	movzx  eax,al
c001070a:	5a                   	pop    edx
c001070b:	50                   	push   eax
c001070c:	8d 46 30             	lea    eax,[esi+0x30]
c001070f:	0f b6 f0             	movzx  esi,al
c0010712:	56                   	push   esi
c0010713:	e8 64 fc ff ff       	call   c001037c <VgaText::combineCharAndColour(char, unsigned char)>
c0010718:	59                   	pop    ecx
c0010719:	5b                   	pop    ebx
c001071a:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010721:	5b                   	pop    ebx
c0010722:	5e                   	pop    esi
c0010723:	5f                   	pop    edi
c0010724:	5d                   	pop    ebp
c0010725:	c3                   	ret    

c0010726 <VgaText::updateTitle()>:
c0010726:	53                   	push   ebx
c0010727:	31 c0                	xor    eax,eax
c0010729:	83 ec 58             	sub    esp,0x58
c001072c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010730:	89 e1                	mov    ecx,esp
c0010732:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010736:	40                   	inc    eax
c0010737:	83 f8 50             	cmp    eax,0x50
c001073a:	75 f6                	jne    c0010732 <VgaText::updateTitle()+0xc>
c001073c:	31 c0                	xor    eax,eax
c001073e:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010745:	84 db                	test   bl,bl
c0010747:	74 06                	je     c001074f <VgaText::updateTitle()+0x29>
c0010749:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001074c:	40                   	inc    eax
c001074d:	eb ef                	jmp    c001073e <VgaText::updateTitle()+0x18>
c001074f:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010755:	85 c0                	test   eax,eax
c0010757:	74 09                	je     c0010762 <VgaText::updateTitle()+0x3c>
c0010759:	53                   	push   ebx
c001075a:	53                   	push   ebx
c001075b:	51                   	push   ecx
c001075c:	52                   	push   edx
c001075d:	ff d0                	call   eax
c001075f:	83 c4 10             	add    esp,0x10
c0010762:	e8 dd fd ff ff       	call   c0010544 <VgaText::updateDiskUsage()>
c0010767:	83 c4 58             	add    esp,0x58
c001076a:	5b                   	pop    ebx
c001076b:	c3                   	ret    

c001076c <VgaText::setTitleTextColour(VgaColour)>:
c001076c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010770:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010774:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c001077a:	eb aa                	jmp    c0010726 <VgaText::updateTitle()>

c001077c <VgaText::setTitleColour(VgaColour)>:
c001077c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010780:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010784:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c001078a:	eb 9a                	jmp    c0010726 <VgaText::updateTitle()>

c001078c <VgaText::setTitle(char*)>:
c001078c:	53                   	push   ebx
c001078d:	83 ec 10             	sub    esp,0x10
c0010790:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010798:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c001079e:	50                   	push   eax
c001079f:	e8 86 ff fe ff       	call   c000072a <strcpy>
c00107a4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00107a8:	83 c4 18             	add    esp,0x18
c00107ab:	5b                   	pop    ebx
c00107ac:	e9 75 ff ff ff       	jmp    c0010726 <VgaText::updateTitle()>
c00107b1:	90                   	nop

c00107b2 <VgaText::decrementCursor(bool)>:
c00107b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00107b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00107ba:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00107c0:	85 c0                	test   eax,eax
c00107c2:	74 07                	je     c00107cb <VgaText::decrementCursor(bool)+0x19>
c00107c4:	48                   	dec    eax
c00107c5:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00107cb:	84 c9                	test   cl,cl
c00107cd:	74 09                	je     c00107d8 <VgaText::decrementCursor(bool)+0x26>
c00107cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00107d3:	e9 ae f9 ff ff       	jmp    c0010186 <VgaText::updateCursor()>
c00107d8:	c3                   	ret    
c00107d9:	90                   	nop

c00107da <VgaText::putchar(char, VgaColour, VgaColour)>:
c00107da:	53                   	push   ebx
c00107db:	83 ec 08             	sub    esp,0x8
c00107de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107e6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00107ea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00107ee:	3c 07                	cmp    al,0x7
c00107f0:	75 2a                	jne    c001081c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00107f2:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c00107f7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00107ff:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010807:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001080f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010813:	83 c4 08             	add    esp,0x8
c0010816:	5b                   	pop    ebx
c0010817:	e9 64 2d 00 00       	jmp    c0013580 <Buzzer::beep(int, int, bool)>
c001081c:	3c 0d                	cmp    al,0xd
c001081e:	75 0c                	jne    c001082c <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010820:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001082a:	eb 3b                	jmp    c0010867 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c001082c:	3c 0a                	cmp    al,0xa
c001082e:	75 40                	jne    c0010870 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010830:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010836:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010840:	8d 50 01             	lea    edx,[eax+0x1]
c0010843:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010849:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001084f:	75 12                	jne    c0010863 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010851:	83 ec 0c             	sub    esp,0xc
c0010854:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001085a:	53                   	push   ebx
c001085b:	e8 80 fa ff ff       	call   c00102e0 <VgaText::scrollScreen()>
c0010860:	83 c4 10             	add    esp,0x10
c0010863:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010867:	83 c4 08             	add    esp,0x8
c001086a:	5b                   	pop    ebx
c001086b:	e9 16 f9 ff ff       	jmp    c0010186 <VgaText::updateCursor()>
c0010870:	3c 08                	cmp    al,0x8
c0010872:	75 31                	jne    c00108a5 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010874:	50                   	push   eax
c0010875:	50                   	push   eax
c0010876:	6a 01                	push   0x1
c0010878:	53                   	push   ebx
c0010879:	e8 34 ff ff ff       	call   c00107b2 <VgaText::decrementCursor(bool)>
c001087e:	5a                   	pop    edx
c001087f:	59                   	pop    ecx
c0010880:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010886:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001088c:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010892:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010898:	6a 20                	push   0x20
c001089a:	53                   	push   ebx
c001089b:	e8 ee fa ff ff       	call   c001038e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108a0:	83 c4 28             	add    esp,0x28
c00108a3:	5b                   	pop    ebx
c00108a4:	c3                   	ret    
c00108a5:	83 ec 08             	sub    esp,0x8
c00108a8:	0f be c0             	movsx  eax,al
c00108ab:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00108b1:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108b7:	51                   	push   ecx
c00108b8:	52                   	push   edx
c00108b9:	50                   	push   eax
c00108ba:	53                   	push   ebx
c00108bb:	e8 ce fa ff ff       	call   c001038e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108c0:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00108c4:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00108cc:	83 c4 28             	add    esp,0x28
c00108cf:	5b                   	pop    ebx
c00108d0:	e9 87 fb ff ff       	jmp    c001045c <VgaText::incrementCursor(bool)>
c00108d5:	90                   	nop

c00108d6 <VgaText::isShowingCursor()>:
c00108d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108da:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c00108e0:	c3                   	ret    
c00108e1:	90                   	nop

c00108e2 <VgaText::isBlinkDisabled()>:
c00108e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108e6:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c00108ec:	83 f0 01             	xor    eax,0x1
c00108ef:	c3                   	ret    

c00108f0 <VgaText::setCursorHeight(int)>:
c00108f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108f8:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c00108fe:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010905:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010909:	e9 92 f8 ff ff       	jmp    c00101a0 <VgaText::showCursor(bool)>

c001090e <VgaText::getCursorHeight()>:
c001090e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010912:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010918:	c3                   	ret    

c0010919 <setActiveTerminal(VgaText*)>:
c0010919:	53                   	push   ebx
c001091a:	83 ec 08             	sub    esp,0x8
c001091d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010921:	85 db                	test   ebx,ebx
c0010923:	75 11                	jne    c0010936 <setActiveTerminal(VgaText*)+0x1d>
c0010925:	c7 44 24 10 8c 8c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028c8c
c001092d:	83 c4 08             	add    esp,0x8
c0010930:	5b                   	pop    ebx
c0010931:	e9 65 8f 00 00       	jmp    c001989b <Krnl::panic(char const*)>
c0010936:	50                   	push   eax
c0010937:	50                   	push   eax
c0010938:	53                   	push   ebx
c0010939:	68 9a 8c 02 c0       	push   0xc0028c9a
c001093e:	e8 3e 1e 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0010943:	a1 24 ca 02 c0       	mov    eax,ds:0xc002ca24
c0010948:	83 c4 10             	add    esp,0x10
c001094b:	85 c0                	test   eax,eax
c001094d:	74 0c                	je     c001095b <setActiveTerminal(VgaText*)+0x42>
c001094f:	83 ec 0c             	sub    esp,0xc
c0010952:	50                   	push   eax
c0010953:	e8 2e f8 ff ff       	call   c0010186 <VgaText::updateCursor()>
c0010958:	83 c4 10             	add    esp,0x10
c001095b:	89 1d 24 ca 02 c0    	mov    DWORD PTR ds:0xc002ca24,ebx
c0010961:	51                   	push   ecx
c0010962:	51                   	push   ecx
c0010963:	53                   	push   ebx
c0010964:	68 b2 8c 02 c0       	push   0xc0028cb2
c0010969:	e8 13 1e 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001096e:	83 c4 0c             	add    esp,0xc
c0010971:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010977:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001097d:	53                   	push   ebx
c001097e:	e8 83 fa ff ff       	call   c0010406 <VgaText::setCursor(int, int)>
c0010983:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010986:	e8 57 ff ff ff       	call   c00108e2 <VgaText::isBlinkDisabled()>
c001098b:	5a                   	pop    edx
c001098c:	0f b6 c0             	movzx  eax,al
c001098f:	59                   	pop    ecx
c0010990:	50                   	push   eax
c0010991:	53                   	push   ebx
c0010992:	e8 19 f8 ff ff       	call   c00101b0 <VgaText::disableBlink(bool)>
c0010997:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001099a:	e8 6f ff ff ff       	call   c001090e <VgaText::getCursorHeight()>
c001099f:	5a                   	pop    edx
c00109a0:	59                   	pop    ecx
c00109a1:	50                   	push   eax
c00109a2:	53                   	push   ebx
c00109a3:	e8 48 ff ff ff       	call   c00108f0 <VgaText::setCursorHeight(int)>
c00109a8:	83 c4 10             	add    esp,0x10
c00109ab:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00109b2:	75 0a                	jne    c00109be <setActiveTerminal(VgaText*)+0xa5>
c00109b4:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00109be:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109c2:	83 c4 08             	add    esp,0x8
c00109c5:	5b                   	pop    ebx
c00109c6:	e9 67 f7 ff ff       	jmp    c0010132 <VgaText::load()>

c00109cb <doTerminalCycle()>:
c00109cb:	83 ec 18             	sub    esp,0x18
c00109ce:	a1 20 ca 02 c0       	mov    eax,ds:0xc002ca20
c00109d3:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c00109d9:	50                   	push   eax
c00109da:	a3 20 ca 02 c0       	mov    ds:0xc002ca20,eax
c00109df:	e8 35 ff ff ff       	call   c0010919 <setActiveTerminal(VgaText*)>
c00109e4:	83 c4 1c             	add    esp,0x1c
c00109e7:	c3                   	ret    

c00109e8 <VgaText::doUpdate()>:
c00109e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109ec:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c00109f2:	85 c0                	test   eax,eax
c00109f4:	74 02                	je     c00109f8 <VgaText::doUpdate()+0x10>
c00109f6:	ff e0                	jmp    eax
c00109f8:	c3                   	ret    
c00109f9:	90                   	nop

c00109fa <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00109fa:	55                   	push   ebp
c00109fb:	57                   	push   edi
c00109fc:	56                   	push   esi
c00109fd:	53                   	push   ebx
c00109fe:	83 ec 1c             	sub    esp,0x1c
c0010a01:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010a05:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a0a:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010a11:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010a14:	50                   	push   eax
c0010a15:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a1a:	50                   	push   eax
c0010a1b:	e8 a2 f8 ff ff       	call   c00102c2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a20:	59                   	pop    ecx
c0010a21:	0f b6 c0             	movzx  eax,al
c0010a24:	5b                   	pop    ebx
c0010a25:	31 c9                	xor    ecx,ecx
c0010a27:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a2f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010a33:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010a39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a3d:	0f b7 db             	movzx  ebx,bx
c0010a40:	01 db                	add    ebx,ebx
c0010a42:	01 fb                	add    ebx,edi
c0010a44:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010a47:	84 c0                	test   al,al
c0010a49:	0f 84 38 01 00 00    	je     c0010b87 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010a4f:	3c 0d                	cmp    al,0xd
c0010a51:	75 0f                	jne    c0010a62 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010a53:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010a5d:	e9 1f 01 00 00       	jmp    c0010b81 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a62:	3c 0a                	cmp    al,0xa
c0010a64:	75 5b                	jne    c0010ac1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010a66:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010a6c:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010a76:	8d 48 01             	lea    ecx,[eax+0x1]
c0010a79:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010a7f:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010a85:	75 12                	jne    c0010a99 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010a87:	83 ec 0c             	sub    esp,0xc
c0010a8a:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010a90:	55                   	push   ebp
c0010a91:	e8 4a f8 ff ff       	call   c00102e0 <VgaText::scrollScreen()>
c0010a96:	83 c4 10             	add    esp,0x10
c0010a99:	83 ec 0c             	sub    esp,0xc
c0010a9c:	55                   	push   ebp
c0010a9d:	e8 e4 f6 ff ff       	call   c0010186 <VgaText::updateCursor()>
c0010aa2:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010aaa:	83 c4 10             	add    esp,0x10
c0010aad:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ab3:	31 c9                	xor    ecx,ecx
c0010ab5:	0f b7 db             	movzx  ebx,bx
c0010ab8:	01 db                	add    ebx,ebx
c0010aba:	01 fb                	add    ebx,edi
c0010abc:	e9 c0 00 00 00       	jmp    c0010b81 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ac1:	3c 08                	cmp    al,0x8
c0010ac3:	75 4e                	jne    c0010b13 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ac5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ac9:	53                   	push   ebx
c0010aca:	53                   	push   ebx
c0010acb:	6a 01                	push   0x1
c0010acd:	55                   	push   ebp
c0010ace:	e8 df fc ff ff       	call   c00107b2 <VgaText::decrementCursor(bool)>
c0010ad3:	58                   	pop    eax
c0010ad4:	5a                   	pop    edx
c0010ad5:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010adb:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ae1:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ae7:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010aed:	6a 20                	push   0x20
c0010aef:	55                   	push   ebp
c0010af0:	e8 99 f8 ff ff       	call   c001038e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010af5:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010afd:	83 c4 20             	add    esp,0x20
c0010b00:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010b06:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010b0a:	0f b7 db             	movzx  ebx,bx
c0010b0d:	01 db                	add    ebx,ebx
c0010b0f:	01 fb                	add    ebx,edi
c0010b11:	eb 6e                	jmp    c0010b81 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010b13:	51                   	push   ecx
c0010b14:	51                   	push   ecx
c0010b15:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010b19:	50                   	push   eax
c0010b1a:	e8 5d f8 ff ff       	call   c001037c <VgaText::combineCharAndColour(char, unsigned char)>
c0010b1f:	83 c4 10             	add    esp,0x10
c0010b22:	66 89 03             	mov    WORD PTR [ebx],ax
c0010b25:	39 2d 24 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca24,ebp
c0010b2b:	75 2a                	jne    c0010b57 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010b2d:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010b33:	85 c0                	test   eax,eax
c0010b35:	74 20                	je     c0010b57 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010b37:	52                   	push   edx
c0010b38:	52                   	push   edx
c0010b39:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010b3f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010b45:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b49:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b4d:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010b50:	51                   	push   ecx
c0010b51:	55                   	push   ebp
c0010b52:	ff d0                	call   eax
c0010b54:	83 c4 20             	add    esp,0x20
c0010b57:	83 c3 02             	add    ebx,0x2
c0010b5a:	50                   	push   eax
c0010b5b:	50                   	push   eax
c0010b5c:	6a 00                	push   0x0
c0010b5e:	55                   	push   ebp
c0010b5f:	e8 f8 f8 ff ff       	call   c001045c <VgaText::incrementCursor(bool)>
c0010b64:	83 c4 10             	add    esp,0x10
c0010b67:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010b6e:	75 0f                	jne    c0010b7f <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010b70:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010b78:	0f b7 db             	movzx  ebx,bx
c0010b7b:	01 db                	add    ebx,ebx
c0010b7d:	01 fb                	add    ebx,edi
c0010b7f:	b1 01                	mov    cl,0x1
c0010b81:	46                   	inc    esi
c0010b82:	e9 bd fe ff ff       	jmp    c0010a44 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010b87:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010b8b:	83 ec 0c             	sub    esp,0xc
c0010b8e:	55                   	push   ebp
c0010b8f:	e8 f2 f5 ff ff       	call   c0010186 <VgaText::updateCursor()>
c0010b94:	83 c4 10             	add    esp,0x10
c0010b97:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010b9b:	84 c9                	test   cl,cl
c0010b9d:	74 0c                	je     c0010bab <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010b9f:	83 ec 0c             	sub    esp,0xc
c0010ba2:	55                   	push   ebp
c0010ba3:	e8 40 fe ff ff       	call   c00109e8 <VgaText::doUpdate()>
c0010ba8:	83 c4 10             	add    esp,0x10
c0010bab:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010bb2:	83 c4 1c             	add    esp,0x1c
c0010bb5:	5b                   	pop    ebx
c0010bb6:	5e                   	pop    esi
c0010bb7:	5f                   	pop    edi
c0010bb8:	5d                   	pop    ebp
c0010bb9:	c3                   	ret    

c0010bba <VgaText::clearScreen()>:
c0010bba:	57                   	push   edi
c0010bbb:	56                   	push   esi
c0010bbc:	31 f6                	xor    esi,esi
c0010bbe:	53                   	push   ebx
c0010bbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bc3:	52                   	push   edx
c0010bc4:	6a 00                	push   0x0
c0010bc6:	6a 00                	push   0x0
c0010bc8:	53                   	push   ebx
c0010bc9:	e8 38 f8 ff ff       	call   c0010406 <VgaText::setCursor(int, int)>
c0010bce:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010bd5:	83 c4 10             	add    esp,0x10
c0010bd8:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010bde:	7e 26                	jle    c0010c06 <VgaText::clearScreen()+0x4c>
c0010be0:	31 ff                	xor    edi,edi
c0010be2:	50                   	push   eax
c0010be3:	50                   	push   eax
c0010be4:	56                   	push   esi
c0010be5:	57                   	push   edi
c0010be6:	47                   	inc    edi
c0010be7:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010bed:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010bf3:	6a 20                	push   0x20
c0010bf5:	53                   	push   ebx
c0010bf6:	e8 93 f7 ff ff       	call   c001038e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010bfb:	83 c4 20             	add    esp,0x20
c0010bfe:	83 ff 50             	cmp    edi,0x50
c0010c01:	75 df                	jne    c0010be2 <VgaText::clearScreen()+0x28>
c0010c03:	46                   	inc    esi
c0010c04:	eb d2                	jmp    c0010bd8 <VgaText::clearScreen()+0x1e>
c0010c06:	83 ec 0c             	sub    esp,0xc
c0010c09:	53                   	push   ebx
c0010c0a:	e8 d9 fd ff ff       	call   c00109e8 <VgaText::doUpdate()>
c0010c0f:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010c16:	83 c4 10             	add    esp,0x10
c0010c19:	5b                   	pop    ebx
c0010c1a:	5e                   	pop    esi
c0010c1b:	5f                   	pop    edi
c0010c1c:	c3                   	ret    
c0010c1d:	90                   	nop

c0010c1e <VgaText::putchar(char)>:
c0010c1e:	56                   	push   esi
c0010c1f:	53                   	push   ebx
c0010c20:	83 ec 14             	sub    esp,0x14
c0010c23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010c27:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010c2b:	3c 5b                	cmp    al,0x5b
c0010c2d:	75 21                	jne    c0010c50 <VgaText::putchar(char)+0x32>
c0010c2f:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010c36:	74 28                	je     c0010c60 <VgaText::putchar(char)+0x42>
c0010c38:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010c41:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010c4b:	e9 e2 00 00 00       	jmp    c0010d32 <VgaText::putchar(char)+0x114>
c0010c50:	3c 1b                	cmp    al,0x1b
c0010c52:	75 0c                	jne    c0010c60 <VgaText::putchar(char)+0x42>
c0010c54:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010c5b:	e9 d2 00 00 00       	jmp    c0010d32 <VgaText::putchar(char)+0x114>
c0010c60:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010c66:	84 c9                	test   cl,cl
c0010c68:	0f 84 ab 00 00 00    	je     c0010d19 <VgaText::putchar(char)+0xfb>
c0010c6e:	8d 50 c0             	lea    edx,[eax-0x40]
c0010c71:	80 fa 3e             	cmp    dl,0x3e
c0010c74:	0f 87 82 00 00 00    	ja     c0010cfc <VgaText::putchar(char)+0xde>
c0010c7a:	3c 6d                	cmp    al,0x6d
c0010c7c:	75 4d                	jne    c0010ccb <VgaText::putchar(char)+0xad>
c0010c7e:	31 f6                	xor    esi,esi
c0010c80:	31 d2                	xor    edx,edx
c0010c82:	31 c0                	xor    eax,eax
c0010c84:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010c8a:	7e 30                	jle    c0010cbc <VgaText::putchar(char)+0x9e>
c0010c8c:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010c94:	80 fa 3b             	cmp    dl,0x3b
c0010c97:	75 17                	jne    c0010cb0 <VgaText::putchar(char)+0x92>
c0010c99:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010c9d:	50                   	push   eax
c0010c9e:	53                   	push   ebx
c0010c9f:	e8 46 f5 ff ff       	call   c00101ea <VgaText::doANSI_SGR(int)>
c0010ca4:	59                   	pop    ecx
c0010ca5:	31 d2                	xor    edx,edx
c0010ca7:	58                   	pop    eax
c0010ca8:	31 c0                	xor    eax,eax
c0010caa:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010cae:	eb 09                	jmp    c0010cb9 <VgaText::putchar(char)+0x9b>
c0010cb0:	6b c0 0a             	imul   eax,eax,0xa
c0010cb3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010cb7:	88 ca                	mov    dl,cl
c0010cb9:	46                   	inc    esi
c0010cba:	eb c8                	jmp    c0010c84 <VgaText::putchar(char)+0x66>
c0010cbc:	84 d2                	test   dl,dl
c0010cbe:	74 31                	je     c0010cf1 <VgaText::putchar(char)+0xd3>
c0010cc0:	50                   	push   eax
c0010cc1:	53                   	push   ebx
c0010cc2:	e8 23 f5 ff ff       	call   c00101ea <VgaText::doANSI_SGR(int)>
c0010cc7:	58                   	pop    eax
c0010cc8:	5a                   	pop    edx
c0010cc9:	eb 26                	jmp    c0010cf1 <VgaText::putchar(char)+0xd3>
c0010ccb:	3c 4a                	cmp    al,0x4a
c0010ccd:	75 22                	jne    c0010cf1 <VgaText::putchar(char)+0xd3>
c0010ccf:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010cd6:	75 19                	jne    c0010cf1 <VgaText::putchar(char)+0xd3>
c0010cd8:	83 ec 0c             	sub    esp,0xc
c0010cdb:	53                   	push   ebx
c0010cdc:	e8 d9 fe ff ff       	call   c0010bba <VgaText::clearScreen()>
c0010ce1:	83 c4 0c             	add    esp,0xc
c0010ce4:	6a 00                	push   0x0
c0010ce6:	6a 00                	push   0x0
c0010ce8:	53                   	push   ebx
c0010ce9:	e8 18 f7 ff ff       	call   c0010406 <VgaText::setCursor(int, int)>
c0010cee:	83 c4 10             	add    esp,0x10
c0010cf1:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010cfa:	eb 36                	jmp    c0010d32 <VgaText::putchar(char)+0x114>
c0010cfc:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010d02:	83 fa 0e             	cmp    edx,0xe
c0010d05:	7f 2b                	jg     c0010d32 <VgaText::putchar(char)+0x114>
c0010d07:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010d0a:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010d10:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010d17:	eb 19                	jmp    c0010d32 <VgaText::putchar(char)+0x114>
c0010d19:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d1f:	0f be c0             	movsx  eax,al
c0010d22:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d28:	50                   	push   eax
c0010d29:	53                   	push   ebx
c0010d2a:	e8 ab fa ff ff       	call   c00107da <VgaText::putchar(char, VgaColour, VgaColour)>
c0010d2f:	83 c4 10             	add    esp,0x10
c0010d32:	83 c4 14             	add    esp,0x14
c0010d35:	5b                   	pop    ebx
c0010d36:	5e                   	pop    esi
c0010d37:	c3                   	ret    

c0010d38 <VgaText::puts(char const*)>:
c0010d38:	53                   	push   ebx
c0010d39:	83 ec 08             	sub    esp,0x8
c0010d3c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010d40:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010d43:	84 c0                	test   al,al
c0010d45:	74 12                	je     c0010d59 <VgaText::puts(char const*)+0x21>
c0010d47:	43                   	inc    ebx
c0010d48:	51                   	push   ecx
c0010d49:	51                   	push   ecx
c0010d4a:	50                   	push   eax
c0010d4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d4f:	e8 ca fe ff ff       	call   c0010c1e <VgaText::putchar(char)>
c0010d54:	83 c4 10             	add    esp,0x10
c0010d57:	eb e7                	jmp    c0010d40 <VgaText::puts(char const*)+0x8>
c0010d59:	83 c4 08             	add    esp,0x8
c0010d5c:	5b                   	pop    ebx
c0010d5d:	c3                   	ret    

c0010d5e <VgaText::putx(unsigned int)>:
c0010d5e:	57                   	push   edi
c0010d5f:	b9 11 00 00 00       	mov    ecx,0x11
c0010d64:	56                   	push   esi
c0010d65:	be ce 8c 02 c0       	mov    esi,0xc0028cce
c0010d6a:	53                   	push   ebx
c0010d6b:	83 ec 20             	sub    esp,0x20
c0010d6e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010d72:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010d76:	fc                   	cld    
c0010d77:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d79:	be 08 00 00 00       	mov    esi,0x8
c0010d7e:	50                   	push   eax
c0010d7f:	50                   	push   eax
c0010d80:	89 d8                	mov    eax,ebx
c0010d82:	c1 e3 04             	shl    ebx,0x4
c0010d85:	c1 e8 1c             	shr    eax,0x1c
c0010d88:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010d8d:	50                   	push   eax
c0010d8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010d92:	e8 87 fe ff ff       	call   c0010c1e <VgaText::putchar(char)>
c0010d97:	83 c4 10             	add    esp,0x10
c0010d9a:	4e                   	dec    esi
c0010d9b:	75 e1                	jne    c0010d7e <VgaText::putx(unsigned int)+0x20>
c0010d9d:	83 c4 20             	add    esp,0x20
c0010da0:	5b                   	pop    ebx
c0010da1:	5e                   	pop    esi
c0010da2:	5f                   	pop    edi
c0010da3:	c3                   	ret    

c0010da4 <VgaText::VgaText(char const*)>:
c0010da4:	57                   	push   edi
c0010da5:	56                   	push   esi
c0010da6:	53                   	push   ebx
c0010da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dab:	83 ec 08             	sub    esp,0x8
c0010dae:	6a 00                	push   0x0
c0010db0:	50                   	push   eax
c0010db1:	e8 98 05 00 00       	call   c001134e <UnixFile::UnixFile(int)>
c0010db6:	83 c4 10             	add    esp,0x10
c0010db9:	ba 34 8d 02 c0       	mov    edx,0xc0028d34
c0010dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dc2:	89 10                	mov    DWORD PTR [eax],edx
c0010dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dc8:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dd6:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010de4:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010def:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dfa:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e08:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e16:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e21:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010e28:	b8 10 04 00 00       	mov    eax,0x410
c0010e2d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010e30:	0f b7 c0             	movzx  eax,ax
c0010e33:	83 e0 30             	and    eax,0x30
c0010e36:	83 f8 30             	cmp    eax,0x30
c0010e39:	74 16                	je     c0010e51 <VgaText::VgaText(char const*)+0xad>
c0010e3b:	a1 80 b8 02 c0       	mov    eax,ds:0xc002b880
c0010e40:	2d 00 80 00 00       	sub    eax,0x8000
c0010e45:	a3 80 b8 02 c0       	mov    ds:0xc002b880,eax
c0010e4a:	c6 05 e0 c9 02 c0 01 	mov    BYTE PTR ds:0xc002c9e0,0x1
c0010e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e55:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010e5b:	bb 00 ca 02 c0       	mov    ebx,0xc002ca00
c0010e60:	b8 08 00 00 00       	mov    eax,0x8
c0010e65:	fc                   	cld    
c0010e66:	89 d7                	mov    edi,edx
c0010e68:	89 de                	mov    esi,ebx
c0010e6a:	89 c1                	mov    ecx,eax
c0010e6c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e72:	05 1e 10 00 00       	add    eax,0x101e
c0010e77:	83 ec 08             	sub    esp,0x8
c0010e7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e7e:	50                   	push   eax
c0010e7f:	e8 a6 f8 fe ff       	call   c000072a <strcpy>
c0010e84:	83 c4 10             	add    esp,0x10
c0010e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e8b:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010e95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e99:	83 c0 0c             	add    eax,0xc
c0010e9c:	83 ec 04             	sub    esp,0x4
c0010e9f:	68 00 0f 00 00       	push   0xf00
c0010ea4:	6a 00                	push   0x0
c0010ea6:	50                   	push   eax
c0010ea7:	e8 df f7 fe ff       	call   c000068b <memset>
c0010eac:	83 c4 10             	add    esp,0x10
c0010eaf:	83 ec 04             	sub    esp,0x4
c0010eb2:	6a 00                	push   0x0
c0010eb4:	6a 07                	push   0x7
c0010eb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eba:	e8 e3 f3 ff ff       	call   c00102a2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010ebf:	83 c4 10             	add    esp,0x10
c0010ec2:	83 ec 08             	sub    esp,0x8
c0010ec5:	6a 02                	push   0x2
c0010ec7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ecb:	e8 20 fa ff ff       	call   c00108f0 <VgaText::setCursorHeight(int)>
c0010ed0:	83 c4 10             	add    esp,0x10
c0010ed3:	83 ec 04             	sub    esp,0x4
c0010ed6:	6a 00                	push   0x0
c0010ed8:	6a 00                	push   0x0
c0010eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ede:	e8 23 f5 ff ff       	call   c0010406 <VgaText::setCursor(int, int)>
c0010ee3:	83 c4 10             	add    esp,0x10
c0010ee6:	83 ec 08             	sub    esp,0x8
c0010ee9:	6a 01                	push   0x1
c0010eeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eef:	e8 ac f2 ff ff       	call   c00101a0 <VgaText::showCursor(bool)>
c0010ef4:	83 c4 10             	add    esp,0x10
c0010ef7:	83 ec 08             	sub    esp,0x8
c0010efa:	6a 01                	push   0x1
c0010efc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f00:	e8 ab f2 ff ff       	call   c00101b0 <VgaText::disableBlink(bool)>
c0010f05:	83 c4 10             	add    esp,0x10
c0010f08:	83 ec 0c             	sub    esp,0xc
c0010f0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f0f:	e8 a6 fc ff ff       	call   c0010bba <VgaText::clearScreen()>
c0010f14:	83 c4 10             	add    esp,0x10
c0010f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f1b:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f26:	05 9e 10 00 00       	add    eax,0x109e
c0010f2b:	83 ec 04             	sub    esp,0x4
c0010f2e:	68 96 00 00 00       	push   0x96
c0010f33:	6a 00                	push   0x0
c0010f35:	50                   	push   eax
c0010f36:	e8 50 f7 fe ff       	call   c000068b <memset>
c0010f3b:	83 c4 10             	add    esp,0x10
c0010f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f42:	05 34 11 00 00       	add    eax,0x1134
c0010f47:	83 ec 04             	sub    esp,0x4
c0010f4a:	68 2c 01 00 00       	push   0x12c
c0010f4f:	6a 00                	push   0x0
c0010f51:	50                   	push   eax
c0010f52:	e8 34 f7 fe ff       	call   c000068b <memset>
c0010f57:	83 c4 10             	add    esp,0x10
c0010f5a:	90                   	nop
c0010f5b:	5b                   	pop    ebx
c0010f5c:	5e                   	pop    esi
c0010f5d:	5f                   	pop    edi
c0010f5e:	c3                   	ret    
c0010f5f:	90                   	nop

c0010f60 <VgaText::receiveKey(unsigned char)>:
c0010f60:	55                   	push   ebp
c0010f61:	57                   	push   edi
c0010f62:	56                   	push   esi
c0010f63:	53                   	push   ebx
c0010f64:	83 ec 1c             	sub    esp,0x1c
c0010f67:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010f6b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f6f:	84 db                	test   bl,bl
c0010f71:	0f 84 c9 00 00 00    	je     c0011040 <VgaText::receiveKey(unsigned char)+0xe0>
c0010f77:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010f7d:	80 fb 08             	cmp    bl,0x8
c0010f80:	75 2c                	jne    c0010fae <VgaText::receiveKey(unsigned char)+0x4e>
c0010f82:	83 ec 0c             	sub    esp,0xc
c0010f85:	57                   	push   edi
c0010f86:	e8 1d f7 fe ff       	call   c00006a8 <strlen>
c0010f8b:	83 c4 10             	add    esp,0x10
c0010f8e:	85 c0                	test   eax,eax
c0010f90:	74 41                	je     c0010fd3 <VgaText::receiveKey(unsigned char)+0x73>
c0010f92:	50                   	push   eax
c0010f93:	50                   	push   eax
c0010f94:	6a 08                	push   0x8
c0010f96:	56                   	push   esi
c0010f97:	e8 82 fc ff ff       	call   c0010c1e <VgaText::putchar(char)>
c0010f9c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010f9f:	e8 04 f7 fe ff       	call   c00006a8 <strlen>
c0010fa4:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010fac:	eb 22                	jmp    c0010fd0 <VgaText::receiveKey(unsigned char)+0x70>
c0010fae:	0f be c3             	movsx  eax,bl
c0010fb1:	52                   	push   edx
c0010fb2:	52                   	push   edx
c0010fb3:	50                   	push   eax
c0010fb4:	56                   	push   esi
c0010fb5:	e8 64 fc ff ff       	call   c0010c1e <VgaText::putchar(char)>
c0010fba:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010fbe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010fc3:	59                   	pop    ecx
c0010fc4:	5d                   	pop    ebp
c0010fc5:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010fc9:	50                   	push   eax
c0010fca:	57                   	push   edi
c0010fcb:	e8 11 f8 fe ff       	call   c00007e1 <strcat>
c0010fd0:	83 c4 10             	add    esp,0x10
c0010fd3:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010fda:	75 05                	jne    c0010fe1 <VgaText::receiveKey(unsigned char)+0x81>
c0010fdc:	80 fb 0a             	cmp    bl,0xa
c0010fdf:	75 53                	jne    c0011034 <VgaText::receiveKey(unsigned char)+0xd4>
c0010fe1:	83 ec 0c             	sub    esp,0xc
c0010fe4:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010fea:	53                   	push   ebx
c0010feb:	e8 b8 f6 fe ff       	call   c00006a8 <strlen>
c0010ff0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ff3:	89 c5                	mov    ebp,eax
c0010ff5:	e8 ae f6 fe ff       	call   c00006a8 <strlen>
c0010ffa:	83 c4 10             	add    esp,0x10
c0010ffd:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011001:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011006:	76 10                	jbe    c0011018 <VgaText::receiveKey(unsigned char)+0xb8>
c0011008:	83 ec 0c             	sub    esp,0xc
c001100b:	68 df 8c 02 c0       	push   0xc0028cdf
c0011010:	e8 86 88 00 00       	call   c001989b <Krnl::panic(char const*)>
c0011015:	83 c4 10             	add    esp,0x10
c0011018:	50                   	push   eax
c0011019:	50                   	push   eax
c001101a:	57                   	push   edi
c001101b:	53                   	push   ebx
c001101c:	e8 c0 f7 fe ff       	call   c00007e1 <strcat>
c0011021:	83 c4 0c             	add    esp,0xc
c0011024:	68 96 00 00 00       	push   0x96
c0011029:	6a 00                	push   0x0
c001102b:	57                   	push   edi
c001102c:	e8 5a f6 fe ff       	call   c000068b <memset>
c0011031:	83 c4 10             	add    esp,0x10
c0011034:	83 ec 0c             	sub    esp,0xc
c0011037:	56                   	push   esi
c0011038:	e8 ab f9 ff ff       	call   c00109e8 <VgaText::doUpdate()>
c001103d:	83 c4 10             	add    esp,0x10
c0011040:	83 c4 1c             	add    esp,0x1c
c0011043:	5b                   	pop    ebx
c0011044:	5e                   	pop    esi
c0011045:	5f                   	pop    edi
c0011046:	5d                   	pop    ebp
c0011047:	c3                   	ret    

c0011048 <VgaText::write(unsigned long long, void*, int*)>:
c0011048:	55                   	push   ebp
c0011049:	57                   	push   edi
c001104a:	56                   	push   esi
c001104b:	53                   	push   ebx
c001104c:	83 ec 0c             	sub    esp,0xc
c001104f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011053:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011057:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001105b:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011062:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011065:	39 eb                	cmp    ebx,ebp
c0011067:	74 13                	je     c001107c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011069:	43                   	inc    ebx
c001106a:	50                   	push   eax
c001106b:	50                   	push   eax
c001106c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011070:	50                   	push   eax
c0011071:	56                   	push   esi
c0011072:	e8 a7 fb ff ff       	call   c0010c1e <VgaText::putchar(char)>
c0011077:	83 c4 10             	add    esp,0x10
c001107a:	eb e9                	jmp    c0011065 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001107c:	83 ec 0c             	sub    esp,0xc
c001107f:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011086:	56                   	push   esi
c0011087:	e8 5c f9 ff ff       	call   c00109e8 <VgaText::doUpdate()>
c001108c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011090:	89 38                	mov    DWORD PTR [eax],edi
c0011092:	83 c4 1c             	add    esp,0x1c
c0011095:	31 c0                	xor    eax,eax
c0011097:	5b                   	pop    ebx
c0011098:	5e                   	pop    esi
c0011099:	5f                   	pop    edi
c001109a:	5d                   	pop    ebp
c001109b:	c3                   	ret    

c001109c <newTerminal(char*)>:
c001109c:	83 ec 28             	sub    esp,0x28
c001109f:	68 60 12 00 00       	push   0x1260
c00110a4:	e8 2b e4 ff ff       	call   c000f4d4 <malloc>
c00110a9:	5a                   	pop    edx
c00110aa:	59                   	pop    ecx
c00110ab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00110af:	50                   	push   eax
c00110b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110b4:	e8 eb fc ff ff       	call   c0010da4 <VgaText::VgaText(char const*)>
c00110b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110bd:	83 c4 2c             	add    esp,0x2c
c00110c0:	c3                   	ret    
c00110c1:	90                   	nop

c00110c2 <TSS::TSS()>:
c00110c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00110cd:	90                   	nop
c00110ce:	c3                   	ret    
c00110cf:	90                   	nop

c00110d0 <TSS::setESP(unsigned long)>:
c00110d0:	55                   	push   ebp
c00110d1:	89 e5                	mov    ebp,esp
c00110d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110d9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110dc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00110df:	90                   	nop
c00110e0:	5d                   	pop    ebp
c00110e1:	c3                   	ret    

c00110e2 <TSS::flush()>:
c00110e2:	55                   	push   ebp
c00110e3:	89 e5                	mov    ebp,esp
c00110e5:	83 ec 10             	sub    esp,0x10
c00110e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00110ed:	83 c8 03             	or     eax,0x3
c00110f0:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00110f4:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00110f8:	66 89 d0             	mov    ax,dx
c00110fb:	0f 00 d8             	ltr    ax
c00110fe:	90                   	nop
c00110ff:	c9                   	leave  
c0011100:	c3                   	ret    
c0011101:	90                   	nop

c0011102 <TSS::setup(unsigned long, unsigned long)>:
c0011102:	55                   	push   ebp
c0011103:	89 e5                	mov    ebp,esp
c0011105:	83 ec 18             	sub    esp,0x18
c0011108:	83 ec 0c             	sub    esp,0xc
c001110b:	6a 68                	push   0x68
c001110d:	e8 c2 e3 ff ff       	call   c000f4d4 <malloc>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	89 c2                	mov    edx,eax
c0011117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001111a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001111d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011120:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011123:	83 ec 04             	sub    esp,0x4
c0011126:	6a 68                	push   0x68
c0011128:	6a 00                	push   0x0
c001112a:	50                   	push   eax
c001112b:	e8 5b f5 fe ff       	call   c000068b <memset>
c0011130:	83 c4 10             	add    esp,0x10
c0011133:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011136:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011139:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001113f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011142:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011145:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001114b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001114e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011151:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011154:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001115a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001115d:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011166:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011169:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001116f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011172:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011175:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001117b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001117e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011181:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001118a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001118d:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011196:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011199:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001119f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111a5:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00111a8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00111ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111b1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00111b4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00111b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111bd:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00111c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111ca:	0f 20 da             	mov    edx,cr3
c00111cd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00111d0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00111d3:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00111d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111dc:	83 ec 08             	sub    esp,0x8
c00111df:	50                   	push   eax
c00111e0:	8d 45 ec             	lea    eax,[ebp-0x14]
c00111e3:	50                   	push   eax
c00111e4:	e8 c9 da ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c00111e9:	83 c4 10             	add    esp,0x10
c00111ec:	83 ec 08             	sub    esp,0x8
c00111ef:	6a 68                	push   0x68
c00111f1:	8d 45 ec             	lea    eax,[ebp-0x14]
c00111f4:	50                   	push   eax
c00111f5:	e8 d4 da ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c00111fa:	83 c4 10             	add    esp,0x10
c00111fd:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011201:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011204:	83 e0 0f             	and    eax,0xf
c0011207:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001120a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001120d:	83 c8 40             	or     eax,0x40
c0011210:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011213:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0011218:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001121e:	05 78 01 00 00       	add    eax,0x178
c0011223:	83 ec 04             	sub    esp,0x4
c0011226:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011229:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001122c:	50                   	push   eax
c001122d:	e8 d0 da ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c0011232:	83 c4 10             	add    esp,0x10
c0011235:	89 c2                	mov    edx,eax
c0011237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001123a:	89 10                	mov    DWORD PTR [eax],edx
c001123c:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0011241:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011247:	05 78 01 00 00       	add    eax,0x178
c001124c:	83 ec 0c             	sub    esp,0xc
c001124f:	50                   	push   eax
c0011250:	e8 f1 da ff ff       	call   c000ed46 <GDT::flush()>
c0011255:	83 c4 10             	add    esp,0x10
c0011258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001125b:	8b 00                	mov    eax,DWORD PTR [eax]
c001125d:	83 ec 08             	sub    esp,0x8
c0011260:	50                   	push   eax
c0011261:	68 48 8d 02 c0       	push   0xc0028d48
c0011266:	e8 16 15 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001126b:	83 c4 10             	add    esp,0x10
c001126e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011271:	8b 00                	mov    eax,DWORD PTR [eax]
c0011273:	c9                   	leave  
c0011274:	c3                   	ret    
c0011275:	90                   	nop

c0011276 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001127a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001127e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011281:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011286:	75 08                	jne    c0011290 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011288:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001128e:	eb 38                	jmp    c00112c8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011290:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011295:	75 17                	jne    c00112ae <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011297:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001129c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001129f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00112a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00112a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00112ab:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00112ae:	89 c1                	mov    ecx,eax
c00112b0:	83 e1 fd             	and    ecx,0xfffffffd
c00112b3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00112b9:	74 cd                	je     c0011288 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00112bb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00112c0:	83 e0 ef             	and    eax,0xffffffef
c00112c3:	83 f8 08             	cmp    eax,0x8
c00112c6:	76 c0                	jbe    c0011288 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00112c8:	31 c0                	xor    eax,eax
c00112ca:	c3                   	ret    
c00112cb:	90                   	nop

c00112cc <ReservedFilename::isAtty()>:
c00112cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00112d3:	31 c0                	xor    eax,eax
c00112d5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00112db:	74 09                	je     c00112e6 <ReservedFilename::isAtty()+0x1a>
c00112dd:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00112e3:	0f 94 c0             	sete   al
c00112e6:	c3                   	ret    
c00112e7:	90                   	nop

c00112e8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00112e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112f7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00112fc:	75 08                	jne    c0011306 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00112fe:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011304:	eb 3d                	jmp    c0011343 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011306:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001130b:	75 17                	jne    c0011324 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001130d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011312:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011315:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001131b:	8b 10                	mov    edx,DWORD PTR [eax]
c001131d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011321:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011324:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011329:	75 04                	jne    c001132f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001132b:	89 0a                	mov    DWORD PTR [edx],ecx
c001132d:	eb 14                	jmp    c0011343 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001132f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011334:	74 c8                	je     c00112fe <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011336:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001133b:	83 e0 ef             	and    eax,0xffffffef
c001133e:	83 f8 08             	cmp    eax,0x8
c0011341:	76 bb                	jbe    c00112fe <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011343:	31 c0                	xor    eax,eax
c0011345:	c3                   	ret    

c0011346 <UnixFile::getFileDescriptor()>:
c0011346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001134a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001134d:	c3                   	ret    

c001134e <UnixFile::UnixFile(int)>:
c001134e:	53                   	push   ebx
c001134f:	83 ec 28             	sub    esp,0x28
c0011352:	ba 34 8e 02 c0       	mov    edx,0xc0028e34
c0011357:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001135b:	89 10                	mov    DWORD PTR [eax],edx
c001135d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011365:	0f 8f 8c 01 00 00    	jg     c00114f7 <UnixFile::UnixFile(int)+0x1a9>
c001136b:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c0011370:	8d 50 01             	lea    edx,[eax+0x1]
c0011373:	89 15 e0 b8 02 c0    	mov    DWORD PTR ds:0xc002b8e0,edx
c0011379:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001137d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011380:	83 ec 08             	sub    esp,0x8
c0011383:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011387:	68 b8 ca 02 c0       	push   0xc002cab8
c001138c:	e8 8f 5d 01 00       	call   c0027120 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011391:	83 c4 10             	add    esp,0x10
c0011394:	a0 b4 ca 02 c0       	mov    al,ds:0xc002cab4
c0011399:	83 f0 01             	xor    eax,0x1
c001139c:	84 c0                	test   al,al
c001139e:	0f 84 54 01 00 00    	je     c00114f8 <UnixFile::UnixFile(int)+0x1aa>
c00113a4:	c6 05 b4 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cab4,0x1
c00113ab:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00113b3:	83 ec 0c             	sub    esp,0xc
c00113b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113ba:	e8 15 e1 ff ff       	call   c000f4d4 <malloc>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	89 c3                	mov    ebx,eax
c00113c4:	83 ec 08             	sub    esp,0x8
c00113c7:	68 03 ff ff 0f       	push   0xfffff03
c00113cc:	53                   	push   ebx
c00113cd:	e8 2c 01 00 00       	call   c00114fe <ReservedFilename::ReservedFilename(int)>
c00113d2:	83 c4 10             	add    esp,0x10
c00113d5:	89 1d ac ca 02 c0    	mov    DWORD PTR ds:0xc002caac,ebx
c00113db:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00113e3:	83 ec 0c             	sub    esp,0xc
c00113e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113ea:	e8 e5 e0 ff ff       	call   c000f4d4 <malloc>
c00113ef:	83 c4 10             	add    esp,0x10
c00113f2:	89 c3                	mov    ebx,eax
c00113f4:	83 ec 08             	sub    esp,0x8
c00113f7:	68 01 ff ff 0f       	push   0xfffff01
c00113fc:	53                   	push   ebx
c00113fd:	e8 fc 00 00 00       	call   c00114fe <ReservedFilename::ReservedFilename(int)>
c0011402:	83 c4 10             	add    esp,0x10
c0011405:	89 1d b0 ca 02 c0    	mov    DWORD PTR ds:0xc002cab0,ebx
c001140b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011413:	83 ec 0c             	sub    esp,0xc
c0011416:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001141a:	e8 b5 e0 ff ff       	call   c000f4d4 <malloc>
c001141f:	83 c4 10             	add    esp,0x10
c0011422:	89 c3                	mov    ebx,eax
c0011424:	83 ec 08             	sub    esp,0x8
c0011427:	68 00 ff ff 0f       	push   0xfffff00
c001142c:	53                   	push   ebx
c001142d:	e8 cc 00 00 00       	call   c00114fe <ReservedFilename::ReservedFilename(int)>
c0011432:	83 c4 10             	add    esp,0x10
c0011435:	89 1d a4 ca 02 c0    	mov    DWORD PTR ds:0xc002caa4,ebx
c001143b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011443:	83 ec 0c             	sub    esp,0xc
c0011446:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001144a:	e8 85 e0 ff ff       	call   c000f4d4 <malloc>
c001144f:	83 c4 10             	add    esp,0x10
c0011452:	89 c3                	mov    ebx,eax
c0011454:	83 ec 08             	sub    esp,0x8
c0011457:	68 02 ff ff 0f       	push   0xfffff02
c001145c:	53                   	push   ebx
c001145d:	e8 9c 00 00 00       	call   c00114fe <ReservedFilename::ReservedFilename(int)>
c0011462:	83 c4 10             	add    esp,0x10
c0011465:	89 1d a8 ca 02 c0    	mov    DWORD PTR ds:0xc002caa8,ebx
c001146b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011473:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011478:	7f 7e                	jg     c00114f8 <UnixFile::UnixFile(int)+0x1aa>
c001147a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011482:	83 ec 0c             	sub    esp,0xc
c0011485:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011489:	e8 46 e0 ff ff       	call   c000f4d4 <malloc>
c001148e:	83 c4 10             	add    esp,0x10
c0011491:	89 c3                	mov    ebx,eax
c0011493:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011497:	05 10 ff ff 0f       	add    eax,0xfffff10
c001149c:	83 ec 08             	sub    esp,0x8
c001149f:	50                   	push   eax
c00114a0:	53                   	push   ebx
c00114a1:	e8 58 00 00 00       	call   c00114fe <ReservedFilename::ReservedFilename(int)>
c00114a6:	83 c4 10             	add    esp,0x10
c00114a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114ad:	89 1c 85 80 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3580],ebx
c00114b4:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00114bc:	83 ec 0c             	sub    esp,0xc
c00114bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00114c3:	e8 0c e0 ff ff       	call   c000f4d4 <malloc>
c00114c8:	83 c4 10             	add    esp,0x10
c00114cb:	89 c3                	mov    ebx,eax
c00114cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114d1:	05 20 ff ff 0f       	add    eax,0xfffff20
c00114d6:	83 ec 08             	sub    esp,0x8
c00114d9:	50                   	push   eax
c00114da:	53                   	push   ebx
c00114db:	e8 1e 00 00 00       	call   c00114fe <ReservedFilename::ReservedFilename(int)>
c00114e0:	83 c4 10             	add    esp,0x10
c00114e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114e7:	89 1c 85 40 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd35c0],ebx
c00114ee:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00114f2:	e9 7c ff ff ff       	jmp    c0011473 <UnixFile::UnixFile(int)+0x125>
c00114f7:	90                   	nop
c00114f8:	83 c4 28             	add    esp,0x28
c00114fb:	5b                   	pop    ebx
c00114fc:	c3                   	ret    
c00114fd:	90                   	nop

c00114fe <ReservedFilename::ReservedFilename(int)>:
c00114fe:	83 ec 0c             	sub    esp,0xc
c0011501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011505:	83 ec 08             	sub    esp,0x8
c0011508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001150c:	50                   	push   eax
c001150d:	e8 3c fe ff ff       	call   c001134e <UnixFile::UnixFile(int)>
c0011512:	83 c4 10             	add    esp,0x10
c0011515:	ba 50 8e 02 c0       	mov    edx,0xc0028e50
c001151a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001151e:	89 10                	mov    DWORD PTR [eax],edx
c0011520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011524:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011528:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001152b:	90                   	nop
c001152c:	83 c4 0c             	add    esp,0xc
c001152f:	c3                   	ret    

c0011530 <UnixFile::~UnixFile()>:
c0011530:	83 ec 1c             	sub    esp,0x1c
c0011533:	ba 34 8e 02 c0       	mov    edx,0xc0028e34
c0011538:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001153c:	89 10                	mov    DWORD PTR [eax],edx
c001153e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011542:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011545:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001154a:	7f 73                	jg     c00115bf <UnixFile::~UnixFile()+0x8f>
c001154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011554:	83 ec 0c             	sub    esp,0xc
c0011557:	68 b8 ca 02 c0       	push   0xc002cab8
c001155c:	e8 93 5c 01 00       	call   c00271f4 <LinkedList<UnixFile>::getFirstElement()>
c0011561:	83 c4 10             	add    esp,0x10
c0011564:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011568:	83 ec 0c             	sub    esp,0xc
c001156b:	68 b8 ca 02 c0       	push   0xc002cab8
c0011570:	e8 87 5c 01 00       	call   c00271fc <LinkedList<UnixFile>::removeFirst()>
c0011575:	83 c4 10             	add    esp,0x10
c0011578:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001157c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011580:	74 40                	je     c00115c2 <UnixFile::~UnixFile()+0x92>
c0011582:	83 ec 08             	sub    esp,0x8
c0011585:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011589:	68 b8 ca 02 c0       	push   0xc002cab8
c001158e:	e8 8d 5b 01 00       	call   c0027120 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011593:	83 c4 10             	add    esp,0x10
c0011596:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001159a:	8d 50 01             	lea    edx,[eax+0x1]
c001159d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00115a1:	3d 88 13 00 00       	cmp    eax,0x1388
c00115a6:	0f 94 c0             	sete   al
c00115a9:	84 c0                	test   al,al
c00115ab:	74 a7                	je     c0011554 <UnixFile::~UnixFile()+0x24>
c00115ad:	83 ec 0c             	sub    esp,0xc
c00115b0:	68 0c 8e 02 c0       	push   0xc0028e0c
c00115b5:	e8 e1 82 00 00       	call   c001989b <Krnl::panic(char const*)>
c00115ba:	83 c4 10             	add    esp,0x10
c00115bd:	eb 95                	jmp    c0011554 <UnixFile::~UnixFile()+0x24>
c00115bf:	90                   	nop
c00115c0:	eb 01                	jmp    c00115c3 <UnixFile::~UnixFile()+0x93>
c00115c2:	90                   	nop
c00115c3:	90                   	nop
c00115c4:	83 c4 1c             	add    esp,0x1c
c00115c7:	c3                   	ret    

c00115c8 <UnixFile::~UnixFile()>:
c00115c8:	83 ec 0c             	sub    esp,0xc
c00115cb:	83 ec 0c             	sub    esp,0xc
c00115ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115d2:	e8 59 ff ff ff       	call   c0011530 <UnixFile::~UnixFile()>
c00115d7:	83 c4 10             	add    esp,0x10
c00115da:	83 ec 08             	sub    esp,0x8
c00115dd:	6a 0c                	push   0xc
c00115df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115e3:	e8 b9 10 00 00       	call   c00126a1 <operator delete(void*, unsigned long)>
c00115e8:	83 c4 10             	add    esp,0x10
c00115eb:	83 c4 0c             	add    esp,0xc
c00115ee:	c3                   	ret    
c00115ef:	90                   	nop

c00115f0 <ReservedFilename::~ReservedFilename()>:
c00115f0:	83 ec 0c             	sub    esp,0xc
c00115f3:	ba 50 8e 02 c0       	mov    edx,0xc0028e50
c00115f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115fc:	89 10                	mov    DWORD PTR [eax],edx
c00115fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011602:	83 ec 0c             	sub    esp,0xc
c0011605:	50                   	push   eax
c0011606:	e8 25 ff ff ff       	call   c0011530 <UnixFile::~UnixFile()>
c001160b:	83 c4 10             	add    esp,0x10
c001160e:	90                   	nop
c001160f:	83 c4 0c             	add    esp,0xc
c0011612:	c3                   	ret    
c0011613:	90                   	nop

c0011614 <ReservedFilename::~ReservedFilename()>:
c0011614:	83 ec 0c             	sub    esp,0xc
c0011617:	83 ec 0c             	sub    esp,0xc
c001161a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001161e:	e8 cd ff ff ff       	call   c00115f0 <ReservedFilename::~ReservedFilename()>
c0011623:	83 c4 10             	add    esp,0x10
c0011626:	83 ec 08             	sub    esp,0x8
c0011629:	6a 0c                	push   0xc
c001162b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001162f:	e8 6d 10 00 00       	call   c00126a1 <operator delete(void*, unsigned long)>
c0011634:	83 c4 10             	add    esp,0x10
c0011637:	83 c4 0c             	add    esp,0xc
c001163a:	c3                   	ret    

c001163b <getFromFileDescriptor(int)>:
c001163b:	53                   	push   ebx
c001163c:	83 ec 08             	sub    esp,0x8
c001163f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011643:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011649:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001164f:	7f 2c                	jg     c001167d <getFromFileDescriptor(int)+0x42>
c0011651:	83 ec 0c             	sub    esp,0xc
c0011654:	68 b8 ca 02 c0       	push   0xc002cab8
c0011659:	e8 96 5b 01 00       	call   c00271f4 <LinkedList<UnixFile>::getFirstElement()>
c001165e:	83 c4 10             	add    esp,0x10
c0011661:	85 c0                	test   eax,eax
c0011663:	75 04                	jne    c0011669 <getFromFileDescriptor(int)+0x2e>
c0011665:	31 c0                	xor    eax,eax
c0011667:	eb 6e                	jmp    c00116d7 <getFromFileDescriptor(int)+0x9c>
c0011669:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001166c:	74 69                	je     c00116d7 <getFromFileDescriptor(int)+0x9c>
c001166e:	52                   	push   edx
c001166f:	52                   	push   edx
c0011670:	50                   	push   eax
c0011671:	68 b8 ca 02 c0       	push   0xc002cab8
c0011676:	e8 23 5c 01 00       	call   c002729e <LinkedList<UnixFile>::getNext(UnixFile*)>
c001167b:	eb e1                	jmp    c001165e <getFromFileDescriptor(int)+0x23>
c001167d:	a1 ac ca 02 c0       	mov    eax,ds:0xc002caac
c0011682:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011688:	74 4d                	je     c00116d7 <getFromFileDescriptor(int)+0x9c>
c001168a:	a1 b0 ca 02 c0       	mov    eax,ds:0xc002cab0
c001168f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011695:	74 40                	je     c00116d7 <getFromFileDescriptor(int)+0x9c>
c0011697:	a1 a8 ca 02 c0       	mov    eax,ds:0xc002caa8
c001169c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00116a2:	74 33                	je     c00116d7 <getFromFileDescriptor(int)+0x9c>
c00116a4:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c00116a9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00116af:	74 26                	je     c00116d7 <getFromFileDescriptor(int)+0x9c>
c00116b1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00116b7:	83 f8 08             	cmp    eax,0x8
c00116ba:	77 09                	ja     c00116c5 <getFromFileDescriptor(int)+0x8a>
c00116bc:	8b 04 85 80 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3580]
c00116c3:	eb 12                	jmp    c00116d7 <getFromFileDescriptor(int)+0x9c>
c00116c5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00116cb:	83 fb 08             	cmp    ebx,0x8
c00116ce:	77 95                	ja     c0011665 <getFromFileDescriptor(int)+0x2a>
c00116d0:	8b 04 9d 40 ca 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd35c0]
c00116d7:	83 c4 08             	add    esp,0x8
c00116da:	5b                   	pop    ebx
c00116db:	c3                   	ret    

c00116dc <__static_initialization_and_destruction_0(int, int)>:
c00116dc:	83 ec 0c             	sub    esp,0xc
c00116df:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00116e4:	75 34                	jne    c001171a <__static_initialization_and_destruction_0(int, int)+0x3e>
c00116e6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00116ee:	75 2a                	jne    c001171a <__static_initialization_and_destruction_0(int, int)+0x3e>
c00116f0:	83 ec 0c             	sub    esp,0xc
c00116f3:	68 b8 ca 02 c0       	push   0xc002cab8
c00116f8:	e8 cb 59 01 00       	call   c00270c8 <LinkedList<UnixFile>::LinkedList()>
c00116fd:	83 c4 10             	add    esp,0x10
c0011700:	83 ec 04             	sub    esp,0x4
c0011703:	68 68 b8 02 c0       	push   0xc002b868
c0011708:	68 b8 ca 02 c0       	push   0xc002cab8
c001170d:	68 c6 70 02 c0       	push   0xc00270c6
c0011712:	e8 04 0f 00 00       	call   c001261b <__cxa_atexit>
c0011717:	83 c4 10             	add    esp,0x10
c001171a:	90                   	nop
c001171b:	83 c4 0c             	add    esp,0xc
c001171e:	c3                   	ret    

c001171f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001171f:	83 ec 0c             	sub    esp,0xc
c0011722:	83 ec 08             	sub    esp,0x8
c0011725:	68 ff ff 00 00       	push   0xffff
c001172a:	6a 01                	push   0x1
c001172c:	e8 ab ff ff ff       	call   c00116dc <__static_initialization_and_destruction_0(int, int)>
c0011731:	83 c4 10             	add    esp,0x10
c0011734:	83 c4 0c             	add    esp,0xc
c0011737:	c3                   	ret    

c0011738 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011738:	53                   	push   ebx
c0011739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001173d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011741:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011747:	89 c8                	mov    eax,ecx
c0011749:	d1 e8                	shr    eax,1
c001174b:	03 05 e8 b8 02 c0    	add    eax,DWORD PTR ds:0xc002b8e8
c0011751:	83 e1 01             	and    ecx,0x1
c0011754:	8a 10                	mov    dl,BYTE PTR [eax]
c0011756:	75 09                	jne    c0011761 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011758:	83 e2 f0             	and    edx,0xfffffff0
c001175b:	09 da                	or     edx,ebx
c001175d:	88 10                	mov    BYTE PTR [eax],dl
c001175f:	5b                   	pop    ebx
c0011760:	c3                   	ret    
c0011761:	c1 e3 04             	shl    ebx,0x4
c0011764:	83 e2 0f             	and    edx,0xf
c0011767:	09 da                	or     edx,ebx
c0011769:	88 10                	mov    BYTE PTR [eax],dl
c001176b:	5b                   	pop    ebx
c001176c:	c3                   	ret    

c001176d <Virt::getPageState(unsigned long)>:
c001176d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011771:	8b 0d e8 b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b8e8
c0011777:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001177d:	89 d0                	mov    eax,edx
c001177f:	d1 e8                	shr    eax,1
c0011781:	83 e2 01             	and    edx,0x1
c0011784:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011787:	75 04                	jne    c001178d <Virt::getPageState(unsigned long)+0x20>
c0011789:	83 e0 0f             	and    eax,0xf
c001178c:	c3                   	ret    
c001178d:	c0 e8 04             	shr    al,0x4
c0011790:	c3                   	ret    

c0011791 <Virt::allocateKernelVirtualPages(int)>:
c0011791:	55                   	push   ebp
c0011792:	31 ed                	xor    ebp,ebp
c0011794:	57                   	push   edi
c0011795:	56                   	push   esi
c0011796:	53                   	push   ebx
c0011797:	31 db                	xor    ebx,ebx
c0011799:	83 ec 1c             	sub    esp,0x1c
c001179c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00117a0:	8b 3d e4 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b8e4
c00117a6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00117ab:	57                   	push   edi
c00117ac:	e8 bc ff ff ff       	call   c001176d <Virt::getPageState(unsigned long)>
c00117b1:	5a                   	pop    edx
c00117b2:	84 c0                	test   al,al
c00117b4:	75 3a                	jne    c00117f0 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00117b6:	85 db                	test   ebx,ebx
c00117b8:	75 02                	jne    c00117bc <Virt::allocateKernelVirtualPages(int)+0x2b>
c00117ba:	89 fd                	mov    ebp,edi
c00117bc:	43                   	inc    ebx
c00117bd:	39 f3                	cmp    ebx,esi
c00117bf:	74 5a                	je     c001181b <Virt::allocateKernelVirtualPages(int)+0x8a>
c00117c1:	47                   	inc    edi
c00117c2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00117c8:	76 31                	jbe    c00117fb <Virt::allocateKernelVirtualPages(int)+0x6a>
c00117ca:	c7 05 e4 b8 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002b8e4,0xc8000
c00117d4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117d9:	75 28                	jne    c0011803 <Virt::allocateKernelVirtualPages(int)+0x72>
c00117db:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00117e0:	bf 00 80 0c 00       	mov    edi,0xc8000
c00117e5:	57                   	push   edi
c00117e6:	e8 82 ff ff ff       	call   c001176d <Virt::getPageState(unsigned long)>
c00117eb:	5a                   	pop    edx
c00117ec:	84 c0                	test   al,al
c00117ee:	74 c6                	je     c00117b6 <Virt::allocateKernelVirtualPages(int)+0x25>
c00117f0:	31 db                	xor    ebx,ebx
c00117f2:	47                   	inc    edi
c00117f3:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00117f9:	77 cf                	ja     c00117ca <Virt::allocateKernelVirtualPages(int)+0x39>
c00117fb:	89 3d e4 b8 02 c0    	mov    DWORD PTR ds:0xc002b8e4,edi
c0011801:	eb a8                	jmp    c00117ab <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011803:	83 ec 0c             	sub    esp,0xc
c0011806:	68 64 8e 02 c0       	push   0xc0028e64
c001180b:	e8 8b 80 00 00       	call   c001989b <Krnl::panic(char const*)>
c0011810:	8b 3d e4 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b8e4
c0011816:	83 c4 10             	add    esp,0x10
c0011819:	eb 90                	jmp    c00117ab <Virt::allocateKernelVirtualPages(int)+0x1a>
c001181b:	89 2d e4 b8 02 c0    	mov    DWORD PTR ds:0xc002b8e4,ebp
c0011821:	4b                   	dec    ebx
c0011822:	74 5f                	je     c0011883 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011824:	85 f6                	test   esi,esi
c0011826:	74 3d                	je     c0011865 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011828:	89 e8                	mov    eax,ebp
c001182a:	31 db                	xor    ebx,ebx
c001182c:	8d 7e ff             	lea    edi,[esi-0x1]
c001182f:	eb 14                	jmp    c0011845 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011831:	6a 01                	push   0x1
c0011833:	43                   	inc    ebx
c0011834:	50                   	push   eax
c0011835:	e8 fe fe ff ff       	call   c0011738 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001183a:	58                   	pop    eax
c001183b:	39 f3                	cmp    ebx,esi
c001183d:	5a                   	pop    edx
c001183e:	74 25                	je     c0011865 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011840:	a1 e4 b8 02 c0       	mov    eax,ds:0xc002b8e4
c0011845:	8d 50 01             	lea    edx,[eax+0x1]
c0011848:	85 db                	test   ebx,ebx
c001184a:	89 15 e4 b8 02 c0    	mov    DWORD PTR ds:0xc002b8e4,edx
c0011850:	74 20                	je     c0011872 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011852:	39 df                	cmp    edi,ebx
c0011854:	75 db                	jne    c0011831 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011856:	6a 03                	push   0x3
c0011858:	43                   	inc    ebx
c0011859:	50                   	push   eax
c001185a:	e8 d9 fe ff ff       	call   c0011738 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001185f:	59                   	pop    ecx
c0011860:	39 f3                	cmp    ebx,esi
c0011862:	58                   	pop    eax
c0011863:	75 db                	jne    c0011840 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011865:	83 c4 1c             	add    esp,0x1c
c0011868:	89 e8                	mov    eax,ebp
c001186a:	5b                   	pop    ebx
c001186b:	c1 e0 0c             	shl    eax,0xc
c001186e:	5e                   	pop    esi
c001186f:	5f                   	pop    edi
c0011870:	5d                   	pop    ebp
c0011871:	c3                   	ret    
c0011872:	6a 02                	push   0x2
c0011874:	bb 01 00 00 00       	mov    ebx,0x1
c0011879:	50                   	push   eax
c001187a:	e8 b9 fe ff ff       	call   c0011738 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001187f:	58                   	pop    eax
c0011880:	5a                   	pop    edx
c0011881:	eb bd                	jmp    c0011840 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011883:	6a 04                	push   0x4
c0011885:	8d 45 01             	lea    eax,[ebp+0x1]
c0011888:	55                   	push   ebp
c0011889:	a3 e4 b8 02 c0       	mov    ds:0xc002b8e4,eax
c001188e:	e8 a5 fe ff ff       	call   c0011738 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011893:	59                   	pop    ecx
c0011894:	89 e8                	mov    eax,ebp
c0011896:	5b                   	pop    ebx
c0011897:	c1 e0 0c             	shl    eax,0xc
c001189a:	83 c4 1c             	add    esp,0x1c
c001189d:	5b                   	pop    ebx
c001189e:	5e                   	pop    esi
c001189f:	5f                   	pop    edi
c00118a0:	5d                   	pop    ebp
c00118a1:	c3                   	ret    

c00118a2 <Virt::virtualMemorySetup()>:
c00118a2:	53                   	push   ebx
c00118a3:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00118a8:	83 ec 08             	sub    esp,0x8
c00118ab:	6a 0f                	push   0xf
c00118ad:	53                   	push   ebx
c00118ae:	43                   	inc    ebx
c00118af:	e8 84 fe ff ff       	call   c0011738 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118b4:	59                   	pop    ecx
c00118b5:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00118bb:	58                   	pop    eax
c00118bc:	75 ed                	jne    c00118ab <Virt::virtualMemorySetup()+0x9>
c00118be:	83 ec 08             	sub    esp,0x8
c00118c1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00118c6:	68 00 00 00 c8       	push   0xc8000000
c00118cb:	68 eb 8f 02 c0       	push   0xc0028feb
c00118d0:	e8 ac 0e 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00118d5:	58                   	pop    eax
c00118d6:	5a                   	pop    edx
c00118d7:	68 00 f0 ff ef       	push   0xeffff000
c00118dc:	68 ff 8f 02 c0       	push   0xc0028fff
c00118e1:	e8 9b 0e 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00118e6:	83 c4 10             	add    esp,0x10
c00118e9:	83 ec 08             	sub    esp,0x8
c00118ec:	6a 00                	push   0x0
c00118ee:	53                   	push   ebx
c00118ef:	43                   	inc    ebx
c00118f0:	e8 43 fe ff ff       	call   c0011738 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118f5:	83 c4 10             	add    esp,0x10
c00118f8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00118fe:	75 e9                	jne    c00118e9 <Virt::virtualMemorySetup()+0x47>
c0011900:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011905:	83 ec 08             	sub    esp,0x8
c0011908:	6a 0f                	push   0xf
c001190a:	53                   	push   ebx
c001190b:	43                   	inc    ebx
c001190c:	e8 27 fe ff ff       	call   c0011738 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011911:	83 c4 10             	add    esp,0x10
c0011914:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001191a:	75 e9                	jne    c0011905 <Virt::virtualMemorySetup()+0x63>
c001191c:	83 c4 08             	add    esp,0x8
c001191f:	5b                   	pop    ebx
c0011920:	c3                   	ret    

c0011921 <Virt::getAKernelVAS()>:
c0011921:	a1 c4 ca 02 c0       	mov    eax,ds:0xc002cac4
c0011926:	c3                   	ret    

c0011927 <Virt::setupPageSwapping(int)>:
c0011927:	57                   	push   edi
c0011928:	56                   	push   esi
c0011929:	53                   	push   ebx
c001192a:	83 ec 1c             	sub    esp,0x1c
c001192d:	68 14 01 00 00       	push   0x114
c0011932:	e8 9d db ff ff       	call   c000f4d4 <malloc>
c0011937:	83 c4 0c             	add    esp,0xc
c001193a:	89 c6                	mov    esi,eax
c001193c:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c0011942:	68 13 90 02 c0       	push   0xc0029013
c0011947:	50                   	push   eax
c0011948:	e8 63 13 00 00       	call   c0012cb0 <File::File(char const*, Process*)>
c001194d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011950:	e8 37 15 00 00       	call   c0012e8c <File::unlink()>
c0011955:	58                   	pop    eax
c0011956:	5a                   	pop    edx
c0011957:	6a 12                	push   0x12
c0011959:	56                   	push   esi
c001195a:	e8 b5 13 00 00       	call   c0012d14 <File::open(FileOpenMode)>
c001195f:	83 c4 10             	add    esp,0x10
c0011962:	85 c0                	test   eax,eax
c0011964:	0f 85 ca 00 00 00    	jne    c0011a34 <Virt::setupPageSwapping(int)+0x10d>
c001196a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001196e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011976:	c1 e3 08             	shl    ebx,0x8
c0011979:	83 ec 0c             	sub    esp,0xc
c001197c:	68 00 00 01 00       	push   0x10000
c0011981:	e8 4e db ff ff       	call   c000f4d4 <malloc>
c0011986:	83 c4 0c             	add    esp,0xc
c0011989:	89 c7                	mov    edi,eax
c001198b:	68 00 00 01 00       	push   0x10000
c0011990:	6a 00                	push   0x0
c0011992:	50                   	push   eax
c0011993:	e8 f3 ec fe ff       	call   c000068b <memset>
c0011998:	83 c4 10             	add    esp,0x10
c001199b:	85 db                	test   ebx,ebx
c001199d:	79 03                	jns    c00119a2 <Virt::setupPageSwapping(int)+0x7b>
c001199f:	83 c3 0f             	add    ebx,0xf
c00119a2:	c1 fb 04             	sar    ebx,0x4
c00119a5:	4b                   	dec    ebx
c00119a6:	83 fb ff             	cmp    ebx,0xffffffff
c00119a9:	74 4b                	je     c00119f6 <Virt::setupPageSwapping(int)+0xcf>
c00119ab:	83 ec 0c             	sub    esp,0xc
c00119ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00119b0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00119b4:	52                   	push   edx
c00119b5:	57                   	push   edi
c00119b6:	6a 00                	push   0x0
c00119b8:	68 00 00 01 00       	push   0x10000
c00119bd:	56                   	push   esi
c00119be:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00119c1:	83 c4 20             	add    esp,0x20
c00119c4:	85 c0                	test   eax,eax
c00119c6:	75 59                	jne    c0011a21 <Virt::setupPageSwapping(int)+0xfa>
c00119c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119cc:	3d 00 00 01 00       	cmp    eax,0x10000
c00119d1:	74 d2                	je     c00119a5 <Virt::setupPageSwapping(int)+0x7e>
c00119d3:	83 ec 08             	sub    esp,0x8
c00119d6:	4b                   	dec    ebx
c00119d7:	50                   	push   eax
c00119d8:	68 66 90 02 c0       	push   0xc0029066
c00119dd:	e8 9f 0d 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00119e2:	c7 04 24 6f 90 02 c0 	mov    DWORD PTR [esp],0xc002906f
c00119e9:	e8 ad 7e 00 00       	call   c001989b <Krnl::panic(char const*)>
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	83 fb ff             	cmp    ebx,0xffffffff
c00119f4:	75 b5                	jne    c00119ab <Virt::setupPageSwapping(int)+0x84>
c00119f6:	83 ec 0c             	sub    esp,0xc
c00119f9:	56                   	push   esi
c00119fa:	e8 73 13 00 00       	call   c0012d72 <File::close()>
c00119ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011a02:	e8 ed da ff ff       	call   c000f4f4 <rfree>
c0011a07:	83 c4 10             	add    esp,0x10
c0011a0a:	85 f6                	test   esi,esi
c0011a0c:	74 0c                	je     c0011a1a <Virt::setupPageSwapping(int)+0xf3>
c0011a0e:	83 ec 0c             	sub    esp,0xc
c0011a11:	8b 06                	mov    eax,DWORD PTR [esi]
c0011a13:	56                   	push   esi
c0011a14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a17:	83 c4 10             	add    esp,0x10
c0011a1a:	83 c4 10             	add    esp,0x10
c0011a1d:	5b                   	pop    ebx
c0011a1e:	5e                   	pop    esi
c0011a1f:	5f                   	pop    edi
c0011a20:	c3                   	ret    
c0011a21:	83 ec 08             	sub    esp,0x8
c0011a24:	50                   	push   eax
c0011a25:	68 4e 90 02 c0       	push   0xc002904e
c0011a2a:	e8 52 0d 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0011a2f:	83 c4 10             	add    esp,0x10
c0011a32:	eb 94                	jmp    c00119c8 <Virt::setupPageSwapping(int)+0xa1>
c0011a34:	83 ec 08             	sub    esp,0x8
c0011a37:	50                   	push   eax
c0011a38:	68 2a 90 02 c0       	push   0xc002902a
c0011a3d:	e8 3f 0d 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0011a42:	c7 04 24 33 90 02 c0 	mov    DWORD PTR [esp],0xc0029033
c0011a49:	e8 4d 7e 00 00       	call   c001989b <Krnl::panic(char const*)>
c0011a4e:	83 c4 10             	add    esp,0x10
c0011a51:	e9 14 ff ff ff       	jmp    c001196a <Virt::setupPageSwapping(int)+0x43>

c0011a56 <VAS::VAS()>:
c0011a56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a65:	a3 c4 ca 02 c0       	mov    ds:0xc002cac4,eax
c0011a6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a6e:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011a72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a76:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011a79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a7d:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011a84:	90                   	nop
c0011a85:	c3                   	ret    

c0011a86 <VAS::VAS(VAS*)>:
c0011a86:	83 ec 0c             	sub    esp,0xc
c0011a89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a8d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a94:	83 ec 0c             	sub    esp,0xc
c0011a97:	68 84 8e 02 c0       	push   0xc0028e84
c0011a9c:	e8 fa 7d 00 00       	call   c001989b <Krnl::panic(char const*)>
c0011aa1:	83 c4 10             	add    esp,0x10
c0011aa4:	90                   	nop
c0011aa5:	83 c4 0c             	add    esp,0xc
c0011aa8:	c3                   	ret    
c0011aa9:	90                   	nop

c0011aaa <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011aaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011aae:	89 c2                	mov    edx,eax
c0011ab0:	c1 e8 0a             	shr    eax,0xa
c0011ab3:	c1 ea 16             	shr    edx,0x16
c0011ab6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011abb:	19 c9                	sbb    ecx,ecx
c0011abd:	c1 e2 0c             	shl    edx,0xc
c0011ac0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011ac6:	25 fc 0f 00 00       	and    eax,0xffc
c0011acb:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011ad2:	01 d0                	add    eax,edx
c0011ad4:	c3                   	ret    
c0011ad5:	90                   	nop

c0011ad6 <VAS::getPageTableEntry(unsigned long)>:
c0011ad6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ada:	89 ca                	mov    edx,ecx
c0011adc:	c1 e9 0a             	shr    ecx,0xa
c0011adf:	c1 ea 16             	shr    edx,0x16
c0011ae2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ae8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011aee:	c1 e0 0c             	shl    eax,0xc
c0011af1:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011af4:	c3                   	ret    

c0011af5 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011af5:	57                   	push   edi
c0011af6:	56                   	push   esi
c0011af7:	be 01 00 00 00       	mov    esi,0x1
c0011afc:	53                   	push   ebx
c0011afd:	83 ec 10             	sub    esp,0x10
c0011b00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b04:	c1 eb 0c             	shr    ebx,0xc
c0011b07:	eb 3f                	jmp    c0011b48 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011b09:	e8 13 fe ff ff       	call   c0011921 <Virt::getAKernelVAS()>
c0011b0e:	83 ec 08             	sub    esp,0x8
c0011b11:	57                   	push   edi
c0011b12:	50                   	push   eax
c0011b13:	e8 be ff ff ff       	call   c0011ad6 <VAS::getPageTableEntry(unsigned long)>
c0011b18:	83 c4 10             	add    esp,0x10
c0011b1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b1d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b21:	f6 c4 04             	test   ah,0x4
c0011b24:	75 5f                	jne    c0011b85 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011b26:	80 fa 04             	cmp    dl,0x4
c0011b29:	74 78                	je     c0011ba3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011b2b:	80 fa 02             	cmp    dl,0x2
c0011b2e:	0f 84 88 00 00 00    	je     c0011bbc <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011b34:	80 fa 03             	cmp    dl,0x3
c0011b37:	0f 84 ad 00 00 00    	je     c0011bea <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011b3d:	fe ca                	dec    dl
c0011b3f:	0f 84 92 00 00 00    	je     c0011bd7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011b45:	43                   	inc    ebx
c0011b46:	31 f6                	xor    esi,esi
c0011b48:	53                   	push   ebx
c0011b49:	e8 1f fc ff ff       	call   c001176d <Virt::getPageState(unsigned long)>
c0011b4e:	5f                   	pop    edi
c0011b4f:	89 df                	mov    edi,ebx
c0011b51:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011b55:	c1 e7 0c             	shl    edi,0xc
c0011b58:	84 c0                	test   al,al
c0011b5a:	75 ad                	jne    c0011b09 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011b5c:	83 ec 0c             	sub    esp,0xc
c0011b5f:	68 75 90 02 c0       	push   0xc0029075
c0011b64:	e8 32 7d 00 00       	call   c001989b <Krnl::panic(char const*)>
c0011b69:	e8 b3 fd ff ff       	call   c0011921 <Virt::getAKernelVAS()>
c0011b6e:	5a                   	pop    edx
c0011b6f:	59                   	pop    ecx
c0011b70:	57                   	push   edi
c0011b71:	50                   	push   eax
c0011b72:	e8 5f ff ff ff       	call   c0011ad6 <VAS::getPageTableEntry(unsigned long)>
c0011b77:	83 c4 10             	add    esp,0x10
c0011b7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b7c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b80:	f6 c4 04             	test   ah,0x4
c0011b83:	74 c0                	je     c0011b45 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011b85:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011b89:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b8e:	83 ec 0c             	sub    esp,0xc
c0011b91:	50                   	push   eax
c0011b92:	e8 5d de ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c0011b97:	83 c4 10             	add    esp,0x10
c0011b9a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b9e:	80 fa 04             	cmp    dl,0x4
c0011ba1:	75 88                	jne    c0011b2b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011ba3:	89 f0                	mov    eax,esi
c0011ba5:	84 c0                	test   al,al
c0011ba7:	75 47                	jne    c0011bf0 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011ba9:	c7 44 24 20 a8 8e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028ea8
c0011bb1:	83 c4 10             	add    esp,0x10
c0011bb4:	5b                   	pop    ebx
c0011bb5:	5e                   	pop    esi
c0011bb6:	5f                   	pop    edi
c0011bb7:	e9 df 7c 00 00       	jmp    c001989b <Krnl::panic(char const*)>
c0011bbc:	89 f0                	mov    eax,esi
c0011bbe:	84 c0                	test   al,al
c0011bc0:	75 15                	jne    c0011bd7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011bc2:	83 ec 0c             	sub    esp,0xc
c0011bc5:	68 91 90 02 c0       	push   0xc0029091
c0011bca:	e8 cc 7c 00 00       	call   c001989b <Krnl::panic(char const*)>
c0011bcf:	83 c4 10             	add    esp,0x10
c0011bd2:	e9 6e ff ff ff       	jmp    c0011b45 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011bd7:	83 ec 08             	sub    esp,0x8
c0011bda:	6a 00                	push   0x0
c0011bdc:	53                   	push   ebx
c0011bdd:	e8 56 fb ff ff       	call   c0011738 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011be2:	83 c4 10             	add    esp,0x10
c0011be5:	e9 5b ff ff ff       	jmp    c0011b45 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011bea:	89 f0                	mov    eax,esi
c0011bec:	84 c0                	test   al,al
c0011bee:	75 15                	jne    c0011c05 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011bf0:	83 ec 08             	sub    esp,0x8
c0011bf3:	6a 00                	push   0x0
c0011bf5:	53                   	push   ebx
c0011bf6:	e8 3d fb ff ff       	call   c0011738 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bfb:	83 c4 10             	add    esp,0x10
c0011bfe:	83 c4 10             	add    esp,0x10
c0011c01:	5b                   	pop    ebx
c0011c02:	5e                   	pop    esi
c0011c03:	5f                   	pop    edi
c0011c04:	c3                   	ret    
c0011c05:	c7 44 24 20 ad 90 02 c0 	mov    DWORD PTR [esp+0x20],0xc00290ad
c0011c0d:	83 c4 10             	add    esp,0x10
c0011c10:	5b                   	pop    ebx
c0011c11:	5e                   	pop    esi
c0011c12:	5f                   	pop    edi
c0011c13:	e9 83 7c 00 00       	jmp    c001989b <Krnl::panic(char const*)>

c0011c18 <VAS::freeAllocatedPages(unsigned long)>:
c0011c18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c20:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011c24:	74 09                	je     c0011c2f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011c26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011c2a:	e9 c6 fe ff ff       	jmp    c0011af5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011c2f:	c7 44 24 04 cc 8e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028ecc
c0011c37:	e9 45 0b 00 00       	jmp    c0012781 <Dbg::kprintf(char const*, ...)>

c0011c3c <VAS::virtualToPhysical(unsigned long)>:
c0011c3c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011c40:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011c44:	e8 8d fe ff ff       	call   c0011ad6 <VAS::getPageTableEntry(unsigned long)>
c0011c49:	5a                   	pop    edx
c0011c4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c4c:	59                   	pop    ecx
c0011c4d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c52:	c3                   	ret    
c0011c53:	90                   	nop

c0011c54 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011c54:	55                   	push   ebp
c0011c55:	57                   	push   edi
c0011c56:	56                   	push   esi
c0011c57:	53                   	push   ebx
c0011c58:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011c5c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011c60:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011c64:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011c68:	85 db                	test   ebx,ebx
c0011c6a:	7e 22                	jle    c0011c8e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011c6c:	c1 e3 0c             	shl    ebx,0xc
c0011c6f:	01 f3                	add    ebx,esi
c0011c71:	56                   	push   esi
c0011c72:	81 c6 00 10 00 00    	add    esi,0x1000
c0011c78:	55                   	push   ebp
c0011c79:	e8 58 fe ff ff       	call   c0011ad6 <VAS::getPageTableEntry(unsigned long)>
c0011c7e:	5a                   	pop    edx
c0011c7f:	59                   	pop    ecx
c0011c80:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011c82:	21 f9                	and    ecx,edi
c0011c84:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011c88:	39 f3                	cmp    ebx,esi
c0011c8a:	89 08                	mov    DWORD PTR [eax],ecx
c0011c8c:	75 e3                	jne    c0011c71 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011c8e:	5b                   	pop    ebx
c0011c8f:	5e                   	pop    esi
c0011c90:	5f                   	pop    edi
c0011c91:	5d                   	pop    ebp
c0011c92:	c3                   	ret    
c0011c93:	90                   	nop

c0011c94 <VAS::setToWriteCombining(unsigned long, int)>:
c0011c94:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0011c99:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c9f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011ca6:	75 01                	jne    c0011ca9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011ca8:	c3                   	ret    
c0011ca9:	68 80 00 00 00       	push   0x80
c0011cae:	6a ff                	push   0xffffffff
c0011cb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cbc:	e8 93 ff ff ff       	call   c0011c54 <VAS::reflagRange(unsigned long, int, int, int)>
c0011cc1:	83 c4 14             	add    esp,0x14
c0011cc4:	c3                   	ret    
c0011cc5:	90                   	nop

c0011cc6 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011cc6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011ccb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ccf:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011cd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011cd9:	19 c0                	sbb    eax,eax
c0011cdb:	83 ca 03             	or     edx,0x3
c0011cde:	83 e0 fc             	and    eax,0xfffffffc
c0011ce1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011ce8:	0f 20 d8             	mov    eax,cr3
c0011ceb:	0f 22 d8             	mov    cr3,eax
c0011cee:	c3                   	ret    
c0011cef:	90                   	nop

c0011cf0 <VAS::~VAS()>:
c0011cf0:	83 ec 2c             	sub    esp,0x2c
c0011cf3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011cfb:	e8 2a b0 00 00       	call   c001cd2a <lockScheduler()>
c0011d00:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d05:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d07:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d0a:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d10:	83 ec 04             	sub    esp,0x4
c0011d13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011d17:	6a 01                	push   0x1
c0011d19:	50                   	push   eax
c0011d1a:	e8 a7 ff ff ff       	call   c0011cc6 <VAS::mapOtherVASIn(bool, VAS*)>
c0011d1f:	83 c4 10             	add    esp,0x10
c0011d22:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011d2a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011d32:	0f 8f d7 00 00 00    	jg     c0011e0f <VAS::~VAS()+0x11f>
c0011d38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011d43:	c1 e2 02             	shl    edx,0x2
c0011d46:	01 d0                	add    eax,edx
c0011d48:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d52:	83 e0 01             	and    eax,0x1
c0011d55:	0f 84 ab 00 00 00    	je     c0011e06 <VAS::~VAS()+0x116>
c0011d5b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011d63:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011d6b:	7f 75                	jg     c0011de2 <VAS::~VAS()+0xf2>
c0011d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011d71:	c1 e0 0a             	shl    eax,0xa
c0011d74:	89 c2                	mov    edx,eax
c0011d76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011d7a:	01 d0                	add    eax,edx
c0011d7c:	c1 e0 0c             	shl    eax,0xc
c0011d7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d83:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d88:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d8a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d8d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d93:	83 ec 04             	sub    esp,0x4
c0011d96:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011d9a:	6a 01                	push   0x1
c0011d9c:	50                   	push   eax
c0011d9d:	e8 08 fd ff ff       	call   c0011aaa <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011da2:	83 c4 10             	add    esp,0x10
c0011da5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011da9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011dad:	8b 00                	mov    eax,DWORD PTR [eax]
c0011daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011db3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011db7:	25 01 04 00 00       	and    eax,0x401
c0011dbc:	3d 01 04 00 00       	cmp    eax,0x401
c0011dc1:	75 19                	jne    c0011ddc <VAS::~VAS()+0xec>
c0011dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dc7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dcc:	83 ec 0c             	sub    esp,0xc
c0011dcf:	50                   	push   eax
c0011dd0:	e8 1f dc ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c0011dd5:	83 c4 10             	add    esp,0x10
c0011dd8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ddc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011de0:	eb 81                	jmp    c0011d63 <VAS::~VAS()+0x73>
c0011de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011de6:	25 00 04 00 00       	and    eax,0x400
c0011deb:	74 19                	je     c0011e06 <VAS::~VAS()+0x116>
c0011ded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011df1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011df6:	83 ec 0c             	sub    esp,0xc
c0011df9:	50                   	push   eax
c0011dfa:	e8 f5 db ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c0011dff:	83 c4 10             	add    esp,0x10
c0011e02:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e06:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011e0a:	e9 1b ff ff ff       	jmp    c0011d2a <VAS::~VAS()+0x3a>
c0011e0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e13:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e16:	83 ec 0c             	sub    esp,0xc
c0011e19:	50                   	push   eax
c0011e1a:	e8 d6 fc ff ff       	call   c0011af5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e1f:	83 c4 10             	add    esp,0x10
c0011e22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e26:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e29:	83 ec 0c             	sub    esp,0xc
c0011e2c:	50                   	push   eax
c0011e2d:	e8 c2 db ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c0011e32:	83 c4 10             	add    esp,0x10
c0011e35:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e3d:	c1 e0 02             	shl    eax,0x2
c0011e40:	83 ec 08             	sub    esp,0x8
c0011e43:	50                   	push   eax
c0011e44:	68 f0 8e 02 c0       	push   0xc0028ef0
c0011e49:	e8 33 09 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0011e4e:	83 c4 10             	add    esp,0x10
c0011e51:	e8 d6 ae 00 00       	call   c001cd2c <unlockScheduler()>
c0011e56:	90                   	nop
c0011e57:	83 c4 2c             	add    esp,0x2c
c0011e5a:	c3                   	ret    
c0011e5b:	90                   	nop

c0011e5c <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011e5c:	55                   	push   ebp
c0011e5d:	57                   	push   edi
c0011e5e:	56                   	push   esi
c0011e5f:	53                   	push   ebx
c0011e60:	83 ec 1c             	sub    esp,0x1c
c0011e63:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011e67:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e6b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011e71:	77 08                	ja     c0011e7b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011e73:	0f 20 d8             	mov    eax,cr3
c0011e76:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011e79:	75 47                	jne    c0011ec2 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011e7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e7f:	09 d8                	or     eax,ebx
c0011e81:	a9 ff 0f 00 00       	test   eax,0xfff
c0011e86:	75 57                	jne    c0011edf <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011e88:	89 de                	mov    esi,ebx
c0011e8a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e8d:	c1 ee 16             	shr    esi,0x16
c0011e90:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011e97:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011e9b:	74 54                	je     c0011ef1 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011e9d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ea1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011ea7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011eab:	c1 e6 0c             	shl    esi,0xc
c0011eae:	c1 eb 0a             	shr    ebx,0xa
c0011eb1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011eb7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011eba:	83 c4 1c             	add    esp,0x1c
c0011ebd:	5b                   	pop    ebx
c0011ebe:	5e                   	pop    esi
c0011ebf:	5f                   	pop    edi
c0011ec0:	5d                   	pop    ebp
c0011ec1:	c3                   	ret    
c0011ec2:	83 ec 0c             	sub    esp,0xc
c0011ec5:	68 10 8f 02 c0       	push   0xc0028f10
c0011eca:	e8 b2 08 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0011ecf:	83 c4 10             	add    esp,0x10
c0011ed2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ed6:	09 d8                	or     eax,ebx
c0011ed8:	a9 ff 0f 00 00       	test   eax,0xfff
c0011edd:	74 a9                	je     c0011e88 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011edf:	83 ec 0c             	sub    esp,0xc
c0011ee2:	68 78 8f 02 c0       	push   0xc0028f78
c0011ee7:	e8 af 79 00 00       	call   c001989b <Krnl::panic(char const*)>
c0011eec:	83 c4 10             	add    esp,0x10
c0011eef:	eb 97                	jmp    c0011e88 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011ef1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011ef5:	e8 84 db ff ff       	call   c000fa7e <Phys::allocatePage()>
c0011efa:	89 c5                	mov    ebp,eax
c0011efc:	e8 20 fa ff ff       	call   c0011921 <Virt::getAKernelVAS()>
c0011f01:	83 ec 0c             	sub    esp,0xc
c0011f04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011f08:	6a 01                	push   0x1
c0011f0a:	e8 82 f8 ff ff       	call   c0011791 <Virt::allocateKernelVirtualPages(int)>
c0011f0f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011f16:	6a 01                	push   0x1
c0011f18:	50                   	push   eax
c0011f19:	55                   	push   ebp
c0011f1a:	81 cd 07 04 00 00    	or     ebp,0x407
c0011f20:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011f24:	51                   	push   ecx
c0011f25:	e8 26 02 00 00       	call   c0012150 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f2a:	83 c4 1c             	add    esp,0x1c
c0011f2d:	68 00 10 00 00       	push   0x1000
c0011f32:	6a 00                	push   0x0
c0011f34:	50                   	push   eax
c0011f35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f39:	e8 4d e7 fe ff       	call   c000068b <memset>
c0011f3e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011f42:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011f45:	e8 ab fb ff ff       	call   c0011af5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f4e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011f51:	83 c4 10             	add    esp,0x10
c0011f54:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011f57:	e9 41 ff ff ff       	jmp    c0011e9d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011f5c <VAS::allocatePages(int, int)>:
c0011f5c:	55                   	push   ebp
c0011f5d:	57                   	push   edi
c0011f5e:	56                   	push   esi
c0011f5f:	53                   	push   ebx
c0011f60:	83 ec 1c             	sub    esp,0x1c
c0011f63:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f67:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0011f6c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f72:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011f78:	83 e0 01             	and    eax,0x1
c0011f7b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011f7f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011f83:	0f 85 cc 00 00 00    	jne    c0012055 <VAS::allocatePages(int, int)+0xf9>
c0011f89:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f90:	85 c0                	test   eax,eax
c0011f92:	0f 84 a1 00 00 00    	je     c0012039 <VAS::allocatePages(int, int)+0xdd>
c0011f98:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011f9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fa0:	c1 e6 0c             	shl    esi,0xc
c0011fa3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011fa7:	85 c0                	test   eax,eax
c0011fa9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011fac:	7e 33                	jle    c0011fe1 <VAS::allocatePages(int, int)+0x85>
c0011fae:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011fb2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011fb6:	81 cd 00 04 00 00    	or     ebp,0x400
c0011fbc:	e8 bd da ff ff       	call   c000fa7e <Phys::allocatePage()>
c0011fc1:	55                   	push   ebp
c0011fc2:	53                   	push   ebx
c0011fc3:	50                   	push   eax
c0011fc4:	57                   	push   edi
c0011fc5:	e8 92 fe ff ff       	call   c0011e5c <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fca:	83 c4 10             	add    esp,0x10
c0011fcd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fd2:	74 03                	je     c0011fd7 <VAS::allocatePages(int, int)+0x7b>
c0011fd4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fd7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fdd:	39 de                	cmp    esi,ebx
c0011fdf:	75 db                	jne    c0011fbc <VAS::allocatePages(int, int)+0x60>
c0011fe1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fe6:	75 12                	jne    c0011ffa <VAS::allocatePages(int, int)+0x9e>
c0011fe8:	0f 20 d8             	mov    eax,cr3
c0011feb:	0f 22 d8             	mov    cr3,eax
c0011fee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ff2:	83 c4 1c             	add    esp,0x1c
c0011ff5:	5b                   	pop    ebx
c0011ff6:	5e                   	pop    esi
c0011ff7:	5f                   	pop    edi
c0011ff8:	5d                   	pop    ebp
c0011ff9:	c3                   	ret    
c0011ffa:	c1 ee 0a             	shr    esi,0xa
c0011ffd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012001:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012007:	c1 eb 0a             	shr    ebx,0xa
c001200a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012010:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012016:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001201c:	39 c3                	cmp    ebx,eax
c001201e:	77 ce                	ja     c0011fee <VAS::allocatePages(int, int)+0x92>
c0012020:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012023:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012029:	39 d8                	cmp    eax,ebx
c001202b:	73 f3                	jae    c0012020 <VAS::allocatePages(int, int)+0xc4>
c001202d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012031:	83 c4 1c             	add    esp,0x1c
c0012034:	5b                   	pop    ebx
c0012035:	5e                   	pop    esi
c0012036:	5f                   	pop    edi
c0012037:	5d                   	pop    ebp
c0012038:	c3                   	ret    
c0012039:	83 ec 0c             	sub    esp,0xc
c001203c:	68 9c 8f 02 c0       	push   0xc0028f9c
c0012041:	e8 55 78 00 00       	call   c001989b <Krnl::panic(char const*)>
c0012046:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012049:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001204d:	83 c4 10             	add    esp,0x10
c0012050:	e9 43 ff ff ff       	jmp    c0011f98 <VAS::allocatePages(int, int)+0x3c>
c0012055:	83 ec 0c             	sub    esp,0xc
c0012058:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001205c:	e8 30 f7 ff ff       	call   c0011791 <Virt::allocateKernelVirtualPages(int)>
c0012061:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012065:	83 c4 10             	add    esp,0x10
c0012068:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001206d:	0f 87 9b 00 00 00    	ja     c001210e <VAS::allocatePages(int, int)+0x1b2>
c0012073:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012077:	85 d2                	test   edx,edx
c0012079:	7e 3c                	jle    c00120b7 <VAS::allocatePages(int, int)+0x15b>
c001207b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001207f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012083:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012087:	c1 e5 0c             	shl    ebp,0xc
c001208a:	81 ce 00 04 00 00    	or     esi,0x400
c0012090:	01 dd                	add    ebp,ebx
c0012092:	e8 e7 d9 ff ff       	call   c000fa7e <Phys::allocatePage()>
c0012097:	56                   	push   esi
c0012098:	53                   	push   ebx
c0012099:	50                   	push   eax
c001209a:	57                   	push   edi
c001209b:	e8 bc fd ff ff       	call   c0011e5c <VAS::mapPage(unsigned long, unsigned long, int)>
c00120a0:	83 c4 10             	add    esp,0x10
c00120a3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120a8:	74 03                	je     c00120ad <VAS::allocatePages(int, int)+0x151>
c00120aa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120ad:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120b3:	39 dd                	cmp    ebp,ebx
c00120b5:	75 db                	jne    c0012092 <VAS::allocatePages(int, int)+0x136>
c00120b7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120bc:	0f 84 26 ff ff ff    	je     c0011fe8 <VAS::allocatePages(int, int)+0x8c>
c00120c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120c6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120ca:	89 d3                	mov    ebx,edx
c00120cc:	c1 e0 0c             	shl    eax,0xc
c00120cf:	c1 eb 0a             	shr    ebx,0xa
c00120d2:	01 d0                	add    eax,edx
c00120d4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120da:	c1 e8 0a             	shr    eax,0xa
c00120dd:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120e8:	2d 00 00 40 00       	sub    eax,0x400000
c00120ed:	39 c3                	cmp    ebx,eax
c00120ef:	0f 87 f9 fe ff ff    	ja     c0011fee <VAS::allocatePages(int, int)+0x92>
c00120f5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120f8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120fe:	39 d8                	cmp    eax,ebx
c0012100:	73 f3                	jae    c00120f5 <VAS::allocatePages(int, int)+0x199>
c0012102:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012106:	83 c4 1c             	add    esp,0x1c
c0012109:	5b                   	pop    ebx
c001210a:	5e                   	pop    esi
c001210b:	5f                   	pop    edi
c001210c:	5d                   	pop    ebp
c001210d:	c3                   	ret    
c001210e:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0012113:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012119:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012120:	0f 84 4d ff ff ff    	je     c0012073 <VAS::allocatePages(int, int)+0x117>
c0012126:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001212e:	e9 40 ff ff ff       	jmp    c0012073 <VAS::allocatePages(int, int)+0x117>
c0012133:	90                   	nop

c0012134 <VAS::setCPUSpecific(unsigned long)>:
c0012134:	83 ec 0c             	sub    esp,0xc
c0012137:	6a 05                	push   0x5
c0012139:	68 00 00 40 c2       	push   0xc2400000
c001213e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012146:	e8 11 fd ff ff       	call   c0011e5c <VAS::mapPage(unsigned long, unsigned long, int)>
c001214b:	83 c4 1c             	add    esp,0x1c
c001214e:	c3                   	ret    
c001214f:	90                   	nop

c0012150 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012150:	55                   	push   ebp
c0012151:	57                   	push   edi
c0012152:	56                   	push   esi
c0012153:	53                   	push   ebx
c0012154:	83 ec 1c             	sub    esp,0x1c
c0012157:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001215c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012160:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012166:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001216a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012170:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012174:	83 e0 01             	and    eax,0x1
c0012177:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001217b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001217f:	85 c0                	test   eax,eax
c0012181:	7e 39                	jle    c00121bc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012183:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012187:	89 f3                	mov    ebx,esi
c0012189:	c1 e0 0c             	shl    eax,0xc
c001218c:	01 f0                	add    eax,esi
c001218e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012192:	55                   	push   ebp
c0012193:	53                   	push   ebx
c0012194:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012198:	29 f0                	sub    eax,esi
c001219a:	01 d8                	add    eax,ebx
c001219c:	50                   	push   eax
c001219d:	57                   	push   edi
c001219e:	e8 b9 fc ff ff       	call   c0011e5c <VAS::mapPage(unsigned long, unsigned long, int)>
c00121a3:	83 c4 10             	add    esp,0x10
c00121a6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121ab:	74 03                	je     c00121b0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00121ad:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00121b0:	81 c3 00 10 00 00    	add    ebx,0x1000
c00121b6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00121ba:	75 d6                	jne    c0012192 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00121bc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121c1:	75 10                	jne    c00121d3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00121c3:	0f 20 d8             	mov    eax,cr3
c00121c6:	0f 22 d8             	mov    cr3,eax
c00121c9:	83 c4 1c             	add    esp,0x1c
c00121cc:	89 f0                	mov    eax,esi
c00121ce:	5b                   	pop    ebx
c00121cf:	5e                   	pop    esi
c00121d0:	5f                   	pop    edi
c00121d1:	5d                   	pop    ebp
c00121d2:	c3                   	ret    
c00121d3:	89 f3                	mov    ebx,esi
c00121d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121d9:	c1 eb 0a             	shr    ebx,0xa
c00121dc:	c1 e0 0c             	shl    eax,0xc
c00121df:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121e5:	01 f0                	add    eax,esi
c00121e7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00121ed:	c1 e8 0a             	shr    eax,0xa
c00121f0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121f5:	2d 00 00 40 00       	sub    eax,0x400000
c00121fa:	39 c3                	cmp    ebx,eax
c00121fc:	77 cb                	ja     c00121c9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00121fe:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012201:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012207:	39 d8                	cmp    eax,ebx
c0012209:	73 f3                	jae    c00121fe <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001220b:	83 c4 1c             	add    esp,0x1c
c001220e:	89 f0                	mov    eax,esi
c0012210:	5b                   	pop    ebx
c0012211:	5e                   	pop    esi
c0012212:	5f                   	pop    edi
c0012213:	5d                   	pop    ebp
c0012214:	c3                   	ret    
c0012215:	90                   	nop

c0012216 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012216:	55                   	push   ebp
c0012217:	57                   	push   edi
c0012218:	56                   	push   esi
c0012219:	53                   	push   ebx
c001221a:	83 ec 1c             	sub    esp,0x1c
c001221d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012221:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012225:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012229:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001222d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012232:	75 4a                	jne    c001227e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012234:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012238:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001223b:	c1 eb 16             	shr    ebx,0x16
c001223e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012245:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012249:	74 4d                	je     c0012298 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001224b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001224f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012253:	c1 e8 0a             	shr    eax,0xa
c0012256:	80 fa 01             	cmp    dl,0x1
c0012259:	19 d2                	sbb    edx,edx
c001225b:	c1 e3 0c             	shl    ebx,0xc
c001225e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012262:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012268:	25 fc 0f 00 00       	and    eax,0xffc
c001226d:	01 d8                	add    eax,ebx
c001226f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012276:	83 c4 1c             	add    esp,0x1c
c0012279:	5b                   	pop    ebx
c001227a:	5e                   	pop    esi
c001227b:	5f                   	pop    edi
c001227c:	5d                   	pop    ebp
c001227d:	c3                   	ret    
c001227e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012282:	83 ec 0c             	sub    esp,0xc
c0012285:	68 c8 8f 02 c0       	push   0xc0028fc8
c001228a:	e8 0c 76 00 00       	call   c001989b <Krnl::panic(char const*)>
c001228f:	83 c4 10             	add    esp,0x10
c0012292:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012296:	eb 9c                	jmp    c0012234 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012298:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001229c:	e8 dd d7 ff ff       	call   c000fa7e <Phys::allocatePage()>
c00122a1:	89 c5                	mov    ebp,eax
c00122a3:	e8 79 f6 ff ff       	call   c0011921 <Virt::getAKernelVAS()>
c00122a8:	83 ec 0c             	sub    esp,0xc
c00122ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122af:	6a 01                	push   0x1
c00122b1:	e8 db f4 ff ff       	call   c0011791 <Virt::allocateKernelVirtualPages(int)>
c00122b6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122bd:	6a 01                	push   0x1
c00122bf:	50                   	push   eax
c00122c0:	55                   	push   ebp
c00122c1:	81 cd 07 04 00 00    	or     ebp,0x407
c00122c7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122cb:	51                   	push   ecx
c00122cc:	e8 7f fe ff ff       	call   c0012150 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122d1:	83 c4 1c             	add    esp,0x1c
c00122d4:	68 00 10 00 00       	push   0x1000
c00122d9:	6a 00                	push   0x0
c00122db:	50                   	push   eax
c00122dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122e0:	e8 a6 e3 fe ff       	call   c000068b <memset>
c00122e5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122e9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122ec:	e8 04 f8 ff ff       	call   c0011af5 <Virt::freeKernelVirtualPages(unsigned long)>
c00122f1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122f4:	83 c4 10             	add    esp,0x10
c00122f7:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00122fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00122fe:	e9 48 ff ff ff       	jmp    c001224b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012303:	90                   	nop

c0012304 <VAS::VAS(bool)>:
c0012304:	53                   	push   ebx
c0012305:	83 ec 28             	sub    esp,0x28
c0012308:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001230c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012310:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012314:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001231b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001231f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012323:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012326:	e8 53 d7 ff ff       	call   c000fa7e <Phys::allocatePage()>
c001232b:	89 c2                	mov    edx,eax
c001232d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012331:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012334:	e8 e8 f5 ff ff       	call   c0011921 <Virt::getAKernelVAS()>
c0012339:	89 c3                	mov    ebx,eax
c001233b:	83 ec 0c             	sub    esp,0xc
c001233e:	6a 01                	push   0x1
c0012340:	e8 4c f4 ff ff       	call   c0011791 <Virt::allocateKernelVirtualPages(int)>
c0012345:	83 c4 10             	add    esp,0x10
c0012348:	89 c2                	mov    edx,eax
c001234a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001234e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012351:	83 ec 0c             	sub    esp,0xc
c0012354:	6a 03                	push   0x3
c0012356:	6a 01                	push   0x1
c0012358:	52                   	push   edx
c0012359:	50                   	push   eax
c001235a:	53                   	push   ebx
c001235b:	e8 f0 fd ff ff       	call   c0012150 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012360:	83 c4 20             	add    esp,0x20
c0012363:	89 c2                	mov    edx,eax
c0012365:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012369:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001236c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012374:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001237c:	7f 1c                	jg     c001239a <VAS::VAS(bool)+0x96>
c001237e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012382:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012385:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012389:	c1 e2 02             	shl    edx,0x2
c001238c:	01 d0                	add    eax,edx
c001238e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012394:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012398:	eb da                	jmp    c0012374 <VAS::VAS(bool)+0x70>
c001239a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00123a2:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00123aa:	7f 7a                	jg     c0012426 <VAS::VAS(bool)+0x122>
c00123ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00123b0:	2d 00 02 00 00       	sub    eax,0x200
c00123b5:	c1 e0 0c             	shl    eax,0xc
c00123b8:	83 c8 03             	or     eax,0x3
c00123bb:	89 c2                	mov    edx,eax
c00123bd:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00123c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123c8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00123ce:	83 e0 10             	and    eax,0x10
c00123d1:	84 c0                	test   al,al
c00123d3:	74 07                	je     c00123dc <VAS::VAS(bool)+0xd8>
c00123d5:	b8 00 01 00 00       	mov    eax,0x100
c00123da:	eb 05                	jmp    c00123e1 <VAS::VAS(bool)+0xdd>
c00123dc:	b8 00 00 00 00       	mov    eax,0x0
c00123e1:	09 d0                	or     eax,edx
c00123e3:	89 c1                	mov    ecx,eax
c00123e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00123f0:	c1 e2 02             	shl    edx,0x2
c00123f3:	01 d0                	add    eax,edx
c00123f5:	89 ca                	mov    edx,ecx
c00123f7:	89 10                	mov    DWORD PTR [eax],edx
c00123f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00123fd:	2d 40 03 00 00       	sub    eax,0x340
c0012402:	83 f8 7f             	cmp    eax,0x7f
c0012405:	77 16                	ja     c001241d <VAS::VAS(bool)+0x119>
c0012407:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001240b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001240e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012412:	c1 e2 02             	shl    edx,0x2
c0012415:	01 d0                	add    eax,edx
c0012417:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001241d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012421:	e9 7c ff ff ff       	jmp    c00123a2 <VAS::VAS(bool)+0x9e>
c0012426:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001242b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012431:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012437:	83 e0 10             	and    eax,0x10
c001243a:	84 c0                	test   al,al
c001243c:	74 07                	je     c0012445 <VAS::VAS(bool)+0x141>
c001243e:	b8 03 41 00 00       	mov    eax,0x4103
c0012443:	eb 05                	jmp    c001244a <VAS::VAS(bool)+0x146>
c0012445:	b8 03 40 00 00       	mov    eax,0x4003
c001244a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001244e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012451:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012457:	89 02                	mov    DWORD PTR [edx],eax
c0012459:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001245e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012464:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001246a:	83 ec 08             	sub    esp,0x8
c001246d:	50                   	push   eax
c001246e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012472:	e8 bd fc ff ff       	call   c0012134 <VAS::setCPUSpecific(unsigned long)>
c0012477:	83 c4 10             	add    esp,0x10
c001247a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001247e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012481:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0012486:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001248c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012492:	83 e0 10             	and    eax,0x10
c0012495:	84 c0                	test   al,al
c0012497:	74 07                	je     c00124a0 <VAS::VAS(bool)+0x19c>
c0012499:	b8 00 01 00 00       	mov    eax,0x100
c001249e:	eb 05                	jmp    c00124a5 <VAS::VAS(bool)+0x1a1>
c00124a0:	b8 00 00 00 00       	mov    eax,0x0
c00124a5:	09 c2                	or     edx,eax
c00124a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00124ae:	05 fc 0f 00 00       	add    eax,0xffc
c00124b3:	83 ca 03             	or     edx,0x3
c00124b6:	89 10                	mov    DWORD PTR [eax],edx
c00124b8:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00124bd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124c3:	83 ec 0c             	sub    esp,0xc
c00124c6:	50                   	push   eax
c00124c7:	e8 90 19 00 00       	call   c0013e5c <Device::getName()>
c00124cc:	83 c4 10             	add    esp,0x10
c00124cf:	83 ec 08             	sub    esp,0x8
c00124d2:	68 c7 90 02 c0       	push   0xc00290c7
c00124d7:	50                   	push   eax
c00124d8:	e8 9e e2 fe ff       	call   c000077b <strcmp>
c00124dd:	83 c4 10             	add    esp,0x10
c00124e0:	85 c0                	test   eax,eax
c00124e2:	0f 94 c0             	sete   al
c00124e5:	84 c0                	test   al,al
c00124e7:	74 70                	je     c0012559 <VAS::VAS(bool)+0x255>
c00124e9:	e8 1f a8 00 00       	call   c001cd0d <disableIRQs()>
c00124ee:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00124f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124f9:	05 7c 09 00 00       	add    eax,0x97c
c00124fe:	83 ec 0c             	sub    esp,0xc
c0012501:	50                   	push   eax
c0012502:	e8 49 ca ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012507:	83 c4 10             	add    esp,0x10
c001250a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001250f:	89 c3                	mov    ebx,eax
c0012511:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0012516:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001251c:	05 7c 09 00 00       	add    eax,0x97c
c0012521:	83 ec 0c             	sub    esp,0xc
c0012524:	50                   	push   eax
c0012525:	e8 26 ca ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001252a:	83 c4 10             	add    esp,0x10
c001252d:	83 ec 08             	sub    esp,0x8
c0012530:	50                   	push   eax
c0012531:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012535:	e8 9c f5 ff ff       	call   c0011ad6 <VAS::getPageTableEntry(unsigned long)>
c001253a:	83 c4 10             	add    esp,0x10
c001253d:	8b 00                	mov    eax,DWORD PTR [eax]
c001253f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012544:	6a 11                	push   0x11
c0012546:	53                   	push   ebx
c0012547:	50                   	push   eax
c0012548:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001254c:	e8 0b f9 ff ff       	call   c0011e5c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012551:	83 c4 10             	add    esp,0x10
c0012554:	e8 c2 a7 00 00       	call   c001cd1b <enableIRQs()>
c0012559:	90                   	nop
c001255a:	83 c4 28             	add    esp,0x28
c001255d:	5b                   	pop    ebx
c001255e:	c3                   	ret    

c001255f <mapVASFirstTime>:
c001255f:	55                   	push   ebp
c0012560:	57                   	push   edi
c0012561:	56                   	push   esi
c0012562:	53                   	push   ebx
c0012563:	83 ec 0c             	sub    esp,0xc
c0012566:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001256b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001256e:	4a                   	dec    edx
c001256f:	0f 84 8e 00 00 00    	je     c0012603 <mapVASFirstTime+0xa4>
c0012575:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012578:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001257b:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012580:	c1 e5 15             	shl    ebp,0x15
c0012583:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0012588:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001258e:	29 eb                	sub    ebx,ebp
c0012590:	29 ee                	sub    esi,ebp
c0012592:	e8 e7 d4 ff ff       	call   c000fa7e <Phys::allocatePage()>
c0012597:	83 ec 0c             	sub    esp,0xc
c001259a:	68 03 04 00 00       	push   0x403
c001259f:	6a 01                	push   0x1
c00125a1:	53                   	push   ebx
c00125a2:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00125a8:	50                   	push   eax
c00125a9:	57                   	push   edi
c00125aa:	e8 a1 fb ff ff       	call   c0012150 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125af:	83 c4 20             	add    esp,0x20
c00125b2:	39 f3                	cmp    ebx,esi
c00125b4:	75 dc                	jne    c0012592 <mapVASFirstTime+0x33>
c00125b6:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00125bb:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00125c0:	29 ee                	sub    esi,ebp
c00125c2:	29 e8                	sub    eax,ebp
c00125c4:	89 c5                	mov    ebp,eax
c00125c6:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00125ca:	19 db                	sbb    ebx,ebx
c00125cc:	e8 ad d4 ff ff       	call   c000fa7e <Phys::allocatePage()>
c00125d1:	83 e3 04             	and    ebx,0x4
c00125d4:	83 ec 0c             	sub    esp,0xc
c00125d7:	81 c3 03 04 00 00    	add    ebx,0x403
c00125dd:	53                   	push   ebx
c00125de:	6a 01                	push   0x1
c00125e0:	56                   	push   esi
c00125e1:	81 ee 00 10 00 00    	sub    esi,0x1000
c00125e7:	50                   	push   eax
c00125e8:	57                   	push   edi
c00125e9:	e8 62 fb ff ff       	call   c0012150 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125ee:	83 c4 20             	add    esp,0x20
c00125f1:	39 f5                	cmp    ebp,esi
c00125f3:	75 d1                	jne    c00125c6 <mapVASFirstTime+0x67>
c00125f5:	0f 20 d8             	mov    eax,cr3
c00125f8:	0f 22 d8             	mov    cr3,eax
c00125fb:	83 c4 0c             	add    esp,0xc
c00125fe:	5b                   	pop    ebx
c00125ff:	5e                   	pop    esi
c0012600:	5f                   	pop    edi
c0012601:	5d                   	pop    ebp
c0012602:	c3                   	ret    
c0012603:	83 ec 0c             	sub    esp,0xc
c0012606:	68 d5 90 02 c0       	push   0xc00290d5
c001260b:	e8 71 01 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0012610:	83 c4 10             	add    esp,0x10
c0012613:	83 c4 0c             	add    esp,0xc
c0012616:	5b                   	pop    ebx
c0012617:	5e                   	pop    esi
c0012618:	5f                   	pop    edi
c0012619:	5d                   	pop    ebp
c001261a:	c3                   	ret    

c001261b <__cxa_atexit>:
c001261b:	31 c0                	xor    eax,eax
c001261d:	c3                   	ret    

c001261e <__cxa_finalize>:
c001261e:	c3                   	ret    

c001261f <__stack_chk_fail>:
c001261f:	55                   	push   ebp
c0012620:	89 e5                	mov    ebp,esp
c0012622:	83 ec 14             	sub    esp,0x14
c0012625:	68 ee 90 02 c0       	push   0xc00290ee
c001262a:	e8 52 01 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001262f:	58                   	pop    eax
c0012630:	5a                   	pop    edx
c0012631:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012634:	68 3e 91 02 c0       	push   0xc002913e
c0012639:	e8 43 01 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001263e:	59                   	pop    ecx
c001263f:	58                   	pop    eax
c0012640:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012643:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012646:	68 3e 91 02 c0       	push   0xc002913e
c001264b:	e8 31 01 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0012650:	5a                   	pop    edx
c0012651:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012654:	59                   	pop    ecx
c0012655:	8b 00                	mov    eax,DWORD PTR [eax]
c0012657:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001265a:	68 3e 91 02 c0       	push   0xc002913e
c001265f:	e8 1d 01 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0012664:	5a                   	pop    edx
c0012665:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012668:	59                   	pop    ecx
c0012669:	8b 00                	mov    eax,DWORD PTR [eax]
c001266b:	8b 00                	mov    eax,DWORD PTR [eax]
c001266d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012670:	68 3e 91 02 c0       	push   0xc002913e
c0012675:	e8 07 01 00 00       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001267a:	c7 04 24 46 91 02 c0 	mov    DWORD PTR [esp],0xc0029146
c0012681:	e8 15 72 00 00       	call   c001989b <Krnl::panic(char const*)>
c0012686:	83 c4 10             	add    esp,0x10
c0012689:	c9                   	leave  
c001268a:	c3                   	ret    

c001268b <__cxa_pure_virtual>:
c001268b:	83 ec 18             	sub    esp,0x18
c001268e:	68 5e 91 02 c0       	push   0xc002915e
c0012693:	e8 03 72 00 00       	call   c001989b <Krnl::panic(char const*)>
c0012698:	83 c4 1c             	add    esp,0x1c
c001269b:	c3                   	ret    

c001269c <operator new[](unsigned long)>:
c001269c:	e9 33 ce ff ff       	jmp    c000f4d4 <malloc>

c00126a1 <operator delete(void*, unsigned long)>:
c00126a1:	e9 4e ce ff ff       	jmp    c000f4f4 <rfree>

c00126a6 <operator delete[](void*)>:
c00126a6:	e9 49 ce ff ff       	jmp    c000f4f4 <rfree>

c00126ab <operator delete[](void*, unsigned long)>:
c00126ab:	e9 44 ce ff ff       	jmp    c000f4f4 <rfree>

c00126b0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00126b0:	57                   	push   edi
c00126b1:	b9 3f 00 00 00       	mov    ecx,0x3f
c00126b6:	56                   	push   esi
c00126b7:	be 74 91 02 c0       	mov    esi,0xc0029174
c00126bc:	53                   	push   ebx
c00126bd:	83 ec 40             	sub    esp,0x40
c00126c0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00126c4:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00126c8:	fc                   	cld    
c00126c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00126cb:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00126cf:	83 f9 3e             	cmp    ecx,0x3e
c00126d2:	7e 05                	jle    c00126d9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00126d4:	b9 3e 00 00 00       	mov    ecx,0x3e
c00126d9:	89 df                	mov    edi,ebx
c00126db:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00126df:	eb 02                	jmp    c00126e3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00126e1:	89 c7                	mov    edi,eax
c00126e3:	31 d2                	xor    edx,edx
c00126e5:	46                   	inc    esi
c00126e6:	89 f8                	mov    eax,edi
c00126e8:	f7 f1                	div    ecx
c00126ea:	39 cf                	cmp    edi,ecx
c00126ec:	73 f3                	jae    c00126e1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00126ee:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126f1:	eb 02                	jmp    c00126f5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00126f3:	89 c3                	mov    ebx,eax
c00126f5:	31 d2                	xor    edx,edx
c00126f7:	4e                   	dec    esi
c00126f8:	89 d8                	mov    eax,ebx
c00126fa:	f7 f1                	div    ecx
c00126fc:	39 cb                	cmp    ebx,ecx
c00126fe:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012702:	88 16                	mov    BYTE PTR [esi],dl
c0012704:	73 ed                	jae    c00126f3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012706:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001270a:	83 c4 40             	add    esp,0x40
c001270d:	5b                   	pop    ebx
c001270e:	5e                   	pop    esi
c001270f:	5f                   	pop    edi
c0012710:	c3                   	ret    

c0012711 <Dbg::logc(char)>:
c0012711:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012715:	ba fd 03 00 00       	mov    edx,0x3fd
c001271a:	ec                   	in     al,dx
c001271b:	a8 20                	test   al,0x20
c001271d:	74 fb                	je     c001271a <Dbg::logc(char)+0x9>
c001271f:	ba f8 03 00 00       	mov    edx,0x3f8
c0012724:	88 c8                	mov    al,cl
c0012726:	ee                   	out    dx,al
c0012727:	c3                   	ret    

c0012728 <Dbg::logs(char*)>:
c0012728:	53                   	push   ebx
c0012729:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001272d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012730:	84 c0                	test   al,al
c0012732:	74 0f                	je     c0012743 <Dbg::logs(char*)+0x1b>
c0012734:	50                   	push   eax
c0012735:	43                   	inc    ebx
c0012736:	e8 d6 ff ff ff       	call   c0012711 <Dbg::logc(char)>
c001273b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001273e:	5a                   	pop    edx
c001273f:	84 c0                	test   al,al
c0012741:	75 f1                	jne    c0012734 <Dbg::logs(char*)+0xc>
c0012743:	5b                   	pop    ebx
c0012744:	c3                   	ret    

c0012745 <Dbg::logWriteInt(unsigned int)>:
c0012745:	83 ec 10             	sub    esp,0x10
c0012748:	6a 0a                	push   0xa
c001274a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001274e:	50                   	push   eax
c001274f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012753:	e8 58 ff ff ff       	call   c00126b0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012758:	50                   	push   eax
c0012759:	e8 ca ff ff ff       	call   c0012728 <Dbg::logs(char*)>
c001275e:	83 c4 20             	add    esp,0x20
c0012761:	c3                   	ret    

c0012762 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012762:	83 ec 10             	sub    esp,0x10
c0012765:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012769:	8d 44 24 08          	lea    eax,[esp+0x8]
c001276d:	50                   	push   eax
c001276e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012772:	e8 39 ff ff ff       	call   c00126b0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012777:	50                   	push   eax
c0012778:	e8 ab ff ff ff       	call   c0012728 <Dbg::logs(char*)>
c001277d:	83 c4 20             	add    esp,0x20
c0012780:	c3                   	ret    

c0012781 <Dbg::kprintf(char const*, ...)>:
c0012781:	55                   	push   ebp
c0012782:	57                   	push   edi
c0012783:	56                   	push   esi
c0012784:	53                   	push   ebx
c0012785:	83 ec 0c             	sub    esp,0xc
c0012788:	8d 44 24 24          	lea    eax,[esp+0x24]
c001278c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012790:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012794:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012797:	84 c0                	test   al,al
c0012799:	74 4a                	je     c00127e5 <Dbg::kprintf(char const*, ...)+0x64>
c001279b:	31 db                	xor    ebx,ebx
c001279d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00127a0:	3c 25                	cmp    al,0x25
c00127a2:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00127a5:	0f 85 e4 00 00 00    	jne    c001288f <Dbg::kprintf(char const*, ...)+0x10e>
c00127ab:	83 c3 02             	add    ebx,0x2
c00127ae:	8a 07                	mov    al,BYTE PTR [edi]
c00127b0:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00127b3:	83 e8 25             	sub    eax,0x25
c00127b6:	3c 53                	cmp    al,0x53
c00127b8:	0f 87 ba 00 00 00    	ja     c0012878 <Dbg::kprintf(char const*, ...)+0xf7>
c00127be:	0f b6 c0             	movzx  eax,al
c00127c1:	ff 24 85 b4 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6e4c]
c00127c8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127cc:	89 c8                	mov    eax,ecx
c00127ce:	83 c1 04             	add    ecx,0x4
c00127d1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127d5:	ff 30                	push   DWORD PTR [eax]
c00127d7:	e8 4c ff ff ff       	call   c0012728 <Dbg::logs(char*)>
c00127dc:	58                   	pop    eax
c00127dd:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00127e1:	84 c0                	test   al,al
c00127e3:	75 b8                	jne    c001279d <Dbg::kprintf(char const*, ...)+0x1c>
c00127e5:	83 c4 0c             	add    esp,0xc
c00127e8:	5b                   	pop    ebx
c00127e9:	5e                   	pop    esi
c00127ea:	5f                   	pop    edi
c00127eb:	5d                   	pop    ebp
c00127ec:	c3                   	ret    
c00127ed:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127f1:	89 d0                	mov    eax,edx
c00127f3:	83 c2 04             	add    edx,0x4
c00127f6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127fa:	ff 30                	push   DWORD PTR [eax]
c00127fc:	e8 44 ff ff ff       	call   c0012745 <Dbg::logWriteInt(unsigned int)>
c0012801:	58                   	pop    eax
c0012802:	eb d9                	jmp    c00127dd <Dbg::kprintf(char const*, ...)+0x5c>
c0012804:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012808:	89 d0                	mov    eax,edx
c001280a:	83 c2 04             	add    edx,0x4
c001280d:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012810:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012814:	50                   	push   eax
c0012815:	e8 f7 fe ff ff       	call   c0012711 <Dbg::logc(char)>
c001281a:	58                   	pop    eax
c001281b:	eb c0                	jmp    c00127dd <Dbg::kprintf(char const*, ...)+0x5c>
c001281d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012821:	89 c8                	mov    eax,ecx
c0012823:	83 c1 04             	add    ecx,0x4
c0012826:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001282a:	ff 30                	push   DWORD PTR [eax]
c001282c:	e8 14 ff ff ff       	call   c0012745 <Dbg::logWriteInt(unsigned int)>
c0012831:	5f                   	pop    edi
c0012832:	eb a9                	jmp    c00127dd <Dbg::kprintf(char const*, ...)+0x5c>
c0012834:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012838:	89 c8                	mov    eax,ecx
c001283a:	83 c1 04             	add    ecx,0x4
c001283d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012841:	6a 10                	push   0x10
c0012843:	ff 30                	push   DWORD PTR [eax]
c0012845:	e8 18 ff ff ff       	call   c0012762 <Dbg::logWriteIntBase(unsigned int, int)>
c001284a:	59                   	pop    ecx
c001284b:	5f                   	pop    edi
c001284c:	eb 8f                	jmp    c00127dd <Dbg::kprintf(char const*, ...)+0x5c>
c001284e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012852:	89 d0                	mov    eax,edx
c0012854:	83 c2 08             	add    edx,0x8
c0012857:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001285b:	6a 10                	push   0x10
c001285d:	ff 30                	push   DWORD PTR [eax]
c001285f:	e8 fe fe ff ff       	call   c0012762 <Dbg::logWriteIntBase(unsigned int, int)>
c0012864:	58                   	pop    eax
c0012865:	5a                   	pop    edx
c0012866:	e9 72 ff ff ff       	jmp    c00127dd <Dbg::kprintf(char const*, ...)+0x5c>
c001286b:	6a 25                	push   0x25
c001286d:	e8 9f fe ff ff       	call   c0012711 <Dbg::logc(char)>
c0012872:	58                   	pop    eax
c0012873:	e9 65 ff ff ff       	jmp    c00127dd <Dbg::kprintf(char const*, ...)+0x5c>
c0012878:	6a 25                	push   0x25
c001287a:	e8 92 fe ff ff       	call   c0012711 <Dbg::logc(char)>
c001287f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012882:	50                   	push   eax
c0012883:	e8 89 fe ff ff       	call   c0012711 <Dbg::logc(char)>
c0012888:	5a                   	pop    edx
c0012889:	59                   	pop    ecx
c001288a:	e9 4e ff ff ff       	jmp    c00127dd <Dbg::kprintf(char const*, ...)+0x5c>
c001288f:	50                   	push   eax
c0012890:	89 eb                	mov    ebx,ebp
c0012892:	e8 7a fe ff ff       	call   c0012711 <Dbg::logc(char)>
c0012897:	89 fd                	mov    ebp,edi
c0012899:	58                   	pop    eax
c001289a:	e9 3e ff ff ff       	jmp    c00127dd <Dbg::kprintf(char const*, ...)+0x5c>
c001289f:	90                   	nop

c00128a0 <File::read(unsigned long long, void*, int*)>:
c00128a0:	53                   	push   ebx
c00128a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128a9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128b0:	3c 19                	cmp    al,0x19
c00128b2:	77 35                	ja     c00128e9 <File::read(unsigned long long, void*, int*)+0x49>
c00128b4:	8b 04 85 60 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30a0]
c00128bb:	85 c0                	test   eax,eax
c00128bd:	74 2a                	je     c00128e9 <File::read(unsigned long long, void*, int*)+0x49>
c00128bf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128c5:	85 c0                	test   eax,eax
c00128c7:	74 20                	je     c00128e9 <File::read(unsigned long long, void*, int*)+0x49>
c00128c9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128cd:	74 21                	je     c00128f0 <File::read(unsigned long long, void*, int*)+0x50>
c00128cf:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128d1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128d5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128e3:	5b                   	pop    ebx
c00128e4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00128e7:	ff e0                	jmp    eax
c00128e9:	b8 0b 00 00 00       	mov    eax,0xb
c00128ee:	eb 05                	jmp    c00128f5 <File::read(unsigned long long, void*, int*)+0x55>
c00128f0:	b8 05 00 00 00       	mov    eax,0x5
c00128f5:	5b                   	pop    ebx
c00128f6:	c3                   	ret    
c00128f7:	90                   	nop

c00128f8 <File::write(unsigned long long, void*, int*)>:
c00128f8:	53                   	push   ebx
c00128f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128fd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012901:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012908:	3c 19                	cmp    al,0x19
c001290a:	77 35                	ja     c0012941 <File::write(unsigned long long, void*, int*)+0x49>
c001290c:	8b 04 85 60 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30a0]
c0012913:	85 c0                	test   eax,eax
c0012915:	74 2a                	je     c0012941 <File::write(unsigned long long, void*, int*)+0x49>
c0012917:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001291d:	85 c0                	test   eax,eax
c001291f:	74 20                	je     c0012941 <File::write(unsigned long long, void*, int*)+0x49>
c0012921:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012925:	74 21                	je     c0012948 <File::write(unsigned long long, void*, int*)+0x50>
c0012927:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012929:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001292d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012933:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012937:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001293b:	5b                   	pop    ebx
c001293c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001293f:	ff e0                	jmp    eax
c0012941:	b8 0b 00 00 00       	mov    eax,0xb
c0012946:	eb 05                	jmp    c001294d <File::write(unsigned long long, void*, int*)+0x55>
c0012948:	b8 05 00 00 00       	mov    eax,0x5
c001294d:	5b                   	pop    ebx
c001294e:	c3                   	ret    
c001294f:	90                   	nop

c0012950 <Directory::read(unsigned long long, void*, int*)>:
c0012950:	53                   	push   ebx
c0012951:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012955:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012959:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012960:	3c 19                	cmp    al,0x19
c0012962:	77 35                	ja     c0012999 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012964:	8b 04 85 60 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30a0]
c001296b:	85 c0                	test   eax,eax
c001296d:	74 2a                	je     c0012999 <Directory::read(unsigned long long, void*, int*)+0x49>
c001296f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012975:	85 c0                	test   eax,eax
c0012977:	74 20                	je     c0012999 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012979:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001297d:	74 21                	je     c00129a0 <Directory::read(unsigned long long, void*, int*)+0x50>
c001297f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012981:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012985:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001298b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001298f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012993:	5b                   	pop    ebx
c0012994:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012997:	ff e0                	jmp    eax
c0012999:	b8 0b 00 00 00       	mov    eax,0xb
c001299e:	eb 05                	jmp    c00129a5 <Directory::read(unsigned long long, void*, int*)+0x55>
c00129a0:	b8 05 00 00 00       	mov    eax,0x5
c00129a5:	5b                   	pop    ebx
c00129a6:	c3                   	ret    
c00129a7:	90                   	nop

c00129a8 <Directory::write(unsigned long long, void*, int*)>:
c00129a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129ac:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00129b3:	b8 0b 00 00 00       	mov    eax,0xb
c00129b8:	80 fa 19             	cmp    dl,0x19
c00129bb:	77 18                	ja     c00129d5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129bd:	8b 14 95 60 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30a0]
c00129c4:	85 d2                	test   edx,edx
c00129c6:	74 0d                	je     c00129d5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129c8:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00129cf:	19 c0                	sbb    eax,eax
c00129d1:	83 e0 0a             	and    eax,0xa
c00129d4:	40                   	inc    eax
c00129d5:	c3                   	ret    

c00129d6 <File::isAtty()>:
c00129d6:	31 c0                	xor    eax,eax
c00129d8:	c3                   	ret    
c00129d9:	90                   	nop

c00129da <Directory::isAtty()>:
c00129da:	31 c0                	xor    eax,eax
c00129dc:	c3                   	ret    
c00129dd:	90                   	nop

c00129de <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00129de:	b8 0a 00 00 00       	mov    eax,0xa
c00129e3:	c3                   	ret    

c00129e4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00129e4:	b8 0a 00 00 00       	mov    eax,0xa
c00129e9:	c3                   	ret    

c00129ea <File::~File()>:
c00129ea:	83 ec 0c             	sub    esp,0xc
c00129ed:	ba 70 93 02 c0       	mov    edx,0xc0029370
c00129f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129f6:	89 10                	mov    DWORD PTR [eax],edx
c00129f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129fc:	83 ec 0c             	sub    esp,0xc
c00129ff:	50                   	push   eax
c0012a00:	e8 2b eb ff ff       	call   c0011530 <UnixFile::~UnixFile()>
c0012a05:	83 c4 10             	add    esp,0x10
c0012a08:	90                   	nop
c0012a09:	83 c4 0c             	add    esp,0xc
c0012a0c:	c3                   	ret    
c0012a0d:	90                   	nop

c0012a0e <File::~File()>:
c0012a0e:	83 ec 0c             	sub    esp,0xc
c0012a11:	83 ec 0c             	sub    esp,0xc
c0012a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a18:	e8 cd ff ff ff       	call   c00129ea <File::~File()>
c0012a1d:	83 c4 10             	add    esp,0x10
c0012a20:	83 ec 08             	sub    esp,0x8
c0012a23:	68 14 01 00 00       	push   0x114
c0012a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a2c:	e8 70 fc ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0012a31:	83 c4 10             	add    esp,0x10
c0012a34:	83 c4 0c             	add    esp,0xc
c0012a37:	c3                   	ret    

c0012a38 <Directory::~Directory()>:
c0012a38:	83 ec 0c             	sub    esp,0xc
c0012a3b:	ba 8c 93 02 c0       	mov    edx,0xc002938c
c0012a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a44:	89 10                	mov    DWORD PTR [eax],edx
c0012a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a4a:	83 ec 0c             	sub    esp,0xc
c0012a4d:	50                   	push   eax
c0012a4e:	e8 dd ea ff ff       	call   c0011530 <UnixFile::~UnixFile()>
c0012a53:	83 c4 10             	add    esp,0x10
c0012a56:	90                   	nop
c0012a57:	83 c4 0c             	add    esp,0xc
c0012a5a:	c3                   	ret    
c0012a5b:	90                   	nop

c0012a5c <Directory::~Directory()>:
c0012a5c:	83 ec 0c             	sub    esp,0xc
c0012a5f:	83 ec 0c             	sub    esp,0xc
c0012a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a66:	e8 cd ff ff ff       	call   c0012a38 <Directory::~Directory()>
c0012a6b:	83 c4 10             	add    esp,0x10
c0012a6e:	83 ec 08             	sub    esp,0x8
c0012a71:	68 14 01 00 00       	push   0x114
c0012a76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a7a:	e8 22 fc ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0012a7f:	83 c4 10             	add    esp,0x10
c0012a82:	83 c4 0c             	add    esp,0xc
c0012a85:	c3                   	ret    

c0012a86 <Filesystem::Filesystem()>:
c0012a86:	ba 0c 93 02 c0       	mov    edx,0xc002930c
c0012a8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a8f:	89 10                	mov    DWORD PTR [eax],edx
c0012a91:	8b 15 c8 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002cac8
c0012a97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a9b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012a9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aa2:	a3 c8 ca 02 c0       	mov    ds:0xc002cac8,eax
c0012aa7:	90                   	nop
c0012aa8:	c3                   	ret    
c0012aa9:	90                   	nop

c0012aaa <Filesystem::~Filesystem()>:
c0012aaa:	ba 0c 93 02 c0       	mov    edx,0xc002930c
c0012aaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ab3:	89 10                	mov    DWORD PTR [eax],edx
c0012ab5:	90                   	nop
c0012ab6:	c3                   	ret    
c0012ab7:	90                   	nop

c0012ab8 <Filesystem::~Filesystem()>:
c0012ab8:	83 ec 0c             	sub    esp,0xc
c0012abb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012abf:	e8 e6 ff ff ff       	call   c0012aaa <Filesystem::~Filesystem()>
c0012ac4:	83 c4 04             	add    esp,0x4
c0012ac7:	83 ec 08             	sub    esp,0x8
c0012aca:	6a 08                	push   0x8
c0012acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ad0:	e8 cc fb ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0012ad5:	83 c4 10             	add    esp,0x10
c0012ad8:	83 c4 0c             	add    esp,0xc
c0012adb:	c3                   	ret    

c0012adc <initVFS()>:
c0012adc:	83 ec 18             	sub    esp,0x18
c0012adf:	6a 08                	push   0x8
c0012ae1:	e8 ee c9 ff ff       	call   c000f4d4 <malloc>
c0012ae6:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ae9:	e8 b0 d3 00 00       	call   c001fe9e <FAT::FAT()>
c0012aee:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012af5:	e8 da c9 ff ff       	call   c000f4d4 <malloc>
c0012afa:	89 04 24             	mov    DWORD PTR [esp],eax
c0012afd:	e8 12 e6 00 00       	call   c0021114 <ISO9660::ISO9660()>
c0012b02:	83 c4 1c             	add    esp,0x1c
c0012b05:	c3                   	ret    

c0012b06 <standardiseFiles(char*, char const*, char const*)>:
c0012b06:	55                   	push   ebp
c0012b07:	57                   	push   edi
c0012b08:	56                   	push   esi
c0012b09:	53                   	push   ebx
c0012b0a:	81 ec 10 04 00 00    	sub    esp,0x410
c0012b10:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012b17:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012b1e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012b25:	68 00 04 00 00       	push   0x400
c0012b2a:	6a 00                	push   0x0
c0012b2c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012b30:	56                   	push   esi
c0012b31:	e8 55 db fe ff       	call   c000068b <memset>
c0012b36:	83 c4 10             	add    esp,0x10
c0012b39:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012b3d:	75 0b                	jne    c0012b4a <standardiseFiles(char*, char const*, char const*)+0x44>
c0012b3f:	50                   	push   eax
c0012b40:	50                   	push   eax
c0012b41:	57                   	push   edi
c0012b42:	56                   	push   esi
c0012b43:	e8 e2 db fe ff       	call   c000072a <strcpy>
c0012b48:	eb 41                	jmp    c0012b8b <standardiseFiles(char*, char const*, char const*)+0x85>
c0012b4a:	8a 07                	mov    al,BYTE PTR [edi]
c0012b4c:	3c 5c                	cmp    al,0x5c
c0012b4e:	74 04                	je     c0012b54 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012b50:	3c 2f                	cmp    al,0x2f
c0012b52:	75 18                	jne    c0012b6c <standardiseFiles(char*, char const*, char const*)+0x66>
c0012b54:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012b57:	3c 60                	cmp    al,0x60
c0012b59:	7e 03                	jle    c0012b5e <standardiseFiles(char*, char const*, char const*)+0x58>
c0012b5b:	83 e8 20             	sub    eax,0x20
c0012b5e:	88 04 24             	mov    BYTE PTR [esp],al
c0012b61:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b68:	50                   	push   eax
c0012b69:	50                   	push   eax
c0012b6a:	eb 18                	jmp    c0012b84 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012b6c:	50                   	push   eax
c0012b6d:	50                   	push   eax
c0012b6e:	55                   	push   ebp
c0012b6f:	56                   	push   esi
c0012b70:	e8 b5 db fe ff       	call   c000072a <strcpy>
c0012b75:	5a                   	pop    edx
c0012b76:	59                   	pop    ecx
c0012b77:	68 86 a7 02 c0       	push   0xc002a786
c0012b7c:	56                   	push   esi
c0012b7d:	e8 5f dc fe ff       	call   c00007e1 <strcat>
c0012b82:	5d                   	pop    ebp
c0012b83:	58                   	pop    eax
c0012b84:	57                   	push   edi
c0012b85:	56                   	push   esi
c0012b86:	e8 56 dc fe ff       	call   c00007e1 <strcat>
c0012b8b:	83 c4 10             	add    esp,0x10
c0012b8e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012b91:	3c 60                	cmp    al,0x60
c0012b93:	7e 03                	jle    c0012b98 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012b95:	83 e8 20             	sub    eax,0x20
c0012b98:	88 04 24             	mov    BYTE PTR [esp],al
c0012b9b:	88 03                	mov    BYTE PTR [ebx],al
c0012b9d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ba4:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012baa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012bae:	bf 03 00 00 00       	mov    edi,0x3
c0012bb3:	b8 03 00 00 00       	mov    eax,0x3
c0012bb8:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012bbb:	84 d2                	test   dl,dl
c0012bbd:	0f 84 91 00 00 00    	je     c0012c54 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012bc3:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012bc6:	80 fa 5c             	cmp    dl,0x5c
c0012bc9:	74 05                	je     c0012bd0 <standardiseFiles(char*, char const*, char const*)+0xca>
c0012bcb:	80 fa 2f             	cmp    dl,0x2f
c0012bce:	75 12                	jne    c0012be2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012bd0:	89 c5                	mov    ebp,eax
c0012bd2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012bd7:	74 09                	je     c0012be2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012bd9:	40                   	inc    eax
c0012bda:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012bde:	89 cf                	mov    edi,ecx
c0012be0:	eb d6                	jmp    c0012bb8 <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012be2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012be7:	75 5b                	jne    c0012c44 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012be9:	80 fa 2e             	cmp    dl,0x2e
c0012bec:	75 56                	jne    c0012c44 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012bee:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012bf2:	74 19                	je     c0012c0d <standardiseFiles(char*, char const*, char const*)+0x107>
c0012bf4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012bf9:	74 53                	je     c0012c4e <standardiseFiles(char*, char const*, char const*)+0x148>
c0012bfb:	89 f9                	mov    ecx,edi
c0012bfd:	41                   	inc    ecx
c0012bfe:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c01:	80 fa 2f             	cmp    dl,0x2f
c0012c04:	74 f7                	je     c0012bfd <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c06:	80 fa 5c             	cmp    dl,0x5c
c0012c09:	74 f2                	je     c0012bfd <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c0b:	eb d1                	jmp    c0012bde <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c0d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c12:	74 3a                	je     c0012c4e <standardiseFiles(char*, char const*, char const*)+0x148>
c0012c14:	83 f8 03             	cmp    eax,0x3
c0012c17:	74 c5                	je     c0012bde <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c19:	41                   	inc    ecx
c0012c1a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c1d:	80 fa 2f             	cmp    dl,0x2f
c0012c20:	74 f7                	je     c0012c19 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012c22:	80 fa 5c             	cmp    dl,0x5c
c0012c25:	74 f2                	je     c0012c19 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012c27:	48                   	dec    eax
c0012c28:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c2c:	75 06                	jne    c0012c34 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c2e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c32:	eb f3                	jmp    c0012c27 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012c34:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c38:	74 07                	je     c0012c41 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012c3a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c3e:	48                   	dec    eax
c0012c3f:	eb f3                	jmp    c0012c34 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c41:	40                   	inc    eax
c0012c42:	eb 9a                	jmp    c0012bde <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c44:	80 fa 2f             	cmp    dl,0x2f
c0012c47:	74 95                	je     c0012bde <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c49:	80 fa 5c             	cmp    dl,0x5c
c0012c4c:	74 90                	je     c0012bde <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c4e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012c51:	40                   	inc    eax
c0012c52:	eb 8a                	jmp    c0012bde <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c54:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c58:	83 ec 0c             	sub    esp,0xc
c0012c5b:	53                   	push   ebx
c0012c5c:	e8 47 da fe ff       	call   c00006a8 <strlen>
c0012c61:	83 c4 10             	add    esp,0x10
c0012c64:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012c69:	75 26                	jne    c0012c91 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012c6b:	83 ec 0c             	sub    esp,0xc
c0012c6e:	53                   	push   ebx
c0012c6f:	e8 34 da fe ff       	call   c00006a8 <strlen>
c0012c74:	83 c4 10             	add    esp,0x10
c0012c77:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012c7c:	74 26                	je     c0012ca4 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012c7e:	83 ec 0c             	sub    esp,0xc
c0012c81:	53                   	push   ebx
c0012c82:	e8 21 da fe ff       	call   c00006a8 <strlen>
c0012c87:	83 c4 10             	add    esp,0x10
c0012c8a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012c8f:	eb c7                	jmp    c0012c58 <standardiseFiles(char*, char const*, char const*)+0x152>
c0012c91:	83 ec 0c             	sub    esp,0xc
c0012c94:	53                   	push   ebx
c0012c95:	e8 0e da fe ff       	call   c00006a8 <strlen>
c0012c9a:	83 c4 10             	add    esp,0x10
c0012c9d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012ca2:	74 c7                	je     c0012c6b <standardiseFiles(char*, char const*, char const*)+0x165>
c0012ca4:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012caa:	5b                   	pop    ebx
c0012cab:	5e                   	pop    esi
c0012cac:	5f                   	pop    edi
c0012cad:	5d                   	pop    ebp
c0012cae:	c3                   	ret    
c0012caf:	90                   	nop

c0012cb0 <File::File(char const*, Process*)>:
c0012cb0:	83 ec 0c             	sub    esp,0xc
c0012cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cb7:	83 ec 08             	sub    esp,0x8
c0012cba:	6a 00                	push   0x0
c0012cbc:	50                   	push   eax
c0012cbd:	e8 8c e6 ff ff       	call   c001134e <UnixFile::UnixFile(int)>
c0012cc2:	83 c4 10             	add    esp,0x10
c0012cc5:	ba 70 93 02 c0       	mov    edx,0xc0029370
c0012cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cce:	89 10                	mov    DWORD PTR [eax],edx
c0012cd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012cd4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cde:	83 c0 0d             	add    eax,0xd
c0012ce1:	83 ec 04             	sub    esp,0x4
c0012ce4:	52                   	push   edx
c0012ce5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ce9:	50                   	push   eax
c0012cea:	e8 17 fe ff ff       	call   c0012b06 <standardiseFiles(char*, char const*, char const*)>
c0012cef:	83 c4 10             	add    esp,0x10
c0012cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cf6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012cf9:	8d 50 bf             	lea    edx,[eax-0x41]
c0012cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d00:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d0a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012d0e:	90                   	nop
c0012d0f:	83 c4 0c             	add    esp,0xc
c0012d12:	c3                   	ret    
c0012d13:	90                   	nop

c0012d14 <File::open(FileOpenMode)>:
c0012d14:	53                   	push   ebx
c0012d15:	b8 0b 00 00 00       	mov    eax,0xb
c0012d1a:	83 ec 08             	sub    esp,0x8
c0012d1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d21:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012d28:	80 fa 19             	cmp    dl,0x19
c0012d2b:	77 40                	ja     c0012d6d <File::open(FileOpenMode)+0x59>
c0012d2d:	8b 14 95 60 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30a0]
c0012d34:	85 d2                	test   edx,edx
c0012d36:	74 35                	je     c0012d6d <File::open(FileOpenMode)+0x59>
c0012d38:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d3e:	85 d2                	test   edx,edx
c0012d40:	74 2b                	je     c0012d6d <File::open(FileOpenMode)+0x59>
c0012d42:	b8 06 00 00 00       	mov    eax,0x6
c0012d47:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d4b:	75 20                	jne    c0012d6d <File::open(FileOpenMode)+0x59>
c0012d4d:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d4f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012d55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d59:	51                   	push   ecx
c0012d5a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012d5d:	51                   	push   ecx
c0012d5e:	52                   	push   edx
c0012d5f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012d62:	83 c4 10             	add    esp,0x10
c0012d65:	85 c0                	test   eax,eax
c0012d67:	75 04                	jne    c0012d6d <File::open(FileOpenMode)+0x59>
c0012d69:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012d6d:	83 c4 08             	add    esp,0x8
c0012d70:	5b                   	pop    ebx
c0012d71:	c3                   	ret    

c0012d72 <File::close()>:
c0012d72:	53                   	push   ebx
c0012d73:	b8 0b 00 00 00       	mov    eax,0xb
c0012d78:	83 ec 08             	sub    esp,0x8
c0012d7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d7f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d86:	80 fa 19             	cmp    dl,0x19
c0012d89:	77 41                	ja     c0012dcc <File::close()+0x5a>
c0012d8b:	8b 1c 95 60 cf 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd30a0]
c0012d92:	85 db                	test   ebx,ebx
c0012d94:	74 36                	je     c0012dcc <File::close()+0x5a>
c0012d96:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d9d:	74 2d                	je     c0012dcc <File::close()+0x5a>
c0012d9f:	b8 05 00 00 00       	mov    eax,0x5
c0012da4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012da8:	74 22                	je     c0012dcc <File::close()+0x5a>
c0012daa:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012dae:	8b 04 95 60 cf 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd30a0]
c0012db5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012dbb:	53                   	push   ebx
c0012dbc:	53                   	push   ebx
c0012dbd:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dbf:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012dc5:	50                   	push   eax
c0012dc6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012dc9:	83 c4 10             	add    esp,0x10
c0012dcc:	83 c4 08             	add    esp,0x8
c0012dcf:	5b                   	pop    ebx
c0012dd0:	c3                   	ret    
c0012dd1:	90                   	nop

c0012dd2 <File::seek(unsigned long long)>:
c0012dd2:	56                   	push   esi
c0012dd3:	53                   	push   ebx
c0012dd4:	b8 0b 00 00 00       	mov    eax,0xb
c0012dd9:	51                   	push   ecx
c0012dda:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012dde:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012de2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012de9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ded:	80 fa 19             	cmp    dl,0x19
c0012df0:	77 31                	ja     c0012e23 <File::seek(unsigned long long)+0x51>
c0012df2:	8b 14 95 60 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30a0]
c0012df9:	85 d2                	test   edx,edx
c0012dfb:	74 26                	je     c0012e23 <File::seek(unsigned long long)+0x51>
c0012dfd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e03:	85 d2                	test   edx,edx
c0012e05:	74 1c                	je     c0012e23 <File::seek(unsigned long long)+0x51>
c0012e07:	b8 05 00 00 00       	mov    eax,0x5
c0012e0c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012e10:	74 11                	je     c0012e23 <File::seek(unsigned long long)+0x51>
c0012e12:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e14:	53                   	push   ebx
c0012e15:	51                   	push   ecx
c0012e16:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012e1c:	52                   	push   edx
c0012e1d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012e20:	83 c4 10             	add    esp,0x10
c0012e23:	5a                   	pop    edx
c0012e24:	5b                   	pop    ebx
c0012e25:	5e                   	pop    esi
c0012e26:	c3                   	ret    
c0012e27:	90                   	nop

c0012e28 <File::tell(unsigned long long*)>:
c0012e28:	83 ec 0c             	sub    esp,0xc
c0012e2b:	b8 0b 00 00 00       	mov    eax,0xb
c0012e30:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e34:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e3b:	80 fa 19             	cmp    dl,0x19
c0012e3e:	77 34                	ja     c0012e74 <File::tell(unsigned long long*)+0x4c>
c0012e40:	8b 14 95 60 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30a0]
c0012e47:	85 d2                	test   edx,edx
c0012e49:	74 29                	je     c0012e74 <File::tell(unsigned long long*)+0x4c>
c0012e4b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e51:	85 d2                	test   edx,edx
c0012e53:	74 1f                	je     c0012e74 <File::tell(unsigned long long*)+0x4c>
c0012e55:	b8 05 00 00 00       	mov    eax,0x5
c0012e5a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e5e:	74 14                	je     c0012e74 <File::tell(unsigned long long*)+0x4c>
c0012e60:	50                   	push   eax
c0012e61:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e67:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e6d:	52                   	push   edx
c0012e6e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012e71:	83 c4 10             	add    esp,0x10
c0012e74:	83 c4 0c             	add    esp,0xc
c0012e77:	c3                   	ret    

c0012e78 <File::rewind()>:
c0012e78:	83 ec 10             	sub    esp,0x10
c0012e7b:	6a 00                	push   0x0
c0012e7d:	6a 00                	push   0x0
c0012e7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e83:	e8 4a ff ff ff       	call   c0012dd2 <File::seek(unsigned long long)>
c0012e88:	83 c4 1c             	add    esp,0x1c
c0012e8b:	c3                   	ret    

c0012e8c <File::unlink()>:
c0012e8c:	83 ec 0c             	sub    esp,0xc
c0012e8f:	b8 0b 00 00 00       	mov    eax,0xb
c0012e94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e98:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e9f:	80 f9 19             	cmp    cl,0x19
c0012ea2:	77 2f                	ja     c0012ed3 <File::unlink()+0x47>
c0012ea4:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c0012eab:	85 c9                	test   ecx,ecx
c0012ead:	74 24                	je     c0012ed3 <File::unlink()+0x47>
c0012eaf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eb5:	85 c9                	test   ecx,ecx
c0012eb7:	74 1a                	je     c0012ed3 <File::unlink()+0x47>
c0012eb9:	b8 06 00 00 00       	mov    eax,0x6
c0012ebe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ec2:	75 0f                	jne    c0012ed3 <File::unlink()+0x47>
c0012ec4:	83 c2 0d             	add    edx,0xd
c0012ec7:	50                   	push   eax
c0012ec8:	50                   	push   eax
c0012ec9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ecb:	52                   	push   edx
c0012ecc:	51                   	push   ecx
c0012ecd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ed0:	83 c4 10             	add    esp,0x10
c0012ed3:	83 c4 0c             	add    esp,0xc
c0012ed6:	c3                   	ret    
c0012ed7:	90                   	nop

c0012ed8 <File::rename(char const*)>:
c0012ed8:	83 ec 0c             	sub    esp,0xc
c0012edb:	b8 0b 00 00 00       	mov    eax,0xb
c0012ee0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ee4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012eeb:	80 f9 19             	cmp    cl,0x19
c0012eee:	77 32                	ja     c0012f22 <File::rename(char const*)+0x4a>
c0012ef0:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c0012ef7:	85 c9                	test   ecx,ecx
c0012ef9:	74 27                	je     c0012f22 <File::rename(char const*)+0x4a>
c0012efb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f01:	85 c9                	test   ecx,ecx
c0012f03:	74 1d                	je     c0012f22 <File::rename(char const*)+0x4a>
c0012f05:	b8 06 00 00 00       	mov    eax,0x6
c0012f0a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f0e:	75 12                	jne    c0012f22 <File::rename(char const*)+0x4a>
c0012f10:	83 c2 0d             	add    edx,0xd
c0012f13:	50                   	push   eax
c0012f14:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f1a:	52                   	push   edx
c0012f1b:	51                   	push   ecx
c0012f1c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012f1f:	83 c4 10             	add    esp,0x10
c0012f22:	83 c4 0c             	add    esp,0xc
c0012f25:	c3                   	ret    

c0012f26 <File::chfatattr(unsigned char, unsigned char)>:
c0012f26:	57                   	push   edi
c0012f27:	b8 0b 00 00 00       	mov    eax,0xb
c0012f2c:	56                   	push   esi
c0012f2d:	53                   	push   ebx
c0012f2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f32:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012f36:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f3d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012f41:	80 f9 19             	cmp    cl,0x19
c0012f44:	77 37                	ja     c0012f7d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f46:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c0012f4d:	85 c9                	test   ecx,ecx
c0012f4f:	74 2c                	je     c0012f7d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f51:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f57:	85 c9                	test   ecx,ecx
c0012f59:	74 22                	je     c0012f7d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f5b:	b8 06 00 00 00       	mov    eax,0x6
c0012f60:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f64:	75 17                	jne    c0012f7d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f66:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012f68:	89 f0                	mov    eax,esi
c0012f6a:	83 c2 0d             	add    edx,0xd
c0012f6d:	0f b6 f0             	movzx  esi,al
c0012f70:	0f b6 db             	movzx  ebx,bl
c0012f73:	56                   	push   esi
c0012f74:	53                   	push   ebx
c0012f75:	52                   	push   edx
c0012f76:	51                   	push   ecx
c0012f77:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012f7a:	83 c4 10             	add    esp,0x10
c0012f7d:	5b                   	pop    ebx
c0012f7e:	5e                   	pop    esi
c0012f7f:	5f                   	pop    edi
c0012f80:	c3                   	ret    
c0012f81:	90                   	nop

c0012f82 <File::exists()>:
c0012f82:	83 ec 0c             	sub    esp,0xc
c0012f85:	31 c0                	xor    eax,eax
c0012f87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f8b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f92:	80 f9 19             	cmp    cl,0x19
c0012f95:	77 24                	ja     c0012fbb <File::exists()+0x39>
c0012f97:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c0012f9e:	85 c9                	test   ecx,ecx
c0012fa0:	74 19                	je     c0012fbb <File::exists()+0x39>
c0012fa2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fa8:	85 c9                	test   ecx,ecx
c0012faa:	74 0f                	je     c0012fbb <File::exists()+0x39>
c0012fac:	83 c2 0d             	add    edx,0xd
c0012faf:	50                   	push   eax
c0012fb0:	50                   	push   eax
c0012fb1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fb3:	52                   	push   edx
c0012fb4:	51                   	push   ecx
c0012fb5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012fb8:	83 c4 10             	add    esp,0x10
c0012fbb:	83 c4 0c             	add    esp,0xc
c0012fbe:	c3                   	ret    
c0012fbf:	90                   	nop

c0012fc0 <File::stat(unsigned long long*, bool*)>:
c0012fc0:	56                   	push   esi
c0012fc1:	53                   	push   ebx
c0012fc2:	50                   	push   eax
c0012fc3:	b8 0b 00 00 00       	mov    eax,0xb
c0012fc8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fcc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fd0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fd7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012fdb:	80 f9 19             	cmp    cl,0x19
c0012fde:	77 3d                	ja     c001301d <File::stat(unsigned long long*, bool*)+0x5d>
c0012fe0:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c0012fe7:	85 c9                	test   ecx,ecx
c0012fe9:	74 32                	je     c001301d <File::stat(unsigned long long*, bool*)+0x5d>
c0012feb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ff1:	85 c9                	test   ecx,ecx
c0012ff3:	74 28                	je     c001301d <File::stat(unsigned long long*, bool*)+0x5d>
c0012ff5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ff7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ffb:	74 13                	je     c0013010 <File::stat(unsigned long long*, bool*)+0x50>
c0012ffd:	83 ec 04             	sub    esp,0x4
c0013000:	56                   	push   esi
c0013001:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013007:	51                   	push   ecx
c0013008:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001300b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001300e:	eb 0a                	jmp    c001301a <File::stat(unsigned long long*, bool*)+0x5a>
c0013010:	53                   	push   ebx
c0013011:	83 c2 0d             	add    edx,0xd
c0013014:	56                   	push   esi
c0013015:	52                   	push   edx
c0013016:	51                   	push   ecx
c0013017:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001301a:	83 c4 10             	add    esp,0x10
c001301d:	5a                   	pop    edx
c001301e:	5b                   	pop    ebx
c001301f:	5e                   	pop    esi
c0013020:	c3                   	ret    

c0013021 <getcwd(Process*, char*, int)>:
c0013021:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013025:	31 c0                	xor    eax,eax
c0013027:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001302a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001302e:	7d 15                	jge    c0013045 <getcwd(Process*, char*, int)+0x24>
c0013030:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013034:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001303b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001303e:	84 c9                	test   cl,cl
c0013040:	74 06                	je     c0013048 <getcwd(Process*, char*, int)+0x27>
c0013042:	40                   	inc    eax
c0013043:	eb e2                	jmp    c0013027 <getcwd(Process*, char*, int)+0x6>
c0013045:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013048:	31 c0                	xor    eax,eax
c001304a:	c3                   	ret    

c001304b <setcwd(Process*, char*)>:
c001304b:	55                   	push   ebp
c001304c:	57                   	push   edi
c001304d:	56                   	push   esi
c001304e:	53                   	push   ebx
c001304f:	81 ec 20 02 00 00    	sub    esp,0x220
c0013055:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001305c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013062:	57                   	push   edi
c0013063:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001306a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001306e:	56                   	push   esi
c001306f:	e8 92 fa ff ff       	call   c0012b06 <standardiseFiles(char*, char const*, char const*)>
c0013074:	89 34 24             	mov    DWORD PTR [esp],esi
c0013077:	e8 2c d6 fe ff       	call   c00006a8 <strlen>
c001307c:	83 c4 10             	add    esp,0x10
c001307f:	83 f8 02             	cmp    eax,0x2
c0013082:	77 17                	ja     c001309b <setcwd(Process*, char*)+0x50>
c0013084:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013089:	83 e8 41             	sub    eax,0x41
c001308c:	83 f8 19             	cmp    eax,0x19
c001308f:	76 24                	jbe    c00130b5 <setcwd(Process*, char*)+0x6a>
c0013091:	b8 03 00 00 00       	mov    eax,0x3
c0013096:	e9 e0 00 00 00       	jmp    c001317b <setcwd(Process*, char*)+0x130>
c001309b:	83 ec 0c             	sub    esp,0xc
c001309e:	56                   	push   esi
c001309f:	e8 04 d6 fe ff       	call   c00006a8 <strlen>
c00130a4:	83 c4 10             	add    esp,0x10
c00130a7:	83 f8 03             	cmp    eax,0x3
c00130aa:	75 34                	jne    c00130e0 <setcwd(Process*, char*)+0x95>
c00130ac:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00130b1:	75 2d                	jne    c00130e0 <setcwd(Process*, char*)+0x95>
c00130b3:	eb cf                	jmp    c0013084 <setcwd(Process*, char*)+0x39>
c00130b5:	8b 14 85 60 cf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd30a0]
c00130bc:	b8 05 00 00 00       	mov    eax,0x5
c00130c1:	85 d2                	test   edx,edx
c00130c3:	0f 84 b2 00 00 00    	je     c001317b <setcwd(Process*, char*)+0x130>
c00130c9:	b8 06 00 00 00       	mov    eax,0x6
c00130ce:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00130d5:	0f 85 92 00 00 00    	jne    c001316d <setcwd(Process*, char*)+0x122>
c00130db:	e9 9b 00 00 00       	jmp    c001317b <setcwd(Process*, char*)+0x130>
c00130e0:	83 ec 0c             	sub    esp,0xc
c00130e3:	68 14 01 00 00       	push   0x114
c00130e8:	e8 e7 c3 ff ff       	call   c000f4d4 <malloc>
c00130ed:	83 c4 0c             	add    esp,0xc
c00130f0:	89 c3                	mov    ebx,eax
c00130f2:	55                   	push   ebp
c00130f3:	56                   	push   esi
c00130f4:	50                   	push   eax
c00130f5:	e8 b6 fb ff ff       	call   c0012cb0 <File::File(char const*, Process*)>
c00130fa:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00130ff:	83 c4 0c             	add    esp,0xc
c0013102:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013106:	50                   	push   eax
c0013107:	8d 44 24 10          	lea    eax,[esp+0x10]
c001310b:	50                   	push   eax
c001310c:	53                   	push   ebx
c001310d:	e8 ae fe ff ff       	call   c0012fc0 <File::stat(unsigned long long*, bool*)>
c0013112:	83 c4 10             	add    esp,0x10
c0013115:	83 f8 02             	cmp    eax,0x2
c0013118:	74 04                	je     c001311e <setcwd(Process*, char*)+0xd3>
c001311a:	85 c0                	test   eax,eax
c001311c:	74 1c                	je     c001313a <setcwd(Process*, char*)+0xef>
c001311e:	b8 01 00 00 00       	mov    eax,0x1
c0013123:	85 db                	test   ebx,ebx
c0013125:	74 54                	je     c001317b <setcwd(Process*, char*)+0x130>
c0013127:	83 ec 0c             	sub    esp,0xc
c001312a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001312c:	53                   	push   ebx
c001312d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013130:	83 c4 10             	add    esp,0x10
c0013133:	b8 01 00 00 00       	mov    eax,0x1
c0013138:	eb 41                	jmp    c001317b <setcwd(Process*, char*)+0x130>
c001313a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001313f:	75 1c                	jne    c001315d <setcwd(Process*, char*)+0x112>
c0013141:	b8 02 00 00 00       	mov    eax,0x2
c0013146:	85 db                	test   ebx,ebx
c0013148:	74 31                	je     c001317b <setcwd(Process*, char*)+0x130>
c001314a:	83 ec 0c             	sub    esp,0xc
c001314d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001314f:	53                   	push   ebx
c0013150:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013153:	83 c4 10             	add    esp,0x10
c0013156:	b8 02 00 00 00       	mov    eax,0x2
c001315b:	eb 1e                	jmp    c001317b <setcwd(Process*, char*)+0x130>
c001315d:	85 db                	test   ebx,ebx
c001315f:	74 0c                	je     c001316d <setcwd(Process*, char*)+0x122>
c0013161:	83 ec 0c             	sub    esp,0xc
c0013164:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013166:	53                   	push   ebx
c0013167:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001316a:	83 c4 10             	add    esp,0x10
c001316d:	50                   	push   eax
c001316e:	50                   	push   eax
c001316f:	56                   	push   esi
c0013170:	57                   	push   edi
c0013171:	e8 b4 d5 fe ff       	call   c000072a <strcpy>
c0013176:	83 c4 10             	add    esp,0x10
c0013179:	31 c0                	xor    eax,eax
c001317b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013181:	5b                   	pop    ebx
c0013182:	5e                   	pop    esi
c0013183:	5f                   	pop    edi
c0013184:	5d                   	pop    ebp
c0013185:	c3                   	ret    

c0013186 <Directory::Directory(char const*, Process*)>:
c0013186:	83 ec 0c             	sub    esp,0xc
c0013189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001318d:	83 ec 08             	sub    esp,0x8
c0013190:	6a 00                	push   0x0
c0013192:	50                   	push   eax
c0013193:	e8 b6 e1 ff ff       	call   c001134e <UnixFile::UnixFile(int)>
c0013198:	83 c4 10             	add    esp,0x10
c001319b:	ba 8c 93 02 c0       	mov    edx,0xc002938c
c00131a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a4:	89 10                	mov    DWORD PTR [eax],edx
c00131a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131aa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00131b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131b4:	83 c0 0d             	add    eax,0xd
c00131b7:	83 ec 04             	sub    esp,0x4
c00131ba:	52                   	push   edx
c00131bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131bf:	50                   	push   eax
c00131c0:	e8 41 f9 ff ff       	call   c0012b06 <standardiseFiles(char*, char const*, char const*)>
c00131c5:	83 c4 10             	add    esp,0x10
c00131c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131cc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00131cf:	8d 50 bf             	lea    edx,[eax-0x41]
c00131d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00131dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00131e4:	90                   	nop
c00131e5:	83 c4 0c             	add    esp,0xc
c00131e8:	c3                   	ret    
c00131e9:	90                   	nop

c00131ea <Directory::open()>:
c00131ea:	53                   	push   ebx
c00131eb:	b8 0b 00 00 00       	mov    eax,0xb
c00131f0:	83 ec 08             	sub    esp,0x8
c00131f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131f7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00131fe:	80 fa 19             	cmp    dl,0x19
c0013201:	77 3d                	ja     c0013240 <Directory::open()+0x56>
c0013203:	8b 14 95 60 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30a0]
c001320a:	85 d2                	test   edx,edx
c001320c:	74 32                	je     c0013240 <Directory::open()+0x56>
c001320e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013214:	85 d2                	test   edx,edx
c0013216:	74 28                	je     c0013240 <Directory::open()+0x56>
c0013218:	b8 06 00 00 00       	mov    eax,0x6
c001321d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013221:	75 1d                	jne    c0013240 <Directory::open()+0x56>
c0013223:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013229:	50                   	push   eax
c001322a:	8b 02                	mov    eax,DWORD PTR [edx]
c001322c:	51                   	push   ecx
c001322d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013230:	51                   	push   ecx
c0013231:	52                   	push   edx
c0013232:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013235:	83 c4 10             	add    esp,0x10
c0013238:	85 c0                	test   eax,eax
c001323a:	75 04                	jne    c0013240 <Directory::open()+0x56>
c001323c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013240:	83 c4 08             	add    esp,0x8
c0013243:	5b                   	pop    ebx
c0013244:	c3                   	ret    
c0013245:	90                   	nop

c0013246 <Directory::close()>:
c0013246:	53                   	push   ebx
c0013247:	b8 0b 00 00 00       	mov    eax,0xb
c001324c:	83 ec 08             	sub    esp,0x8
c001324f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013253:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001325a:	80 fa 19             	cmp    dl,0x19
c001325d:	77 41                	ja     c00132a0 <Directory::close()+0x5a>
c001325f:	8b 1c 95 60 cf 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd30a0]
c0013266:	85 db                	test   ebx,ebx
c0013268:	74 36                	je     c00132a0 <Directory::close()+0x5a>
c001326a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013271:	74 2d                	je     c00132a0 <Directory::close()+0x5a>
c0013273:	b8 05 00 00 00       	mov    eax,0x5
c0013278:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001327c:	74 22                	je     c00132a0 <Directory::close()+0x5a>
c001327e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013282:	8b 04 95 60 cf 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd30a0]
c0013289:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001328f:	53                   	push   ebx
c0013290:	53                   	push   ebx
c0013291:	8b 10                	mov    edx,DWORD PTR [eax]
c0013293:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013299:	50                   	push   eax
c001329a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001329d:	83 c4 10             	add    esp,0x10
c00132a0:	83 c4 08             	add    esp,0x8
c00132a3:	5b                   	pop    ebx
c00132a4:	c3                   	ret    
c00132a5:	90                   	nop

c00132a6 <Directory::unlink()>:
c00132a6:	83 ec 0c             	sub    esp,0xc
c00132a9:	b8 0b 00 00 00       	mov    eax,0xb
c00132ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132b9:	80 f9 19             	cmp    cl,0x19
c00132bc:	77 2f                	ja     c00132ed <Directory::unlink()+0x47>
c00132be:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c00132c5:	85 c9                	test   ecx,ecx
c00132c7:	74 24                	je     c00132ed <Directory::unlink()+0x47>
c00132c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132cf:	85 c9                	test   ecx,ecx
c00132d1:	74 1a                	je     c00132ed <Directory::unlink()+0x47>
c00132d3:	b8 06 00 00 00       	mov    eax,0x6
c00132d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132dc:	75 0f                	jne    c00132ed <Directory::unlink()+0x47>
c00132de:	83 c2 0d             	add    edx,0xd
c00132e1:	50                   	push   eax
c00132e2:	50                   	push   eax
c00132e3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132e5:	52                   	push   edx
c00132e6:	51                   	push   ecx
c00132e7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00132ea:	83 c4 10             	add    esp,0x10
c00132ed:	83 c4 0c             	add    esp,0xc
c00132f0:	c3                   	ret    
c00132f1:	90                   	nop

c00132f2 <Directory::rename(char const*)>:
c00132f2:	83 ec 0c             	sub    esp,0xc
c00132f5:	b8 0b 00 00 00       	mov    eax,0xb
c00132fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132fe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013305:	80 f9 19             	cmp    cl,0x19
c0013308:	77 32                	ja     c001333c <Directory::rename(char const*)+0x4a>
c001330a:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c0013311:	85 c9                	test   ecx,ecx
c0013313:	74 27                	je     c001333c <Directory::rename(char const*)+0x4a>
c0013315:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001331b:	85 c9                	test   ecx,ecx
c001331d:	74 1d                	je     c001333c <Directory::rename(char const*)+0x4a>
c001331f:	b8 06 00 00 00       	mov    eax,0x6
c0013324:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013328:	75 12                	jne    c001333c <Directory::rename(char const*)+0x4a>
c001332a:	83 c2 0d             	add    edx,0xd
c001332d:	50                   	push   eax
c001332e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013330:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013334:	52                   	push   edx
c0013335:	51                   	push   ecx
c0013336:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013339:	83 c4 10             	add    esp,0x10
c001333c:	83 c4 0c             	add    esp,0xc
c001333f:	c3                   	ret    

c0013340 <Directory::exists()>:
c0013340:	83 ec 0c             	sub    esp,0xc
c0013343:	31 c0                	xor    eax,eax
c0013345:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013349:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013350:	80 f9 19             	cmp    cl,0x19
c0013353:	77 24                	ja     c0013379 <Directory::exists()+0x39>
c0013355:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c001335c:	85 c9                	test   ecx,ecx
c001335e:	74 19                	je     c0013379 <Directory::exists()+0x39>
c0013360:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013366:	85 c9                	test   ecx,ecx
c0013368:	74 0f                	je     c0013379 <Directory::exists()+0x39>
c001336a:	83 c2 0d             	add    edx,0xd
c001336d:	50                   	push   eax
c001336e:	50                   	push   eax
c001336f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013371:	52                   	push   edx
c0013372:	51                   	push   ecx
c0013373:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013376:	83 c4 10             	add    esp,0x10
c0013379:	83 c4 0c             	add    esp,0xc
c001337c:	c3                   	ret    
c001337d:	90                   	nop

c001337e <Directory::read(dirent*)>:
c001337e:	83 ec 1c             	sub    esp,0x1c
c0013381:	b8 0b 00 00 00       	mov    eax,0xb
c0013386:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001338a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013391:	80 fa 19             	cmp    dl,0x19
c0013394:	77 30                	ja     c00133c6 <Directory::read(dirent*)+0x48>
c0013396:	8b 14 95 60 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30a0]
c001339d:	85 d2                	test   edx,edx
c001339f:	74 25                	je     c00133c6 <Directory::read(dirent*)+0x48>
c00133a1:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00133a8:	74 1c                	je     c00133c6 <Directory::read(dirent*)+0x48>
c00133aa:	83 ec 0c             	sub    esp,0xc
c00133ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133af:	8d 54 24 18          	lea    edx,[esp+0x18]
c00133b3:	52                   	push   edx
c00133b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00133b8:	6a 00                	push   0x0
c00133ba:	68 10 01 00 00       	push   0x110
c00133bf:	51                   	push   ecx
c00133c0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00133c3:	83 c4 20             	add    esp,0x20
c00133c6:	83 c4 1c             	add    esp,0x1c
c00133c9:	c3                   	ret    

c00133ca <Directory::create()>:
c00133ca:	83 ec 0c             	sub    esp,0xc
c00133cd:	b8 0b 00 00 00       	mov    eax,0xb
c00133d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133dd:	80 f9 19             	cmp    cl,0x19
c00133e0:	77 2f                	ja     c0013411 <Directory::create()+0x47>
c00133e2:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c00133e9:	85 c9                	test   ecx,ecx
c00133eb:	74 24                	je     c0013411 <Directory::create()+0x47>
c00133ed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133f3:	85 c9                	test   ecx,ecx
c00133f5:	74 1a                	je     c0013411 <Directory::create()+0x47>
c00133f7:	b8 06 00 00 00       	mov    eax,0x6
c00133fc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013400:	75 0f                	jne    c0013411 <Directory::create()+0x47>
c0013402:	83 c2 0d             	add    edx,0xd
c0013405:	50                   	push   eax
c0013406:	50                   	push   eax
c0013407:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013409:	52                   	push   edx
c001340a:	51                   	push   ecx
c001340b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001340e:	83 c4 10             	add    esp,0x10
c0013411:	83 c4 0c             	add    esp,0xc
c0013414:	c3                   	ret    
c0013415:	90                   	nop

c0013416 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013416:	b8 0a 00 00 00       	mov    eax,0xa
c001341b:	c3                   	ret    

c001341c <Bus::Bus(char const*)>:
c001341c:	83 ec 0c             	sub    esp,0xc
c001341f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013423:	83 ec 08             	sub    esp,0x8
c0013426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001342a:	50                   	push   eax
c001342b:	e8 30 09 00 00       	call   c0013d60 <Device::Device(char const*)>
c0013430:	83 c4 10             	add    esp,0x10
c0013433:	ba a8 93 02 c0       	mov    edx,0xc00293a8
c0013438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001343c:	89 10                	mov    DWORD PTR [eax],edx
c001343e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013442:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001344c:	90                   	nop
c001344d:	83 c4 0c             	add    esp,0xc
c0013450:	c3                   	ret    
c0013451:	90                   	nop

c0013452 <Bus::~Bus()>:
c0013452:	83 ec 0c             	sub    esp,0xc
c0013455:	ba a8 93 02 c0       	mov    edx,0xc00293a8
c001345a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345e:	89 10                	mov    DWORD PTR [eax],edx
c0013460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013464:	83 ec 0c             	sub    esp,0xc
c0013467:	50                   	push   eax
c0013468:	e8 d5 05 00 00       	call   c0013a42 <Device::~Device()>
c001346d:	83 c4 10             	add    esp,0x10
c0013470:	90                   	nop
c0013471:	83 c4 0c             	add    esp,0xc
c0013474:	c3                   	ret    
c0013475:	90                   	nop

c0013476 <Bus::~Bus()>:
c0013476:	83 ec 0c             	sub    esp,0xc
c0013479:	83 ec 0c             	sub    esp,0xc
c001347c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013480:	e8 cd ff ff ff       	call   c0013452 <Bus::~Bus()>
c0013485:	83 c4 10             	add    esp,0x10
c0013488:	83 ec 08             	sub    esp,0x8
c001348b:	68 58 01 00 00       	push   0x158
c0013490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013494:	e8 08 f2 ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0013499:	83 c4 10             	add    esp,0x10
c001349c:	83 c4 0c             	add    esp,0xc
c001349f:	c3                   	ret    

c00134a0 <Buzzer::Buzzer(char const*)>:
c00134a0:	83 ec 0c             	sub    esp,0xc
c00134a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134a7:	83 ec 08             	sub    esp,0x8
c00134aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134ae:	50                   	push   eax
c00134af:	e8 ac 08 00 00       	call   c0013d60 <Device::Device(char const*)>
c00134b4:	83 c4 10             	add    esp,0x10
c00134b7:	ba d4 93 02 c0       	mov    edx,0xc00293d4
c00134bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c0:	89 10                	mov    DWORD PTR [eax],edx
c00134c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00134d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d4:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00134de:	90                   	nop
c00134df:	83 c4 0c             	add    esp,0xc
c00134e2:	c3                   	ret    
c00134e3:	90                   	nop

c00134e4 <Buzzer::~Buzzer()>:
c00134e4:	83 ec 0c             	sub    esp,0xc
c00134e7:	ba d4 93 02 c0       	mov    edx,0xc00293d4
c00134ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f0:	89 10                	mov    DWORD PTR [eax],edx
c00134f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f6:	83 ec 0c             	sub    esp,0xc
c00134f9:	50                   	push   eax
c00134fa:	e8 43 05 00 00       	call   c0013a42 <Device::~Device()>
c00134ff:	83 c4 10             	add    esp,0x10
c0013502:	90                   	nop
c0013503:	83 c4 0c             	add    esp,0xc
c0013506:	c3                   	ret    
c0013507:	90                   	nop

c0013508 <Buzzer::~Buzzer()>:
c0013508:	83 ec 0c             	sub    esp,0xc
c001350b:	83 ec 0c             	sub    esp,0xc
c001350e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013512:	e8 cd ff ff ff       	call   c00134e4 <Buzzer::~Buzzer()>
c0013517:	83 c4 10             	add    esp,0x10
c001351a:	83 ec 08             	sub    esp,0x8
c001351d:	68 5c 01 00 00       	push   0x15c
c0013522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013526:	e8 76 f1 ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c001352b:	83 c4 10             	add    esp,0x10
c001352e:	83 c4 0c             	add    esp,0xc
c0013531:	c3                   	ret    

c0013532 <Buzzer::stop()>:
c0013532:	83 ec 14             	sub    esp,0x14
c0013535:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013539:	8b 10                	mov    edx,DWORD PTR [eax]
c001353b:	6a 00                	push   0x0
c001353d:	50                   	push   eax
c001353e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013541:	83 c4 1c             	add    esp,0x1c
c0013544:	c3                   	ret    

c0013545 <beepThread(void*)>:
c0013545:	53                   	push   ebx
c0013546:	83 ec 08             	sub    esp,0x8
c0013549:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001354d:	e8 da 97 00 00       	call   c001cd2c <unlockScheduler()>
c0013552:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013557:	52                   	push   edx
c0013558:	52                   	push   edx
c0013559:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001355f:	52                   	push   edx
c0013560:	50                   	push   eax
c0013561:	e8 14 9d 00 00       	call   c001d27a <nanoSleep(unsigned long long)>
c0013566:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013569:	e8 c4 ff ff ff       	call   c0013532 <Buzzer::stop()>
c001356e:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013576:	83 c4 18             	add    esp,0x18
c0013579:	5b                   	pop    ebx
c001357a:	e9 41 9c 00 00       	jmp    c001d1c0 <blockTask(TaskState)>
c001357f:	90                   	nop

c0013580 <Buzzer::beep(int, int, bool)>:
c0013580:	57                   	push   edi
c0013581:	56                   	push   esi
c0013582:	53                   	push   ebx
c0013583:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013587:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001358b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001358f:	52                   	push   edx
c0013590:	52                   	push   edx
c0013591:	8b 06                	mov    eax,DWORD PTR [esi]
c0013593:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013597:	56                   	push   esi
c0013598:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001359b:	83 c4 10             	add    esp,0x10
c001359e:	89 f8                	mov    eax,edi
c00135a0:	84 c0                	test   al,al
c00135a2:	74 1f                	je     c00135c3 <Buzzer::beep(int, int, bool)+0x43>
c00135a4:	50                   	push   eax
c00135a5:	50                   	push   eax
c00135a6:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00135ac:	99                   	cdq    
c00135ad:	52                   	push   edx
c00135ae:	50                   	push   eax
c00135af:	e8 c6 9c 00 00       	call   c001d27a <nanoSleep(unsigned long long)>
c00135b4:	83 c4 10             	add    esp,0x10
c00135b7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00135bb:	5b                   	pop    ebx
c00135bc:	5e                   	pop    esi
c00135bd:	5f                   	pop    edi
c00135be:	e9 6f ff ff ff       	jmp    c0013532 <Buzzer::stop()>
c00135c3:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00135c9:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00135ce:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00135d6:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00135da:	c7 44 24 14 45 35 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013545
c00135e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135e6:	5b                   	pop    ebx
c00135e7:	5e                   	pop    esi
c00135e8:	5f                   	pop    edi
c00135e9:	e9 6e 98 00 00       	jmp    c001ce5c <Process::createThread(void (*)(void*), void*, int)>

c00135ee <loadClockSettings()>:
c00135ee:	c7 05 d4 ca 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002cad4,0xa
c00135f8:	c6 05 d1 ca 02 c0 00 	mov    BYTE PTR ds:0xc002cad1,0x0
c00135ff:	c6 05 d0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cad0,0x1
c0013606:	c3                   	ret    
c0013607:	90                   	nop

c0013608 <Clock::Clock(char const*)>:
c0013608:	83 ec 0c             	sub    esp,0xc
c001360b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001360f:	83 ec 08             	sub    esp,0x8
c0013612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013616:	50                   	push   eax
c0013617:	e8 44 07 00 00       	call   c0013d60 <Device::Device(char const*)>
c001361c:	83 c4 10             	add    esp,0x10
c001361f:	ba 04 94 02 c0       	mov    edx,0xc0029404
c0013624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013628:	89 10                	mov    DWORD PTR [eax],edx
c001362a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001362e:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013638:	90                   	nop
c0013639:	83 c4 0c             	add    esp,0xc
c001363c:	c3                   	ret    
c001363d:	90                   	nop

c001363e <Clock::~Clock()>:
c001363e:	83 ec 0c             	sub    esp,0xc
c0013641:	ba 04 94 02 c0       	mov    edx,0xc0029404
c0013646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001364a:	89 10                	mov    DWORD PTR [eax],edx
c001364c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013650:	83 ec 0c             	sub    esp,0xc
c0013653:	50                   	push   eax
c0013654:	e8 e9 03 00 00       	call   c0013a42 <Device::~Device()>
c0013659:	83 c4 10             	add    esp,0x10
c001365c:	90                   	nop
c001365d:	83 c4 0c             	add    esp,0xc
c0013660:	c3                   	ret    
c0013661:	90                   	nop

c0013662 <Clock::~Clock()>:
c0013662:	83 ec 0c             	sub    esp,0xc
c0013665:	83 ec 0c             	sub    esp,0xc
c0013668:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001366c:	e8 cd ff ff ff       	call   c001363e <Clock::~Clock()>
c0013671:	83 c4 10             	add    esp,0x10
c0013674:	83 ec 08             	sub    esp,0x8
c0013677:	68 58 01 00 00       	push   0x158
c001367c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013680:	e8 1c f0 ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0013685:	83 c4 10             	add    esp,0x10
c0013688:	83 c4 0c             	add    esp,0xc
c001368b:	c3                   	ret    

c001368c <Clock::timeInSecondsLocal()>:
c001368c:	53                   	push   ebx
c001368d:	83 ec 14             	sub    esp,0x14
c0013690:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013694:	8b 10                	mov    edx,DWORD PTR [eax]
c0013696:	50                   	push   eax
c0013697:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001369a:	0f b6 0d d0 ca 02 c0 	movzx  ecx,BYTE PTR ds:0xc002cad0
c00136a1:	03 0d d4 ca 02 c0    	add    ecx,DWORD PTR ds:0xc002cad4
c00136a7:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00136ad:	89 cb                	mov    ebx,ecx
c00136af:	c1 fb 1f             	sar    ebx,0x1f
c00136b2:	01 c8                	add    eax,ecx
c00136b4:	11 da                	adc    edx,ebx
c00136b6:	83 c4 10             	add    esp,0x10
c00136b9:	31 c9                	xor    ecx,ecx
c00136bb:	80 3d d1 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cad1,0x0
c00136c2:	74 05                	je     c00136c9 <Clock::timeInSecondsLocal()+0x3d>
c00136c4:	b9 08 07 00 00       	mov    ecx,0x708
c00136c9:	31 db                	xor    ebx,ebx
c00136cb:	01 c8                	add    eax,ecx
c00136cd:	11 da                	adc    edx,ebx
c00136cf:	83 c4 08             	add    esp,0x8
c00136d2:	5b                   	pop    ebx
c00136d3:	c3                   	ret    

c00136d4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00136d4:	57                   	push   edi
c00136d5:	56                   	push   esi
c00136d6:	53                   	push   ebx
c00136d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00136db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136e1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00136e5:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00136e8:	0f b6 05 d0 ca 02 c0 	movzx  eax,BYTE PTR ds:0xc002cad0
c00136ef:	03 05 d4 ca 02 c0    	add    eax,DWORD PTR ds:0xc002cad4
c00136f5:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00136fb:	99                   	cdq    
c00136fc:	29 c6                	sub    esi,eax
c00136fe:	19 d7                	sbb    edi,edx
c0013700:	89 f0                	mov    eax,esi
c0013702:	89 fa                	mov    edx,edi
c0013704:	31 f6                	xor    esi,esi
c0013706:	80 3d d1 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cad1,0x0
c001370d:	74 05                	je     c0013714 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001370f:	be 08 07 00 00       	mov    esi,0x708
c0013714:	31 ff                	xor    edi,edi
c0013716:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001371a:	29 f0                	sub    eax,esi
c001371c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013720:	19 fa                	sbb    edx,edi
c0013722:	89 d8                	mov    eax,ebx
c0013724:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013728:	5b                   	pop    ebx
c0013729:	5e                   	pop    esi
c001372a:	5f                   	pop    edi
c001372b:	ff e0                	jmp    eax

c001372d <datetimeToSeconds(datetime_t)>:
c001372d:	55                   	push   ebp
c001372e:	57                   	push   edi
c001372f:	56                   	push   esi
c0013730:	53                   	push   ebx
c0013731:	83 ec 14             	sub    esp,0x14
c0013734:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013738:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001373c:	89 d3                	mov    ebx,edx
c001373e:	0f b6 c6             	movzx  eax,dh
c0013741:	c1 eb 10             	shr    ebx,0x10
c0013744:	48                   	dec    eax
c0013745:	66 81 eb 6c 07       	sub    bx,0x76c
c001374a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001374e:	0f b6 f5             	movzx  esi,ch
c0013751:	89 cf                	mov    edi,ecx
c0013753:	6b f6 3c             	imul   esi,esi,0x3c
c0013756:	c1 ef 10             	shr    edi,0x10
c0013759:	0f b6 c9             	movzx  ecx,cl
c001375c:	89 f8                	mov    eax,edi
c001375e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013764:	0f b6 f8             	movzx  edi,al
c0013767:	0f b6 d2             	movzx  edx,dl
c001376a:	01 fe                	add    esi,edi
c001376c:	01 f1                	add    ecx,esi
c001376e:	0f b7 f3             	movzx  esi,bx
c0013771:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013775:	c1 f9 1f             	sar    ecx,0x1f
c0013778:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001377d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013781:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013786:	8b 0c 8d 40 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6bc0]
c001378d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013791:	76 29                	jbe    c00137bc <datetimeToSeconds(datetime_t)+0x8f>
c0013793:	f6 c3 03             	test   bl,0x3
c0013796:	75 24                	jne    c00137bc <datetimeToSeconds(datetime_t)+0x8f>
c0013798:	31 d2                	xor    edx,edx
c001379a:	bf 64 00 00 00       	mov    edi,0x64
c001379f:	89 d8                	mov    eax,ebx
c00137a1:	66 f7 f7             	div    di
c00137a4:	66 85 d2             	test   dx,dx
c00137a7:	75 12                	jne    c00137bb <datetimeToSeconds(datetime_t)+0x8e>
c00137a9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00137af:	bf 90 01 00 00       	mov    edi,0x190
c00137b4:	99                   	cdq    
c00137b5:	f7 ff                	idiv   edi
c00137b7:	85 d2                	test   edx,edx
c00137b9:	75 01                	jne    c00137bc <datetimeToSeconds(datetime_t)+0x8f>
c00137bb:	41                   	inc    ecx
c00137bc:	66 83 fb 46          	cmp    bx,0x46
c00137c0:	76 45                	jbe    c0013807 <datetimeToSeconds(datetime_t)+0xda>
c00137c2:	bb 46 00 00 00       	mov    ebx,0x46
c00137c7:	bf 64 00 00 00       	mov    edi,0x64
c00137cc:	bd 90 01 00 00       	mov    ebp,0x190
c00137d1:	b8 6d 01 00 00       	mov    eax,0x16d
c00137d6:	f6 c3 03             	test   bl,0x3
c00137d9:	75 23                	jne    c00137fe <datetimeToSeconds(datetime_t)+0xd1>
c00137db:	89 d8                	mov    eax,ebx
c00137dd:	99                   	cdq    
c00137de:	f7 ff                	idiv   edi
c00137e0:	b8 6e 01 00 00       	mov    eax,0x16e
c00137e5:	85 d2                	test   edx,edx
c00137e7:	75 15                	jne    c00137fe <datetimeToSeconds(datetime_t)+0xd1>
c00137e9:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00137ef:	99                   	cdq    
c00137f0:	f7 fd                	idiv   ebp
c00137f2:	83 fa 01             	cmp    edx,0x1
c00137f5:	19 c0                	sbb    eax,eax
c00137f7:	f7 d0                	not    eax
c00137f9:	05 6e 01 00 00       	add    eax,0x16e
c00137fe:	01 c1                	add    ecx,eax
c0013800:	43                   	inc    ebx
c0013801:	39 f3                	cmp    ebx,esi
c0013803:	7c cc                	jl     c00137d1 <datetimeToSeconds(datetime_t)+0xa4>
c0013805:	eb 35                	jmp    c001383c <datetimeToSeconds(datetime_t)+0x10f>
c0013807:	74 33                	je     c001383c <datetimeToSeconds(datetime_t)+0x10f>
c0013809:	b8 45 00 00 00       	mov    eax,0x45
c001380e:	89 c2                	mov    edx,eax
c0013810:	83 e2 03             	and    edx,0x3
c0013813:	39 f0                	cmp    eax,esi
c0013815:	7e 0f                	jle    c0013826 <datetimeToSeconds(datetime_t)+0xf9>
c0013817:	83 fa 01             	cmp    edx,0x1
c001381a:	19 d2                	sbb    edx,edx
c001381c:	48                   	dec    eax
c001381d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013824:	eb e8                	jmp    c001380e <datetimeToSeconds(datetime_t)+0xe1>
c0013826:	b8 6d 01 00 00       	mov    eax,0x16d
c001382b:	85 d2                	test   edx,edx
c001382d:	75 0b                	jne    c001383a <datetimeToSeconds(datetime_t)+0x10d>
c001382f:	66 83 fb 01          	cmp    bx,0x1
c0013833:	19 c0                	sbb    eax,eax
c0013835:	05 6e 01 00 00       	add    eax,0x16e
c001383a:	29 c1                	sub    ecx,eax
c001383c:	b8 80 51 01 00       	mov    eax,0x15180
c0013841:	f7 e9                	imul   ecx
c0013843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013847:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001384b:	83 c4 14             	add    esp,0x14
c001384e:	5b                   	pop    ebx
c001384f:	5e                   	pop    esi
c0013850:	5f                   	pop    edi
c0013851:	5d                   	pop    ebp
c0013852:	c3                   	ret    
c0013853:	90                   	nop

c0013854 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013854:	57                   	push   edi
c0013855:	56                   	push   esi
c0013856:	53                   	push   ebx
c0013857:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001385b:	8b 06                	mov    eax,DWORD PTR [esi]
c001385d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013864:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013868:	e8 c0 fe ff ff       	call   c001372d <datetimeToSeconds(datetime_t)>
c001386d:	59                   	pop    ecx
c001386e:	0f b6 0d d0 ca 02 c0 	movzx  ecx,BYTE PTR ds:0xc002cad0
c0013875:	5b                   	pop    ebx
c0013876:	03 0d d4 ca 02 c0    	add    ecx,DWORD PTR ds:0xc002cad4
c001387c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013882:	89 cb                	mov    ebx,ecx
c0013884:	c1 fb 1f             	sar    ebx,0x1f
c0013887:	29 c8                	sub    eax,ecx
c0013889:	19 da                	sbb    edx,ebx
c001388b:	31 c9                	xor    ecx,ecx
c001388d:	80 3d d1 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cad1,0x0
c0013894:	74 05                	je     c001389b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013896:	b9 08 07 00 00       	mov    ecx,0x708
c001389b:	31 db                	xor    ebx,ebx
c001389d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00138a1:	29 c8                	sub    eax,ecx
c00138a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138a7:	19 da                	sbb    edx,ebx
c00138a9:	89 f8                	mov    eax,edi
c00138ab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138af:	5b                   	pop    ebx
c00138b0:	5e                   	pop    esi
c00138b1:	5f                   	pop    edi
c00138b2:	ff e0                	jmp    eax

c00138b4 <secondsToDatetime(unsigned long long)>:
c00138b4:	55                   	push   ebp
c00138b5:	57                   	push   edi
c00138b6:	56                   	push   esi
c00138b7:	53                   	push   ebx
c00138b8:	83 ec 1c             	sub    esp,0x1c
c00138bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00138bf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00138c3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00138c7:	6a 00                	push   0x0
c00138c9:	68 80 51 01 00       	push   0x15180
c00138ce:	55                   	push   ebp
c00138cf:	57                   	push   edi
c00138d0:	e8 d7 1a 01 00       	call   c00253ac <__udivdi3>
c00138d5:	83 c4 10             	add    esp,0x10
c00138d8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00138de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138e2:	6a 00                	push   0x0
c00138e4:	68 80 51 01 00       	push   0x15180
c00138e9:	55                   	push   ebp
c00138ea:	57                   	push   edi
c00138eb:	bf 10 0e 00 00       	mov    edi,0xe10
c00138f0:	e8 b7 1b 01 00       	call   c00254ac <__umoddi3>
c00138f5:	83 c4 10             	add    esp,0x10
c00138f8:	99                   	cdq    
c00138f9:	f7 ff                	idiv   edi
c00138fb:	bf 3c 00 00 00       	mov    edi,0x3c
c0013900:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013903:	89 d0                	mov    eax,edx
c0013905:	99                   	cdq    
c0013906:	f7 ff                	idiv   edi
c0013908:	85 db                	test   ebx,ebx
c001390a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001390d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013910:	79 11                	jns    c0013923 <secondsToDatetime(unsigned long long)+0x6f>
c0013912:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013916:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001391c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013921:	eb 07                	jmp    c001392a <secondsToDatetime(unsigned long long)+0x76>
c0013923:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013928:	89 d8                	mov    eax,ebx
c001392a:	bf b4 05 00 00       	mov    edi,0x5b4
c001392f:	99                   	cdq    
c0013930:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013935:	f7 f9                	idiv   ecx
c0013937:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001393c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013940:	31 d2                	xor    edx,edx
c0013942:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001394a:	01 c3                	add    ebx,eax
c001394c:	89 d8                	mov    eax,ebx
c001394e:	f7 f1                	div    ecx
c0013950:	31 d2                	xor    edx,edx
c0013952:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013955:	89 d8                	mov    eax,ebx
c0013957:	f7 f7                	div    edi
c0013959:	31 d2                	xor    edx,edx
c001395b:	29 c1                	sub    ecx,eax
c001395d:	89 d8                	mov    eax,ebx
c001395f:	f7 f5                	div    ebp
c0013961:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013966:	29 c1                	sub    ecx,eax
c0013968:	31 d2                	xor    edx,edx
c001396a:	89 c8                	mov    eax,ecx
c001396c:	f7 f5                	div    ebp
c001396e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013973:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013977:	31 d2                	xor    edx,edx
c0013979:	89 c8                	mov    eax,ecx
c001397b:	f7 f5                	div    ebp
c001397d:	31 d2                	xor    edx,edx
c001397f:	01 c3                	add    ebx,eax
c0013981:	89 c8                	mov    eax,ecx
c0013983:	f7 f7                	div    edi
c0013985:	bf 99 00 00 00       	mov    edi,0x99
c001398a:	29 c3                	sub    ebx,eax
c001398c:	31 d2                	xor    edx,edx
c001398e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013996:	29 c3                	sub    ebx,eax
c0013998:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001399b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001399e:	bb 05 00 00 00       	mov    ebx,0x5
c00139a3:	83 c1 02             	add    ecx,0x2
c00139a6:	89 c8                	mov    eax,ecx
c00139a8:	f7 f7                	div    edi
c00139aa:	31 d2                	xor    edx,edx
c00139ac:	89 c7                	mov    edi,eax
c00139ae:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00139b4:	83 c0 02             	add    eax,0x2
c00139b7:	f7 f3                	div    ebx
c00139b9:	89 eb                	mov    ebx,ebp
c00139bb:	29 c3                	sub    ebx,eax
c00139bd:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00139c3:	88 1e                	mov    BYTE PTR [esi],bl
c00139c5:	19 c0                	sbb    eax,eax
c00139c7:	31 d2                	xor    edx,edx
c00139c9:	83 e0 0c             	and    eax,0xc
c00139cc:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00139d0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00139d8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00139dc:	83 f9 01             	cmp    ecx,0x1
c00139df:	0f 96 c2             	setbe  dl
c00139e2:	41                   	inc    ecx
c00139e3:	01 d0                	add    eax,edx
c00139e5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00139e8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00139ec:	83 c4 1c             	add    esp,0x1c
c00139ef:	89 f0                	mov    eax,esi
c00139f1:	5b                   	pop    ebx
c00139f2:	5e                   	pop    esi
c00139f3:	5f                   	pop    edi
c00139f4:	5d                   	pop    ebp
c00139f5:	c2 04 00             	ret    0x4

c00139f8 <Clock::timeInDatetimeLocal()>:
c00139f8:	53                   	push   ebx
c00139f9:	83 ec 14             	sub    esp,0x14
c00139fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a00:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a04:	e8 83 fc ff ff       	call   c001368c <Clock::timeInSecondsLocal()>
c0013a09:	83 c4 0c             	add    esp,0xc
c0013a0c:	52                   	push   edx
c0013a0d:	50                   	push   eax
c0013a0e:	53                   	push   ebx
c0013a0f:	e8 a0 fe ff ff       	call   c00138b4 <secondsToDatetime(unsigned long long)>
c0013a14:	89 d8                	mov    eax,ebx
c0013a16:	83 c4 14             	add    esp,0x14
c0013a19:	5b                   	pop    ebx
c0013a1a:	c2 04 00             	ret    0x4
c0013a1d:	90                   	nop

c0013a1e <Device::hibernate()>:
c0013a1e:	c3                   	ret    
c0013a1f:	90                   	nop

c0013a20 <Device::wake()>:
c0013a20:	c3                   	ret    
c0013a21:	90                   	nop

c0013a22 <Device::detect()>:
c0013a22:	c3                   	ret    
c0013a23:	90                   	nop

c0013a24 <Device::disableLegacy()>:
c0013a24:	c3                   	ret    
c0013a25:	90                   	nop

c0013a26 <Device::powerSaving(PowerSavingLevel)>:
c0013a26:	c3                   	ret    
c0013a27:	90                   	nop

c0013a28 <DriverlessDevice::close(int, int, void*)>:
c0013a28:	31 c0                	xor    eax,eax
c0013a2a:	c3                   	ret    
c0013a2b:	90                   	nop

c0013a2c <DriverlessDevice::detect()>:
c0013a2c:	c3                   	ret    
c0013a2d:	90                   	nop

c0013a2e <DriverlessDevice::open(int, int, void*)>:
c0013a2e:	83 ec 18             	sub    esp,0x18
c0013a31:	68 70 94 02 c0       	push   0xc0029470
c0013a36:	e8 60 5e 00 00       	call   c001989b <Krnl::panic(char const*)>
c0013a3b:	83 c8 ff             	or     eax,0xffffffff
c0013a3e:	83 c4 1c             	add    esp,0x1c
c0013a41:	c3                   	ret    

c0013a42 <Device::~Device()>:
c0013a42:	ba 98 94 02 c0       	mov    edx,0xc0029498
c0013a47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a4b:	89 10                	mov    DWORD PTR [eax],edx
c0013a4d:	90                   	nop
c0013a4e:	c3                   	ret    
c0013a4f:	90                   	nop

c0013a50 <Device::~Device()>:
c0013a50:	83 ec 0c             	sub    esp,0xc
c0013a53:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a57:	e8 e6 ff ff ff       	call   c0013a42 <Device::~Device()>
c0013a5c:	83 c4 04             	add    esp,0x4
c0013a5f:	83 ec 08             	sub    esp,0x8
c0013a62:	68 58 01 00 00       	push   0x158
c0013a67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a6b:	e8 31 ec ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0013a70:	83 c4 10             	add    esp,0x10
c0013a73:	83 c4 0c             	add    esp,0xc
c0013a76:	c3                   	ret    
c0013a77:	90                   	nop

c0013a78 <Device::findAndLoadDriver()>:
c0013a78:	c3                   	ret    
c0013a79:	90                   	nop

c0013a7a <Device::preOpenPCI(PCIDeviceInfo)>:
c0013a7a:	57                   	push   edi
c0013a7b:	b9 09 00 00 00       	mov    ecx,0x9
c0013a80:	56                   	push   esi
c0013a81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013a85:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013a89:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013a93:	81 c7 18 01 00 00    	add    edi,0x118
c0013a99:	fc                   	cld    
c0013a9a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a9c:	5e                   	pop    esi
c0013a9d:	5f                   	pop    edi
c0013a9e:	c3                   	ret    
c0013a9f:	90                   	nop

c0013aa0 <Device::preOpenACPI(void*, char*, char*)>:
c0013aa0:	56                   	push   esi
c0013aa1:	53                   	push   ebx
c0013aa2:	83 ec 08             	sub    esp,0x8
c0013aa5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013aa9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013aad:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013ab7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013abb:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013ac1:	6a 1e                	push   0x1e
c0013ac3:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013ac9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013acd:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013ad3:	50                   	push   eax
c0013ad4:	e8 7c cb fe ff       	call   c0000655 <memcpy>
c0013ad9:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013add:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013ae1:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013ae9:	83 c4 14             	add    esp,0x14
c0013aec:	5b                   	pop    ebx
c0013aed:	5e                   	pop    esi
c0013aee:	e9 62 cb fe ff       	jmp    c0000655 <memcpy>
c0013af3:	90                   	nop

c0013af4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013af8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013afd:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b04:	75 0b                	jne    c0013b11 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013b06:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b0c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013b0f:	eb 1e                	jmp    c0013b2f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013b11:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0013b16:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b1c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b22:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b24:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b2c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013b2f:	ff e0                	jmp    eax
c0013b31:	90                   	nop

c0013b32 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013b32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b36:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b3b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b42:	75 0b                	jne    c0013b4f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013b44:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b46:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b4a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013b4d:	eb 1e                	jmp    c0013b6d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013b4f:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0013b54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b5a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b60:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b62:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b6a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013b6d:	ff e0                	jmp    eax
c0013b6f:	90                   	nop

c0013b70 <Device::addChild(Device*)>:
c0013b70:	53                   	push   ebx
c0013b71:	83 ec 08             	sub    esp,0x8
c0013b74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b7c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013b82:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013b88:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013b8a:	85 d2                	test   edx,edx
c0013b8c:	74 04                	je     c0013b92 <Device::addChild(Device*)+0x22>
c0013b8e:	89 d3                	mov    ebx,edx
c0013b90:	eb f6                	jmp    c0013b88 <Device::addChild(Device*)+0x18>
c0013b92:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013b95:	83 ec 0c             	sub    esp,0xc
c0013b98:	6a 08                	push   0x8
c0013b9a:	e8 35 b9 ff ff       	call   c000f4d4 <malloc>
c0013b9f:	89 03                	mov    DWORD PTR [ebx],eax
c0013ba1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ba7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bae:	83 c4 18             	add    esp,0x18
c0013bb1:	5b                   	pop    ebx
c0013bb2:	c3                   	ret    
c0013bb3:	90                   	nop

c0013bb4 <Device::removeAllChildren()>:
c0013bb4:	56                   	push   esi
c0013bb5:	53                   	push   ebx
c0013bb6:	52                   	push   edx
c0013bb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bbb:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013bc1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bc4:	74 17                	je     c0013bdd <Device::removeAllChildren()+0x29>
c0013bc6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013bc9:	85 c0                	test   eax,eax
c0013bcb:	74 0c                	je     c0013bd9 <Device::removeAllChildren()+0x25>
c0013bcd:	83 ec 0c             	sub    esp,0xc
c0013bd0:	8b 10                	mov    edx,DWORD PTR [eax]
c0013bd2:	50                   	push   eax
c0013bd3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013bd6:	83 c4 10             	add    esp,0x10
c0013bd9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bdb:	eb e4                	jmp    c0013bc1 <Device::removeAllChildren()+0xd>
c0013bdd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013be3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013be9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013bef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bf6:	58                   	pop    eax
c0013bf7:	5b                   	pop    ebx
c0013bf8:	5e                   	pop    esi
c0013bf9:	c3                   	ret    

c0013bfa <Device::hibernateAll()>:
c0013bfa:	53                   	push   ebx
c0013bfb:	83 ec 14             	sub    esp,0x14
c0013bfe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c04:	53                   	push   ebx
c0013c05:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013c08:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c0e:	83 c4 10             	add    esp,0x10
c0013c11:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c14:	74 0f                	je     c0013c25 <Device::hibernateAll()+0x2b>
c0013c16:	83 ec 0c             	sub    esp,0xc
c0013c19:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c1c:	e8 d9 ff ff ff       	call   c0013bfa <Device::hibernateAll()>
c0013c21:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c23:	eb e9                	jmp    c0013c0e <Device::hibernateAll()+0x14>
c0013c25:	83 c4 08             	add    esp,0x8
c0013c28:	5b                   	pop    ebx
c0013c29:	c3                   	ret    

c0013c2a <Device::wakeAll()>:
c0013c2a:	53                   	push   ebx
c0013c2b:	83 ec 14             	sub    esp,0x14
c0013c2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c34:	53                   	push   ebx
c0013c35:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013c38:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c3e:	83 c4 10             	add    esp,0x10
c0013c41:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c44:	74 0f                	je     c0013c55 <Device::wakeAll()+0x2b>
c0013c46:	83 ec 0c             	sub    esp,0xc
c0013c49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c4c:	e8 d9 ff ff ff       	call   c0013c2a <Device::wakeAll()>
c0013c51:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c53:	eb e9                	jmp    c0013c3e <Device::wakeAll()+0x14>
c0013c55:	83 c4 08             	add    esp,0x8
c0013c58:	5b                   	pop    ebx
c0013c59:	c3                   	ret    

c0013c5a <Device::detectAll()>:
c0013c5a:	53                   	push   ebx
c0013c5b:	83 ec 14             	sub    esp,0x14
c0013c5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c64:	53                   	push   ebx
c0013c65:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013c68:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c6e:	83 c4 10             	add    esp,0x10
c0013c71:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c74:	74 0f                	je     c0013c85 <Device::detectAll()+0x2b>
c0013c76:	83 ec 0c             	sub    esp,0xc
c0013c79:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c7c:	e8 d9 ff ff ff       	call   c0013c5a <Device::detectAll()>
c0013c81:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c83:	eb e9                	jmp    c0013c6e <Device::detectAll()+0x14>
c0013c85:	83 c4 08             	add    esp,0x8
c0013c88:	5b                   	pop    ebx
c0013c89:	c3                   	ret    

c0013c8a <Device::disableLegacyAll()>:
c0013c8a:	53                   	push   ebx
c0013c8b:	83 ec 14             	sub    esp,0x14
c0013c8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c94:	53                   	push   ebx
c0013c95:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013c98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c9e:	83 c4 10             	add    esp,0x10
c0013ca1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ca4:	74 0f                	je     c0013cb5 <Device::disableLegacyAll()+0x2b>
c0013ca6:	83 ec 0c             	sub    esp,0xc
c0013ca9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cac:	e8 d9 ff ff ff       	call   c0013c8a <Device::disableLegacyAll()>
c0013cb1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cb3:	eb e9                	jmp    c0013c9e <Device::disableLegacyAll()+0x14>
c0013cb5:	83 c4 08             	add    esp,0x8
c0013cb8:	5b                   	pop    ebx
c0013cb9:	c3                   	ret    

c0013cba <Device::loadDriversForAll()>:
c0013cba:	53                   	push   ebx
c0013cbb:	83 ec 08             	sub    esp,0x8
c0013cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc2:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013cc8:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013cca:	85 db                	test   ebx,ebx
c0013ccc:	74 12                	je     c0013ce0 <Device::loadDriversForAll()+0x26>
c0013cce:	83 ec 0c             	sub    esp,0xc
c0013cd1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013cd4:	e8 e1 ff ff ff       	call   c0013cba <Device::loadDriversForAll()>
c0013cd9:	83 c4 10             	add    esp,0x10
c0013cdc:	89 d8                	mov    eax,ebx
c0013cde:	eb e8                	jmp    c0013cc8 <Device::loadDriversForAll()+0xe>
c0013ce0:	83 c4 08             	add    esp,0x8
c0013ce3:	5b                   	pop    ebx
c0013ce4:	c3                   	ret    
c0013ce5:	90                   	nop

c0013ce6 <Device::closeAll()>:
c0013ce6:	53                   	push   ebx
c0013ce7:	83 ec 08             	sub    esp,0x8
c0013cea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cf0:	6a 00                	push   0x0
c0013cf2:	6a 00                	push   0x0
c0013cf4:	6a 00                	push   0x0
c0013cf6:	53                   	push   ebx
c0013cf7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cfa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d00:	83 c4 10             	add    esp,0x10
c0013d03:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d06:	74 0f                	je     c0013d17 <Device::closeAll()+0x31>
c0013d08:	83 ec 0c             	sub    esp,0xc
c0013d0b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d0e:	e8 d3 ff ff ff       	call   c0013ce6 <Device::closeAll()>
c0013d13:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d15:	eb e9                	jmp    c0013d00 <Device::closeAll()+0x1a>
c0013d17:	83 c4 08             	add    esp,0x8
c0013d1a:	5b                   	pop    ebx
c0013d1b:	c3                   	ret    

c0013d1c <Device::powerSavingAll(PowerSavingLevel)>:
c0013d1c:	56                   	push   esi
c0013d1d:	53                   	push   ebx
c0013d1e:	83 ec 0c             	sub    esp,0xc
c0013d21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d25:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d2b:	56                   	push   esi
c0013d2c:	53                   	push   ebx
c0013d2d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013d30:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d36:	83 c4 10             	add    esp,0x10
c0013d39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d3c:	74 0f                	je     c0013d4d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013d3e:	52                   	push   edx
c0013d3f:	52                   	push   edx
c0013d40:	56                   	push   esi
c0013d41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d44:	e8 d3 ff ff ff       	call   c0013d1c <Device::powerSavingAll(PowerSavingLevel)>
c0013d49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d4b:	eb e9                	jmp    c0013d36 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013d4d:	58                   	pop    eax
c0013d4e:	5b                   	pop    ebx
c0013d4f:	5e                   	pop    esi
c0013d50:	c3                   	ret    
c0013d51:	90                   	nop

c0013d52 <Device::setName(char const*)>:
c0013d52:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013d5a:	e9 cb c9 fe ff       	jmp    c000072a <strcpy>
c0013d5f:	90                   	nop

c0013d60 <Device::Device(char const*)>:
c0013d60:	83 ec 1c             	sub    esp,0x1c
c0013d63:	ba 98 94 02 c0       	mov    edx,0xc0029498
c0013d68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d6c:	89 10                	mov    DWORD PTR [eax],edx
c0013d6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d72:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013d7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d80:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d8e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d9c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013da6:	83 ec 08             	sub    esp,0x8
c0013da9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013dad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013db1:	e8 9c ff ff ff       	call   c0013d52 <Device::setName(char const*)>
c0013db6:	83 c4 10             	add    esp,0x10
c0013db9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013dc1:	83 ec 0c             	sub    esp,0xc
c0013dc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013dc8:	e8 07 b7 ff ff       	call   c000f4d4 <malloc>
c0013dcd:	83 c4 10             	add    esp,0x10
c0013dd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013dd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ddd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013de1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013de7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013deb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013df1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dfb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e0c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e17:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e22:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e30:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013e3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e3e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013e48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e4c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e56:	90                   	nop
c0013e57:	83 c4 1c             	add    esp,0x1c
c0013e5a:	c3                   	ret    
c0013e5b:	90                   	nop

c0013e5c <Device::getName()>:
c0013e5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e60:	05 d0 00 00 00       	add    eax,0xd0
c0013e65:	c3                   	ret    

c0013e66 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013e66:	83 ec 0c             	sub    esp,0xc
c0013e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e6d:	83 ec 08             	sub    esp,0x8
c0013e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e74:	50                   	push   eax
c0013e75:	e8 e6 fe ff ff       	call   c0013d60 <Device::Device(char const*)>
c0013e7a:	83 c4 10             	add    esp,0x10
c0013e7d:	ba c4 94 02 c0       	mov    edx,0xc00294c4
c0013e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e86:	89 10                	mov    DWORD PTR [eax],edx
c0013e88:	90                   	nop
c0013e89:	83 c4 0c             	add    esp,0xc
c0013e8c:	c3                   	ret    
c0013e8d:	90                   	nop

c0013e8e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013e8e:	57                   	push   edi
c0013e8f:	56                   	push   esi
c0013e90:	53                   	push   ebx
c0013e91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e95:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e9d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013ea3:	75 0c                	jne    c0013eb1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013ea5:	52                   	push   edx
c0013ea6:	52                   	push   edx
c0013ea7:	53                   	push   ebx
c0013ea8:	56                   	push   esi
c0013ea9:	e8 3c 34 01 00       	call   c00272ea <LinkedList<Device>::addElement(Device*)>
c0013eae:	83 c4 10             	add    esp,0x10
c0013eb1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013eb7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013eba:	74 12                	je     c0013ece <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013ebc:	50                   	push   eax
c0013ebd:	57                   	push   edi
c0013ebe:	56                   	push   esi
c0013ebf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ec2:	e8 c7 ff ff ff       	call   c0013e8e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ec7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ec9:	83 c4 10             	add    esp,0x10
c0013ecc:	eb e9                	jmp    c0013eb7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013ece:	5b                   	pop    ebx
c0013ecf:	5e                   	pop    esi
c0013ed0:	5f                   	pop    edi
c0013ed1:	c3                   	ret    

c0013ed2 <getDevicesOfType(DeviceType)>:
c0013ed2:	53                   	push   ebx
c0013ed3:	83 ec 14             	sub    esp,0x14
c0013ed6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013eda:	53                   	push   ebx
c0013edb:	e8 e6 34 01 00       	call   c00273c6 <LinkedList<Device>::LinkedList()>
c0013ee0:	83 c4 0c             	add    esp,0xc
c0013ee3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ee7:	53                   	push   ebx
c0013ee8:	ff 35 48 c9 02 c0    	push   DWORD PTR ds:0xc002c948
c0013eee:	e8 9b ff ff ff       	call   c0013e8e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ef3:	89 d8                	mov    eax,ebx
c0013ef5:	83 c4 18             	add    esp,0x18
c0013ef8:	5b                   	pop    ebx
c0013ef9:	c2 04 00             	ret    0x4

c0013efc <HardDiskController::HardDiskController(char const*)>:
c0013efc:	83 ec 0c             	sub    esp,0xc
c0013eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f03:	83 ec 08             	sub    esp,0x8
c0013f06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f0a:	50                   	push   eax
c0013f0b:	e8 50 fe ff ff       	call   c0013d60 <Device::Device(char const*)>
c0013f10:	83 c4 10             	add    esp,0x10
c0013f13:	ba f0 94 02 c0       	mov    edx,0xc00294f0
c0013f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f1c:	89 10                	mov    DWORD PTR [eax],edx
c0013f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f22:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013f2c:	90                   	nop
c0013f2d:	83 c4 0c             	add    esp,0xc
c0013f30:	c3                   	ret    
c0013f31:	90                   	nop

c0013f32 <HardDiskController::~HardDiskController()>:
c0013f32:	83 ec 0c             	sub    esp,0xc
c0013f35:	ba f0 94 02 c0       	mov    edx,0xc00294f0
c0013f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f3e:	89 10                	mov    DWORD PTR [eax],edx
c0013f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f44:	83 ec 0c             	sub    esp,0xc
c0013f47:	50                   	push   eax
c0013f48:	e8 f5 fa ff ff       	call   c0013a42 <Device::~Device()>
c0013f4d:	83 c4 10             	add    esp,0x10
c0013f50:	90                   	nop
c0013f51:	83 c4 0c             	add    esp,0xc
c0013f54:	c3                   	ret    
c0013f55:	90                   	nop

c0013f56 <HardDiskController::~HardDiskController()>:
c0013f56:	83 ec 0c             	sub    esp,0xc
c0013f59:	83 ec 0c             	sub    esp,0xc
c0013f5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f60:	e8 cd ff ff ff       	call   c0013f32 <HardDiskController::~HardDiskController()>
c0013f65:	83 c4 10             	add    esp,0x10
c0013f68:	83 ec 08             	sub    esp,0x8
c0013f6b:	68 58 01 00 00       	push   0x158
c0013f70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f74:	e8 28 e7 ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0013f79:	83 c4 10             	add    esp,0x10
c0013f7c:	83 c4 0c             	add    esp,0xc
c0013f7f:	c3                   	ret    

c0013f80 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013f80:	83 ec 0c             	sub    esp,0xc
c0013f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f87:	83 ec 08             	sub    esp,0x8
c0013f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f8e:	50                   	push   eax
c0013f8f:	e8 cc fd ff ff       	call   c0013d60 <Device::Device(char const*)>
c0013f94:	83 c4 10             	add    esp,0x10
c0013f97:	ba 1c 95 02 c0       	mov    edx,0xc002951c
c0013f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa0:	89 10                	mov    DWORD PTR [eax],edx
c0013fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb1:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fbc:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013fce:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013fe2:	90                   	nop
c0013fe3:	83 c4 0c             	add    esp,0xc
c0013fe6:	c3                   	ret    
c0013fe7:	90                   	nop

c0013fe8 <PhysicalDisk::startCache()>:
c0013fe8:	56                   	push   esi
c0013fe9:	53                   	push   ebx
c0013fea:	83 ec 10             	sub    esp,0x10
c0013fed:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ff1:	6a 30                	push   0x30
c0013ff3:	e8 dc b4 ff ff       	call   c000f4d4 <malloc>
c0013ff8:	89 c6                	mov    esi,eax
c0013ffa:	58                   	pop    eax
c0013ffb:	5a                   	pop    edx
c0013ffc:	53                   	push   ebx
c0013ffd:	56                   	push   esi
c0013ffe:	e8 dd 25 00 00       	call   c00165e0 <VCache::VCache(PhysicalDisk*)>
c0014003:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014009:	83 c4 14             	add    esp,0x14
c001400c:	5b                   	pop    ebx
c001400d:	5e                   	pop    esi
c001400e:	c3                   	ret    
c001400f:	90                   	nop

c0014010 <PhysicalDisk::~PhysicalDisk()>:
c0014010:	83 ec 0c             	sub    esp,0xc
c0014013:	ba 1c 95 02 c0       	mov    edx,0xc002951c
c0014018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001401c:	89 10                	mov    DWORD PTR [eax],edx
c001401e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014022:	83 ec 0c             	sub    esp,0xc
c0014025:	50                   	push   eax
c0014026:	e8 17 fa ff ff       	call   c0013a42 <Device::~Device()>
c001402b:	83 c4 10             	add    esp,0x10
c001402e:	90                   	nop
c001402f:	83 c4 0c             	add    esp,0xc
c0014032:	c3                   	ret    
c0014033:	90                   	nop

c0014034 <PhysicalDisk::~PhysicalDisk()>:
c0014034:	83 ec 0c             	sub    esp,0xc
c0014037:	83 ec 0c             	sub    esp,0xc
c001403a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001403e:	e8 cd ff ff ff       	call   c0014010 <PhysicalDisk::~PhysicalDisk()>
c0014043:	83 c4 10             	add    esp,0x10
c0014046:	83 ec 08             	sub    esp,0x8
c0014049:	68 6c 01 00 00       	push   0x16c
c001404e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014052:	e8 4a e6 ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0014057:	83 c4 10             	add    esp,0x10
c001405a:	83 c4 0c             	add    esp,0xc
c001405d:	c3                   	ret    

c001405e <FPU::FPU(char const*)>:
c001405e:	83 ec 0c             	sub    esp,0xc
c0014061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014065:	83 ec 08             	sub    esp,0x8
c0014068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001406c:	50                   	push   eax
c001406d:	e8 ee fc ff ff       	call   c0013d60 <Device::Device(char const*)>
c0014072:	83 c4 10             	add    esp,0x10
c0014075:	ba 5c 95 02 c0       	mov    edx,0xc002955c
c001407a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001407e:	89 10                	mov    DWORD PTR [eax],edx
c0014080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014084:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001408e:	90                   	nop
c001408f:	83 c4 0c             	add    esp,0xc
c0014092:	c3                   	ret    
c0014093:	90                   	nop

c0014094 <FPU::~FPU()>:
c0014094:	83 ec 0c             	sub    esp,0xc
c0014097:	ba 5c 95 02 c0       	mov    edx,0xc002955c
c001409c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140a0:	89 10                	mov    DWORD PTR [eax],edx
c00140a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140a6:	83 ec 0c             	sub    esp,0xc
c00140a9:	50                   	push   eax
c00140aa:	e8 93 f9 ff ff       	call   c0013a42 <Device::~Device()>
c00140af:	83 c4 10             	add    esp,0x10
c00140b2:	90                   	nop
c00140b3:	83 c4 0c             	add    esp,0xc
c00140b6:	c3                   	ret    
c00140b7:	90                   	nop

c00140b8 <FPU::~FPU()>:
c00140b8:	83 ec 0c             	sub    esp,0xc
c00140bb:	83 ec 0c             	sub    esp,0xc
c00140be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140c2:	e8 cd ff ff ff       	call   c0014094 <FPU::~FPU()>
c00140c7:	83 c4 10             	add    esp,0x10
c00140ca:	83 ec 08             	sub    esp,0x8
c00140cd:	68 58 01 00 00       	push   0x158
c00140d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140d6:	e8 c6 e5 ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c00140db:	83 c4 10             	add    esp,0x10
c00140de:	83 c4 0c             	add    esp,0xc
c00140e1:	c3                   	ret    

c00140e2 <setupFPU()>:
c00140e2:	53                   	push   ebx
c00140e3:	83 ec 08             	sub    esp,0x8
c00140e6:	8b 15 48 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c948
c00140ec:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00140f3:	74 19                	je     c001410e <setupFPU()+0x2c>
c00140f5:	83 ec 0c             	sub    esp,0xc
c00140f8:	68 58 01 00 00       	push   0x158
c00140fd:	e8 d2 b3 ff ff       	call   c000f4d4 <malloc>
c0014102:	89 c3                	mov    ebx,eax
c0014104:	89 04 24             	mov    DWORD PTR [esp],eax
c0014107:	e8 30 fe 00 00       	call   c0023f3c <AVX::AVX()>
c001410c:	eb 5b                	jmp    c0014169 <setupFPU()+0x87>
c001410e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014114:	84 c0                	test   al,al
c0014116:	79 19                	jns    c0014131 <setupFPU()+0x4f>
c0014118:	83 ec 0c             	sub    esp,0xc
c001411b:	68 58 01 00 00       	push   0x158
c0014120:	e8 af b3 ff ff       	call   c000f4d4 <malloc>
c0014125:	89 c3                	mov    ebx,eax
c0014127:	89 04 24             	mov    DWORD PTR [esp],eax
c001412a:	e8 33 ff 00 00       	call   c0024062 <SSE::SSE()>
c001412f:	eb 38                	jmp    c0014169 <setupFPU()+0x87>
c0014131:	a8 20                	test   al,0x20
c0014133:	74 19                	je     c001414e <setupFPU()+0x6c>
c0014135:	83 ec 0c             	sub    esp,0xc
c0014138:	68 58 01 00 00       	push   0x158
c001413d:	e8 92 b3 ff ff       	call   c000f4d4 <malloc>
c0014142:	89 c3                	mov    ebx,eax
c0014144:	89 04 24             	mov    DWORD PTR [esp],eax
c0014147:	e8 80 fe 00 00       	call   c0023fcc <MMX::MMX()>
c001414c:	eb 1b                	jmp    c0014169 <setupFPU()+0x87>
c001414e:	a8 10                	test   al,0x10
c0014150:	74 1c                	je     c001416e <setupFPU()+0x8c>
c0014152:	83 ec 0c             	sub    esp,0xc
c0014155:	68 58 01 00 00       	push   0x158
c001415a:	e8 75 b3 ff ff       	call   c000f4d4 <malloc>
c001415f:	89 c3                	mov    ebx,eax
c0014161:	89 04 24             	mov    DWORD PTR [esp],eax
c0014164:	e8 87 ff 00 00       	call   c00240f0 <x87::x87()>
c0014169:	83 c4 10             	add    esp,0x10
c001416c:	eb 24                	jmp    c0014192 <setupFPU()+0xb0>
c001416e:	83 e0 ef             	and    eax,0xffffffef
c0014171:	83 ec 0c             	sub    esp,0xc
c0014174:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001417a:	68 48 95 02 c0       	push   0xc0029548
c001417f:	e8 fd e5 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0014184:	0f 20 c0             	mov    eax,cr0
c0014187:	83 c8 04             	or     eax,0x4
c001418a:	0f 22 c0             	mov    cr0,eax
c001418d:	31 db                	xor    ebx,ebx
c001418f:	83 c4 10             	add    esp,0x10
c0014192:	89 d8                	mov    eax,ebx
c0014194:	83 c4 08             	add    esp,0x8
c0014197:	5b                   	pop    ebx
c0014198:	c3                   	ret    
c0014199:	90                   	nop

c001419a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001419a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001419e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00141a2:	c1 e0 04             	shl    eax,0x4
c00141a5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00141a9:	8d 50 10             	lea    edx,[eax+0x10]
c00141ac:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00141b2:	74 08                	je     c00141bc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00141b4:	83 c0 04             	add    eax,0x4
c00141b7:	39 d0                	cmp    eax,edx
c00141b9:	75 f1                	jne    c00141ac <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00141bb:	c3                   	ret    
c00141bc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141c6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00141d0:	eb e2                	jmp    c00141b4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00141d2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00141d2:	57                   	push   edi
c00141d3:	31 c0                	xor    eax,eax
c00141d5:	56                   	push   esi
c00141d6:	53                   	push   ebx
c00141d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00141db:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141df:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141e3:	89 da                	mov    edx,ebx
c00141e5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00141e9:	c1 e2 04             	shl    edx,0x4
c00141ec:	01 ca                	add    edx,ecx
c00141ee:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00141f6:	74 16                	je     c001420e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00141f8:	40                   	inc    eax
c00141f9:	83 f8 04             	cmp    eax,0x4
c00141fc:	75 f0                	jne    c00141ee <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00141fe:	c7 44 24 10 8c 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc002958c
c0014206:	5b                   	pop    ebx
c0014207:	5e                   	pop    esi
c0014208:	5f                   	pop    edi
c0014209:	e9 8d 56 00 00       	jmp    c001989b <Krnl::panic(char const*)>
c001420e:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014211:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014214:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001421a:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014220:	5b                   	pop    ebx
c0014221:	5e                   	pop    esi
c0014222:	5f                   	pop    edi
c0014223:	c3                   	ret    

c0014224 <doubleFault(regs*, void*)>:
c0014224:	55                   	push   ebp
c0014225:	89 e5                	mov    ebp,esp
c0014227:	83 ec 08             	sub    esp,0x8
c001422a:	83 ec 0c             	sub    esp,0xc
c001422d:	68 c7 95 02 c0       	push   0xc00295c7
c0014232:	e8 64 56 00 00       	call   c001989b <Krnl::panic(char const*)>
c0014237:	83 c4 10             	add    esp,0x10
c001423a:	90                   	nop
c001423b:	c9                   	leave  
c001423c:	c3                   	ret    
c001423d:	90                   	nop

c001423e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001423e:	56                   	push   esi
c001423f:	53                   	push   ebx
c0014240:	50                   	push   eax
c0014241:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014245:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014249:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001424e:	75 35                	jne    c0014285 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014250:	8d 43 20             	lea    eax,[ebx+0x20]
c0014253:	31 d2                	xor    edx,edx
c0014255:	89 c1                	mov    ecx,eax
c0014257:	c1 e1 04             	shl    ecx,0x4
c001425a:	01 f1                	add    ecx,esi
c001425c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014264:	74 3e                	je     c00142a4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014266:	42                   	inc    edx
c0014267:	83 fa 04             	cmp    edx,0x4
c001426a:	75 f0                	jne    c001425c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001426c:	83 ec 0c             	sub    esp,0xc
c001426f:	68 0c 96 02 c0       	push   0xc002960c
c0014274:	e8 22 56 00 00       	call   c001989b <Krnl::panic(char const*)>
c0014279:	83 c4 10             	add    esp,0x10
c001427c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014281:	5a                   	pop    edx
c0014282:	5b                   	pop    ebx
c0014283:	5e                   	pop    esi
c0014284:	c3                   	ret    
c0014285:	83 ec 0c             	sub    esp,0xc
c0014288:	56                   	push   esi
c0014289:	e8 ce fb ff ff       	call   c0013e5c <Device::getName()>
c001428e:	83 c4 10             	add    esp,0x10
c0014291:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014294:	75 ba                	jne    c0014250 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014296:	83 fb 0f             	cmp    ebx,0xf
c0014299:	7f 29                	jg     c00142c4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001429b:	0f b6 9b a0 bb 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd4460]
c00142a2:	eb ac                	jmp    c0014250 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142a4:	8d 04 82             	lea    eax,[edx+eax*4]
c00142a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142ab:	8d 04 86             	lea    eax,[esi+eax*4]
c00142ae:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00142b4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142b8:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00142be:	89 d8                	mov    eax,ebx
c00142c0:	5a                   	pop    edx
c00142c1:	5b                   	pop    ebx
c00142c2:	5e                   	pop    esi
c00142c3:	c3                   	ret    
c00142c4:	83 ec 0c             	sub    esp,0xc
c00142c7:	68 d4 95 02 c0       	push   0xc00295d4
c00142cc:	e8 ca 55 00 00       	call   c001989b <Krnl::panic(char const*)>
c00142d1:	83 c4 10             	add    esp,0x10
c00142d4:	e9 77 ff ff ff       	jmp    c0014250 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142d9:	90                   	nop

c00142da <InterruptController::clearAllHandlers(int, bool)>:
c00142da:	56                   	push   esi
c00142db:	53                   	push   ebx
c00142dc:	52                   	push   edx
c00142dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00142e5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00142ea:	75 61                	jne    c001434d <InterruptController::clearAllHandlers(int, bool)+0x73>
c00142ec:	8d 46 20             	lea    eax,[esi+0x20]
c00142ef:	c1 e6 04             	shl    esi,0x4
c00142f2:	c1 e0 04             	shl    eax,0x4
c00142f5:	01 de                	add    esi,ebx
c00142f7:	01 d8                	add    eax,ebx
c00142f9:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014303:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001430d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014317:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014321:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001432b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014335:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001433f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014349:	58                   	pop    eax
c001434a:	5b                   	pop    ebx
c001434b:	5e                   	pop    esi
c001434c:	c3                   	ret    
c001434d:	83 ec 0c             	sub    esp,0xc
c0014350:	53                   	push   ebx
c0014351:	e8 06 fb ff ff       	call   c0013e5c <Device::getName()>
c0014356:	83 c4 10             	add    esp,0x10
c0014359:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001435c:	75 8e                	jne    c00142ec <InterruptController::clearAllHandlers(int, bool)+0x12>
c001435e:	83 fe 0f             	cmp    esi,0xf
c0014361:	7f 09                	jg     c001436c <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014363:	0f b6 b6 a0 bb 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd4460]
c001436a:	eb 80                	jmp    c00142ec <InterruptController::clearAllHandlers(int, bool)+0x12>
c001436c:	83 ec 0c             	sub    esp,0xc
c001436f:	68 48 96 02 c0       	push   0xc0029648
c0014374:	e8 22 55 00 00       	call   c001989b <Krnl::panic(char const*)>
c0014379:	83 c4 10             	add    esp,0x10
c001437c:	e9 6b ff ff ff       	jmp    c00142ec <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014381:	90                   	nop

c0014382 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014382:	56                   	push   esi
c0014383:	53                   	push   ebx
c0014384:	52                   	push   edx
c0014385:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014389:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001438d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014392:	75 3a                	jne    c00143ce <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014394:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014398:	8d 50 20             	lea    edx,[eax+0x20]
c001439b:	c1 e2 04             	shl    edx,0x4
c001439e:	8d 04 16             	lea    eax,[esi+edx*1]
c00143a1:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00143a5:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00143ab:	74 0b                	je     c00143b8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00143ad:	83 c0 04             	add    eax,0x4
c00143b0:	39 d0                	cmp    eax,edx
c00143b2:	75 f1                	jne    c00143a5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00143b4:	58                   	pop    eax
c00143b5:	5b                   	pop    ebx
c00143b6:	5e                   	pop    esi
c00143b7:	c3                   	ret    
c00143b8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143c2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00143cc:	eb df                	jmp    c00143ad <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00143ce:	83 ec 0c             	sub    esp,0xc
c00143d1:	56                   	push   esi
c00143d2:	e8 85 fa ff ff       	call   c0013e5c <Device::getName()>
c00143d7:	83 c4 10             	add    esp,0x10
c00143da:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143dd:	75 b5                	jne    c0014394 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143df:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00143e4:	7f 11                	jg     c00143f7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00143e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143ea:	0f b6 80 a0 bb 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd4460]
c00143f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143f5:	eb 9d                	jmp    c0014394 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143f7:	83 ec 0c             	sub    esp,0xc
c00143fa:	68 48 96 02 c0       	push   0xc0029648
c00143ff:	e8 97 54 00 00       	call   c001989b <Krnl::panic(char const*)>
c0014404:	83 c4 10             	add    esp,0x10
c0014407:	eb 8b                	jmp    c0014394 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014409 <nmiHandler(regs*, void*)>:
c0014409:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001440e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014412:	e9 09 a8 ff ff       	jmp    c000ec20 <Computer::handleNMI()>

c0014417 <int_handler>:
c0014417:	55                   	push   ebp
c0014418:	57                   	push   edi
c0014419:	56                   	push   esi
c001441a:	53                   	push   ebx
c001441b:	83 ec 0c             	sub    esp,0xc
c001441e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014422:	80 3d 80 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d480,0x0
c0014429:	74 0b                	je     c0014436 <int_handler+0x1f>
c001442b:	fa                   	cli    
c001442c:	f4                   	hlt    
c001442d:	80 3d 80 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d480,0x0
c0014434:	75 f5                	jne    c001442b <int_handler+0x14>
c0014436:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001443b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001443e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014444:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001444a:	8d 43 e0             	lea    eax,[ebx-0x20]
c001444d:	83 f8 17             	cmp    eax,0x17
c0014450:	77 13                	ja     c0014465 <int_handler+0x4e>
c0014452:	83 ec 08             	sub    esp,0x8
c0014455:	8b 17                	mov    edx,DWORD PTR [edi]
c0014457:	8d 43 e0             	lea    eax,[ebx-0x20]
c001445a:	0f b6 c0             	movzx  eax,al
c001445d:	50                   	push   eax
c001445e:	57                   	push   edi
c001445f:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014462:	83 c4 10             	add    esp,0x10
c0014465:	83 c3 15             	add    ebx,0x15
c0014468:	c1 e3 04             	shl    ebx,0x4
c001446b:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001446f:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014476:	31 db                	xor    ebx,ebx
c0014478:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001447c:	85 c0                	test   eax,eax
c001447e:	74 13                	je     c0014493 <int_handler+0x7c>
c0014480:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014483:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014487:	74 1c                	je     c00144a5 <int_handler+0x8e>
c0014489:	83 ec 08             	sub    esp,0x8
c001448c:	52                   	push   edx
c001448d:	56                   	push   esi
c001448e:	ff d0                	call   eax
c0014490:	83 c4 10             	add    esp,0x10
c0014493:	43                   	inc    ebx
c0014494:	83 fb 04             	cmp    ebx,0x4
c0014497:	75 df                	jne    c0014478 <int_handler+0x61>
c0014499:	83 c4 0c             	add    esp,0xc
c001449c:	31 c0                	xor    eax,eax
c001449e:	5b                   	pop    ebx
c001449f:	31 d2                	xor    edx,edx
c00144a1:	5e                   	pop    esi
c00144a2:	5f                   	pop    edi
c00144a3:	5d                   	pop    ebp
c00144a4:	c3                   	ret    
c00144a5:	83 ec 08             	sub    esp,0x8
c00144a8:	52                   	push   edx
c00144a9:	56                   	push   esi
c00144aa:	ff d0                	call   eax
c00144ac:	83 c4 10             	add    esp,0x10
c00144af:	83 c4 0c             	add    esp,0xc
c00144b2:	5b                   	pop    ebx
c00144b3:	5e                   	pop    esi
c00144b4:	5f                   	pop    edi
c00144b5:	5d                   	pop    ebp
c00144b6:	c3                   	ret    
c00144b7:	90                   	nop

c00144b8 <InterruptController::InterruptController(char const*)>:
c00144b8:	83 ec 1c             	sub    esp,0x1c
c00144bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144bf:	83 ec 08             	sub    esp,0x8
c00144c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144c6:	50                   	push   eax
c00144c7:	e8 94 f8 ff ff       	call   c0013d60 <Device::Device(char const*)>
c00144cc:	83 c4 10             	add    esp,0x10
c00144cf:	ba 7c 98 02 c0       	mov    edx,0xc002987c
c00144d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d8:	89 10                	mov    DWORD PTR [eax],edx
c00144da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144de:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00144e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00144f0:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00144f8:	7f 5e                	jg     c0014558 <InterruptController::InterruptController(char const*)+0xa0>
c00144fa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014502:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014507:	7f 49                	jg     c0014552 <InterruptController::InterruptController(char const*)+0x9a>
c0014509:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001450d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014511:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014518:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001451c:	01 ca                	add    edx,ecx
c001451e:	83 c2 54             	add    edx,0x54
c0014521:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014529:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001452d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014531:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014538:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001453c:	01 ca                	add    edx,ecx
c001453e:	81 c2 54 04 00 00    	add    edx,0x454
c0014544:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001454c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014550:	eb b0                	jmp    c0014502 <InterruptController::InterruptController(char const*)+0x4a>
c0014552:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014556:	eb 98                	jmp    c00144f0 <InterruptController::InterruptController(char const*)+0x38>
c0014558:	90                   	nop
c0014559:	83 c4 1c             	add    esp,0x1c
c001455c:	c3                   	ret    
c001455d:	90                   	nop

c001455e <InterruptController::~InterruptController()>:
c001455e:	83 ec 0c             	sub    esp,0xc
c0014561:	ba 7c 98 02 c0       	mov    edx,0xc002987c
c0014566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001456a:	89 10                	mov    DWORD PTR [eax],edx
c001456c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014570:	83 ec 0c             	sub    esp,0xc
c0014573:	50                   	push   eax
c0014574:	e8 c9 f4 ff ff       	call   c0013a42 <Device::~Device()>
c0014579:	83 c4 10             	add    esp,0x10
c001457c:	90                   	nop
c001457d:	83 c4 0c             	add    esp,0xc
c0014580:	c3                   	ret    
c0014581:	90                   	nop

c0014582 <InterruptController::~InterruptController()>:
c0014582:	83 ec 0c             	sub    esp,0xc
c0014585:	83 ec 0c             	sub    esp,0xc
c0014588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001458c:	e8 cd ff ff ff       	call   c001455e <InterruptController::~InterruptController()>
c0014591:	83 c4 10             	add    esp,0x10
c0014594:	83 ec 08             	sub    esp,0x8
c0014597:	68 58 21 00 00       	push   0x2158
c001459c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145a0:	e8 fc e0 ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c00145a5:	83 c4 10             	add    esp,0x10
c00145a8:	83 c4 0c             	add    esp,0xc
c00145ab:	c3                   	ret    

c00145ac <displayDebugInfo(regs*)>:
c00145ac:	55                   	push   ebp
c00145ad:	57                   	push   edi
c00145ae:	56                   	push   esi
c00145af:	53                   	push   ebx
c00145b0:	83 ec 24             	sub    esp,0x24
c00145b3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00145b7:	0f 20 c2             	mov    edx,cr0
c00145ba:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00145be:	0f 20 d7             	mov    edi,cr2
c00145c1:	0f 20 de             	mov    esi,cr3
c00145c4:	0f 20 e5             	mov    ebp,cr4
c00145c7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00145ca:	68 82 96 02 c0       	push   0xc0029682
c00145cf:	e8 ad e1 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00145d4:	58                   	pop    eax
c00145d5:	5a                   	pop    edx
c00145d6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00145d9:	68 8d 96 02 c0       	push   0xc002968d
c00145de:	e8 9e e1 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00145e3:	59                   	pop    ecx
c00145e4:	58                   	pop    eax
c00145e5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00145e8:	68 98 96 02 c0       	push   0xc0029698
c00145ed:	e8 8f e1 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00145f2:	58                   	pop    eax
c00145f3:	5a                   	pop    edx
c00145f4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00145f7:	68 a3 96 02 c0       	push   0xc00296a3
c00145fc:	e8 80 e1 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0014601:	59                   	pop    ecx
c0014602:	58                   	pop    eax
c0014603:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014606:	68 ae 96 02 c0       	push   0xc00296ae
c001460b:	e8 71 e1 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0014610:	58                   	pop    eax
c0014611:	5a                   	pop    edx
c0014612:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014615:	68 b9 96 02 c0       	push   0xc00296b9
c001461a:	e8 62 e1 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001461f:	59                   	pop    ecx
c0014620:	58                   	pop    eax
c0014621:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014624:	68 c4 96 02 c0       	push   0xc00296c4
c0014629:	e8 53 e1 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001462e:	58                   	pop    eax
c001462f:	5a                   	pop    edx
c0014630:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014633:	68 cf 96 02 c0       	push   0xc00296cf
c0014638:	e8 44 e1 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001463d:	59                   	pop    ecx
c001463e:	58                   	pop    eax
c001463f:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014642:	68 da 96 02 c0       	push   0xc00296da
c0014647:	e8 35 e1 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001464c:	58                   	pop    eax
c001464d:	5a                   	pop    edx
c001464e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014651:	68 e9 96 02 c0       	push   0xc00296e9
c0014656:	e8 26 e1 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001465b:	59                   	pop    ecx
c001465c:	58                   	pop    eax
c001465d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014660:	68 f4 96 02 c0       	push   0xc00296f4
c0014665:	e8 17 e1 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001466a:	58                   	pop    eax
c001466b:	5a                   	pop    edx
c001466c:	57                   	push   edi
c001466d:	68 ff 96 02 c0       	push   0xc00296ff
c0014672:	e8 0a e1 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0014677:	59                   	pop    ecx
c0014678:	58                   	pop    eax
c0014679:	56                   	push   esi
c001467a:	68 0a 97 02 c0       	push   0xc002970a
c001467f:	e8 fd e0 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0014684:	58                   	pop    eax
c0014685:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001468a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014690:	e8 84 c2 ff ff       	call   c0010919 <setActiveTerminal(VgaText*)>
c0014695:	58                   	pop    eax
c0014696:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014699:	5a                   	pop    edx
c001469a:	c1 e0 05             	shl    eax,0x5
c001469d:	05 00 b9 02 c0       	add    eax,0xc002b900
c00146a2:	50                   	push   eax
c00146a3:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00146a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ae:	e8 85 c6 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c00146b3:	59                   	pop    ecx
c00146b4:	58                   	pop    eax
c00146b5:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00146ba:	68 15 97 02 c0       	push   0xc0029715
c00146bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146c5:	e8 6e c6 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c00146ca:	58                   	pop    eax
c00146cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146d0:	5a                   	pop    edx
c00146d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00146d4:	83 c0 0c             	add    eax,0xc
c00146d7:	50                   	push   eax
c00146d8:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00146dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e3:	e8 50 c6 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c00146e8:	59                   	pop    ecx
c00146e9:	58                   	pop    eax
c00146ea:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00146ef:	68 1e 97 02 c0       	push   0xc002971e
c00146f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146fa:	e8 39 c6 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c00146ff:	58                   	pop    eax
c0014700:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014705:	5a                   	pop    edx
c0014706:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014709:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470f:	e8 4a c6 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c0014714:	59                   	pop    ecx
c0014715:	58                   	pop    eax
c0014716:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001471b:	68 26 97 02 c0       	push   0xc0029726
c0014720:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014726:	e8 0d c6 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c001472b:	58                   	pop    eax
c001472c:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014731:	5a                   	pop    edx
c0014732:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014735:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001473b:	e8 1e c6 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c0014740:	59                   	pop    ecx
c0014741:	58                   	pop    eax
c0014742:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014747:	68 2e 97 02 c0       	push   0xc002972e
c001474c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014752:	e8 e1 c5 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0014757:	58                   	pop    eax
c0014758:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001475d:	5a                   	pop    edx
c001475e:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014761:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014767:	e8 f2 c5 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c001476c:	59                   	pop    ecx
c001476d:	58                   	pop    eax
c001476e:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014773:	68 36 97 02 c0       	push   0xc0029736
c0014778:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001477e:	e8 b5 c5 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0014783:	58                   	pop    eax
c0014784:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014789:	5a                   	pop    edx
c001478a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001478d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014793:	e8 c6 c5 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c0014798:	59                   	pop    ecx
c0014799:	58                   	pop    eax
c001479a:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001479f:	68 3e 97 02 c0       	push   0xc002973e
c00147a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147aa:	e8 89 c5 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c00147af:	58                   	pop    eax
c00147b0:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00147b5:	5a                   	pop    edx
c00147b6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00147b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147bf:	e8 9a c5 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c00147c4:	59                   	pop    ecx
c00147c5:	58                   	pop    eax
c00147c6:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00147cb:	68 46 97 02 c0       	push   0xc0029746
c00147d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d6:	e8 5d c5 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c00147db:	58                   	pop    eax
c00147dc:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00147e1:	5a                   	pop    edx
c00147e2:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00147e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147eb:	e8 6e c5 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c00147f0:	59                   	pop    ecx
c00147f1:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00147f6:	5b                   	pop    ebx
c00147f7:	68 4e 97 02 c0       	push   0xc002974e
c00147fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014802:	e8 31 c5 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0014807:	58                   	pop    eax
c0014808:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001480d:	5a                   	pop    edx
c001480e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014812:	52                   	push   edx
c0014813:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014819:	e8 40 c5 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c001481e:	59                   	pop    ecx
c001481f:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014824:	5b                   	pop    ebx
c0014825:	68 57 97 02 c0       	push   0xc0029757
c001482a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014830:	e8 03 c5 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0014835:	58                   	pop    eax
c0014836:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001483b:	5a                   	pop    edx
c001483c:	57                   	push   edi
c001483d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014843:	e8 16 c5 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c0014848:	59                   	pop    ecx
c0014849:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001484e:	5b                   	pop    ebx
c001484f:	68 5f 97 02 c0       	push   0xc002975f
c0014854:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001485a:	e8 d9 c4 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c001485f:	5f                   	pop    edi
c0014860:	58                   	pop    eax
c0014861:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014866:	56                   	push   esi
c0014867:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486d:	e8 ec c4 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c0014872:	58                   	pop    eax
c0014873:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014878:	5a                   	pop    edx
c0014879:	68 67 97 02 c0       	push   0xc0029767
c001487e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014884:	e8 af c4 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0014889:	59                   	pop    ecx
c001488a:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001488f:	5b                   	pop    ebx
c0014890:	55                   	push   ebp
c0014891:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014897:	e8 c2 c4 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c001489c:	5e                   	pop    esi
c001489d:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00148a2:	5f                   	pop    edi
c00148a3:	68 6f 97 02 c0       	push   0xc002976f
c00148a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ae:	e8 85 c4 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c00148b3:	0f 21 c0             	mov    eax,db0
c00148b6:	5d                   	pop    ebp
c00148b7:	5a                   	pop    edx
c00148b8:	50                   	push   eax
c00148b9:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00148be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c4:	e8 95 c4 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c00148c9:	59                   	pop    ecx
c00148ca:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00148cf:	5b                   	pop    ebx
c00148d0:	68 78 97 02 c0       	push   0xc0029778
c00148d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148db:	e8 58 c4 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c00148e0:	0f 21 c8             	mov    eax,db1
c00148e3:	5e                   	pop    esi
c00148e4:	5f                   	pop    edi
c00148e5:	50                   	push   eax
c00148e6:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00148eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f1:	e8 68 c4 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c00148f6:	5d                   	pop    ebp
c00148f7:	58                   	pop    eax
c00148f8:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00148fd:	68 80 97 02 c0       	push   0xc0029780
c0014902:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014908:	e8 2b c4 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c001490d:	0f 21 d0             	mov    eax,db2
c0014910:	5a                   	pop    edx
c0014911:	59                   	pop    ecx
c0014912:	50                   	push   eax
c0014913:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014918:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491e:	e8 3b c4 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c0014923:	5b                   	pop    ebx
c0014924:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014929:	5e                   	pop    esi
c001492a:	68 88 97 02 c0       	push   0xc0029788
c001492f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014935:	e8 fe c3 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c001493a:	0f 21 d8             	mov    eax,db3
c001493d:	5f                   	pop    edi
c001493e:	5d                   	pop    ebp
c001493f:	50                   	push   eax
c0014940:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014945:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001494b:	e8 0e c4 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c0014950:	58                   	pop    eax
c0014951:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014956:	5a                   	pop    edx
c0014957:	68 90 97 02 c0       	push   0xc0029790
c001495c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014962:	e8 d1 c3 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0014967:	0f 21 f0             	mov    eax,db6
c001496a:	59                   	pop    ecx
c001496b:	5b                   	pop    ebx
c001496c:	50                   	push   eax
c001496d:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014972:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014978:	e8 e1 c3 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c001497d:	5e                   	pop    esi
c001497e:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014983:	5f                   	pop    edi
c0014984:	68 98 97 02 c0       	push   0xc0029798
c0014989:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001498f:	e8 a4 c3 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0014994:	0f 21 f8             	mov    eax,db7
c0014997:	5d                   	pop    ebp
c0014998:	5a                   	pop    edx
c0014999:	50                   	push   eax
c001499a:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001499f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a5:	e8 b4 c3 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c00149aa:	fa                   	cli    
c00149ab:	f4                   	hlt    
c00149ac:	83 c4 10             	add    esp,0x10
c00149af:	eb fe                	jmp    c00149af <displayDebugInfo(regs*)+0x403>

c00149b1 <x87EmulHandler(regs*, void*)>:
c00149b1:	53                   	push   ebx
c00149b2:	83 ec 14             	sub    esp,0x14
c00149b5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00149b9:	53                   	push   ebx
c00149ba:	e8 ff 9f 00 00       	call   c001e9be <Vm::x87Handler(regs*)>
c00149bf:	83 c4 10             	add    esp,0x10
c00149c2:	84 c0                	test   al,al
c00149c4:	74 05                	je     c00149cb <x87EmulHandler(regs*, void*)+0x1a>
c00149c6:	83 c4 08             	add    esp,0x8
c00149c9:	5b                   	pop    ebx
c00149ca:	c3                   	ret    
c00149cb:	83 ec 0c             	sub    esp,0xc
c00149ce:	68 a0 97 02 c0       	push   0xc00297a0
c00149d3:	e8 a9 dd ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00149d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149db:	e8 cc fb ff ff       	call   c00145ac <displayDebugInfo(regs*)>

c00149e0 <gpFault(regs*, void*)>:
c00149e0:	53                   	push   ebx
c00149e1:	83 ec 14             	sub    esp,0x14
c00149e4:	c7 05 f0 ca 02 c0 3b dd 01 c0 	mov    DWORD PTR ds:0xc002caf0,0xc001dd3b
c00149ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00149f2:	53                   	push   ebx
c00149f3:	e8 43 93 00 00       	call   c001dd3b <Vm::faultHandler(regs*)>
c00149f8:	83 c4 10             	add    esp,0x10
c00149fb:	84 c0                	test   al,al
c00149fd:	74 05                	je     c0014a04 <gpFault(regs*, void*)+0x24>
c00149ff:	83 c4 08             	add    esp,0x8
c0014a02:	5b                   	pop    ebx
c0014a03:	c3                   	ret    
c0014a04:	83 ec 0c             	sub    esp,0xc
c0014a07:	68 b6 97 02 c0       	push   0xc00297b6
c0014a0c:	e8 70 dd ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0014a11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a14:	e8 93 fb ff ff       	call   c00145ac <displayDebugInfo(regs*)>

c0014a19 <pgFault(regs*, void*)>:
c0014a19:	83 ec 18             	sub    esp,0x18
c0014a1c:	68 d1 97 02 c0       	push   0xc00297d1
c0014a21:	e8 5b dd ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0014a26:	58                   	pop    eax
c0014a27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a2b:	e8 7c fb ff ff       	call   c00145ac <displayDebugInfo(regs*)>

c0014a30 <otherISRHandler(regs*, void*)>:
c0014a30:	53                   	push   ebx
c0014a31:	83 ec 0c             	sub    esp,0xc
c0014a34:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a38:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a3b:	50                   	push   eax
c0014a3c:	50                   	push   eax
c0014a3d:	68 de 97 02 c0       	push   0xc00297de
c0014a42:	e8 3a dd ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0014a47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a4a:	e8 5d fb ff ff       	call   c00145ac <displayDebugInfo(regs*)>

c0014a4f <opcodeFault(regs*, void*)>:
c0014a4f:	55                   	push   ebp
c0014a50:	89 e5                	mov    ebp,esp
c0014a52:	56                   	push   esi
c0014a53:	53                   	push   ebx
c0014a54:	83 ec 40             	sub    esp,0x40
c0014a57:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0014a5c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014a62:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014a68:	84 c0                	test   al,al
c0014a6a:	74 24                	je     c0014a90 <opcodeFault(regs*, void*)+0x41>
c0014a6c:	83 ec 0c             	sub    esp,0xc
c0014a6f:	68 fc 97 02 c0       	push   0xc00297fc
c0014a74:	e8 08 dd ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0014a79:	83 c4 10             	add    esp,0x10
c0014a7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a7f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a82:	8d 50 19             	lea    edx,[eax+0x19]
c0014a85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a88:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a8b:	e9 77 05 00 00       	jmp    c0015007 <opcodeFault(regs*, void*)+0x5b8>
c0014a90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a93:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a96:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014a99:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014a9d:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aa7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014aaa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aad:	8a 00                	mov    al,BYTE PTR [eax]
c0014aaf:	3c f0                	cmp    al,0xf0
c0014ab1:	75 17                	jne    c0014aca <opcodeFault(regs*, void*)+0x7b>
c0014ab3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014abc:	8d 50 01             	lea    edx,[eax+0x1]
c0014abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ac5:	e9 da 00 00 00       	jmp    c0014ba4 <opcodeFault(regs*, void*)+0x155>
c0014aca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014acd:	8a 00                	mov    al,BYTE PTR [eax]
c0014acf:	3c f2                	cmp    al,0xf2
c0014ad1:	74 09                	je     c0014adc <opcodeFault(regs*, void*)+0x8d>
c0014ad3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ad6:	8a 00                	mov    al,BYTE PTR [eax]
c0014ad8:	3c f3                	cmp    al,0xf3
c0014ada:	75 1b                	jne    c0014af7 <opcodeFault(regs*, void*)+0xa8>
c0014adc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ae0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ae9:	8d 50 01             	lea    edx,[eax+0x1]
c0014aec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014af2:	e9 ad 00 00 00       	jmp    c0014ba4 <opcodeFault(regs*, void*)+0x155>
c0014af7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014afa:	8a 00                	mov    al,BYTE PTR [eax]
c0014afc:	3c 66                	cmp    al,0x66
c0014afe:	75 1f                	jne    c0014b1f <opcodeFault(regs*, void*)+0xd0>
c0014b00:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b04:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014b08:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b0e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b11:	8d 50 01             	lea    edx,[eax+0x1]
c0014b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b17:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b1a:	e9 85 00 00 00       	jmp    c0014ba4 <opcodeFault(regs*, void*)+0x155>
c0014b1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b22:	8a 00                	mov    al,BYTE PTR [eax]
c0014b24:	3c 67                	cmp    al,0x67
c0014b26:	75 18                	jne    c0014b40 <opcodeFault(regs*, void*)+0xf1>
c0014b28:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b2c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b32:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b35:	8d 50 01             	lea    edx,[eax+0x1]
c0014b38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b3b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b3e:	eb 64                	jmp    c0014ba4 <opcodeFault(regs*, void*)+0x155>
c0014b40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b43:	8a 00                	mov    al,BYTE PTR [eax]
c0014b45:	3c 2e                	cmp    al,0x2e
c0014b47:	74 09                	je     c0014b52 <opcodeFault(regs*, void*)+0x103>
c0014b49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b4c:	8a 00                	mov    al,BYTE PTR [eax]
c0014b4e:	3c 3e                	cmp    al,0x3e
c0014b50:	75 18                	jne    c0014b6a <opcodeFault(regs*, void*)+0x11b>
c0014b52:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b56:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b5c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b5f:	8d 50 01             	lea    edx,[eax+0x1]
c0014b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b65:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b68:	eb 3a                	jmp    c0014ba4 <opcodeFault(regs*, void*)+0x155>
c0014b6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b6d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b6f:	3c 36                	cmp    al,0x36
c0014b71:	74 1b                	je     c0014b8e <opcodeFault(regs*, void*)+0x13f>
c0014b73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b76:	8a 00                	mov    al,BYTE PTR [eax]
c0014b78:	3c 26                	cmp    al,0x26
c0014b7a:	74 12                	je     c0014b8e <opcodeFault(regs*, void*)+0x13f>
c0014b7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b7f:	8a 00                	mov    al,BYTE PTR [eax]
c0014b81:	3c 64                	cmp    al,0x64
c0014b83:	74 09                	je     c0014b8e <opcodeFault(regs*, void*)+0x13f>
c0014b85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b88:	8a 00                	mov    al,BYTE PTR [eax]
c0014b8a:	3c 65                	cmp    al,0x65
c0014b8c:	75 16                	jne    c0014ba4 <opcodeFault(regs*, void*)+0x155>
c0014b8e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b92:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b98:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b9b:	8d 50 01             	lea    edx,[eax+0x1]
c0014b9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ba4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ba7:	8a 00                	mov    al,BYTE PTR [eax]
c0014ba9:	3c 0f                	cmp    al,0xf
c0014bab:	0f 85 ad 00 00 00    	jne    c0014c5e <opcodeFault(regs*, void*)+0x20f>
c0014bb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bb4:	40                   	inc    eax
c0014bb5:	8a 00                	mov    al,BYTE PTR [eax]
c0014bb7:	3c c2                	cmp    al,0xc2
c0014bb9:	74 0e                	je     c0014bc9 <opcodeFault(regs*, void*)+0x17a>
c0014bbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bbe:	40                   	inc    eax
c0014bbf:	8a 00                	mov    al,BYTE PTR [eax]
c0014bc1:	3c c3                	cmp    al,0xc3
c0014bc3:	0f 85 95 00 00 00    	jne    c0014c5e <opcodeFault(regs*, void*)+0x20f>
c0014bc9:	83 ec 0c             	sub    esp,0xc
c0014bcc:	68 1f 98 02 c0       	push   0xc002981f
c0014bd1:	e8 ab db ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0014bd6:	83 c4 10             	add    esp,0x10
c0014bd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bdc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bdf:	8d 50 01             	lea    edx,[eax+0x1]
c0014be2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014be8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014beb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bee:	8a 00                	mov    al,BYTE PTR [eax]
c0014bf0:	8d 50 fe             	lea    edx,[eax-0x2]
c0014bf3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bf6:	88 10                	mov    BYTE PTR [eax],dl
c0014bf8:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014bfb:	50                   	push   eax
c0014bfc:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014bff:	50                   	push   eax
c0014c00:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014c03:	50                   	push   eax
c0014c04:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014c07:	e8 c0 44 00 00       	call   c00190cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014c0c:	83 c4 10             	add    esp,0x10
c0014c0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c12:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c15:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c18:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014c1b:	01 d0                	add    eax,edx
c0014c1d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014c20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c23:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c26:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c29:	48                   	dec    eax
c0014c2a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c30:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014c33:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c39:	83 ec 04             	sub    esp,0x4
c0014c3c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014c3f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014c42:	50                   	push   eax
c0014c43:	e8 21 b5 fe ff       	call   c0000169 <voodooXADD>
c0014c48:	83 c4 10             	add    esp,0x10
c0014c4b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014c4e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014c51:	01 c2                	add    edx,eax
c0014c53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c56:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c59:	e9 a9 03 00 00       	jmp    c0015007 <opcodeFault(regs*, void*)+0x5b8>
c0014c5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c61:	8a 00                	mov    al,BYTE PTR [eax]
c0014c63:	3c 0f                	cmp    al,0xf
c0014c65:	0f 85 8b 01 00 00    	jne    c0014df6 <opcodeFault(regs*, void*)+0x3a7>
c0014c6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c6e:	40                   	inc    eax
c0014c6f:	8a 00                	mov    al,BYTE PTR [eax]
c0014c71:	3c c7                	cmp    al,0xc7
c0014c73:	0f 86 7d 01 00 00    	jbe    c0014df6 <opcodeFault(regs*, void*)+0x3a7>
c0014c79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c7c:	40                   	inc    eax
c0014c7d:	8a 00                	mov    al,BYTE PTR [eax]
c0014c7f:	3c cf                	cmp    al,0xcf
c0014c81:	0f 87 6f 01 00 00    	ja     c0014df6 <opcodeFault(regs*, void*)+0x3a7>
c0014c87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c8a:	40                   	inc    eax
c0014c8b:	8a 00                	mov    al,BYTE PTR [eax]
c0014c8d:	83 c0 38             	add    eax,0x38
c0014c90:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014c93:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c97:	75 0b                	jne    c0014ca4 <opcodeFault(regs*, void*)+0x255>
c0014c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c9c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014c9f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ca2:	eb 75                	jmp    c0014d19 <opcodeFault(regs*, void*)+0x2ca>
c0014ca4:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014ca8:	75 0b                	jne    c0014cb5 <opcodeFault(regs*, void*)+0x266>
c0014caa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cad:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014cb0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cb3:	eb 64                	jmp    c0014d19 <opcodeFault(regs*, void*)+0x2ca>
c0014cb5:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014cb9:	75 0b                	jne    c0014cc6 <opcodeFault(regs*, void*)+0x277>
c0014cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cbe:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014cc1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cc4:	eb 53                	jmp    c0014d19 <opcodeFault(regs*, void*)+0x2ca>
c0014cc6:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014cca:	75 0b                	jne    c0014cd7 <opcodeFault(regs*, void*)+0x288>
c0014ccc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ccf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014cd2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cd5:	eb 42                	jmp    c0014d19 <opcodeFault(regs*, void*)+0x2ca>
c0014cd7:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014cdb:	75 0b                	jne    c0014ce8 <opcodeFault(regs*, void*)+0x299>
c0014cdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014ce3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ce6:	eb 31                	jmp    c0014d19 <opcodeFault(regs*, void*)+0x2ca>
c0014ce8:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014cec:	75 0b                	jne    c0014cf9 <opcodeFault(regs*, void*)+0x2aa>
c0014cee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014cf4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cf7:	eb 20                	jmp    c0014d19 <opcodeFault(regs*, void*)+0x2ca>
c0014cf9:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014cfd:	75 0b                	jne    c0014d0a <opcodeFault(regs*, void*)+0x2bb>
c0014cff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d02:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014d05:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d08:	eb 0f                	jmp    c0014d19 <opcodeFault(regs*, void*)+0x2ca>
c0014d0a:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014d0e:	75 09                	jne    c0014d19 <opcodeFault(regs*, void*)+0x2ca>
c0014d10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d13:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014d16:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d19:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014d1d:	74 10                	je     c0014d2f <opcodeFault(regs*, void*)+0x2e0>
c0014d1f:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014d26:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014d2d:	eb 2d                	jmp    c0014d5c <opcodeFault(regs*, void*)+0x30d>
c0014d2f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d32:	c1 e0 18             	shl    eax,0x18
c0014d35:	89 c2                	mov    edx,eax
c0014d37:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d3a:	c1 e0 08             	shl    eax,0x8
c0014d3d:	25 00 00 ff 00       	and    eax,0xff0000
c0014d42:	09 c2                	or     edx,eax
c0014d44:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d47:	c1 e8 08             	shr    eax,0x8
c0014d4a:	25 00 ff 00 00       	and    eax,0xff00
c0014d4f:	09 c2                	or     edx,eax
c0014d51:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d54:	c1 e8 18             	shr    eax,0x18
c0014d57:	09 d0                	or     eax,edx
c0014d59:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d5c:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d60:	75 0b                	jne    c0014d6d <opcodeFault(regs*, void*)+0x31e>
c0014d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d65:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d68:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014d6b:	eb 75                	jmp    c0014de2 <opcodeFault(regs*, void*)+0x393>
c0014d6d:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d71:	75 0b                	jne    c0014d7e <opcodeFault(regs*, void*)+0x32f>
c0014d73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d76:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d79:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014d7c:	eb 64                	jmp    c0014de2 <opcodeFault(regs*, void*)+0x393>
c0014d7e:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d82:	75 0b                	jne    c0014d8f <opcodeFault(regs*, void*)+0x340>
c0014d84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d87:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d8a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014d8d:	eb 53                	jmp    c0014de2 <opcodeFault(regs*, void*)+0x393>
c0014d8f:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d93:	75 0b                	jne    c0014da0 <opcodeFault(regs*, void*)+0x351>
c0014d95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d98:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d9b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014d9e:	eb 42                	jmp    c0014de2 <opcodeFault(regs*, void*)+0x393>
c0014da0:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014da4:	75 0b                	jne    c0014db1 <opcodeFault(regs*, void*)+0x362>
c0014da6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dac:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014daf:	eb 31                	jmp    c0014de2 <opcodeFault(regs*, void*)+0x393>
c0014db1:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014db5:	75 0b                	jne    c0014dc2 <opcodeFault(regs*, void*)+0x373>
c0014db7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dbd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014dc0:	eb 20                	jmp    c0014de2 <opcodeFault(regs*, void*)+0x393>
c0014dc2:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014dc6:	75 0b                	jne    c0014dd3 <opcodeFault(regs*, void*)+0x384>
c0014dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dcb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dce:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014dd1:	eb 0f                	jmp    c0014de2 <opcodeFault(regs*, void*)+0x393>
c0014dd3:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014dd7:	75 09                	jne    c0014de2 <opcodeFault(regs*, void*)+0x393>
c0014dd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ddc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ddf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014de2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014de8:	8d 50 02             	lea    edx,[eax+0x2]
c0014deb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014df1:	e9 11 02 00 00       	jmp    c0015007 <opcodeFault(regs*, void*)+0x5b8>
c0014df6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df9:	8a 00                	mov    al,BYTE PTR [eax]
c0014dfb:	3c 0f                	cmp    al,0xf
c0014dfd:	0f 85 76 01 00 00    	jne    c0014f79 <opcodeFault(regs*, void*)+0x52a>
c0014e03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e06:	40                   	inc    eax
c0014e07:	8a 00                	mov    al,BYTE PTR [eax]
c0014e09:	3c c7                	cmp    al,0xc7
c0014e0b:	0f 85 68 01 00 00    	jne    c0014f79 <opcodeFault(regs*, void*)+0x52a>
c0014e11:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e17:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e1a:	8d 50 01             	lea    edx,[eax+0x1]
c0014e1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e20:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e23:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014e26:	50                   	push   eax
c0014e27:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014e2a:	50                   	push   eax
c0014e2b:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014e2e:	50                   	push   eax
c0014e2f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e32:	e8 95 42 00 00       	call   c00190cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e37:	83 c4 10             	add    esp,0x10
c0014e3a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014e3d:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014e40:	83 f0 01             	xor    eax,0x1
c0014e43:	84 c0                	test   al,al
c0014e45:	0f 84 2e 01 00 00    	je     c0014f79 <opcodeFault(regs*, void*)+0x52a>
c0014e4b:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014e4e:	3c 01                	cmp    al,0x1
c0014e50:	0f 85 23 01 00 00    	jne    c0014f79 <opcodeFault(regs*, void*)+0x52a>
c0014e56:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014e59:	83 f0 01             	xor    eax,0x1
c0014e5c:	84 c0                	test   al,al
c0014e5e:	0f 84 15 01 00 00    	je     c0014f79 <opcodeFault(regs*, void*)+0x52a>
c0014e64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e67:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e6a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e6d:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014e74:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e77:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e7a:	89 c2                	mov    edx,eax
c0014e7c:	b8 00 00 00 00       	mov    eax,0x0
c0014e81:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e84:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e8d:	ba 00 00 00 00       	mov    edx,0x0
c0014e92:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014e95:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014e98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014e9e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014ea1:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014ea8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014eab:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014eae:	89 c2                	mov    edx,eax
c0014eb0:	b8 00 00 00 00       	mov    eax,0x0
c0014eb5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014eb8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ebe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014ec1:	ba 00 00 00 00       	mov    edx,0x0
c0014ec6:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014ec9:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014ecc:	e8 59 7e 00 00       	call   c001cd2a <lockScheduler()>
c0014ed1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014ed4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014ed7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ed9:	89 c1                	mov    ecx,eax
c0014edb:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014ede:	89 cb                	mov    ebx,ecx
c0014ee0:	89 d0                	mov    eax,edx
c0014ee2:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014ee5:	89 c6                	mov    esi,eax
c0014ee7:	89 f0                	mov    eax,esi
c0014ee9:	09 d8                	or     eax,ebx
c0014eeb:	85 c0                	test   eax,eax
c0014eed:	75 21                	jne    c0014f10 <opcodeFault(regs*, void*)+0x4c1>
c0014eef:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014ef2:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014ef5:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014ef8:	89 01                	mov    DWORD PTR [ecx],eax
c0014efa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014efd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f00:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f03:	83 c8 40             	or     eax,0x40
c0014f06:	89 c2                	mov    edx,eax
c0014f08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f0e:	eb 3e                	jmp    c0014f4e <opcodeFault(regs*, void*)+0x4ff>
c0014f10:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f13:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f16:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f18:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f1b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f1e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014f21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f24:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014f27:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f2a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f2d:	89 d0                	mov    eax,edx
c0014f2f:	31 d2                	xor    edx,edx
c0014f31:	89 c3                	mov    ebx,eax
c0014f33:	89 d6                	mov    esi,edx
c0014f35:	89 da                	mov    edx,ebx
c0014f37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f40:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f43:	83 e0 bf             	and    eax,0xffffffbf
c0014f46:	89 c2                	mov    edx,eax
c0014f48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f4e:	e8 d9 7d 00 00       	call   c001cd2c <unlockScheduler()>
c0014f53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f56:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f59:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014f5c:	01 c2                	add    edx,eax
c0014f5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f61:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f64:	83 ec 0c             	sub    esp,0xc
c0014f67:	68 2e 98 02 c0       	push   0xc002982e
c0014f6c:	e8 10 d8 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0014f71:	83 c4 10             	add    esp,0x10
c0014f74:	e9 8e 00 00 00       	jmp    c0015007 <opcodeFault(regs*, void*)+0x5b8>
c0014f79:	83 ec 0c             	sub    esp,0xc
c0014f7c:	68 41 98 02 c0       	push   0xc0029841
c0014f81:	e8 fb d7 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0014f86:	83 c4 10             	add    esp,0x10
c0014f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f92:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f95:	c1 e0 04             	shl    eax,0x4
c0014f98:	01 d0                	add    eax,edx
c0014f9a:	83 c0 03             	add    eax,0x3
c0014f9d:	8a 00                	mov    al,BYTE PTR [eax]
c0014f9f:	0f b6 d8             	movzx  ebx,al
c0014fa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014fa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fae:	c1 e0 04             	shl    eax,0x4
c0014fb1:	01 d0                	add    eax,edx
c0014fb3:	83 c0 02             	add    eax,0x2
c0014fb6:	8a 00                	mov    al,BYTE PTR [eax]
c0014fb8:	0f b6 c8             	movzx  ecx,al
c0014fbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fbe:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fc7:	c1 e0 04             	shl    eax,0x4
c0014fca:	01 d0                	add    eax,edx
c0014fcc:	40                   	inc    eax
c0014fcd:	8a 00                	mov    al,BYTE PTR [eax]
c0014fcf:	0f b6 d0             	movzx  edx,al
c0014fd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd5:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014fd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fdb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fde:	c1 e0 04             	shl    eax,0x4
c0014fe1:	01 f0                	add    eax,esi
c0014fe3:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe5:	0f b6 c0             	movzx  eax,al
c0014fe8:	83 ec 0c             	sub    esp,0xc
c0014feb:	53                   	push   ebx
c0014fec:	51                   	push   ecx
c0014fed:	52                   	push   edx
c0014fee:	50                   	push   eax
c0014fef:	68 54 98 02 c0       	push   0xc0029854
c0014ff4:	e8 88 d7 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0014ff9:	83 c4 20             	add    esp,0x20
c0014ffc:	83 ec 0c             	sub    esp,0xc
c0014fff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015002:	e8 a5 f5 ff ff       	call   c00145ac <displayDebugInfo(regs*)>
c0015007:	8d 65 f8             	lea    esp,[ebp-0x8]
c001500a:	5b                   	pop    ebx
c001500b:	5e                   	pop    esi
c001500c:	5d                   	pop    ebp
c001500d:	c3                   	ret    

c001500e <displayProgramFault(char const*)>:
c001500e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015013:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015016:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001501c:	85 c0                	test   eax,eax
c001501e:	74 15                	je     c0015035 <displayProgramFault(char const*)+0x27>
c0015020:	83 ec 0c             	sub    esp,0xc
c0015023:	6a 04                	push   0x4
c0015025:	6a 0f                	push   0xf
c0015027:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001502b:	50                   	push   eax
c001502c:	e8 c9 b9 ff ff       	call   c00109fa <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015031:	83 c4 1c             	add    esp,0x1c
c0015034:	c3                   	ret    
c0015035:	c3                   	ret    

c0015036 <setupInterruptController()>:
c0015036:	55                   	push   ebp
c0015037:	89 e5                	mov    ebp,esp
c0015039:	53                   	push   ebx
c001503a:	83 ec 24             	sub    esp,0x24
c001503d:	b8 00 00 00 00       	mov    eax,0x0
c0015042:	85 c0                	test   eax,eax
c0015044:	0f 95 c0             	setne  al
c0015047:	84 c0                	test   al,al
c0015049:	74 5b                	je     c00150a6 <setupInterruptController()+0x70>
c001504b:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015052:	83 ec 0c             	sub    esp,0xc
c0015055:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015058:	e8 77 a4 ff ff       	call   c000f4d4 <malloc>
c001505d:	83 c4 10             	add    esp,0x10
c0015060:	89 c3                	mov    ebx,eax
c0015062:	83 ec 0c             	sub    esp,0xc
c0015065:	53                   	push   ebx
c0015066:	e8 c3 f2 00 00       	call   c002432e <APIC::APIC()>
c001506b:	83 c4 10             	add    esp,0x10
c001506e:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015071:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015074:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015077:	8b 00                	mov    eax,DWORD PTR [eax]
c0015079:	83 c0 08             	add    eax,0x8
c001507c:	8b 00                	mov    eax,DWORD PTR [eax]
c001507e:	6a 00                	push   0x0
c0015080:	6a 00                	push   0x0
c0015082:	6a 00                	push   0x0
c0015084:	52                   	push   edx
c0015085:	ff d0                	call   eax
c0015087:	83 c4 10             	add    esp,0x10
c001508a:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001508f:	83 ec 08             	sub    esp,0x8
c0015092:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015095:	50                   	push   eax
c0015096:	e8 d5 ea ff ff       	call   c0013b70 <Device::addChild(Device*)>
c001509b:	83 c4 10             	add    esp,0x10
c001509e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00150a1:	e9 52 03 00 00       	jmp    c00153f8 <setupInterruptController()+0x3c2>
c00150a6:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00150ab:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00150b1:	83 e0 01             	and    eax,0x1
c00150b4:	84 c0                	test   al,al
c00150b6:	0f 95 c0             	setne  al
c00150b9:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00150bc:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00150c3:	83 ec 0c             	sub    esp,0xc
c00150c6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00150c9:	e8 06 a4 ff ff       	call   c000f4d4 <malloc>
c00150ce:	83 c4 10             	add    esp,0x10
c00150d1:	89 c3                	mov    ebx,eax
c00150d3:	83 ec 0c             	sub    esp,0xc
c00150d6:	53                   	push   ebx
c00150d7:	e8 aa f7 00 00       	call   c0024886 <PIC::PIC()>
c00150dc:	83 c4 10             	add    esp,0x10
c00150df:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00150e2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00150e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ea:	83 c0 08             	add    eax,0x8
c00150ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ef:	6a 00                	push   0x0
c00150f1:	6a 00                	push   0x0
c00150f3:	6a 00                	push   0x0
c00150f5:	52                   	push   edx
c00150f6:	ff d0                	call   eax
c00150f8:	83 c4 10             	add    esp,0x10
c00150fb:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00150ff:	74 73                	je     c0015174 <setupInterruptController()+0x13e>
c0015101:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015104:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015107:	8b 00                	mov    eax,DWORD PTR [eax]
c0015109:	83 c0 0c             	add    eax,0xc
c001510c:	8b 00                	mov    eax,DWORD PTR [eax]
c001510e:	6a 00                	push   0x0
c0015110:	6a 00                	push   0x0
c0015112:	6a 00                	push   0x0
c0015114:	52                   	push   edx
c0015115:	ff d0                	call   eax
c0015117:	83 c4 10             	add    esp,0x10
c001511a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001511e:	74 15                	je     c0015135 <setupInterruptController()+0xff>
c0015120:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015123:	8b 00                	mov    eax,DWORD PTR [eax]
c0015125:	83 c0 04             	add    eax,0x4
c0015128:	8b 00                	mov    eax,DWORD PTR [eax]
c001512a:	83 ec 0c             	sub    esp,0xc
c001512d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015130:	ff d0                	call   eax
c0015132:	83 c4 10             	add    esp,0x10
c0015135:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001513c:	83 ec 0c             	sub    esp,0xc
c001513f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015142:	e8 8d a3 ff ff       	call   c000f4d4 <malloc>
c0015147:	83 c4 10             	add    esp,0x10
c001514a:	89 c3                	mov    ebx,eax
c001514c:	83 ec 0c             	sub    esp,0xc
c001514f:	53                   	push   ebx
c0015150:	e8 d9 f1 00 00       	call   c002432e <APIC::APIC()>
c0015155:	83 c4 10             	add    esp,0x10
c0015158:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001515b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001515e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015161:	8b 00                	mov    eax,DWORD PTR [eax]
c0015163:	83 c0 08             	add    eax,0x8
c0015166:	8b 00                	mov    eax,DWORD PTR [eax]
c0015168:	6a 00                	push   0x0
c001516a:	6a 00                	push   0x0
c001516c:	6a 00                	push   0x0
c001516e:	52                   	push   edx
c001516f:	ff d0                	call   eax
c0015171:	83 c4 10             	add    esp,0x10
c0015174:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0015179:	83 ec 08             	sub    esp,0x8
c001517c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001517f:	50                   	push   eax
c0015180:	e8 eb e9 ff ff       	call   c0013b70 <Device::addChild(Device*)>
c0015185:	83 c4 10             	add    esp,0x10
c0015188:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001518b:	8b 00                	mov    eax,DWORD PTR [eax]
c001518d:	83 c0 24             	add    eax,0x24
c0015190:	8b 00                	mov    eax,DWORD PTR [eax]
c0015192:	6a 00                	push   0x0
c0015194:	68 30 4a 01 c0       	push   0xc0014a30
c0015199:	6a 00                	push   0x0
c001519b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001519e:	ff d0                	call   eax
c00151a0:	83 c4 10             	add    esp,0x10
c00151a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a8:	83 c0 24             	add    eax,0x24
c00151ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ad:	6a 00                	push   0x0
c00151af:	68 30 4a 01 c0       	push   0xc0014a30
c00151b4:	6a 01                	push   0x1
c00151b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151b9:	ff d0                	call   eax
c00151bb:	83 c4 10             	add    esp,0x10
c00151be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c3:	83 c0 24             	add    eax,0x24
c00151c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c8:	6a 00                	push   0x0
c00151ca:	68 09 44 01 c0       	push   0xc0014409
c00151cf:	6a 02                	push   0x2
c00151d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151d4:	ff d0                	call   eax
c00151d6:	83 c4 10             	add    esp,0x10
c00151d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00151de:	83 c0 24             	add    eax,0x24
c00151e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e3:	6a 00                	push   0x0
c00151e5:	68 30 4a 01 c0       	push   0xc0014a30
c00151ea:	6a 03                	push   0x3
c00151ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151ef:	ff d0                	call   eax
c00151f1:	83 c4 10             	add    esp,0x10
c00151f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f9:	83 c0 24             	add    eax,0x24
c00151fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00151fe:	6a 00                	push   0x0
c0015200:	68 30 4a 01 c0       	push   0xc0014a30
c0015205:	6a 04                	push   0x4
c0015207:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001520a:	ff d0                	call   eax
c001520c:	83 c4 10             	add    esp,0x10
c001520f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015212:	8b 00                	mov    eax,DWORD PTR [eax]
c0015214:	83 c0 24             	add    eax,0x24
c0015217:	8b 00                	mov    eax,DWORD PTR [eax]
c0015219:	6a 00                	push   0x0
c001521b:	68 30 4a 01 c0       	push   0xc0014a30
c0015220:	6a 05                	push   0x5
c0015222:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015225:	ff d0                	call   eax
c0015227:	83 c4 10             	add    esp,0x10
c001522a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001522d:	8b 00                	mov    eax,DWORD PTR [eax]
c001522f:	83 c0 24             	add    eax,0x24
c0015232:	8b 00                	mov    eax,DWORD PTR [eax]
c0015234:	6a 00                	push   0x0
c0015236:	68 4f 4a 01 c0       	push   0xc0014a4f
c001523b:	6a 06                	push   0x6
c001523d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015240:	ff d0                	call   eax
c0015242:	83 c4 10             	add    esp,0x10
c0015245:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015248:	8b 00                	mov    eax,DWORD PTR [eax]
c001524a:	83 c0 24             	add    eax,0x24
c001524d:	8b 00                	mov    eax,DWORD PTR [eax]
c001524f:	6a 00                	push   0x0
c0015251:	68 b1 49 01 c0       	push   0xc00149b1
c0015256:	6a 07                	push   0x7
c0015258:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001525b:	ff d0                	call   eax
c001525d:	83 c4 10             	add    esp,0x10
c0015260:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015263:	8b 00                	mov    eax,DWORD PTR [eax]
c0015265:	83 c0 24             	add    eax,0x24
c0015268:	8b 00                	mov    eax,DWORD PTR [eax]
c001526a:	6a 00                	push   0x0
c001526c:	68 24 42 01 c0       	push   0xc0014224
c0015271:	6a 08                	push   0x8
c0015273:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015276:	ff d0                	call   eax
c0015278:	83 c4 10             	add    esp,0x10
c001527b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001527e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015280:	83 c0 24             	add    eax,0x24
c0015283:	8b 00                	mov    eax,DWORD PTR [eax]
c0015285:	6a 00                	push   0x0
c0015287:	68 30 4a 01 c0       	push   0xc0014a30
c001528c:	6a 09                	push   0x9
c001528e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015291:	ff d0                	call   eax
c0015293:	83 c4 10             	add    esp,0x10
c0015296:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015299:	8b 00                	mov    eax,DWORD PTR [eax]
c001529b:	83 c0 24             	add    eax,0x24
c001529e:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a0:	6a 00                	push   0x0
c00152a2:	68 30 4a 01 c0       	push   0xc0014a30
c00152a7:	6a 0a                	push   0xa
c00152a9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152ac:	ff d0                	call   eax
c00152ae:	83 c4 10             	add    esp,0x10
c00152b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b6:	83 c0 24             	add    eax,0x24
c00152b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152bb:	6a 00                	push   0x0
c00152bd:	68 30 4a 01 c0       	push   0xc0014a30
c00152c2:	6a 0b                	push   0xb
c00152c4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152c7:	ff d0                	call   eax
c00152c9:	83 c4 10             	add    esp,0x10
c00152cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d1:	83 c0 24             	add    eax,0x24
c00152d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d6:	6a 00                	push   0x0
c00152d8:	68 30 4a 01 c0       	push   0xc0014a30
c00152dd:	6a 0c                	push   0xc
c00152df:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152e2:	ff d0                	call   eax
c00152e4:	83 c4 10             	add    esp,0x10
c00152e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ec:	83 c0 24             	add    eax,0x24
c00152ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f1:	6a 00                	push   0x0
c00152f3:	68 e0 49 01 c0       	push   0xc00149e0
c00152f8:	6a 0d                	push   0xd
c00152fa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152fd:	ff d0                	call   eax
c00152ff:	83 c4 10             	add    esp,0x10
c0015302:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015305:	8b 00                	mov    eax,DWORD PTR [eax]
c0015307:	83 c0 24             	add    eax,0x24
c001530a:	8b 00                	mov    eax,DWORD PTR [eax]
c001530c:	6a 00                	push   0x0
c001530e:	68 19 4a 01 c0       	push   0xc0014a19
c0015313:	6a 0e                	push   0xe
c0015315:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015318:	ff d0                	call   eax
c001531a:	83 c4 10             	add    esp,0x10
c001531d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015320:	8b 00                	mov    eax,DWORD PTR [eax]
c0015322:	83 c0 24             	add    eax,0x24
c0015325:	8b 00                	mov    eax,DWORD PTR [eax]
c0015327:	6a 00                	push   0x0
c0015329:	68 30 4a 01 c0       	push   0xc0014a30
c001532e:	6a 0f                	push   0xf
c0015330:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015333:	ff d0                	call   eax
c0015335:	83 c4 10             	add    esp,0x10
c0015338:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001533b:	8b 00                	mov    eax,DWORD PTR [eax]
c001533d:	83 c0 24             	add    eax,0x24
c0015340:	8b 00                	mov    eax,DWORD PTR [eax]
c0015342:	6a 00                	push   0x0
c0015344:	68 30 4a 01 c0       	push   0xc0014a30
c0015349:	6a 10                	push   0x10
c001534b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001534e:	ff d0                	call   eax
c0015350:	83 c4 10             	add    esp,0x10
c0015353:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015356:	8b 00                	mov    eax,DWORD PTR [eax]
c0015358:	83 c0 24             	add    eax,0x24
c001535b:	8b 00                	mov    eax,DWORD PTR [eax]
c001535d:	6a 00                	push   0x0
c001535f:	68 30 4a 01 c0       	push   0xc0014a30
c0015364:	6a 11                	push   0x11
c0015366:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015369:	ff d0                	call   eax
c001536b:	83 c4 10             	add    esp,0x10
c001536e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015371:	8b 00                	mov    eax,DWORD PTR [eax]
c0015373:	83 c0 24             	add    eax,0x24
c0015376:	8b 00                	mov    eax,DWORD PTR [eax]
c0015378:	6a 00                	push   0x0
c001537a:	68 30 4a 01 c0       	push   0xc0014a30
c001537f:	6a 12                	push   0x12
c0015381:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015384:	ff d0                	call   eax
c0015386:	83 c4 10             	add    esp,0x10
c0015389:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538c:	8b 00                	mov    eax,DWORD PTR [eax]
c001538e:	83 c0 24             	add    eax,0x24
c0015391:	8b 00                	mov    eax,DWORD PTR [eax]
c0015393:	6a 00                	push   0x0
c0015395:	68 30 4a 01 c0       	push   0xc0014a30
c001539a:	6a 13                	push   0x13
c001539c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001539f:	ff d0                	call   eax
c00153a1:	83 c4 10             	add    esp,0x10
c00153a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a9:	83 c0 24             	add    eax,0x24
c00153ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ae:	6a 00                	push   0x0
c00153b0:	68 30 4a 01 c0       	push   0xc0014a30
c00153b5:	6a 14                	push   0x14
c00153b7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153ba:	ff d0                	call   eax
c00153bc:	83 c4 10             	add    esp,0x10
c00153bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c4:	83 c0 24             	add    eax,0x24
c00153c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c9:	6a 00                	push   0x0
c00153cb:	68 30 4a 01 c0       	push   0xc0014a30
c00153d0:	6a 1e                	push   0x1e
c00153d2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d5:	ff d0                	call   eax
c00153d7:	83 c4 10             	add    esp,0x10
c00153da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153df:	83 c0 24             	add    eax,0x24
c00153e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e4:	6a 00                	push   0x0
c00153e6:	68 bf b6 01 c0       	push   0xc001b6bf
c00153eb:	6a 60                	push   0x60
c00153ed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153f0:	ff d0                	call   eax
c00153f2:	83 c4 10             	add    esp,0x10
c00153f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00153fb:	c9                   	leave  
c00153fc:	c3                   	ret    
c00153fd:	90                   	nop

c00153fe <InterruptController::convertLegacyIRQNumber(int)>:
c00153fe:	55                   	push   ebp
c00153ff:	89 e5                	mov    ebp,esp
c0015401:	83 ec 08             	sub    esp,0x8
c0015404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015407:	83 ec 0c             	sub    esp,0xc
c001540a:	50                   	push   eax
c001540b:	e8 4c ea ff ff       	call   c0013e5c <Device::getName()>
c0015410:	83 c4 10             	add    esp,0x10
c0015413:	8a 00                	mov    al,BYTE PTR [eax]
c0015415:	3c 41                	cmp    al,0x41
c0015417:	0f 94 c0             	sete   al
c001541a:	84 c0                	test   al,al
c001541c:	74 28                	je     c0015446 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001541e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015422:	7f 12                	jg     c0015436 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015424:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015427:	05 a0 bb 02 c0       	add    eax,0xc002bba0
c001542c:	8a 00                	mov    al,BYTE PTR [eax]
c001542e:	0f b6 c0             	movzx  eax,al
c0015431:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015434:	eb 10                	jmp    c0015446 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015436:	83 ec 0c             	sub    esp,0xc
c0015439:	68 d4 95 02 c0       	push   0xc00295d4
c001543e:	e8 58 44 00 00       	call   c001989b <Krnl::panic(char const*)>
c0015443:	83 c4 10             	add    esp,0x10
c0015446:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015449:	c9                   	leave  
c001544a:	c3                   	ret    
c001544b:	90                   	nop

c001544c <startGUI(void*)>:
c001544c:	55                   	push   ebp
c001544d:	89 e5                	mov    ebp,esp
c001544f:	53                   	push   ebx
c0015450:	83 ec 04             	sub    esp,0x4
c0015453:	e8 d4 78 00 00       	call   c001cd2c <unlockScheduler()>
c0015458:	8b 1d 48 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c948
c001545e:	83 ec 08             	sub    esp,0x8
c0015461:	6a 01                	push   0x1
c0015463:	68 bc 98 02 c0       	push   0xc00298bc
c0015468:	e8 49 72 00 00       	call   c001c6b6 <Thr::loadDLL(char const*, bool)>
c001546d:	83 c4 10             	add    esp,0x10
c0015470:	83 ec 08             	sub    esp,0x8
c0015473:	53                   	push   ebx
c0015474:	50                   	push   eax
c0015475:	e8 4b 74 00 00       	call   c001c8c5 <Thr::executeDLL(unsigned long, void*)>
c001547a:	83 c4 10             	add    esp,0x10
c001547d:	8b 1d 48 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c948
c0015483:	83 ec 08             	sub    esp,0x8
c0015486:	6a 01                	push   0x1
c0015488:	68 d6 98 02 c0       	push   0xc00298d6
c001548d:	e8 24 72 00 00       	call   c001c6b6 <Thr::loadDLL(char const*, bool)>
c0015492:	83 c4 10             	add    esp,0x10
c0015495:	83 ec 08             	sub    esp,0x8
c0015498:	53                   	push   ebx
c0015499:	50                   	push   eax
c001549a:	e8 26 74 00 00       	call   c001c8c5 <Thr::executeDLL(unsigned long, void*)>
c001549f:	83 c4 10             	add    esp,0x10
c00154a2:	90                   	nop
c00154a3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00154a6:	c9                   	leave  
c00154a7:	c3                   	ret    

c00154a8 <startGUIVESA(void*)>:
c00154a8:	55                   	push   ebp
c00154a9:	89 e5                	mov    ebp,esp
c00154ab:	53                   	push   ebx
c00154ac:	83 ec 04             	sub    esp,0x4
c00154af:	e8 78 78 00 00       	call   c001cd2c <unlockScheduler()>
c00154b4:	8b 1d 48 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c948
c00154ba:	83 ec 08             	sub    esp,0x8
c00154bd:	6a 01                	push   0x1
c00154bf:	68 f0 98 02 c0       	push   0xc00298f0
c00154c4:	e8 ed 71 00 00       	call   c001c6b6 <Thr::loadDLL(char const*, bool)>
c00154c9:	83 c4 10             	add    esp,0x10
c00154cc:	83 ec 08             	sub    esp,0x8
c00154cf:	53                   	push   ebx
c00154d0:	50                   	push   eax
c00154d1:	e8 ef 73 00 00       	call   c001c8c5 <Thr::executeDLL(unsigned long, void*)>
c00154d6:	83 c4 10             	add    esp,0x10
c00154d9:	8b 1d 48 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c948
c00154df:	83 ec 08             	sub    esp,0x8
c00154e2:	6a 01                	push   0x1
c00154e4:	68 d6 98 02 c0       	push   0xc00298d6
c00154e9:	e8 c8 71 00 00       	call   c001c6b6 <Thr::loadDLL(char const*, bool)>
c00154ee:	83 c4 10             	add    esp,0x10
c00154f1:	83 ec 08             	sub    esp,0x8
c00154f4:	53                   	push   ebx
c00154f5:	50                   	push   eax
c00154f6:	e8 ca 73 00 00       	call   c001c8c5 <Thr::executeDLL(unsigned long, void*)>
c00154fb:	83 c4 10             	add    esp,0x10
c00154fe:	90                   	nop
c00154ff:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015502:	c9                   	leave  
c0015503:	c3                   	ret    

c0015504 <sendKeyToTerminal(unsigned char)>:
c0015504:	55                   	push   ebp
c0015505:	89 e5                	mov    ebp,esp
c0015507:	83 ec 28             	sub    esp,0x28
c001550a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015510:	a1 24 ca 02 c0       	mov    eax,ds:0xc002ca24
c0015515:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015519:	83 ec 08             	sub    esp,0x8
c001551c:	52                   	push   edx
c001551d:	50                   	push   eax
c001551e:	e8 3d ba ff ff       	call   c0010f60 <VgaText::receiveKey(unsigned char)>
c0015523:	83 c4 10             	add    esp,0x10
c0015526:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001552a:	75 41                	jne    c001556d <sendKeyToTerminal(unsigned char)+0x69>
c001552c:	e8 20 78 00 00       	call   c001cd51 <lockStuff()>
c0015531:	a1 00 cb 02 c0       	mov    eax,ds:0xc002cb00
c0015536:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015539:	c7 05 00 cb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cb00,0x0
c0015543:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015547:	74 1f                	je     c0015568 <sendKeyToTerminal(unsigned char)+0x64>
c0015549:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001554c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001554f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015552:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015555:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015558:	83 ec 0c             	sub    esp,0xc
c001555b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001555e:	e8 df 7d 00 00       	call   c001d342 <unblockTask(ThreadControlBlock*)>
c0015563:	83 c4 10             	add    esp,0x10
c0015566:	eb db                	jmp    c0015543 <sendKeyToTerminal(unsigned char)+0x3f>
c0015568:	e8 7e 7b 00 00       	call   c001d0eb <unlockStuff()>
c001556d:	90                   	nop
c001556e:	c9                   	leave  
c001556f:	c3                   	ret    

c0015570 <sendKeyboardToken(KeyboardToken)>:
c0015570:	55                   	push   ebp
c0015571:	89 e5                	mov    ebp,esp
c0015573:	83 ec 18             	sub    esp,0x18
c0015576:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015579:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557c:	0f b7 c0             	movzx  eax,ax
c001557f:	83 f2 01             	xor    edx,0x1
c0015582:	88 90 20 cb 02 c0    	mov    BYTE PTR [eax-0x3ffd34e0],dl
c0015588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558b:	66 3d 03 02          	cmp    ax,0x203
c001558f:	75 07                	jne    c0015598 <sendKeyboardToken(KeyboardToken)+0x28>
c0015591:	a0 20 cc 02 c0       	mov    al,ds:0xc002cc20
c0015596:	84 c0                	test   al,al
c0015598:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001559c:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001559f:	a0 28 cf 02 c0       	mov    al,ds:0xc002cf28
c00155a4:	38 c2                	cmp    dl,al
c00155a6:	74 1c                	je     c00155c4 <sendKeyboardToken(KeyboardToken)+0x54>
c00155a8:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00155ab:	a2 28 cf 02 c0       	mov    ds:0xc002cf28,al
c00155b0:	a0 28 cf 02 c0       	mov    al,ds:0xc002cf28
c00155b5:	0f b6 c0             	movzx  eax,al
c00155b8:	83 ec 0c             	sub    esp,0xc
c00155bb:	50                   	push   eax
c00155bc:	e8 2d ab ff ff       	call   c00100ee <setTerminalScrollLock(bool)>
c00155c1:	83 c4 10             	add    esp,0x10
c00155c4:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00155c7:	84 c0                	test   al,al
c00155c9:	0f 84 ae 00 00 00    	je     c001567d <sendKeyboardToken(KeyboardToken)+0x10d>
c00155cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d2:	66 3d 10 03          	cmp    ax,0x310
c00155d6:	75 06                	jne    c00155de <sendKeyboardToken(KeyboardToken)+0x6e>
c00155d8:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00155de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e1:	66 3d 11 03          	cmp    ax,0x311
c00155e5:	75 06                	jne    c00155ed <sendKeyboardToken(KeyboardToken)+0x7d>
c00155e7:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00155ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f0:	66 3d 12 03          	cmp    ax,0x312
c00155f4:	75 06                	jne    c00155fc <sendKeyboardToken(KeyboardToken)+0x8c>
c00155f6:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00155fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ff:	66 3d 13 03          	cmp    ax,0x313
c0015603:	75 06                	jne    c001560b <sendKeyboardToken(KeyboardToken)+0x9b>
c0015605:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001560b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560e:	66 3d 14 03          	cmp    ax,0x314
c0015612:	75 06                	jne    c001561a <sendKeyboardToken(KeyboardToken)+0xaa>
c0015614:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001561a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561d:	66 3d 15 03          	cmp    ax,0x315
c0015621:	75 06                	jne    c0015629 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015623:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562c:	66 3d 16 03          	cmp    ax,0x316
c0015630:	75 06                	jne    c0015638 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015632:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563b:	66 3d 17 03          	cmp    ax,0x317
c001563f:	75 06                	jne    c0015647 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015641:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564a:	66 3d 18 03          	cmp    ax,0x318
c001564e:	75 06                	jne    c0015656 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015650:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015659:	66 3d 19 03          	cmp    ax,0x319
c001565d:	75 06                	jne    c0015665 <sendKeyboardToken(KeyboardToken)+0xf5>
c001565f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015668:	66 3d 1a 03          	cmp    ax,0x31a
c001566c:	0f 85 c9 00 00 00    	jne    c001573b <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015672:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015678:	e9 be 00 00 00       	jmp    c001573b <sendKeyboardToken(KeyboardToken)+0x1cb>
c001567d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015680:	66 3d 10 03          	cmp    ax,0x310
c0015684:	75 0a                	jne    c0015690 <sendKeyboardToken(KeyboardToken)+0x120>
c0015686:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001568c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015693:	66 3d 11 03          	cmp    ax,0x311
c0015697:	75 0a                	jne    c00156a3 <sendKeyboardToken(KeyboardToken)+0x133>
c0015699:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001569f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a6:	66 3d 12 03          	cmp    ax,0x312
c00156aa:	75 0a                	jne    c00156b6 <sendKeyboardToken(KeyboardToken)+0x146>
c00156ac:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00156b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b9:	66 3d 13 03          	cmp    ax,0x313
c00156bd:	75 0a                	jne    c00156c9 <sendKeyboardToken(KeyboardToken)+0x159>
c00156bf:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00156c5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156cc:	66 3d 14 03          	cmp    ax,0x314
c00156d0:	75 0a                	jne    c00156dc <sendKeyboardToken(KeyboardToken)+0x16c>
c00156d2:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00156d8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156df:	66 3d 15 03          	cmp    ax,0x315
c00156e3:	75 0a                	jne    c00156ef <sendKeyboardToken(KeyboardToken)+0x17f>
c00156e5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00156eb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f2:	66 3d 16 03          	cmp    ax,0x316
c00156f6:	75 0a                	jne    c0015702 <sendKeyboardToken(KeyboardToken)+0x192>
c00156f8:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00156fe:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015705:	66 3d 17 03          	cmp    ax,0x317
c0015709:	75 0a                	jne    c0015715 <sendKeyboardToken(KeyboardToken)+0x1a5>
c001570b:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015711:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015718:	66 3d 18 03          	cmp    ax,0x318
c001571c:	75 0a                	jne    c0015728 <sendKeyboardToken(KeyboardToken)+0x1b8>
c001571e:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015724:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572b:	66 3d 19 03          	cmp    ax,0x319
c001572f:	75 0a                	jne    c001573b <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015731:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015737:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001573b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573e:	66 3d 00 02          	cmp    ax,0x200
c0015742:	75 2c                	jne    c0015770 <sendKeyboardToken(KeyboardToken)+0x200>
c0015744:	a0 20 cf 02 c0       	mov    al,ds:0xc002cf20
c0015749:	83 f0 01             	xor    eax,0x1
c001574c:	84 c0                	test   al,al
c001574e:	74 20                	je     c0015770 <sendKeyboardToken(KeyboardToken)+0x200>
c0015750:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0015755:	6a 01                	push   0x1
c0015757:	6a 00                	push   0x0
c0015759:	68 4c 54 01 c0       	push   0xc001544c
c001575e:	50                   	push   eax
c001575f:	e8 f8 76 00 00       	call   c001ce5c <Process::createThread(void (*)(void*), void*, int)>
c0015764:	83 c4 10             	add    esp,0x10
c0015767:	c6 05 20 cf 02 c0 01 	mov    BYTE PTR ds:0xc002cf20,0x1
c001576e:	eb 33                	jmp    c00157a3 <sendKeyboardToken(KeyboardToken)+0x233>
c0015770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015773:	66 3d 01 02          	cmp    ax,0x201
c0015777:	75 2a                	jne    c00157a3 <sendKeyboardToken(KeyboardToken)+0x233>
c0015779:	a0 20 cf 02 c0       	mov    al,ds:0xc002cf20
c001577e:	83 f0 01             	xor    eax,0x1
c0015781:	84 c0                	test   al,al
c0015783:	74 1e                	je     c00157a3 <sendKeyboardToken(KeyboardToken)+0x233>
c0015785:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001578a:	6a 01                	push   0x1
c001578c:	6a 00                	push   0x0
c001578e:	68 a8 54 01 c0       	push   0xc00154a8
c0015793:	50                   	push   eax
c0015794:	e8 c3 76 00 00       	call   c001ce5c <Process::createThread(void (*)(void*), void*, int)>
c0015799:	83 c4 10             	add    esp,0x10
c001579c:	c6 05 20 cf 02 c0 01 	mov    BYTE PTR ds:0xc002cf20,0x1
c00157a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a6:	66 3d 1d 03          	cmp    ax,0x31d
c00157aa:	75 06                	jne    c00157b2 <sendKeyboardToken(KeyboardToken)+0x242>
c00157ac:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00157b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b5:	66 3d 1c 03          	cmp    ax,0x31c
c00157b9:	75 06                	jne    c00157c1 <sendKeyboardToken(KeyboardToken)+0x251>
c00157bb:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00157c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c4:	66 3d 1b 03          	cmp    ax,0x31b
c00157c8:	75 06                	jne    c00157d0 <sendKeyboardToken(KeyboardToken)+0x260>
c00157ca:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00157d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d3:	66 3d 1e 03          	cmp    ax,0x31e
c00157d7:	75 06                	jne    c00157df <sendKeyboardToken(KeyboardToken)+0x26f>
c00157d9:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00157df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e2:	66 3d 1f 03          	cmp    ax,0x31f
c00157e6:	75 06                	jne    c00157ee <sendKeyboardToken(KeyboardToken)+0x27e>
c00157e8:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00157ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f1:	66 3d 1a 03          	cmp    ax,0x31a
c00157f5:	75 06                	jne    c00157fd <sendKeyboardToken(KeyboardToken)+0x28d>
c00157f7:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00157fd:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015801:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015804:	83 f0 01             	xor    eax,0x1
c0015807:	84 c0                	test   al,al
c0015809:	74 77                	je     c0015882 <sendKeyboardToken(KeyboardToken)+0x312>
c001580b:	a0 21 cc 02 c0       	mov    al,ds:0xc002cc21
c0015810:	84 c0                	test   al,al
c0015812:	74 41                	je     c0015855 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015814:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015818:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001581c:	74 2b                	je     c0015849 <sendKeyboardToken(KeyboardToken)+0x2d9>
c001581e:	8b 15 24 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf24
c0015824:	89 d0                	mov    eax,edx
c0015826:	c1 e0 02             	shl    eax,0x2
c0015829:	01 d0                	add    eax,edx
c001582b:	01 c0                	add    eax,eax
c001582d:	a3 24 cf 02 c0       	mov    ds:0xc002cf24,eax
c0015832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015835:	0f b7 c0             	movzx  eax,ax
c0015838:	8d 50 d0             	lea    edx,[eax-0x30]
c001583b:	a1 24 cf 02 c0       	mov    eax,ds:0xc002cf24
c0015840:	01 d0                	add    eax,edx
c0015842:	a3 24 cf 02 c0       	mov    ds:0xc002cf24,eax
c0015847:	eb 6d                	jmp    c00158b6 <sendKeyboardToken(KeyboardToken)+0x346>
c0015849:	c7 05 24 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf24,0x0
c0015853:	eb 61                	jmp    c00158b6 <sendKeyboardToken(KeyboardToken)+0x346>
c0015855:	a1 24 cf 02 c0       	mov    eax,ds:0xc002cf24
c001585a:	85 c0                	test   eax,eax
c001585c:	74 18                	je     c0015876 <sendKeyboardToken(KeyboardToken)+0x306>
c001585e:	a1 24 cf 02 c0       	mov    eax,ds:0xc002cf24
c0015863:	0f b6 c0             	movzx  eax,al
c0015866:	83 ec 0c             	sub    esp,0xc
c0015869:	50                   	push   eax
c001586a:	e8 95 fc ff ff       	call   c0015504 <sendKeyToTerminal(unsigned char)>
c001586f:	83 c4 10             	add    esp,0x10
c0015872:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015876:	c7 05 24 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf24,0x0
c0015880:	eb 34                	jmp    c00158b6 <sendKeyboardToken(KeyboardToken)+0x346>
c0015882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015885:	66 3d 01 01          	cmp    ax,0x101
c0015889:	75 2b                	jne    c00158b6 <sendKeyboardToken(KeyboardToken)+0x346>
c001588b:	a1 24 cf 02 c0       	mov    eax,ds:0xc002cf24
c0015890:	85 c0                	test   eax,eax
c0015892:	74 18                	je     c00158ac <sendKeyboardToken(KeyboardToken)+0x33c>
c0015894:	a1 24 cf 02 c0       	mov    eax,ds:0xc002cf24
c0015899:	0f b6 c0             	movzx  eax,al
c001589c:	83 ec 0c             	sub    esp,0xc
c001589f:	50                   	push   eax
c00158a0:	e8 5f fc ff ff       	call   c0015504 <sendKeyToTerminal(unsigned char)>
c00158a5:	83 c4 10             	add    esp,0x10
c00158a8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00158ac:	c7 05 24 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf24,0x0
c00158b6:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00158b9:	83 f0 01             	xor    eax,0x1
c00158bc:	84 c0                	test   al,al
c00158be:	74 4c                	je     c001590c <sendKeyboardToken(KeyboardToken)+0x39c>
c00158c0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00158c3:	83 f0 01             	xor    eax,0x1
c00158c6:	84 c0                	test   al,al
c00158c8:	74 42                	je     c001590c <sendKeyboardToken(KeyboardToken)+0x39c>
c00158ca:	a0 20 cc 02 c0       	mov    al,ds:0xc002cc20
c00158cf:	83 f0 01             	xor    eax,0x1
c00158d2:	84 c0                	test   al,al
c00158d4:	74 36                	je     c001590c <sendKeyboardToken(KeyboardToken)+0x39c>
c00158d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d9:	66 83 f8 1f          	cmp    ax,0x1f
c00158dd:	76 09                	jbe    c00158e8 <sendKeyboardToken(KeyboardToken)+0x378>
c00158df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e2:	66 83 f8 7e          	cmp    ax,0x7e
c00158e6:	76 12                	jbe    c00158fa <sendKeyboardToken(KeyboardToken)+0x38a>
c00158e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158eb:	66 83 f8 0a          	cmp    ax,0xa
c00158ef:	74 09                	je     c00158fa <sendKeyboardToken(KeyboardToken)+0x38a>
c00158f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f4:	66 83 f8 08          	cmp    ax,0x8
c00158f8:	75 12                	jne    c001590c <sendKeyboardToken(KeyboardToken)+0x39c>
c00158fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fd:	0f b6 c0             	movzx  eax,al
c0015900:	83 ec 0c             	sub    esp,0xc
c0015903:	50                   	push   eax
c0015904:	e8 fb fb ff ff       	call   c0015504 <sendKeyToTerminal(unsigned char)>
c0015909:	83 c4 10             	add    esp,0x10
c001590c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001590f:	83 f0 01             	xor    eax,0x1
c0015912:	84 c0                	test   al,al
c0015914:	74 4f                	je     c0015965 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015916:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015919:	83 f0 01             	xor    eax,0x1
c001591c:	84 c0                	test   al,al
c001591e:	74 45                	je     c0015965 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015920:	a0 20 cc 02 c0       	mov    al,ds:0xc002cc20
c0015925:	84 c0                	test   al,al
c0015927:	74 3c                	je     c0015965 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592c:	66 83 f8 3f          	cmp    ax,0x3f
c0015930:	76 33                	jbe    c0015965 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015935:	66 83 f8 7f          	cmp    ax,0x7f
c0015939:	77 2a                	ja     c0015965 <sendKeyboardToken(KeyboardToken)+0x3f5>
c001593b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593e:	88 c2                	mov    dl,al
c0015940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015943:	66 83 f8 5f          	cmp    ax,0x5f
c0015947:	76 04                	jbe    c001594d <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015949:	b0 20                	mov    al,0x20
c001594b:	eb 02                	jmp    c001594f <sendKeyboardToken(KeyboardToken)+0x3df>
c001594d:	b0 00                	mov    al,0x0
c001594f:	29 c2                	sub    edx,eax
c0015951:	88 d0                	mov    al,dl
c0015953:	83 e8 40             	sub    eax,0x40
c0015956:	0f b6 c0             	movzx  eax,al
c0015959:	83 ec 0c             	sub    esp,0xc
c001595c:	50                   	push   eax
c001595d:	e8 a2 fb ff ff       	call   c0015504 <sendKeyToTerminal(unsigned char)>
c0015962:	83 c4 10             	add    esp,0x10
c0015965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015968:	66 3d 00 03          	cmp    ax,0x300
c001596c:	75 0f                	jne    c001597d <sendKeyboardToken(KeyboardToken)+0x40d>
c001596e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015971:	83 f0 01             	xor    eax,0x1
c0015974:	84 c0                	test   al,al
c0015976:	74 05                	je     c001597d <sendKeyboardToken(KeyboardToken)+0x40d>
c0015978:	e8 4e b0 ff ff       	call   c00109cb <doTerminalCycle()>
c001597d:	90                   	nop
c001597e:	c9                   	leave  
c001597f:	c3                   	ret    

c0015980 <clearInternalKeybuffer(VgaText*)>:
c0015980:	55                   	push   ebp
c0015981:	89 e5                	mov    ebp,esp
c0015983:	83 ec 08             	sub    esp,0x8
c0015986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015989:	05 34 11 00 00       	add    eax,0x1134
c001598e:	83 ec 0c             	sub    esp,0xc
c0015991:	50                   	push   eax
c0015992:	e8 11 ad fe ff       	call   c00006a8 <strlen>
c0015997:	83 c4 10             	add    esp,0x10
c001599a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001599d:	81 c2 34 11 00 00    	add    edx,0x1134
c00159a3:	83 ec 04             	sub    esp,0x4
c00159a6:	50                   	push   eax
c00159a7:	6a 00                	push   0x0
c00159a9:	52                   	push   edx
c00159aa:	e8 dc ac fe ff       	call   c000068b <memset>
c00159af:	83 c4 10             	add    esp,0x10
c00159b2:	90                   	nop
c00159b3:	c9                   	leave  
c00159b4:	c3                   	ret    

c00159b5 <readKeyboard(VgaText*, char*, unsigned long)>:
c00159b5:	55                   	push   ebp
c00159b6:	89 e5                	mov    ebp,esp
c00159b8:	83 ec 18             	sub    esp,0x18
c00159bb:	fb                   	sti    
c00159bc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00159c3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00159c7:	0f 84 8a 00 00 00    	je     c0015a57 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00159cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d0:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00159d6:	84 c0                	test   al,al
c00159d8:	75 11                	jne    c00159eb <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00159da:	e8 4b 73 00 00       	call   c001cd2a <lockScheduler()>
c00159df:	e8 82 76 00 00       	call   c001d066 <schedule()>
c00159e4:	e8 43 73 00 00       	call   c001cd2c <unlockScheduler()>
c00159e9:	eb e2                	jmp    c00159cd <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00159eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00159ee:	8d 50 01             	lea    edx,[eax+0x1]
c00159f1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00159f4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00159f7:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00159fd:	88 10                	mov    BYTE PTR [eax],dl
c00159ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a02:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015a08:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a0e:	05 34 11 00 00       	add    eax,0x1134
c0015a13:	83 ec 0c             	sub    esp,0xc
c0015a16:	50                   	push   eax
c0015a17:	e8 8c ac fe ff       	call   c00006a8 <strlen>
c0015a1c:	83 c4 10             	add    esp,0x10
c0015a1f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a22:	81 c2 34 11 00 00    	add    edx,0x1134
c0015a28:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015a2b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a2e:	81 c2 34 11 00 00    	add    edx,0x1134
c0015a34:	83 ec 04             	sub    esp,0x4
c0015a37:	50                   	push   eax
c0015a38:	51                   	push   ecx
c0015a39:	52                   	push   edx
c0015a3a:	e8 de ab fe ff       	call   c000061d <memmove>
c0015a3f:	83 c4 10             	add    esp,0x10
c0015a42:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015a45:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015a48:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015a4c:	0f 85 71 ff ff ff    	jne    c00159c3 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015a52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a55:	eb 03                	jmp    c0015a5a <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015a57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a5a:	c9                   	leave  
c0015a5b:	c3                   	ret    

c0015a5c <Keyboard::Keyboard(char const*)>:
c0015a5c:	83 ec 0c             	sub    esp,0xc
c0015a5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a63:	83 ec 08             	sub    esp,0x8
c0015a66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a6a:	50                   	push   eax
c0015a6b:	e8 f0 e2 ff ff       	call   c0013d60 <Device::Device(char const*)>
c0015a70:	83 c4 10             	add    esp,0x10
c0015a73:	ba 14 99 02 c0       	mov    edx,0xc0029914
c0015a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a7c:	89 10                	mov    DWORD PTR [eax],edx
c0015a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a82:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015a8c:	c6 05 04 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb04,0x1
c0015a93:	90                   	nop
c0015a94:	83 c4 0c             	add    esp,0xc
c0015a97:	c3                   	ret    

c0015a98 <Keyboard::~Keyboard()>:
c0015a98:	83 ec 0c             	sub    esp,0xc
c0015a9b:	ba 14 99 02 c0       	mov    edx,0xc0029914
c0015aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015aa4:	89 10                	mov    DWORD PTR [eax],edx
c0015aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015aaa:	83 ec 0c             	sub    esp,0xc
c0015aad:	50                   	push   eax
c0015aae:	e8 8f df ff ff       	call   c0013a42 <Device::~Device()>
c0015ab3:	83 c4 10             	add    esp,0x10
c0015ab6:	90                   	nop
c0015ab7:	83 c4 0c             	add    esp,0xc
c0015aba:	c3                   	ret    
c0015abb:	90                   	nop

c0015abc <Keyboard::~Keyboard()>:
c0015abc:	83 ec 0c             	sub    esp,0xc
c0015abf:	83 ec 0c             	sub    esp,0xc
c0015ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ac6:	e8 cd ff ff ff       	call   c0015a98 <Keyboard::~Keyboard()>
c0015acb:	83 c4 10             	add    esp,0x10
c0015ace:	83 ec 08             	sub    esp,0x8
c0015ad1:	68 5c 01 00 00       	push   0x15c
c0015ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ada:	e8 c2 cb ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0015adf:	83 c4 10             	add    esp,0x10
c0015ae2:	83 c4 0c             	add    esp,0xc
c0015ae5:	c3                   	ret    

c0015ae6 <LogicalDisk::close(int, int, void*)>:
c0015ae6:	83 c8 ff             	or     eax,0xffffffff
c0015ae9:	c3                   	ret    

c0015aea <LogicalDisk::~LogicalDisk()>:
c0015aea:	83 ec 0c             	sub    esp,0xc
c0015aed:	ba c4 99 02 c0       	mov    edx,0xc00299c4
c0015af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015af6:	89 10                	mov    DWORD PTR [eax],edx
c0015af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015afc:	83 ec 0c             	sub    esp,0xc
c0015aff:	50                   	push   eax
c0015b00:	e8 3d df ff ff       	call   c0013a42 <Device::~Device()>
c0015b05:	83 c4 10             	add    esp,0x10
c0015b08:	90                   	nop
c0015b09:	83 c4 0c             	add    esp,0xc
c0015b0c:	c3                   	ret    
c0015b0d:	90                   	nop

c0015b0e <LogicalDisk::~LogicalDisk()>:
c0015b0e:	83 ec 0c             	sub    esp,0xc
c0015b11:	83 ec 0c             	sub    esp,0xc
c0015b14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b18:	e8 cd ff ff ff       	call   c0015aea <LogicalDisk::~LogicalDisk()>
c0015b1d:	83 c4 10             	add    esp,0x10
c0015b20:	83 ec 08             	sub    esp,0x8
c0015b23:	68 74 01 00 00       	push   0x174
c0015b28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b2c:	e8 70 cb ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0015b31:	83 c4 10             	add    esp,0x10
c0015b34:	83 c4 0c             	add    esp,0xc
c0015b37:	c3                   	ret    

c0015b38 <LogicalDisk::open(int, int, void*)>:
c0015b38:	83 ec 18             	sub    esp,0x18
c0015b3b:	68 40 99 02 c0       	push   0xc0029940
c0015b40:	e8 56 3d 00 00       	call   c001989b <Krnl::panic(char const*)>
c0015b45:	83 c8 ff             	or     eax,0xffffffff
c0015b48:	83 c4 1c             	add    esp,0x1c
c0015b4b:	c3                   	ret    

c0015b4c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015b4c:	53                   	push   ebx
c0015b4d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015b51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b59:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015b5f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015b65:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015b6b:	77 10                	ja     c0015b7d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015b6d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015b73:	89 d3                	mov    ebx,edx
c0015b75:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015b7b:	72 05                	jb     c0015b82 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015b7d:	83 c8 ff             	or     eax,0xffffffff
c0015b80:	89 c2                	mov    edx,eax
c0015b82:	5b                   	pop    ebx
c0015b83:	c3                   	ret    

c0015b84 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015b84:	56                   	push   esi
c0015b85:	83 c8 ff             	or     eax,0xffffffff
c0015b88:	53                   	push   ebx
c0015b89:	89 c2                	mov    edx,eax
c0015b8b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015b8f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015b93:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015b97:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015b9d:	77 27                	ja     c0015bc6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015b9f:	89 d8                	mov    eax,ebx
c0015ba1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015ba7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015bad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bb2:	89 c2                	mov    edx,eax
c0015bb4:	73 10                	jae    c0015bc6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015bb6:	89 c8                	mov    eax,ecx
c0015bb8:	89 da                	mov    edx,ebx
c0015bba:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015bc0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015bc6:	5b                   	pop    ebx
c0015bc7:	5e                   	pop    esi
c0015bc8:	c3                   	ret    
c0015bc9:	90                   	nop

c0015bca <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015bca:	83 ec 1c             	sub    esp,0x1c
c0015bcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015bd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015bd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015bdd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015be1:	89 04 24             	mov    DWORD PTR [esp],eax
c0015be4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015be8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015bec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bf0:	83 ec 08             	sub    esp,0x8
c0015bf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bf7:	50                   	push   eax
c0015bf8:	e8 63 e1 ff ff       	call   c0013d60 <Device::Device(char const*)>
c0015bfd:	83 c4 10             	add    esp,0x10
c0015c00:	ba c4 99 02 c0       	mov    edx,0xc00299c4
c0015c05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c09:	89 10                	mov    DWORD PTR [eax],edx
c0015c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c0f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c1a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c25:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015c2f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c3b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015c41:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015c47:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c4b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015c4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c52:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015c58:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015c5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c62:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015c66:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015c6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c70:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015c7a:	90                   	nop
c0015c7b:	83 c4 1c             	add    esp,0x1c
c0015c7e:	c3                   	ret    
c0015c7f:	90                   	nop

c0015c80 <LogicalDisk::assignDriveLetter()>:
c0015c80:	55                   	push   ebp
c0015c81:	57                   	push   edi
c0015c82:	56                   	push   esi
c0015c83:	53                   	push   ebx
c0015c84:	83 ec 14             	sub    esp,0x14
c0015c87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015c8b:	8b 3d 40 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf40
c0015c91:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015c97:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015c9b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015ca1:	8b 3d 44 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf44
c0015ca7:	3c 01                	cmp    al,0x1
c0015ca9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015cad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015cb1:	19 c0                	sbb    eax,eax
c0015cb3:	83 e0 02             	and    eax,0x2
c0015cb6:	83 c0 41             	add    eax,0x41
c0015cb9:	0f be e8             	movsx  ebp,al
c0015cbc:	3c 43                	cmp    al,0x43
c0015cbe:	75 10                	jne    c0015cd0 <LogicalDisk::assignDriveLetter()+0x50>
c0015cc0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015cc7:	75 5d                	jne    c0015d26 <LogicalDisk::assignDriveLetter()+0xa6>
c0015cc9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015cce:	75 56                	jne    c0015d26 <LogicalDisk::assignDriveLetter()+0xa6>
c0015cd0:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015cd3:	ba 01 00 00 00       	mov    edx,0x1
c0015cd8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015cdc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015ce0:	d3 e2                	shl    edx,cl
c0015ce2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ce6:	89 d7                	mov    edi,edx
c0015ce8:	89 d6                	mov    esi,edx
c0015cea:	c1 ff 1f             	sar    edi,0x1f
c0015ced:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015cf1:	21 f9                	and    ecx,edi
c0015cf3:	09 d1                	or     ecx,edx
c0015cf5:	75 2f                	jne    c0015d26 <LogicalDisk::assignDriveLetter()+0xa6>
c0015cf7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015cfb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015cff:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015d05:	09 f2                	or     edx,esi
c0015d07:	89 15 40 cf 02 c0    	mov    DWORD PTR ds:0xc002cf40,edx
c0015d0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d11:	09 fa                	or     edx,edi
c0015d13:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015d17:	89 15 44 cf 02 c0    	mov    DWORD PTR ds:0xc002cf44,edx
c0015d1d:	89 1c bd 60 cf 02 c0 	mov    DWORD PTR [edi*4-0x3ffd30a0],ebx
c0015d24:	eb 08                	jmp    c0015d2e <LogicalDisk::assignDriveLetter()+0xae>
c0015d26:	45                   	inc    ebp
c0015d27:	40                   	inc    eax
c0015d28:	3c 5b                	cmp    al,0x5b
c0015d2a:	75 90                	jne    c0015cbc <LogicalDisk::assignDriveLetter()+0x3c>
c0015d2c:	31 c0                	xor    eax,eax
c0015d2e:	83 c4 14             	add    esp,0x14
c0015d31:	5b                   	pop    ebx
c0015d32:	5e                   	pop    esi
c0015d33:	5f                   	pop    edi
c0015d34:	5d                   	pop    ebp
c0015d35:	c3                   	ret    

c0015d36 <LogicalDisk::mount()>:
c0015d36:	56                   	push   esi
c0015d37:	53                   	push   ebx
c0015d38:	51                   	push   ecx
c0015d39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d3d:	8b 1d c8 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002cac8
c0015d43:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015d4d:	85 db                	test   ebx,ebx
c0015d4f:	74 50                	je     c0015da1 <LogicalDisk::mount()+0x6b>
c0015d51:	e8 bf 6f 00 00       	call   c001cd15 <getIRQNestingLevel()>
c0015d56:	52                   	push   edx
c0015d57:	52                   	push   edx
c0015d58:	50                   	push   eax
c0015d59:	68 64 99 02 c0       	push   0xc0029964
c0015d5e:	e8 1e ca ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0015d63:	83 c4 0c             	add    esp,0xc
c0015d66:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015d6d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d6f:	83 e8 41             	sub    eax,0x41
c0015d72:	50                   	push   eax
c0015d73:	56                   	push   esi
c0015d74:	53                   	push   ebx
c0015d75:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015d78:	83 c4 10             	add    esp,0x10
c0015d7b:	84 c0                	test   al,al
c0015d7d:	74 08                	je     c0015d87 <LogicalDisk::mount()+0x51>
c0015d7f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015d85:	eb 1c                	jmp    c0015da3 <LogicalDisk::mount()+0x6d>
c0015d87:	e8 89 6f 00 00       	call   c001cd15 <getIRQNestingLevel()>
c0015d8c:	51                   	push   ecx
c0015d8d:	51                   	push   ecx
c0015d8e:	50                   	push   eax
c0015d8f:	68 7f 99 02 c0       	push   0xc002997f
c0015d94:	e8 e8 c9 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0015d99:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015d9c:	83 c4 10             	add    esp,0x10
c0015d9f:	eb ac                	jmp    c0015d4d <LogicalDisk::mount()+0x17>
c0015da1:	31 c0                	xor    eax,eax
c0015da3:	5a                   	pop    edx
c0015da4:	5b                   	pop    ebx
c0015da5:	5e                   	pop    esi
c0015da6:	c3                   	ret    
c0015da7:	90                   	nop

c0015da8 <LogicalDisk::unmount()>:
c0015da8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dac:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015db6:	c3                   	ret    
c0015db7:	90                   	nop

c0015db8 <LogicalDisk::unassignDriveLetter()>:
c0015db8:	57                   	push   edi
c0015db9:	56                   	push   esi
c0015dba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015dbe:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015dc5:	84 c9                	test   cl,cl
c0015dc7:	75 0f                	jne    c0015dd8 <LogicalDisk::unassignDriveLetter()+0x20>
c0015dc9:	c7 44 24 0c 9a 99 02 c0 	mov    DWORD PTR [esp+0xc],0xc002999a
c0015dd1:	5e                   	pop    esi
c0015dd2:	5f                   	pop    edi
c0015dd3:	e9 c3 3a 00 00       	jmp    c001989b <Krnl::panic(char const*)>
c0015dd8:	83 e9 41             	sub    ecx,0x41
c0015ddb:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015de2:	b8 01 00 00 00       	mov    eax,0x1
c0015de7:	c7 04 8d 60 cf 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd30a0],0x0
c0015df2:	d3 e0                	shl    eax,cl
c0015df4:	89 c7                	mov    edi,eax
c0015df6:	f7 d0                	not    eax
c0015df8:	c1 ff 1f             	sar    edi,0x1f
c0015dfb:	21 05 40 cf 02 c0    	and    DWORD PTR ds:0xc002cf40,eax
c0015e01:	89 fe                	mov    esi,edi
c0015e03:	f7 d6                	not    esi
c0015e05:	21 35 44 cf 02 c0    	and    DWORD PTR ds:0xc002cf44,esi
c0015e0b:	5e                   	pop    esi
c0015e0c:	5f                   	pop    edi
c0015e0d:	c3                   	ret    

c0015e0e <LogicalDisk::read(unsigned long long, int, void*)>:
c0015e0e:	57                   	push   edi
c0015e0f:	56                   	push   esi
c0015e10:	53                   	push   ebx
c0015e11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e19:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e21:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e27:	77 41                	ja     c0015e6a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015e29:	99                   	cdq    
c0015e2a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015e30:	01 c8                	add    eax,ecx
c0015e32:	11 da                	adc    edx,ebx
c0015e34:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015e3a:	19 d7                	sbb    edi,edx
c0015e3c:	72 33                	jb     c0015e71 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015e3e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015e44:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015e4a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015e4e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015e52:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015e58:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015e5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e62:	5b                   	pop    ebx
c0015e63:	5e                   	pop    esi
c0015e64:	5f                   	pop    edi
c0015e65:	e9 f8 09 00 00       	jmp    c0016862 <VCache::read(unsigned long long, int, void*)>
c0015e6a:	b8 05 00 00 00       	mov    eax,0x5
c0015e6f:	eb 05                	jmp    c0015e76 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015e71:	b8 07 00 00 00       	mov    eax,0x7
c0015e76:	5b                   	pop    ebx
c0015e77:	5e                   	pop    esi
c0015e78:	5f                   	pop    edi
c0015e79:	c3                   	ret    

c0015e7a <LogicalDisk::write(unsigned long long, int, void*)>:
c0015e7a:	57                   	push   edi
c0015e7b:	56                   	push   esi
c0015e7c:	53                   	push   ebx
c0015e7d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015e81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e85:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015e89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e8d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e93:	77 41                	ja     c0015ed6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015e95:	99                   	cdq    
c0015e96:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015e9c:	01 c8                	add    eax,ecx
c0015e9e:	11 da                	adc    edx,ebx
c0015ea0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015ea6:	19 d7                	sbb    edi,edx
c0015ea8:	72 33                	jb     c0015edd <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015eaa:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015eb0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015eb6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015eba:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015ebe:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015ec4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ece:	5b                   	pop    ebx
c0015ecf:	5e                   	pop    esi
c0015ed0:	5f                   	pop    edi
c0015ed1:	e9 a8 08 00 00       	jmp    c001677e <VCache::write(unsigned long long, int, void*)>
c0015ed6:	b8 05 00 00 00       	mov    eax,0x5
c0015edb:	eb 05                	jmp    c0015ee2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015edd:	b8 07 00 00 00       	mov    eax,0x7
c0015ee2:	5b                   	pop    ebx
c0015ee3:	5e                   	pop    esi
c0015ee4:	5f                   	pop    edi
c0015ee5:	c3                   	ret    

c0015ee6 <Mouse::Mouse(char const*)>:
c0015ee6:	83 ec 0c             	sub    esp,0xc
c0015ee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015eed:	83 ec 08             	sub    esp,0x8
c0015ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ef4:	50                   	push   eax
c0015ef5:	e8 66 de ff ff       	call   c0013d60 <Device::Device(char const*)>
c0015efa:	83 c4 10             	add    esp,0x10
c0015efd:	ba f0 99 02 c0       	mov    edx,0xc00299f0
c0015f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f06:	89 10                	mov    DWORD PTR [eax],edx
c0015f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f0c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015f16:	90                   	nop
c0015f17:	83 c4 0c             	add    esp,0xc
c0015f1a:	c3                   	ret    
c0015f1b:	90                   	nop

c0015f1c <Mouse::~Mouse()>:
c0015f1c:	83 ec 0c             	sub    esp,0xc
c0015f1f:	ba f0 99 02 c0       	mov    edx,0xc00299f0
c0015f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f28:	89 10                	mov    DWORD PTR [eax],edx
c0015f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f2e:	83 ec 0c             	sub    esp,0xc
c0015f31:	50                   	push   eax
c0015f32:	e8 0b db ff ff       	call   c0013a42 <Device::~Device()>
c0015f37:	83 c4 10             	add    esp,0x10
c0015f3a:	90                   	nop
c0015f3b:	83 c4 0c             	add    esp,0xc
c0015f3e:	c3                   	ret    
c0015f3f:	90                   	nop

c0015f40 <Mouse::~Mouse()>:
c0015f40:	83 ec 0c             	sub    esp,0xc
c0015f43:	83 ec 0c             	sub    esp,0xc
c0015f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f4a:	e8 cd ff ff ff       	call   c0015f1c <Mouse::~Mouse()>
c0015f4f:	83 c4 10             	add    esp,0x10
c0015f52:	83 ec 08             	sub    esp,0x8
c0015f55:	68 58 01 00 00       	push   0x158
c0015f5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f5e:	e8 3e c7 ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0015f63:	83 c4 10             	add    esp,0x10
c0015f66:	83 c4 0c             	add    esp,0xc
c0015f69:	c3                   	ret    

c0015f6a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015f6a:	55                   	push   ebp
c0015f6b:	57                   	push   edi
c0015f6c:	56                   	push   esi
c0015f6d:	53                   	push   ebx
c0015f6e:	81 ec 28 01 00 00    	sub    esp,0x128
c0015f74:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015f7b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015f82:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015f89:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015f90:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015f94:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015f98:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015f9f:	e8 b8 de ff ff       	call   c0013e5c <Device::getName()>
c0015fa4:	5a                   	pop    edx
c0015fa5:	59                   	pop    ecx
c0015fa6:	50                   	push   eax
c0015fa7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015fab:	55                   	push   ebp
c0015fac:	e8 79 a7 fe ff       	call   c000072a <strcpy>
c0015fb1:	5b                   	pop    ebx
c0015fb2:	58                   	pop    eax
c0015fb3:	68 14 9a 02 c0       	push   0xc0029a14
c0015fb8:	55                   	push   ebp
c0015fb9:	e8 23 a8 fe ff       	call   c00007e1 <strcat>
c0015fbe:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015fc5:	e8 0a 95 ff ff       	call   c000f4d4 <malloc>
c0015fca:	83 c4 0c             	add    esp,0xc
c0015fcd:	89 c3                	mov    ebx,eax
c0015fcf:	57                   	push   edi
c0015fd0:	56                   	push   esi
c0015fd1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fd9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015fe0:	55                   	push   ebp
c0015fe1:	50                   	push   eax
c0015fe2:	e8 e3 fb ff ff       	call   c0015bca <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015fe7:	83 c4 14             	add    esp,0x14
c0015fea:	53                   	push   ebx
c0015feb:	e8 90 fc ff ff       	call   c0015c80 <LogicalDisk::assignDriveLetter()>
c0015ff0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ff3:	e8 3e fd ff ff       	call   c0015d36 <LogicalDisk::mount()>
c0015ff8:	58                   	pop    eax
c0015ff9:	5a                   	pop    edx
c0015ffa:	53                   	push   ebx
c0015ffb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016002:	e8 69 db ff ff       	call   c0013b70 <Device::addChild(Device*)>
c0016007:	81 c4 2c 01 00 00    	add    esp,0x12c
c001600d:	5b                   	pop    ebx
c001600e:	5e                   	pop    esi
c001600f:	5f                   	pop    edi
c0016010:	5d                   	pop    ebp
c0016011:	c3                   	ret    

c0016012 <createPartitionsForDisk(PhysicalDisk*)>:
c0016012:	55                   	push   ebp
c0016013:	57                   	push   edi
c0016014:	56                   	push   esi
c0016015:	53                   	push   ebx
c0016016:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001601c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016023:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016029:	3d 00 02 00 00       	cmp    eax,0x200
c001602e:	74 27                	je     c0016057 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016030:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016036:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001603c:	83 ec 10             	sub    esp,0x10
c001603f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016043:	99                   	cdq    
c0016044:	c1 e6 0a             	shl    esi,0xa
c0016047:	52                   	push   edx
c0016048:	89 fd                	mov    ebp,edi
c001604a:	50                   	push   eax
c001604b:	55                   	push   ebp
c001604c:	56                   	push   esi
c001604d:	e8 5a f3 00 00       	call   c00253ac <__udivdi3>
c0016052:	e9 b1 00 00 00       	jmp    c0016108 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016057:	83 ec 0c             	sub    esp,0xc
c001605a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001605c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016060:	56                   	push   esi
c0016061:	6a 01                	push   0x1
c0016063:	6a 00                	push   0x0
c0016065:	6a 00                	push   0x0
c0016067:	53                   	push   ebx
c0016068:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001606b:	83 c4 20             	add    esp,0x20
c001606e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016076:	75 0a                	jne    c0016082 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016078:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016080:	74 2c                	je     c00160ae <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016082:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016088:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001608e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016094:	83 ec 10             	sub    esp,0x10
c0016097:	0f a4 c2 0a          	shld   edx,eax,0xa
c001609b:	89 f7                	mov    edi,esi
c001609d:	c1 e0 0a             	shl    eax,0xa
c00160a0:	c1 ff 1f             	sar    edi,0x1f
c00160a3:	57                   	push   edi
c00160a4:	56                   	push   esi
c00160a5:	52                   	push   edx
c00160a6:	50                   	push   eax
c00160a7:	e8 00 f3 00 00       	call   c00253ac <__udivdi3>
c00160ac:	eb 5a                	jmp    c0016108 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00160ae:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00160b5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00160bc:	83 e1 7f             	and    ecx,0x7f
c00160bf:	83 e0 7f             	and    eax,0x7f
c00160c2:	01 c1                	add    ecx,eax
c00160c4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00160cb:	83 e0 7f             	and    eax,0x7f
c00160ce:	01 c1                	add    ecx,eax
c00160d0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00160d7:	83 e0 7f             	and    eax,0x7f
c00160da:	00 c1                	add    cl,al
c00160dc:	74 41                	je     c001611f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00160de:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00160e4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00160ea:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00160f0:	83 ec 10             	sub    esp,0x10
c00160f3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00160f7:	89 f7                	mov    edi,esi
c00160f9:	c1 e0 0a             	shl    eax,0xa
c00160fc:	c1 ff 1f             	sar    edi,0x1f
c00160ff:	57                   	push   edi
c0016100:	56                   	push   esi
c0016101:	52                   	push   edx
c0016102:	50                   	push   eax
c0016103:	e8 a4 f2 00 00       	call   c00253ac <__udivdi3>
c0016108:	83 c4 14             	add    esp,0x14
c001610b:	52                   	push   edx
c001610c:	50                   	push   eax
c001610d:	6a 00                	push   0x0
c001610f:	6a 00                	push   0x0
c0016111:	53                   	push   ebx
c0016112:	e8 53 fe ff ff       	call   c0015f6a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016117:	83 c4 20             	add    esp,0x20
c001611a:	e9 79 01 00 00       	jmp    c0016298 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001611f:	89 f0                	mov    eax,esi
c0016121:	31 f6                	xor    esi,esi
c0016123:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001612a:	75 02                	jne    c001612e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001612c:	89 f1                	mov    ecx,esi
c001612e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016135:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001613c:	c1 e2 08             	shl    edx,0x8
c001613f:	c1 e7 10             	shl    edi,0x10
c0016142:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001614a:	09 fa                	or     edx,edi
c001614c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016154:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001615b:	83 c0 10             	add    eax,0x10
c001615e:	09 fa                	or     edx,edi
c0016160:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016167:	c1 e7 18             	shl    edi,0x18
c001616a:	09 fa                	or     edx,edi
c001616c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016173:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016177:	c1 e7 10             	shl    edi,0x10
c001617a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016181:	c1 e2 08             	shl    edx,0x8
c0016184:	09 fa                	or     edx,edi
c0016186:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001618d:	09 fa                	or     edx,edi
c001618f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016196:	c1 e7 18             	shl    edi,0x18
c0016199:	09 fa                	or     edx,edi
c001619b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001619f:	46                   	inc    esi
c00161a0:	83 fe 04             	cmp    esi,0x4
c00161a3:	0f 85 7a ff ff ff    	jne    c0016123 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00161a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161ad:	83 f0 01             	xor    eax,0x1
c00161b0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00161b4:	75 57                	jne    c001620d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161ba:	83 f0 01             	xor    eax,0x1
c00161bd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00161c1:	75 4a                	jne    c001620d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00161c7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00161cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00161d7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00161dd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00161e3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00161e9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00161ed:	89 f7                	mov    edi,esi
c00161ef:	c1 e0 0a             	shl    eax,0xa
c00161f2:	c1 ff 1f             	sar    edi,0x1f
c00161f5:	57                   	push   edi
c00161f6:	56                   	push   esi
c00161f7:	52                   	push   edx
c00161f8:	50                   	push   eax
c00161f9:	e8 ae f1 00 00       	call   c00253ac <__udivdi3>
c00161fe:	83 c4 10             	add    esp,0x10
c0016201:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016205:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016209:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001620d:	84 c9                	test   cl,cl
c001620f:	74 53                	je     c0016264 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016211:	0f b6 c9             	movzx  ecx,cl
c0016214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016218:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001621c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016220:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016224:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016228:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001622c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016230:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016238:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001623c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016240:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016244:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016248:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001624c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016250:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016254:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016258:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001625c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016260:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016264:	31 ed                	xor    ebp,ebp
c0016266:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001626a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001626e:	89 f8                	mov    eax,edi
c0016270:	09 f0                	or     eax,esi
c0016272:	74 1e                	je     c0016292 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016274:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016278:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001627c:	89 d1                	mov    ecx,edx
c001627e:	09 c1                	or     ecx,eax
c0016280:	74 10                	je     c0016292 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016282:	83 ec 0c             	sub    esp,0xc
c0016285:	57                   	push   edi
c0016286:	56                   	push   esi
c0016287:	52                   	push   edx
c0016288:	50                   	push   eax
c0016289:	53                   	push   ebx
c001628a:	e8 db fc ff ff       	call   c0015f6a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001628f:	83 c4 20             	add    esp,0x20
c0016292:	45                   	inc    ebp
c0016293:	83 fd 04             	cmp    ebp,0x4
c0016296:	75 ce                	jne    c0016266 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016298:	81 c4 5c 02 00 00    	add    esp,0x25c
c001629e:	5b                   	pop    ebx
c001629f:	5e                   	pop    esi
c00162a0:	5f                   	pop    edi
c00162a1:	5d                   	pop    ebp
c00162a2:	c3                   	ret    
c00162a3:	90                   	nop

c00162a4 <Serial::Serial(char const*)>:
c00162a4:	83 ec 0c             	sub    esp,0xc
c00162a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162ab:	83 ec 08             	sub    esp,0x8
c00162ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162b2:	50                   	push   eax
c00162b3:	e8 a8 da ff ff       	call   c0013d60 <Device::Device(char const*)>
c00162b8:	83 c4 10             	add    esp,0x10
c00162bb:	ba 28 9a 02 c0       	mov    edx,0xc0029a28
c00162c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162c4:	89 10                	mov    DWORD PTR [eax],edx
c00162c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162ca:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00162d4:	90                   	nop
c00162d5:	83 c4 0c             	add    esp,0xc
c00162d8:	c3                   	ret    
c00162d9:	90                   	nop

c00162da <Serial::~Serial()>:
c00162da:	83 ec 0c             	sub    esp,0xc
c00162dd:	ba 28 9a 02 c0       	mov    edx,0xc0029a28
c00162e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162e6:	89 10                	mov    DWORD PTR [eax],edx
c00162e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162ec:	83 ec 0c             	sub    esp,0xc
c00162ef:	50                   	push   eax
c00162f0:	e8 4d d7 ff ff       	call   c0013a42 <Device::~Device()>
c00162f5:	83 c4 10             	add    esp,0x10
c00162f8:	90                   	nop
c00162f9:	83 c4 0c             	add    esp,0xc
c00162fc:	c3                   	ret    
c00162fd:	90                   	nop

c00162fe <Serial::~Serial()>:
c00162fe:	83 ec 0c             	sub    esp,0xc
c0016301:	83 ec 0c             	sub    esp,0xc
c0016304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016308:	e8 cd ff ff ff       	call   c00162da <Serial::~Serial()>
c001630d:	83 c4 10             	add    esp,0x10
c0016310:	83 ec 08             	sub    esp,0x8
c0016313:	68 58 01 00 00       	push   0x158
c0016318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001631c:	e8 80 c3 ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0016321:	83 c4 10             	add    esp,0x10
c0016324:	83 c4 0c             	add    esp,0xc
c0016327:	c3                   	ret    

c0016328 <Timer::Timer(char const*)>:
c0016328:	83 ec 0c             	sub    esp,0xc
c001632b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001632f:	83 ec 08             	sub    esp,0x8
c0016332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016336:	50                   	push   eax
c0016337:	e8 24 da ff ff       	call   c0013d60 <Device::Device(char const*)>
c001633c:	83 c4 10             	add    esp,0x10
c001633f:	ba 6c 9a 02 c0       	mov    edx,0xc0029a6c
c0016344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016348:	89 10                	mov    DWORD PTR [eax],edx
c001634a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001634e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016358:	90                   	nop
c0016359:	83 c4 0c             	add    esp,0xc
c001635c:	c3                   	ret    
c001635d:	90                   	nop

c001635e <Timer::~Timer()>:
c001635e:	83 ec 0c             	sub    esp,0xc
c0016361:	ba 6c 9a 02 c0       	mov    edx,0xc0029a6c
c0016366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001636a:	89 10                	mov    DWORD PTR [eax],edx
c001636c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016370:	83 ec 0c             	sub    esp,0xc
c0016373:	50                   	push   eax
c0016374:	e8 c9 d6 ff ff       	call   c0013a42 <Device::~Device()>
c0016379:	83 c4 10             	add    esp,0x10
c001637c:	90                   	nop
c001637d:	83 c4 0c             	add    esp,0xc
c0016380:	c3                   	ret    
c0016381:	90                   	nop

c0016382 <Timer::~Timer()>:
c0016382:	83 ec 0c             	sub    esp,0xc
c0016385:	83 ec 0c             	sub    esp,0xc
c0016388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001638c:	e8 cd ff ff ff       	call   c001635e <Timer::~Timer()>
c0016391:	83 c4 10             	add    esp,0x10
c0016394:	83 ec 08             	sub    esp,0x8
c0016397:	68 5c 01 00 00       	push   0x15c
c001639c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163a0:	e8 fc c2 ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c00163a5:	83 c4 10             	add    esp,0x10
c00163a8:	83 c4 0c             	add    esp,0xc
c00163ab:	c3                   	ret    

c00163ac <Timer::read()>:
c00163ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163b0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163b6:	c3                   	ret    

c00163b7 <timerHandler(unsigned long long)>:
c00163b7:	55                   	push   ebp
c00163b8:	57                   	push   edi
c00163b9:	56                   	push   esi
c00163ba:	53                   	push   ebx
c00163bb:	83 ec 0c             	sub    esp,0xc
c00163be:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00163c2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00163c6:	01 35 d0 cf 02 c0    	add    DWORD PTR ds:0xc002cfd0,esi
c00163cc:	11 3d d4 cf 02 c0    	adc    DWORD PTR ds:0xc002cfd4,edi
c00163d2:	80 3d 4d c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c94d,0x0
c00163d9:	0f 84 07 01 00 00    	je     c00164e6 <timerHandler(unsigned long long)+0x12f>
c00163df:	e8 6d 69 00 00       	call   c001cd51 <lockStuff()>
c00163e4:	83 ec 0c             	sub    esp,0xc
c00163e7:	68 7c de 02 c0       	push   0xc002de7c
c00163ec:	e8 2d 10 01 00       	call   c002741e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163f1:	c7 04 24 7c de 02 c0 	mov    DWORD PTR [esp],0xc002de7c
c00163f8:	89 c3                	mov    ebx,eax
c00163fa:	e8 27 10 01 00       	call   c0027426 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00163ff:	83 c4 10             	add    esp,0x10
c0016402:	84 c0                	test   al,al
c0016404:	74 60                	je     c0016466 <timerHandler(unsigned long long)+0xaf>
c0016406:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001640c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c001640f:	85 c0                	test   eax,eax
c0016411:	0f 85 91 00 00 00    	jne    c00164a8 <timerHandler(unsigned long long)+0xf1>
c0016417:	e9 be 00 00 00       	jmp    c00164da <timerHandler(unsigned long long)+0x123>
c001641c:	83 ec 0c             	sub    esp,0xc
c001641f:	55                   	push   ebp
c0016420:	e8 1d 6f 00 00       	call   c001d342 <unblockTask(ThreadControlBlock*)>
c0016425:	83 c4 10             	add    esp,0x10
c0016428:	39 eb                	cmp    ebx,ebp
c001642a:	75 12                	jne    c001643e <timerHandler(unsigned long long)+0x87>
c001642c:	83 ec 0c             	sub    esp,0xc
c001642f:	68 7c de 02 c0       	push   0xc002de7c
c0016434:	e8 e5 0f 01 00       	call   c002741e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016439:	89 c3                	mov    ebx,eax
c001643b:	83 c4 10             	add    esp,0x10
c001643e:	83 ec 0c             	sub    esp,0xc
c0016441:	68 7c de 02 c0       	push   0xc002de7c
c0016446:	e8 db 0f 01 00       	call   c0027426 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001644b:	83 c4 10             	add    esp,0x10
c001644e:	84 c0                	test   al,al
c0016450:	75 b4                	jne    c0016406 <timerHandler(unsigned long long)+0x4f>
c0016452:	83 ec 0c             	sub    esp,0xc
c0016455:	68 7c de 02 c0       	push   0xc002de7c
c001645a:	e8 bf 0f 01 00       	call   c002741e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001645f:	83 c4 10             	add    esp,0x10
c0016462:	39 d8                	cmp    eax,ebx
c0016464:	74 a0                	je     c0016406 <timerHandler(unsigned long long)+0x4f>
c0016466:	83 ec 0c             	sub    esp,0xc
c0016469:	68 7c de 02 c0       	push   0xc002de7c
c001646e:	e8 ab 0f 01 00       	call   c002741e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016473:	c7 04 24 7c de 02 c0 	mov    DWORD PTR [esp],0xc002de7c
c001647a:	89 c5                	mov    ebp,eax
c001647c:	e8 c1 0f 01 00       	call   c0027442 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016481:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016484:	83 c4 10             	add    esp,0x10
c0016487:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001648a:	39 15 d0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfd0,edx
c0016490:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0016495:	19 c8                	sbb    eax,ecx
c0016497:	73 83                	jae    c001641c <timerHandler(unsigned long long)+0x65>
c0016499:	50                   	push   eax
c001649a:	50                   	push   eax
c001649b:	55                   	push   ebp
c001649c:	68 7c de 02 c0       	push   0xc002de7c
c00164a1:	e8 4a 10 01 00       	call   c00274f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164a6:	eb 93                	jmp    c001643b <timerHandler(unsigned long long)+0x84>
c00164a8:	80 3d 4c c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c94c,0x0
c00164af:	74 29                	je     c00164da <timerHandler(unsigned long long)+0x123>
c00164b1:	39 c6                	cmp    esi,eax
c00164b3:	bb 00 00 00 00       	mov    ebx,0x0
c00164b8:	19 df                	sbb    edi,ebx
c00164ba:	72 19                	jb     c00164d5 <timerHandler(unsigned long long)+0x11e>
c00164bc:	e8 69 68 00 00       	call   c001cd2a <lockScheduler()>
c00164c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164c6:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00164c9:	e8 98 6b 00 00       	call   c001d066 <schedule()>
c00164ce:	e8 59 68 00 00       	call   c001cd2c <unlockScheduler()>
c00164d3:	eb 05                	jmp    c00164da <timerHandler(unsigned long long)+0x123>
c00164d5:	29 f0                	sub    eax,esi
c00164d7:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00164da:	83 c4 0c             	add    esp,0xc
c00164dd:	5b                   	pop    ebx
c00164de:	5e                   	pop    esi
c00164df:	5f                   	pop    edi
c00164e0:	5d                   	pop    ebp
c00164e1:	e9 05 6c 00 00       	jmp    c001d0eb <unlockStuff()>
c00164e6:	83 c4 0c             	add    esp,0xc
c00164e9:	5b                   	pop    ebx
c00164ea:	5e                   	pop    esi
c00164eb:	5f                   	pop    edi
c00164ec:	5d                   	pop    ebp
c00164ed:	c3                   	ret    

c00164ee <setupTimer(int)>:
c00164ee:	57                   	push   edi
c00164ef:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00164f4:	56                   	push   esi
c00164f5:	53                   	push   ebx
c00164f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016500:	83 ec 0c             	sub    esp,0xc
c0016503:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016509:	e8 4e d9 ff ff       	call   c0013e5c <Device::getName()>
c001650e:	83 c4 10             	add    esp,0x10
c0016511:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016514:	0f 85 8d 00 00 00    	jne    c00165a7 <setupTimer(int)+0xb9>
c001651a:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001651f:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016526:	74 7f                	je     c00165a7 <setupTimer(int)+0xb9>
c0016528:	83 ec 0c             	sub    esp,0xc
c001652b:	68 5c 01 00 00       	push   0x15c
c0016530:	e8 9f 8f ff ff       	call   c000f4d4 <malloc>
c0016535:	89 04 24             	mov    DWORD PTR [esp],eax
c0016538:	89 c3                	mov    ebx,eax
c001653a:	e8 51 ea 00 00       	call   c0024f90 <PIT::PIT()>
c001653f:	59                   	pop    ecx
c0016540:	5f                   	pop    edi
c0016541:	53                   	push   ebx
c0016542:	ff 35 48 c9 02 c0    	push   DWORD PTR ds:0xc002c948
c0016548:	e8 23 d6 ff ff       	call   c0013b70 <Device::addChild(Device*)>
c001654d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001654f:	6a 00                	push   0x0
c0016551:	6a 00                	push   0x0
c0016553:	56                   	push   esi
c0016554:	53                   	push   ebx
c0016555:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016558:	83 c4 14             	add    esp,0x14
c001655b:	68 60 01 00 00       	push   0x160
c0016560:	e8 6f 8f ff ff       	call   c000f4d4 <malloc>
c0016565:	89 04 24             	mov    DWORD PTR [esp],eax
c0016568:	89 c7                	mov    edi,eax
c001656a:	e8 d1 e8 00 00       	call   c0024e40 <APICTimer::APICTimer()>
c001656f:	6a 00                	push   0x0
c0016571:	6a 00                	push   0x0
c0016573:	56                   	push   esi
c0016574:	57                   	push   edi
c0016575:	e8 c8 e7 00 00       	call   c0024d42 <APICTimer::open(int, int, void*)>
c001657a:	83 c4 20             	add    esp,0x20
c001657d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001657f:	6a 00                	push   0x0
c0016581:	6a 00                	push   0x0
c0016583:	6a 00                	push   0x0
c0016585:	53                   	push   ebx
c0016586:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016589:	58                   	pop    eax
c001658a:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001658f:	5a                   	pop    edx
c0016590:	57                   	push   edi
c0016591:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016597:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001659d:	e8 ce d5 ff ff       	call   c0013b70 <Device::addChild(Device*)>
c00165a2:	83 c4 10             	add    esp,0x10
c00165a5:	eb 33                	jmp    c00165da <setupTimer(int)+0xec>
c00165a7:	83 ec 0c             	sub    esp,0xc
c00165aa:	68 5c 01 00 00       	push   0x15c
c00165af:	e8 20 8f ff ff       	call   c000f4d4 <malloc>
c00165b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00165b7:	89 c3                	mov    ebx,eax
c00165b9:	e8 d2 e9 00 00       	call   c0024f90 <PIT::PIT()>
c00165be:	58                   	pop    eax
c00165bf:	5a                   	pop    edx
c00165c0:	53                   	push   ebx
c00165c1:	ff 35 48 c9 02 c0    	push   DWORD PTR ds:0xc002c948
c00165c7:	e8 a4 d5 ff ff       	call   c0013b70 <Device::addChild(Device*)>
c00165cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165ce:	6a 00                	push   0x0
c00165d0:	6a 00                	push   0x0
c00165d2:	56                   	push   esi
c00165d3:	53                   	push   ebx
c00165d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00165d7:	83 c4 20             	add    esp,0x20
c00165da:	89 d8                	mov    eax,ebx
c00165dc:	5b                   	pop    ebx
c00165dd:	5e                   	pop    esi
c00165de:	5f                   	pop    edi
c00165df:	c3                   	ret    

c00165e0 <VCache::VCache(PhysicalDisk*)>:
c00165e0:	53                   	push   ebx
c00165e1:	83 ec 18             	sub    esp,0x18
c00165e4:	ba 9c 9a 02 c0       	mov    edx,0xc0029a9c
c00165e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ed:	89 10                	mov    DWORD PTR [eax],edx
c00165ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00165fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165fe:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016605:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016609:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016610:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016617:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001661b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016622:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001662d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016638:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001663c:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016644:	83 ec 0c             	sub    esp,0xc
c0016647:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001664b:	e8 84 8e ff ff       	call   c000f4d4 <malloc>
c0016650:	83 c4 10             	add    esp,0x10
c0016653:	89 c3                	mov    ebx,eax
c0016655:	83 ec 0c             	sub    esp,0xc
c0016658:	53                   	push   ebx
c0016659:	e8 ec 67 00 00       	call   c001ce4a <Mutex::Mutex()>
c001665e:	83 c4 10             	add    esp,0x10
c0016661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016665:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016668:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001666c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016670:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016673:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016677:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001667e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016682:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001668c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001668f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016693:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016699:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001669f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00166a3:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00166a6:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00166a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166ad:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00166b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166b5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00166bb:	c1 e0 06             	shl    eax,0x6
c00166be:	83 ec 0c             	sub    esp,0xc
c00166c1:	50                   	push   eax
c00166c2:	e8 0d 8e ff ff       	call   c000f4d4 <malloc>
c00166c7:	83 c4 10             	add    esp,0x10
c00166ca:	89 c2                	mov    edx,eax
c00166cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166d0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00166d3:	90                   	nop
c00166d4:	83 c4 18             	add    esp,0x18
c00166d7:	5b                   	pop    ebx
c00166d8:	c3                   	ret    
c00166d9:	90                   	nop

c00166da <VCache::writeWriteBuffer()>:
c00166da:	53                   	push   ebx
c00166db:	83 ec 14             	sub    esp,0x14
c00166de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00166e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00166e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00166e7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00166ea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166ed:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00166f0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00166f3:	50                   	push   eax
c00166f4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00166f7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00166fe:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016705:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016709:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016710:	83 c4 28             	add    esp,0x28
c0016713:	5b                   	pop    ebx
c0016714:	c3                   	ret    
c0016715:	90                   	nop

c0016716 <VCache::~VCache()>:
c0016716:	83 ec 0c             	sub    esp,0xc
c0016719:	ba 9c 9a 02 c0       	mov    edx,0xc0029a9c
c001671e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016722:	89 10                	mov    DWORD PTR [eax],edx
c0016724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016728:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001672b:	84 c0                	test   al,al
c001672d:	74 0f                	je     c001673e <VCache::~VCache()+0x28>
c001672f:	83 ec 0c             	sub    esp,0xc
c0016732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016736:	e8 9f ff ff ff       	call   c00166da <VCache::writeWriteBuffer()>
c001673b:	83 c4 10             	add    esp,0x10
c001673e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016742:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016745:	83 ec 0c             	sub    esp,0xc
c0016748:	50                   	push   eax
c0016749:	e8 96 8d ff ff       	call   c000f4e4 <free>
c001674e:	83 c4 10             	add    esp,0x10
c0016751:	90                   	nop
c0016752:	83 c4 0c             	add    esp,0xc
c0016755:	c3                   	ret    

c0016756 <VCache::~VCache()>:
c0016756:	83 ec 0c             	sub    esp,0xc
c0016759:	83 ec 0c             	sub    esp,0xc
c001675c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016760:	e8 b1 ff ff ff       	call   c0016716 <VCache::~VCache()>
c0016765:	83 c4 10             	add    esp,0x10
c0016768:	83 ec 08             	sub    esp,0x8
c001676b:	6a 30                	push   0x30
c001676d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016771:	e8 2b bf ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0016776:	83 c4 10             	add    esp,0x10
c0016779:	83 c4 0c             	add    esp,0xc
c001677c:	c3                   	ret    
c001677d:	90                   	nop

c001677e <VCache::write(unsigned long long, int, void*)>:
c001677e:	55                   	push   ebp
c001677f:	57                   	push   edi
c0016780:	56                   	push   esi
c0016781:	53                   	push   ebx
c0016782:	83 ec 28             	sub    esp,0x28
c0016785:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016789:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001678d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016791:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016795:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016798:	e8 0f 6b 00 00       	call   c001d2ac <Semaphore::acquire()>
c001679d:	83 c4 10             	add    esp,0x10
c00167a0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00167a4:	74 66                	je     c001680c <VCache::write(unsigned long long, int, void*)+0x8e>
c00167a6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00167a9:	99                   	cdq    
c00167aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167ae:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00167b1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00167b4:	89 c1                	mov    ecx,eax
c00167b6:	89 d0                	mov    eax,edx
c00167b8:	31 f1                	xor    ecx,esi
c00167ba:	31 f8                	xor    eax,edi
c00167bc:	89 ca                	mov    edx,ecx
c00167be:	09 c2                	or     edx,eax
c00167c0:	75 3e                	jne    c0016800 <VCache::write(unsigned long long, int, void*)+0x82>
c00167c2:	83 fd 01             	cmp    ebp,0x1
c00167c5:	75 39                	jne    c0016800 <VCache::write(unsigned long long, int, void*)+0x82>
c00167c7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00167ca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00167d0:	51                   	push   ecx
c00167d1:	50                   	push   eax
c00167d2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167d6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00167da:	0f af c8             	imul   ecx,eax
c00167dd:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00167e0:	51                   	push   ecx
c00167e1:	e8 6f 9e fe ff       	call   c0000655 <memcpy>
c00167e6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00167e9:	83 c4 10             	add    esp,0x10
c00167ec:	40                   	inc    eax
c00167ed:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00167f0:	83 f8 40             	cmp    eax,0x40
c00167f3:	75 57                	jne    c001684c <VCache::write(unsigned long long, int, void*)+0xce>
c00167f5:	83 ec 0c             	sub    esp,0xc
c00167f8:	53                   	push   ebx
c00167f9:	e8 dc fe ff ff       	call   c00166da <VCache::writeWriteBuffer()>
c00167fe:	eb 34                	jmp    c0016834 <VCache::write(unsigned long long, int, void*)+0xb6>
c0016800:	83 ec 0c             	sub    esp,0xc
c0016803:	53                   	push   ebx
c0016804:	e8 d1 fe ff ff       	call   c00166da <VCache::writeWriteBuffer()>
c0016809:	83 c4 10             	add    esp,0x10
c001680c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001680f:	83 fd 3f             	cmp    ebp,0x3f
c0016812:	7f 25                	jg     c0016839 <VCache::write(unsigned long long, int, void*)+0xbb>
c0016814:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016817:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001681a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001681d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016821:	52                   	push   edx
c0016822:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016828:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001682c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001682f:	e8 21 9e fe ff       	call   c0000655 <memcpy>
c0016834:	83 c4 10             	add    esp,0x10
c0016837:	eb 13                	jmp    c001684c <VCache::write(unsigned long long, int, void*)+0xce>
c0016839:	83 ec 0c             	sub    esp,0xc
c001683c:	8b 10                	mov    edx,DWORD PTR [eax]
c001683e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016842:	55                   	push   ebp
c0016843:	57                   	push   edi
c0016844:	56                   	push   esi
c0016845:	50                   	push   eax
c0016846:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016849:	83 c4 20             	add    esp,0x20
c001684c:	83 ec 0c             	sub    esp,0xc
c001684f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016852:	e8 03 70 00 00       	call   c001d85a <Semaphore::release()>
c0016857:	83 c4 2c             	add    esp,0x2c
c001685a:	31 c0                	xor    eax,eax
c001685c:	5b                   	pop    ebx
c001685d:	5e                   	pop    esi
c001685e:	5f                   	pop    edi
c001685f:	5d                   	pop    ebp
c0016860:	c3                   	ret    
c0016861:	90                   	nop

c0016862 <VCache::read(unsigned long long, int, void*)>:
c0016862:	57                   	push   edi
c0016863:	56                   	push   esi
c0016864:	53                   	push   ebx
c0016865:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016869:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001686d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016871:	83 ec 0c             	sub    esp,0xc
c0016874:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016877:	e8 30 6a 00 00       	call   c001d2ac <Semaphore::acquire()>
c001687c:	83 c4 10             	add    esp,0x10
c001687f:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016883:	74 0c                	je     c0016891 <VCache::read(unsigned long long, int, void*)+0x2f>
c0016885:	83 ec 0c             	sub    esp,0xc
c0016888:	53                   	push   ebx
c0016889:	e8 4c fe ff ff       	call   c00166da <VCache::writeWriteBuffer()>
c001688e:	83 c4 10             	add    esp,0x10
c0016891:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016894:	83 ec 0c             	sub    esp,0xc
c0016897:	8b 10                	mov    edx,DWORD PTR [eax]
c0016899:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001689d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168a1:	57                   	push   edi
c00168a2:	56                   	push   esi
c00168a3:	50                   	push   eax
c00168a4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00168a7:	83 c4 14             	add    esp,0x14
c00168aa:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00168ad:	e8 a8 6f 00 00       	call   c001d85a <Semaphore::release()>
c00168b2:	83 c4 10             	add    esp,0x10
c00168b5:	31 c0                	xor    eax,eax
c00168b7:	5b                   	pop    ebx
c00168b8:	5e                   	pop    esi
c00168b9:	5f                   	pop    edi
c00168ba:	c3                   	ret    
c00168bb:	90                   	nop

c00168bc <Video::putrect(int, int, int, int, unsigned int)>:
c00168bc:	55                   	push   ebp
c00168bd:	57                   	push   edi
c00168be:	56                   	push   esi
c00168bf:	53                   	push   ebx
c00168c0:	83 ec 1c             	sub    esp,0x1c
c00168c3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00168c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168cb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00168cf:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00168d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00168d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168db:	01 df                	add    edi,ebx
c00168dd:	39 fb                	cmp    ebx,edi
c00168df:	7d 1f                	jge    c0016900 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00168e1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00168e5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00168e9:	7d 12                	jge    c00168fd <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00168eb:	8b 16                	mov    edx,DWORD PTR [esi]
c00168ed:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00168f1:	53                   	push   ebx
c00168f2:	55                   	push   ebp
c00168f3:	45                   	inc    ebp
c00168f4:	56                   	push   esi
c00168f5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00168f8:	83 c4 10             	add    esp,0x10
c00168fb:	eb e8                	jmp    c00168e5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00168fd:	43                   	inc    ebx
c00168fe:	eb dd                	jmp    c00168dd <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016900:	83 c4 1c             	add    esp,0x1c
c0016903:	5b                   	pop    ebx
c0016904:	5e                   	pop    esi
c0016905:	5f                   	pop    edi
c0016906:	5d                   	pop    ebp
c0016907:	c3                   	ret    

c0016908 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016908:	55                   	push   ebp
c0016909:	57                   	push   edi
c001690a:	31 ff                	xor    edi,edi
c001690c:	56                   	push   esi
c001690d:	53                   	push   ebx
c001690e:	83 ec 1c             	sub    esp,0x1c
c0016911:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016915:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016919:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016920:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016925:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016929:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001692d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016931:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016934:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016938:	01 f9                	add    ecx,edi
c001693a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001693e:	7d 2f                	jge    c001696f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016940:	31 f6                	xor    esi,esi
c0016942:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016946:	01 f2                	add    edx,esi
c0016948:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001694c:	7d 1a                	jge    c0016968 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001694e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016951:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016954:	46                   	inc    esi
c0016955:	51                   	push   ecx
c0016956:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001695a:	52                   	push   edx
c001695b:	55                   	push   ebp
c001695c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001695f:	83 c4 10             	add    esp,0x10
c0016962:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016966:	eb da                	jmp    c0016942 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016968:	47                   	inc    edi
c0016969:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001696d:	eb c5                	jmp    c0016934 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001696f:	83 c4 1c             	add    esp,0x1c
c0016972:	5b                   	pop    ebx
c0016973:	5e                   	pop    esi
c0016974:	5f                   	pop    edi
c0016975:	5d                   	pop    ebp
c0016976:	c3                   	ret    
c0016977:	90                   	nop

c0016978 <Video::blit(unsigned int*, int, int, int, int)>:
c0016978:	55                   	push   ebp
c0016979:	57                   	push   edi
c001697a:	56                   	push   esi
c001697b:	53                   	push   ebx
c001697c:	83 ec 1c             	sub    esp,0x1c
c001697f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016983:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016987:	85 c0                	test   eax,eax
c0016989:	79 02                	jns    c001698d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001698b:	31 c0                	xor    eax,eax
c001698d:	c1 e0 02             	shl    eax,0x2
c0016990:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016994:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016998:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001699c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00169a0:	39 d8                	cmp    eax,ebx
c00169a2:	7e 49                	jle    c00169ed <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00169a4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00169aa:	7c 41                	jl     c00169ed <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00169ac:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00169b0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00169b4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00169b8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00169bc:	39 f9                	cmp    ecx,edi
c00169be:	7e 22                	jle    c00169e2 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00169c0:	83 c5 04             	add    ebp,0x4
c00169c3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00169c9:	7c 14                	jl     c00169df <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00169cb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00169cd:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00169d0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00169d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00169d8:	56                   	push   esi
c00169d9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00169dc:	83 c4 10             	add    esp,0x10
c00169df:	47                   	inc    edi
c00169e0:	eb d2                	jmp    c00169b4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00169e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169e6:	43                   	inc    ebx
c00169e7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00169eb:	eb ab                	jmp    c0016998 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00169ed:	83 c4 1c             	add    esp,0x1c
c00169f0:	5b                   	pop    ebx
c00169f1:	5e                   	pop    esi
c00169f2:	5f                   	pop    edi
c00169f3:	5d                   	pop    ebp
c00169f4:	c3                   	ret    
c00169f5:	90                   	nop

c00169f6 <Video::clearScreen(unsigned int)>:
c00169f6:	57                   	push   edi
c00169f7:	56                   	push   esi
c00169f8:	53                   	push   ebx
c00169f9:	31 db                	xor    ebx,ebx
c00169fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00169ff:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016a05:	7e 1f                	jle    c0016a26 <Video::clearScreen(unsigned int)+0x30>
c0016a07:	31 ff                	xor    edi,edi
c0016a09:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016a0f:	7e 12                	jle    c0016a23 <Video::clearScreen(unsigned int)+0x2d>
c0016a11:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a17:	53                   	push   ebx
c0016a18:	57                   	push   edi
c0016a19:	47                   	inc    edi
c0016a1a:	56                   	push   esi
c0016a1b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016a1e:	83 c4 10             	add    esp,0x10
c0016a21:	eb e6                	jmp    c0016a09 <Video::clearScreen(unsigned int)+0x13>
c0016a23:	43                   	inc    ebx
c0016a24:	eb d9                	jmp    c00169ff <Video::clearScreen(unsigned int)+0x9>
c0016a26:	5b                   	pop    ebx
c0016a27:	5e                   	pop    esi
c0016a28:	5f                   	pop    edi
c0016a29:	c3                   	ret    

c0016a2a <Video::putpixel(int, int, unsigned int)>:
c0016a2a:	c7 44 24 04 a4 9a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029aa4
c0016a32:	e9 64 2e 00 00       	jmp    c001989b <Krnl::panic(char const*)>
c0016a37:	90                   	nop

c0016a38 <Video::Video(char const*)>:
c0016a38:	83 ec 0c             	sub    esp,0xc
c0016a3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a3f:	83 ec 08             	sub    esp,0x8
c0016a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a46:	50                   	push   eax
c0016a47:	e8 14 d3 ff ff       	call   c0013d60 <Device::Device(char const*)>
c0016a4c:	83 c4 10             	add    esp,0x10
c0016a4f:	ba 28 9b 02 c0       	mov    edx,0xc0029b28
c0016a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a58:	89 10                	mov    DWORD PTR [eax],edx
c0016a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a5e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016a68:	90                   	nop
c0016a69:	83 c4 0c             	add    esp,0xc
c0016a6c:	c3                   	ret    
c0016a6d:	90                   	nop

c0016a6e <Video::~Video()>:
c0016a6e:	83 ec 0c             	sub    esp,0xc
c0016a71:	ba 28 9b 02 c0       	mov    edx,0xc0029b28
c0016a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a7a:	89 10                	mov    DWORD PTR [eax],edx
c0016a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a80:	83 ec 0c             	sub    esp,0xc
c0016a83:	50                   	push   eax
c0016a84:	e8 b9 cf ff ff       	call   c0013a42 <Device::~Device()>
c0016a89:	83 c4 10             	add    esp,0x10
c0016a8c:	90                   	nop
c0016a8d:	83 c4 0c             	add    esp,0xc
c0016a90:	c3                   	ret    
c0016a91:	90                   	nop

c0016a92 <Video::~Video()>:
c0016a92:	83 ec 0c             	sub    esp,0xc
c0016a95:	83 ec 0c             	sub    esp,0xc
c0016a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a9c:	e8 cd ff ff ff       	call   c0016a6e <Video::~Video()>
c0016aa1:	83 c4 10             	add    esp,0x10
c0016aa4:	83 ec 08             	sub    esp,0x8
c0016aa7:	68 64 01 00 00       	push   0x164
c0016aac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ab0:	e8 ec bb ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0016ab5:	83 c4 10             	add    esp,0x10
c0016ab8:	83 c4 0c             	add    esp,0xc
c0016abb:	c3                   	ret    

c0016abc <Video::isMonochrome()>:
c0016abc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ac0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016ac6:	c3                   	ret    
c0016ac7:	90                   	nop

c0016ac8 <Video::getWidth()>:
c0016ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016acc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016ad2:	c3                   	ret    
c0016ad3:	90                   	nop

c0016ad4 <Video::getHeight()>:
c0016ad4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ad8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016ade:	c3                   	ret    
c0016adf:	90                   	nop

c0016ae0 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016ae0:	55                   	push   ebp
c0016ae1:	57                   	push   edi
c0016ae2:	56                   	push   esi
c0016ae3:	53                   	push   ebx
c0016ae4:	83 ec 2c             	sub    esp,0x2c
c0016ae7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016aeb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016aef:	83 f8 01             	cmp    eax,0x1
c0016af2:	19 c9                	sbb    ecx,ecx
c0016af4:	31 db                	xor    ebx,ebx
c0016af6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016afa:	89 cd                	mov    ebp,ecx
c0016afc:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016b04:	f7 d5                	not    ebp
c0016b06:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016b0c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016b10:	01 d8                	add    eax,ebx
c0016b12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b16:	56                   	push   esi
c0016b17:	e8 b8 ff ff ff       	call   c0016ad4 <Video::getHeight()>
c0016b1c:	59                   	pop    ecx
c0016b1d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016b21:	7e 70                	jle    c0016b93 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016b23:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016b27:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016b2b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016b2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b32:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016b36:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016b3d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b41:	89 f8                	mov    eax,edi
c0016b43:	83 c0 20             	add    eax,0x20
c0016b46:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b4a:	56                   	push   esi
c0016b4b:	e8 78 ff ff ff       	call   c0016ac8 <Video::getWidth()>
c0016b50:	5a                   	pop    edx
c0016b51:	39 c7                	cmp    edi,eax
c0016b53:	7d 34                	jge    c0016b89 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016b55:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016b5a:	74 05                	je     c0016b61 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016b5c:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b5e:	55                   	push   ebp
c0016b5f:	eb 0d                	jmp    c0016b6e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016b61:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016b66:	74 12                	je     c0016b7a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016b68:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b6e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b72:	57                   	push   edi
c0016b73:	56                   	push   esi
c0016b74:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016b77:	83 c4 10             	add    esp,0x10
c0016b7a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016b7e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016b82:	47                   	inc    edi
c0016b83:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016b87:	75 c1                	jne    c0016b4a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016b89:	43                   	inc    ebx
c0016b8a:	83 fb 20             	cmp    ebx,0x20
c0016b8d:	0f 85 79 ff ff ff    	jne    c0016b0c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016b93:	83 c4 2c             	add    esp,0x2c
c0016b96:	5b                   	pop    ebx
c0016b97:	5e                   	pop    esi
c0016b98:	5f                   	pop    edi
c0016b99:	5d                   	pop    ebp
c0016b9a:	c3                   	ret    
c0016b9b:	90                   	nop

c0016b9c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016b9c:	55                   	push   ebp
c0016b9d:	57                   	push   edi
c0016b9e:	56                   	push   esi
c0016b9f:	53                   	push   ebx
c0016ba0:	83 ec 28             	sub    esp,0x28
c0016ba3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016ba7:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016bab:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016baf:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016bb3:	c1 e7 08             	shl    edi,0x8
c0016bb6:	01 c7                	add    edi,eax
c0016bb8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016bbc:	c1 e0 08             	shl    eax,0x8
c0016bbf:	01 d0                	add    eax,edx
c0016bc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bc9:	0f af c7             	imul   eax,edi
c0016bcc:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016bd3:	50                   	push   eax
c0016bd4:	e8 fb 88 ff ff       	call   c000f4d4 <malloc>
c0016bd9:	83 c4 10             	add    esp,0x10
c0016bdc:	89 c5                	mov    ebp,eax
c0016bde:	85 c0                	test   eax,eax
c0016be0:	75 15                	jne    c0016bf7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016be2:	83 ec 0c             	sub    esp,0xc
c0016be5:	68 c5 9a 02 c0       	push   0xc0029ac5
c0016bea:	e8 92 bb ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0016bef:	83 c4 10             	add    esp,0x10
c0016bf2:	e9 1c 01 00 00       	jmp    c0016d13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016bf7:	be 12 00 00 00       	mov    esi,0x12
c0016bfc:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016c00:	74 11                	je     c0016c13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016c02:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016c06:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016c0a:	c1 fe 03             	sar    esi,0x3
c0016c0d:	0f af f0             	imul   esi,eax
c0016c10:	83 c6 12             	add    esi,0x12
c0016c13:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016c17:	74 04                	je     c0016c1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016c19:	85 ff                	test   edi,edi
c0016c1b:	75 12                	jne    c0016c2f <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016c1d:	83 ec 0c             	sub    esp,0xc
c0016c20:	68 dc 9a 02 c0       	push   0xc0029adc
c0016c25:	e8 57 bb ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0016c2a:	e9 ce 00 00 00       	jmp    c0016cfd <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016c2f:	52                   	push   edx
c0016c30:	52                   	push   edx
c0016c31:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016c35:	50                   	push   eax
c0016c36:	68 f1 9a 02 c0       	push   0xc0029af1
c0016c3b:	e8 41 bb ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0016c40:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016c44:	83 c4 10             	add    esp,0x10
c0016c47:	80 fa 02             	cmp    dl,0x2
c0016c4a:	0f 85 98 00 00 00    	jne    c0016ce8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016c50:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016c55:	75 10                	jne    c0016c67 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016c57:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016c5b:	75 0a                	jne    c0016c67 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016c5d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016c60:	83 e8 18             	sub    eax,0x18
c0016c63:	a8 f7                	test   al,0xf7
c0016c65:	74 0a                	je     c0016c71 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016c67:	83 ec 0c             	sub    esp,0xc
c0016c6a:	68 fe 9a 02 c0       	push   0xc0029afe
c0016c6f:	eb 7f                	jmp    c0016cf0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016c71:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016c79:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016c81:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016c85:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016c8d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016c91:	75 0c                	jne    c0016c9f <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016c93:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016c98:	c1 e0 18             	shl    eax,0x18
c0016c9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c9f:	41                   	inc    ecx
c0016ca0:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016ca5:	c1 e2 10             	shl    edx,0x10
c0016ca8:	89 d0                	mov    eax,edx
c0016caa:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016caf:	c1 e2 08             	shl    edx,0x8
c0016cb2:	09 c2                	or     edx,eax
c0016cb4:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016cb8:	09 c2                	or     edx,eax
c0016cba:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016cbe:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016cc2:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016cc6:	c1 f8 03             	sar    eax,0x3
c0016cc9:	01 c6                	add    esi,eax
c0016ccb:	89 c8                	mov    eax,ecx
c0016ccd:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016cd1:	39 c7                	cmp    edi,eax
c0016cd3:	7f b0                	jg     c0016c85 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016cd5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016cd9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cdd:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016ce0:	7e 22                	jle    c0016d04 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016ce2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016ce6:	eb 99                	jmp    c0016c81 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016ce8:	50                   	push   eax
c0016ce9:	50                   	push   eax
c0016cea:	52                   	push   edx
c0016ceb:	68 0c 9b 02 c0       	push   0xc0029b0c
c0016cf0:	e8 8c ba ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0016cf5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016cf8:	e8 e7 87 ff ff       	call   c000f4e4 <free>
c0016cfd:	83 c4 10             	add    esp,0x10
c0016d00:	31 ed                	xor    ebp,ebp
c0016d02:	eb 0f                	jmp    c0016d13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016d04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d08:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016d0b:	89 38                	mov    DWORD PTR [eax],edi
c0016d0d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d11:	89 08                	mov    DWORD PTR [eax],ecx
c0016d13:	83 c4 1c             	add    esp,0x1c
c0016d16:	89 e8                	mov    eax,ebp
c0016d18:	5b                   	pop    ebx
c0016d19:	5e                   	pop    esi
c0016d1a:	5f                   	pop    edi
c0016d1b:	5d                   	pop    ebp
c0016d1c:	c3                   	ret    
c0016d1d:	90                   	nop

c0016d1e <Video::putTGA(int, int, unsigned char*, int)>:
c0016d1e:	55                   	push   ebp
c0016d1f:	57                   	push   edi
c0016d20:	56                   	push   esi
c0016d21:	53                   	push   ebx
c0016d22:	83 ec 28             	sub    esp,0x28
c0016d25:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016d29:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d2d:	50                   	push   eax
c0016d2e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d32:	50                   	push   eax
c0016d33:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d37:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d3b:	56                   	push   esi
c0016d3c:	e8 5b fe ff ff       	call   c0016b9c <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016d41:	83 c4 20             	add    esp,0x20
c0016d44:	85 c0                	test   eax,eax
c0016d46:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016d4a:	74 35                	je     c0016d81 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016d4c:	89 c7                	mov    edi,eax
c0016d4e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016d52:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016d56:	39 d8                	cmp    eax,ebx
c0016d58:	7e 27                	jle    c0016d81 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016d5a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d62:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016d66:	39 e8                	cmp    eax,ebp
c0016d68:	7e 14                	jle    c0016d7e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016d6a:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d6c:	83 c7 04             	add    edi,0x4
c0016d6f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016d72:	53                   	push   ebx
c0016d73:	55                   	push   ebp
c0016d74:	45                   	inc    ebp
c0016d75:	56                   	push   esi
c0016d76:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d79:	83 c4 10             	add    esp,0x10
c0016d7c:	eb e0                	jmp    c0016d5e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016d7e:	43                   	inc    ebx
c0016d7f:	eb cd                	jmp    c0016d4e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016d81:	83 c4 1c             	add    esp,0x1c
c0016d84:	5b                   	pop    ebx
c0016d85:	5e                   	pop    esi
c0016d86:	5f                   	pop    edi
c0016d87:	5d                   	pop    ebp
c0016d88:	c3                   	ret    
c0016d89:	90                   	nop

c0016d8a <ACPI::close(int, int, void*)>:
c0016d8a:	83 ec 1c             	sub    esp,0x1c
c0016d8d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016d95:	74 0a                	je     c0016da1 <ACPI::close(int, int, void*)+0x17>
c0016d97:	b8 00 00 00 00       	mov    eax,0x0
c0016d9c:	e9 9a 00 00 00       	jmp    c0016e3b <ACPI::close(int, int, void*)+0xb1>
c0016da1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016da6:	75 37                	jne    c0016ddf <ACPI::close(int, int, void*)+0x55>
c0016da8:	83 ec 0c             	sub    esp,0xc
c0016dab:	68 68 9b 02 c0       	push   0xc0029b68
c0016db0:	e8 cc b9 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0016db5:	83 c4 10             	add    esp,0x10
c0016db8:	a1 e8 cf 02 c0       	mov    eax,ds:0xc002cfe8
c0016dbd:	85 c0                	test   eax,eax
c0016dbf:	74 07                	je     c0016dc8 <ACPI::close(int, int, void*)+0x3e>
c0016dc1:	a1 e8 cf 02 c0       	mov    eax,ds:0xc002cfe8
c0016dc6:	ff d0                	call   eax
c0016dc8:	83 ec 0c             	sub    esp,0xc
c0016dcb:	68 3c 9c 02 c0       	push   0xc0029c3c
c0016dd0:	e8 c6 2a 00 00       	call   c001989b <Krnl::panic(char const*)>
c0016dd5:	83 c4 10             	add    esp,0x10
c0016dd8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016ddd:	eb 5c                	jmp    c0016e3b <ACPI::close(int, int, void*)+0xb1>
c0016ddf:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016de4:	75 50                	jne    c0016e36 <ACPI::close(int, int, void*)+0xac>
c0016de6:	a1 e4 cf 02 c0       	mov    eax,ds:0xc002cfe4
c0016deb:	85 c0                	test   eax,eax
c0016ded:	74 07                	je     c0016df6 <ACPI::close(int, int, void*)+0x6c>
c0016def:	a1 e4 cf 02 c0       	mov    eax,ds:0xc002cfe4
c0016df4:	ff d0                	call   eax
c0016df6:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016dfb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016e00:	83 e0 02             	and    eax,0x2
c0016e03:	74 1c                	je     c0016e21 <ACPI::close(int, int, void*)+0x97>
c0016e05:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016e0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e10:	89 c2                	mov    edx,eax
c0016e12:	ec                   	in     al,dx
c0016e13:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016e17:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016e1b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016e1f:	eb da                	jmp    c0016dfb <ACPI::close(int, int, void*)+0x71>
c0016e21:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016e28:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016e2d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016e31:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e35:	ee                   	out    dx,al
c0016e36:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016e3b:	83 c4 1c             	add    esp,0x1c
c0016e3e:	c3                   	ret    

c0016e3f <findRSDP()>:
c0016e3f:	83 ec 1c             	sub    esp,0x1c
c0016e42:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0016e47:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016e4d:	83 e0 04             	and    eax,0x4
c0016e50:	84 c0                	test   al,al
c0016e52:	75 07                	jne    c0016e5b <findRSDP()+0x1c>
c0016e54:	b8 00 00 00 00       	mov    eax,0x0
c0016e59:	eb 6a                	jmp    c0016ec5 <findRSDP()+0x86>
c0016e5b:	a1 90 c9 02 c0       	mov    eax,ds:0xc002c990
c0016e60:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016e65:	7f 1b                	jg     c0016e82 <findRSDP()+0x43>
c0016e67:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0016e6c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016e72:	83 e2 fb             	and    edx,0xfffffffb
c0016e75:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016e7b:	b8 00 00 00 00       	mov    eax,0x0
c0016e80:	eb 43                	jmp    c0016ec5 <findRSDP()+0x86>
c0016e82:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016e8a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016e92:	77 2c                	ja     c0016ec0 <findRSDP()+0x81>
c0016e94:	83 ec 04             	sub    esp,0x4
c0016e97:	6a 08                	push   0x8
c0016e99:	68 75 9b 02 c0       	push   0xc0029b75
c0016e9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ea2:	e8 4b 97 fe ff       	call   c00005f2 <memcmp>
c0016ea7:	83 c4 10             	add    esp,0x10
c0016eaa:	85 c0                	test   eax,eax
c0016eac:	0f 94 c0             	sete   al
c0016eaf:	84 c0                	test   al,al
c0016eb1:	74 06                	je     c0016eb9 <findRSDP()+0x7a>
c0016eb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016eb7:	eb 0c                	jmp    c0016ec5 <findRSDP()+0x86>
c0016eb9:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016ebe:	eb ca                	jmp    c0016e8a <findRSDP()+0x4b>
c0016ec0:	b8 00 00 00 00       	mov    eax,0x0
c0016ec5:	83 c4 1c             	add    esp,0x1c
c0016ec8:	c3                   	ret    

c0016ec9 <loadACPITables(unsigned char*)>:
c0016ec9:	56                   	push   esi
c0016eca:	53                   	push   ebx
c0016ecb:	83 ec 44             	sub    esp,0x44
c0016ece:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0016ed3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016ed9:	83 e0 04             	and    eax,0x4
c0016edc:	84 c0                	test   al,al
c0016ede:	0f 84 05 02 00 00    	je     c00170e9 <loadACPITables(unsigned char*)+0x220>
c0016ee4:	a0 00 d2 02 c0       	mov    al,ds:0xc002d200
c0016ee9:	84 c0                	test   al,al
c0016eeb:	74 75                	je     c0016f62 <loadACPITables(unsigned char*)+0x99>
c0016eed:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ef1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016ef5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ef9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016efc:	83 e8 24             	sub    eax,0x24
c0016eff:	c1 e8 03             	shr    eax,0x3
c0016f02:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016f06:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016f0e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f12:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016f16:	0f 8d b2 00 00 00    	jge    c0016fce <loadACPITables(unsigned char*)+0x105>
c0016f1c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f20:	83 c0 24             	add    eax,0x24
c0016f23:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016f27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f2b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016f2f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f33:	c1 e0 03             	shl    eax,0x3
c0016f36:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016f3a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f3e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016f41:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f43:	89 c1                	mov    ecx,eax
c0016f45:	a1 ec cf 02 c0       	mov    eax,ds:0xc002cfec
c0016f4a:	8d 50 01             	lea    edx,[eax+0x1]
c0016f4d:	89 15 ec cf 02 c0    	mov    DWORD PTR ds:0xc002cfec,edx
c0016f53:	89 ca                	mov    edx,ecx
c0016f55:	89 14 c5 04 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2ffc],edx
c0016f5c:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016f60:	eb ac                	jmp    c0016f0e <loadACPITables(unsigned char*)+0x45>
c0016f62:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016f6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016f71:	83 e8 24             	sub    eax,0x24
c0016f74:	c1 e8 02             	shr    eax,0x2
c0016f77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f7b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016f83:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f87:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016f8b:	7d 41                	jge    c0016fce <loadACPITables(unsigned char*)+0x105>
c0016f8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f91:	83 c0 24             	add    eax,0x24
c0016f94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016f98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016f9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016fa0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fa4:	c1 e0 02             	shl    eax,0x2
c0016fa7:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016fab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016faf:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016fb1:	a1 ec cf 02 c0       	mov    eax,ds:0xc002cfec
c0016fb6:	8d 50 01             	lea    edx,[eax+0x1]
c0016fb9:	89 15 ec cf 02 c0    	mov    DWORD PTR ds:0xc002cfec,edx
c0016fbf:	89 ca                	mov    edx,ecx
c0016fc1:	89 14 c5 04 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2ffc],edx
c0016fc8:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016fcc:	eb b5                	jmp    c0016f83 <loadACPITables(unsigned char*)+0xba>
c0016fce:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016fd6:	a1 ec cf 02 c0       	mov    eax,ds:0xc002cfec
c0016fdb:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016fdf:	0f 8d 05 01 00 00    	jge    c00170ea <loadACPITables(unsigned char*)+0x221>
c0016fe5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fe9:	8b 04 c5 04 d0 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2ffc]
c0016ff0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ff8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017000:	25 ff 0f 00 00       	and    eax,0xfff
c0017005:	89 c6                	mov    esi,eax
c0017007:	e8 15 a9 ff ff       	call   c0011921 <Virt::getAKernelVAS()>
c001700c:	89 c3                	mov    ebx,eax
c001700e:	83 ec 0c             	sub    esp,0xc
c0017011:	6a 01                	push   0x1
c0017013:	e8 79 a7 ff ff       	call   c0011791 <Virt::allocateKernelVirtualPages(int)>
c0017018:	83 c4 10             	add    esp,0x10
c001701b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001701f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017025:	83 ec 0c             	sub    esp,0xc
c0017028:	6a 01                	push   0x1
c001702a:	6a 01                	push   0x1
c001702c:	50                   	push   eax
c001702d:	52                   	push   edx
c001702e:	53                   	push   ebx
c001702f:	e8 1c b1 ff ff       	call   c0012150 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017034:	83 c4 20             	add    esp,0x20
c0017037:	09 f0                	or     eax,esi
c0017039:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001703d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017041:	c1 e0 03             	shl    eax,0x3
c0017044:	05 00 d0 02 c0       	add    eax,0xc002d000
c0017049:	83 ec 04             	sub    esp,0x4
c001704c:	6a 04                	push   0x4
c001704e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017052:	50                   	push   eax
c0017053:	e8 fd 95 fe ff       	call   c0000655 <memcpy>
c0017058:	83 c4 10             	add    esp,0x10
c001705b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001705f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017062:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017066:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001706a:	05 00 10 00 00       	add    eax,0x1000
c001706f:	c1 e8 0c             	shr    eax,0xc
c0017072:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001707a:	89 04 24             	mov    DWORD PTR [esp],eax
c001707d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017081:	25 ff 0f 00 00       	and    eax,0xfff
c0017086:	89 c6                	mov    esi,eax
c0017088:	e8 94 a8 ff ff       	call   c0011921 <Virt::getAKernelVAS()>
c001708d:	89 c3                	mov    ebx,eax
c001708f:	83 ec 0c             	sub    esp,0xc
c0017092:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017096:	e8 f6 a6 ff ff       	call   c0011791 <Virt::allocateKernelVirtualPages(int)>
c001709b:	83 c4 10             	add    esp,0x10
c001709e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170a2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00170a8:	83 ec 0c             	sub    esp,0xc
c00170ab:	6a 01                	push   0x1
c00170ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170b1:	50                   	push   eax
c00170b2:	52                   	push   edx
c00170b3:	53                   	push   ebx
c00170b4:	e8 97 b0 ff ff       	call   c0012150 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00170b9:	83 c4 20             	add    esp,0x20
c00170bc:	09 f0                	or     eax,esi
c00170be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00170c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00170c5:	83 ec 0c             	sub    esp,0xc
c00170c8:	50                   	push   eax
c00170c9:	e8 27 aa ff ff       	call   c0011af5 <Virt::freeKernelVirtualPages(unsigned long)>
c00170ce:	83 c4 10             	add    esp,0x10
c00170d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00170d9:	89 14 c5 04 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2ffc],edx
c00170e0:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00170e4:	e9 ed fe ff ff       	jmp    c0016fd6 <loadACPITables(unsigned char*)+0x10d>
c00170e9:	90                   	nop
c00170ea:	83 c4 44             	add    esp,0x44
c00170ed:	5b                   	pop    ebx
c00170ee:	5e                   	pop    esi
c00170ef:	c3                   	ret    

c00170f0 <findRSDT(unsigned char*)>:
c00170f0:	56                   	push   esi
c00170f1:	53                   	push   ebx
c00170f2:	83 ec 44             	sub    esp,0x44
c00170f5:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00170fa:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017100:	83 e0 04             	and    eax,0x4
c0017103:	84 c0                	test   al,al
c0017105:	75 0a                	jne    c0017111 <findRSDT(unsigned char*)+0x21>
c0017107:	b8 00 00 00 00       	mov    eax,0x0
c001710c:	e9 f7 00 00 00       	jmp    c0017208 <findRSDT(unsigned char*)+0x118>
c0017111:	83 ec 04             	sub    esp,0x4
c0017114:	6a 24                	push   0x24
c0017116:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001711a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001711e:	50                   	push   eax
c001711f:	e8 31 95 fe ff       	call   c0000655 <memcpy>
c0017124:	83 c4 10             	add    esp,0x10
c0017127:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001712b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001712f:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017137:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001713b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001713f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017143:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017147:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001714b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001714f:	25 ff 0f 00 00       	and    eax,0xfff
c0017154:	89 c6                	mov    esi,eax
c0017156:	e8 c6 a7 ff ff       	call   c0011921 <Virt::getAKernelVAS()>
c001715b:	89 c3                	mov    ebx,eax
c001715d:	83 ec 0c             	sub    esp,0xc
c0017160:	6a 02                	push   0x2
c0017162:	e8 2a a6 ff ff       	call   c0011791 <Virt::allocateKernelVirtualPages(int)>
c0017167:	83 c4 10             	add    esp,0x10
c001716a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001716e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017174:	83 ec 0c             	sub    esp,0xc
c0017177:	6a 01                	push   0x1
c0017179:	6a 02                	push   0x2
c001717b:	50                   	push   eax
c001717c:	52                   	push   edx
c001717d:	53                   	push   ebx
c001717e:	e8 cd af ff ff       	call   c0012150 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017183:	83 c4 20             	add    esp,0x20
c0017186:	09 f0                	or     eax,esi
c0017188:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001718c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017190:	25 ff 0f 00 00       	and    eax,0xfff
c0017195:	89 c6                	mov    esi,eax
c0017197:	e8 85 a7 ff ff       	call   c0011921 <Virt::getAKernelVAS()>
c001719c:	89 c3                	mov    ebx,eax
c001719e:	83 ec 0c             	sub    esp,0xc
c00171a1:	6a 02                	push   0x2
c00171a3:	e8 e9 a5 ff ff       	call   c0011791 <Virt::allocateKernelVirtualPages(int)>
c00171a8:	83 c4 10             	add    esp,0x10
c00171ab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00171af:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00171b5:	83 ec 0c             	sub    esp,0xc
c00171b8:	6a 01                	push   0x1
c00171ba:	6a 02                	push   0x2
c00171bc:	50                   	push   eax
c00171bd:	52                   	push   edx
c00171be:	53                   	push   ebx
c00171bf:	e8 8c af ff ff       	call   c0012150 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00171c4:	83 c4 20             	add    esp,0x20
c00171c7:	09 f0                	or     eax,esi
c00171c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171cd:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00171d2:	75 11                	jne    c00171e5 <findRSDT(unsigned char*)+0xf5>
c00171d4:	c6 05 00 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d200,0x0
c00171db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171df:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00171e3:	eb 1f                	jmp    c0017204 <findRSDT(unsigned char*)+0x114>
c00171e5:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00171ea:	75 11                	jne    c00171fd <findRSDT(unsigned char*)+0x10d>
c00171ec:	c6 05 00 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d200,0x1
c00171f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171f7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00171fb:	eb 07                	jmp    c0017204 <findRSDT(unsigned char*)+0x114>
c00171fd:	b8 00 00 00 00       	mov    eax,0x0
c0017202:	eb 04                	jmp    c0017208 <findRSDT(unsigned char*)+0x118>
c0017204:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017208:	83 c4 44             	add    esp,0x44
c001720b:	5b                   	pop    ebx
c001720c:	5e                   	pop    esi
c001720d:	c3                   	ret    

c001720e <findDataTable(unsigned char*, char*)>:
c001720e:	83 ec 1c             	sub    esp,0x1c
c0017211:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0017216:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001721c:	83 e0 04             	and    eax,0x4
c001721f:	84 c0                	test   al,al
c0017221:	75 07                	jne    c001722a <findDataTable(unsigned char*, char*)+0x1c>
c0017223:	b8 00 00 00 00       	mov    eax,0x0
c0017228:	eb 7c                	jmp    c00172a6 <findDataTable(unsigned char*, char*)+0x98>
c001722a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017232:	a1 ec cf 02 c0       	mov    eax,ds:0xc002cfec
c0017237:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001723b:	7d 3a                	jge    c0017277 <findDataTable(unsigned char*, char*)+0x69>
c001723d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017241:	c1 e0 03             	shl    eax,0x3
c0017244:	05 00 d0 02 c0       	add    eax,0xc002d000
c0017249:	83 ec 04             	sub    esp,0x4
c001724c:	6a 04                	push   0x4
c001724e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017252:	50                   	push   eax
c0017253:	e8 9a 93 fe ff       	call   c00005f2 <memcmp>
c0017258:	83 c4 10             	add    esp,0x10
c001725b:	85 c0                	test   eax,eax
c001725d:	0f 94 c0             	sete   al
c0017260:	84 c0                	test   al,al
c0017262:	74 0d                	je     c0017271 <findDataTable(unsigned char*, char*)+0x63>
c0017264:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017268:	8b 04 c5 04 d0 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2ffc]
c001726f:	eb 35                	jmp    c00172a6 <findDataTable(unsigned char*, char*)+0x98>
c0017271:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017275:	eb bb                	jmp    c0017232 <findDataTable(unsigned char*, char*)+0x24>
c0017277:	a0 00 d2 02 c0       	mov    al,ds:0xc002d200
c001727c:	84 c0                	test   al,al
c001727e:	74 07                	je     c0017287 <findDataTable(unsigned char*, char*)+0x79>
c0017280:	b8 58 00 00 00       	mov    eax,0x58
c0017285:	eb 05                	jmp    c001728c <findDataTable(unsigned char*, char*)+0x7e>
c0017287:	b8 52 00 00 00       	mov    eax,0x52
c001728c:	83 ec 04             	sub    esp,0x4
c001728f:	50                   	push   eax
c0017290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017294:	68 60 9c 02 c0       	push   0xc0029c60
c0017299:	e8 e3 b4 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001729e:	83 c4 10             	add    esp,0x10
c00172a1:	b8 00 00 00 00       	mov    eax,0x0
c00172a6:	83 c4 1c             	add    esp,0x1c
c00172a9:	c3                   	ret    

c00172aa <scanMADT()>:
c00172aa:	53                   	push   ebx
c00172ab:	83 ec 38             	sub    esp,0x38
c00172ae:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00172b3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172b9:	83 e0 04             	and    eax,0x4
c00172bc:	84 c0                	test   al,al
c00172be:	0f 84 63 04 00 00    	je     c0017727 <scanMADT()+0x47d>
c00172c4:	e8 76 fb ff ff       	call   c0016e3f <findRSDP()>
c00172c9:	a3 0c d2 02 c0       	mov    ds:0xc002d20c,eax
c00172ce:	a1 0c d2 02 c0       	mov    eax,ds:0xc002d20c
c00172d3:	85 c0                	test   eax,eax
c00172d5:	75 19                	jne    c00172f0 <scanMADT()+0x46>
c00172d7:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00172dc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00172e2:	83 e2 fb             	and    edx,0xfffffffb
c00172e5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00172eb:	e9 3b 04 00 00       	jmp    c001772b <scanMADT()+0x481>
c00172f0:	a1 0c d2 02 c0       	mov    eax,ds:0xc002d20c
c00172f5:	83 ec 0c             	sub    esp,0xc
c00172f8:	50                   	push   eax
c00172f9:	e8 f2 fd ff ff       	call   c00170f0 <findRSDT(unsigned char*)>
c00172fe:	83 c4 10             	add    esp,0x10
c0017301:	a3 08 d2 02 c0       	mov    ds:0xc002d208,eax
c0017306:	a1 08 d2 02 c0       	mov    eax,ds:0xc002d208
c001730b:	85 c0                	test   eax,eax
c001730d:	75 19                	jne    c0017328 <scanMADT()+0x7e>
c001730f:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0017314:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001731a:	83 e2 fb             	and    edx,0xfffffffb
c001731d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017323:	e9 03 04 00 00       	jmp    c001772b <scanMADT()+0x481>
c0017328:	a1 08 d2 02 c0       	mov    eax,ds:0xc002d208
c001732d:	83 ec 0c             	sub    esp,0xc
c0017330:	50                   	push   eax
c0017331:	e8 93 fb ff ff       	call   c0016ec9 <loadACPITables(unsigned char*)>
c0017336:	83 c4 10             	add    esp,0x10
c0017339:	a1 08 d2 02 c0       	mov    eax,ds:0xc002d208
c001733e:	83 ec 08             	sub    esp,0x8
c0017341:	68 7e 9b 02 c0       	push   0xc0029b7e
c0017346:	50                   	push   eax
c0017347:	e8 c2 fe ff ff       	call   c001720e <findDataTable(unsigned char*, char*)>
c001734c:	83 c4 10             	add    esp,0x10
c001734f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017353:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017358:	75 19                	jne    c0017373 <scanMADT()+0xc9>
c001735a:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001735f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017365:	83 e2 fe             	and    edx,0xfffffffe
c0017368:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001736e:	e9 b8 03 00 00       	jmp    c001772b <scanMADT()+0x481>
c0017373:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001737b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001737f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017382:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017386:	0f 87 9f 03 00 00    	ja     c001772b <scanMADT()+0x481>
c001738c:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017394:	0f 87 91 03 00 00    	ja     c001772b <scanMADT()+0x481>
c001739a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001739e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173a6:	8d 50 01             	lea    edx,[eax+0x1]
c00173a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173b1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00173b5:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00173b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173bd:	8d 50 01             	lea    edx,[eax+0x1]
c00173c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173c8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00173cc:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00173d0:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00173d5:	0f 86 4f 03 00 00    	jbe    c001772a <scanMADT()+0x480>
c00173db:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00173e0:	75 57                	jne    c0017439 <scanMADT()+0x18f>
c00173e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173e6:	8d 50 01             	lea    edx,[eax+0x1]
c00173e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173ed:	8a 15 00 d4 02 c0    	mov    dl,BYTE PTR ds:0xc002d400
c00173f3:	0f b6 d2             	movzx  edx,dl
c00173f6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00173fa:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00173fe:	88 82 40 d4 02 c0    	mov    BYTE PTR [edx-0x3ffd2bc0],al
c0017404:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017408:	8d 50 01             	lea    edx,[eax+0x1]
c001740b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001740f:	8a 15 00 d4 02 c0    	mov    dl,BYTE PTR ds:0xc002d400
c0017415:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017418:	88 0d 00 d4 02 c0    	mov    BYTE PTR ds:0xc002d400,cl
c001741e:	0f b6 d2             	movzx  edx,dl
c0017421:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017425:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017429:	88 82 20 d4 02 c0    	mov    BYTE PTR [edx-0x3ffd2be0],al
c001742f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017434:	e9 da 02 00 00       	jmp    c0017713 <scanMADT()+0x469>
c0017439:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001743e:	0f 85 14 01 00 00    	jne    c0017558 <scanMADT()+0x2ae>
c0017444:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017448:	8d 50 01             	lea    edx,[eax+0x1]
c001744b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001744f:	8a 15 c0 d2 02 c0    	mov    dl,BYTE PTR ds:0xc002d2c0
c0017455:	0f b6 d2             	movzx  edx,dl
c0017458:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001745c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017460:	88 82 e0 d2 02 c0    	mov    BYTE PTR [edx-0x3ffd2d20],al
c0017466:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001746a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001746e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017472:	01 d0                	add    eax,edx
c0017474:	83 c0 2c             	add    eax,0x2c
c0017477:	8a 00                	mov    al,BYTE PTR [eax]
c0017479:	0f b6 d0             	movzx  edx,al
c001747c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017480:	8d 48 01             	lea    ecx,[eax+0x1]
c0017483:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017487:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001748b:	0f b6 c0             	movzx  eax,al
c001748e:	c1 e0 08             	shl    eax,0x8
c0017491:	89 d1                	mov    ecx,edx
c0017493:	09 c1                	or     ecx,eax
c0017495:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017499:	8d 50 02             	lea    edx,[eax+0x2]
c001749c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174a0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174a4:	0f b6 c0             	movzx  eax,al
c00174a7:	c1 e0 10             	shl    eax,0x10
c00174aa:	09 c1                	or     ecx,eax
c00174ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174b0:	8d 50 03             	lea    edx,[eax+0x3]
c00174b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174b7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174bb:	0f b6 c0             	movzx  eax,al
c00174be:	c1 e0 18             	shl    eax,0x18
c00174c1:	09 c1                	or     ecx,eax
c00174c3:	89 ca                	mov    edx,ecx
c00174c5:	a0 c0 d2 02 c0       	mov    al,ds:0xc002d2c0
c00174ca:	0f b6 c0             	movzx  eax,al
c00174cd:	89 14 85 00 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2d00],edx
c00174d4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00174d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174e1:	01 d0                	add    eax,edx
c00174e3:	83 c0 2c             	add    eax,0x2c
c00174e6:	8a 00                	mov    al,BYTE PTR [eax]
c00174e8:	0f b6 d0             	movzx  edx,al
c00174eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174ef:	8d 48 01             	lea    ecx,[eax+0x1]
c00174f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174f6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00174fa:	0f b6 c0             	movzx  eax,al
c00174fd:	c1 e0 08             	shl    eax,0x8
c0017500:	89 d1                	mov    ecx,edx
c0017502:	09 c1                	or     ecx,eax
c0017504:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017508:	8d 50 02             	lea    edx,[eax+0x2]
c001750b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001750f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017513:	0f b6 c0             	movzx  eax,al
c0017516:	c1 e0 10             	shl    eax,0x10
c0017519:	09 c1                	or     ecx,eax
c001751b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001751f:	8d 50 03             	lea    edx,[eax+0x3]
c0017522:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017526:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001752a:	0f b6 c0             	movzx  eax,al
c001752d:	c1 e0 18             	shl    eax,0x18
c0017530:	09 c1                	or     ecx,eax
c0017532:	89 ca                	mov    edx,ecx
c0017534:	a0 c0 d2 02 c0       	mov    al,ds:0xc002d2c0
c0017539:	0f b6 c0             	movzx  eax,al
c001753c:	89 14 85 80 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2c80],edx
c0017543:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017548:	a0 c0 d2 02 c0       	mov    al,ds:0xc002d2c0
c001754d:	40                   	inc    eax
c001754e:	a2 c0 d2 02 c0       	mov    ds:0xc002d2c0,al
c0017553:	e9 bb 01 00 00       	jmp    c0017713 <scanMADT()+0x469>
c0017558:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001755d:	0f 85 e9 00 00 00    	jne    c001764c <scanMADT()+0x3a2>
c0017563:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017567:	8d 50 01             	lea    edx,[eax+0x1]
c001756a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001756e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017572:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017576:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001757a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001757e:	8d 50 01             	lea    edx,[eax+0x1]
c0017581:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017585:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017589:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001758d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017591:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017595:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017599:	01 d0                	add    eax,edx
c001759b:	83 c0 2c             	add    eax,0x2c
c001759e:	8a 00                	mov    al,BYTE PTR [eax]
c00175a0:	0f b6 d0             	movzx  edx,al
c00175a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00175aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175ae:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00175b2:	0f b6 c0             	movzx  eax,al
c00175b5:	c1 e0 08             	shl    eax,0x8
c00175b8:	89 d1                	mov    ecx,edx
c00175ba:	09 c1                	or     ecx,eax
c00175bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175c0:	8d 50 02             	lea    edx,[eax+0x2]
c00175c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175c7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00175cb:	0f b6 c0             	movzx  eax,al
c00175ce:	c1 e0 10             	shl    eax,0x10
c00175d1:	09 c1                	or     ecx,eax
c00175d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175d7:	8d 50 03             	lea    edx,[eax+0x3]
c00175da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175de:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00175e2:	0f b6 c0             	movzx  eax,al
c00175e5:	c1 e0 18             	shl    eax,0x18
c00175e8:	09 c8                	or     eax,ecx
c00175ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175ee:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00175f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175fb:	01 d0                	add    eax,edx
c00175fd:	83 c0 2c             	add    eax,0x2c
c0017600:	8a 00                	mov    al,BYTE PTR [eax]
c0017602:	0f b6 c0             	movzx  eax,al
c0017605:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017609:	8d 4a 01             	lea    ecx,[edx+0x1]
c001760c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017610:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017614:	0f b6 d2             	movzx  edx,dl
c0017617:	c1 e2 08             	shl    edx,0x8
c001761a:	09 d0                	or     eax,edx
c001761c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017621:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017626:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001762b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001762f:	88 90 a0 bb 02 c0    	mov    BYTE PTR [eax-0x3ffd4460],dl
c0017635:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001763a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001763f:	66 89 84 12 a0 d2 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd2d60],ax
c0017647:	e9 c7 00 00 00       	jmp    c0017713 <scanMADT()+0x469>
c001764c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017651:	0f 85 b0 00 00 00    	jne    c0017707 <scanMADT()+0x45d>
c0017657:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001765b:	8d 50 01             	lea    edx,[eax+0x1]
c001765e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017662:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017666:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001766a:	0f b6 c0             	movzx  eax,al
c001766d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017671:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017675:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017679:	01 d0                	add    eax,edx
c001767b:	83 c0 2c             	add    eax,0x2c
c001767e:	8a 00                	mov    al,BYTE PTR [eax]
c0017680:	0f b6 d0             	movzx  edx,al
c0017683:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017687:	8d 48 01             	lea    ecx,[eax+0x1]
c001768a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001768e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017692:	0f b6 c0             	movzx  eax,al
c0017695:	c1 e0 08             	shl    eax,0x8
c0017698:	09 d0                	or     eax,edx
c001769a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001769e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00176a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176a7:	8d 50 01             	lea    edx,[eax+0x1]
c00176aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176b2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00176b6:	0f b6 c0             	movzx  eax,al
c00176b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176c1:	c1 e0 08             	shl    eax,0x8
c00176c4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00176c8:	89 c1                	mov    ecx,eax
c00176ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176ce:	c1 e0 18             	shl    eax,0x18
c00176d1:	89 c3                	mov    ebx,eax
c00176d3:	a1 10 d2 02 c0       	mov    eax,ds:0xc002d210
c00176d8:	8d 50 01             	lea    edx,[eax+0x1]
c00176db:	89 15 10 d2 02 c0    	mov    DWORD PTR ds:0xc002d210,edx
c00176e1:	09 d9                	or     ecx,ebx
c00176e3:	89 ca                	mov    edx,ecx
c00176e5:	89 14 85 20 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2de0],edx
c00176ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00176f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00176f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176f8:	68 90 9c 02 c0       	push   0xc0029c90
c00176fd:	e8 7f b0 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0017702:	83 c4 10             	add    esp,0x10
c0017705:	eb 0c                	jmp    c0017713 <scanMADT()+0x469>
c0017707:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001770c:	75 05                	jne    c0017713 <scanMADT()+0x469>
c001770e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017713:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017718:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001771c:	01 d0                	add    eax,edx
c001771e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017722:	e9 54 fc ff ff       	jmp    c001737b <scanMADT()+0xd1>
c0017727:	90                   	nop
c0017728:	eb 01                	jmp    c001772b <scanMADT()+0x481>
c001772a:	90                   	nop
c001772b:	83 c4 38             	add    esp,0x38
c001772e:	5b                   	pop    ebx
c001772f:	c3                   	ret    

c0017730 <ACPI::ACPI()>:
c0017730:	83 ec 0c             	sub    esp,0xc
c0017733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017737:	83 ec 08             	sub    esp,0x8
c001773a:	68 83 9b 02 c0       	push   0xc0029b83
c001773f:	50                   	push   eax
c0017740:	e8 1b c6 ff ff       	call   c0013d60 <Device::Device(char const*)>
c0017745:	83 c4 10             	add    esp,0x10
c0017748:	ba 68 9d 02 c0       	mov    edx,0xc0029d68
c001774d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017751:	89 10                	mov    DWORD PTR [eax],edx
c0017753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017757:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001775e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017762:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c001776c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017770:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c001777a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001777e:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0017785:	e8 20 fb ff ff       	call   c00172aa <scanMADT()>
c001778a:	90                   	nop
c001778b:	83 c4 0c             	add    esp,0xc
c001778e:	c3                   	ret    
c001778f:	90                   	nop

c0017790 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017790:	83 ec 2c             	sub    esp,0x2c
c0017793:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017797:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001779b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001779f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00177a3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00177a8:	88 d0                	mov    al,dl
c00177aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00177ae:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00177b3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00177bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177bf:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00177c5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00177c9:	0f 8d 97 00 00 00    	jge    c0017866 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00177cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177d7:	83 c2 2a             	add    edx,0x2a
c00177da:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00177de:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00177e3:	75 78                	jne    c001785d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00177e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177ed:	83 c2 2a             	add    edx,0x2a
c00177f0:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00177f4:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00177f8:	75 63                	jne    c001785d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00177fa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00177ff:	74 3a                	je     c001783b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017801:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017805:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017809:	83 c2 2a             	add    edx,0x2a
c001780c:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017810:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017814:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017817:	39 c2                	cmp    edx,eax
c0017819:	74 10                	je     c001782b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001781b:	83 ec 0c             	sub    esp,0xc
c001781e:	68 cc 9c 02 c0       	push   0xc0029ccc
c0017823:	e8 73 20 00 00       	call   c001989b <Krnl::panic(char const*)>
c0017828:	83 c4 10             	add    esp,0x10
c001782b:	83 ec 0c             	sub    esp,0xc
c001782e:	68 88 9b 02 c0       	push   0xc0029b88
c0017833:	e8 63 20 00 00       	call   c001989b <Krnl::panic(char const*)>
c0017838:	83 c4 10             	add    esp,0x10
c001783b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001783f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017843:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017847:	83 c2 2a             	add    edx,0x2a
c001784a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001784e:	8b 02                	mov    eax,DWORD PTR [edx]
c0017850:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017853:	89 01                	mov    DWORD PTR [ecx],eax
c0017855:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017858:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001785d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017861:	e9 55 ff ff ff       	jmp    c00177bb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017866:	90                   	nop
c0017867:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001786b:	83 c4 2c             	add    esp,0x2c
c001786e:	c2 04 00             	ret    0x4
c0017871:	90                   	nop

c0017872 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017872:	56                   	push   esi
c0017873:	53                   	push   ebx
c0017874:	83 ec 14             	sub    esp,0x14
c0017877:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001787b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001787f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017883:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017888:	88 c8                	mov    al,cl
c001788a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001788e:	88 d0                	mov    al,dl
c0017890:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017894:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017898:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c001789e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178a2:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00178a8:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c00178ad:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00178b2:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00178b7:	83 ec 04             	sub    esp,0x4
c00178ba:	56                   	push   esi
c00178bb:	53                   	push   ebx
c00178bc:	51                   	push   ecx
c00178bd:	52                   	push   edx
c00178be:	50                   	push   eax
c00178bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00178c3:	68 fc 9c 02 c0       	push   0xc0029cfc
c00178c8:	e8 b4 ae ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00178cd:	83 c4 20             	add    esp,0x20
c00178d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178d4:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00178da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178de:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00178e1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00178e5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00178e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178ed:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00178f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00178f7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00178fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178fe:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017907:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001790d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017911:	8d 48 01             	lea    ecx,[eax+0x1]
c0017914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017918:	83 c2 2a             	add    edx,0x2a
c001791b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001791f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017923:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017929:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001792d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017930:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017934:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001793c:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017942:	8d 50 01             	lea    edx,[eax+0x1]
c0017945:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017949:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001794f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017953:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017959:	3d 00 08 00 00       	cmp    eax,0x800
c001795e:	75 10                	jne    c0017970 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017960:	83 ec 0c             	sub    esp,0xc
c0017963:	68 97 9b 02 c0       	push   0xc0029b97
c0017968:	e8 2e 1f 00 00       	call   c001989b <Krnl::panic(char const*)>
c001796d:	83 c4 10             	add    esp,0x10
c0017970:	90                   	nop
c0017971:	83 c4 14             	add    esp,0x14
c0017974:	5b                   	pop    ebx
c0017975:	5e                   	pop    esi
c0017976:	c3                   	ret    
c0017977:	90                   	nop

c0017978 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017978:	b8 00 00 00 00       	mov    eax,0x0
c001797d:	c3                   	ret    

c001797e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001797e:	83 ec 1c             	sub    esp,0x1c
c0017981:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017985:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017988:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001798c:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0017991:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017996:	83 ec 08             	sub    esp,0x8
c0017999:	52                   	push   edx
c001799a:	50                   	push   eax
c001799b:	e8 4c 71 ff ff       	call   c000eaec <Computer::readCMOS(unsigned char)>
c00179a0:	83 c4 10             	add    esp,0x10
c00179a3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00179a7:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00179ac:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00179b1:	83 ec 04             	sub    esp,0x4
c00179b4:	6a 01                	push   0x1
c00179b6:	52                   	push   edx
c00179b7:	50                   	push   eax
c00179b8:	e8 45 72 ff ff       	call   c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>
c00179bd:	83 c4 10             	add    esp,0x10
c00179c0:	90                   	nop
c00179c1:	83 c4 1c             	add    esp,0x1c
c00179c4:	c3                   	ret    
c00179c5:	90                   	nop

c00179c6 <ACPI::open(int, int, void*)>:
c00179c6:	53                   	push   ebx
c00179c7:	83 ec 28             	sub    esp,0x28
c00179ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179ce:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00179d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179d9:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00179df:	84 c0                	test   al,al
c00179e1:	74 67                	je     c0017a4a <ACPI::open(int, int, void*)+0x84>
c00179e3:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c00179eb:	83 ec 0c             	sub    esp,0xc
c00179ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179f2:	e8 dd 7a ff ff       	call   c000f4d4 <malloc>
c00179f7:	83 c4 10             	add    esp,0x10
c00179fa:	89 c3                	mov    ebx,eax
c00179fc:	83 ec 0c             	sub    esp,0xc
c00179ff:	53                   	push   ebx
c0017a00:	e8 47 9e 00 00       	call   c002184c <PCI::PCI()>
c0017a05:	83 c4 10             	add    esp,0x10
c0017a08:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0017a0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a10:	83 ec 08             	sub    esp,0x8
c0017a13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a17:	50                   	push   eax
c0017a18:	e8 53 c1 ff ff       	call   c0013b70 <Device::addChild(Device*)>
c0017a1d:	83 c4 10             	add    esp,0x10
c0017a20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a24:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a26:	83 c0 08             	add    eax,0x8
c0017a29:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a2b:	6a 00                	push   0x0
c0017a2d:	6a 00                	push   0x0
c0017a2f:	6a 00                	push   0x0
c0017a31:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017a35:	ff d0                	call   eax
c0017a37:	83 c4 10             	add    esp,0x10
c0017a3a:	83 ec 0c             	sub    esp,0xc
c0017a3d:	68 b4 9b 02 c0       	push   0xc0029bb4
c0017a42:	e8 3a ad ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0017a47:	83 c4 10             	add    esp,0x10
c0017a4a:	83 ec 0c             	sub    esp,0xc
c0017a4d:	68 bf 9b 02 c0       	push   0xc0029bbf
c0017a52:	e8 9f 41 00 00       	call   c001bbf6 <Thr::loadKernelSymbolTable(char const*)>
c0017a57:	83 c4 10             	add    esp,0x10
c0017a5a:	8b 1d 48 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c948
c0017a60:	83 ec 08             	sub    esp,0x8
c0017a63:	6a 01                	push   0x1
c0017a65:	68 dd 9b 02 c0       	push   0xc0029bdd
c0017a6a:	e8 47 4c 00 00       	call   c001c6b6 <Thr::loadDLL(char const*, bool)>
c0017a6f:	83 c4 10             	add    esp,0x10
c0017a72:	83 ec 08             	sub    esp,0x8
c0017a75:	53                   	push   ebx
c0017a76:	50                   	push   eax
c0017a77:	e8 49 4e 00 00       	call   c001c8c5 <Thr::executeDLL(unsigned long, void*)>
c0017a7c:	83 c4 10             	add    esp,0x10
c0017a7f:	8b 1d 48 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c948
c0017a85:	83 ec 08             	sub    esp,0x8
c0017a88:	6a 01                	push   0x1
c0017a8a:	68 fa 9b 02 c0       	push   0xc0029bfa
c0017a8f:	e8 22 4c 00 00       	call   c001c6b6 <Thr::loadDLL(char const*, bool)>
c0017a94:	83 c4 10             	add    esp,0x10
c0017a97:	83 ec 08             	sub    esp,0x8
c0017a9a:	53                   	push   ebx
c0017a9b:	50                   	push   eax
c0017a9c:	e8 24 4e 00 00       	call   c001c8c5 <Thr::executeDLL(unsigned long, void*)>
c0017aa1:	83 c4 10             	add    esp,0x10
c0017aa4:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0017aa9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017aaf:	83 e0 04             	and    eax,0x4
c0017ab2:	84 c0                	test   al,al
c0017ab4:	0f 84 d6 00 00 00    	je     c0017b90 <ACPI::open(int, int, void*)+0x1ca>
c0017aba:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c0017ac2:	83 ec 0c             	sub    esp,0xc
c0017ac5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ac9:	e8 06 7a ff ff       	call   c000f4d4 <malloc>
c0017ace:	83 c4 10             	add    esp,0x10
c0017ad1:	89 c3                	mov    ebx,eax
c0017ad3:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0017ad8:	83 ec 04             	sub    esp,0x4
c0017adb:	50                   	push   eax
c0017adc:	68 17 9c 02 c0       	push   0xc0029c17
c0017ae1:	53                   	push   ebx
c0017ae2:	e8 c9 b1 ff ff       	call   c0012cb0 <File::File(char const*, Process*)>
c0017ae7:	83 c4 10             	add    esp,0x10
c0017aea:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0017aee:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017af3:	74 17                	je     c0017b0c <ACPI::open(int, int, void*)+0x146>
c0017af5:	83 ec 0c             	sub    esp,0xc
c0017af8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017afc:	e8 81 b4 ff ff       	call   c0012f82 <File::exists()>
c0017b01:	83 c4 10             	add    esp,0x10
c0017b04:	84 c0                	test   al,al
c0017b06:	74 04                	je     c0017b0c <ACPI::open(int, int, void*)+0x146>
c0017b08:	b0 01                	mov    al,0x1
c0017b0a:	eb 02                	jmp    c0017b0e <ACPI::open(int, int, void*)+0x148>
c0017b0c:	b0 00                	mov    al,0x0
c0017b0e:	84 c0                	test   al,al
c0017b10:	74 25                	je     c0017b37 <ACPI::open(int, int, void*)+0x171>
c0017b12:	8b 1d 48 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c948
c0017b18:	83 ec 08             	sub    esp,0x8
c0017b1b:	6a 01                	push   0x1
c0017b1d:	68 17 9c 02 c0       	push   0xc0029c17
c0017b22:	e8 8f 4b 00 00       	call   c001c6b6 <Thr::loadDLL(char const*, bool)>
c0017b27:	83 c4 10             	add    esp,0x10
c0017b2a:	83 ec 08             	sub    esp,0x8
c0017b2d:	53                   	push   ebx
c0017b2e:	50                   	push   eax
c0017b2f:	e8 91 4d 00 00       	call   c001c8c5 <Thr::executeDLL(unsigned long, void*)>
c0017b34:	83 c4 10             	add    esp,0x10
c0017b37:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b3c:	74 1e                	je     c0017b5c <ACPI::open(int, int, void*)+0x196>
c0017b3e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b43:	74 17                	je     c0017b5c <ACPI::open(int, int, void*)+0x196>
c0017b45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b49:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b4b:	83 c0 08             	add    eax,0x8
c0017b4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b50:	83 ec 0c             	sub    esp,0xc
c0017b53:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b57:	ff d0                	call   eax
c0017b59:	83 c4 10             	add    esp,0x10
c0017b5c:	a1 08 d2 02 c0       	mov    eax,ds:0xc002d208
c0017b61:	83 ec 08             	sub    esp,0x8
c0017b64:	68 34 9c 02 c0       	push   0xc0029c34
c0017b69:	50                   	push   eax
c0017b6a:	e8 9f f6 ff ff       	call   c001720e <findDataTable(unsigned char*, char*)>
c0017b6f:	83 c4 10             	add    esp,0x10
c0017b72:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b76:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017b7b:	74 13                	je     c0017b90 <ACPI::open(int, int, void*)+0x1ca>
c0017b7d:	83 ec 08             	sub    esp,0x8
c0017b80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b84:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b88:	e8 f1 fd ff ff       	call   c001797e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017b8d:	83 c4 10             	add    esp,0x10
c0017b90:	b8 00 00 00 00       	mov    eax,0x0
c0017b95:	83 c4 28             	add    esp,0x28
c0017b98:	5b                   	pop    ebx
c0017b99:	c3                   	ret    

c0017b9a <ACPI::sleep()>:
c0017b9a:	83 ec 0c             	sub    esp,0xc
c0017b9d:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c0017ba2:	85 c0                	test   eax,eax
c0017ba4:	74 07                	je     c0017bad <ACPI::sleep()+0x13>
c0017ba6:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c0017bab:	ff d0                	call   eax
c0017bad:	90                   	nop
c0017bae:	83 c4 0c             	add    esp,0xc
c0017bb1:	c3                   	ret    

c0017bb2 <CPU::close(int, int, void*)>:
c0017bb2:	31 c0                	xor    eax,eax
c0017bb4:	c3                   	ret    
c0017bb5:	90                   	nop

c0017bb6 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017bb6:	55                   	push   ebp
c0017bb7:	57                   	push   edi
c0017bb8:	56                   	push   esi
c0017bb9:	53                   	push   ebx
c0017bba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bbe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bc2:	89 ce                	mov    esi,ecx
c0017bc4:	89 d5                	mov    ebp,edx
c0017bc6:	80 f9 04             	cmp    cl,0x4
c0017bc9:	75 28                	jne    c0017bf3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017bcb:	8d 42 f9             	lea    eax,[edx-0x7]
c0017bce:	3c 03                	cmp    al,0x3
c0017bd0:	0f 86 63 01 00 00    	jbe    c0017d39 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017bd6:	80 fa 03             	cmp    dl,0x3
c0017bd9:	0f 84 5a 01 00 00    	je     c0017d39 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017bdf:	8d 7a f2             	lea    edi,[edx-0xe]
c0017be2:	b8 70 bd 02 c0       	mov    eax,0xc002bd70
c0017be7:	89 fb                	mov    ebx,edi
c0017be9:	80 fb 01             	cmp    bl,0x1
c0017bec:	77 4e                	ja     c0017c3c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017bee:	e9 52 01 00 00       	jmp    c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bf3:	80 f9 05             	cmp    cl,0x5
c0017bf6:	75 4d                	jne    c0017c45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017bf8:	b8 80 bd 02 c0       	mov    eax,0xc002bd80
c0017bfd:	80 fa 03             	cmp    dl,0x3
c0017c00:	0f 86 3f 01 00 00    	jbe    c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c06:	8d 7a fa             	lea    edi,[edx-0x6]
c0017c09:	b8 90 bd 02 c0       	mov    eax,0xc002bd90
c0017c0e:	89 fb                	mov    ebx,edi
c0017c10:	80 fb 01             	cmp    bl,0x1
c0017c13:	0f 86 2c 01 00 00    	jbe    c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c19:	b8 a0 bd 02 c0       	mov    eax,0xc002bda0
c0017c1e:	80 fa 08             	cmp    dl,0x8
c0017c21:	0f 84 1e 01 00 00    	je     c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c27:	89 d7                	mov    edi,edx
c0017c29:	b8 b0 bd 02 c0       	mov    eax,0xc002bdb0
c0017c2e:	83 e7 fb             	and    edi,0xfffffffb
c0017c31:	89 fb                	mov    ebx,edi
c0017c33:	80 fb 09             	cmp    bl,0x9
c0017c36:	0f 84 09 01 00 00    	je     c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c3c:	31 c0                	xor    eax,eax
c0017c3e:	89 eb                	mov    ebx,ebp
c0017c40:	0f b6 fb             	movzx  edi,bl
c0017c43:	eb 30                	jmp    c0017c75 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017c45:	31 c0                	xor    eax,eax
c0017c47:	80 f9 06             	cmp    cl,0x6
c0017c4a:	75 f2                	jne    c0017c3e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c4c:	80 fa 0a             	cmp    dl,0xa
c0017c4f:	77 ed                	ja     c0017c3e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c51:	bf de 05 00 00       	mov    edi,0x5de
c0017c56:	0f a3 d7             	bt     edi,edx
c0017c59:	73 e3                	jae    c0017c3e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c5b:	b8 c0 bd 02 c0       	mov    eax,0xc002bdc0
c0017c60:	e9 e0 00 00 00       	jmp    c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c65:	39 c7                	cmp    edi,eax
c0017c67:	0f 84 d3 00 00 00    	je     c0017d40 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017c6d:	40                   	inc    eax
c0017c6e:	3d d0 00 00 00       	cmp    eax,0xd0
c0017c73:	74 09                	je     c0017c7e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017c75:	89 f3                	mov    ebx,esi
c0017c77:	80 fb 0f             	cmp    bl,0xf
c0017c7a:	75 f1                	jne    c0017c6d <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017c7c:	eb e7                	jmp    c0017c65 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017c7e:	80 f9 10             	cmp    cl,0x10
c0017c81:	75 14                	jne    c0017c97 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017c83:	8d 42 fc             	lea    eax,[edx-0x4]
c0017c86:	83 e0 fb             	and    eax,0xfffffffb
c0017c89:	3c 02                	cmp    al,0x2
c0017c8b:	76 34                	jbe    c0017cc1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017c8d:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017c92:	80 fa 02             	cmp    dl,0x2
c0017c95:	eb 24                	jmp    c0017cbb <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017c97:	80 f9 11             	cmp    cl,0x11
c0017c9a:	75 13                	jne    c0017caf <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017c9c:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017ca1:	80 fa 03             	cmp    dl,0x3
c0017ca4:	0f 85 9b 00 00 00    	jne    c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017caa:	e9 91 00 00 00       	jmp    c0017d40 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017caf:	80 f9 12             	cmp    cl,0x12
c0017cb2:	75 14                	jne    c0017cc8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017cb4:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017cb9:	fe ca                	dec    dl
c0017cbb:	0f 85 84 00 00 00    	jne    c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cc1:	b8 e0 bd 02 c0       	mov    eax,0xc002bde0
c0017cc6:	eb 7d                	jmp    c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cc8:	80 f9 14             	cmp    cl,0x14
c0017ccb:	75 12                	jne    c0017cdf <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017ccd:	4a                   	dec    edx
c0017cce:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017cd3:	80 fa 01             	cmp    dl,0x1
c0017cd6:	77 6d                	ja     c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cd8:	b8 f0 bd 02 c0       	mov    eax,0xc002bdf0
c0017cdd:	eb 66                	jmp    c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cdf:	80 f9 15             	cmp    cl,0x15
c0017ce2:	75 31                	jne    c0017d15 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017ce4:	b8 00 be 02 c0       	mov    eax,0xc002be00
c0017ce9:	80 fa 01             	cmp    dl,0x1
c0017cec:	74 57                	je     c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cee:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017cf3:	80 fa 13             	cmp    dl,0x13
c0017cf6:	76 0c                	jbe    c0017d04 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017cf8:	80 fa 30             	cmp    dl,0x30
c0017cfb:	75 48                	jne    c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cfd:	b8 20 be 02 c0       	mov    eax,0xc002be20
c0017d02:	eb 41                	jmp    c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d04:	b9 04 00 09 00       	mov    ecx,0x90004
c0017d09:	0f a3 d1             	bt     ecx,edx
c0017d0c:	73 37                	jae    c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d0e:	b8 10 be 02 c0       	mov    eax,0xc002be10
c0017d13:	eb 30                	jmp    c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d15:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017d1a:	80 f9 16             	cmp    cl,0x16
c0017d1d:	75 26                	jne    c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d1f:	b8 30 be 02 c0       	mov    eax,0xc002be30
c0017d24:	84 d2                	test   dl,dl
c0017d26:	74 1d                	je     c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d28:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017d2d:	80 fa 30             	cmp    dl,0x30
c0017d30:	75 13                	jne    c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d32:	b8 40 be 02 c0       	mov    eax,0xc002be40
c0017d37:	eb 0c                	jmp    c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d39:	b8 60 bd 02 c0       	mov    eax,0xc002bd60
c0017d3e:	eb 05                	jmp    c0017d45 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d40:	b8 d0 bd 02 c0       	mov    eax,0xc002bdd0
c0017d45:	5b                   	pop    ebx
c0017d46:	5e                   	pop    esi
c0017d47:	5f                   	pop    edi
c0017d48:	5d                   	pop    ebp
c0017d49:	c3                   	ret    

c0017d4a <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017d4a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017d4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d52:	80 f9 04             	cmp    cl,0x4
c0017d55:	75 6b                	jne    c0017dc2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017d57:	b8 c0 bb 02 c0       	mov    eax,0xc002bbc0
c0017d5c:	80 fa 01             	cmp    dl,0x1
c0017d5f:	0f 86 92 02 00 00    	jbe    c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d65:	b8 d0 bb 02 c0       	mov    eax,0xc002bbd0
c0017d6a:	80 fa 02             	cmp    dl,0x2
c0017d6d:	0f 84 84 02 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d73:	b8 e0 bb 02 c0       	mov    eax,0xc002bbe0
c0017d78:	80 fa 03             	cmp    dl,0x3
c0017d7b:	0f 84 76 02 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d81:	b8 f0 bb 02 c0       	mov    eax,0xc002bbf0
c0017d86:	80 fa 04             	cmp    dl,0x4
c0017d89:	0f 84 68 02 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d8f:	b8 00 bc 02 c0       	mov    eax,0xc002bc00
c0017d94:	80 fa 05             	cmp    dl,0x5
c0017d97:	0f 84 5a 02 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d9d:	b8 e0 bb 02 c0       	mov    eax,0xc002bbe0
c0017da2:	80 fa 07             	cmp    dl,0x7
c0017da5:	0f 84 4c 02 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dab:	83 ea 08             	sub    edx,0x8
c0017dae:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017db3:	80 fa 01             	cmp    dl,0x1
c0017db6:	0f 87 3b 02 00 00    	ja     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dbc:	b8 10 bc 02 c0       	mov    eax,0xc002bc10
c0017dc1:	c3                   	ret    
c0017dc2:	80 f9 05             	cmp    cl,0x5
c0017dc5:	75 45                	jne    c0017e0c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017dc7:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017dca:	b8 20 bc 02 c0       	mov    eax,0xc002bc20
c0017dcf:	80 f9 02             	cmp    cl,0x2
c0017dd2:	0f 86 1f 02 00 00    	jbe    c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dd8:	80 fa 04             	cmp    dl,0x4
c0017ddb:	0f 84 f3 01 00 00    	je     c0017fd4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017de1:	80 fa 07             	cmp    dl,0x7
c0017de4:	0f 84 0d 02 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dea:	b8 30 bc 02 c0       	mov    eax,0xc002bc30
c0017def:	80 fa 08             	cmp    dl,0x8
c0017df2:	0f 84 ff 01 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017df8:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017dfd:	80 fa 09             	cmp    dl,0x9
c0017e00:	0f 85 f1 01 00 00    	jne    c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e06:	b8 40 bc 02 c0       	mov    eax,0xc002bc40
c0017e0b:	c3                   	ret    
c0017e0c:	80 f9 06             	cmp    cl,0x6
c0017e0f:	0f 85 85 01 00 00    	jne    c0017f9a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017e15:	b8 50 bc 02 c0       	mov    eax,0xc002bc50
c0017e1a:	80 fa 01             	cmp    dl,0x1
c0017e1d:	0f 84 d4 01 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e23:	8d 42 fb             	lea    eax,[edx-0x5]
c0017e26:	3c 01                	cmp    al,0x1
c0017e28:	0f 86 ac 01 00 00    	jbe    c0017fda <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017e2e:	80 fa 03             	cmp    dl,0x3
c0017e31:	0f 84 a3 01 00 00    	je     c0017fda <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017e37:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017e3a:	b8 70 bc 02 c0       	mov    eax,0xc002bc70
c0017e3f:	80 f9 01             	cmp    cl,0x1
c0017e42:	0f 86 af 01 00 00    	jbe    c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e48:	80 fa 09             	cmp    dl,0x9
c0017e4b:	0f 84 8f 01 00 00    	je     c0017fe0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017e51:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017e54:	80 f9 01             	cmp    cl,0x1
c0017e57:	0f 86 9a 01 00 00    	jbe    c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e5d:	b8 80 bc 02 c0       	mov    eax,0xc002bc80
c0017e62:	80 fa 0d             	cmp    dl,0xd
c0017e65:	0f 84 8c 01 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e6b:	b8 90 bc 02 c0       	mov    eax,0xc002bc90
c0017e70:	80 fa 0e             	cmp    dl,0xe
c0017e73:	0f 84 7e 01 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e79:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017e7e:	80 fa 0f             	cmp    dl,0xf
c0017e81:	0f 84 70 01 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e87:	b8 80 bc 02 c0       	mov    eax,0xc002bc80
c0017e8c:	80 fa 15             	cmp    dl,0x15
c0017e8f:	0f 84 62 01 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e95:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017e98:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017e9d:	80 f9 01             	cmp    cl,0x1
c0017ea0:	0f 86 51 01 00 00    	jbe    c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ea6:	80 fa 1a             	cmp    dl,0x1a
c0017ea9:	0f 84 37 01 00 00    	je     c0017fe6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017eaf:	80 fa 1c             	cmp    dl,0x1c
c0017eb2:	0f 84 34 01 00 00    	je     c0017fec <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017eb8:	80 fa 1d             	cmp    dl,0x1d
c0017ebb:	0f 84 36 01 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ec1:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017ec6:	80 fa 25             	cmp    dl,0x25
c0017ec9:	0f 84 28 01 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ecf:	8d 4a da             	lea    ecx,[edx-0x26]
c0017ed2:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017ed7:	80 f9 01             	cmp    cl,0x1
c0017eda:	0f 86 17 01 00 00    	jbe    c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ee0:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017ee5:	80 fa 2a             	cmp    dl,0x2a
c0017ee8:	0f 84 09 01 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eee:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017ef3:	80 fa 2c             	cmp    dl,0x2c
c0017ef6:	0f 84 fb 00 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017efc:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017f01:	80 fa 2d             	cmp    dl,0x2d
c0017f04:	0f 84 ed 00 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f0a:	b8 b0 bc 02 c0       	mov    eax,0xc002bcb0
c0017f0f:	80 fa 2e             	cmp    dl,0x2e
c0017f12:	0f 84 df 00 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f18:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017f1d:	80 fa 2f             	cmp    dl,0x2f
c0017f20:	0f 84 d1 00 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f26:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017f29:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017f2e:	80 f9 01             	cmp    cl,0x1
c0017f31:	0f 86 c0 00 00 00    	jbe    c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f37:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017f3c:	80 fa 37             	cmp    dl,0x37
c0017f3f:	0f 84 b2 00 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f45:	b8 00 bd 02 c0       	mov    eax,0xc002bd00
c0017f4a:	80 fa 3a             	cmp    dl,0x3a
c0017f4d:	0f 84 a4 00 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f53:	b8 10 bd 02 c0       	mov    eax,0xc002bd10
c0017f58:	80 fa 3c             	cmp    dl,0x3c
c0017f5b:	0f 84 96 00 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f61:	b8 20 bd 02 c0       	mov    eax,0xc002bd20
c0017f66:	80 fa 3d             	cmp    dl,0x3d
c0017f69:	0f 84 88 00 00 00    	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f6f:	b8 00 bd 02 c0       	mov    eax,0xc002bd00
c0017f74:	80 fa 3e             	cmp    dl,0x3e
c0017f77:	74 7e                	je     c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f79:	8d 42 bb             	lea    eax,[edx-0x45]
c0017f7c:	3c 01                	cmp    al,0x1
c0017f7e:	76 72                	jbe    c0017ff2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017f80:	80 fa 3f             	cmp    dl,0x3f
c0017f83:	74 6d                	je     c0017ff2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017f85:	80 fa 4a             	cmp    dl,0x4a
c0017f88:	74 0a                	je     c0017f94 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017f8a:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017f8f:	80 fa 4d             	cmp    dl,0x4d
c0017f92:	75 63                	jne    c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f94:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017f99:	c3                   	ret    
c0017f9a:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017f9f:	80 f9 0b             	cmp    cl,0xb
c0017fa2:	75 0a                	jne    c0017fae <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017fa4:	fe ca                	dec    dl
c0017fa6:	75 4f                	jne    c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fa8:	b8 30 bd 02 c0       	mov    eax,0xc002bd30
c0017fad:	c3                   	ret    
c0017fae:	80 f9 0f             	cmp    cl,0xf
c0017fb1:	75 44                	jne    c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fb3:	b8 40 bd 02 c0       	mov    eax,0xc002bd40
c0017fb8:	80 fa 02             	cmp    dl,0x2
c0017fbb:	76 3a                	jbe    c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fbd:	8d 42 fd             	lea    eax,[edx-0x3]
c0017fc0:	3c 01                	cmp    al,0x1
c0017fc2:	76 0a                	jbe    c0017fce <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017fc4:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017fc9:	80 fa 06             	cmp    dl,0x6
c0017fcc:	75 29                	jne    c0017ff7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fce:	b8 50 bd 02 c0       	mov    eax,0xc002bd50
c0017fd3:	c3                   	ret    
c0017fd4:	b8 30 bc 02 c0       	mov    eax,0xc002bc30
c0017fd9:	c3                   	ret    
c0017fda:	b8 60 bc 02 c0       	mov    eax,0xc002bc60
c0017fdf:	c3                   	ret    
c0017fe0:	b8 80 bc 02 c0       	mov    eax,0xc002bc80
c0017fe5:	c3                   	ret    
c0017fe6:	b8 b0 bc 02 c0       	mov    eax,0xc002bcb0
c0017feb:	c3                   	ret    
c0017fec:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017ff1:	c3                   	ret    
c0017ff2:	b8 10 bd 02 c0       	mov    eax,0xc002bd10
c0017ff7:	c3                   	ret    

c0017ff8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017ff8:	60                   	pusha  
c0017ff9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017ffd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018001:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018005:	9c                   	pushf  
c0018006:	fa                   	cli    
c0018007:	0f 09                	wbinvd 
c0018009:	0f 30                	wrmsr  
c001800b:	9d                   	popf   
c001800c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018010:	89 02                	mov    DWORD PTR [edx],eax
c0018012:	61                   	popa   
c0018013:	c3                   	ret    

c0018014 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018014:	60                   	pusha  
c0018015:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018019:	9c                   	pushf  
c001801a:	fa                   	cli    
c001801b:	0f 09                	wbinvd 
c001801d:	31 c0                	xor    eax,eax
c001801f:	31 d2                	xor    edx,edx
c0018021:	0f 32                	rdmsr  
c0018023:	9d                   	popf   
c0018024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018028:	89 02                	mov    DWORD PTR [edx],eax
c001802a:	61                   	popa   
c001802b:	c3                   	ret    

c001802c <CPU::AMD_K6_writeback(int, int, int)>:
c001802c:	56                   	push   esi
c001802d:	53                   	push   ebx
c001802e:	83 ec 10             	sub    esp,0x10
c0018031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018035:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001803a:	75 5d                	jne    c0018099 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001803c:	83 f8 08             	cmp    eax,0x8
c001803f:	75 09                	jne    c001804a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018041:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018046:	7e 13                	jle    c001805b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018048:	eb 30                	jmp    c001807a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001804a:	83 f8 06             	cmp    eax,0x6
c001804d:	7c 4a                	jl     c0018099 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001804f:	83 f8 07             	cmp    eax,0x7
c0018052:	7e 07                	jle    c001805b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018054:	83 f8 09             	cmp    eax,0x9
c0018057:	74 21                	je     c001807a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018059:	eb 3e                	jmp    c0018099 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001805b:	89 e6                	mov    esi,esp
c001805d:	8b 1d 84 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c984
c0018063:	56                   	push   esi
c0018064:	c1 eb 15             	shr    ebx,0x15
c0018067:	68 82 00 00 c0       	push   0xc0000082
c001806c:	83 e3 7e             	and    ebx,0x7e
c001806f:	e8 a0 ff ff ff       	call   c0018014 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018074:	56                   	push   esi
c0018075:	6a 00                	push   0x0
c0018077:	53                   	push   ebx
c0018078:	eb 12                	jmp    c001808c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001807a:	89 e3                	mov    ebx,esp
c001807c:	53                   	push   ebx
c001807d:	68 82 00 00 c0       	push   0xc0000082
c0018082:	e8 8d ff ff ff       	call   c0018014 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018087:	53                   	push   ebx
c0018088:	6a 00                	push   0x0
c001808a:	6a 00                	push   0x0
c001808c:	68 82 00 00 c0       	push   0xc0000082
c0018091:	e8 62 ff ff ff       	call   c0017ff8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018096:	83 c4 18             	add    esp,0x18
c0018099:	83 c4 10             	add    esp,0x10
c001809c:	5b                   	pop    ebx
c001809d:	5e                   	pop    esi
c001809e:	c3                   	ret    
c001809f:	90                   	nop

c00180a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00180a0:	55                   	push   ebp
c00180a1:	57                   	push   edi
c00180a2:	56                   	push   esi
c00180a3:	53                   	push   ebx
c00180a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180a8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00180ac:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00180b0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00180b4:	39 05 60 be 02 c0    	cmp    DWORD PTR ds:0xc002be60,eax
c00180ba:	75 23                	jne    c00180df <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00180bc:	a1 6c d4 02 c0       	mov    eax,ds:0xc002d46c
c00180c1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00180c5:	89 06                	mov    DWORD PTR [esi],eax
c00180c7:	a1 68 d4 02 c0       	mov    eax,ds:0xc002d468
c00180cc:	89 07                	mov    DWORD PTR [edi],eax
c00180ce:	a1 64 d4 02 c0       	mov    eax,ds:0xc002d464
c00180d3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00180d6:	a1 60 d4 02 c0       	mov    eax,ds:0xc002d460
c00180db:	89 02                	mov    DWORD PTR [edx],eax
c00180dd:	eb 3f                	jmp    c001811e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00180df:	31 c9                	xor    ecx,ecx
c00180e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180e5:	0f a2                	cpuid  
c00180e7:	89 06                	mov    DWORD PTR [esi],eax
c00180e9:	89 1f                	mov    DWORD PTR [edi],ebx
c00180eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00180ef:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00180f2:	89 10                	mov    DWORD PTR [eax],edx
c00180f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180f8:	a3 60 be 02 c0       	mov    ds:0xc002be60,eax
c00180fd:	8b 06                	mov    eax,DWORD PTR [esi]
c00180ff:	a3 6c d4 02 c0       	mov    ds:0xc002d46c,eax
c0018104:	8b 07                	mov    eax,DWORD PTR [edi]
c0018106:	a3 68 d4 02 c0       	mov    ds:0xc002d468,eax
c001810b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001810e:	a3 64 d4 02 c0       	mov    ds:0xc002d464,eax
c0018113:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018117:	8b 00                	mov    eax,DWORD PTR [eax]
c0018119:	a3 60 d4 02 c0       	mov    ds:0xc002d460,eax
c001811e:	5b                   	pop    ebx
c001811f:	5e                   	pop    esi
c0018120:	5f                   	pop    edi
c0018121:	5d                   	pop    ebp
c0018122:	c3                   	ret    
c0018123:	90                   	nop

c0018124 <CPU::cpuidCheckEDX(unsigned int)>:
c0018124:	83 ec 10             	sub    esp,0x10
c0018127:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001812b:	50                   	push   eax
c001812c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018130:	50                   	push   eax
c0018131:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018135:	50                   	push   eax
c0018136:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001813a:	50                   	push   eax
c001813b:	6a 01                	push   0x1
c001813d:	e8 5e ff ff ff       	call   c00180a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018142:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018146:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001814a:	0f 95 c0             	setne  al
c001814d:	83 c4 24             	add    esp,0x24
c0018150:	c3                   	ret    
c0018151:	90                   	nop

c0018152 <CPU::cpuidCheckECX(unsigned int)>:
c0018152:	83 ec 10             	sub    esp,0x10
c0018155:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018159:	50                   	push   eax
c001815a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001815e:	50                   	push   eax
c001815f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018163:	50                   	push   eax
c0018164:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018168:	50                   	push   eax
c0018169:	6a 01                	push   0x1
c001816b:	e8 30 ff ff ff       	call   c00180a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018170:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018174:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018178:	0f 95 c0             	setne  al
c001817b:	83 c4 24             	add    esp,0x24
c001817e:	c3                   	ret    
c001817f:	90                   	nop

c0018180 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018180:	83 ec 10             	sub    esp,0x10
c0018183:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018187:	50                   	push   eax
c0018188:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001818c:	50                   	push   eax
c001818d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018191:	50                   	push   eax
c0018192:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018196:	50                   	push   eax
c0018197:	6a 07                	push   0x7
c0018199:	e8 02 ff ff ff       	call   c00180a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001819e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181a2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00181a6:	0f 95 c0             	setne  al
c00181a9:	83 c4 24             	add    esp,0x24
c00181ac:	c3                   	ret    
c00181ad:	90                   	nop

c00181ae <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00181ae:	83 ec 10             	sub    esp,0x10
c00181b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181b5:	50                   	push   eax
c00181b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181ba:	50                   	push   eax
c00181bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181bf:	50                   	push   eax
c00181c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181c4:	50                   	push   eax
c00181c5:	6a 07                	push   0x7
c00181c7:	e8 d4 fe ff ff       	call   c00180a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00181cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181d0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00181d4:	0f 95 c0             	setne  al
c00181d7:	83 c4 24             	add    esp,0x24
c00181da:	c3                   	ret    
c00181db:	90                   	nop

c00181dc <CPU::CPU()>:
c00181dc:	83 ec 0c             	sub    esp,0xc
c00181df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e3:	83 ec 08             	sub    esp,0x8
c00181e6:	68 7e a0 02 c0       	push   0xc002a07e
c00181eb:	50                   	push   eax
c00181ec:	e8 6f bb ff ff       	call   c0013d60 <Device::Device(char const*)>
c00181f1:	83 c4 10             	add    esp,0x10
c00181f4:	ba 58 a1 02 c0       	mov    edx,0xc002a158
c00181f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181fd:	89 10                	mov    DWORD PTR [eax],edx
c00181ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018203:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001820d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018211:	05 78 01 00 00       	add    eax,0x178
c0018216:	83 ec 0c             	sub    esp,0xc
c0018219:	50                   	push   eax
c001821a:	e8 cd 6a ff ff       	call   c000ecec <GDT::GDT()>
c001821f:	83 c4 10             	add    esp,0x10
c0018222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018226:	05 7c 09 00 00       	add    eax,0x97c
c001822b:	83 ec 0c             	sub    esp,0xc
c001822e:	50                   	push   eax
c001822f:	e8 1a 6d ff ff       	call   c000ef4e <IDT::IDT()>
c0018234:	83 c4 10             	add    esp,0x10
c0018237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823b:	05 7c 11 00 00       	add    eax,0x117c
c0018240:	83 ec 0c             	sub    esp,0xc
c0018243:	50                   	push   eax
c0018244:	e8 79 8e ff ff       	call   c00110c2 <TSS::TSS()>
c0018249:	83 c4 10             	add    esp,0x10
c001824c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018250:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001825b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018265:	90                   	nop
c0018266:	83 c4 0c             	add    esp,0xc
c0018269:	c3                   	ret    

c001826a <CPU::displayFeatures()>:
c001826a:	53                   	push   ebx
c001826b:	83 ec 10             	sub    esp,0x10
c001826e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018272:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018278:	68 8c 9d 02 c0       	push   0xc0029d8c
c001827d:	e8 ff a4 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0018282:	59                   	pop    ecx
c0018283:	58                   	pop    eax
c0018284:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001828a:	50                   	push   eax
c001828b:	68 9d 9d 02 c0       	push   0xc0029d9d
c0018290:	e8 ec a4 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0018295:	58                   	pop    eax
c0018296:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001829c:	5a                   	pop    edx
c001829d:	c1 e8 0e             	shr    eax,0xe
c00182a0:	0f b6 c0             	movzx  eax,al
c00182a3:	50                   	push   eax
c00182a4:	68 ae 9d 02 c0       	push   0xc0029dae
c00182a9:	e8 d3 a4 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00182ae:	59                   	pop    ecx
c00182af:	58                   	pop    eax
c00182b0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182b6:	66 c1 e8 06          	shr    ax,0x6
c00182ba:	0f b6 c0             	movzx  eax,al
c00182bd:	50                   	push   eax
c00182be:	68 bf 9d 02 c0       	push   0xc0029dbf
c00182c3:	e8 b9 a4 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00182c8:	c7 04 24 5b a2 02 c0 	mov    DWORD PTR [esp],0xc002a25b
c00182cf:	e8 ad a4 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00182d4:	83 c4 10             	add    esp,0x10
c00182d7:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c00182dc:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00182e3:	74 05                	je     c00182ea <CPU::displayFeatures()+0x80>
c00182e5:	b8 58 89 02 c0       	mov    eax,0xc0028958
c00182ea:	52                   	push   edx
c00182eb:	52                   	push   edx
c00182ec:	50                   	push   eax
c00182ed:	68 d0 9d 02 c0       	push   0xc0029dd0
c00182f2:	e8 8a a4 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00182f7:	83 c4 10             	add    esp,0x10
c00182fa:	b8 58 89 02 c0       	mov    eax,0xc0028958
c00182ff:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018306:	78 05                	js     c001830d <CPU::displayFeatures()+0xa3>
c0018308:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c001830d:	51                   	push   ecx
c001830e:	51                   	push   ecx
c001830f:	50                   	push   eax
c0018310:	68 e7 9d 02 c0       	push   0xc0029de7
c0018315:	e8 67 a4 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001831a:	83 c4 10             	add    esp,0x10
c001831d:	b8 58 89 02 c0       	mov    eax,0xc0028958
c0018322:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018329:	75 05                	jne    c0018330 <CPU::displayFeatures()+0xc6>
c001832b:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c0018330:	52                   	push   edx
c0018331:	52                   	push   edx
c0018332:	50                   	push   eax
c0018333:	68 fe 9d 02 c0       	push   0xc0029dfe
c0018338:	e8 44 a4 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001833d:	83 c4 10             	add    esp,0x10
c0018340:	b8 58 89 02 c0       	mov    eax,0xc0028958
c0018345:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001834c:	75 05                	jne    c0018353 <CPU::displayFeatures()+0xe9>
c001834e:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c0018353:	51                   	push   ecx
c0018354:	51                   	push   ecx
c0018355:	50                   	push   eax
c0018356:	68 15 9e 02 c0       	push   0xc0029e15
c001835b:	e8 21 a4 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0018360:	83 c4 10             	add    esp,0x10
c0018363:	b8 58 89 02 c0       	mov    eax,0xc0028958
c0018368:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001836f:	75 05                	jne    c0018376 <CPU::displayFeatures()+0x10c>
c0018371:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c0018376:	52                   	push   edx
c0018377:	52                   	push   edx
c0018378:	50                   	push   eax
c0018379:	68 2c 9e 02 c0       	push   0xc0029e2c
c001837e:	e8 fe a3 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0018383:	83 c4 10             	add    esp,0x10
c0018386:	b8 58 89 02 c0       	mov    eax,0xc0028958
c001838b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018392:	75 05                	jne    c0018399 <CPU::displayFeatures()+0x12f>
c0018394:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c0018399:	51                   	push   ecx
c001839a:	51                   	push   ecx
c001839b:	50                   	push   eax
c001839c:	68 43 9e 02 c0       	push   0xc0029e43
c00183a1:	e8 db a3 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00183a6:	83 c4 10             	add    esp,0x10
c00183a9:	b8 58 89 02 c0       	mov    eax,0xc0028958
c00183ae:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00183b5:	75 05                	jne    c00183bc <CPU::displayFeatures()+0x152>
c00183b7:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c00183bc:	52                   	push   edx
c00183bd:	52                   	push   edx
c00183be:	50                   	push   eax
c00183bf:	68 5a 9e 02 c0       	push   0xc0029e5a
c00183c4:	e8 b8 a3 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00183c9:	83 c4 10             	add    esp,0x10
c00183cc:	b8 58 89 02 c0       	mov    eax,0xc0028958
c00183d1:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00183d8:	75 05                	jne    c00183df <CPU::displayFeatures()+0x175>
c00183da:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c00183df:	51                   	push   ecx
c00183e0:	51                   	push   ecx
c00183e1:	50                   	push   eax
c00183e2:	68 71 9e 02 c0       	push   0xc0029e71
c00183e7:	e8 95 a3 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00183ec:	83 c4 10             	add    esp,0x10
c00183ef:	b8 58 89 02 c0       	mov    eax,0xc0028958
c00183f4:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00183fb:	75 05                	jne    c0018402 <CPU::displayFeatures()+0x198>
c00183fd:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c0018402:	52                   	push   edx
c0018403:	52                   	push   edx
c0018404:	50                   	push   eax
c0018405:	68 88 9e 02 c0       	push   0xc0029e88
c001840a:	e8 72 a3 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001840f:	83 c4 10             	add    esp,0x10
c0018412:	b8 58 89 02 c0       	mov    eax,0xc0028958
c0018417:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001841e:	75 05                	jne    c0018425 <CPU::displayFeatures()+0x1bb>
c0018420:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c0018425:	51                   	push   ecx
c0018426:	51                   	push   ecx
c0018427:	50                   	push   eax
c0018428:	68 9f 9e 02 c0       	push   0xc0029e9f
c001842d:	e8 4f a3 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0018432:	83 c4 10             	add    esp,0x10
c0018435:	b8 58 89 02 c0       	mov    eax,0xc0028958
c001843a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018441:	75 05                	jne    c0018448 <CPU::displayFeatures()+0x1de>
c0018443:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c0018448:	52                   	push   edx
c0018449:	52                   	push   edx
c001844a:	50                   	push   eax
c001844b:	68 b6 9e 02 c0       	push   0xc0029eb6
c0018450:	e8 2c a3 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0018455:	83 c4 10             	add    esp,0x10
c0018458:	b8 58 89 02 c0       	mov    eax,0xc0028958
c001845d:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018464:	75 05                	jne    c001846b <CPU::displayFeatures()+0x201>
c0018466:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c001846b:	51                   	push   ecx
c001846c:	51                   	push   ecx
c001846d:	50                   	push   eax
c001846e:	68 cd 9e 02 c0       	push   0xc0029ecd
c0018473:	e8 09 a3 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0018478:	83 c4 10             	add    esp,0x10
c001847b:	b8 58 89 02 c0       	mov    eax,0xc0028958
c0018480:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018487:	75 05                	jne    c001848e <CPU::displayFeatures()+0x224>
c0018489:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c001848e:	52                   	push   edx
c001848f:	52                   	push   edx
c0018490:	50                   	push   eax
c0018491:	68 e4 9e 02 c0       	push   0xc0029ee4
c0018496:	e8 e6 a2 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001849b:	83 c4 10             	add    esp,0x10
c001849e:	b8 58 89 02 c0       	mov    eax,0xc0028958
c00184a3:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00184aa:	78 05                	js     c00184b1 <CPU::displayFeatures()+0x247>
c00184ac:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c00184b1:	51                   	push   ecx
c00184b2:	51                   	push   ecx
c00184b3:	50                   	push   eax
c00184b4:	68 fb 9e 02 c0       	push   0xc0029efb
c00184b9:	e8 c3 a2 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00184be:	83 c4 10             	add    esp,0x10
c00184c1:	b8 58 89 02 c0       	mov    eax,0xc0028958
c00184c6:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00184cd:	75 05                	jne    c00184d4 <CPU::displayFeatures()+0x26a>
c00184cf:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c00184d4:	52                   	push   edx
c00184d5:	52                   	push   edx
c00184d6:	50                   	push   eax
c00184d7:	68 12 9f 02 c0       	push   0xc0029f12
c00184dc:	e8 a0 a2 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00184e1:	83 c4 18             	add    esp,0x18
c00184e4:	5b                   	pop    ebx
c00184e5:	c3                   	ret    

c00184e6 <CPU::detectFeatures()>:
c00184e6:	55                   	push   ebp
c00184e7:	57                   	push   edi
c00184e8:	56                   	push   esi
c00184e9:	53                   	push   ebx
c00184ea:	83 ec 50             	sub    esp,0x50
c00184ed:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00184f1:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00184fb:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018502:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018508:	6a 0d                	push   0xd
c001850a:	6a 00                	push   0x0
c001850c:	57                   	push   edi
c001850d:	e8 79 81 fe ff       	call   c000068b <memset>
c0018512:	83 c4 10             	add    esp,0x10
c0018515:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001851a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018521:	0f 84 20 09 00 00    	je     c0018e47 <CPU::detectFeatures()+0x961>
c0018527:	83 ec 0c             	sub    esp,0xc
c001852a:	6a 10                	push   0x10
c001852c:	e8 f3 fb ff ff       	call   c0018124 <CPU::cpuidCheckEDX(unsigned int)>
c0018531:	83 e0 01             	and    eax,0x1
c0018534:	8d 14 00             	lea    edx,[eax+eax*1]
c0018537:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001853d:	83 e0 fd             	and    eax,0xfffffffd
c0018540:	09 d0                	or     eax,edx
c0018542:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018548:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001854f:	e8 d0 fb ff ff       	call   c0018124 <CPU::cpuidCheckEDX(unsigned int)>
c0018554:	83 e0 01             	and    eax,0x1
c0018557:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001855e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018564:	83 e0 fb             	and    eax,0xfffffffb
c0018567:	09 d0                	or     eax,edx
c0018569:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001856f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018576:	e8 a9 fb ff ff       	call   c0018124 <CPU::cpuidCheckEDX(unsigned int)>
c001857b:	83 e0 01             	and    eax,0x1
c001857e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018585:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001858b:	83 e0 f7             	and    eax,0xfffffff7
c001858e:	09 d0                	or     eax,edx
c0018590:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018596:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001859d:	e8 82 fb ff ff       	call   c0018124 <CPU::cpuidCheckEDX(unsigned int)>
c00185a2:	83 e0 01             	and    eax,0x1
c00185a5:	c1 e0 04             	shl    eax,0x4
c00185a8:	88 c2                	mov    dl,al
c00185aa:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00185b0:	83 e0 ef             	and    eax,0xffffffef
c00185b3:	09 d0                	or     eax,edx
c00185b5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185bb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00185c2:	e8 5d fb ff ff       	call   c0018124 <CPU::cpuidCheckEDX(unsigned int)>
c00185c7:	83 e0 01             	and    eax,0x1
c00185ca:	c1 e0 05             	shl    eax,0x5
c00185cd:	88 c2                	mov    dl,al
c00185cf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00185d5:	83 e0 df             	and    eax,0xffffffdf
c00185d8:	09 d0                	or     eax,edx
c00185da:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185e0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00185e7:	e8 38 fb ff ff       	call   c0018124 <CPU::cpuidCheckEDX(unsigned int)>
c00185ec:	83 e0 01             	and    eax,0x1
c00185ef:	8d 14 00             	lea    edx,[eax+eax*1]
c00185f2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00185f8:	83 e0 fd             	and    eax,0xfffffffd
c00185fb:	09 d0                	or     eax,edx
c00185fd:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018603:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001860a:	e8 15 fb ff ff       	call   c0018124 <CPU::cpuidCheckEDX(unsigned int)>
c001860f:	83 e0 01             	and    eax,0x1
c0018612:	c1 e0 06             	shl    eax,0x6
c0018615:	88 c2                	mov    dl,al
c0018617:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001861d:	83 e0 bf             	and    eax,0xffffffbf
c0018620:	09 d0                	or     eax,edx
c0018622:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018628:	58                   	pop    eax
c0018629:	8d 74 24 28          	lea    esi,[esp+0x28]
c001862d:	56                   	push   esi
c001862e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018632:	55                   	push   ebp
c0018633:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018637:	50                   	push   eax
c0018638:	8d 54 24 28          	lea    edx,[esp+0x28]
c001863c:	52                   	push   edx
c001863d:	6a 00                	push   0x0
c001863f:	e8 5c fa ff ff       	call   c00180a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018644:	83 c4 1c             	add    esp,0x1c
c0018647:	6a 04                	push   0x4
c0018649:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001864d:	50                   	push   eax
c001864e:	57                   	push   edi
c001864f:	e8 01 80 fe ff       	call   c0000655 <memcpy>
c0018654:	83 c4 0c             	add    esp,0xc
c0018657:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001865d:	6a 04                	push   0x4
c001865f:	56                   	push   esi
c0018660:	50                   	push   eax
c0018661:	e8 ef 7f fe ff       	call   c0000655 <memcpy>
c0018666:	83 c4 0c             	add    esp,0xc
c0018669:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001866f:	6a 04                	push   0x4
c0018671:	55                   	push   ebp
c0018672:	50                   	push   eax
c0018673:	e8 dd 7f fe ff       	call   c0000655 <memcpy>
c0018678:	58                   	pop    eax
c0018679:	5a                   	pop    edx
c001867a:	68 29 9f 02 c0       	push   0xc0029f29
c001867f:	57                   	push   edi
c0018680:	e8 f6 80 fe ff       	call   c000077b <strcmp>
c0018685:	83 c4 10             	add    esp,0x10
c0018688:	85 c0                	test   eax,eax
c001868a:	75 0f                	jne    c001869b <CPU::detectFeatures()+0x1b5>
c001868c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018696:	e9 22 02 00 00       	jmp    c00188bd <CPU::detectFeatures()+0x3d7>
c001869b:	50                   	push   eax
c001869c:	50                   	push   eax
c001869d:	68 36 9f 02 c0       	push   0xc0029f36
c00186a2:	57                   	push   edi
c00186a3:	e8 d3 80 fe ff       	call   c000077b <strcmp>
c00186a8:	83 c4 10             	add    esp,0x10
c00186ab:	85 c0                	test   eax,eax
c00186ad:	74 dd                	je     c001868c <CPU::detectFeatures()+0x1a6>
c00186af:	51                   	push   ecx
c00186b0:	51                   	push   ecx
c00186b1:	68 43 9f 02 c0       	push   0xc0029f43
c00186b6:	57                   	push   edi
c00186b7:	e8 bf 80 fe ff       	call   c000077b <strcmp>
c00186bc:	83 c4 10             	add    esp,0x10
c00186bf:	85 c0                	test   eax,eax
c00186c1:	74 2a                	je     c00186ed <CPU::detectFeatures()+0x207>
c00186c3:	52                   	push   edx
c00186c4:	52                   	push   edx
c00186c5:	68 50 9f 02 c0       	push   0xc0029f50
c00186ca:	57                   	push   edi
c00186cb:	e8 ab 80 fe ff       	call   c000077b <strcmp>
c00186d0:	83 c4 10             	add    esp,0x10
c00186d3:	85 c0                	test   eax,eax
c00186d5:	74 16                	je     c00186ed <CPU::detectFeatures()+0x207>
c00186d7:	50                   	push   eax
c00186d8:	50                   	push   eax
c00186d9:	68 5d 9f 02 c0       	push   0xc0029f5d
c00186de:	57                   	push   edi
c00186df:	e8 97 80 fe ff       	call   c000077b <strcmp>
c00186e4:	83 c4 10             	add    esp,0x10
c00186e7:	85 c0                	test   eax,eax
c00186e9:	74 48                	je     c0018733 <CPU::detectFeatures()+0x24d>
c00186eb:	eb 0f                	jmp    c00186fc <CPU::detectFeatures()+0x216>
c00186ed:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00186f7:	e9 c1 01 00 00       	jmp    c00188bd <CPU::detectFeatures()+0x3d7>
c00186fc:	50                   	push   eax
c00186fd:	50                   	push   eax
c00186fe:	68 6a 9f 02 c0       	push   0xc0029f6a
c0018703:	57                   	push   edi
c0018704:	e8 72 80 fe ff       	call   c000077b <strcmp>
c0018709:	83 c4 10             	add    esp,0x10
c001870c:	85 c0                	test   eax,eax
c001870e:	74 23                	je     c0018733 <CPU::detectFeatures()+0x24d>
c0018710:	50                   	push   eax
c0018711:	50                   	push   eax
c0018712:	68 77 9f 02 c0       	push   0xc0029f77
c0018717:	57                   	push   edi
c0018718:	e8 5e 80 fe ff       	call   c000077b <strcmp>
c001871d:	83 c4 10             	add    esp,0x10
c0018720:	85 c0                	test   eax,eax
c0018722:	75 1e                	jne    c0018742 <CPU::detectFeatures()+0x25c>
c0018724:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001872e:	e9 8a 01 00 00       	jmp    c00188bd <CPU::detectFeatures()+0x3d7>
c0018733:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001873d:	e9 7b 01 00 00       	jmp    c00188bd <CPU::detectFeatures()+0x3d7>
c0018742:	50                   	push   eax
c0018743:	50                   	push   eax
c0018744:	68 84 9f 02 c0       	push   0xc0029f84
c0018749:	57                   	push   edi
c001874a:	e8 2c 80 fe ff       	call   c000077b <strcmp>
c001874f:	83 c4 10             	add    esp,0x10
c0018752:	85 c0                	test   eax,eax
c0018754:	75 0f                	jne    c0018765 <CPU::detectFeatures()+0x27f>
c0018756:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018760:	e9 58 01 00 00       	jmp    c00188bd <CPU::detectFeatures()+0x3d7>
c0018765:	50                   	push   eax
c0018766:	50                   	push   eax
c0018767:	68 43 9f 02 c0       	push   0xc0029f43
c001876c:	57                   	push   edi
c001876d:	e8 09 80 fe ff       	call   c000077b <strcmp>
c0018772:	83 c4 10             	add    esp,0x10
c0018775:	85 c0                	test   eax,eax
c0018777:	75 0f                	jne    c0018788 <CPU::detectFeatures()+0x2a2>
c0018779:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018783:	e9 35 01 00 00       	jmp    c00188bd <CPU::detectFeatures()+0x3d7>
c0018788:	50                   	push   eax
c0018789:	50                   	push   eax
c001878a:	68 91 9f 02 c0       	push   0xc0029f91
c001878f:	57                   	push   edi
c0018790:	e8 e6 7f fe ff       	call   c000077b <strcmp>
c0018795:	83 c4 10             	add    esp,0x10
c0018798:	85 c0                	test   eax,eax
c001879a:	75 0f                	jne    c00187ab <CPU::detectFeatures()+0x2c5>
c001879c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00187a6:	e9 12 01 00 00       	jmp    c00188bd <CPU::detectFeatures()+0x3d7>
c00187ab:	51                   	push   ecx
c00187ac:	51                   	push   ecx
c00187ad:	68 9e 9f 02 c0       	push   0xc0029f9e
c00187b2:	57                   	push   edi
c00187b3:	e8 c3 7f fe ff       	call   c000077b <strcmp>
c00187b8:	83 c4 10             	add    esp,0x10
c00187bb:	85 c0                	test   eax,eax
c00187bd:	75 0f                	jne    c00187ce <CPU::detectFeatures()+0x2e8>
c00187bf:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00187c9:	e9 ef 00 00 00       	jmp    c00188bd <CPU::detectFeatures()+0x3d7>
c00187ce:	52                   	push   edx
c00187cf:	52                   	push   edx
c00187d0:	68 ab 9f 02 c0       	push   0xc0029fab
c00187d5:	57                   	push   edi
c00187d6:	e8 a0 7f fe ff       	call   c000077b <strcmp>
c00187db:	83 c4 10             	add    esp,0x10
c00187de:	85 c0                	test   eax,eax
c00187e0:	75 0f                	jne    c00187f1 <CPU::detectFeatures()+0x30b>
c00187e2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00187ec:	e9 cc 00 00 00       	jmp    c00188bd <CPU::detectFeatures()+0x3d7>
c00187f1:	50                   	push   eax
c00187f2:	50                   	push   eax
c00187f3:	68 b8 9f 02 c0       	push   0xc0029fb8
c00187f8:	57                   	push   edi
c00187f9:	e8 7d 7f fe ff       	call   c000077b <strcmp>
c00187fe:	83 c4 10             	add    esp,0x10
c0018801:	85 c0                	test   eax,eax
c0018803:	75 0f                	jne    c0018814 <CPU::detectFeatures()+0x32e>
c0018805:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001880f:	e9 a9 00 00 00       	jmp    c00188bd <CPU::detectFeatures()+0x3d7>
c0018814:	50                   	push   eax
c0018815:	50                   	push   eax
c0018816:	68 c5 9f 02 c0       	push   0xc0029fc5
c001881b:	57                   	push   edi
c001881c:	e8 5a 7f fe ff       	call   c000077b <strcmp>
c0018821:	83 c4 10             	add    esp,0x10
c0018824:	85 c0                	test   eax,eax
c0018826:	75 0f                	jne    c0018837 <CPU::detectFeatures()+0x351>
c0018828:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018832:	e9 86 00 00 00       	jmp    c00188bd <CPU::detectFeatures()+0x3d7>
c0018837:	50                   	push   eax
c0018838:	50                   	push   eax
c0018839:	68 d2 9f 02 c0       	push   0xc0029fd2
c001883e:	57                   	push   edi
c001883f:	e8 37 7f fe ff       	call   c000077b <strcmp>
c0018844:	83 c4 10             	add    esp,0x10
c0018847:	85 c0                	test   eax,eax
c0018849:	75 0c                	jne    c0018857 <CPU::detectFeatures()+0x371>
c001884b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018855:	eb 66                	jmp    c00188bd <CPU::detectFeatures()+0x3d7>
c0018857:	50                   	push   eax
c0018858:	50                   	push   eax
c0018859:	68 df 9f 02 c0       	push   0xc0029fdf
c001885e:	57                   	push   edi
c001885f:	e8 17 7f fe ff       	call   c000077b <strcmp>
c0018864:	83 c4 10             	add    esp,0x10
c0018867:	85 c0                	test   eax,eax
c0018869:	75 0c                	jne    c0018877 <CPU::detectFeatures()+0x391>
c001886b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018875:	eb 46                	jmp    c00188bd <CPU::detectFeatures()+0x3d7>
c0018877:	50                   	push   eax
c0018878:	50                   	push   eax
c0018879:	68 ec 9f 02 c0       	push   0xc0029fec
c001887e:	57                   	push   edi
c001887f:	e8 f7 7e fe ff       	call   c000077b <strcmp>
c0018884:	83 c4 10             	add    esp,0x10
c0018887:	85 c0                	test   eax,eax
c0018889:	74 e0                	je     c001886b <CPU::detectFeatures()+0x385>
c001888b:	50                   	push   eax
c001888c:	50                   	push   eax
c001888d:	68 f9 9f 02 c0       	push   0xc0029ff9
c0018892:	57                   	push   edi
c0018893:	e8 e3 7e fe ff       	call   c000077b <strcmp>
c0018898:	83 c4 10             	add    esp,0x10
c001889b:	85 c0                	test   eax,eax
c001889d:	74 cc                	je     c001886b <CPU::detectFeatures()+0x385>
c001889f:	51                   	push   ecx
c00188a0:	51                   	push   ecx
c00188a1:	68 06 a0 02 c0       	push   0xc002a006
c00188a6:	57                   	push   edi
c00188a7:	e8 cf 7e fe ff       	call   c000077b <strcmp>
c00188ac:	83 c4 10             	add    esp,0x10
c00188af:	85 c0                	test   eax,eax
c00188b1:	74 b8                	je     c001886b <CPU::detectFeatures()+0x385>
c00188b3:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00188bd:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00188c2:	0f 86 be 00 00 00    	jbe    c0018986 <CPU::detectFeatures()+0x4a0>
c00188c8:	83 ec 0c             	sub    esp,0xc
c00188cb:	68 80 00 00 00       	push   0x80
c00188d0:	e8 ab f8 ff ff       	call   c0018180 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00188d5:	83 e0 01             	and    eax,0x1
c00188d8:	c1 e0 06             	shl    eax,0x6
c00188db:	88 c2                	mov    dl,al
c00188dd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188e3:	83 e0 bf             	and    eax,0xffffffbf
c00188e6:	09 d0                	or     eax,edx
c00188e8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188ee:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00188f5:	e8 86 f8 ff ff       	call   c0018180 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00188fa:	83 e0 01             	and    eax,0x1
c00188fd:	c1 e0 04             	shl    eax,0x4
c0018900:	88 c2                	mov    dl,al
c0018902:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018908:	83 e0 ef             	and    eax,0xffffffef
c001890b:	09 d0                	or     eax,edx
c001890d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018913:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001891a:	e8 61 f8 ff ff       	call   c0018180 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001891f:	c1 e0 07             	shl    eax,0x7
c0018922:	88 c2                	mov    dl,al
c0018924:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001892a:	83 e0 7f             	and    eax,0x7f
c001892d:	09 d0                	or     eax,edx
c001892f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018935:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001893c:	e8 6d f8 ff ff       	call   c00181ae <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018941:	83 e0 01             	and    eax,0x1
c0018944:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001894b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018951:	83 e0 f7             	and    eax,0xfffffff7
c0018954:	09 d0                	or     eax,edx
c0018956:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001895c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018963:	e8 46 f8 ff ff       	call   c00181ae <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018968:	83 c4 10             	add    esp,0x10
c001896b:	83 e0 01             	and    eax,0x1
c001896e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018975:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001897b:	83 e0 fb             	and    eax,0xfffffffb
c001897e:	09 d0                	or     eax,edx
c0018980:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018986:	83 ec 0c             	sub    esp,0xc
c0018989:	56                   	push   esi
c001898a:	55                   	push   ebp
c001898b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001898f:	57                   	push   edi
c0018990:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018994:	50                   	push   eax
c0018995:	6a 01                	push   0x1
c0018997:	e8 04 f7 ff ff       	call   c00180a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001899c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00189a0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00189a6:	88 ca                	mov    dl,cl
c00189a8:	83 e0 f0             	and    eax,0xfffffff0
c00189ab:	83 e2 0f             	and    edx,0xf
c00189ae:	09 d0                	or     eax,edx
c00189b0:	88 ca                	mov    dl,cl
c00189b2:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00189b8:	c0 ea 04             	shr    dl,0x4
c00189bb:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00189bf:	0f b6 c2             	movzx  eax,dl
c00189c2:	83 c4 20             	add    esp,0x20
c00189c5:	c1 e0 06             	shl    eax,0x6
c00189c8:	89 c5                	mov    ebp,eax
c00189ca:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00189d0:	66 25 3f c0          	and    ax,0xc03f
c00189d4:	09 e8                	or     eax,ebp
c00189d6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00189dd:	89 c8                	mov    eax,ecx
c00189df:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00189e5:	c1 e8 08             	shr    eax,0x8
c00189e8:	83 e2 3f             	and    edx,0x3f
c00189eb:	83 e0 0f             	and    eax,0xf
c00189ee:	89 c5                	mov    ebp,eax
c00189f0:	c1 e5 06             	shl    ebp,0x6
c00189f3:	09 d5                	or     ebp,edx
c00189f5:	89 ea                	mov    edx,ebp
c00189f7:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00189fd:	88 c2                	mov    dl,al
c00189ff:	c0 ea 02             	shr    dl,0x2
c0018a02:	89 d5                	mov    ebp,edx
c0018a04:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018a0a:	83 e2 c0             	and    edx,0xffffffc0
c0018a0d:	09 d5                	or     ebp,edx
c0018a0f:	89 ea                	mov    edx,ebp
c0018a11:	89 cd                	mov    ebp,ecx
c0018a13:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018a19:	c1 ed 0c             	shr    ebp,0xc
c0018a1c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018a22:	83 e5 03             	and    ebp,0x3
c0018a25:	83 e2 cf             	and    edx,0xffffffcf
c0018a28:	c1 e5 04             	shl    ebp,0x4
c0018a2b:	09 d5                	or     ebp,edx
c0018a2d:	3c 06                	cmp    al,0x6
c0018a2f:	89 ea                	mov    edx,ebp
c0018a31:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018a37:	74 04                	je     c0018a3d <CPU::detectFeatures()+0x557>
c0018a39:	3c 0f                	cmp    al,0xf
c0018a3b:	75 5c                	jne    c0018a99 <CPU::detectFeatures()+0x5b3>
c0018a3d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018a41:	89 cd                	mov    ebp,ecx
c0018a43:	c1 ed 10             	shr    ebp,0x10
c0018a46:	c1 e5 04             	shl    ebp,0x4
c0018a49:	09 ea                	or     edx,ebp
c0018a4b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018a51:	0f b6 d2             	movzx  edx,dl
c0018a54:	66 81 e5 3f c0       	and    bp,0xc03f
c0018a59:	c1 e2 06             	shl    edx,0x6
c0018a5c:	09 ea                	or     edx,ebp
c0018a5e:	3c 0f                	cmp    al,0xf
c0018a60:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018a67:	75 30                	jne    c0018a99 <CPU::detectFeatures()+0x5b3>
c0018a69:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018a6f:	c1 e9 14             	shr    ecx,0x14
c0018a72:	83 e0 3f             	and    eax,0x3f
c0018a75:	83 c1 0f             	add    ecx,0xf
c0018a78:	88 ca                	mov    dl,cl
c0018a7a:	c0 e9 02             	shr    cl,0x2
c0018a7d:	c1 e2 06             	shl    edx,0x6
c0018a80:	09 d0                	or     eax,edx
c0018a82:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018a88:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018a8e:	83 e0 c0             	and    eax,0xffffffc0
c0018a91:	09 c1                	or     ecx,eax
c0018a93:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018a99:	83 ec 0c             	sub    esp,0xc
c0018a9c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018aa3:	56                   	push   esi
c0018aa4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018aa8:	50                   	push   eax
c0018aa9:	57                   	push   edi
c0018aaa:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018aae:	55                   	push   ebp
c0018aaf:	68 00 00 00 80       	push   0x80000000
c0018ab4:	e8 e7 f5 ff ff       	call   c00180a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ab9:	83 c4 20             	add    esp,0x20
c0018abc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018ac4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ac8:	76 1e                	jbe    c0018ae8 <CPU::detectFeatures()+0x602>
c0018aca:	83 ec 0c             	sub    esp,0xc
c0018acd:	56                   	push   esi
c0018ace:	50                   	push   eax
c0018acf:	57                   	push   edi
c0018ad0:	55                   	push   ebp
c0018ad1:	68 01 00 00 80       	push   0x80000001
c0018ad6:	e8 c5 f5 ff ff       	call   c00180a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018adb:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018ae5:	83 c4 20             	add    esp,0x20
c0018ae8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018aee:	83 f8 01             	cmp    eax,0x1
c0018af1:	75 6f                	jne    c0018b62 <CPU::detectFeatures()+0x67c>
c0018af3:	51                   	push   ecx
c0018af4:	51                   	push   ecx
c0018af5:	68 12 a0 02 c0       	push   0xc002a012
c0018afa:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018afe:	56                   	push   esi
c0018aff:	e8 26 7c fe ff       	call   c000072a <strcpy>
c0018b04:	5f                   	pop    edi
c0018b05:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b0b:	5d                   	pop    ebp
c0018b0c:	66 c1 e8 06          	shr    ax,0x6
c0018b10:	0f b6 c0             	movzx  eax,al
c0018b13:	50                   	push   eax
c0018b14:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b1a:	c1 e8 0e             	shr    eax,0xe
c0018b1d:	0f b6 c0             	movzx  eax,al
c0018b20:	50                   	push   eax
c0018b21:	e8 24 f2 ff ff       	call   c0017d4a <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018b26:	5a                   	pop    edx
c0018b27:	59                   	pop    ecx
c0018b28:	50                   	push   eax
c0018b29:	56                   	push   esi
c0018b2a:	e8 b2 7c fe ff       	call   c00007e1 <strcat>
c0018b2f:	5f                   	pop    edi
c0018b30:	5d                   	pop    ebp
c0018b31:	56                   	push   esi
c0018b32:	53                   	push   ebx
c0018b33:	e8 1a b2 ff ff       	call   c0013d52 <Device::setName(char const*)>
c0018b38:	58                   	pop    eax
c0018b39:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018b3f:	5a                   	pop    edx
c0018b40:	68 19 a0 02 c0       	push   0xc002a019
c0018b45:	50                   	push   eax
c0018b46:	e8 30 7c fe ff       	call   c000077b <strcmp>
c0018b4b:	83 c4 10             	add    esp,0x10
c0018b4e:	85 c0                	test   eax,eax
c0018b50:	0f 85 71 03 00 00    	jne    c0018ec7 <CPU::detectFeatures()+0x9e1>
c0018b56:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018b5d:	e9 65 03 00 00       	jmp    c0018ec7 <CPU::detectFeatures()+0x9e1>
c0018b62:	83 f8 02             	cmp    eax,0x2
c0018b65:	0f 85 b5 00 00 00    	jne    c0018c20 <CPU::detectFeatures()+0x73a>
c0018b6b:	57                   	push   edi
c0018b6c:	57                   	push   edi
c0018b6d:	68 2b a0 02 c0       	push   0xc002a02b
c0018b72:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018b76:	56                   	push   esi
c0018b77:	e8 ae 7b fe ff       	call   c000072a <strcpy>
c0018b7c:	5d                   	pop    ebp
c0018b7d:	58                   	pop    eax
c0018b7e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b84:	66 c1 e8 06          	shr    ax,0x6
c0018b88:	0f b6 c0             	movzx  eax,al
c0018b8b:	50                   	push   eax
c0018b8c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b92:	c1 e8 0e             	shr    eax,0xe
c0018b95:	0f b6 c0             	movzx  eax,al
c0018b98:	50                   	push   eax
c0018b99:	e8 18 f0 ff ff       	call   c0017bb6 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018b9e:	5a                   	pop    edx
c0018b9f:	59                   	pop    ecx
c0018ba0:	50                   	push   eax
c0018ba1:	56                   	push   esi
c0018ba2:	e8 3a 7c fe ff       	call   c00007e1 <strcat>
c0018ba7:	5f                   	pop    edi
c0018ba8:	5d                   	pop    ebp
c0018ba9:	56                   	push   esi
c0018baa:	53                   	push   ebx
c0018bab:	e8 a2 b1 ff ff       	call   c0013d52 <Device::setName(char const*)>
c0018bb0:	58                   	pop    eax
c0018bb1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018bb7:	5a                   	pop    edx
c0018bb8:	68 30 a0 02 c0       	push   0xc002a030
c0018bbd:	50                   	push   eax
c0018bbe:	e8 b8 7b fe ff       	call   c000077b <strcmp>
c0018bc3:	83 c4 10             	add    esp,0x10
c0018bc6:	85 c0                	test   eax,eax
c0018bc8:	75 20                	jne    c0018bea <CPU::detectFeatures()+0x704>
c0018bca:	8b 15 48 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c948
c0018bd0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018bd6:	a8 01                	test   al,0x1
c0018bd8:	74 10                	je     c0018bea <CPU::detectFeatures()+0x704>
c0018bda:	83 e0 fe             	and    eax,0xfffffffe
c0018bdd:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018be3:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018bea:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bf0:	c1 e8 0e             	shr    eax,0xe
c0018bf3:	3c 05                	cmp    al,0x5
c0018bf5:	0f 85 cc 02 00 00    	jne    c0018ec7 <CPU::detectFeatures()+0x9e1>
c0018bfb:	56                   	push   esi
c0018bfc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018c02:	83 e0 0f             	and    eax,0xf
c0018c05:	50                   	push   eax
c0018c06:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c0c:	66 c1 e8 06          	shr    ax,0x6
c0018c10:	0f b6 c0             	movzx  eax,al
c0018c13:	50                   	push   eax
c0018c14:	6a 05                	push   0x5
c0018c16:	e8 11 f4 ff ff       	call   c001802c <CPU::AMD_K6_writeback(int, int, int)>
c0018c1b:	e9 1f 02 00 00       	jmp    c0018e3f <CPU::detectFeatures()+0x959>
c0018c20:	8d 50 fd             	lea    edx,[eax-0x3]
c0018c23:	83 fa 01             	cmp    edx,0x1
c0018c26:	76 09                	jbe    c0018c31 <CPU::detectFeatures()+0x74b>
c0018c28:	83 f8 06             	cmp    eax,0x6
c0018c2b:	0f 85 91 01 00 00    	jne    c0018dc2 <CPU::detectFeatures()+0x8dc>
c0018c31:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c37:	c1 ea 0e             	shr    edx,0xe
c0018c3a:	80 fa 05             	cmp    dl,0x5
c0018c3d:	75 7b                	jne    c0018cba <CPU::detectFeatures()+0x7d4>
c0018c3f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c45:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018c4a:	66 81 fa 00 01       	cmp    dx,0x100
c0018c4f:	75 0c                	jne    c0018c5d <CPU::detectFeatures()+0x777>
c0018c51:	51                   	push   ecx
c0018c52:	51                   	push   ecx
c0018c53:	68 37 a0 02 c0       	push   0xc002a037
c0018c58:	e9 dc 01 00 00       	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018c5d:	66 81 fa 00 02       	cmp    dx,0x200
c0018c62:	75 0c                	jne    c0018c70 <CPU::detectFeatures()+0x78a>
c0018c64:	52                   	push   edx
c0018c65:	52                   	push   edx
c0018c66:	68 4a a0 02 c0       	push   0xc002a04a
c0018c6b:	e9 c9 01 00 00       	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018c70:	66 81 fa 40 02       	cmp    dx,0x240
c0018c75:	75 0c                	jne    c0018c83 <CPU::detectFeatures()+0x79d>
c0018c77:	50                   	push   eax
c0018c78:	50                   	push   eax
c0018c79:	68 5c a0 02 c0       	push   0xc002a05c
c0018c7e:	e9 b6 01 00 00       	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018c83:	83 f8 06             	cmp    eax,0x6
c0018c86:	75 0c                	jne    c0018c94 <CPU::detectFeatures()+0x7ae>
c0018c88:	50                   	push   eax
c0018c89:	50                   	push   eax
c0018c8a:	68 6e a0 02 c0       	push   0xc002a06e
c0018c8f:	e9 a5 01 00 00       	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018c94:	83 f8 04             	cmp    eax,0x4
c0018c97:	75 0c                	jne    c0018ca5 <CPU::detectFeatures()+0x7bf>
c0018c99:	50                   	push   eax
c0018c9a:	50                   	push   eax
c0018c9b:	68 7a a0 02 c0       	push   0xc002a07a
c0018ca0:	e9 94 01 00 00       	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018ca5:	83 f8 03             	cmp    eax,0x3
c0018ca8:	0f 85 19 02 00 00    	jne    c0018ec7 <CPU::detectFeatures()+0x9e1>
c0018cae:	50                   	push   eax
c0018caf:	50                   	push   eax
c0018cb0:	68 82 a0 02 c0       	push   0xc002a082
c0018cb5:	e9 7f 01 00 00       	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018cba:	80 fa 06             	cmp    dl,0x6
c0018cbd:	0f 85 db 00 00 00    	jne    c0018d9e <CPU::detectFeatures()+0x8b8>
c0018cc3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018cc9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018cce:	66 81 fa 80 01       	cmp    dx,0x180
c0018cd3:	75 0c                	jne    c0018ce1 <CPU::detectFeatures()+0x7fb>
c0018cd5:	50                   	push   eax
c0018cd6:	50                   	push   eax
c0018cd7:	68 8d a0 02 c0       	push   0xc002a08d
c0018cdc:	e9 58 01 00 00       	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018ce1:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018ce7:	66 f7 c1 80 ff       	test   cx,0xff80
c0018cec:	75 0c                	jne    c0018cfa <CPU::detectFeatures()+0x814>
c0018cee:	50                   	push   eax
c0018cef:	50                   	push   eax
c0018cf0:	68 9d a0 02 c0       	push   0xc002a09d
c0018cf5:	e9 3f 01 00 00       	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018cfa:	66 81 fa 40 02       	cmp    dx,0x240
c0018cff:	75 0c                	jne    c0018d0d <CPU::detectFeatures()+0x827>
c0018d01:	55                   	push   ebp
c0018d02:	55                   	push   ebp
c0018d03:	68 a4 a0 02 c0       	push   0xc002a0a4
c0018d08:	e9 2c 01 00 00       	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018d0d:	66 81 fa 80 02       	cmp    dx,0x280
c0018d12:	75 0c                	jne    c0018d20 <CPU::detectFeatures()+0x83a>
c0018d14:	57                   	push   edi
c0018d15:	57                   	push   edi
c0018d16:	68 ad a0 02 c0       	push   0xc002a0ad
c0018d1b:	e9 19 01 00 00       	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018d20:	66 81 fa 40 03       	cmp    dx,0x340
c0018d25:	74 ed                	je     c0018d14 <CPU::detectFeatures()+0x82e>
c0018d27:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018d2c:	75 0c                	jne    c0018d3a <CPU::detectFeatures()+0x854>
c0018d2e:	56                   	push   esi
c0018d2f:	56                   	push   esi
c0018d30:	68 b4 a0 02 c0       	push   0xc002a0b4
c0018d35:	e9 ff 00 00 00       	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018d3a:	83 f8 06             	cmp    eax,0x6
c0018d3d:	0f 84 45 ff ff ff    	je     c0018c88 <CPU::detectFeatures()+0x7a2>
c0018d43:	83 f8 04             	cmp    eax,0x4
c0018d46:	0f 84 4d ff ff ff    	je     c0018c99 <CPU::detectFeatures()+0x7b3>
c0018d4c:	83 f8 03             	cmp    eax,0x3
c0018d4f:	0f 85 72 01 00 00    	jne    c0018ec7 <CPU::detectFeatures()+0x9e1>
c0018d55:	51                   	push   ecx
c0018d56:	51                   	push   ecx
c0018d57:	68 bd a0 02 c0       	push   0xc002a0bd
c0018d5c:	53                   	push   ebx
c0018d5d:	e8 f0 af ff ff       	call   c0013d52 <Device::setName(char const*)>
c0018d62:	b1 c1                	mov    cl,0xc1
c0018d64:	88 c8                	mov    al,cl
c0018d66:	e6 22                	out    0x22,al
c0018d68:	e4 23                	in     al,0x23
c0018d6a:	88 c2                	mov    dl,al
c0018d6c:	88 c8                	mov    al,cl
c0018d6e:	e6 22                	out    0x22,al
c0018d70:	88 d0                	mov    al,dl
c0018d72:	83 c8 10             	or     eax,0x10
c0018d75:	e6 23                	out    0x23,al
c0018d77:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018d7e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018d81:	89 d0                	mov    eax,edx
c0018d83:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018d89:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018d8d:	40                   	inc    eax
c0018d8e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018d94:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018d99:	e9 a1 00 00 00       	jmp    c0018e3f <CPU::detectFeatures()+0x959>
c0018d9e:	83 f8 06             	cmp    eax,0x6
c0018da1:	0f 84 e1 fe ff ff    	je     c0018c88 <CPU::detectFeatures()+0x7a2>
c0018da7:	83 f8 04             	cmp    eax,0x4
c0018daa:	0f 84 e9 fe ff ff    	je     c0018c99 <CPU::detectFeatures()+0x7b3>
c0018db0:	83 f8 03             	cmp    eax,0x3
c0018db3:	0f 85 0e 01 00 00    	jne    c0018ec7 <CPU::detectFeatures()+0x9e1>
c0018db9:	52                   	push   edx
c0018dba:	52                   	push   edx
c0018dbb:	68 c8 a0 02 c0       	push   0xc002a0c8
c0018dc0:	eb 77                	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018dc2:	83 f8 07             	cmp    eax,0x7
c0018dc5:	75 09                	jne    c0018dd0 <CPU::detectFeatures()+0x8ea>
c0018dc7:	50                   	push   eax
c0018dc8:	50                   	push   eax
c0018dc9:	68 d2 a0 02 c0       	push   0xc002a0d2
c0018dce:	eb 69                	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018dd0:	83 f8 0a             	cmp    eax,0xa
c0018dd3:	75 09                	jne    c0018dde <CPU::detectFeatures()+0x8f8>
c0018dd5:	50                   	push   eax
c0018dd6:	50                   	push   eax
c0018dd7:	68 dd a0 02 c0       	push   0xc002a0dd
c0018ddc:	eb 5b                	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018dde:	83 f8 0b             	cmp    eax,0xb
c0018de1:	75 09                	jne    c0018dec <CPU::detectFeatures()+0x906>
c0018de3:	50                   	push   eax
c0018de4:	50                   	push   eax
c0018de5:	68 e5 a0 02 c0       	push   0xc002a0e5
c0018dea:	eb 4d                	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018dec:	83 f8 08             	cmp    eax,0x8
c0018def:	75 09                	jne    c0018dfa <CPU::detectFeatures()+0x914>
c0018df1:	50                   	push   eax
c0018df2:	50                   	push   eax
c0018df3:	68 ee a0 02 c0       	push   0xc002a0ee
c0018df8:	eb 3f                	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018dfa:	83 f8 09             	cmp    eax,0x9
c0018dfd:	75 09                	jne    c0018e08 <CPU::detectFeatures()+0x922>
c0018dff:	50                   	push   eax
c0018e00:	50                   	push   eax
c0018e01:	68 f6 a0 02 c0       	push   0xc002a0f6
c0018e06:	eb 31                	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018e08:	83 f8 05             	cmp    eax,0x5
c0018e0b:	75 09                	jne    c0018e16 <CPU::detectFeatures()+0x930>
c0018e0d:	50                   	push   eax
c0018e0e:	50                   	push   eax
c0018e0f:	68 fe a0 02 c0       	push   0xc002a0fe
c0018e14:	eb 23                	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018e16:	83 f8 0c             	cmp    eax,0xc
c0018e19:	75 09                	jne    c0018e24 <CPU::detectFeatures()+0x93e>
c0018e1b:	55                   	push   ebp
c0018e1c:	55                   	push   ebp
c0018e1d:	68 0c a1 02 c0       	push   0xc002a10c
c0018e22:	eb 15                	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018e24:	83 f8 0d             	cmp    eax,0xd
c0018e27:	75 09                	jne    c0018e32 <CPU::detectFeatures()+0x94c>
c0018e29:	57                   	push   edi
c0018e2a:	57                   	push   edi
c0018e2b:	68 17 a1 02 c0       	push   0xc002a117
c0018e30:	eb 07                	jmp    c0018e39 <CPU::detectFeatures()+0x953>
c0018e32:	56                   	push   esi
c0018e33:	56                   	push   esi
c0018e34:	68 2b a1 02 c0       	push   0xc002a12b
c0018e39:	53                   	push   ebx
c0018e3a:	e8 13 af ff ff       	call   c0013d52 <Device::setName(char const*)>
c0018e3f:	83 c4 10             	add    esp,0x10
c0018e42:	e9 80 00 00 00       	jmp    c0018ec7 <CPU::detectFeatures()+0x9e1>
c0018e47:	51                   	push   ecx
c0018e48:	51                   	push   ecx
c0018e49:	68 77 9f 02 c0       	push   0xc0029f77
c0018e4e:	57                   	push   edi
c0018e4f:	e8 d6 78 fe ff       	call   c000072a <strcpy>
c0018e54:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018e5e:	e8 00 74 fe ff       	call   c0000263 <is486>
c0018e63:	83 c4 10             	add    esp,0x10
c0018e66:	85 c0                	test   eax,eax
c0018e68:	74 2b                	je     c0018e95 <CPU::detectFeatures()+0x9af>
c0018e6a:	52                   	push   edx
c0018e6b:	52                   	push   edx
c0018e6c:	68 37 a1 02 c0       	push   0xc002a137
c0018e71:	53                   	push   ebx
c0018e72:	e8 db ae ff ff       	call   c0013d52 <Device::setName(char const*)>
c0018e77:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018e7e:	0f 20 c0             	mov    eax,cr0
c0018e81:	83 e0 14             	and    eax,0x14
c0018e84:	83 c4 10             	add    esp,0x10
c0018e87:	83 f8 04             	cmp    eax,0x4
c0018e8a:	75 1f                	jne    c0018eab <CPU::detectFeatures()+0x9c5>
c0018e8c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018e93:	eb 32                	jmp    c0018ec7 <CPU::detectFeatures()+0x9e1>
c0018e95:	50                   	push   eax
c0018e96:	50                   	push   eax
c0018e97:	68 42 a1 02 c0       	push   0xc002a142
c0018e9c:	53                   	push   ebx
c0018e9d:	e8 b0 ae ff ff       	call   c0013d52 <Device::setName(char const*)>
c0018ea2:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018ea9:	eb d3                	jmp    c0018e7e <CPU::detectFeatures()+0x998>
c0018eab:	e8 8e 73 fe ff       	call   c000023e <hasLegacyFPU>
c0018eb0:	83 e0 01             	and    eax,0x1
c0018eb3:	8d 14 00             	lea    edx,[eax+eax*1]
c0018eb6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018ebc:	83 e0 fd             	and    eax,0xfffffffd
c0018ebf:	09 d0                	or     eax,edx
c0018ec1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018ec7:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018ece:	83 c4 4c             	add    esp,0x4c
c0018ed1:	5b                   	pop    ebx
c0018ed2:	5e                   	pop    esi
c0018ed3:	5f                   	pop    edi
c0018ed4:	5d                   	pop    ebp
c0018ed5:	c3                   	ret    

c0018ed6 <CPU::setupSMEP()>:
c0018ed6:	0f 20 e0             	mov    eax,cr4
c0018ed9:	0d 00 00 10 00       	or     eax,0x100000
c0018ede:	0f 22 e0             	mov    cr4,eax
c0018ee1:	c3                   	ret    

c0018ee2 <CPU::setupUMIP()>:
c0018ee2:	0f 20 e0             	mov    eax,cr4
c0018ee5:	80 cc 08             	or     ah,0x8
c0018ee8:	0f 22 e0             	mov    cr4,eax
c0018eeb:	c3                   	ret    

c0018eec <CPU::setupTSC()>:
c0018eec:	0f 20 e0             	mov    eax,cr4
c0018eef:	83 c8 04             	or     eax,0x4
c0018ef2:	0f 22 e0             	mov    cr4,eax
c0018ef5:	c3                   	ret    

c0018ef6 <CPU::setupLargePages()>:
c0018ef6:	0f 20 e0             	mov    eax,cr4
c0018ef9:	83 c8 10             	or     eax,0x10
c0018efc:	0f 22 e0             	mov    cr4,eax
c0018eff:	c3                   	ret    

c0018f00 <CPU::setupPAT()>:
c0018f00:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0018f05:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018f0c:	74 2c                	je     c0018f3a <CPU::setupPAT()+0x3a>
c0018f0e:	53                   	push   ebx
c0018f0f:	83 ec 10             	sub    esp,0x10
c0018f12:	68 77 02 00 00       	push   0x277
c0018f17:	50                   	push   eax
c0018f18:	e8 5f 5b ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c0018f1d:	83 e2 f8             	and    edx,0xfffffff8
c0018f20:	83 ca 01             	or     edx,0x1
c0018f23:	52                   	push   edx
c0018f24:	50                   	push   eax
c0018f25:	68 77 02 00 00       	push   0x277
c0018f2a:	ff 35 48 c9 02 c0    	push   DWORD PTR ds:0xc002c948
c0018f30:	e8 73 5b ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018f35:	83 c4 28             	add    esp,0x28
c0018f38:	5b                   	pop    ebx
c0018f39:	c3                   	ret    
c0018f3a:	c3                   	ret    
c0018f3b:	90                   	nop

c0018f3c <CPU::setupMTRR()>:
c0018f3c:	c3                   	ret    
c0018f3d:	90                   	nop

c0018f3e <CPU::setupGlobalPages()>:
c0018f3e:	0f 20 e0             	mov    eax,cr4
c0018f41:	0c 80                	or     al,0x80
c0018f43:	0f 22 e0             	mov    cr4,eax
c0018f46:	c3                   	ret    
c0018f47:	90                   	nop

c0018f48 <CPU::allowUsermodeDataAccess()>:
c0018f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f4c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018f53:	74 03                	je     c0018f58 <CPU::allowUsermodeDataAccess()+0x10>
c0018f55:	0f 01 cb             	stac   
c0018f58:	c3                   	ret    
c0018f59:	90                   	nop

c0018f5a <CPU::prohibitUsermodeDataAccess()>:
c0018f5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f5e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018f65:	74 03                	je     c0018f6a <CPU::prohibitUsermodeDataAccess()+0x10>
c0018f67:	0f 01 ca             	clac   
c0018f6a:	c3                   	ret    
c0018f6b:	90                   	nop

c0018f6c <CPU::setupSMAP()>:
c0018f6c:	0f 20 e0             	mov    eax,cr4
c0018f6f:	0d 00 00 20 00       	or     eax,0x200000
c0018f74:	0f 22 e0             	mov    cr4,eax
c0018f77:	eb e1                	jmp    c0018f5a <CPU::prohibitUsermodeDataAccess()>
c0018f79:	90                   	nop

c0018f7a <CPU::setupFeatures()>:
c0018f7a:	83 ec 0c             	sub    esp,0xc
c0018f7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f81:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018f88:	74 07                	je     c0018f91 <CPU::setupFeatures()+0x17>
c0018f8a:	52                   	push   edx
c0018f8b:	e8 46 ff ff ff       	call   c0018ed6 <CPU::setupSMEP()>
c0018f90:	58                   	pop    eax
c0018f91:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018f98:	74 07                	je     c0018fa1 <CPU::setupFeatures()+0x27>
c0018f9a:	52                   	push   edx
c0018f9b:	e8 cc ff ff ff       	call   c0018f6c <CPU::setupSMAP()>
c0018fa0:	58                   	pop    eax
c0018fa1:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018fa8:	74 07                	je     c0018fb1 <CPU::setupFeatures()+0x37>
c0018faa:	52                   	push   edx
c0018fab:	e8 32 ff ff ff       	call   c0018ee2 <CPU::setupUMIP()>
c0018fb0:	58                   	pop    eax
c0018fb1:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018fb8:	74 07                	je     c0018fc1 <CPU::setupFeatures()+0x47>
c0018fba:	52                   	push   edx
c0018fbb:	e8 2c ff ff ff       	call   c0018eec <CPU::setupTSC()>
c0018fc0:	58                   	pop    eax
c0018fc1:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018fc8:	74 07                	je     c0018fd1 <CPU::setupFeatures()+0x57>
c0018fca:	52                   	push   edx
c0018fcb:	e8 26 ff ff ff       	call   c0018ef6 <CPU::setupLargePages()>
c0018fd0:	59                   	pop    ecx
c0018fd1:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0018fd8:	74 07                	je     c0018fe1 <CPU::setupFeatures()+0x67>
c0018fda:	52                   	push   edx
c0018fdb:	e8 5e ff ff ff       	call   c0018f3e <CPU::setupGlobalPages()>
c0018fe0:	58                   	pop    eax
c0018fe1:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0018fe8:	74 0c                	je     c0018ff6 <CPU::setupFeatures()+0x7c>
c0018fea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018fee:	83 c4 0c             	add    esp,0xc
c0018ff1:	e9 0a ff ff ff       	jmp    c0018f00 <CPU::setupPAT()>
c0018ff6:	83 c4 0c             	add    esp,0xc
c0018ff9:	c3                   	ret    

c0018ffa <CPU::open(int, int, void*)>:
c0018ffa:	57                   	push   edi
c0018ffb:	56                   	push   esi
c0018ffc:	53                   	push   ebx
c0018ffd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019001:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019005:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001900b:	83 ec 0c             	sub    esp,0xc
c001900e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019014:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001901a:	50                   	push   eax
c001901b:	e8 48 5d ff ff       	call   c000ed68 <GDT::setup()>
c0019020:	83 c4 0c             	add    esp,0xc
c0019023:	6a 00                	push   0x0
c0019025:	68 ef be ad de       	push   0xdeadbeef
c001902a:	57                   	push   edi
c001902b:	e8 d2 80 ff ff       	call   c0011102 <TSS::setup(unsigned long, unsigned long)>
c0019030:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019033:	e8 aa 80 ff ff       	call   c00110e2 <TSS::flush()>
c0019038:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001903e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019041:	e8 7e 5f ff ff       	call   c000efc4 <IDT::setup()>
c0019046:	b8 00 04 00 00       	mov    eax,0x400
c001904b:	0f 23 f8             	mov    db7,eax
c001904e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019058:	e8 21 6a ff ff       	call   c000fa7e <Phys::allocatePage()>
c001905d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019063:	89 30                	mov    DWORD PTR [eax],esi
c0019065:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001906b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001906e:	58                   	pop    eax
c001906f:	5a                   	pop    edx
c0019070:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019076:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001907a:	e8 b5 90 ff ff       	call   c0012134 <VAS::setCPUSpecific(unsigned long)>
c001907f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019082:	e8 5f f4 ff ff       	call   c00184e6 <CPU::detectFeatures()>
c0019087:	e8 aa bf ff ff       	call   c0015036 <setupInterruptController()>
c001908c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019092:	a1 60 c9 02 c0       	mov    eax,ds:0xc002c960
c0019097:	83 e0 10             	and    eax,0x10
c001909a:	83 f8 01             	cmp    eax,0x1
c001909d:	19 c0                	sbb    eax,eax
c001909f:	83 e0 46             	and    eax,0x46
c00190a2:	83 c0 1e             	add    eax,0x1e
c00190a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00190a8:	e8 41 d4 ff ff       	call   c00164ee <setupTimer(int)>
c00190ad:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00190b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190b6:	e8 bf fe ff ff       	call   c0018f7a <CPU::setupFeatures()>
c00190bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190be:	e8 a7 f1 ff ff       	call   c001826a <CPU::displayFeatures()>
c00190c3:	83 c4 10             	add    esp,0x10
c00190c6:	31 c0                	xor    eax,eax
c00190c8:	5b                   	pop    ebx
c00190c9:	5e                   	pop    esi
c00190ca:	5f                   	pop    edi
c00190cb:	c3                   	ret    

c00190cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00190cc:	57                   	push   edi
c00190cd:	56                   	push   esi
c00190ce:	53                   	push   ebx
c00190cf:	51                   	push   ecx
c00190d0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00190d4:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00190d7:	0f 02 c0             	lar    eax,ax
c00190da:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00190dd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00190e1:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00190e4:	88 ca                	mov    dl,cl
c00190e6:	c0 ea 06             	shr    dl,0x6
c00190e9:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00190ed:	89 ca                	mov    edx,ecx
c00190ef:	66 c1 ea 03          	shr    dx,0x3
c00190f3:	83 e2 07             	and    edx,0x7
c00190f6:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00190fb:	88 17                	mov    BYTE PTR [edi],dl
c00190fd:	0f 84 a6 01 00 00    	je     c00192a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019103:	83 e1 07             	and    ecx,0x7
c0019106:	80 f9 04             	cmp    cl,0x4
c0019109:	0f 84 98 00 00 00    	je     c00191a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001910f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019114:	0f 95 c0             	setne  al
c0019117:	80 f9 05             	cmp    cl,0x5
c001911a:	0f 95 c2             	setne  dl
c001911d:	08 c2                	or     dl,al
c001911f:	74 79                	je     c001919a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019121:	84 c9                	test   cl,cl
c0019123:	75 05                	jne    c001912a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019125:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019128:	eb 3c                	jmp    c0019166 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001912a:	80 f9 01             	cmp    cl,0x1
c001912d:	75 05                	jne    c0019134 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001912f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019132:	eb 32                	jmp    c0019166 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019134:	80 f9 02             	cmp    cl,0x2
c0019137:	75 05                	jne    c001913e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019139:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001913c:	eb 28                	jmp    c0019166 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001913e:	31 c0                	xor    eax,eax
c0019140:	80 f9 03             	cmp    cl,0x3
c0019143:	75 05                	jne    c001914a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019145:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019148:	eb 1c                	jmp    c0019166 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001914a:	80 f9 05             	cmp    cl,0x5
c001914d:	75 05                	jne    c0019154 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001914f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019152:	eb 12                	jmp    c0019166 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019154:	80 f9 06             	cmp    cl,0x6
c0019157:	75 05                	jne    c001915e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019159:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001915c:	eb 08                	jmp    c0019166 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001915e:	80 f9 07             	cmp    cl,0x7
c0019161:	75 03                	jne    c0019166 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019163:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019166:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001916b:	75 10                	jne    c001917d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001916d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019171:	b9 03 00 00 00       	mov    ecx,0x3
c0019176:	01 d0                	add    eax,edx
c0019178:	e9 37 01 00 00       	jmp    c00192b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001917d:	b9 02 00 00 00       	mov    ecx,0x2
c0019182:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019187:	0f 85 27 01 00 00    	jne    c00192b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001918d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019190:	b9 06 00 00 00       	mov    ecx,0x6
c0019195:	e9 1a 01 00 00       	jmp    c00192b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001919a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001919d:	b9 06 00 00 00       	mov    ecx,0x6
c00191a2:	e9 0f 01 00 00       	jmp    c00192b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191a7:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00191aa:	88 ca                	mov    dl,cl
c00191ac:	c0 ea 06             	shr    dl,0x6
c00191af:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00191b3:	89 ca                	mov    edx,ecx
c00191b5:	66 c1 ea 03          	shr    dx,0x3
c00191b9:	83 e2 07             	and    edx,0x7
c00191bc:	80 e1 07             	and    cl,0x7
c00191bf:	75 05                	jne    c00191c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00191c1:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00191c4:	eb 4c                	jmp    c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191c6:	80 f9 01             	cmp    cl,0x1
c00191c9:	75 05                	jne    c00191d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00191cb:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00191ce:	eb 42                	jmp    c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191d0:	80 f9 02             	cmp    cl,0x2
c00191d3:	75 05                	jne    c00191da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00191d5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00191d8:	eb 38                	jmp    c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191da:	80 f9 03             	cmp    cl,0x3
c00191dd:	75 05                	jne    c00191e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00191df:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00191e2:	eb 2e                	jmp    c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191e4:	80 f9 04             	cmp    cl,0x4
c00191e7:	75 12                	jne    c00191fb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00191e9:	f6 c4 60             	test   ah,0x60
c00191ec:	75 08                	jne    c00191f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00191ee:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00191f1:	8d 78 14             	lea    edi,[eax+0x14]
c00191f4:	eb 1c                	jmp    c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191f6:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00191f9:	eb 17                	jmp    c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191fb:	80 f9 05             	cmp    cl,0x5
c00191fe:	75 05                	jne    c0019205 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019200:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019203:	eb 0d                	jmp    c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019205:	80 f9 06             	cmp    cl,0x6
c0019208:	75 05                	jne    c001920f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001920a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001920d:	eb 03                	jmp    c0019212 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001920f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019212:	84 d2                	test   dl,dl
c0019214:	75 05                	jne    c001921b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019216:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019219:	eb 3c                	jmp    c0019257 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001921b:	80 fa 01             	cmp    dl,0x1
c001921e:	75 05                	jne    c0019225 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019220:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019223:	eb 32                	jmp    c0019257 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019225:	80 fa 02             	cmp    dl,0x2
c0019228:	75 05                	jne    c001922f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001922a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001922d:	eb 28                	jmp    c0019257 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001922f:	80 fa 03             	cmp    dl,0x3
c0019232:	75 05                	jne    c0019239 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019234:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019237:	eb 1e                	jmp    c0019257 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019239:	31 c0                	xor    eax,eax
c001923b:	80 fa 04             	cmp    dl,0x4
c001923e:	74 17                	je     c0019257 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019240:	80 fa 05             	cmp    dl,0x5
c0019243:	75 05                	jne    c001924a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019245:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019248:	eb 0d                	jmp    c0019257 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001924a:	80 fa 06             	cmp    dl,0x6
c001924d:	75 05                	jne    c0019254 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001924f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019252:	eb 03                	jmp    c0019257 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019254:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019257:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001925c:	0f 94 c2             	sete   dl
c001925f:	80 f9 05             	cmp    cl,0x5
c0019262:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019266:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001926b:	d3 e0                	shl    eax,cl
c001926d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019271:	74 0a                	je     c001927d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019273:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019276:	b9 07 00 00 00       	mov    ecx,0x7
c001927b:	eb 37                	jmp    c00192b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001927d:	01 f8                	add    eax,edi
c001927f:	b9 03 00 00 00       	mov    ecx,0x3
c0019284:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019289:	74 2b                	je     c00192b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001928b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019290:	75 0d                	jne    c001929f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019292:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019296:	01 c8                	add    eax,ecx
c0019298:	b9 04 00 00 00       	mov    ecx,0x4
c001929d:	eb 17                	jmp    c00192b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001929f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00192a2:	b9 07 00 00 00       	mov    ecx,0x7
c00192a7:	eb 0d                	jmp    c00192b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192a9:	b9 02 00 00 00       	mov    ecx,0x2
c00192ae:	b2 01                	mov    dl,0x1
c00192b0:	31 c0                	xor    eax,eax
c00192b2:	eb 02                	jmp    c00192b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192b4:	31 d2                	xor    edx,edx
c00192b6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00192ba:	89 0b                	mov    DWORD PTR [ebx],ecx
c00192bc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00192c0:	88 11                	mov    BYTE PTR [ecx],dl
c00192c2:	5a                   	pop    edx
c00192c3:	5b                   	pop    ebx
c00192c4:	5e                   	pop    esi
c00192c5:	5f                   	pop    edi
c00192c6:	c3                   	ret    
c00192c7:	90                   	nop

c00192c8 <EnvVarContainer::getEnv(char const*)>:
c00192c8:	57                   	push   edi
c00192c9:	56                   	push   esi
c00192ca:	53                   	push   ebx
c00192cb:	31 db                	xor    ebx,ebx
c00192cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00192d1:	39 1e                	cmp    DWORD PTR [esi],ebx
c00192d3:	7e 2b                	jle    c0019300 <EnvVarContainer::getEnv(char const*)+0x38>
c00192d5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00192dc:	50                   	push   eax
c00192dd:	50                   	push   eax
c00192de:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00192e1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00192e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00192e8:	e8 8e 74 fe ff       	call   c000077b <strcmp>
c00192ed:	83 c4 10             	add    esp,0x10
c00192f0:	85 c0                	test   eax,eax
c00192f2:	75 09                	jne    c00192fd <EnvVarContainer::getEnv(char const*)+0x35>
c00192f4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00192f7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00192fb:	eb 05                	jmp    c0019302 <EnvVarContainer::getEnv(char const*)+0x3a>
c00192fd:	43                   	inc    ebx
c00192fe:	eb d1                	jmp    c00192d1 <EnvVarContainer::getEnv(char const*)+0x9>
c0019300:	31 c0                	xor    eax,eax
c0019302:	5b                   	pop    ebx
c0019303:	5e                   	pop    esi
c0019304:	5f                   	pop    edi
c0019305:	c3                   	ret    

c0019306 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019306:	57                   	push   edi
c0019307:	56                   	push   esi
c0019308:	53                   	push   ebx
c0019309:	83 ec 1c             	sub    esp,0x1c
c001930c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019310:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019314:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019318:	57                   	push   edi
c0019319:	e8 8a 73 fe ff       	call   c00006a8 <strlen>
c001931e:	40                   	inc    eax
c001931f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019322:	e8 ad 61 ff ff       	call   c000f4d4 <malloc>
c0019327:	89 34 24             	mov    DWORD PTR [esp],esi
c001932a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001932e:	e8 75 73 fe ff       	call   c00006a8 <strlen>
c0019333:	40                   	inc    eax
c0019334:	89 04 24             	mov    DWORD PTR [esp],eax
c0019337:	e8 98 61 ff ff       	call   c000f4d4 <malloc>
c001933c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001933f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019343:	e8 60 73 fe ff       	call   c00006a8 <strlen>
c0019348:	83 c4 0c             	add    esp,0xc
c001934b:	40                   	inc    eax
c001934c:	50                   	push   eax
c001934d:	6a 00                	push   0x0
c001934f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019353:	e8 33 73 fe ff       	call   c000068b <memset>
c0019358:	89 3c 24             	mov    DWORD PTR [esp],edi
c001935b:	e8 48 73 fe ff       	call   c00006a8 <strlen>
c0019360:	83 c4 0c             	add    esp,0xc
c0019363:	40                   	inc    eax
c0019364:	50                   	push   eax
c0019365:	57                   	push   edi
c0019366:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001936a:	e8 e6 72 fe ff       	call   c0000655 <memcpy>
c001936f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019372:	e8 31 73 fe ff       	call   c00006a8 <strlen>
c0019377:	83 c4 0c             	add    esp,0xc
c001937a:	40                   	inc    eax
c001937b:	50                   	push   eax
c001937c:	6a 00                	push   0x0
c001937e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019382:	e8 04 73 fe ff       	call   c000068b <memset>
c0019387:	89 34 24             	mov    DWORD PTR [esp],esi
c001938a:	e8 19 73 fe ff       	call   c00006a8 <strlen>
c001938f:	83 c4 0c             	add    esp,0xc
c0019392:	40                   	inc    eax
c0019393:	50                   	push   eax
c0019394:	56                   	push   esi
c0019395:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019399:	e8 b7 72 fe ff       	call   c0000655 <memcpy>
c001939e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00193a0:	40                   	inc    eax
c00193a1:	89 03                	mov    DWORD PTR [ebx],eax
c00193a3:	c1 e0 03             	shl    eax,0x3
c00193a6:	5a                   	pop    edx
c00193a7:	59                   	pop    ecx
c00193a8:	50                   	push   eax
c00193a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00193ac:	e8 0f 61 ff ff       	call   c000f4c0 <realloc>
c00193b1:	83 c4 0c             	add    esp,0xc
c00193b4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00193b7:	6a 08                	push   0x8
c00193b9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00193bd:	52                   	push   edx
c00193be:	8b 13                	mov    edx,DWORD PTR [ebx]
c00193c0:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00193c4:	50                   	push   eax
c00193c5:	e8 8b 72 fe ff       	call   c0000655 <memcpy>
c00193ca:	83 c4 20             	add    esp,0x20
c00193cd:	5b                   	pop    ebx
c00193ce:	5e                   	pop    esi
c00193cf:	5f                   	pop    edi
c00193d0:	c3                   	ret    
c00193d1:	90                   	nop

c00193d2 <EnvVarContainer::deleteEnv(char const*)>:
c00193d2:	c3                   	ret    
c00193d3:	90                   	nop

c00193d4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00193d4:	55                   	push   ebp
c00193d5:	57                   	push   edi
c00193d6:	56                   	push   esi
c00193d7:	53                   	push   ebx
c00193d8:	81 ec 38 01 00 00    	sub    esp,0x138
c00193de:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c00193e5:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c00193ec:	68 14 01 00 00       	push   0x114
c00193f1:	e8 de 60 ff ff       	call   c000f4d4 <malloc>
c00193f6:	83 c4 0c             	add    esp,0xc
c00193f9:	89 c7                	mov    edi,eax
c00193fb:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00193fe:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019405:	50                   	push   eax
c0019406:	e8 a5 98 ff ff       	call   c0012cb0 <File::File(char const*, Process*)>
c001940b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001940e:	e8 6f 9b ff ff       	call   c0012f82 <File::exists()>
c0019413:	83 c4 10             	add    esp,0x10
c0019416:	84 c0                	test   al,al
c0019418:	75 31                	jne    c001944b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001941a:	51                   	push   ecx
c001941b:	51                   	push   ecx
c001941c:	6a 12                	push   0x12
c001941e:	57                   	push   edi
c001941f:	e8 f0 98 ff ff       	call   c0012d14 <File::open(FileOpenMode)>
c0019424:	8b 07                	mov    eax,DWORD PTR [edi]
c0019426:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019429:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001942c:	e8 77 72 fe ff       	call   c00006a8 <strlen>
c0019431:	5a                   	pop    edx
c0019432:	31 d2                	xor    edx,edx
c0019434:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019438:	51                   	push   ecx
c0019439:	55                   	push   ebp
c001943a:	52                   	push   edx
c001943b:	50                   	push   eax
c001943c:	57                   	push   edi
c001943d:	ff d3                	call   ebx
c001943f:	83 c4 14             	add    esp,0x14
c0019442:	57                   	push   edi
c0019443:	e8 2a 99 ff ff       	call   c0012d72 <File::close()>
c0019448:	83 c4 10             	add    esp,0x10
c001944b:	31 db                	xor    ebx,ebx
c001944d:	50                   	push   eax
c001944e:	31 ed                	xor    ebp,ebp
c0019450:	68 00 01 00 00       	push   0x100
c0019455:	6a 00                	push   0x0
c0019457:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001945b:	50                   	push   eax
c001945c:	e8 2a 72 fe ff       	call   c000068b <memset>
c0019461:	58                   	pop    eax
c0019462:	5a                   	pop    edx
c0019463:	6a 01                	push   0x1
c0019465:	57                   	push   edi
c0019466:	e8 a9 98 ff ff       	call   c0012d14 <File::open(FileOpenMode)>
c001946b:	83 c4 10             	add    esp,0x10
c001946e:	83 ec 0c             	sub    esp,0xc
c0019471:	8b 07                	mov    eax,DWORD PTR [edi]
c0019473:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019477:	51                   	push   ecx
c0019478:	8d 54 24 23          	lea    edx,[esp+0x23]
c001947c:	52                   	push   edx
c001947d:	6a 00                	push   0x0
c001947f:	6a 01                	push   0x1
c0019481:	57                   	push   edi
c0019482:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019485:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019489:	83 c4 20             	add    esp,0x20
c001948c:	3c 0d                	cmp    al,0xd
c001948e:	0f 84 12 01 00 00    	je     c00195a6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019494:	85 db                	test   ebx,ebx
c0019496:	0f 84 fd 00 00 00    	je     c0019599 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001949c:	3c 0a                	cmp    al,0xa
c001949e:	74 13                	je     c00194b3 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00194a0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00194a5:	74 0c                	je     c00194b3 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00194a7:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c00194ad:	0f 8e e6 00 00 00    	jle    c0019599 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00194b3:	83 ec 0c             	sub    esp,0xc
c00194b6:	8d 53 01             	lea    edx,[ebx+0x1]
c00194b9:	29 dd                	sub    ebp,ebx
c00194bb:	52                   	push   edx
c00194bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00194c0:	e8 0f 60 ff ff       	call   c000f4d4 <malloc>
c00194c5:	8d 4d 04             	lea    ecx,[ebp+0x4]
c00194c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00194cc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00194cf:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00194d3:	e8 fc 5f ff ff       	call   c000f4d4 <malloc>
c00194d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00194dc:	83 c4 0c             	add    esp,0xc
c00194df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00194e3:	52                   	push   edx
c00194e4:	6a 00                	push   0x0
c00194e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00194ea:	e8 9c 71 fe ff       	call   c000068b <memset>
c00194ef:	83 c4 0c             	add    esp,0xc
c00194f2:	53                   	push   ebx
c00194f3:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00194f7:	55                   	push   ebp
c00194f8:	01 eb                	add    ebx,ebp
c00194fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00194fe:	e8 52 71 fe ff       	call   c0000655 <memcpy>
c0019503:	83 c4 0c             	add    esp,0xc
c0019506:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001950a:	51                   	push   ecx
c001950b:	6a 00                	push   0x0
c001950d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019511:	e8 75 71 fe ff       	call   c000068b <memset>
c0019516:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019519:	e8 8a 71 fe ff       	call   c00006a8 <strlen>
c001951e:	83 c4 0c             	add    esp,0xc
c0019521:	50                   	push   eax
c0019522:	53                   	push   ebx
c0019523:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019527:	e8 29 71 fe ff       	call   c0000655 <memcpy>
c001952c:	5b                   	pop    ebx
c001952d:	58                   	pop    eax
c001952e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019532:	68 7c a1 02 c0       	push   0xc002a17c
c0019537:	e8 45 92 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001953c:	8b 06                	mov    eax,DWORD PTR [esi]
c001953e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019541:	40                   	inc    eax
c0019542:	83 c4 10             	add    esp,0x10
c0019545:	89 06                	mov    DWORD PTR [esi],eax
c0019547:	85 d2                	test   edx,edx
c0019549:	75 0c                	jne    c0019557 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001954b:	83 ec 0c             	sub    esp,0xc
c001954e:	6a 08                	push   0x8
c0019550:	e8 7f 5f ff ff       	call   c000f4d4 <malloc>
c0019555:	eb 0c                	jmp    c0019563 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019557:	c1 e0 03             	shl    eax,0x3
c001955a:	51                   	push   ecx
c001955b:	51                   	push   ecx
c001955c:	50                   	push   eax
c001955d:	52                   	push   edx
c001955e:	e8 5d 5f ff ff       	call   c000f4c0 <realloc>
c0019563:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019566:	83 c4 10             	add    esp,0x10
c0019569:	31 db                	xor    ebx,ebx
c001956b:	52                   	push   edx
c001956c:	6a 08                	push   0x8
c001956e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019572:	50                   	push   eax
c0019573:	8b 16                	mov    edx,DWORD PTR [esi]
c0019575:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019578:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001957c:	50                   	push   eax
c001957d:	e8 d3 70 fe ff       	call   c0000655 <memcpy>
c0019582:	83 c4 0c             	add    esp,0xc
c0019585:	68 00 01 00 00       	push   0x100
c001958a:	6a 00                	push   0x0
c001958c:	55                   	push   ebp
c001958d:	31 ed                	xor    ebp,ebp
c001958f:	e8 f7 70 fe ff       	call   c000068b <memset>
c0019594:	83 c4 10             	add    esp,0x10
c0019597:	eb 0d                	jmp    c00195a6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019599:	3c 3d                	cmp    al,0x3d
c001959b:	74 07                	je     c00195a4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001959d:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c00195a1:	45                   	inc    ebp
c00195a2:	eb 02                	jmp    c00195a6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00195a4:	89 eb                	mov    ebx,ebp
c00195a6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00195ab:	0f 85 bd fe ff ff    	jne    c001946e <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c00195b1:	50                   	push   eax
c00195b2:	50                   	push   eax
c00195b3:	ff 36                	push   DWORD PTR [esi]
c00195b5:	68 8a a1 02 c0       	push   0xc002a18a
c00195ba:	e8 c2 91 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00195bf:	81 c4 3c 01 00 00    	add    esp,0x13c
c00195c5:	5b                   	pop    ebx
c00195c6:	5e                   	pop    esi
c00195c7:	5f                   	pop    edi
c00195c8:	5d                   	pop    ebp
c00195c9:	c3                   	ret    

c00195ca <EnvVarContainer::__loadSystem()>:
c00195ca:	83 ec 10             	sub    esp,0x10
c00195cd:	68 80 be 02 c0       	push   0xc002be80
c00195d2:	68 b5 a1 02 c0       	push   0xc002a1b5
c00195d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00195db:	e8 f4 fd ff ff       	call   c00193d4 <EnvVarContainer::loadFrom(char const*, char const*)>
c00195e0:	83 c4 1c             	add    esp,0x1c
c00195e3:	c3                   	ret    

c00195e4 <EnvVarContainer::__loadUser()>:
c00195e4:	c3                   	ret    
c00195e5:	90                   	nop

c00195e6 <EnvVarContainer::EnvVarContainer(Process*)>:
c00195e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00195f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00195f8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00195fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019606:	90                   	nop
c0019607:	c3                   	ret    

c0019608 <EnvVarContainer::~EnvVarContainer()>:
c0019608:	83 ec 0c             	sub    esp,0xc
c001960b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001960f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019612:	85 c0                	test   eax,eax
c0019614:	74 1d                	je     c0019633 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001961a:	8b 00                	mov    eax,DWORD PTR [eax]
c001961c:	85 c0                	test   eax,eax
c001961e:	74 13                	je     c0019633 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019624:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019627:	83 ec 0c             	sub    esp,0xc
c001962a:	50                   	push   eax
c001962b:	e8 b4 5e ff ff       	call   c000f4e4 <free>
c0019630:	83 c4 10             	add    esp,0x10
c0019633:	90                   	nop
c0019634:	83 c4 0c             	add    esp,0xc
c0019637:	c3                   	ret    

c0019638 <Krnl::getEnv(Process*, char const*)>:
c0019638:	53                   	push   ebx
c0019639:	83 ec 08             	sub    esp,0x8
c001963c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019640:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019644:	39 05 94 de 02 c0    	cmp    DWORD PTR ds:0xc002de94,eax
c001964a:	74 04                	je     c0019650 <Krnl::getEnv(Process*, char const*)+0x18>
c001964c:	85 c0                	test   eax,eax
c001964e:	75 0b                	jne    c001965b <Krnl::getEnv(Process*, char const*)+0x23>
c0019650:	a1 70 d4 02 c0       	mov    eax,ds:0xc002d470
c0019655:	85 c0                	test   eax,eax
c0019657:	75 19                	jne    c0019672 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019659:	eb 27                	jmp    c0019682 <Krnl::getEnv(Process*, char const*)+0x4a>
c001965b:	52                   	push   edx
c001965c:	52                   	push   edx
c001965d:	53                   	push   ebx
c001965e:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019664:	e8 5f fc ff ff       	call   c00192c8 <EnvVarContainer::getEnv(char const*)>
c0019669:	83 c4 10             	add    esp,0x10
c001966c:	85 c0                	test   eax,eax
c001966e:	75 28                	jne    c0019698 <Krnl::getEnv(Process*, char const*)+0x60>
c0019670:	eb de                	jmp    c0019650 <Krnl::getEnv(Process*, char const*)+0x18>
c0019672:	52                   	push   edx
c0019673:	52                   	push   edx
c0019674:	53                   	push   ebx
c0019675:	50                   	push   eax
c0019676:	e8 4d fc ff ff       	call   c00192c8 <EnvVarContainer::getEnv(char const*)>
c001967b:	83 c4 10             	add    esp,0x10
c001967e:	85 c0                	test   eax,eax
c0019680:	75 16                	jne    c0019698 <Krnl::getEnv(Process*, char const*)+0x60>
c0019682:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019686:	a1 74 d4 02 c0       	mov    eax,ds:0xc002d474
c001968b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001968f:	83 c4 08             	add    esp,0x8
c0019692:	5b                   	pop    ebx
c0019693:	e9 30 fc ff ff       	jmp    c00192c8 <EnvVarContainer::getEnv(char const*)>
c0019698:	83 c4 08             	add    esp,0x8
c001969b:	5b                   	pop    ebx
c001969c:	c3                   	ret    

c001969d <Krnl::setEnvSystem(char const*, char const*)>:
c001969d:	83 ec 10             	sub    esp,0x10
c00196a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196a8:	ff 35 74 d4 02 c0    	push   DWORD PTR ds:0xc002d474
c00196ae:	e8 53 fc ff ff       	call   c0019306 <EnvVarContainer::setEnv(char const*, char const*)>
c00196b3:	83 c4 1c             	add    esp,0x1c
c00196b6:	c3                   	ret    

c00196b7 <Krnl::setEnvUser(char const*, char const*)>:
c00196b7:	a1 70 d4 02 c0       	mov    eax,ds:0xc002d470
c00196bc:	85 c0                	test   eax,eax
c00196be:	74 15                	je     c00196d5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00196c0:	83 ec 10             	sub    esp,0x10
c00196c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196cb:	50                   	push   eax
c00196cc:	e8 35 fc ff ff       	call   c0019306 <EnvVarContainer::setEnv(char const*, char const*)>
c00196d1:	83 c4 1c             	add    esp,0x1c
c00196d4:	c3                   	ret    
c00196d5:	c3                   	ret    

c00196d6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00196d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196da:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c00196e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00196e4:	e9 1d fc ff ff       	jmp    c0019306 <EnvVarContainer::setEnv(char const*, char const*)>

c00196e9 <Krnl::deleteEnvSystem(char const*)>:
c00196e9:	c3                   	ret    

c00196ea <Krnl::deleteEnvUser(char const*)>:
c00196ea:	c3                   	ret    

c00196eb <Krnl::deleteEnvProcess(Process*, char const*)>:
c00196eb:	c3                   	ret    

c00196ec <Krnl::newProcessEnv(Process*)>:
c00196ec:	83 ec 28             	sub    esp,0x28
c00196ef:	6a 0c                	push   0xc
c00196f1:	e8 de 5d ff ff       	call   c000f4d4 <malloc>
c00196f6:	5a                   	pop    edx
c00196f7:	59                   	pop    ecx
c00196f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00196fc:	50                   	push   eax
c00196fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019701:	e8 e0 fe ff ff       	call   c00195e6 <EnvVarContainer::EnvVarContainer(Process*)>
c0019706:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001970a:	83 c4 2c             	add    esp,0x2c
c001970d:	c3                   	ret    

c001970e <Krnl::copyProcessEnv(Process*, Process*)>:
c001970e:	56                   	push   esi
c001970f:	53                   	push   ebx
c0019710:	83 ec 10             	sub    esp,0x10
c0019713:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019717:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001971d:	6a 0c                	push   0xc
c001971f:	e8 b0 5d ff ff       	call   c000f4d4 <malloc>
c0019724:	89 c3                	mov    ebx,eax
c0019726:	58                   	pop    eax
c0019727:	5a                   	pop    edx
c0019728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001972c:	53                   	push   ebx
c001972d:	e8 b4 fe ff ff       	call   c00195e6 <EnvVarContainer::EnvVarContainer(Process*)>
c0019732:	8b 06                	mov    eax,DWORD PTR [esi]
c0019734:	89 03                	mov    DWORD PTR [ebx],eax
c0019736:	c1 e0 03             	shl    eax,0x3
c0019739:	89 04 24             	mov    DWORD PTR [esp],eax
c001973c:	e8 93 5d ff ff       	call   c000f4d4 <malloc>
c0019741:	83 c4 0c             	add    esp,0xc
c0019744:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019747:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019749:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019750:	52                   	push   edx
c0019751:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019754:	50                   	push   eax
c0019755:	e8 fb 6e fe ff       	call   c0000655 <memcpy>
c001975a:	89 d8                	mov    eax,ebx
c001975c:	83 c4 14             	add    esp,0x14
c001975f:	5b                   	pop    ebx
c0019760:	5e                   	pop    esi
c0019761:	c3                   	ret    

c0019762 <Krnl::loadSystemEnv()>:
c0019762:	53                   	push   ebx
c0019763:	83 ec 14             	sub    esp,0x14
c0019766:	6a 0c                	push   0xc
c0019768:	e8 67 5d ff ff       	call   c000f4d4 <malloc>
c001976d:	89 c3                	mov    ebx,eax
c001976f:	58                   	pop    eax
c0019770:	5a                   	pop    edx
c0019771:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c0019777:	53                   	push   ebx
c0019778:	e8 69 fe ff ff       	call   c00195e6 <EnvVarContainer::EnvVarContainer(Process*)>
c001977d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019780:	89 1d 74 d4 02 c0    	mov    DWORD PTR ds:0xc002d474,ebx
c0019786:	e8 3f fe ff ff       	call   c00195ca <EnvVarContainer::__loadSystem()>
c001978b:	83 c4 18             	add    esp,0x18
c001978e:	5b                   	pop    ebx
c001978f:	c3                   	ret    

c0019790 <Krnl::loadUserEnv()>:
c0019790:	53                   	push   ebx
c0019791:	83 ec 14             	sub    esp,0x14
c0019794:	6a 0c                	push   0xc
c0019796:	e8 39 5d ff ff       	call   c000f4d4 <malloc>
c001979b:	89 c3                	mov    ebx,eax
c001979d:	58                   	pop    eax
c001979e:	5a                   	pop    edx
c001979f:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c00197a5:	53                   	push   ebx
c00197a6:	e8 3b fe ff ff       	call   c00195e6 <EnvVarContainer::EnvVarContainer(Process*)>
c00197ab:	89 1d 70 d4 02 c0    	mov    DWORD PTR ds:0xc002d470,ebx
c00197b1:	83 c4 18             	add    esp,0x18
c00197b4:	5b                   	pop    ebx
c00197b5:	c3                   	ret    

c00197b6 <Krnl::flushEnv()>:
c00197b6:	c3                   	ret    

c00197b7 <Krnl::getProcessTotalEnvCount(Process*)>:
c00197b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197bb:	8b 15 70 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d470
c00197c1:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c00197c7:	a1 74 d4 02 c0       	mov    eax,ds:0xc002d474
c00197cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00197ce:	03 01                	add    eax,DWORD PTR [ecx]
c00197d0:	85 d2                	test   edx,edx
c00197d2:	74 02                	je     c00197d6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00197d4:	03 02                	add    eax,DWORD PTR [edx]
c00197d6:	c3                   	ret    

c00197d7 <Krnl::getProcessEnvPair(Process*, int)>:
c00197d7:	57                   	push   edi
c00197d8:	8b 0d 70 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d470
c00197de:	56                   	push   esi
c00197df:	85 c9                	test   ecx,ecx
c00197e1:	53                   	push   ebx
c00197e2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00197e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00197ea:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c00197f0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00197f4:	8b 02                	mov    eax,DWORD PTR [edx]
c00197f6:	75 47                	jne    c001983f <Krnl::getProcessEnvPair(Process*, int)+0x68>
c00197f8:	39 c3                	cmp    ebx,eax
c00197fa:	7c 47                	jl     c0019843 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c00197fc:	8b 15 74 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d474
c0019802:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019804:	01 c1                	add    ecx,eax
c0019806:	39 d9                	cmp    ecx,ebx
c0019808:	7e 6c                	jle    c0019876 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001980a:	51                   	push   ecx
c001980b:	89 d9                	mov    ecx,ebx
c001980d:	29 c1                	sub    ecx,eax
c001980f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019812:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019816:	53                   	push   ebx
c0019817:	68 d7 a1 02 c0       	push   0xc002a1d7
c001981c:	e8 60 8f ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0019821:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c0019827:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019829:	a1 74 d4 02 c0       	mov    eax,ds:0xc002d474
c001982e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019831:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019835:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019838:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001983b:	89 06                	mov    DWORD PTR [esi],eax
c001983d:	eb 51                	jmp    c0019890 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001983f:	39 c3                	cmp    ebx,eax
c0019841:	7d 05                	jge    c0019848 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019843:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019846:	eb 20                	jmp    c0019868 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019848:	8b 39                	mov    edi,DWORD PTR [ecx]
c001984a:	8d 14 07             	lea    edx,[edi+eax*1]
c001984d:	39 da                	cmp    edx,ebx
c001984f:	7e 04                	jle    c0019855 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019851:	29 c3                	sub    ebx,eax
c0019853:	eb 10                	jmp    c0019865 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019855:	8b 0d 74 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d474
c001985b:	03 11                	add    edx,DWORD PTR [ecx]
c001985d:	39 da                	cmp    edx,ebx
c001985f:	7e 15                	jle    c0019876 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019861:	29 c3                	sub    ebx,eax
c0019863:	29 fb                	sub    ebx,edi
c0019865:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019868:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001986c:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001986f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019872:	89 06                	mov    DWORD PTR [esi],eax
c0019874:	eb 1d                	jmp    c0019893 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c0019876:	83 ec 0c             	sub    esp,0xc
c0019879:	68 eb a1 02 c0       	push   0xc002a1eb
c001987e:	e8 18 00 00 00       	call   c001989b <Krnl::panic(char const*)>
c0019883:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0019889:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019890:	83 c4 10             	add    esp,0x10
c0019893:	89 f0                	mov    eax,esi
c0019895:	5b                   	pop    ebx
c0019896:	5e                   	pop    esi
c0019897:	5f                   	pop    edi
c0019898:	c2 04 00             	ret    0x4

c001989b <Krnl::panic(char const*)>:
c001989b:	55                   	push   ebp
c001989c:	89 e5                	mov    ebp,esp
c001989e:	53                   	push   ebx
c001989f:	50                   	push   eax
c00198a0:	a1 7c d4 02 c0       	mov    eax,ds:0xc002d47c
c00198a5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00198a8:	85 c0                	test   eax,eax
c00198aa:	74 02                	je     c00198ae <Krnl::panic(char const*)+0x13>
c00198ac:	ff d0                	call   eax
c00198ae:	fa                   	cli    
c00198af:	c6 05 80 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d480,0x1
c00198b6:	83 ec 08             	sub    esp,0x8
c00198b9:	c6 05 84 b8 02 c0 00 	mov    BYTE PTR ds:0xc002b884,0x0
c00198c0:	53                   	push   ebx
c00198c1:	68 05 a2 02 c0       	push   0xc002a205
c00198c6:	e8 b6 8e ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00198cb:	58                   	pop    eax
c00198cc:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00198d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198d7:	e8 3d 70 ff ff       	call   c0010919 <setActiveTerminal(VgaText*)>
c00198dc:	83 c4 0c             	add    esp,0xc
c00198df:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00198e4:	6a 01                	push   0x1
c00198e6:	6a 0f                	push   0xf
c00198e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198ee:	e8 af 69 ff ff       	call   c00102a2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00198f3:	5a                   	pop    edx
c00198f4:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00198f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198ff:	e8 b6 72 ff ff       	call   c0010bba <VgaText::clearScreen()>
c0019904:	59                   	pop    ecx
c0019905:	58                   	pop    eax
c0019906:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001990b:	68 1e a2 02 c0       	push   0xc002a21e
c0019910:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019916:	e8 1d 74 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c001991b:	58                   	pop    eax
c001991c:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019921:	5a                   	pop    edx
c0019922:	68 c4 a2 02 c0       	push   0xc002a2c4
c0019927:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001992d:	e8 06 74 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0019932:	59                   	pop    ecx
c0019933:	58                   	pop    eax
c0019934:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019939:	68 3a a2 02 c0       	push   0xc002a23a
c001993e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019944:	e8 ef 73 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0019949:	58                   	pop    eax
c001994a:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001994f:	5a                   	pop    edx
c0019950:	53                   	push   ebx
c0019951:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019957:	e8 dc 73 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c001995c:	59                   	pop    ecx
c001995d:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019962:	5b                   	pop    ebx
c0019963:	68 5a a2 02 c0       	push   0xc002a25a
c0019968:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001996e:	e8 c5 73 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0019973:	58                   	pop    eax
c0019974:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019979:	5a                   	pop    edx
c001997a:	68 00 a3 02 c0       	push   0xc002a300
c001997f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019985:	e8 ae 73 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c001998a:	59                   	pop    ecx
c001998b:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019990:	5b                   	pop    ebx
c0019991:	68 3a a2 02 c0       	push   0xc002a23a
c0019996:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001999c:	e8 97 73 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c00199a1:	58                   	pop    eax
c00199a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199a7:	5a                   	pop    edx
c00199a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00199ab:	83 c0 0c             	add    eax,0xc
c00199ae:	50                   	push   eax
c00199af:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00199b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199ba:	e8 79 73 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c00199bf:	59                   	pop    ecx
c00199c0:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00199c5:	5b                   	pop    ebx
c00199c6:	68 59 a2 02 c0       	push   0xc002a259
c00199cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199d1:	e8 62 73 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c00199d6:	58                   	pop    eax
c00199d7:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00199dc:	5a                   	pop    edx
c00199dd:	68 2c a3 02 c0       	push   0xc002a32c
c00199e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199e8:	e8 4b 73 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c00199ed:	59                   	pop    ecx
c00199ee:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00199f3:	5b                   	pop    ebx
c00199f4:	68 6c a3 02 c0       	push   0xc002a36c
c00199f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199ff:	e8 34 73 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0019a04:	58                   	pop    eax
c0019a05:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019a0a:	5a                   	pop    edx
c0019a0b:	68 45 a2 02 c0       	push   0xc002a245
c0019a10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a16:	e8 1d 73 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0019a1b:	59                   	pop    ecx
c0019a1c:	5b                   	pop    ebx
c0019a1d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019a20:	68 5d a2 02 c0       	push   0xc002a25d
c0019a25:	e8 57 8d ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0019a2a:	58                   	pop    eax
c0019a2b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a2e:	5a                   	pop    edx
c0019a2f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019a32:	68 66 a2 02 c0       	push   0xc002a266
c0019a37:	e8 45 8d ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0019a3c:	59                   	pop    ecx
c0019a3d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a40:	5b                   	pop    ebx
c0019a41:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a43:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019a46:	68 6f a2 02 c0       	push   0xc002a26f
c0019a4b:	e8 31 8d ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0019a50:	58                   	pop    eax
c0019a51:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019a56:	5a                   	pop    edx
c0019a57:	68 b0 a3 02 c0       	push   0xc002a3b0
c0019a5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a62:	e8 d1 72 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0019a67:	59                   	pop    ecx
c0019a68:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019a6d:	5b                   	pop    ebx
c0019a6e:	68 78 a2 02 c0       	push   0xc002a278
c0019a73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a79:	e8 ba 72 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0019a7e:	0f 20 c0             	mov    eax,cr0
c0019a81:	5a                   	pop    edx
c0019a82:	59                   	pop    ecx
c0019a83:	50                   	push   eax
c0019a84:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019a89:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a8f:	e8 ca 72 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c0019a94:	5b                   	pop    ebx
c0019a95:	58                   	pop    eax
c0019a96:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019a9b:	68 82 a2 02 c0       	push   0xc002a282
c0019aa0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019aa6:	e8 8d 72 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0019aab:	0f 20 d0             	mov    eax,cr2
c0019aae:	5a                   	pop    edx
c0019aaf:	59                   	pop    ecx
c0019ab0:	50                   	push   eax
c0019ab1:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019ab6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019abc:	e8 9d 72 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c0019ac1:	5b                   	pop    ebx
c0019ac2:	58                   	pop    eax
c0019ac3:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019ac8:	68 8c a2 02 c0       	push   0xc002a28c
c0019acd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ad3:	e8 60 72 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0019ad8:	0f 20 d8             	mov    eax,cr3
c0019adb:	5a                   	pop    edx
c0019adc:	59                   	pop    ecx
c0019add:	50                   	push   eax
c0019ade:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019ae3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ae9:	e8 70 72 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c0019aee:	5b                   	pop    ebx
c0019aef:	58                   	pop    eax
c0019af0:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019af5:	68 9f a2 02 c0       	push   0xc002a29f
c0019afa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b00:	e8 33 72 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0019b05:	0f 20 e0             	mov    eax,cr4
c0019b08:	5a                   	pop    edx
c0019b09:	59                   	pop    ecx
c0019b0a:	50                   	push   eax
c0019b0b:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019b10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b16:	e8 43 72 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c0019b1b:	5b                   	pop    ebx
c0019b1c:	58                   	pop    eax
c0019b1d:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019b22:	68 a9 a2 02 c0       	push   0xc002a2a9
c0019b27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b2d:	e8 06 72 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0019b32:	5a                   	pop    edx
c0019b33:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019b38:	59                   	pop    ecx
c0019b39:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b3f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019b42:	50                   	push   eax
c0019b43:	e8 16 72 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c0019b48:	5b                   	pop    ebx
c0019b49:	58                   	pop    eax
c0019b4a:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019b4f:	68 c0 a2 02 c0       	push   0xc002a2c0
c0019b54:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b5a:	e8 d9 71 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0019b5f:	5a                   	pop    edx
c0019b60:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019b65:	59                   	pop    ecx
c0019b66:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b6c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b6f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019b72:	50                   	push   eax
c0019b73:	e8 e6 71 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c0019b78:	5b                   	pop    ebx
c0019b79:	58                   	pop    eax
c0019b7a:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019b7f:	68 c0 a2 02 c0       	push   0xc002a2c0
c0019b84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b8a:	e8 a9 71 ff ff       	call   c0010d38 <VgaText::puts(char const*)>
c0019b8f:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019b94:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b97:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b9d:	8b 12                	mov    edx,DWORD PTR [edx]
c0019b9f:	59                   	pop    ecx
c0019ba0:	5b                   	pop    ebx
c0019ba1:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019ba4:	50                   	push   eax
c0019ba5:	e8 b4 71 ff ff       	call   c0010d5e <VgaText::putx(unsigned int)>
c0019baa:	83 c4 10             	add    esp,0x10
c0019bad:	b2 fe                	mov    dl,0xfe
c0019baf:	e4 60                	in     al,0x60
c0019bb1:	3c 1c                	cmp    al,0x1c
c0019bb3:	74 04                	je     c0019bb9 <Krnl::panic(char const*)+0x31e>
c0019bb5:	3c 5a                	cmp    al,0x5a
c0019bb7:	75 f6                	jne    c0019baf <Krnl::panic(char const*)+0x314>
c0019bb9:	e4 64                	in     al,0x64
c0019bbb:	a8 02                	test   al,0x2
c0019bbd:	75 fa                	jne    c0019bb9 <Krnl::panic(char const*)+0x31e>
c0019bbf:	88 d0                	mov    al,dl
c0019bc1:	e6 64                	out    0x64,al
c0019bc3:	fa                   	cli    
c0019bc4:	f4                   	hlt    
c0019bc5:	eb e8                	jmp    c0019baf <Krnl::panic(char const*)+0x314>

c0019bc7 <Net::switchEndian16(unsigned short)>:
c0019bc7:	83 ec 04             	sub    esp,0x4
c0019bca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bce:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019bd2:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019bd6:	c1 f8 08             	sar    eax,0x8
c0019bd9:	89 c2                	mov    edx,eax
c0019bdb:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019bdf:	c1 e0 08             	shl    eax,0x8
c0019be2:	09 d0                	or     eax,edx
c0019be4:	83 c4 04             	add    esp,0x4
c0019be7:	c3                   	ret    

c0019be8 <Net::switchEndian32(unsigned int)>:
c0019be8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bec:	c1 e8 18             	shr    eax,0x18
c0019bef:	89 c2                	mov    edx,eax
c0019bf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bf5:	c1 e0 08             	shl    eax,0x8
c0019bf8:	25 00 00 ff 00       	and    eax,0xff0000
c0019bfd:	09 c2                	or     edx,eax
c0019bff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c03:	c1 e8 08             	shr    eax,0x8
c0019c06:	25 00 ff 00 00       	and    eax,0xff00
c0019c0b:	09 c2                	or     edx,eax
c0019c0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c11:	c1 e0 18             	shl    eax,0x18
c0019c14:	09 d0                	or     eax,edx
c0019c16:	c3                   	ret    

c0019c17 <Net::crc32Calc(unsigned char*, int)>:
c0019c17:	83 ec 10             	sub    esp,0x10
c0019c1a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019c1f:	75 07                	jne    c0019c28 <Net::crc32Calc(unsigned char*, int)+0x11>
c0019c21:	b8 00 00 00 00       	mov    eax,0x0
c0019c26:	eb 7c                	jmp    c0019ca4 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019c28:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0019c2d:	7f 07                	jg     c0019c36 <Net::crc32Calc(unsigned char*, int)+0x1f>
c0019c2f:	b8 00 00 00 00       	mov    eax,0x0
c0019c34:	eb 6e                	jmp    c0019ca4 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019c36:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0019c3e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019c46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c4a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019c4e:	7d 4e                	jge    c0019c9e <Net::crc32Calc(unsigned char*, int)+0x87>
c0019c50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c58:	01 d0                	add    eax,edx
c0019c5a:	8a 00                	mov    al,BYTE PTR [eax]
c0019c5c:	0f b6 c0             	movzx  eax,al
c0019c5f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0019c63:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c6b:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0019c70:	7f 26                	jg     c0019c98 <Net::crc32Calc(unsigned char*, int)+0x81>
c0019c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c76:	83 e0 01             	and    eax,0x1
c0019c79:	74 0d                	je     c0019c88 <Net::crc32Calc(unsigned char*, int)+0x71>
c0019c7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c7f:	d1 e8                	shr    eax,1
c0019c81:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0019c86:	eb 06                	jmp    c0019c8e <Net::crc32Calc(unsigned char*, int)+0x77>
c0019c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c8c:	d1 e8                	shr    eax,1
c0019c8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019c92:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019c96:	eb d3                	jmp    c0019c6b <Net::crc32Calc(unsigned char*, int)+0x54>
c0019c98:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0019c9c:	eb a8                	jmp    c0019c46 <Net::crc32Calc(unsigned char*, int)+0x2f>
c0019c9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ca2:	f7 d0                	not    eax
c0019ca4:	83 c4 10             	add    esp,0x10
c0019ca7:	c3                   	ret    

c0019ca8 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0019ca8:	83 ec 1c             	sub    esp,0x1c
c0019cab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019caf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019cb3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019cbb:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c0019cc0:	7f 14                	jg     c0019cd6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c0019cc2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cc6:	8d 50 01             	lea    edx,[eax+0x1]
c0019cc9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019ccd:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0019cd0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019cd4:	eb e5                	jmp    c0019cbb <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c0019cd6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cda:	8d 50 01             	lea    edx,[eax+0x1]
c0019cdd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019ce1:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0019ce4:	83 ec 04             	sub    esp,0x4
c0019ce7:	6a 06                	push   0x6
c0019ce9:	8d 44 24 36          	lea    eax,[esp+0x36]
c0019ced:	50                   	push   eax
c0019cee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019cf2:	e8 5e 69 fe ff       	call   c0000655 <memcpy>
c0019cf7:	83 c4 10             	add    esp,0x10
c0019cfa:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019cff:	83 ec 04             	sub    esp,0x4
c0019d02:	6a 06                	push   0x6
c0019d04:	8d 44 24 30          	lea    eax,[esp+0x30]
c0019d08:	50                   	push   eax
c0019d09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d0d:	e8 43 69 fe ff       	call   c0000655 <memcpy>
c0019d12:	83 c4 10             	add    esp,0x10
c0019d15:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019d1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019d1e:	0f b7 c0             	movzx  eax,ax
c0019d21:	c1 f8 08             	sar    eax,0x8
c0019d24:	89 c1                	mov    ecx,eax
c0019d26:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d2a:	8d 50 01             	lea    edx,[eax+0x1]
c0019d2d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d31:	88 ca                	mov    dl,cl
c0019d33:	88 10                	mov    BYTE PTR [eax],dl
c0019d35:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019d39:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d3d:	8d 48 01             	lea    ecx,[eax+0x1]
c0019d40:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0019d44:	88 10                	mov    BYTE PTR [eax],dl
c0019d46:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019d4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d4e:	83 ec 04             	sub    esp,0x4
c0019d51:	52                   	push   edx
c0019d52:	50                   	push   eax
c0019d53:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d57:	e8 f9 68 fe ff       	call   c0000655 <memcpy>
c0019d5c:	83 c4 10             	add    esp,0x10
c0019d5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d63:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0019d67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d6b:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0019d6f:	83 ec 08             	sub    esp,0x8
c0019d72:	50                   	push   eax
c0019d73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019d77:	e8 9b fe ff ff       	call   c0019c17 <Net::crc32Calc(unsigned char*, int)>
c0019d7c:	83 c4 10             	add    esp,0x10
c0019d7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019d83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d87:	c1 e8 18             	shr    eax,0x18
c0019d8a:	89 c1                	mov    ecx,eax
c0019d8c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d90:	8d 50 01             	lea    edx,[eax+0x1]
c0019d93:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d97:	88 ca                	mov    dl,cl
c0019d99:	88 10                	mov    BYTE PTR [eax],dl
c0019d9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d9f:	c1 e8 10             	shr    eax,0x10
c0019da2:	89 c1                	mov    ecx,eax
c0019da4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019da8:	8d 50 01             	lea    edx,[eax+0x1]
c0019dab:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019daf:	88 ca                	mov    dl,cl
c0019db1:	88 10                	mov    BYTE PTR [eax],dl
c0019db3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019db7:	c1 e8 08             	shr    eax,0x8
c0019dba:	89 c1                	mov    ecx,eax
c0019dbc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dc0:	8d 50 01             	lea    edx,[eax+0x1]
c0019dc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019dc7:	88 ca                	mov    dl,cl
c0019dc9:	88 10                	mov    BYTE PTR [eax],dl
c0019dcb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dcf:	8d 50 01             	lea    edx,[eax+0x1]
c0019dd2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019dd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019dda:	88 10                	mov    BYTE PTR [eax],dl
c0019ddc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019de0:	83 c4 1c             	add    esp,0x1c
c0019de3:	c3                   	ret    

c0019de4 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0019de4:	83 ec 2c             	sub    esp,0x2c
c0019de7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019deb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019def:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c0019df4:	83 ec 04             	sub    esp,0x4
c0019df7:	6a 06                	push   0x6
c0019df9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019dfd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e01:	83 c0 0e             	add    eax,0xe
c0019e04:	50                   	push   eax
c0019e05:	e8 4b 68 fe ff       	call   c0000655 <memcpy>
c0019e0a:	83 c4 10             	add    esp,0x10
c0019e0d:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019e12:	83 ec 04             	sub    esp,0x4
c0019e15:	6a 06                	push   0x6
c0019e17:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e1b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e1f:	83 c0 08             	add    eax,0x8
c0019e22:	50                   	push   eax
c0019e23:	e8 2d 68 fe ff       	call   c0000655 <memcpy>
c0019e28:	83 c4 10             	add    esp,0x10
c0019e2b:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019e30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e34:	8d 50 01             	lea    edx,[eax+0x1]
c0019e37:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e3b:	8a 00                	mov    al,BYTE PTR [eax]
c0019e3d:	0f b6 c0             	movzx  eax,al
c0019e40:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0019e45:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e49:	8d 50 01             	lea    edx,[eax+0x1]
c0019e4c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e50:	8a 00                	mov    al,BYTE PTR [eax]
c0019e52:	0f b6 c0             	movzx  eax,al
c0019e55:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0019e5a:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0019e5f:	c1 e0 08             	shl    eax,0x8
c0019e62:	89 c2                	mov    edx,eax
c0019e64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e68:	09 d0                	or     eax,edx
c0019e6a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019e6e:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0019e72:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c0019e77:	75 3a                	jne    c0019eb3 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019e79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e7d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019e80:	66 3d dc 05          	cmp    ax,0x5dc
c0019e84:	77 10                	ja     c0019e96 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c0019e86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e8a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019e8d:	0f b7 c0             	movzx  eax,ax
c0019e90:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0019e94:	eb 1d                	jmp    c0019eb3 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019e96:	83 ec 0c             	sub    esp,0xc
c0019e99:	68 d8 a3 02 c0       	push   0xc002a3d8
c0019e9e:	e8 de 88 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0019ea3:	83 c4 10             	add    esp,0x10
c0019ea6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019eaa:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0019eae:	e9 c0 00 00 00       	jmp    c0019f73 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c0019eb3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019eb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ebb:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ebd:	83 ec 04             	sub    esp,0x4
c0019ec0:	52                   	push   edx
c0019ec1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019ec5:	50                   	push   eax
c0019ec6:	e8 8a 67 fe ff       	call   c0000655 <memcpy>
c0019ecb:	83 c4 10             	add    esp,0x10
c0019ece:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ed2:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0019ed6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019eda:	8d 50 01             	lea    edx,[eax+0x1]
c0019edd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019ee1:	8a 00                	mov    al,BYTE PTR [eax]
c0019ee3:	0f b6 c0             	movzx  eax,al
c0019ee6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019eea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019eee:	8d 50 01             	lea    edx,[eax+0x1]
c0019ef1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019ef5:	8a 00                	mov    al,BYTE PTR [eax]
c0019ef7:	0f b6 c0             	movzx  eax,al
c0019efa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019efe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f02:	8d 50 01             	lea    edx,[eax+0x1]
c0019f05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f09:	8a 00                	mov    al,BYTE PTR [eax]
c0019f0b:	0f b6 c0             	movzx  eax,al
c0019f0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f16:	8d 50 01             	lea    edx,[eax+0x1]
c0019f19:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f1d:	8a 00                	mov    al,BYTE PTR [eax]
c0019f1f:	0f b6 c0             	movzx  eax,al
c0019f22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f2a:	c1 e0 18             	shl    eax,0x18
c0019f2d:	89 c2                	mov    edx,eax
c0019f2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f33:	c1 e0 10             	shl    eax,0x10
c0019f36:	09 c2                	or     edx,eax
c0019f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f3c:	c1 e0 08             	shl    eax,0x8
c0019f3f:	09 d0                	or     eax,edx
c0019f41:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0019f45:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f4d:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0019f51:	83 e8 04             	sub    eax,0x4
c0019f54:	83 ec 08             	sub    esp,0x8
c0019f57:	50                   	push   eax
c0019f58:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f5c:	e8 b6 fc ff ff       	call   c0019c17 <Net::crc32Calc(unsigned char*, int)>
c0019f61:	83 c4 10             	add    esp,0x10
c0019f64:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019f68:	0f 94 c2             	sete   dl
c0019f6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f6f:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0019f72:	90                   	nop
c0019f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f77:	83 c4 2c             	add    esp,0x2c
c0019f7a:	c2 04 00             	ret    0x4

c0019f7d <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0019f7d:	55                   	push   ebp
c0019f7e:	57                   	push   edi
c0019f7f:	56                   	push   esi
c0019f80:	53                   	push   ebx
c0019f81:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019f87:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019f8e:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019f90:	8d 6e 01             	lea    ebp,[esi+0x1]
c0019f93:	80 fb 40             	cmp    bl,0x40
c0019f96:	75 1b                	jne    c0019fb3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0019f98:	8a 16                	mov    dl,BYTE PTR [esi]
c0019f9a:	84 d2                	test   dl,dl
c0019f9c:	0f 84 f1 00 00 00    	je     c001a093 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019fa2:	8d 46 01             	lea    eax,[esi+0x1]
c0019fa5:	80 fa 3a             	cmp    dl,0x3a
c0019fa8:	74 04                	je     c0019fae <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0019faa:	89 c6                	mov    esi,eax
c0019fac:	eb ea                	jmp    c0019f98 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0019fae:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019fb1:	89 c6                	mov    esi,eax
c0019fb3:	50                   	push   eax
c0019fb4:	6a 40                	push   0x40
c0019fb6:	6a 00                	push   0x0
c0019fb8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019fbc:	50                   	push   eax
c0019fbd:	e8 c9 66 fe ff       	call   c000068b <memset>
c0019fc2:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0019fc9:	31 c0                	xor    eax,eax
c0019fcb:	83 c4 10             	add    esp,0x10
c0019fce:	8a 0f                	mov    cl,BYTE PTR [edi]
c0019fd0:	84 c9                	test   cl,cl
c0019fd2:	0f 84 bb 00 00 00    	je     c001a093 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019fd8:	3d c7 00 00 00       	cmp    eax,0xc7
c0019fdd:	0f 8f b0 00 00 00    	jg     c001a093 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019fe3:	80 f9 0a             	cmp    cl,0xa
c0019fe6:	0f 85 98 00 00 00    	jne    c001a084 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0019fec:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0019ff1:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0019ff5:	a8 df                	test   al,0xdf
c0019ff7:	0f 94 c1             	sete   cl
c0019ffa:	3c 23                	cmp    al,0x23
c0019ffc:	0f 94 c2             	sete   dl
c0019fff:	08 d1                	or     cl,dl
c001a001:	75 4a                	jne    c001a04d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a003:	8d 50 f7             	lea    edx,[eax-0x9]
c001a006:	80 fa 01             	cmp    dl,0x1
c001a009:	76 42                	jbe    c001a04d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a00b:	3c 5b                	cmp    al,0x5b
c001a00d:	75 42                	jne    c001a051 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a00f:	80 fb 40             	cmp    bl,0x40
c001a012:	75 39                	jne    c001a04d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a014:	83 ec 0c             	sub    esp,0xc
c001a017:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a01b:	52                   	push   edx
c001a01c:	e8 87 66 fe ff       	call   c00006a8 <strlen>
c001a021:	83 c4 10             	add    esp,0x10
c001a024:	83 f8 3f             	cmp    eax,0x3f
c001a027:	77 6a                	ja     c001a093 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a029:	50                   	push   eax
c001a02a:	50                   	push   eax
c001a02b:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a02f:	52                   	push   edx
c001a030:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a034:	52                   	push   edx
c001a035:	e8 f0 66 fe ff       	call   c000072a <strcpy>
c001a03a:	58                   	pop    eax
c001a03b:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a03f:	52                   	push   edx
c001a040:	e8 63 66 fe ff       	call   c00006a8 <strlen>
c001a045:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a04a:	83 c4 10             	add    esp,0x10
c001a04d:	31 d2                	xor    edx,edx
c001a04f:	eb 3a                	jmp    c001a08b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a051:	80 fb 40             	cmp    bl,0x40
c001a054:	74 06                	je     c001a05c <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a056:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a05a:	eb 20                	jmp    c001a07c <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a05c:	50                   	push   eax
c001a05d:	50                   	push   eax
c001a05e:	55                   	push   ebp
c001a05f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a063:	50                   	push   eax
c001a064:	e8 12 67 fe ff       	call   c000077b <strcmp>
c001a069:	83 c4 10             	add    esp,0x10
c001a06c:	85 c0                	test   eax,eax
c001a06e:	75 dd                	jne    c001a04d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a070:	eb e4                	jmp    c001a056 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a072:	8d 50 01             	lea    edx,[eax+0x1]
c001a075:	80 f9 3d             	cmp    cl,0x3d
c001a078:	74 1d                	je     c001a097 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a07a:	89 d0                	mov    eax,edx
c001a07c:	8a 08                	mov    cl,BYTE PTR [eax]
c001a07e:	84 c9                	test   cl,cl
c001a080:	75 f0                	jne    c001a072 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a082:	eb 0f                	jmp    c001a093 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a084:	8d 50 01             	lea    edx,[eax+0x1]
c001a087:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a08b:	47                   	inc    edi
c001a08c:	89 d0                	mov    eax,edx
c001a08e:	e9 3b ff ff ff       	jmp    c0019fce <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a093:	31 c0                	xor    eax,eax
c001a095:	eb 33                	jmp    c001a0ca <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a097:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a09b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a09e:	50                   	push   eax
c001a09f:	50                   	push   eax
c001a0a0:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a0a4:	50                   	push   eax
c001a0a5:	56                   	push   esi
c001a0a6:	e8 d0 66 fe ff       	call   c000077b <strcmp>
c001a0ab:	83 c4 10             	add    esp,0x10
c001a0ae:	85 c0                	test   eax,eax
c001a0b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a0b4:	75 97                	jne    c001a04d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a0b6:	51                   	push   ecx
c001a0b7:	51                   	push   ecx
c001a0b8:	52                   	push   edx
c001a0b9:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a0c0:	e8 65 66 fe ff       	call   c000072a <strcpy>
c001a0c5:	83 c4 10             	add    esp,0x10
c001a0c8:	b0 01                	mov    al,0x1
c001a0ca:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a0d0:	5b                   	pop    ebx
c001a0d1:	5e                   	pop    esi
c001a0d2:	5f                   	pop    edi
c001a0d3:	5d                   	pop    ebp
c001a0d4:	c3                   	ret    

c001a0d5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a0d5:	57                   	push   edi
c001a0d6:	56                   	push   esi
c001a0d7:	53                   	push   ebx
c001a0d8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a0de:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a0e5:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a0ec:	53                   	push   ebx
c001a0ed:	e8 b6 65 fe ff       	call   c00006a8 <strlen>
c001a0f2:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0f5:	89 c7                	mov    edi,eax
c001a0f7:	e8 ac 65 fe ff       	call   c00006a8 <strlen>
c001a0fc:	83 c4 10             	add    esp,0x10
c001a0ff:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a103:	3d ff 00 00 00       	cmp    eax,0xff
c001a108:	0f 87 d3 00 00 00    	ja     c001a1e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a10e:	57                   	push   edi
c001a10f:	57                   	push   edi
c001a110:	56                   	push   esi
c001a111:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a115:	56                   	push   esi
c001a116:	e8 0f 66 fe ff       	call   c000072a <strcpy>
c001a11b:	58                   	pop    eax
c001a11c:	5a                   	pop    edx
c001a11d:	68 86 a7 02 c0       	push   0xc002a786
c001a122:	56                   	push   esi
c001a123:	e8 b9 66 fe ff       	call   c00007e1 <strcat>
c001a128:	59                   	pop    ecx
c001a129:	5f                   	pop    edi
c001a12a:	53                   	push   ebx
c001a12b:	56                   	push   esi
c001a12c:	e8 b0 66 fe ff       	call   c00007e1 <strcat>
c001a131:	58                   	pop    eax
c001a132:	5a                   	pop    edx
c001a133:	68 24 a4 02 c0       	push   0xc002a424
c001a138:	56                   	push   esi
c001a139:	e8 a3 66 fe ff       	call   c00007e1 <strcat>
c001a13e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a145:	e8 8a 53 ff ff       	call   c000f4d4 <malloc>
c001a14a:	83 c4 0c             	add    esp,0xc
c001a14d:	89 c3                	mov    ebx,eax
c001a14f:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c001a155:	56                   	push   esi
c001a156:	50                   	push   eax
c001a157:	e8 54 8b ff ff       	call   c0012cb0 <File::File(char const*, Process*)>
c001a15c:	83 c4 10             	add    esp,0x10
c001a15f:	85 db                	test   ebx,ebx
c001a161:	74 7e                	je     c001a1e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a163:	51                   	push   ecx
c001a164:	51                   	push   ecx
c001a165:	6a 01                	push   0x1
c001a167:	53                   	push   ebx
c001a168:	e8 a7 8b ff ff       	call   c0012d14 <File::open(FileOpenMode)>
c001a16d:	83 c4 10             	add    esp,0x10
c001a170:	85 c0                	test   eax,eax
c001a172:	74 08                	je     c001a17c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a174:	83 ec 0c             	sub    esp,0xc
c001a177:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a179:	53                   	push   ebx
c001a17a:	eb 5f                	jmp    c001a1db <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a17c:	52                   	push   edx
c001a17d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a181:	50                   	push   eax
c001a182:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a186:	50                   	push   eax
c001a187:	53                   	push   ebx
c001a188:	e8 33 8e ff ff       	call   c0012fc0 <File::stat(unsigned long long*, bool*)>
c001a18d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a191:	83 c4 10             	add    esp,0x10
c001a194:	89 c1                	mov    ecx,eax
c001a196:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a19a:	74 31                	je     c001a1cd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a19c:	83 ec 0c             	sub    esp,0xc
c001a19f:	50                   	push   eax
c001a1a0:	e8 2f 53 ff ff       	call   c000f4d4 <malloc>
c001a1a5:	89 c6                	mov    esi,eax
c001a1a7:	58                   	pop    eax
c001a1a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1aa:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a1ae:	52                   	push   edx
c001a1af:	56                   	push   esi
c001a1b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1b4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1b8:	53                   	push   ebx
c001a1b9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1bc:	83 c4 20             	add    esp,0x20
c001a1bf:	85 c0                	test   eax,eax
c001a1c1:	75 0a                	jne    c001a1cd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a1c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1c7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a1cb:	74 18                	je     c001a1e5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a1cd:	83 ec 0c             	sub    esp,0xc
c001a1d0:	53                   	push   ebx
c001a1d1:	e8 9c 8b ff ff       	call   c0012d72 <File::close()>
c001a1d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a1de:	83 c4 10             	add    esp,0x10
c001a1e1:	31 c0                	xor    eax,eax
c001a1e3:	eb 3b                	jmp    c001a220 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a1e5:	83 ec 0c             	sub    esp,0xc
c001a1e8:	53                   	push   ebx
c001a1e9:	e8 84 8b ff ff       	call   c0012d72 <File::close()>
c001a1ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a1f6:	83 c4 0c             	add    esp,0xc
c001a1f9:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a200:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a207:	56                   	push   esi
c001a208:	e8 70 fd ff ff       	call   c0019f7d <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a20d:	89 34 24             	mov    DWORD PTR [esp],esi
c001a210:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a214:	e8 cb 52 ff ff       	call   c000f4e4 <free>
c001a219:	83 c4 10             	add    esp,0x10
c001a21c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a220:	81 c4 20 01 00 00    	add    esp,0x120
c001a226:	5b                   	pop    ebx
c001a227:	5e                   	pop    esi
c001a228:	5f                   	pop    edi
c001a229:	c3                   	ret    

c001a22a <Reg::getLine(char*, char*, char*)>:
c001a22a:	57                   	push   edi
c001a22b:	56                   	push   esi
c001a22c:	53                   	push   ebx
c001a22d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a231:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a235:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a239:	57                   	push   edi
c001a23a:	56                   	push   esi
c001a23b:	53                   	push   ebx
c001a23c:	68 29 a4 02 c0       	push   0xc002a429
c001a241:	e8 8f fe ff ff       	call   c001a0d5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a246:	83 c4 10             	add    esp,0x10
c001a249:	84 c0                	test   al,al
c001a24b:	75 10                	jne    c001a25d <Reg::getLine(char*, char*, char*)+0x33>
c001a24d:	57                   	push   edi
c001a24e:	56                   	push   esi
c001a24f:	53                   	push   ebx
c001a250:	68 4e a4 02 c0       	push   0xc002a44e
c001a255:	e8 7b fe ff ff       	call   c001a0d5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a25a:	83 c4 10             	add    esp,0x10
c001a25d:	5b                   	pop    ebx
c001a25e:	5e                   	pop    esi
c001a25f:	5f                   	pop    edi
c001a260:	c3                   	ret    

c001a261 <Reg::readInt(char*, char*, int*)>:
c001a261:	55                   	push   ebp
c001a262:	57                   	push   edi
c001a263:	56                   	push   esi
c001a264:	53                   	push   ebx
c001a265:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a26b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a26f:	57                   	push   edi
c001a270:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a277:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a27e:	e8 a7 ff ff ff       	call   c001a22a <Reg::getLine(char*, char*, char*)>
c001a283:	83 c4 10             	add    esp,0x10
c001a286:	84 c0                	test   al,al
c001a288:	0f 84 b3 00 00 00    	je     c001a341 <Reg::readInt(char*, char*, int*)+0xe0>
c001a28e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a292:	80 fa 2b             	cmp    dl,0x2b
c001a295:	74 0c                	je     c001a2a3 <Reg::readInt(char*, char*, int*)+0x42>
c001a297:	80 fa 2d             	cmp    dl,0x2d
c001a29a:	75 0e                	jne    c001a2aa <Reg::readInt(char*, char*, int*)+0x49>
c001a29c:	ba 01 00 00 00       	mov    edx,0x1
c001a2a1:	eb 0b                	jmp    c001a2ae <Reg::readInt(char*, char*, int*)+0x4d>
c001a2a3:	ba 01 00 00 00       	mov    edx,0x1
c001a2a8:	eb 02                	jmp    c001a2ac <Reg::readInt(char*, char*, int*)+0x4b>
c001a2aa:	31 d2                	xor    edx,edx
c001a2ac:	31 c0                	xor    eax,eax
c001a2ae:	be 0a 00 00 00       	mov    esi,0xa
c001a2b3:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a2b8:	75 20                	jne    c001a2da <Reg::readInt(char*, char*, int*)+0x79>
c001a2ba:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a2be:	80 f9 78             	cmp    cl,0x78
c001a2c1:	75 0a                	jne    c001a2cd <Reg::readInt(char*, char*, int*)+0x6c>
c001a2c3:	83 c2 02             	add    edx,0x2
c001a2c6:	be 10 00 00 00       	mov    esi,0x10
c001a2cb:	eb 0d                	jmp    c001a2da <Reg::readInt(char*, char*, int*)+0x79>
c001a2cd:	80 f9 62             	cmp    cl,0x62
c001a2d0:	75 08                	jne    c001a2da <Reg::readInt(char*, char*, int*)+0x79>
c001a2d2:	83 c2 02             	add    edx,0x2
c001a2d5:	be 02 00 00 00       	mov    esi,0x2
c001a2da:	01 d7                	add    edi,edx
c001a2dc:	31 d2                	xor    edx,edx
c001a2de:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a2e0:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a2e4:	80 fb 0d             	cmp    bl,0xd
c001a2e7:	0f 94 c3             	sete   bl
c001a2ea:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a2ef:	0f 94 c1             	sete   cl
c001a2f2:	08 cb                	or     bl,cl
c001a2f4:	75 3a                	jne    c001a330 <Reg::readInt(char*, char*, int*)+0xcf>
c001a2f6:	0f af d6             	imul   edx,esi
c001a2f9:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a2fe:	83 fe 10             	cmp    esi,0x10
c001a301:	75 26                	jne    c001a329 <Reg::readInt(char*, char*, int*)+0xc8>
c001a303:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a307:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a30a:	89 e9                	mov    ecx,ebp
c001a30c:	80 f9 05             	cmp    cl,0x5
c001a30f:	77 06                	ja     c001a317 <Reg::readInt(char*, char*, int*)+0xb6>
c001a311:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a315:	eb 16                	jmp    c001a32d <Reg::readInt(char*, char*, int*)+0xcc>
c001a317:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a31b:	83 e9 61             	sub    ecx,0x61
c001a31e:	80 f9 05             	cmp    cl,0x5
c001a321:	77 06                	ja     c001a329 <Reg::readInt(char*, char*, int*)+0xc8>
c001a323:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a327:	eb 04                	jmp    c001a32d <Reg::readInt(char*, char*, int*)+0xcc>
c001a329:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a32d:	47                   	inc    edi
c001a32e:	eb ae                	jmp    c001a2de <Reg::readInt(char*, char*, int*)+0x7d>
c001a330:	84 c0                	test   al,al
c001a332:	74 02                	je     c001a336 <Reg::readInt(char*, char*, int*)+0xd5>
c001a334:	f7 da                	neg    edx
c001a336:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a33d:	89 10                	mov    DWORD PTR [eax],edx
c001a33f:	88 d8                	mov    al,bl
c001a341:	81 c4 ec 00 00 00    	add    esp,0xec
c001a347:	5b                   	pop    ebx
c001a348:	5e                   	pop    esi
c001a349:	5f                   	pop    edi
c001a34a:	5d                   	pop    ebp
c001a34b:	c3                   	ret    

c001a34c <Reg::readString(char*, char*, char*, int)>:
c001a34c:	57                   	push   edi
c001a34d:	56                   	push   esi
c001a34e:	53                   	push   ebx
c001a34f:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a355:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a35c:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a360:	57                   	push   edi
c001a361:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a368:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a36f:	e8 b6 fe ff ff       	call   c001a22a <Reg::getLine(char*, char*, char*)>
c001a374:	83 c4 10             	add    esp,0x10
c001a377:	89 c6                	mov    esi,eax
c001a379:	84 c0                	test   al,al
c001a37b:	74 44                	je     c001a3c1 <Reg::readString(char*, char*, char*, int)+0x75>
c001a37d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a384:	31 c0                	xor    eax,eax
c001a386:	4a                   	dec    edx
c001a387:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a38a:	84 c9                	test   cl,cl
c001a38c:	74 0f                	je     c001a39d <Reg::readString(char*, char*, char*, int)+0x51>
c001a38e:	39 c2                	cmp    edx,eax
c001a390:	7e 0b                	jle    c001a39d <Reg::readString(char*, char*, char*, int)+0x51>
c001a392:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a395:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a39a:	40                   	inc    eax
c001a39b:	eb ea                	jmp    c001a387 <Reg::readString(char*, char*, char*, int)+0x3b>
c001a39d:	83 ec 0c             	sub    esp,0xc
c001a3a0:	53                   	push   ebx
c001a3a1:	e8 02 63 fe ff       	call   c00006a8 <strlen>
c001a3a6:	83 c4 10             	add    esp,0x10
c001a3a9:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a3ae:	75 11                	jne    c001a3c1 <Reg::readString(char*, char*, char*, int)+0x75>
c001a3b0:	83 ec 0c             	sub    esp,0xc
c001a3b3:	53                   	push   ebx
c001a3b4:	e8 ef 62 fe ff       	call   c00006a8 <strlen>
c001a3b9:	83 c4 10             	add    esp,0x10
c001a3bc:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a3c1:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a3c7:	89 f0                	mov    eax,esi
c001a3c9:	5b                   	pop    ebx
c001a3ca:	5e                   	pop    esi
c001a3cb:	5f                   	pop    edi
c001a3cc:	c3                   	ret    

c001a3cd <Reg::readBool(char*, char*, bool*)>:
c001a3cd:	83 ec 20             	sub    esp,0x20
c001a3d0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3d4:	50                   	push   eax
c001a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3dd:	e8 7f fe ff ff       	call   c001a261 <Reg::readInt(char*, char*, int*)>
c001a3e2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a3e7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a3eb:	0f 95 02             	setne  BYTE PTR [edx]
c001a3ee:	83 c4 2c             	add    esp,0x2c
c001a3f1:	c3                   	ret    

c001a3f2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a3f2:	53                   	push   ebx
c001a3f3:	83 ec 1c             	sub    esp,0x1c
c001a3f6:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a3fa:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a3fe:	50                   	push   eax
c001a3ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a403:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a407:	e8 c1 ff ff ff       	call   c001a3cd <Reg::readBool(char*, char*, bool*)>
c001a40c:	83 c4 10             	add    esp,0x10
c001a40f:	84 c0                	test   al,al
c001a411:	74 04                	je     c001a417 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a413:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a417:	88 d8                	mov    al,bl
c001a419:	83 c4 18             	add    esp,0x18
c001a41c:	5b                   	pop    ebx
c001a41d:	c3                   	ret    

c001a41e <Reg::readIntWithDefault(char*, char*, int)>:
c001a41e:	53                   	push   ebx
c001a41f:	83 ec 1c             	sub    esp,0x1c
c001a422:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a426:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a42a:	50                   	push   eax
c001a42b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a42f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a433:	e8 29 fe ff ff       	call   c001a261 <Reg::readInt(char*, char*, int*)>
c001a438:	83 c4 10             	add    esp,0x10
c001a43b:	84 c0                	test   al,al
c001a43d:	74 04                	je     c001a443 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a43f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a443:	89 d8                	mov    eax,ebx
c001a445:	83 c4 18             	add    esp,0x18
c001a448:	5b                   	pop    ebx
c001a449:	c3                   	ret    

c001a44a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a44a:	57                   	push   edi
c001a44b:	56                   	push   esi
c001a44c:	53                   	push   ebx
c001a44d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a451:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a455:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a459:	56                   	push   esi
c001a45a:	53                   	push   ebx
c001a45b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a463:	e8 e4 fe ff ff       	call   c001a34c <Reg::readString(char*, char*, char*, int)>
c001a468:	83 c4 10             	add    esp,0x10
c001a46b:	84 c0                	test   al,al
c001a46d:	75 1b                	jne    c001a48a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a46f:	50                   	push   eax
c001a470:	56                   	push   esi
c001a471:	4e                   	dec    esi
c001a472:	6a 00                	push   0x0
c001a474:	53                   	push   ebx
c001a475:	e8 11 62 fe ff       	call   c000068b <memset>
c001a47a:	83 c4 0c             	add    esp,0xc
c001a47d:	56                   	push   esi
c001a47e:	57                   	push   edi
c001a47f:	53                   	push   ebx
c001a480:	89 fb                	mov    ebx,edi
c001a482:	e8 ce 61 fe ff       	call   c0000655 <memcpy>
c001a487:	83 c4 10             	add    esp,0x10
c001a48a:	89 d8                	mov    eax,ebx
c001a48c:	5b                   	pop    ebx
c001a48d:	5e                   	pop    esi
c001a48e:	5f                   	pop    edi
c001a48f:	c3                   	ret    

c001a490 <Sys::exit(regs*)>:
c001a490:	83 ec 18             	sub    esp,0x18
c001a493:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a497:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a49a:	e8 ce 32 00 00       	call   c001d76d <terminateTask(int)>
c001a49f:	83 c8 ff             	or     eax,0xffffffff
c001a4a2:	83 c4 1c             	add    esp,0x1c
c001a4a5:	89 c2                	mov    edx,eax
c001a4a7:	c3                   	ret    

c001a4a8 <Sys::getCwd(regs*)>:
c001a4a8:	83 ec 10             	sub    esp,0x10
c001a4ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4af:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a4b2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a4b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4ba:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a4bd:	e8 5f 8b ff ff       	call   c0013021 <getcwd(Process*, char*, int)>
c001a4c2:	83 c4 1c             	add    esp,0x1c
c001a4c5:	99                   	cdq    
c001a4c6:	c3                   	ret    

c001a4c7 <Sys::getPID(regs*)>:
c001a4c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a4cf:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4d1:	99                   	cdq    
c001a4d2:	c3                   	ret    

c001a4d3 <Sys::loadDLL(regs*)>:
c001a4d3:	56                   	push   esi
c001a4d4:	53                   	push   ebx
c001a4d5:	31 d2                	xor    edx,edx
c001a4d7:	51                   	push   ecx
c001a4d8:	b8 01 00 00 00       	mov    eax,0x1
c001a4dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4e1:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a4e5:	0f 84 8c 00 00 00    	je     c001a577 <Sys::loadDLL(regs*)+0xa4>
c001a4eb:	83 ec 0c             	sub    esp,0xc
c001a4ee:	68 14 01 00 00       	push   0x114
c001a4f3:	e8 dc 4f ff ff       	call   c000f4d4 <malloc>
c001a4f8:	83 c4 0c             	add    esp,0xc
c001a4fb:	89 c3                	mov    ebx,eax
c001a4fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a502:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a505:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a508:	53                   	push   ebx
c001a509:	e8 a2 87 ff ff       	call   c0012cb0 <File::File(char const*, Process*)>
c001a50e:	83 c4 10             	add    esp,0x10
c001a511:	31 d2                	xor    edx,edx
c001a513:	b8 02 00 00 00       	mov    eax,0x2
c001a518:	85 db                	test   ebx,ebx
c001a51a:	74 5b                	je     c001a577 <Sys::loadDLL(regs*)+0xa4>
c001a51c:	83 ec 0c             	sub    esp,0xc
c001a51f:	53                   	push   ebx
c001a520:	e8 5d 8a ff ff       	call   c0012f82 <File::exists()>
c001a525:	83 c4 10             	add    esp,0x10
c001a528:	84 c0                	test   al,al
c001a52a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a52c:	75 11                	jne    c001a53f <Sys::loadDLL(regs*)+0x6c>
c001a52e:	83 ec 0c             	sub    esp,0xc
c001a531:	53                   	push   ebx
c001a532:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a535:	83 c4 10             	add    esp,0x10
c001a538:	b8 03 00 00 00       	mov    eax,0x3
c001a53d:	eb 36                	jmp    c001a575 <Sys::loadDLL(regs*)+0xa2>
c001a53f:	83 ec 0c             	sub    esp,0xc
c001a542:	53                   	push   ebx
c001a543:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a546:	58                   	pop    eax
c001a547:	5a                   	pop    edx
c001a548:	6a 00                	push   0x0
c001a54a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a54d:	e8 64 21 00 00       	call   c001c6b6 <Thr::loadDLL(char const*, bool)>
c001a552:	83 c4 10             	add    esp,0x10
c001a555:	89 c1                	mov    ecx,eax
c001a557:	31 d2                	xor    edx,edx
c001a559:	b8 04 00 00 00       	mov    eax,0x4
c001a55e:	85 c9                	test   ecx,ecx
c001a560:	74 15                	je     c001a577 <Sys::loadDLL(regs*)+0xa4>
c001a562:	53                   	push   ebx
c001a563:	53                   	push   ebx
c001a564:	ff 35 48 c9 02 c0    	push   DWORD PTR ds:0xc002c948
c001a56a:	51                   	push   ecx
c001a56b:	e8 55 23 00 00       	call   c001c8c5 <Thr::executeDLL(unsigned long, void*)>
c001a570:	83 c4 10             	add    esp,0x10
c001a573:	31 c0                	xor    eax,eax
c001a575:	31 d2                	xor    edx,edx
c001a577:	59                   	pop    ecx
c001a578:	5b                   	pop    ebx
c001a579:	5e                   	pop    esi
c001a57a:	c3                   	ret    

c001a57b <Sys::read(regs*)>:
c001a57b:	57                   	push   edi
c001a57c:	56                   	push   esi
c001a57d:	53                   	push   ebx
c001a57e:	83 ec 10             	sub    esp,0x10
c001a581:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a585:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a588:	83 f8 02             	cmp    eax,0x2
c001a58b:	77 10                	ja     c001a59d <Sys::read(regs*)+0x22>
c001a58d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a592:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a595:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a59b:	eb 0e                	jmp    c001a5ab <Sys::read(regs*)+0x30>
c001a59d:	83 ec 0c             	sub    esp,0xc
c001a5a0:	50                   	push   eax
c001a5a1:	e8 95 70 ff ff       	call   c001163b <getFromFileDescriptor(int)>
c001a5a6:	83 c4 10             	add    esp,0x10
c001a5a9:	89 c1                	mov    ecx,eax
c001a5ab:	83 c8 ff             	or     eax,0xffffffff
c001a5ae:	85 c9                	test   ecx,ecx
c001a5b0:	89 c2                	mov    edx,eax
c001a5b2:	74 28                	je     c001a5dc <Sys::read(regs*)+0x61>
c001a5b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a5bc:	31 ff                	xor    edi,edi
c001a5be:	83 ec 0c             	sub    esp,0xc
c001a5c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a5c3:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a5c7:	52                   	push   edx
c001a5c8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a5cb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a5ce:	57                   	push   edi
c001a5cf:	56                   	push   esi
c001a5d0:	51                   	push   ecx
c001a5d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a5d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a5d8:	83 c4 20             	add    esp,0x20
c001a5db:	99                   	cdq    
c001a5dc:	83 c4 10             	add    esp,0x10
c001a5df:	5b                   	pop    ebx
c001a5e0:	5e                   	pop    esi
c001a5e1:	5f                   	pop    edi
c001a5e2:	c3                   	ret    

c001a5e3 <Sys::sbrk(regs*)>:
c001a5e3:	56                   	push   esi
c001a5e4:	53                   	push   ebx
c001a5e5:	50                   	push   eax
c001a5e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a5ef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5f2:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a5f5:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a5fb:	85 db                	test   ebx,ebx
c001a5fd:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a600:	74 02                	je     c001a604 <Sys::sbrk(regs*)+0x21>
c001a602:	79 06                	jns    c001a60a <Sys::sbrk(regs*)+0x27>
c001a604:	89 f0                	mov    eax,esi
c001a606:	31 d2                	xor    edx,edx
c001a608:	eb 2a                	jmp    c001a634 <Sys::sbrk(regs*)+0x51>
c001a60a:	83 c8 ff             	or     eax,0xffffffff
c001a60d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a613:	89 c2                	mov    edx,eax
c001a615:	77 1d                	ja     c001a634 <Sys::sbrk(regs*)+0x51>
c001a617:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a61d:	50                   	push   eax
c001a61e:	c1 ea 0c             	shr    edx,0xc
c001a621:	68 07 04 00 00       	push   0x407
c001a626:	52                   	push   edx
c001a627:	51                   	push   ecx
c001a628:	e8 2f 79 ff ff       	call   c0011f5c <VAS::allocatePages(int, int)>
c001a62d:	89 f0                	mov    eax,esi
c001a62f:	31 d2                	xor    edx,edx
c001a631:	83 c4 10             	add    esp,0x10
c001a634:	59                   	pop    ecx
c001a635:	5b                   	pop    ebx
c001a636:	5e                   	pop    esi
c001a637:	c3                   	ret    

c001a638 <Sys::setCwd(regs*)>:
c001a638:	83 ec 14             	sub    esp,0x14
c001a63b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a63f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a642:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a647:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a64a:	e8 fc 89 ff ff       	call   c001304b <setcwd(Process*, char*)>
c001a64f:	83 c4 1c             	add    esp,0x1c
c001a652:	99                   	cdq    
c001a653:	c3                   	ret    

c001a654 <Sys::write(regs*)>:
c001a654:	57                   	push   edi
c001a655:	56                   	push   esi
c001a656:	53                   	push   ebx
c001a657:	83 ec 10             	sub    esp,0x10
c001a65a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a65e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a661:	83 f8 02             	cmp    eax,0x2
c001a664:	77 10                	ja     c001a676 <Sys::write(regs*)+0x22>
c001a666:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a66b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a66e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a674:	eb 0e                	jmp    c001a684 <Sys::write(regs*)+0x30>
c001a676:	83 ec 0c             	sub    esp,0xc
c001a679:	50                   	push   eax
c001a67a:	e8 bc 6f ff ff       	call   c001163b <getFromFileDescriptor(int)>
c001a67f:	83 c4 10             	add    esp,0x10
c001a682:	89 c1                	mov    ecx,eax
c001a684:	83 c8 ff             	or     eax,0xffffffff
c001a687:	85 c9                	test   ecx,ecx
c001a689:	89 c2                	mov    edx,eax
c001a68b:	74 28                	je     c001a6b5 <Sys::write(regs*)+0x61>
c001a68d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a695:	31 ff                	xor    edi,edi
c001a697:	83 ec 0c             	sub    esp,0xc
c001a69a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a69c:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a6a0:	52                   	push   edx
c001a6a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a6a4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a6a7:	57                   	push   edi
c001a6a8:	56                   	push   esi
c001a6a9:	51                   	push   ecx
c001a6aa:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a6ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a6b1:	83 c4 20             	add    esp,0x20
c001a6b4:	99                   	cdq    
c001a6b5:	83 c4 10             	add    esp,0x10
c001a6b8:	5b                   	pop    ebx
c001a6b9:	5e                   	pop    esi
c001a6ba:	5f                   	pop    edi
c001a6bb:	c3                   	ret    

c001a6bc <Sys::yield(regs*)>:
c001a6bc:	57                   	push   edi
c001a6bd:	56                   	push   esi
c001a6be:	53                   	push   ebx
c001a6bf:	e8 66 26 00 00       	call   c001cd2a <lockScheduler()>
c001a6c4:	e8 9d 29 00 00       	call   c001d066 <schedule()>
c001a6c9:	e8 5e 26 00 00       	call   c001cd2c <unlockScheduler()>
c001a6ce:	8b 35 d0 cf 02 c0    	mov    esi,DWORD PTR ds:0xc002cfd0
c001a6d4:	8b 3d d4 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cfd4
c001a6da:	89 f0                	mov    eax,esi
c001a6dc:	89 fb                	mov    ebx,edi
c001a6de:	89 f1                	mov    ecx,esi
c001a6e0:	c1 e0 07             	shl    eax,0x7
c001a6e3:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001a6e7:	25 80 30 0f 00       	and    eax,0xf3080
c001a6ec:	c1 eb 17             	shr    ebx,0x17
c001a6ef:	31 c8                	xor    eax,ecx
c001a6f1:	89 da                	mov    edx,ebx
c001a6f3:	5b                   	pop    ebx
c001a6f4:	5e                   	pop    esi
c001a6f5:	5f                   	pop    edi
c001a6f6:	c3                   	ret    

c001a6f7 <sysCallSeekDir(regs*)>:
c001a6f7:	31 c0                	xor    eax,eax
c001a6f9:	31 d2                	xor    edx,edx
c001a6fb:	c3                   	ret    

c001a6fc <sysCallTellDir(regs*)>:
c001a6fc:	31 c0                	xor    eax,eax
c001a6fe:	31 d2                	xor    edx,edx
c001a700:	c3                   	ret    

c001a701 <sysCallVerify(regs*)>:
c001a701:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a705:	31 d2                	xor    edx,edx
c001a707:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a70a:	c3                   	ret    

c001a70b <sysCallGetArgc(regs*)>:
c001a70b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a710:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a713:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001a719:	99                   	cdq    
c001a71a:	c3                   	ret    

c001a71b <sysFormatDisk(regs*)>:
c001a71b:	56                   	push   esi
c001a71c:	53                   	push   ebx
c001a71d:	53                   	push   ebx
c001a71e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a722:	8b 1d c8 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002cac8
c001a728:	eb 25                	jmp    c001a74f <sysFormatDisk(regs*)+0x34>
c001a72a:	83 ec 0c             	sub    esp,0xc
c001a72d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a730:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a732:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a735:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a738:	50                   	push   eax
c001a739:	ff 34 85 60 cf 02 c0 	push   DWORD PTR [eax*4-0x3ffd30a0]
c001a740:	53                   	push   ebx
c001a741:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001a744:	83 c4 20             	add    esp,0x20
c001a747:	83 f8 08             	cmp    eax,0x8
c001a74a:	75 12                	jne    c001a75e <sysFormatDisk(regs*)+0x43>
c001a74c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001a74f:	85 db                	test   ebx,ebx
c001a751:	75 d7                	jne    c001a72a <sysFormatDisk(regs*)+0xf>
c001a753:	59                   	pop    ecx
c001a754:	b8 03 00 00 00       	mov    eax,0x3
c001a759:	31 d2                	xor    edx,edx
c001a75b:	5b                   	pop    ebx
c001a75c:	5e                   	pop    esi
c001a75d:	c3                   	ret    
c001a75e:	85 c0                	test   eax,eax
c001a760:	74 1b                	je     c001a77d <sysFormatDisk(regs*)+0x62>
c001a762:	83 f8 09             	cmp    eax,0x9
c001a765:	74 0b                	je     c001a772 <sysFormatDisk(regs*)+0x57>
c001a767:	59                   	pop    ecx
c001a768:	b8 02 00 00 00       	mov    eax,0x2
c001a76d:	31 d2                	xor    edx,edx
c001a76f:	5b                   	pop    ebx
c001a770:	5e                   	pop    esi
c001a771:	c3                   	ret    
c001a772:	59                   	pop    ecx
c001a773:	b8 01 00 00 00       	mov    eax,0x1
c001a778:	31 d2                	xor    edx,edx
c001a77a:	5b                   	pop    ebx
c001a77b:	5e                   	pop    esi
c001a77c:	c3                   	ret    
c001a77d:	59                   	pop    ecx
c001a77e:	31 c0                	xor    eax,eax
c001a780:	31 d2                	xor    edx,edx
c001a782:	5b                   	pop    ebx
c001a783:	5e                   	pop    esi
c001a784:	c3                   	ret    

c001a785 <sysSetDiskVolumeLabel(regs*)>:
c001a785:	56                   	push   esi
c001a786:	53                   	push   ebx
c001a787:	53                   	push   ebx
c001a788:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a78c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a78f:	83 f8 19             	cmp    eax,0x19
c001a792:	77 29                	ja     c001a7bd <sysSetDiskVolumeLabel(regs*)+0x38>
c001a794:	8b 0c 85 60 cf 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd30a0]
c001a79b:	85 c9                	test   ecx,ecx
c001a79d:	74 1e                	je     c001a7bd <sysSetDiskVolumeLabel(regs*)+0x38>
c001a79f:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001a7a2:	85 d2                	test   edx,edx
c001a7a4:	74 17                	je     c001a7bd <sysSetDiskVolumeLabel(regs*)+0x38>
c001a7a6:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001a7ac:	8b 33                	mov    esi,DWORD PTR [ebx]
c001a7ae:	52                   	push   edx
c001a7af:	50                   	push   eax
c001a7b0:	51                   	push   ecx
c001a7b1:	53                   	push   ebx
c001a7b2:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001a7b5:	83 c4 10             	add    esp,0x10
c001a7b8:	99                   	cdq    
c001a7b9:	59                   	pop    ecx
c001a7ba:	5b                   	pop    ebx
c001a7bb:	5e                   	pop    esi
c001a7bc:	c3                   	ret    
c001a7bd:	59                   	pop    ecx
c001a7be:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a7c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a7c8:	5b                   	pop    ebx
c001a7c9:	5e                   	pop    esi
c001a7ca:	c3                   	ret    

c001a7cb <sysGetDiskVolumeLabel(regs*)>:
c001a7cb:	57                   	push   edi
c001a7cc:	56                   	push   esi
c001a7cd:	53                   	push   ebx
c001a7ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7d2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a7d5:	83 fa 19             	cmp    edx,0x19
c001a7d8:	77 34                	ja     c001a80e <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7da:	8b 0c 95 60 cf 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd30a0]
c001a7e1:	85 c9                	test   ecx,ecx
c001a7e3:	74 29                	je     c001a80e <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7e5:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a7e8:	85 db                	test   ebx,ebx
c001a7ea:	74 22                	je     c001a80e <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7ec:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001a7ef:	85 c0                	test   eax,eax
c001a7f1:	74 1b                	je     c001a80e <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7f3:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001a7f9:	83 ec 0c             	sub    esp,0xc
c001a7fc:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a7fe:	50                   	push   eax
c001a7ff:	53                   	push   ebx
c001a800:	52                   	push   edx
c001a801:	51                   	push   ecx
c001a802:	56                   	push   esi
c001a803:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001a806:	83 c4 20             	add    esp,0x20
c001a809:	99                   	cdq    
c001a80a:	5b                   	pop    ebx
c001a80b:	5e                   	pop    esi
c001a80c:	5f                   	pop    edi
c001a80d:	c3                   	ret    
c001a80e:	5b                   	pop    ebx
c001a80f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a814:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a819:	5e                   	pop    esi
c001a81a:	5f                   	pop    edi
c001a81b:	c3                   	ret    

c001a81c <sysShutdown(regs*)>:
c001a81c:	83 ec 0c             	sub    esp,0xc
c001a81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a823:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a826:	85 c0                	test   eax,eax
c001a828:	74 18                	je     c001a842 <sysShutdown(regs*)+0x26>
c001a82a:	83 f8 01             	cmp    eax,0x1
c001a82d:	74 38                	je     c001a867 <sysShutdown(regs*)+0x4b>
c001a82f:	83 f8 02             	cmp    eax,0x2
c001a832:	74 24                	je     c001a858 <sysShutdown(regs*)+0x3c>
c001a834:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a839:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a83e:	83 c4 0c             	add    esp,0xc
c001a841:	c3                   	ret    
c001a842:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001a847:	8b 10                	mov    edx,DWORD PTR [eax]
c001a849:	6a 00                	push   0x0
c001a84b:	6a 00                	push   0x0
c001a84d:	6a 00                	push   0x0
c001a84f:	50                   	push   eax
c001a850:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a853:	83 c4 10             	add    esp,0x10
c001a856:	eb dc                	jmp    c001a834 <sysShutdown(regs*)+0x18>
c001a858:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001a85d:	8b 10                	mov    edx,DWORD PTR [eax]
c001a85f:	6a 00                	push   0x0
c001a861:	6a 00                	push   0x0
c001a863:	6a 01                	push   0x1
c001a865:	eb e8                	jmp    c001a84f <sysShutdown(regs*)+0x33>
c001a867:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c001a86c:	85 c0                	test   eax,eax
c001a86e:	74 02                	je     c001a872 <sysShutdown(regs*)+0x56>
c001a870:	ff d0                	call   eax
c001a872:	31 c0                	xor    eax,eax
c001a874:	31 d2                	xor    edx,edx
c001a876:	83 c4 0c             	add    esp,0xc
c001a879:	c3                   	ret    

c001a87a <sysCallRealpath(regs*)>:
c001a87a:	83 ec 0c             	sub    esp,0xc
c001a87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a881:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001a884:	85 d2                	test   edx,edx
c001a886:	74 07                	je     c001a88f <sysCallRealpath(regs*)+0x15>
c001a888:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a88b:	85 c0                	test   eax,eax
c001a88d:	75 0b                	jne    c001a89a <sysCallRealpath(regs*)+0x20>
c001a88f:	b8 01 00 00 00       	mov    eax,0x1
c001a894:	31 d2                	xor    edx,edx
c001a896:	83 c4 0c             	add    esp,0xc
c001a899:	c3                   	ret    
c001a89a:	51                   	push   ecx
c001a89b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a8a1:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a8a4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001a8aa:	51                   	push   ecx
c001a8ab:	52                   	push   edx
c001a8ac:	50                   	push   eax
c001a8ad:	e8 54 82 ff ff       	call   c0012b06 <standardiseFiles(char*, char const*, char const*)>
c001a8b2:	83 c4 10             	add    esp,0x10
c001a8b5:	31 c0                	xor    eax,eax
c001a8b7:	31 d2                	xor    edx,edx
c001a8b9:	83 c4 0c             	add    esp,0xc
c001a8bc:	c3                   	ret    

c001a8bd <sysCallReadDir(regs*)>:
c001a8bd:	53                   	push   ebx
c001a8be:	83 ec 18             	sub    esp,0x18
c001a8c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a8c5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a8c8:	83 f8 02             	cmp    eax,0x2
c001a8cb:	76 53                	jbe    c001a920 <sysCallReadDir(regs*)+0x63>
c001a8cd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a8d0:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001a8d6:	77 4f                	ja     c001a927 <sysCallReadDir(regs*)+0x6a>
c001a8d8:	83 ec 0c             	sub    esp,0xc
c001a8db:	50                   	push   eax
c001a8dc:	e8 5a 6d ff ff       	call   c001163b <getFromFileDescriptor(int)>
c001a8e1:	83 c4 10             	add    esp,0x10
c001a8e4:	85 c0                	test   eax,eax
c001a8e6:	74 50                	je     c001a938 <sysCallReadDir(regs*)+0x7b>
c001a8e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8f0:	83 ec 0c             	sub    esp,0xc
c001a8f3:	8b 10                	mov    edx,DWORD PTR [eax]
c001a8f5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001a8f9:	51                   	push   ecx
c001a8fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a8fd:	6a 00                	push   0x0
c001a8ff:	68 10 01 00 00       	push   0x110
c001a904:	50                   	push   eax
c001a905:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a908:	83 c4 20             	add    esp,0x20
c001a90b:	85 c0                	test   eax,eax
c001a90d:	74 38                	je     c001a947 <sysCallReadDir(regs*)+0x8a>
c001a90f:	83 f8 07             	cmp    eax,0x7
c001a912:	74 0c                	je     c001a920 <sysCallReadDir(regs*)+0x63>
c001a914:	b8 02 00 00 00       	mov    eax,0x2
c001a919:	31 d2                	xor    edx,edx
c001a91b:	83 c4 18             	add    esp,0x18
c001a91e:	5b                   	pop    ebx
c001a91f:	c3                   	ret    
c001a920:	b8 01 00 00 00       	mov    eax,0x1
c001a925:	eb f2                	jmp    c001a919 <sysCallReadDir(regs*)+0x5c>
c001a927:	83 ec 08             	sub    esp,0x8
c001a92a:	52                   	push   edx
c001a92b:	68 6c a4 02 c0       	push   0xc002a46c
c001a930:	e8 4c 7e ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001a935:	83 c4 10             	add    esp,0x10
c001a938:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a93d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a942:	83 c4 18             	add    esp,0x18
c001a945:	5b                   	pop    ebx
c001a946:	c3                   	ret    
c001a947:	31 c0                	xor    eax,eax
c001a949:	eb ce                	jmp    c001a919 <sysCallReadDir(regs*)+0x5c>

c001a94b <sysCallIsATTY(regs*)>:
c001a94b:	83 ec 0c             	sub    esp,0xc
c001a94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a952:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a955:	83 f8 02             	cmp    eax,0x2
c001a958:	76 07                	jbe    c001a961 <sysCallIsATTY(regs*)+0x16>
c001a95a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a95f:	75 26                	jne    c001a987 <sysCallIsATTY(regs*)+0x3c>
c001a961:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a966:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a969:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a96f:	85 c0                	test   eax,eax
c001a971:	74 24                	je     c001a997 <sysCallIsATTY(regs*)+0x4c>
c001a973:	83 ec 0c             	sub    esp,0xc
c001a976:	8b 10                	mov    edx,DWORD PTR [eax]
c001a978:	50                   	push   eax
c001a979:	ff 12                	call   DWORD PTR [edx]
c001a97b:	31 d2                	xor    edx,edx
c001a97d:	0f b6 c0             	movzx  eax,al
c001a980:	83 c4 10             	add    esp,0x10
c001a983:	83 c4 0c             	add    esp,0xc
c001a986:	c3                   	ret    
c001a987:	83 ec 0c             	sub    esp,0xc
c001a98a:	50                   	push   eax
c001a98b:	e8 ab 6c ff ff       	call   c001163b <getFromFileDescriptor(int)>
c001a990:	83 c4 10             	add    esp,0x10
c001a993:	85 c0                	test   eax,eax
c001a995:	75 dc                	jne    c001a973 <sysCallIsATTY(regs*)+0x28>
c001a997:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a99c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a9a1:	83 c4 0c             	add    esp,0xc
c001a9a4:	c3                   	ret    

c001a9a5 <sysCallSeek(regs*)>:
c001a9a5:	53                   	push   ebx
c001a9a6:	83 ec 08             	sub    esp,0x8
c001a9a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9ad:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a9b0:	83 f8 02             	cmp    eax,0x2
c001a9b3:	76 4a                	jbe    c001a9ff <sysCallSeek(regs*)+0x5a>
c001a9b5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a9ba:	77 32                	ja     c001a9ee <sysCallSeek(regs*)+0x49>
c001a9bc:	83 ec 0c             	sub    esp,0xc
c001a9bf:	50                   	push   eax
c001a9c0:	e8 76 6c ff ff       	call   c001163b <getFromFileDescriptor(int)>
c001a9c5:	83 c4 0c             	add    esp,0xc
c001a9c8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001a9cb:	31 db                	xor    ebx,ebx
c001a9cd:	53                   	push   ebx
c001a9ce:	51                   	push   ecx
c001a9cf:	50                   	push   eax
c001a9d0:	e8 fd 83 ff ff       	call   c0012dd2 <File::seek(unsigned long long)>
c001a9d5:	83 c4 10             	add    esp,0x10
c001a9d8:	85 c0                	test   eax,eax
c001a9da:	0f 95 c0             	setne  al
c001a9dd:	31 d2                	xor    edx,edx
c001a9df:	0f b6 c0             	movzx  eax,al
c001a9e2:	f7 d8                	neg    eax
c001a9e4:	83 d2 00             	adc    edx,0x0
c001a9e7:	83 c4 08             	add    esp,0x8
c001a9ea:	f7 da                	neg    edx
c001a9ec:	5b                   	pop    ebx
c001a9ed:	c3                   	ret    
c001a9ee:	83 ec 08             	sub    esp,0x8
c001a9f1:	50                   	push   eax
c001a9f2:	68 db a4 02 c0       	push   0xc002a4db
c001a9f7:	e8 85 7d ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001a9fc:	83 c4 10             	add    esp,0x10
c001a9ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aa04:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aa09:	83 c4 08             	add    esp,0x8
c001aa0c:	5b                   	pop    ebx
c001aa0d:	c3                   	ret    

c001aa0e <sysCallTell(regs*)>:
c001aa0e:	53                   	push   ebx
c001aa0f:	83 ec 08             	sub    esp,0x8
c001aa12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa16:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aa19:	83 f8 02             	cmp    eax,0x2
c001aa1c:	76 5e                	jbe    c001aa7c <sysCallTell(regs*)+0x6e>
c001aa1e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aa23:	77 2d                	ja     c001aa52 <sysCallTell(regs*)+0x44>
c001aa25:	83 ec 0c             	sub    esp,0xc
c001aa28:	50                   	push   eax
c001aa29:	e8 0d 6c ff ff       	call   c001163b <getFromFileDescriptor(int)>
c001aa2e:	5a                   	pop    edx
c001aa2f:	59                   	pop    ecx
c001aa30:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aa33:	50                   	push   eax
c001aa34:	e8 ef 83 ff ff       	call   c0012e28 <File::tell(unsigned long long*)>
c001aa39:	83 c4 10             	add    esp,0x10
c001aa3c:	85 c0                	test   eax,eax
c001aa3e:	0f 95 c0             	setne  al
c001aa41:	31 d2                	xor    edx,edx
c001aa43:	0f b6 c0             	movzx  eax,al
c001aa46:	f7 d8                	neg    eax
c001aa48:	83 d2 00             	adc    edx,0x0
c001aa4b:	83 c4 08             	add    esp,0x8
c001aa4e:	f7 da                	neg    edx
c001aa50:	5b                   	pop    ebx
c001aa51:	c3                   	ret    
c001aa52:	83 ec 08             	sub    esp,0x8
c001aa55:	50                   	push   eax
c001aa56:	68 f5 a4 02 c0       	push   0xc002a4f5
c001aa5b:	e8 21 7d ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001aa60:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001aa63:	83 c4 10             	add    esp,0x10
c001aa66:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aa6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aa73:	31 d2                	xor    edx,edx
c001aa75:	31 c0                	xor    eax,eax
c001aa77:	83 c4 08             	add    esp,0x8
c001aa7a:	5b                   	pop    ebx
c001aa7b:	c3                   	ret    
c001aa7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aa81:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aa86:	83 c4 08             	add    esp,0x8
c001aa89:	5b                   	pop    ebx
c001aa8a:	c3                   	ret    

c001aa8b <sysCallSize(regs*)>:
c001aa8b:	53                   	push   ebx
c001aa8c:	83 ec 18             	sub    esp,0x18
c001aa8f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aa93:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aa96:	83 f8 02             	cmp    eax,0x2
c001aa99:	76 64                	jbe    c001aaff <sysCallSize(regs*)+0x74>
c001aa9b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aaa0:	77 33                	ja     c001aad5 <sysCallSize(regs*)+0x4a>
c001aaa2:	83 ec 0c             	sub    esp,0xc
c001aaa5:	50                   	push   eax
c001aaa6:	e8 90 6b ff ff       	call   c001163b <getFromFileDescriptor(int)>
c001aaab:	83 c4 0c             	add    esp,0xc
c001aaae:	8d 54 24 13          	lea    edx,[esp+0x13]
c001aab2:	52                   	push   edx
c001aab3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aab6:	50                   	push   eax
c001aab7:	e8 04 85 ff ff       	call   c0012fc0 <File::stat(unsigned long long*, bool*)>
c001aabc:	83 c4 10             	add    esp,0x10
c001aabf:	85 c0                	test   eax,eax
c001aac1:	0f 95 c0             	setne  al
c001aac4:	31 d2                	xor    edx,edx
c001aac6:	0f b6 c0             	movzx  eax,al
c001aac9:	f7 d8                	neg    eax
c001aacb:	83 d2 00             	adc    edx,0x0
c001aace:	83 c4 18             	add    esp,0x18
c001aad1:	f7 da                	neg    edx
c001aad3:	5b                   	pop    ebx
c001aad4:	c3                   	ret    
c001aad5:	83 ec 08             	sub    esp,0x8
c001aad8:	50                   	push   eax
c001aad9:	68 0f a5 02 c0       	push   0xc002a50f
c001aade:	e8 9e 7c ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001aae3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001aae6:	83 c4 10             	add    esp,0x10
c001aae9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aaef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aaf6:	31 d2                	xor    edx,edx
c001aaf8:	31 c0                	xor    eax,eax
c001aafa:	83 c4 18             	add    esp,0x18
c001aafd:	5b                   	pop    ebx
c001aafe:	c3                   	ret    
c001aaff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ab04:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ab09:	83 c4 18             	add    esp,0x18
c001ab0c:	5b                   	pop    ebx
c001ab0d:	c3                   	ret    

c001ab0e <sysCallSizeFromFilename(regs*)>:
c001ab0e:	57                   	push   edi
c001ab0f:	56                   	push   esi
c001ab10:	53                   	push   ebx
c001ab11:	83 ec 20             	sub    esp,0x20
c001ab14:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ab18:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001ab1b:	83 fb 02             	cmp    ebx,0x2
c001ab1e:	0f 86 99 00 00 00    	jbe    c001abbd <sysCallSizeFromFilename(regs*)+0xaf>
c001ab24:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001ab2a:	77 65                	ja     c001ab91 <sysCallSizeFromFilename(regs*)+0x83>
c001ab2c:	83 ec 0c             	sub    esp,0xc
c001ab2f:	68 14 01 00 00       	push   0x114
c001ab34:	e8 9b 49 ff ff       	call   c000f4d4 <malloc>
c001ab39:	83 c4 0c             	add    esp,0xc
c001ab3c:	89 c6                	mov    esi,eax
c001ab3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab43:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab46:	53                   	push   ebx
c001ab47:	56                   	push   esi
c001ab48:	e8 63 81 ff ff       	call   c0012cb0 <File::File(char const*, Process*)>
c001ab4d:	83 c4 0c             	add    esp,0xc
c001ab50:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ab54:	50                   	push   eax
c001ab55:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001ab58:	56                   	push   esi
c001ab59:	e8 62 84 ff ff       	call   c0012fc0 <File::stat(unsigned long long*, bool*)>
c001ab5e:	83 c4 10             	add    esp,0x10
c001ab61:	85 f6                	test   esi,esi
c001ab63:	74 14                	je     c001ab79 <sysCallSizeFromFilename(regs*)+0x6b>
c001ab65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab69:	8b 16                	mov    edx,DWORD PTR [esi]
c001ab6b:	83 ec 0c             	sub    esp,0xc
c001ab6e:	56                   	push   esi
c001ab6f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ab72:	83 c4 10             	add    esp,0x10
c001ab75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab79:	85 c0                	test   eax,eax
c001ab7b:	0f 95 c0             	setne  al
c001ab7e:	31 d2                	xor    edx,edx
c001ab80:	0f b6 c0             	movzx  eax,al
c001ab83:	f7 d8                	neg    eax
c001ab85:	83 d2 00             	adc    edx,0x0
c001ab88:	83 c4 20             	add    esp,0x20
c001ab8b:	f7 da                	neg    edx
c001ab8d:	5b                   	pop    ebx
c001ab8e:	5e                   	pop    esi
c001ab8f:	5f                   	pop    edi
c001ab90:	c3                   	ret    
c001ab91:	83 ec 08             	sub    esp,0x8
c001ab94:	53                   	push   ebx
c001ab95:	68 0f a5 02 c0       	push   0xc002a50f
c001ab9a:	e8 e2 7b ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001ab9f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001aba2:	83 c4 10             	add    esp,0x10
c001aba5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001abab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001abb2:	31 d2                	xor    edx,edx
c001abb4:	83 c4 20             	add    esp,0x20
c001abb7:	31 c0                	xor    eax,eax
c001abb9:	5b                   	pop    ebx
c001abba:	5e                   	pop    esi
c001abbb:	5f                   	pop    edi
c001abbc:	c3                   	ret    
c001abbd:	83 c4 20             	add    esp,0x20
c001abc0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001abc5:	5b                   	pop    ebx
c001abc6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001abcb:	5e                   	pop    esi
c001abcc:	5f                   	pop    edi
c001abcd:	c3                   	ret    

c001abce <sysCallClose(regs*)>:
c001abce:	53                   	push   ebx
c001abcf:	83 ec 08             	sub    esp,0x8
c001abd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001abd9:	83 f8 02             	cmp    eax,0x2
c001abdc:	76 50                	jbe    c001ac2e <sysCallClose(regs*)+0x60>
c001abde:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001abe3:	74 58                	je     c001ac3d <sysCallClose(regs*)+0x6f>
c001abe5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001abea:	74 60                	je     c001ac4c <sysCallClose(regs*)+0x7e>
c001abec:	77 2f                	ja     c001ac1d <sysCallClose(regs*)+0x4f>
c001abee:	83 ec 0c             	sub    esp,0xc
c001abf1:	50                   	push   eax
c001abf2:	e8 44 6a ff ff       	call   c001163b <getFromFileDescriptor(int)>
c001abf7:	89 c3                	mov    ebx,eax
c001abf9:	89 04 24             	mov    DWORD PTR [esp],eax
c001abfc:	e8 71 81 ff ff       	call   c0012d72 <File::close()>
c001ac01:	83 c4 10             	add    esp,0x10
c001ac04:	85 db                	test   ebx,ebx
c001ac06:	74 0c                	je     c001ac14 <sysCallClose(regs*)+0x46>
c001ac08:	83 ec 0c             	sub    esp,0xc
c001ac0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac0d:	53                   	push   ebx
c001ac0e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac11:	83 c4 10             	add    esp,0x10
c001ac14:	31 c0                	xor    eax,eax
c001ac16:	31 d2                	xor    edx,edx
c001ac18:	83 c4 08             	add    esp,0x8
c001ac1b:	5b                   	pop    ebx
c001ac1c:	c3                   	ret    
c001ac1d:	83 ec 08             	sub    esp,0x8
c001ac20:	50                   	push   eax
c001ac21:	68 90 a4 02 c0       	push   0xc002a490
c001ac26:	e8 56 7b ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001ac2b:	83 c4 10             	add    esp,0x10
c001ac2e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac33:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac38:	83 c4 08             	add    esp,0x8
c001ac3b:	5b                   	pop    ebx
c001ac3c:	c3                   	ret    
c001ac3d:	83 ec 0c             	sub    esp,0xc
c001ac40:	68 2a a5 02 c0       	push   0xc002a52a
c001ac45:	e8 37 7b ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001ac4a:	eb c5                	jmp    c001ac11 <sysCallClose(regs*)+0x43>
c001ac4c:	83 ec 0c             	sub    esp,0xc
c001ac4f:	68 38 a5 02 c0       	push   0xc002a538
c001ac54:	eb ef                	jmp    c001ac45 <sysCallClose(regs*)+0x77>

c001ac56 <sysCallOpenDir(regs*)>:
c001ac56:	56                   	push   esi
c001ac57:	53                   	push   ebx
c001ac58:	53                   	push   ebx
c001ac59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac5d:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001ac60:	85 f6                	test   esi,esi
c001ac62:	74 59                	je     c001acbd <sysCallOpenDir(regs*)+0x67>
c001ac64:	83 ec 0c             	sub    esp,0xc
c001ac67:	68 14 01 00 00       	push   0x114
c001ac6c:	e8 63 48 ff ff       	call   c000f4d4 <malloc>
c001ac71:	83 c4 0c             	add    esp,0xc
c001ac74:	89 c6                	mov    esi,eax
c001ac76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac7b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ac7e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ac81:	56                   	push   esi
c001ac82:	e8 ff 84 ff ff       	call   c0013186 <Directory::Directory(char const*, Process*)>
c001ac87:	83 c4 10             	add    esp,0x10
c001ac8a:	85 f6                	test   esi,esi
c001ac8c:	74 2f                	je     c001acbd <sysCallOpenDir(regs*)+0x67>
c001ac8e:	83 ec 0c             	sub    esp,0xc
c001ac91:	56                   	push   esi
c001ac92:	e8 53 85 ff ff       	call   c00131ea <Directory::open()>
c001ac97:	83 c4 10             	add    esp,0x10
c001ac9a:	85 c0                	test   eax,eax
c001ac9c:	75 1f                	jne    c001acbd <sysCallOpenDir(regs*)+0x67>
c001ac9e:	83 ec 0c             	sub    esp,0xc
c001aca1:	56                   	push   esi
c001aca2:	e8 9f 66 ff ff       	call   c0011346 <UnixFile::getFileDescriptor()>
c001aca7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001acaa:	83 c4 10             	add    esp,0x10
c001acad:	89 02                	mov    DWORD PTR [edx],eax
c001acaf:	c1 f8 1f             	sar    eax,0x1f
c001acb2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001acb5:	31 c0                	xor    eax,eax
c001acb7:	59                   	pop    ecx
c001acb8:	31 d2                	xor    edx,edx
c001acba:	5b                   	pop    ebx
c001acbb:	5e                   	pop    esi
c001acbc:	c3                   	ret    
c001acbd:	59                   	pop    ecx
c001acbe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001acc3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001acc8:	5b                   	pop    ebx
c001acc9:	5e                   	pop    esi
c001acca:	c3                   	ret    

c001accb <sysCallCloseDir(regs*)>:
c001accb:	53                   	push   ebx
c001accc:	83 ec 08             	sub    esp,0x8
c001accf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acd3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001acd6:	83 f8 02             	cmp    eax,0x2
c001acd9:	76 47                	jbe    c001ad22 <sysCallCloseDir(regs*)+0x57>
c001acdb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ace0:	77 2f                	ja     c001ad11 <sysCallCloseDir(regs*)+0x46>
c001ace2:	83 ec 0c             	sub    esp,0xc
c001ace5:	50                   	push   eax
c001ace6:	e8 50 69 ff ff       	call   c001163b <getFromFileDescriptor(int)>
c001aceb:	89 c3                	mov    ebx,eax
c001aced:	89 04 24             	mov    DWORD PTR [esp],eax
c001acf0:	e8 51 85 ff ff       	call   c0013246 <Directory::close()>
c001acf5:	83 c4 10             	add    esp,0x10
c001acf8:	85 db                	test   ebx,ebx
c001acfa:	74 0c                	je     c001ad08 <sysCallCloseDir(regs*)+0x3d>
c001acfc:	83 ec 0c             	sub    esp,0xc
c001acff:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad01:	53                   	push   ebx
c001ad02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad05:	83 c4 10             	add    esp,0x10
c001ad08:	31 c0                	xor    eax,eax
c001ad0a:	31 d2                	xor    edx,edx
c001ad0c:	83 c4 08             	add    esp,0x8
c001ad0f:	5b                   	pop    ebx
c001ad10:	c3                   	ret    
c001ad11:	83 ec 08             	sub    esp,0x8
c001ad14:	50                   	push   eax
c001ad15:	68 b8 a4 02 c0       	push   0xc002a4b8
c001ad1a:	e8 62 7a ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001ad1f:	83 c4 10             	add    esp,0x10
c001ad22:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad27:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad2c:	83 c4 08             	add    esp,0x8
c001ad2f:	5b                   	pop    ebx
c001ad30:	c3                   	ret    

c001ad31 <sysCallMakeDir(regs*)>:
c001ad31:	56                   	push   esi
c001ad32:	53                   	push   ebx
c001ad33:	83 ec 10             	sub    esp,0x10
c001ad36:	68 14 01 00 00       	push   0x114
c001ad3b:	e8 94 47 ff ff       	call   c000f4d4 <malloc>
c001ad40:	83 c4 0c             	add    esp,0xc
c001ad43:	89 c3                	mov    ebx,eax
c001ad45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad4a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad51:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ad54:	53                   	push   ebx
c001ad55:	e8 2c 84 ff ff       	call   c0013186 <Directory::Directory(char const*, Process*)>
c001ad5a:	83 c4 10             	add    esp,0x10
c001ad5d:	85 db                	test   ebx,ebx
c001ad5f:	74 32                	je     c001ad93 <sysCallMakeDir(regs*)+0x62>
c001ad61:	83 ec 0c             	sub    esp,0xc
c001ad64:	53                   	push   ebx
c001ad65:	e8 60 86 ff ff       	call   c00133ca <Directory::create()>
c001ad6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad6d:	89 c6                	mov    esi,eax
c001ad6f:	e8 d2 84 ff ff       	call   c0013246 <Directory::close()>
c001ad74:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad79:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad7c:	83 c4 10             	add    esp,0x10
c001ad7f:	31 c0                	xor    eax,eax
c001ad81:	59                   	pop    ecx
c001ad82:	85 f6                	test   esi,esi
c001ad84:	5b                   	pop    ebx
c001ad85:	0f 95 c0             	setne  al
c001ad88:	5e                   	pop    esi
c001ad89:	31 d2                	xor    edx,edx
c001ad8b:	f7 d8                	neg    eax
c001ad8d:	83 d2 00             	adc    edx,0x0
c001ad90:	f7 da                	neg    edx
c001ad92:	c3                   	ret    
c001ad93:	59                   	pop    ecx
c001ad94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad99:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad9e:	5b                   	pop    ebx
c001ad9f:	5e                   	pop    esi
c001ada0:	c3                   	ret    

c001ada1 <sysCallWait(regs*)>:
c001ada1:	83 ec 10             	sub    esp,0x10
c001ada4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ada8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001adab:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001adae:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001adb1:	e8 2b 24 00 00       	call   c001d1e1 <waitTask(int, int*, int)>
c001adb6:	83 c4 1c             	add    esp,0x1c
c001adb9:	99                   	cdq    
c001adba:	c3                   	ret    

c001adbb <sysCallNotImpl(regs*)>:
c001adbb:	83 ec 18             	sub    esp,0x18
c001adbe:	68 46 a5 02 c0       	push   0xc002a546
c001adc3:	e8 d3 ea ff ff       	call   c001989b <Krnl::panic(char const*)>
c001adc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001adcd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001add2:	83 c4 1c             	add    esp,0x1c
c001add5:	c3                   	ret    

c001add6 <sysPanic(regs*)>:
c001add6:	83 ec 18             	sub    esp,0x18
c001add9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001addd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ade0:	e8 b6 ea ff ff       	call   c001989b <Krnl::panic(char const*)>
c001ade5:	c7 04 24 60 a5 02 c0 	mov    DWORD PTR [esp],0xc002a560
c001adec:	e8 aa ea ff ff       	call   c001989b <Krnl::panic(char const*)>
c001adf1:	b8 01 00 00 00       	mov    eax,0x1
c001adf6:	31 d2                	xor    edx,edx
c001adf8:	83 c4 1c             	add    esp,0x1c
c001adfb:	c3                   	ret    

c001adfc <sysCallRmdir(regs*)>:
c001adfc:	56                   	push   esi
c001adfd:	53                   	push   ebx
c001adfe:	83 ec 20             	sub    esp,0x20
c001ae01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae05:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ae08:	68 14 01 00 00       	push   0x114
c001ae0d:	e8 c2 46 ff ff       	call   c000f4d4 <malloc>
c001ae12:	83 c4 0c             	add    esp,0xc
c001ae15:	89 c3                	mov    ebx,eax
c001ae17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae1c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae1f:	56                   	push   esi
c001ae20:	53                   	push   ebx
c001ae21:	e8 8a 7e ff ff       	call   c0012cb0 <File::File(char const*, Process*)>
c001ae26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae29:	e8 5e 80 ff ff       	call   c0012e8c <File::unlink()>
c001ae2e:	83 c4 10             	add    esp,0x10
c001ae31:	85 db                	test   ebx,ebx
c001ae33:	74 14                	je     c001ae49 <sysCallRmdir(regs*)+0x4d>
c001ae35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae39:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ae3b:	83 ec 0c             	sub    esp,0xc
c001ae3e:	53                   	push   ebx
c001ae3f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ae42:	83 c4 10             	add    esp,0x10
c001ae45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae49:	85 c0                	test   eax,eax
c001ae4b:	0f 95 c0             	setne  al
c001ae4e:	31 d2                	xor    edx,edx
c001ae50:	0f b6 c0             	movzx  eax,al
c001ae53:	f7 d8                	neg    eax
c001ae55:	83 d2 00             	adc    edx,0x0
c001ae58:	83 c4 14             	add    esp,0x14
c001ae5b:	f7 da                	neg    edx
c001ae5d:	5b                   	pop    ebx
c001ae5e:	5e                   	pop    esi
c001ae5f:	c3                   	ret    

c001ae60 <sysCallUnlink(regs*)>:
c001ae60:	56                   	push   esi
c001ae61:	53                   	push   ebx
c001ae62:	83 ec 20             	sub    esp,0x20
c001ae65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae69:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ae6c:	68 14 01 00 00       	push   0x114
c001ae71:	e8 5e 46 ff ff       	call   c000f4d4 <malloc>
c001ae76:	83 c4 0c             	add    esp,0xc
c001ae79:	89 c3                	mov    ebx,eax
c001ae7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae80:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae83:	56                   	push   esi
c001ae84:	53                   	push   ebx
c001ae85:	e8 26 7e ff ff       	call   c0012cb0 <File::File(char const*, Process*)>
c001ae8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae8d:	e8 fa 7f ff ff       	call   c0012e8c <File::unlink()>
c001ae92:	83 c4 10             	add    esp,0x10
c001ae95:	85 db                	test   ebx,ebx
c001ae97:	74 14                	je     c001aead <sysCallUnlink(regs*)+0x4d>
c001ae99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae9d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ae9f:	83 ec 0c             	sub    esp,0xc
c001aea2:	53                   	push   ebx
c001aea3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001aea6:	83 c4 10             	add    esp,0x10
c001aea9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aead:	85 c0                	test   eax,eax
c001aeaf:	0f 95 c0             	setne  al
c001aeb2:	31 d2                	xor    edx,edx
c001aeb4:	0f b6 c0             	movzx  eax,al
c001aeb7:	f7 d8                	neg    eax
c001aeb9:	83 d2 00             	adc    edx,0x0
c001aebc:	83 c4 14             	add    esp,0x14
c001aebf:	f7 da                	neg    edx
c001aec1:	5b                   	pop    ebx
c001aec2:	5e                   	pop    esi
c001aec3:	c3                   	ret    

c001aec4 <sysCallGetArgv(regs*)>:
c001aec4:	83 ec 0c             	sub    esp,0xc
c001aec7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aecb:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001aece:	85 c0                	test   eax,eax
c001aed0:	78 2b                	js     c001aefd <sysCallGetArgv(regs*)+0x39>
c001aed2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001aed8:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001aedb:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001aee1:	7d 1a                	jge    c001aefd <sysCallGetArgv(regs*)+0x39>
c001aee3:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001aeea:	85 c0                	test   eax,eax
c001aeec:	74 17                	je     c001af05 <sysCallGetArgv(regs*)+0x41>
c001aeee:	83 ec 08             	sub    esp,0x8
c001aef1:	50                   	push   eax
c001aef2:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001aef5:	e8 30 58 fe ff       	call   c000072a <strcpy>
c001aefa:	83 c4 10             	add    esp,0x10
c001aefd:	31 c0                	xor    eax,eax
c001aeff:	31 d2                	xor    edx,edx
c001af01:	83 c4 0c             	add    esp,0xc
c001af04:	c3                   	ret    
c001af05:	b8 01 00 00 00       	mov    eax,0x1
c001af0a:	31 d2                	xor    edx,edx
c001af0c:	83 c4 0c             	add    esp,0xc
c001af0f:	c3                   	ret    

c001af10 <sysCallTTYName(regs*)>:
c001af10:	56                   	push   esi
c001af11:	53                   	push   ebx
c001af12:	53                   	push   ebx
c001af13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af17:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001af1a:	85 c0                	test   eax,eax
c001af1c:	74 5f                	je     c001af7d <sysCallTTYName(regs*)+0x6d>
c001af1e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001af21:	83 f8 02             	cmp    eax,0x2
c001af24:	77 3e                	ja     c001af64 <sysCallTTYName(regs*)+0x54>
c001af26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af2b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af2e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001af34:	85 db                	test   ebx,ebx
c001af36:	74 45                	je     c001af7d <sysCallTTYName(regs*)+0x6d>
c001af38:	83 ec 0c             	sub    esp,0xc
c001af3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af3d:	53                   	push   ebx
c001af3e:	ff 10                	call   DWORD PTR [eax]
c001af40:	83 c4 10             	add    esp,0x10
c001af43:	84 c0                	test   al,al
c001af45:	74 41                	je     c001af88 <sysCallTTYName(regs*)+0x78>
c001af47:	83 ec 08             	sub    esp,0x8
c001af4a:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001af50:	53                   	push   ebx
c001af51:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001af54:	e8 d1 57 fe ff       	call   c000072a <strcpy>
c001af59:	83 c4 10             	add    esp,0x10
c001af5c:	31 c0                	xor    eax,eax
c001af5e:	59                   	pop    ecx
c001af5f:	31 d2                	xor    edx,edx
c001af61:	5b                   	pop    ebx
c001af62:	5e                   	pop    esi
c001af63:	c3                   	ret    
c001af64:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001af69:	74 bb                	je     c001af26 <sysCallTTYName(regs*)+0x16>
c001af6b:	83 ec 0c             	sub    esp,0xc
c001af6e:	50                   	push   eax
c001af6f:	e8 c7 66 ff ff       	call   c001163b <getFromFileDescriptor(int)>
c001af74:	83 c4 10             	add    esp,0x10
c001af77:	89 c3                	mov    ebx,eax
c001af79:	85 db                	test   ebx,ebx
c001af7b:	75 bb                	jne    c001af38 <sysCallTTYName(regs*)+0x28>
c001af7d:	59                   	pop    ecx
c001af7e:	b8 01 00 00 00       	mov    eax,0x1
c001af83:	31 d2                	xor    edx,edx
c001af85:	5b                   	pop    ebx
c001af86:	5e                   	pop    esi
c001af87:	c3                   	ret    
c001af88:	59                   	pop    ecx
c001af89:	b8 02 00 00 00       	mov    eax,0x2
c001af8e:	31 d2                	xor    edx,edx
c001af90:	5b                   	pop    ebx
c001af91:	5e                   	pop    esi
c001af92:	c3                   	ret    

c001af93 <sysCallUSleep(regs*)>:
c001af93:	83 ec 14             	sub    esp,0x14
c001af96:	b8 e8 03 00 00       	mov    eax,0x3e8
c001af9b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af9f:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001afa6:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001afa9:	01 ca                	add    edx,ecx
c001afab:	52                   	push   edx
c001afac:	50                   	push   eax
c001afad:	e8 c8 22 00 00       	call   c001d27a <nanoSleep(unsigned long long)>
c001afb2:	31 c0                	xor    eax,eax
c001afb4:	31 d2                	xor    edx,edx
c001afb6:	83 c4 1c             	add    esp,0x1c
c001afb9:	c3                   	ret    

c001afba <sysCallSpawn(regs*)>:
c001afba:	56                   	push   esi
c001afbb:	53                   	push   ebx
c001afbc:	53                   	push   ebx
c001afbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afc1:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001afc4:	85 f6                	test   esi,esi
c001afc6:	75 08                	jne    c001afd0 <sysCallSpawn(regs*)+0x16>
c001afc8:	59                   	pop    ecx
c001afc9:	31 c0                	xor    eax,eax
c001afcb:	31 d2                	xor    edx,edx
c001afcd:	5b                   	pop    ebx
c001afce:	5e                   	pop    esi
c001afcf:	c3                   	ret    
c001afd0:	83 ec 0c             	sub    esp,0xc
c001afd3:	68 3f 07 00 00       	push   0x73f
c001afd8:	e8 f7 44 ff ff       	call   c000f4d4 <malloc>
c001afdd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001afe0:	89 c6                	mov    esi,eax
c001afe2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afe7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001afea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001afed:	56                   	push   esi
c001afee:	e8 87 19 00 00       	call   c001c97a <Process::Process(char const*, Process*, char**)>
c001aff3:	83 c4 20             	add    esp,0x20
c001aff6:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001affd:	75 c9                	jne    c001afc8 <sysCallSpawn(regs*)+0xe>
c001afff:	83 ec 0c             	sub    esp,0xc
c001b002:	56                   	push   esi
c001b003:	e8 38 1f 00 00       	call   c001cf40 <Process::createUserThread()>
c001b008:	8b 06                	mov    eax,DWORD PTR [esi]
c001b00a:	83 c4 10             	add    esp,0x10
c001b00d:	99                   	cdq    
c001b00e:	59                   	pop    ecx
c001b00f:	5b                   	pop    ebx
c001b010:	5e                   	pop    esi
c001b011:	c3                   	ret    

c001b012 <sysCallGetEnv(regs*)>:
c001b012:	57                   	push   edi
c001b013:	56                   	push   esi
c001b014:	53                   	push   ebx
c001b015:	83 ec 1c             	sub    esp,0x1c
c001b018:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b01c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b021:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b024:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b027:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b02a:	e8 88 e7 ff ff       	call   c00197b7 <Krnl::getProcessTotalEnvCount(Process*)>
c001b02f:	83 c4 10             	add    esp,0x10
c001b032:	39 c7                	cmp    edi,eax
c001b034:	7c 14                	jl     c001b04a <sysCallGetEnv(regs*)+0x38>
c001b036:	85 f6                	test   esi,esi
c001b038:	75 0b                	jne    c001b045 <sysCallGetEnv(regs*)+0x33>
c001b03a:	83 c4 10             	add    esp,0x10
c001b03d:	31 c0                	xor    eax,eax
c001b03f:	5b                   	pop    ebx
c001b040:	31 d2                	xor    edx,edx
c001b042:	5e                   	pop    esi
c001b043:	5f                   	pop    edi
c001b044:	c3                   	ret    
c001b045:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b048:	eb f0                	jmp    c001b03a <sysCallGetEnv(regs*)+0x28>
c001b04a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b04e:	52                   	push   edx
c001b04f:	57                   	push   edi
c001b050:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b056:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b059:	50                   	push   eax
c001b05a:	e8 78 e7 ff ff       	call   c00197d7 <Krnl::getProcessEnvPair(Process*, int)>
c001b05f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b062:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b066:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b06a:	83 c4 0c             	add    esp,0xc
c001b06d:	85 c9                	test   ecx,ecx
c001b06f:	75 23                	jne    c001b094 <sysCallGetEnv(regs*)+0x82>
c001b071:	83 ec 0c             	sub    esp,0xc
c001b074:	50                   	push   eax
c001b075:	e8 2e 56 fe ff       	call   c00006a8 <strlen>
c001b07a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b07d:	89 c3                	mov    ebx,eax
c001b07f:	e8 24 56 fe ff       	call   c00006a8 <strlen>
c001b084:	83 c4 10             	add    esp,0x10
c001b087:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b08b:	83 c4 10             	add    esp,0x10
c001b08e:	31 d2                	xor    edx,edx
c001b090:	5b                   	pop    ebx
c001b091:	5e                   	pop    esi
c001b092:	5f                   	pop    edi
c001b093:	c3                   	ret    
c001b094:	83 ec 08             	sub    esp,0x8
c001b097:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b09a:	50                   	push   eax
c001b09b:	56                   	push   esi
c001b09c:	e8 89 56 fe ff       	call   c000072a <strcpy>
c001b0a1:	58                   	pop    eax
c001b0a2:	5a                   	pop    edx
c001b0a3:	68 6f a5 02 c0       	push   0xc002a56f
c001b0a8:	56                   	push   esi
c001b0a9:	e8 33 57 fe ff       	call   c00007e1 <strcat>
c001b0ae:	59                   	pop    ecx
c001b0af:	5b                   	pop    ebx
c001b0b0:	57                   	push   edi
c001b0b1:	56                   	push   esi
c001b0b2:	e8 2a 57 fe ff       	call   c00007e1 <strcat>
c001b0b7:	83 c4 10             	add    esp,0x10
c001b0ba:	e9 7b ff ff ff       	jmp    c001b03a <sysCallGetEnv(regs*)+0x28>

c001b0bf <sysAppSettings(regs*)>:
c001b0bf:	53                   	push   ebx
c001b0c0:	83 ec 08             	sub    esp,0x8
c001b0c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0c7:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b0ca:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b0d0:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b0d5:	66 3d c0 09          	cmp    ax,0x9c0
c001b0d9:	75 2f                	jne    c001b10a <sysAppSettings(regs*)+0x4b>
c001b0db:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b0e1:	83 e0 1f             	and    eax,0x1f
c001b0e4:	3c 01                	cmp    al,0x1
c001b0e6:	74 2e                	je     c001b116 <sysAppSettings(regs*)+0x57>
c001b0e8:	3c 07                	cmp    al,0x7
c001b0ea:	0f 84 bd 00 00 00    	je     c001b1ad <sysAppSettings(regs*)+0xee>
c001b0f0:	84 c0                	test   al,al
c001b0f2:	0f 84 dc 00 00 00    	je     c001b1d4 <sysAppSettings(regs*)+0x115>
c001b0f8:	3c 08                	cmp    al,0x8
c001b0fa:	74 6d                	je     c001b169 <sysAppSettings(regs*)+0xaa>
c001b0fc:	0f b6 c0             	movzx  eax,al
c001b0ff:	83 c4 08             	add    esp,0x8
c001b102:	05 e8 03 00 00       	add    eax,0x3e8
c001b107:	5b                   	pop    ebx
c001b108:	99                   	cdq    
c001b109:	c3                   	ret    
c001b10a:	b8 01 00 00 00       	mov    eax,0x1
c001b10f:	31 d2                	xor    edx,edx
c001b111:	83 c4 08             	add    esp,0x8
c001b114:	5b                   	pop    ebx
c001b115:	c3                   	ret    
c001b116:	51                   	push   ecx
c001b117:	68 00 01 00 00       	push   0x100
c001b11c:	6a 00                	push   0x0
c001b11e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b123:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b126:	83 c0 0c             	add    eax,0xc
c001b129:	50                   	push   eax
c001b12a:	e8 5c 55 fe ff       	call   c000068b <memset>
c001b12f:	83 c4 0c             	add    esp,0xc
c001b132:	68 ff 00 00 00       	push   0xff
c001b137:	53                   	push   ebx
c001b138:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b13d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b140:	83 c0 0c             	add    eax,0xc
c001b143:	50                   	push   eax
c001b144:	e8 0c 55 fe ff       	call   c0000655 <memcpy>
c001b149:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b14e:	5b                   	pop    ebx
c001b14f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b152:	5a                   	pop    edx
c001b153:	8d 50 0c             	lea    edx,[eax+0xc]
c001b156:	52                   	push   edx
c001b157:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b15d:	e8 2a 56 ff ff       	call   c001078c <VgaText::setTitle(char*)>
c001b162:	83 c4 10             	add    esp,0x10
c001b165:	31 c0                	xor    eax,eax
c001b167:	eb a6                	jmp    c001b10f <sysAppSettings(regs*)+0x50>
c001b169:	83 ec 08             	sub    esp,0x8
c001b16c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b172:	83 e0 0f             	and    eax,0xf
c001b175:	50                   	push   eax
c001b176:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b17b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b17e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b184:	e8 f3 55 ff ff       	call   c001077c <VgaText::setTitleColour(VgaColour)>
c001b189:	58                   	pop    eax
c001b18a:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b190:	5a                   	pop    edx
c001b191:	c1 e8 04             	shr    eax,0x4
c001b194:	83 e0 0f             	and    eax,0xf
c001b197:	50                   	push   eax
c001b198:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b19d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b1a6:	e8 c1 55 ff ff       	call   c001076c <VgaText::setTitleTextColour(VgaColour)>
c001b1ab:	eb b5                	jmp    c001b162 <sysAppSettings(regs*)+0xa3>
c001b1ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1b5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b1bb:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b1c1:	c0 e8 06             	shr    al,0x6
c001b1c4:	83 e0 01             	and    eax,0x1
c001b1c7:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b1cd:	31 c0                	xor    eax,eax
c001b1cf:	e9 3b ff ff ff       	jmp    c001b10f <sysAppSettings(regs*)+0x50>
c001b1d4:	b8 02 00 00 00       	mov    eax,0x2
c001b1d9:	e9 31 ff ff ff       	jmp    c001b10f <sysAppSettings(regs*)+0x50>

c001b1de <sysSetFatAttrib(regs*)>:
c001b1de:	57                   	push   edi
c001b1df:	56                   	push   esi
c001b1e0:	53                   	push   ebx
c001b1e1:	83 ec 1c             	sub    esp,0x1c
c001b1e4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b1e8:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b1eb:	68 14 01 00 00       	push   0x114
c001b1f0:	e8 df 42 ff ff       	call   c000f4d4 <malloc>
c001b1f5:	83 c4 0c             	add    esp,0xc
c001b1f8:	89 c3                	mov    ebx,eax
c001b1fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1ff:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b202:	57                   	push   edi
c001b203:	53                   	push   ebx
c001b204:	e8 a7 7a ff ff       	call   c0012cb0 <File::File(char const*, Process*)>
c001b209:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b20c:	83 c4 0c             	add    esp,0xc
c001b20f:	0f b6 d4             	movzx  edx,ah
c001b212:	0f b6 c0             	movzx  eax,al
c001b215:	52                   	push   edx
c001b216:	50                   	push   eax
c001b217:	53                   	push   ebx
c001b218:	e8 09 7d ff ff       	call   c0012f26 <File::chfatattr(unsigned char, unsigned char)>
c001b21d:	83 c4 10             	add    esp,0x10
c001b220:	85 db                	test   ebx,ebx
c001b222:	74 14                	je     c001b238 <sysSetFatAttrib(regs*)+0x5a>
c001b224:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b228:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b22a:	83 ec 0c             	sub    esp,0xc
c001b22d:	53                   	push   ebx
c001b22e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b231:	83 c4 10             	add    esp,0x10
c001b234:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b238:	85 c0                	test   eax,eax
c001b23a:	0f 95 c0             	setne  al
c001b23d:	31 d2                	xor    edx,edx
c001b23f:	0f b6 c0             	movzx  eax,al
c001b242:	f7 d8                	neg    eax
c001b244:	83 d2 00             	adc    edx,0x0
c001b247:	83 c4 10             	add    esp,0x10
c001b24a:	f7 da                	neg    edx
c001b24c:	5b                   	pop    ebx
c001b24d:	5e                   	pop    esi
c001b24e:	5f                   	pop    edi
c001b24f:	c3                   	ret    

c001b250 <sysPipe(regs*)>:
c001b250:	57                   	push   edi
c001b251:	56                   	push   esi
c001b252:	53                   	push   ebx
c001b253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b257:	83 ec 0c             	sub    esp,0xc
c001b25a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b25d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b260:	6a 20                	push   0x20
c001b262:	e8 6d 42 ff ff       	call   c000f4d4 <malloc>
c001b267:	89 c3                	mov    ebx,eax
c001b269:	58                   	pop    eax
c001b26a:	5a                   	pop    edx
c001b26b:	68 00 50 00 00       	push   0x5000
c001b270:	53                   	push   ebx
c001b271:	e8 9e 4d ff ff       	call   c0010014 <Pipe::Pipe(int)>
c001b276:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b279:	e8 c8 60 ff ff       	call   c0011346 <UnixFile::getFileDescriptor()>
c001b27e:	89 07                	mov    DWORD PTR [edi],eax
c001b280:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b283:	e8 be 60 ff ff       	call   c0011346 <UnixFile::getFileDescriptor()>
c001b288:	83 c4 10             	add    esp,0x10
c001b28b:	89 06                	mov    DWORD PTR [esi],eax
c001b28d:	31 d2                	xor    edx,edx
c001b28f:	5b                   	pop    ebx
c001b290:	31 c0                	xor    eax,eax
c001b292:	5e                   	pop    esi
c001b293:	5f                   	pop    edi
c001b294:	c3                   	ret    

c001b295 <sysGetUnixTime(regs*)>:
c001b295:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001b29a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b2a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2a4:	e9 e3 83 ff ff       	jmp    c001368c <Clock::timeInSecondsLocal()>

c001b2a9 <string_ends_with(char const*, char const*)>:
c001b2a9:	57                   	push   edi
c001b2aa:	56                   	push   esi
c001b2ab:	53                   	push   ebx
c001b2ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2b0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b2b4:	83 ec 0c             	sub    esp,0xc
c001b2b7:	53                   	push   ebx
c001b2b8:	e8 eb 53 fe ff       	call   c00006a8 <strlen>
c001b2bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b2c0:	89 c6                	mov    esi,eax
c001b2c2:	e8 e1 53 fe ff       	call   c00006a8 <strlen>
c001b2c7:	83 c4 10             	add    esp,0x10
c001b2ca:	39 c6                	cmp    esi,eax
c001b2cc:	7d 06                	jge    c001b2d4 <string_ends_with(char const*, char const*)+0x2b>
c001b2ce:	5b                   	pop    ebx
c001b2cf:	31 c0                	xor    eax,eax
c001b2d1:	5e                   	pop    esi
c001b2d2:	5f                   	pop    edi
c001b2d3:	c3                   	ret    
c001b2d4:	83 ec 08             	sub    esp,0x8
c001b2d7:	29 c6                	sub    esi,eax
c001b2d9:	57                   	push   edi
c001b2da:	01 f3                	add    ebx,esi
c001b2dc:	53                   	push   ebx
c001b2dd:	e8 99 54 fe ff       	call   c000077b <strcmp>
c001b2e2:	83 c4 10             	add    esp,0x10
c001b2e5:	85 c0                	test   eax,eax
c001b2e7:	5b                   	pop    ebx
c001b2e8:	0f 94 c0             	sete   al
c001b2eb:	5e                   	pop    esi
c001b2ec:	0f b6 c0             	movzx  eax,al
c001b2ef:	5f                   	pop    edi
c001b2f0:	c3                   	ret    

c001b2f1 <sysCallOpen(regs*)>:
c001b2f1:	56                   	push   esi
c001b2f2:	53                   	push   ebx
c001b2f3:	81 ec 04 01 00 00    	sub    esp,0x104
c001b2f9:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b300:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b303:	85 c9                	test   ecx,ecx
c001b305:	0f 84 b3 00 00 00    	je     c001b3be <sysCallOpen(regs*)+0xcd>
c001b30b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b30e:	85 c0                	test   eax,eax
c001b310:	0f 84 a8 00 00 00    	je     c001b3be <sysCallOpen(regs*)+0xcd>
c001b316:	52                   	push   edx
c001b317:	68 71 a5 02 c0       	push   0xc002a571
c001b31c:	50                   	push   eax
c001b31d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b321:	56                   	push   esi
c001b322:	e8 df 77 ff ff       	call   c0012b06 <standardiseFiles(char*, char const*, char const*)>
c001b327:	89 34 24             	mov    DWORD PTR [esp],esi
c001b32a:	e8 79 53 fe ff       	call   c00006a8 <strlen>
c001b32f:	83 c4 10             	add    esp,0x10
c001b332:	48                   	dec    eax
c001b333:	74 1d                	je     c001b352 <sysCallOpen(regs*)+0x61>
c001b335:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b338:	eb 0f                	jmp    c001b349 <sysCallOpen(regs*)+0x58>
c001b33a:	80 fa 3a             	cmp    dl,0x3a
c001b33d:	74 0f                	je     c001b34e <sysCallOpen(regs*)+0x5d>
c001b33f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b343:	48                   	dec    eax
c001b344:	74 0c                	je     c001b352 <sysCallOpen(regs*)+0x61>
c001b346:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b349:	80 fa 2e             	cmp    dl,0x2e
c001b34c:	75 ec                	jne    c001b33a <sysCallOpen(regs*)+0x49>
c001b34e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b352:	83 ec 08             	sub    esp,0x8
c001b355:	68 75 a5 02 c0       	push   0xc002a575
c001b35a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b35d:	e8 47 ff ff ff       	call   c001b2a9 <string_ends_with(char const*, char const*)>
c001b362:	83 c4 10             	add    esp,0x10
c001b365:	85 c0                	test   eax,eax
c001b367:	75 17                	jne    c001b380 <sysCallOpen(regs*)+0x8f>
c001b369:	83 ec 08             	sub    esp,0x8
c001b36c:	68 96 a5 02 c0       	push   0xc002a596
c001b371:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b374:	e8 30 ff ff ff       	call   c001b2a9 <string_ends_with(char const*, char const*)>
c001b379:	83 c4 10             	add    esp,0x10
c001b37c:	85 c0                	test   eax,eax
c001b37e:	74 51                	je     c001b3d1 <sysCallOpen(regs*)+0xe0>
c001b380:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b383:	83 ec 08             	sub    esp,0x8
c001b386:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b38c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b393:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b396:	ff 30                	push   DWORD PTR [eax]
c001b398:	68 7a a5 02 c0       	push   0xc002a57a
c001b39d:	e8 df 73 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001b3a2:	c7 04 24 89 a5 02 c0 	mov    DWORD PTR [esp],0xc002a589
c001b3a9:	e8 d3 73 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001b3ae:	83 c4 10             	add    esp,0x10
c001b3b1:	81 c4 04 01 00 00    	add    esp,0x104
c001b3b7:	31 c0                	xor    eax,eax
c001b3b9:	31 d2                	xor    edx,edx
c001b3bb:	5b                   	pop    ebx
c001b3bc:	5e                   	pop    esi
c001b3bd:	c3                   	ret    
c001b3be:	81 c4 04 01 00 00    	add    esp,0x104
c001b3c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3ce:	5b                   	pop    ebx
c001b3cf:	5e                   	pop    esi
c001b3d0:	c3                   	ret    
c001b3d1:	83 ec 08             	sub    esp,0x8
c001b3d4:	68 76 a5 02 c0       	push   0xc002a576
c001b3d9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3dc:	e8 9a 53 fe ff       	call   c000077b <strcmp>
c001b3e1:	83 c4 10             	add    esp,0x10
c001b3e4:	85 c0                	test   eax,eax
c001b3e6:	74 98                	je     c001b380 <sysCallOpen(regs*)+0x8f>
c001b3e8:	83 ec 08             	sub    esp,0x8
c001b3eb:	68 75 a5 02 c0       	push   0xc002a575
c001b3f0:	56                   	push   esi
c001b3f1:	e8 b3 fe ff ff       	call   c001b2a9 <string_ends_with(char const*, char const*)>
c001b3f6:	83 c4 10             	add    esp,0x10
c001b3f9:	85 c0                	test   eax,eax
c001b3fb:	75 83                	jne    c001b380 <sysCallOpen(regs*)+0x8f>
c001b3fd:	83 ec 08             	sub    esp,0x8
c001b400:	68 9b a5 02 c0       	push   0xc002a59b
c001b405:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b408:	e8 9c fe ff ff       	call   c001b2a9 <string_ends_with(char const*, char const*)>
c001b40d:	83 c4 10             	add    esp,0x10
c001b410:	85 c0                	test   eax,eax
c001b412:	0f 85 d9 00 00 00    	jne    c001b4f1 <sysCallOpen(regs*)+0x200>
c001b418:	83 ec 08             	sub    esp,0x8
c001b41b:	68 a0 a5 02 c0       	push   0xc002a5a0
c001b420:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b423:	e8 81 fe ff ff       	call   c001b2a9 <string_ends_with(char const*, char const*)>
c001b428:	83 c4 10             	add    esp,0x10
c001b42b:	85 c0                	test   eax,eax
c001b42d:	0f 85 be 00 00 00    	jne    c001b4f1 <sysCallOpen(regs*)+0x200>
c001b433:	83 ec 08             	sub    esp,0x8
c001b436:	68 9c a5 02 c0       	push   0xc002a59c
c001b43b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b43e:	e8 38 53 fe ff       	call   c000077b <strcmp>
c001b443:	83 c4 10             	add    esp,0x10
c001b446:	85 c0                	test   eax,eax
c001b448:	0f 84 a3 00 00 00    	je     c001b4f1 <sysCallOpen(regs*)+0x200>
c001b44e:	83 ec 08             	sub    esp,0x8
c001b451:	68 9b a5 02 c0       	push   0xc002a59b
c001b456:	56                   	push   esi
c001b457:	e8 4d fe ff ff       	call   c001b2a9 <string_ends_with(char const*, char const*)>
c001b45c:	83 c4 10             	add    esp,0x10
c001b45f:	85 c0                	test   eax,eax
c001b461:	0f 85 8a 00 00 00    	jne    c001b4f1 <sysCallOpen(regs*)+0x200>
c001b467:	83 ec 0c             	sub    esp,0xc
c001b46a:	68 14 01 00 00       	push   0x114
c001b46f:	e8 60 40 ff ff       	call   c000f4d4 <malloc>
c001b474:	83 c4 0c             	add    esp,0xc
c001b477:	89 c6                	mov    esi,eax
c001b479:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b47e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b481:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b484:	56                   	push   esi
c001b485:	e8 26 78 ff ff       	call   c0012cb0 <File::File(char const*, Process*)>
c001b48a:	83 c4 10             	add    esp,0x10
c001b48d:	85 f6                	test   esi,esi
c001b48f:	0f 84 29 ff ff ff    	je     c001b3be <sysCallOpen(regs*)+0xcd>
c001b495:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b498:	0f b6 c2             	movzx  eax,dl
c001b49b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b49e:	89 d0                	mov    eax,edx
c001b4a0:	83 e0 01             	and    eax,0x1
c001b4a3:	f6 c2 02             	test   dl,0x2
c001b4a6:	74 03                	je     c001b4ab <sysCallOpen(regs*)+0x1ba>
c001b4a8:	83 c8 02             	or     eax,0x2
c001b4ab:	f6 c2 04             	test   dl,0x4
c001b4ae:	74 03                	je     c001b4b3 <sysCallOpen(regs*)+0x1c2>
c001b4b0:	83 c8 04             	or     eax,0x4
c001b4b3:	f6 c2 08             	test   dl,0x8
c001b4b6:	74 03                	je     c001b4bb <sysCallOpen(regs*)+0x1ca>
c001b4b8:	83 c8 0a             	or     eax,0xa
c001b4bb:	83 e2 10             	and    edx,0x10
c001b4be:	74 03                	je     c001b4c3 <sysCallOpen(regs*)+0x1d2>
c001b4c0:	83 c8 12             	or     eax,0x12
c001b4c3:	83 ec 08             	sub    esp,0x8
c001b4c6:	50                   	push   eax
c001b4c7:	56                   	push   esi
c001b4c8:	e8 47 78 ff ff       	call   c0012d14 <File::open(FileOpenMode)>
c001b4cd:	83 c4 10             	add    esp,0x10
c001b4d0:	85 c0                	test   eax,eax
c001b4d2:	0f 85 e6 fe ff ff    	jne    c001b3be <sysCallOpen(regs*)+0xcd>
c001b4d8:	83 ec 0c             	sub    esp,0xc
c001b4db:	56                   	push   esi
c001b4dc:	e8 65 5e ff ff       	call   c0011346 <UnixFile::getFileDescriptor()>
c001b4e1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b4e4:	89 02                	mov    DWORD PTR [edx],eax
c001b4e6:	c1 f8 1f             	sar    eax,0x1f
c001b4e9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b4ec:	e9 bd fe ff ff       	jmp    c001b3ae <sysCallOpen(regs*)+0xbd>
c001b4f1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b4f4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001b4fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b501:	e9 ab fe ff ff       	jmp    c001b3b1 <sysCallOpen(regs*)+0xc0>

c001b506 <setupSystemCalls()>:
c001b506:	c7 05 a0 d4 02 c0 bc a6 01 c0 	mov    DWORD PTR ds:0xc002d4a0,0xc001a6bc
c001b510:	c7 05 a4 d4 02 c0 90 a4 01 c0 	mov    DWORD PTR ds:0xc002d4a4,0xc001a490
c001b51a:	c7 05 a8 d4 02 c0 e3 a5 01 c0 	mov    DWORD PTR ds:0xc002d4a8,0xc001a5e3
c001b524:	c7 05 ac d4 02 c0 54 a6 01 c0 	mov    DWORD PTR ds:0xc002d4ac,0xc001a654
c001b52e:	c7 05 b0 d4 02 c0 7b a5 01 c0 	mov    DWORD PTR ds:0xc002d4b0,0xc001a57b
c001b538:	c7 05 b4 d4 02 c0 c7 a4 01 c0 	mov    DWORD PTR ds:0xc002d4b4,0xc001a4c7
c001b542:	c7 05 b8 d4 02 c0 a8 a4 01 c0 	mov    DWORD PTR ds:0xc002d4b8,0xc001a4a8
c001b54c:	c7 05 bc d4 02 c0 38 a6 01 c0 	mov    DWORD PTR ds:0xc002d4bc,0xc001a638
c001b556:	c7 05 c4 d4 02 c0 ce ab 01 c0 	mov    DWORD PTR ds:0xc002d4c4,0xc001abce
c001b560:	c7 05 c0 d4 02 c0 f1 b2 01 c0 	mov    DWORD PTR ds:0xc002d4c0,0xc001b2f1
c001b56a:	c7 05 c8 d4 02 c0 56 ac 01 c0 	mov    DWORD PTR ds:0xc002d4c8,0xc001ac56
c001b574:	c7 05 cc d4 02 c0 bd a8 01 c0 	mov    DWORD PTR ds:0xc002d4cc,0xc001a8bd
c001b57e:	c7 05 d0 d4 02 c0 f7 a6 01 c0 	mov    DWORD PTR ds:0xc002d4d0,0xc001a6f7
c001b588:	c7 05 d4 d4 02 c0 fc a6 01 c0 	mov    DWORD PTR ds:0xc002d4d4,0xc001a6fc
c001b592:	c7 05 d8 d4 02 c0 31 ad 01 c0 	mov    DWORD PTR ds:0xc002d4d8,0xc001ad31
c001b59c:	c7 05 dc d4 02 c0 cb ac 01 c0 	mov    DWORD PTR ds:0xc002d4dc,0xc001accb
c001b5a6:	c7 05 e0 d4 02 c0 a5 a9 01 c0 	mov    DWORD PTR ds:0xc002d4e0,0xc001a9a5
c001b5b0:	c7 05 e4 d4 02 c0 0e aa 01 c0 	mov    DWORD PTR ds:0xc002d4e4,0xc001aa0e
c001b5ba:	c7 05 e8 d4 02 c0 8b aa 01 c0 	mov    DWORD PTR ds:0xc002d4e8,0xc001aa8b
c001b5c4:	c7 05 ec d4 02 c0 01 a7 01 c0 	mov    DWORD PTR ds:0xc002d4ec,0xc001a701
c001b5ce:	c7 05 f0 d4 02 c0 a1 ad 01 c0 	mov    DWORD PTR ds:0xc002d4f0,0xc001ada1
c001b5d8:	c7 05 f4 d4 02 c0 bb ad 01 c0 	mov    DWORD PTR ds:0xc002d4f4,0xc001adbb
c001b5e2:	c7 05 f8 d4 02 c0 bb ad 01 c0 	mov    DWORD PTR ds:0xc002d4f8,0xc001adbb
c001b5ec:	c7 05 fc d4 02 c0 fc ad 01 c0 	mov    DWORD PTR ds:0xc002d4fc,0xc001adfc
c001b5f6:	c7 05 00 d5 02 c0 60 ae 01 c0 	mov    DWORD PTR ds:0xc002d500,0xc001ae60
c001b600:	c7 05 04 d5 02 c0 0b a7 01 c0 	mov    DWORD PTR ds:0xc002d504,0xc001a70b
c001b60a:	c7 05 08 d5 02 c0 c4 ae 01 c0 	mov    DWORD PTR ds:0xc002d508,0xc001aec4
c001b614:	c7 05 0c d5 02 c0 7a a8 01 c0 	mov    DWORD PTR ds:0xc002d50c,0xc001a87a
c001b61e:	c7 05 10 d5 02 c0 10 af 01 c0 	mov    DWORD PTR ds:0xc002d510,0xc001af10
c001b628:	c7 05 14 d5 02 c0 4b a9 01 c0 	mov    DWORD PTR ds:0xc002d514,0xc001a94b
c001b632:	c7 05 18 d5 02 c0 93 af 01 c0 	mov    DWORD PTR ds:0xc002d518,0xc001af93
c001b63c:	c7 05 1c d5 02 c0 0e ab 01 c0 	mov    DWORD PTR ds:0xc002d51c,0xc001ab0e
c001b646:	c7 05 20 d5 02 c0 ba af 01 c0 	mov    DWORD PTR ds:0xc002d520,0xc001afba
c001b650:	c7 05 24 d5 02 c0 12 b0 01 c0 	mov    DWORD PTR ds:0xc002d524,0xc001b012
c001b65a:	c7 05 28 d5 02 c0 bf b0 01 c0 	mov    DWORD PTR ds:0xc002d528,0xc001b0bf
c001b664:	c7 05 2c d5 02 c0 1b a7 01 c0 	mov    DWORD PTR ds:0xc002d52c,0xc001a71b
c001b66e:	c7 05 30 d5 02 c0 85 a7 01 c0 	mov    DWORD PTR ds:0xc002d530,0xc001a785
c001b678:	c7 05 34 d5 02 c0 cb a7 01 c0 	mov    DWORD PTR ds:0xc002d534,0xc001a7cb
c001b682:	c7 05 38 d5 02 c0 de b1 01 c0 	mov    DWORD PTR ds:0xc002d538,0xc001b1de
c001b68c:	c7 05 3c d5 02 c0 d6 ad 01 c0 	mov    DWORD PTR ds:0xc002d53c,0xc001add6
c001b696:	c7 05 40 d5 02 c0 1c a8 01 c0 	mov    DWORD PTR ds:0xc002d540,0xc001a81c
c001b6a0:	c7 05 44 d5 02 c0 50 b2 01 c0 	mov    DWORD PTR ds:0xc002d544,0xc001b250
c001b6aa:	c7 05 48 d5 02 c0 95 b2 01 c0 	mov    DWORD PTR ds:0xc002d548,0xc001b295
c001b6b4:	c7 05 4c d5 02 c0 d3 a4 01 c0 	mov    DWORD PTR ds:0xc002d54c,0xc001a4d3
c001b6be:	c3                   	ret    

c001b6bf <systemCall(regs*, void*)>:
c001b6bf:	53                   	push   ebx
c001b6c0:	83 ec 08             	sub    esp,0x8
c001b6c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b6c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001b6ca:	83 f8 7f             	cmp    eax,0x7f
c001b6cd:	77 16                	ja     c001b6e5 <systemCall(regs*, void*)+0x26>
c001b6cf:	8b 14 85 a0 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2b60]
c001b6d6:	85 d2                	test   edx,edx
c001b6d8:	74 0b                	je     c001b6e5 <systemCall(regs*, void*)+0x26>
c001b6da:	83 ec 0c             	sub    esp,0xc
c001b6dd:	53                   	push   ebx
c001b6de:	ff d2                	call   edx
c001b6e0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001b6e3:	eb 0d                	jmp    c001b6f2 <systemCall(regs*, void*)+0x33>
c001b6e5:	52                   	push   edx
c001b6e6:	52                   	push   edx
c001b6e7:	50                   	push   eax
c001b6e8:	68 a5 a5 02 c0       	push   0xc002a5a5
c001b6ed:	e8 8f 70 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001b6f2:	83 c4 10             	add    esp,0x10
c001b6f5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6fa:	31 d2                	xor    edx,edx
c001b6fc:	83 c4 08             	add    esp,0x8
c001b6ff:	5b                   	pop    ebx
c001b700:	c3                   	ret    

c001b701 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001b701:	55                   	push   ebp
c001b702:	89 e5                	mov    ebp,esp
c001b704:	57                   	push   edi
c001b705:	56                   	push   esi
c001b706:	53                   	push   ebx
c001b707:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001b70d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001b710:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001b713:	85 c0                	test   eax,eax
c001b715:	0f 95 c1             	setne  cl
c001b718:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001b71c:	0f 94 c2             	sete   dl
c001b71f:	84 d1                	test   cl,dl
c001b721:	74 26                	je     c001b749 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b723:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001b72a:	74 1d                	je     c001b749 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b72c:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001b72f:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001b735:	89 d6                	mov    esi,edx
c001b737:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001b73d:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001b743:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001b746:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001b749:	83 ec 0c             	sub    esp,0xc
c001b74c:	05 ff 0f 00 00       	add    eax,0xfff
c001b751:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b754:	6a 01                	push   0x1
c001b756:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001b75c:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001b762:	e8 2a 60 ff ff       	call   c0011791 <Virt::allocateKernelVirtualPages(int)>
c001b767:	83 c4 10             	add    esp,0x10
c001b76a:	89 c6                	mov    esi,eax
c001b76c:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001b772:	0f 86 21 01 00 00    	jbe    c001b899 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001b778:	c1 eb 0c             	shr    ebx,0xc
c001b77b:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001b785:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001b78b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b78e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b791:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001b797:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001b79a:	29 d8                	sub    eax,ebx
c001b79c:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001b7a2:	0f 83 f4 00 00 00    	jae    c001b89c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001b7a8:	83 ec 0c             	sub    esp,0xc
c001b7ab:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001b7b1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001b7b4:	3d 00 10 00 00       	cmp    eax,0x1000
c001b7b9:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001b7bb:	52                   	push   edx
c001b7bc:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001b7c2:	52                   	push   edx
c001b7c3:	76 05                	jbe    c001b7ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001b7c5:	b8 00 10 00 00       	mov    eax,0x1000
c001b7ca:	31 d2                	xor    edx,edx
c001b7cc:	52                   	push   edx
c001b7cd:	50                   	push   eax
c001b7ce:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001b7d1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b7d4:	83 c4 20             	add    esp,0x20
c001b7d7:	85 c0                	test   eax,eax
c001b7d9:	74 1f                	je     c001b7fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001b7db:	51                   	push   ecx
c001b7dc:	51                   	push   ecx
c001b7dd:	50                   	push   eax
c001b7de:	68 b9 a5 02 c0       	push   0xc002a5b9
c001b7e3:	e8 99 6f ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001b7e8:	89 34 24             	mov    DWORD PTR [esp],esi
c001b7eb:	e8 05 63 ff ff       	call   c0011af5 <Virt::freeKernelVirtualPages(unsigned long)>
c001b7f0:	83 c4 10             	add    esp,0x10
c001b7f3:	31 c0                	xor    eax,eax
c001b7f5:	e9 7c 01 00 00       	jmp    c001b976 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001b7fa:	e8 2b 15 00 00       	call   c001cd2a <lockScheduler()>
c001b7ff:	e8 7a 42 ff ff       	call   c000fa7e <Phys::allocatePage()>
c001b804:	6a 07                	push   0x7
c001b806:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001b80c:	56                   	push   esi
c001b80d:	50                   	push   eax
c001b80e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b814:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b817:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b81d:	e8 3a 66 ff ff       	call   c0011e5c <VAS::mapPage(unsigned long, unsigned long, int)>
c001b822:	83 c4 0c             	add    esp,0xc
c001b825:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b82b:	6a 00                	push   0x0
c001b82d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b833:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b836:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b83c:	e8 85 64 ff ff       	call   c0011cc6 <VAS::mapOtherVASIn(bool, VAS*)>
c001b841:	58                   	pop    eax
c001b842:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001b848:	5a                   	pop    edx
c001b849:	68 07 04 00 00       	push   0x407
c001b84e:	53                   	push   ebx
c001b84f:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b855:	50                   	push   eax
c001b856:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b85c:	6a 00                	push   0x0
c001b85e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b863:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b866:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b86c:	e8 a5 69 ff ff       	call   c0012216 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b871:	83 c4 1c             	add    esp,0x1c
c001b874:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001b87a:	68 00 10 00 00       	push   0x1000
c001b87f:	50                   	push   eax
c001b880:	56                   	push   esi
c001b881:	e8 cf 4d fe ff       	call   c0000655 <memcpy>
c001b886:	e8 a1 14 00 00       	call   c001cd2c <unlockScheduler()>
c001b88b:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001b891:	83 c4 10             	add    esp,0x10
c001b894:	e9 f5 fe ff ff       	jmp    c001b78e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001b899:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b89c:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001b8a6:	0f 86 bc 00 00 00    	jbe    c001b968 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001b8ac:	e8 79 14 00 00       	call   c001cd2a <lockScheduler()>
c001b8b1:	51                   	push   ecx
c001b8b2:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b8b8:	6a 00                	push   0x0
c001b8ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8c2:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b8c8:	e8 f9 63 ff ff       	call   c0011cc6 <VAS::mapOtherVASIn(bool, VAS*)>
c001b8cd:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001b8d3:	83 c4 10             	add    esp,0x10
c001b8d6:	c1 e8 0c             	shr    eax,0xc
c001b8d9:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001b8e3:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001b8e9:	e8 90 41 ff ff       	call   c000fa7e <Phys::allocatePage()>
c001b8ee:	6a 07                	push   0x7
c001b8f0:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001b8f6:	56                   	push   esi
c001b8f7:	50                   	push   eax
c001b8f8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8fe:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b901:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001b907:	e8 50 65 ff ff       	call   c0011e5c <VAS::mapPage(unsigned long, unsigned long, int)>
c001b90c:	58                   	pop    eax
c001b90d:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001b913:	5a                   	pop    edx
c001b914:	68 07 04 00 00       	push   0x407
c001b919:	53                   	push   ebx
c001b91a:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b920:	50                   	push   eax
c001b921:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b927:	6a 00                	push   0x0
c001b929:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b92e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b931:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b937:	e8 da 68 ff ff       	call   c0012216 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b93c:	83 c4 1c             	add    esp,0x1c
c001b93f:	68 00 10 00 00       	push   0x1000
c001b944:	6a 00                	push   0x0
c001b946:	56                   	push   esi
c001b947:	e8 3f 4d fe ff       	call   c000068b <memset>
c001b94c:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001b952:	83 c4 10             	add    esp,0x10
c001b955:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001b95b:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001b961:	77 86                	ja     c001b8e9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001b963:	e8 c4 13 00 00       	call   c001cd2c <unlockScheduler()>
c001b968:	83 ec 0c             	sub    esp,0xc
c001b96b:	56                   	push   esi
c001b96c:	e8 84 61 ff ff       	call   c0011af5 <Virt::freeKernelVirtualPages(unsigned long)>
c001b971:	83 c4 10             	add    esp,0x10
c001b974:	b0 01                	mov    al,0x1
c001b976:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b979:	5b                   	pop    ebx
c001b97a:	5e                   	pop    esi
c001b97b:	5f                   	pop    edi
c001b97c:	5d                   	pop    ebp
c001b97d:	c3                   	ret    

c001b97e <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001b97e:	55                   	push   ebp
c001b97f:	57                   	push   edi
c001b980:	56                   	push   esi
c001b981:	53                   	push   ebx
c001b982:	83 ec 48             	sub    esp,0x48
c001b985:	68 14 01 00 00       	push   0x114
c001b98a:	e8 45 3b ff ff       	call   c000f4d4 <malloc>
c001b98f:	83 c4 0c             	add    esp,0xc
c001b992:	89 c6                	mov    esi,eax
c001b994:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001b998:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b99c:	50                   	push   eax
c001b99d:	e8 0e 73 ff ff       	call   c0012cb0 <File::File(char const*, Process*)>
c001b9a2:	58                   	pop    eax
c001b9a3:	5a                   	pop    edx
c001b9a4:	6a 01                	push   0x1
c001b9a6:	56                   	push   esi
c001b9a7:	e8 68 73 ff ff       	call   c0012d14 <File::open(FileOpenMode)>
c001b9ac:	83 c4 10             	add    esp,0x10
c001b9af:	85 c0                	test   eax,eax
c001b9b1:	0f 85 47 01 00 00    	jne    c001bafe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9b7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b9bf:	83 ec 0c             	sub    esp,0xc
c001b9c2:	6a 34                	push   0x34
c001b9c4:	e8 0b 3b ff ff       	call   c000f4d4 <malloc>
c001b9c9:	89 c3                	mov    ebx,eax
c001b9cb:	58                   	pop    eax
c001b9cc:	8b 06                	mov    eax,DWORD PTR [esi]
c001b9ce:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001b9d2:	57                   	push   edi
c001b9d3:	53                   	push   ebx
c001b9d4:	6a 00                	push   0x0
c001b9d6:	6a 34                	push   0x34
c001b9d8:	56                   	push   esi
c001b9d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b9dc:	83 c4 20             	add    esp,0x20
c001b9df:	85 c0                	test   eax,eax
c001b9e1:	0f 85 17 01 00 00    	jne    c001bafe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9e7:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001b9ed:	0f 85 0b 01 00 00    	jne    c001bafe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9f6:	85 c0                	test   eax,eax
c001b9f8:	0f 84 00 01 00 00    	je     c001bafe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9fe:	31 d2                	xor    edx,edx
c001ba00:	55                   	push   ebp
c001ba01:	52                   	push   edx
c001ba02:	50                   	push   eax
c001ba03:	56                   	push   esi
c001ba04:	e8 c9 73 ff ff       	call   c0012dd2 <File::seek(unsigned long long)>
c001ba09:	83 c4 10             	add    esp,0x10
c001ba0c:	85 c0                	test   eax,eax
c001ba0e:	0f 85 ea 00 00 00    	jne    c001bafe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba14:	83 ec 0c             	sub    esp,0xc
c001ba17:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ba1a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ba1e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ba22:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ba26:	0f af c2             	imul   eax,edx
c001ba29:	50                   	push   eax
c001ba2a:	e8 a5 3a ff ff       	call   c000f4d4 <malloc>
c001ba2f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ba31:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ba35:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba38:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba3c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ba40:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ba44:	0f af c2             	imul   eax,edx
c001ba47:	99                   	cdq    
c001ba48:	52                   	push   edx
c001ba49:	50                   	push   eax
c001ba4a:	56                   	push   esi
c001ba4b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ba4e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ba51:	83 c4 20             	add    esp,0x20
c001ba54:	85 c0                	test   eax,eax
c001ba56:	0f 84 a2 00 00 00    	je     c001bafe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba5c:	31 d2                	xor    edx,edx
c001ba5e:	51                   	push   ecx
c001ba5f:	52                   	push   edx
c001ba60:	50                   	push   eax
c001ba61:	56                   	push   esi
c001ba62:	e8 6b 73 ff ff       	call   c0012dd2 <File::seek(unsigned long long)>
c001ba67:	83 c4 10             	add    esp,0x10
c001ba6a:	85 c0                	test   eax,eax
c001ba6c:	0f 85 8c 00 00 00    	jne    c001bafe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba72:	83 ec 0c             	sub    esp,0xc
c001ba75:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ba79:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ba7d:	31 ed                	xor    ebp,ebp
c001ba7f:	0f af c2             	imul   eax,edx
c001ba82:	50                   	push   eax
c001ba83:	e8 4c 3a ff ff       	call   c000f4d4 <malloc>
c001ba88:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ba8a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ba8e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba95:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ba99:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ba9d:	0f af c2             	imul   eax,edx
c001baa0:	99                   	cdq    
c001baa1:	52                   	push   edx
c001baa2:	50                   	push   eax
c001baa3:	56                   	push   esi
c001baa4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001baa7:	83 c4 20             	add    esp,0x20
c001baaa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bab2:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001bab6:	0f 86 80 00 00 00    	jbe    c001bb3c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001babc:	0f b7 fd             	movzx  edi,bp
c001babf:	c1 e7 05             	shl    edi,0x5
c001bac2:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001bac6:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001bac9:	75 6b                	jne    c001bb36 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bacb:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001bace:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bad2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001bad5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bad9:	52                   	push   edx
c001bada:	31 d2                	xor    edx,edx
c001badc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001badf:	52                   	push   edx
c001bae0:	50                   	push   eax
c001bae1:	56                   	push   esi
c001bae2:	e8 eb 72 ff ff       	call   c0012dd2 <File::seek(unsigned long long)>
c001bae7:	83 c4 10             	add    esp,0x10
c001baea:	85 c0                	test   eax,eax
c001baec:	74 17                	je     c001bb05 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001baee:	83 ec 0c             	sub    esp,0xc
c001baf1:	68 e4 a5 02 c0       	push   0xc002a5e4
c001baf6:	e8 86 6c ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001bafb:	83 c4 10             	add    esp,0x10
c001bafe:	31 c0                	xor    eax,eax
c001bb00:	e9 87 00 00 00       	jmp    c001bb8c <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001bb05:	83 ec 0c             	sub    esp,0xc
c001bb08:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001bb0b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001bb0e:	50                   	push   eax
c001bb0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bb13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb17:	56                   	push   esi
c001bb18:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001bb1c:	e8 e0 fb ff ff       	call   c001b701 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001bb21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bb25:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001bb29:	83 c4 20             	add    esp,0x20
c001bb2c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bb30:	73 04                	jae    c001bb36 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bb32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb36:	45                   	inc    ebp
c001bb37:	e9 76 ff ff ff       	jmp    c001bab2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001bb3c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001bb40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bb44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb48:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001bb4e:	83 ec 0c             	sub    esp,0xc
c001bb51:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001bb57:	25 00 f0 ff ff       	and    eax,0xfffff000
c001bb5c:	05 00 10 00 00       	add    eax,0x1000
c001bb61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bb64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb68:	e8 77 39 ff ff       	call   c000f4e4 <free>
c001bb6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb70:	e8 6f 39 ff ff       	call   c000f4e4 <free>
c001bb75:	58                   	pop    eax
c001bb76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb7a:	e8 65 39 ff ff       	call   c000f4e4 <free>
c001bb7f:	89 34 24             	mov    DWORD PTR [esp],esi
c001bb82:	e8 eb 71 ff ff       	call   c0012d72 <File::close()>
c001bb87:	83 c4 10             	add    esp,0x10
c001bb8a:	b0 01                	mov    al,0x1
c001bb8c:	83 c4 3c             	add    esp,0x3c
c001bb8f:	5b                   	pop    ebx
c001bb90:	5e                   	pop    esi
c001bb91:	5f                   	pop    edi
c001bb92:	5d                   	pop    ebp
c001bb93:	c3                   	ret    

c001bb94 <Thr::runtimeReferenceHelper()>:
c001bb94:	83 ec 18             	sub    esp,0x18
c001bb97:	68 ec a5 02 c0       	push   0xc002a5ec
c001bb9c:	e8 e0 6b ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001bba1:	fa                   	cli    
c001bba2:	83 c4 10             	add    esp,0x10
c001bba5:	eb fe                	jmp    c001bba5 <Thr::runtimeReferenceHelper()+0x11>

c001bba7 <Thr::getAddressOfKernelSymbol(char const*)>:
c001bba7:	57                   	push   edi
c001bba8:	56                   	push   esi
c001bba9:	53                   	push   ebx
c001bbaa:	31 db                	xor    ebx,ebx
c001bbac:	39 1d 40 de 02 c0    	cmp    DWORD PTR ds:0xc002de40,ebx
c001bbb2:	7e 3c                	jle    c001bbf0 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001bbb4:	8b 34 9d c0 dd 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2240]
c001bbbb:	31 ff                	xor    edi,edi
c001bbbd:	39 3c 9d c0 dc 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2340],edi
c001bbc4:	7e 27                	jle    c001bbed <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001bbc6:	50                   	push   eax
c001bbc7:	50                   	push   eax
c001bbc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bbcc:	8b 06                	mov    eax,DWORD PTR [esi]
c001bbce:	03 04 9d 40 dd 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd22c0]
c001bbd5:	50                   	push   eax
c001bbd6:	e8 a0 4b fe ff       	call   c000077b <strcmp>
c001bbdb:	83 c4 10             	add    esp,0x10
c001bbde:	85 c0                	test   eax,eax
c001bbe0:	75 05                	jne    c001bbe7 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001bbe2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001bbe5:	eb 0b                	jmp    c001bbf2 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001bbe7:	83 c6 10             	add    esi,0x10
c001bbea:	47                   	inc    edi
c001bbeb:	eb d0                	jmp    c001bbbd <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001bbed:	43                   	inc    ebx
c001bbee:	eb bc                	jmp    c001bbac <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001bbf0:	31 c0                	xor    eax,eax
c001bbf2:	5b                   	pop    ebx
c001bbf3:	5e                   	pop    esi
c001bbf4:	5f                   	pop    edi
c001bbf5:	c3                   	ret    

c001bbf6 <Thr::loadKernelSymbolTable(char const*)>:
c001bbf6:	55                   	push   ebp
c001bbf7:	57                   	push   edi
c001bbf8:	56                   	push   esi
c001bbf9:	53                   	push   ebx
c001bbfa:	83 ec 68             	sub    esp,0x68
c001bbfd:	8b 35 94 de 02 c0    	mov    esi,DWORD PTR ds:0xc002de94
c001bc03:	68 14 01 00 00       	push   0x114
c001bc08:	e8 c7 38 ff ff       	call   c000f4d4 <malloc>
c001bc0d:	83 c4 0c             	add    esp,0xc
c001bc10:	89 c3                	mov    ebx,eax
c001bc12:	56                   	push   esi
c001bc13:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001bc17:	50                   	push   eax
c001bc18:	e8 93 70 ff ff       	call   c0012cb0 <File::File(char const*, Process*)>
c001bc1d:	5e                   	pop    esi
c001bc1e:	5f                   	pop    edi
c001bc1f:	6a 01                	push   0x1
c001bc21:	53                   	push   ebx
c001bc22:	e8 ed 70 ff ff       	call   c0012d14 <File::open(FileOpenMode)>
c001bc27:	83 c4 10             	add    esp,0x10
c001bc2a:	31 d2                	xor    edx,edx
c001bc2c:	85 c0                	test   eax,eax
c001bc2e:	0f 85 74 02 00 00    	jne    c001bea8 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bc34:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001bc3c:	83 ec 0c             	sub    esp,0xc
c001bc3f:	6a 34                	push   0x34
c001bc41:	e8 8e 38 ff ff       	call   c000f4d4 <malloc>
c001bc46:	59                   	pop    ecx
c001bc47:	89 c7                	mov    edi,eax
c001bc49:	8d 74 24 34          	lea    esi,[esp+0x34]
c001bc4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc4f:	56                   	push   esi
c001bc50:	57                   	push   edi
c001bc51:	6a 00                	push   0x0
c001bc53:	6a 34                	push   0x34
c001bc55:	53                   	push   ebx
c001bc56:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bc59:	83 c4 20             	add    esp,0x20
c001bc5c:	85 c0                	test   eax,eax
c001bc5e:	74 17                	je     c001bc77 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001bc60:	83 ec 0c             	sub    esp,0xc
c001bc63:	68 0e a6 02 c0       	push   0xc002a60e
c001bc68:	e8 2e dc ff ff       	call   c001989b <Krnl::panic(char const*)>
c001bc6d:	83 c4 10             	add    esp,0x10
c001bc70:	31 d2                	xor    edx,edx
c001bc72:	e9 31 02 00 00       	jmp    c001bea8 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bc77:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bc7d:	75 e1                	jne    c001bc60 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bc7f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bc82:	85 c0                	test   eax,eax
c001bc84:	74 da                	je     c001bc60 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bc86:	52                   	push   edx
c001bc87:	31 d2                	xor    edx,edx
c001bc89:	52                   	push   edx
c001bc8a:	50                   	push   eax
c001bc8b:	53                   	push   ebx
c001bc8c:	e8 41 71 ff ff       	call   c0012dd2 <File::seek(unsigned long long)>
c001bc91:	83 c4 10             	add    esp,0x10
c001bc94:	85 c0                	test   eax,eax
c001bc96:	75 c8                	jne    c001bc60 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bc98:	83 ec 0c             	sub    esp,0xc
c001bc9b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bc9f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bca3:	31 ed                	xor    ebp,ebp
c001bca5:	0f af c2             	imul   eax,edx
c001bca8:	50                   	push   eax
c001bca9:	e8 26 38 ff ff       	call   c000f4d4 <malloc>
c001bcae:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001bcb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bcb4:	89 34 24             	mov    DWORD PTR [esp],esi
c001bcb7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bcbb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bcbf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bcc3:	0f af c2             	imul   eax,edx
c001bcc6:	99                   	cdq    
c001bcc7:	52                   	push   edx
c001bcc8:	50                   	push   eax
c001bcc9:	53                   	push   ebx
c001bcca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bccd:	83 c4 20             	add    esp,0x20
c001bcd0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001bcd8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bce0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bce8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bcf0:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001bcf4:	0f 86 aa 00 00 00    	jbe    c001bda4 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001bcfa:	0f b7 f5             	movzx  esi,bp
c001bcfd:	6b f6 28             	imul   esi,esi,0x28
c001bd00:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001bd04:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bd07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd0b:	50                   	push   eax
c001bd0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bd10:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001bd14:	8b 16                	mov    edx,DWORD PTR [esi]
c001bd16:	6b c0 28             	imul   eax,eax,0x28
c001bd19:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001bd1d:	89 d0                	mov    eax,edx
c001bd1f:	31 d2                	xor    edx,edx
c001bd21:	52                   	push   edx
c001bd22:	50                   	push   eax
c001bd23:	53                   	push   ebx
c001bd24:	e8 a9 70 ff ff       	call   c0012dd2 <File::seek(unsigned long long)>
c001bd29:	83 c4 0c             	add    esp,0xc
c001bd2c:	6a 20                	push   0x20
c001bd2e:	6a 00                	push   0x0
c001bd30:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bd34:	52                   	push   edx
c001bd35:	e8 51 49 fe ff       	call   c000068b <memset>
c001bd3a:	58                   	pop    eax
c001bd3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd3d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001bd41:	51                   	push   ecx
c001bd42:	8d 54 24 40          	lea    edx,[esp+0x40]
c001bd46:	52                   	push   edx
c001bd47:	6a 00                	push   0x0
c001bd49:	6a 1f                	push   0x1f
c001bd4b:	53                   	push   ebx
c001bd4c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bd4f:	83 c4 18             	add    esp,0x18
c001bd52:	68 25 a6 02 c0       	push   0xc002a625
c001bd57:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bd5b:	52                   	push   edx
c001bd5c:	e8 1a 4a fe ff       	call   c000077b <strcmp>
c001bd61:	83 c4 10             	add    esp,0x10
c001bd64:	85 c0                	test   eax,eax
c001bd66:	75 0f                	jne    c001bd77 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001bd68:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bd6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bd6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd77:	50                   	push   eax
c001bd78:	50                   	push   eax
c001bd79:	68 2d a6 02 c0       	push   0xc002a62d
c001bd7e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001bd82:	50                   	push   eax
c001bd83:	e8 f3 49 fe ff       	call   c000077b <strcmp>
c001bd88:	83 c4 10             	add    esp,0x10
c001bd8b:	85 c0                	test   eax,eax
c001bd8d:	75 0f                	jne    c001bd9e <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001bd8f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bd92:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bd96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bd9e:	45                   	inc    ebp
c001bd9f:	e9 4c ff ff ff       	jmp    c001bcf0 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001bda4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bda9:	75 10                	jne    c001bdbb <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001bdab:	83 ec 0c             	sub    esp,0xc
c001bdae:	68 35 a6 02 c0       	push   0xc002a635
c001bdb3:	e8 e3 da ff ff       	call   c001989b <Krnl::panic(char const*)>
c001bdb8:	83 c4 10             	add    esp,0x10
c001bdbb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001bdc0:	75 10                	jne    c001bdd2 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001bdc2:	83 ec 0c             	sub    esp,0xc
c001bdc5:	68 35 a6 02 c0       	push   0xc002a635
c001bdca:	e8 cc da ff ff       	call   c001989b <Krnl::panic(char const*)>
c001bdcf:	83 c4 10             	add    esp,0x10
c001bdd2:	31 d2                	xor    edx,edx
c001bdd4:	50                   	push   eax
c001bdd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdd9:	52                   	push   edx
c001bdda:	50                   	push   eax
c001bddb:	53                   	push   ebx
c001bddc:	e8 f1 6f ff ff       	call   c0012dd2 <File::seek(unsigned long long)>
c001bde1:	5a                   	pop    edx
c001bde2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bde6:	e8 e9 36 ff ff       	call   c000f4d4 <malloc>
c001bdeb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bdef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bdf3:	31 c9                	xor    ecx,ecx
c001bdf5:	5e                   	pop    esi
c001bdf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdf8:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001bdfc:	55                   	push   ebp
c001bdfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be01:	51                   	push   ecx
c001be02:	52                   	push   edx
c001be03:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001be07:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001be0b:	53                   	push   ebx
c001be0c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001be0f:	83 c4 14             	add    esp,0x14
c001be12:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001be16:	e8 b9 36 ff ff       	call   c000f4d4 <malloc>
c001be1b:	89 c6                	mov    esi,eax
c001be1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001be22:	56                   	push   esi
c001be23:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001be27:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001be2b:	51                   	push   ecx
c001be2c:	52                   	push   edx
c001be2d:	53                   	push   ebx
c001be2e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001be31:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001be35:	8b 15 40 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de40
c001be3b:	83 c4 1c             	add    esp,0x1c
c001be3e:	c1 e8 04             	shr    eax,0x4
c001be41:	89 04 95 c0 dc 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2340],eax
c001be48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be4c:	31 d2                	xor    edx,edx
c001be4e:	52                   	push   edx
c001be4f:	50                   	push   eax
c001be50:	53                   	push   ebx
c001be51:	e8 7c 6f ff ff       	call   c0012dd2 <File::seek(unsigned long long)>
c001be56:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001be58:	31 d2                	xor    edx,edx
c001be5a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001be5d:	56                   	push   esi
c001be5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001be62:	52                   	push   edx
c001be63:	50                   	push   eax
c001be64:	53                   	push   ebx
c001be65:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001be68:	83 c4 14             	add    esp,0x14
c001be6b:	53                   	push   ebx
c001be6c:	e8 01 6f ff ff       	call   c0012d72 <File::close()>
c001be71:	5d                   	pop    ebp
c001be72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001be76:	e8 69 36 ff ff       	call   c000f4e4 <free>
c001be7b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001be7e:	e8 61 36 ff ff       	call   c000f4e4 <free>
c001be83:	a1 40 de 02 c0       	mov    eax,ds:0xc002de40
c001be88:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001be8c:	8d 50 01             	lea    edx,[eax+0x1]
c001be8f:	89 0c 85 c0 dd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2240],ecx
c001be96:	89 15 40 de 02 c0    	mov    DWORD PTR ds:0xc002de40,edx
c001be9c:	89 34 85 40 dd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd22c0],esi
c001bea3:	83 c4 10             	add    esp,0x10
c001bea6:	b2 01                	mov    dl,0x1
c001bea8:	83 c4 5c             	add    esp,0x5c
c001beab:	88 d0                	mov    al,dl
c001bead:	5b                   	pop    ebx
c001beae:	5e                   	pop    esi
c001beaf:	5f                   	pop    edi
c001beb0:	5d                   	pop    ebp
c001beb1:	c3                   	ret    

c001beb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001beb2:	55                   	push   ebp
c001beb3:	57                   	push   edi
c001beb4:	56                   	push   esi
c001beb5:	53                   	push   ebx
c001beb6:	81 ec 68 03 00 00    	sub    esp,0x368
c001bebc:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001bec3:	8b 1d 94 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de94
c001bec9:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001becd:	68 14 01 00 00       	push   0x114
c001bed2:	e8 fd 35 ff ff       	call   c000f4d4 <malloc>
c001bed7:	83 c4 0c             	add    esp,0xc
c001beda:	89 c5                	mov    ebp,eax
c001bedc:	53                   	push   ebx
c001bedd:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001bee4:	50                   	push   eax
c001bee5:	e8 c6 6d ff ff       	call   c0012cb0 <File::File(char const*, Process*)>
c001beea:	58                   	pop    eax
c001beeb:	5a                   	pop    edx
c001beec:	6a 01                	push   0x1
c001beee:	55                   	push   ebp
c001beef:	e8 20 6e ff ff       	call   c0012d14 <File::open(FileOpenMode)>
c001bef4:	83 c4 10             	add    esp,0x10
c001bef7:	85 c0                	test   eax,eax
c001bef9:	0f 85 f2 06 00 00    	jne    c001c5f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001beff:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bf07:	83 ec 0c             	sub    esp,0xc
c001bf0a:	6a 34                	push   0x34
c001bf0c:	e8 c3 35 ff ff       	call   c000f4d4 <malloc>
c001bf11:	89 c7                	mov    edi,eax
c001bf13:	58                   	pop    eax
c001bf14:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bf17:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001bf1b:	53                   	push   ebx
c001bf1c:	57                   	push   edi
c001bf1d:	6a 00                	push   0x0
c001bf1f:	6a 34                	push   0x34
c001bf21:	55                   	push   ebp
c001bf22:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bf25:	83 c4 20             	add    esp,0x20
c001bf28:	85 c0                	test   eax,eax
c001bf2a:	0f 85 c1 06 00 00    	jne    c001c5f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf30:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bf36:	0f 85 b5 06 00 00    	jne    c001c5f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf3c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bf3f:	85 c0                	test   eax,eax
c001bf41:	0f 84 aa 06 00 00    	je     c001c5f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf47:	31 d2                	xor    edx,edx
c001bf49:	56                   	push   esi
c001bf4a:	52                   	push   edx
c001bf4b:	50                   	push   eax
c001bf4c:	55                   	push   ebp
c001bf4d:	e8 80 6e ff ff       	call   c0012dd2 <File::seek(unsigned long long)>
c001bf52:	83 c4 10             	add    esp,0x10
c001bf55:	85 c0                	test   eax,eax
c001bf57:	0f 85 94 06 00 00    	jne    c001c5f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf5d:	83 ec 0c             	sub    esp,0xc
c001bf60:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001bf63:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bf67:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001bf6b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bf6f:	0f af c2             	imul   eax,edx
c001bf72:	50                   	push   eax
c001bf73:	e8 5c 35 ff ff       	call   c000f4d4 <malloc>
c001bf78:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bf7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bf7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf86:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bf8a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bf8e:	0f af c2             	imul   eax,edx
c001bf91:	99                   	cdq    
c001bf92:	52                   	push   edx
c001bf93:	50                   	push   eax
c001bf94:	55                   	push   ebp
c001bf95:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bf98:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001bf9b:	83 c4 20             	add    esp,0x20
c001bf9e:	85 c0                	test   eax,eax
c001bfa0:	0f 84 4b 06 00 00    	je     c001c5f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bfa6:	31 d2                	xor    edx,edx
c001bfa8:	51                   	push   ecx
c001bfa9:	52                   	push   edx
c001bfaa:	50                   	push   eax
c001bfab:	55                   	push   ebp
c001bfac:	e8 21 6e ff ff       	call   c0012dd2 <File::seek(unsigned long long)>
c001bfb1:	83 c4 10             	add    esp,0x10
c001bfb4:	85 c0                	test   eax,eax
c001bfb6:	0f 85 35 06 00 00    	jne    c001c5f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bfbc:	83 ec 0c             	sub    esp,0xc
c001bfbf:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001bfc3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001bfc7:	31 f6                	xor    esi,esi
c001bfc9:	0f af c2             	imul   eax,edx
c001bfcc:	50                   	push   eax
c001bfcd:	e8 02 35 ff ff       	call   c000f4d4 <malloc>
c001bfd2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bfd5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bfd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfe0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001bfe4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001bfe8:	0f af c2             	imul   eax,edx
c001bfeb:	99                   	cdq    
c001bfec:	52                   	push   edx
c001bfed:	50                   	push   eax
c001bfee:	55                   	push   ebp
c001bfef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bff2:	83 c4 20             	add    esp,0x20
c001bff5:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001bff9:	0f 86 8a 00 00 00    	jbe    c001c089 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001bfff:	0f b7 de             	movzx  ebx,si
c001c002:	c1 e3 05             	shl    ebx,0x5
c001c005:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001c009:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c00c:	75 75                	jne    c001c083 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c00e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c011:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c015:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c018:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c01c:	52                   	push   edx
c001c01d:	31 d2                	xor    edx,edx
c001c01f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c022:	52                   	push   edx
c001c023:	50                   	push   eax
c001c024:	55                   	push   ebp
c001c025:	e8 a8 6d ff ff       	call   c0012dd2 <File::seek(unsigned long long)>
c001c02a:	83 c4 10             	add    esp,0x10
c001c02d:	85 c0                	test   eax,eax
c001c02f:	0f 85 bc 05 00 00    	jne    c001c5f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c035:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c03c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c03f:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001c043:	31 d2                	xor    edx,edx
c001c045:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c049:	83 ec 0c             	sub    esp,0xc
c001c04c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c050:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c057:	50                   	push   eax
c001c058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c05c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c060:	52                   	push   edx
c001c061:	50                   	push   eax
c001c062:	55                   	push   ebp
c001c063:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c066:	83 c4 1c             	add    esp,0x1c
c001c069:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c06c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c06f:	50                   	push   eax
c001c070:	6a 00                	push   0x0
c001c072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c076:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001c07a:	50                   	push   eax
c001c07b:	e8 0b 46 fe ff       	call   c000068b <memset>
c001c080:	83 c4 10             	add    esp,0x10
c001c083:	46                   	inc    esi
c001c084:	e9 6c ff ff ff       	jmp    c001bff5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c089:	31 db                	xor    ebx,ebx
c001c08b:	50                   	push   eax
c001c08c:	68 00 01 00 00       	push   0x100
c001c091:	6a 00                	push   0x0
c001c093:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c097:	50                   	push   eax
c001c098:	e8 ee 45 fe ff       	call   c000068b <memset>
c001c09d:	83 c4 0c             	add    esp,0xc
c001c0a0:	68 00 01 00 00       	push   0x100
c001c0a5:	6a 00                	push   0x0
c001c0a7:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c0ae:	50                   	push   eax
c001c0af:	e8 d7 45 fe ff       	call   c000068b <memset>
c001c0b4:	83 c4 10             	add    esp,0x10
c001c0b7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c0bf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c0c7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c0cf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c0d7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c0df:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c0e3:	0f 86 30 01 00 00    	jbe    c001c219 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c0e9:	0f b7 f3             	movzx  esi,bx
c001c0ec:	6b f6 28             	imul   esi,esi,0x28
c001c0ef:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001c0f3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c0f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c0fa:	50                   	push   eax
c001c0fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0ff:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c103:	8b 06                	mov    eax,DWORD PTR [esi]
c001c105:	6b d2 28             	imul   edx,edx,0x28
c001c108:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c10c:	31 d2                	xor    edx,edx
c001c10e:	52                   	push   edx
c001c10f:	50                   	push   eax
c001c110:	55                   	push   ebp
c001c111:	e8 bc 6c ff ff       	call   c0012dd2 <File::seek(unsigned long long)>
c001c116:	83 c4 0c             	add    esp,0xc
c001c119:	6a 20                	push   0x20
c001c11b:	6a 00                	push   0x0
c001c11d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c124:	51                   	push   ecx
c001c125:	e8 61 45 fe ff       	call   c000068b <memset>
c001c12a:	58                   	pop    eax
c001c12b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c12e:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c132:	52                   	push   edx
c001c133:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c13a:	51                   	push   ecx
c001c13b:	6a 00                	push   0x0
c001c13d:	6a 1f                	push   0x1f
c001c13f:	55                   	push   ebp
c001c140:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c143:	83 c4 1c             	add    esp,0x1c
c001c146:	6a 09                	push   0x9
c001c148:	68 4f a6 02 c0       	push   0xc002a64f
c001c14d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c154:	51                   	push   ecx
c001c155:	e8 98 44 fe ff       	call   c00005f2 <memcmp>
c001c15a:	83 c4 10             	add    esp,0x10
c001c15d:	85 c0                	test   eax,eax
c001c15f:	75 21                	jne    c001c182 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c161:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c165:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c169:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c16d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c171:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c174:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c17b:	89 c8                	mov    eax,ecx
c001c17d:	40                   	inc    eax
c001c17e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c182:	50                   	push   eax
c001c183:	6a 09                	push   0x9
c001c185:	68 59 a6 02 c0       	push   0xc002a659
c001c18a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c191:	50                   	push   eax
c001c192:	e8 5b 44 fe ff       	call   c00005f2 <memcmp>
c001c197:	83 c4 10             	add    esp,0x10
c001c19a:	85 c0                	test   eax,eax
c001c19c:	75 21                	jne    c001c1bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c19e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1a2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c1a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c1aa:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c1ae:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c1b1:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c1b8:	89 c8                	mov    eax,ecx
c001c1ba:	40                   	inc    eax
c001c1bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c1bf:	50                   	push   eax
c001c1c0:	50                   	push   eax
c001c1c1:	68 25 a6 02 c0       	push   0xc002a625
c001c1c6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c1cd:	50                   	push   eax
c001c1ce:	e8 a8 45 fe ff       	call   c000077b <strcmp>
c001c1d3:	83 c4 10             	add    esp,0x10
c001c1d6:	85 c0                	test   eax,eax
c001c1d8:	75 0f                	jne    c001c1e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c1da:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c1dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c1e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c1e9:	50                   	push   eax
c001c1ea:	50                   	push   eax
c001c1eb:	68 2d a6 02 c0       	push   0xc002a62d
c001c1f0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c1f7:	50                   	push   eax
c001c1f8:	e8 7e 45 fe ff       	call   c000077b <strcmp>
c001c1fd:	83 c4 10             	add    esp,0x10
c001c200:	85 c0                	test   eax,eax
c001c202:	75 0f                	jne    c001c213 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c204:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c207:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c20b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c20f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c213:	43                   	inc    ebx
c001c214:	e9 c6 fe ff ff       	jmp    c001c0df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c219:	31 d2                	xor    edx,edx
c001c21b:	50                   	push   eax
c001c21c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c220:	52                   	push   edx
c001c221:	50                   	push   eax
c001c222:	55                   	push   ebp
c001c223:	e8 aa 6b ff ff       	call   c0012dd2 <File::seek(unsigned long long)>
c001c228:	5a                   	pop    edx
c001c229:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c22d:	e8 a2 32 ff ff       	call   c000f4d4 <malloc>
c001c232:	31 d2                	xor    edx,edx
c001c234:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001c238:	59                   	pop    ecx
c001c239:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c23c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c240:	53                   	push   ebx
c001c241:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c245:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c249:	52                   	push   edx
c001c24a:	50                   	push   eax
c001c24b:	55                   	push   ebp
c001c24c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c24f:	83 c4 14             	add    esp,0x14
c001c252:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c256:	e8 79 32 ff ff       	call   c000f4d4 <malloc>
c001c25b:	31 d2                	xor    edx,edx
c001c25d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c261:	83 c4 0c             	add    esp,0xc
c001c264:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c268:	52                   	push   edx
c001c269:	50                   	push   eax
c001c26a:	55                   	push   ebp
c001c26b:	e8 62 6b ff ff       	call   c0012dd2 <File::seek(unsigned long long)>
c001c270:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c273:	31 d2                	xor    edx,edx
c001c275:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c278:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c27c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c280:	52                   	push   edx
c001c281:	50                   	push   eax
c001c282:	55                   	push   ebp
c001c283:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c286:	83 c4 20             	add    esp,0x20
c001c289:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c291:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c295:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001c299:	0f 84 56 03 00 00    	je     c001c5f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001c29f:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001c2a6:	31 d2                	xor    edx,edx
c001c2a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2ac:	c1 e8 03             	shr    eax,0x3
c001c2af:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c2b3:	50                   	push   eax
c001c2b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c2b8:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c2bc:	52                   	push   edx
c001c2bd:	50                   	push   eax
c001c2be:	55                   	push   ebp
c001c2bf:	e8 0e 6b ff ff       	call   c0012dd2 <File::seek(unsigned long long)>
c001c2c4:	58                   	pop    eax
c001c2c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c2c9:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c2d0:	e8 ff 31 ff ff       	call   c000f4d4 <malloc>
c001c2d5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c2d8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c2dc:	31 d2                	xor    edx,edx
c001c2de:	58                   	pop    eax
c001c2df:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c2e3:	50                   	push   eax
c001c2e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c2e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c2ec:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c2f3:	52                   	push   edx
c001c2f4:	50                   	push   eax
c001c2f5:	55                   	push   ebp
c001c2f6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c2f9:	83 c4 20             	add    esp,0x20
c001c2fc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c304:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001c308:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001c30c:	0f 8d c7 02 00 00    	jge    c001c5d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001c312:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c316:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c31a:	31 db                	xor    ebx,ebx
c001c31c:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001c31f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c323:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c327:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001c32b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c32f:	c1 e8 08             	shr    eax,0x8
c001c332:	89 c6                	mov    esi,eax
c001c334:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c338:	c1 e6 04             	shl    esi,0x4
c001c33b:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001c33f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c346:	85 c0                	test   eax,eax
c001c348:	0f 85 17 01 00 00    	jne    c001c465 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c34e:	83 ec 0c             	sub    esp,0xc
c001c351:	b3 01                	mov    bl,0x1
c001c353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c357:	03 06                	add    eax,DWORD PTR [esi]
c001c359:	50                   	push   eax
c001c35a:	e8 48 f8 ff ff       	call   c001bba7 <Thr::getAddressOfKernelSymbol(char const*)>
c001c35f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c363:	83 c4 10             	add    esp,0x10
c001c366:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c36b:	0f 85 f4 00 00 00    	jne    c001c465 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c371:	50                   	push   eax
c001c372:	50                   	push   eax
c001c373:	68 63 a6 02 c0       	push   0xc002a663
c001c378:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c37c:	03 06                	add    eax,DWORD PTR [esi]
c001c37e:	50                   	push   eax
c001c37f:	e8 f7 43 fe ff       	call   c000077b <strcmp>
c001c384:	83 c4 10             	add    esp,0x10
c001c387:	85 c0                	test   eax,eax
c001c389:	75 0a                	jne    c001c395 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001c38b:	b8 ac 53 02 c0       	mov    eax,0xc00253ac
c001c390:	e9 ca 00 00 00       	jmp    c001c45f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c395:	50                   	push   eax
c001c396:	50                   	push   eax
c001c397:	68 6d a6 02 c0       	push   0xc002a66d
c001c39c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3a0:	03 06                	add    eax,DWORD PTR [esi]
c001c3a2:	50                   	push   eax
c001c3a3:	e8 d3 43 fe ff       	call   c000077b <strcmp>
c001c3a8:	83 c4 10             	add    esp,0x10
c001c3ab:	85 c0                	test   eax,eax
c001c3ad:	75 0a                	jne    c001c3b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001c3af:	b8 e0 50 02 c0       	mov    eax,0xc00250e0
c001c3b4:	e9 a6 00 00 00       	jmp    c001c45f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c3b9:	53                   	push   ebx
c001c3ba:	53                   	push   ebx
c001c3bb:	68 76 a6 02 c0       	push   0xc002a676
c001c3c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3c4:	03 06                	add    eax,DWORD PTR [esi]
c001c3c6:	50                   	push   eax
c001c3c7:	e8 af 43 fe ff       	call   c000077b <strcmp>
c001c3cc:	83 c4 10             	add    esp,0x10
c001c3cf:	85 c0                	test   eax,eax
c001c3d1:	75 0a                	jne    c001c3dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001c3d3:	b8 ac 54 02 c0       	mov    eax,0xc00254ac
c001c3d8:	e9 82 00 00 00       	jmp    c001c45f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c3dd:	51                   	push   ecx
c001c3de:	51                   	push   ecx
c001c3df:	68 80 a6 02 c0       	push   0xc002a680
c001c3e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3e8:	03 06                	add    eax,DWORD PTR [esi]
c001c3ea:	50                   	push   eax
c001c3eb:	e8 8b 43 fe ff       	call   c000077b <strcmp>
c001c3f0:	83 c4 10             	add    esp,0x10
c001c3f3:	85 c0                	test   eax,eax
c001c3f5:	74 63                	je     c001c45a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001c3f7:	50                   	push   eax
c001c3f8:	50                   	push   eax
c001c3f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3fd:	03 06                	add    eax,DWORD PTR [esi]
c001c3ff:	50                   	push   eax
c001c400:	68 89 a6 02 c0       	push   0xc002a689
c001c405:	e8 77 63 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001c40a:	58                   	pop    eax
c001c40b:	5a                   	pop    edx
c001c40c:	68 a3 a6 02 c0       	push   0xc002a6a3
c001c411:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001c418:	53                   	push   ebx
c001c419:	e8 0c 43 fe ff       	call   c000072a <strcpy>
c001c41e:	59                   	pop    ecx
c001c41f:	58                   	pop    eax
c001c420:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c424:	03 06                	add    eax,DWORD PTR [esi]
c001c426:	50                   	push   eax
c001c427:	53                   	push   ebx
c001c428:	e8 b4 43 fe ff       	call   c00007e1 <strcat>
c001c42d:	58                   	pop    eax
c001c42e:	5a                   	pop    edx
c001c42f:	68 39 a7 02 c0       	push   0xc002a739
c001c434:	53                   	push   ebx
c001c435:	e8 a7 43 fe ff       	call   c00007e1 <strcat>
c001c43a:	83 c4 10             	add    esp,0x10
c001c43d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c442:	0f 84 4b 01 00 00    	je     c001c593 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c448:	83 ec 0c             	sub    esp,0xc
c001c44b:	53                   	push   ebx
c001c44c:	e8 4a d4 ff ff       	call   c001989b <Krnl::panic(char const*)>
c001c451:	83 c4 10             	add    esp,0x10
c001c454:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001c458:	eb 0b                	jmp    c001c465 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c45a:	b8 2c 52 02 c0       	mov    eax,0xc002522c
c001c45f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c463:	b3 01                	mov    bl,0x1
c001c465:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001c46a:	0f 85 80 00 00 00    	jne    c001c4f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001c470:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c477:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c47b:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001c47f:	01 ce                	add    esi,ecx
c001c481:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c489:	8b 06                	mov    eax,DWORD PTR [esi]
c001c48b:	0f 94 c2             	sete   dl
c001c48e:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c496:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001c49b:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001c49f:	84 db                	test   bl,bl
c001c4a1:	74 31                	je     c001c4d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001c4a3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c4a7:	01 c3                	add    ebx,eax
c001c4a9:	84 d2                	test   dl,dl
c001c4ab:	75 0a                	jne    c001c4b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001c4ad:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4b1:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c4b5:	76 32                	jbe    c001c4e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4b7:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c4bc:	0f 84 d1 00 00 00    	je     c001c593 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c4c2:	83 ec 0c             	sub    esp,0xc
c001c4c5:	68 ba a6 02 c0       	push   0xc002a6ba
c001c4ca:	e8 cc d3 ff ff       	call   c001989b <Krnl::panic(char const*)>
c001c4cf:	83 c4 10             	add    esp,0x10
c001c4d2:	eb 15                	jmp    c001c4e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4d4:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001c4d7:	84 d2                	test   dl,dl
c001c4d9:	75 0e                	jne    c001c4e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4db:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4df:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c4e3:	77 04                	ja     c001c4e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4e5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001c4e9:	89 1e                	mov    DWORD PTR [esi],ebx
c001c4eb:	e9 e0 00 00 00       	jmp    c001c5d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c4f0:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001c4f5:	75 6e                	jne    c001c565 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001c4f7:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001c4fe:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001c502:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001c506:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c50e:	74 17                	je     c001c527 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c510:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c518:	74 0d                	je     c001c527 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c51a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c51e:	83 e8 04             	sub    eax,0x4
c001c521:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c525:	76 17                	jbe    c001c53e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001c527:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c52c:	74 65                	je     c001c593 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c52e:	83 ec 0c             	sub    esp,0xc
c001c531:	68 d6 a6 02 c0       	push   0xc002a6d6
c001c536:	e8 60 d3 ff ff       	call   c001989b <Krnl::panic(char const*)>
c001c53b:	83 c4 10             	add    esp,0x10
c001c53e:	8b 16                	mov    edx,DWORD PTR [esi]
c001c540:	84 db                	test   bl,bl
c001c542:	74 13                	je     c001c557 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001c544:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c548:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001c54f:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c553:	01 d0                	add    eax,edx
c001c555:	eb 06                	jmp    c001c55d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001c557:	89 d0                	mov    eax,edx
c001c559:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c55d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c561:	89 06                	mov    DWORD PTR [esi],eax
c001c563:	eb 6b                	jmp    c001c5d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c565:	50                   	push   eax
c001c566:	50                   	push   eax
c001c567:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001c56c:	50                   	push   eax
c001c56d:	68 f2 a6 02 c0       	push   0xc002a6f2
c001c572:	e8 0a 62 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001c577:	83 c4 10             	add    esp,0x10
c001c57a:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c57f:	74 12                	je     c001c593 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c581:	83 ec 0c             	sub    esp,0xc
c001c584:	68 fd a6 02 c0       	push   0xc002a6fd
c001c589:	e8 0d d3 ff ff       	call   c001989b <Krnl::panic(char const*)>
c001c58e:	83 c4 10             	add    esp,0x10
c001c591:	eb 3d                	jmp    c001c5d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c593:	83 ec 0c             	sub    esp,0xc
c001c596:	55                   	push   ebp
c001c597:	e8 d6 67 ff ff       	call   c0012d72 <File::close()>
c001c59c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c59f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c5a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c5a5:	59                   	pop    ecx
c001c5a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5aa:	e8 35 2f ff ff       	call   c000f4e4 <free>
c001c5af:	5b                   	pop    ebx
c001c5b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c5b4:	e8 2b 2f ff ff       	call   c000f4e4 <free>
c001c5b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c5bc:	e8 23 2f ff ff       	call   c000f4e4 <free>
c001c5c1:	5e                   	pop    esi
c001c5c2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c5c6:	e8 19 2f ff ff       	call   c000f4e4 <free>
c001c5cb:	83 c4 10             	add    esp,0x10
c001c5ce:	eb 21                	jmp    c001c5f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c5d0:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001c5d4:	e9 2b fd ff ff       	jmp    c001c304 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001c5d9:	83 ec 0c             	sub    esp,0xc
c001c5dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5e0:	e8 ff 2e ff ff       	call   c000f4e4 <free>
c001c5e5:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001c5e9:	83 c4 10             	add    esp,0x10
c001c5ec:	e9 a0 fc ff ff       	jmp    c001c291 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001c5f1:	31 c0                	xor    eax,eax
c001c5f3:	eb 33                	jmp    c001c628 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001c5f5:	83 ec 0c             	sub    esp,0xc
c001c5f8:	55                   	push   ebp
c001c5f9:	e8 74 67 ff ff       	call   c0012d72 <File::close()>
c001c5fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c601:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c604:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c607:	58                   	pop    eax
c001c608:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c60c:	e8 d3 2e ff ff       	call   c000f4e4 <free>
c001c611:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c614:	e8 cb 2e ff ff       	call   c000f4e4 <free>
c001c619:	5a                   	pop    edx
c001c61a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c61e:	e8 c1 2e ff ff       	call   c000f4e4 <free>
c001c623:	83 c4 10             	add    esp,0x10
c001c626:	b0 01                	mov    al,0x1
c001c628:	81 c4 5c 03 00 00    	add    esp,0x35c
c001c62e:	5b                   	pop    ebx
c001c62f:	5e                   	pop    esi
c001c630:	5f                   	pop    edi
c001c631:	5d                   	pop    ebp
c001c632:	c3                   	ret    

c001c633 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001c633:	56                   	push   esi
c001c634:	31 d2                	xor    edx,edx
c001c636:	53                   	push   ebx
c001c637:	8b 1d a0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6a0
c001c63d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c641:	39 d3                	cmp    ebx,edx
c001c643:	7e 1b                	jle    c001c660 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001c645:	8b 04 95 c0 d8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2740]
c001c64c:	39 c8                	cmp    eax,ecx
c001c64e:	77 0d                	ja     c001c65d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001c650:	8b 34 95 c0 d6 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd2940]
c001c657:	01 c6                	add    esi,eax
c001c659:	39 ce                	cmp    esi,ecx
c001c65b:	77 05                	ja     c001c662 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001c65d:	42                   	inc    edx
c001c65e:	eb e1                	jmp    c001c641 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001c660:	31 c0                	xor    eax,eax
c001c662:	5b                   	pop    ebx
c001c663:	5e                   	pop    esi
c001c664:	c3                   	ret    

c001c665 <Thr::getDriverNameFromAddress(unsigned long)>:
c001c665:	53                   	push   ebx
c001c666:	31 c0                	xor    eax,eax
c001c668:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c66c:	8b 1d a0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6a0
c001c672:	39 c3                	cmp    ebx,eax
c001c674:	7e 22                	jle    c001c698 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001c676:	8b 14 85 c0 d8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2740]
c001c67d:	39 ca                	cmp    edx,ecx
c001c67f:	77 14                	ja     c001c695 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c681:	03 14 85 c0 d6 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd2940]
c001c688:	39 ca                	cmp    edx,ecx
c001c68a:	76 09                	jbe    c001c695 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c68c:	8b 04 85 c0 da 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2540]
c001c693:	eb 05                	jmp    c001c69a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001c695:	40                   	inc    eax
c001c696:	eb da                	jmp    c001c672 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001c698:	31 c0                	xor    eax,eax
c001c69a:	5b                   	pop    ebx
c001c69b:	c3                   	ret    

c001c69c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001c69c:	53                   	push   ebx
c001c69d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c6a1:	53                   	push   ebx
c001c6a2:	e8 8c ff ff ff       	call   c001c633 <Thr::getDriverBaseFromAddress(unsigned long)>
c001c6a7:	5a                   	pop    edx
c001c6a8:	31 d2                	xor    edx,edx
c001c6aa:	85 c0                	test   eax,eax
c001c6ac:	74 04                	je     c001c6b2 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001c6ae:	89 da                	mov    edx,ebx
c001c6b0:	29 c2                	sub    edx,eax
c001c6b2:	89 d0                	mov    eax,edx
c001c6b4:	5b                   	pop    ebx
c001c6b5:	c3                   	ret    

c001c6b6 <Thr::loadDLL(char const*, bool)>:
c001c6b6:	55                   	push   ebp
c001c6b7:	57                   	push   edi
c001c6b8:	56                   	push   esi
c001c6b9:	53                   	push   ebx
c001c6ba:	81 ec 34 01 00 00    	sub    esp,0x134
c001c6c0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c6c7:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001c6ce:	56                   	push   esi
c001c6cf:	68 15 a7 02 c0       	push   0xc002a715
c001c6d4:	e8 a8 60 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001c6d9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c6e0:	e8 ef 2d ff ff       	call   c000f4d4 <malloc>
c001c6e5:	83 c4 0c             	add    esp,0xc
c001c6e8:	89 c3                	mov    ebx,eax
c001c6ea:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c001c6f0:	56                   	push   esi
c001c6f1:	50                   	push   eax
c001c6f2:	e8 b9 65 ff ff       	call   c0012cb0 <File::File(char const*, Process*)>
c001c6f7:	83 c4 10             	add    esp,0x10
c001c6fa:	85 db                	test   ebx,ebx
c001c6fc:	75 3c                	jne    c001c73a <Thr::loadDLL(char const*, bool)+0x84>
c001c6fe:	89 e8                	mov    eax,ebp
c001c700:	84 c0                	test   al,al
c001c702:	0f 84 b0 01 00 00    	je     c001c8b8 <Thr::loadDLL(char const*, bool)+0x202>
c001c708:	50                   	push   eax
c001c709:	50                   	push   eax
c001c70a:	68 26 a7 02 c0       	push   0xc002a726
c001c70f:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001c713:	57                   	push   edi
c001c714:	e8 11 40 fe ff       	call   c000072a <strcpy>
c001c719:	58                   	pop    eax
c001c71a:	5a                   	pop    edx
c001c71b:	56                   	push   esi
c001c71c:	57                   	push   edi
c001c71d:	e8 bf 40 fe ff       	call   c00007e1 <strcat>
c001c722:	59                   	pop    ecx
c001c723:	58                   	pop    eax
c001c724:	68 39 a7 02 c0       	push   0xc002a739
c001c729:	57                   	push   edi
c001c72a:	e8 b2 40 fe ff       	call   c00007e1 <strcat>
c001c72f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c732:	e8 64 d1 ff ff       	call   c001989b <Krnl::panic(char const*)>
c001c737:	83 c4 10             	add    esp,0x10
c001c73a:	50                   	push   eax
c001c73b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001c73f:	50                   	push   eax
c001c740:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c744:	50                   	push   eax
c001c745:	53                   	push   ebx
c001c746:	e8 75 68 ff ff       	call   c0012fc0 <File::stat(unsigned long long*, bool*)>
c001c74b:	83 c4 10             	add    esp,0x10
c001c74e:	85 db                	test   ebx,ebx
c001c750:	74 0c                	je     c001c75e <Thr::loadDLL(char const*, bool)+0xa8>
c001c752:	83 ec 0c             	sub    esp,0xc
c001c755:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c757:	53                   	push   ebx
c001c758:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c75b:	83 c4 10             	add    esp,0x10
c001c75e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001c763:	75 0a                	jne    c001c76f <Thr::loadDLL(char const*, bool)+0xb9>
c001c765:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c769:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001c76d:	75 3c                	jne    c001c7ab <Thr::loadDLL(char const*, bool)+0xf5>
c001c76f:	89 e8                	mov    eax,ebp
c001c771:	84 c0                	test   al,al
c001c773:	0f 84 3d 01 00 00    	je     c001c8b6 <Thr::loadDLL(char const*, bool)+0x200>
c001c779:	50                   	push   eax
c001c77a:	50                   	push   eax
c001c77b:	68 26 a7 02 c0       	push   0xc002a726
c001c780:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001c784:	53                   	push   ebx
c001c785:	e8 a0 3f fe ff       	call   c000072a <strcpy>
c001c78a:	58                   	pop    eax
c001c78b:	5a                   	pop    edx
c001c78c:	56                   	push   esi
c001c78d:	53                   	push   ebx
c001c78e:	e8 4e 40 fe ff       	call   c00007e1 <strcat>
c001c793:	59                   	pop    ecx
c001c794:	5f                   	pop    edi
c001c795:	68 39 a7 02 c0       	push   0xc002a739
c001c79a:	53                   	push   ebx
c001c79b:	e8 41 40 fe ff       	call   c00007e1 <strcat>
c001c7a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7a3:	e8 f3 d0 ff ff       	call   c001989b <Krnl::panic(char const*)>
c001c7a8:	83 c4 10             	add    esp,0x10
c001c7ab:	e8 71 51 ff ff       	call   c0011921 <Virt::getAKernelVAS()>
c001c7b0:	51                   	push   ecx
c001c7b1:	6a 03                	push   0x3
c001c7b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c7b7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c7bb:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001c7c1:	83 d3 00             	adc    ebx,0x0
c001c7c4:	89 ca                	mov    edx,ecx
c001c7c6:	89 d1                	mov    ecx,edx
c001c7c8:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001c7cc:	51                   	push   ecx
c001c7cd:	50                   	push   eax
c001c7ce:	e8 89 57 ff ff       	call   c0011f5c <VAS::allocatePages(int, int)>
c001c7d3:	89 34 24             	mov    DWORD PTR [esp],esi
c001c7d6:	89 c3                	mov    ebx,eax
c001c7d8:	e8 cb 3e fe ff       	call   c00006a8 <strlen>
c001c7dd:	8b 3d a0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6a0
c001c7e3:	40                   	inc    eax
c001c7e4:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7e7:	e8 e8 2c ff ff       	call   c000f4d4 <malloc>
c001c7ec:	89 04 bd c0 da 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2540],eax
c001c7f3:	5f                   	pop    edi
c001c7f4:	58                   	pop    eax
c001c7f5:	a1 a0 d6 02 c0       	mov    eax,ds:0xc002d6a0
c001c7fa:	56                   	push   esi
c001c7fb:	ff 34 85 c0 da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2540]
c001c802:	e8 23 3f fe ff       	call   c000072a <strcpy>
c001c807:	a1 a0 d6 02 c0       	mov    eax,ds:0xc002d6a0
c001c80c:	8d 50 01             	lea    edx,[eax+0x1]
c001c80f:	89 1c 85 c0 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2740],ebx
c001c816:	89 15 a0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6a0,edx
c001c81c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c820:	83 c4 0c             	add    esp,0xc
c001c823:	89 14 85 c0 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2940],edx
c001c82a:	6a 01                	push   0x1
c001c82c:	53                   	push   ebx
c001c82d:	56                   	push   esi
c001c82e:	e8 7f f6 ff ff       	call   c001beb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001c833:	83 c4 10             	add    esp,0x10
c001c836:	89 c7                	mov    edi,eax
c001c838:	fe c8                	dec    al
c001c83a:	74 16                	je     c001c852 <Thr::loadDLL(char const*, bool)+0x19c>
c001c83c:	89 e8                	mov    eax,ebp
c001c83e:	84 c0                	test   al,al
c001c840:	74 10                	je     c001c852 <Thr::loadDLL(char const*, bool)+0x19c>
c001c842:	83 ec 0c             	sub    esp,0xc
c001c845:	68 3b a7 02 c0       	push   0xc002a73b
c001c84a:	e8 4c d0 ff ff       	call   c001989b <Krnl::panic(char const*)>
c001c84f:	83 c4 10             	add    esp,0x10
c001c852:	31 f6                	xor    esi,esi
c001c854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c858:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c85c:	05 ff 0f 00 00       	add    eax,0xfff
c001c861:	83 d2 00             	adc    edx,0x0
c001c864:	0f ac d0 0c          	shrd   eax,edx,0xc
c001c868:	c1 ea 0c             	shr    edx,0xc
c001c86b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c86f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c873:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001c877:	ba 00 00 00 00       	mov    edx,0x0
c001c87c:	89 d0                	mov    eax,edx
c001c87e:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001c882:	73 2c                	jae    c001c8b0 <Thr::loadDLL(char const*, bool)+0x1fa>
c001c884:	e8 98 50 ff ff       	call   c0011921 <Virt::getAKernelVAS()>
c001c889:	89 f5                	mov    ebp,esi
c001c88b:	c1 e5 0c             	shl    ebp,0xc
c001c88e:	52                   	push   edx
c001c88f:	01 dd                	add    ebp,ebx
c001c891:	52                   	push   edx
c001c892:	55                   	push   ebp
c001c893:	50                   	push   eax
c001c894:	e8 3d 52 ff ff       	call   c0011ad6 <VAS::getPageTableEntry(unsigned long)>
c001c899:	83 c4 10             	add    esp,0x10
c001c89c:	f6 00 60             	test   BYTE PTR [eax],0x60
c001c89f:	75 0c                	jne    c001c8ad <Thr::loadDLL(char const*, bool)+0x1f7>
c001c8a1:	83 ec 0c             	sub    esp,0xc
c001c8a4:	55                   	push   ebp
c001c8a5:	e8 4a 31 ff ff       	call   c000f9f4 <Phys::freePage(unsigned long)>
c001c8aa:	83 c4 10             	add    esp,0x10
c001c8ad:	46                   	inc    esi
c001c8ae:	eb a4                	jmp    c001c854 <Thr::loadDLL(char const*, bool)+0x19e>
c001c8b0:	89 f8                	mov    eax,edi
c001c8b2:	84 c0                	test   al,al
c001c8b4:	75 02                	jne    c001c8b8 <Thr::loadDLL(char const*, bool)+0x202>
c001c8b6:	31 db                	xor    ebx,ebx
c001c8b8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c8be:	89 d8                	mov    eax,ebx
c001c8c0:	5b                   	pop    ebx
c001c8c1:	5e                   	pop    esi
c001c8c2:	5f                   	pop    edi
c001c8c3:	5d                   	pop    ebp
c001c8c4:	c3                   	ret    

c001c8c5 <Thr::executeDLL(unsigned long, void*)>:
c001c8c5:	56                   	push   esi
c001c8c6:	53                   	push   ebx
c001c8c7:	51                   	push   ecx
c001c8c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8cc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c8d0:	85 db                	test   ebx,ebx
c001c8d2:	75 10                	jne    c001c8e4 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001c8d4:	83 ec 0c             	sub    esp,0xc
c001c8d7:	68 5a a7 02 c0       	push   0xc002a75a
c001c8dc:	e8 ba cf ff ff       	call   c001989b <Krnl::panic(char const*)>
c001c8e1:	83 c4 10             	add    esp,0x10
c001c8e4:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001c8e8:	89 d8                	mov    eax,ebx
c001c8ea:	5a                   	pop    edx
c001c8eb:	5b                   	pop    ebx
c001c8ec:	5e                   	pop    esi
c001c8ed:	ff e0                	jmp    eax
c001c8ef:	90                   	nop

c001c8f0 <changeTSS>:
c001c8f0:	83 ec 14             	sub    esp,0x14
c001c8f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8f8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001c8fb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001c900:	c1 e2 15             	shl    edx,0x15
c001c903:	29 d0                	sub    eax,edx
c001c905:	50                   	push   eax
c001c906:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001c90b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c911:	05 7c 11 00 00       	add    eax,0x117c
c001c916:	50                   	push   eax
c001c917:	e8 b4 47 ff ff       	call   c00110d0 <TSS::setESP(unsigned long)>
c001c91c:	83 c4 1c             	add    esp,0x1c
c001c91f:	c3                   	ret    

c001c920 <Process::addArgs(char**)>:
c001c920:	57                   	push   edi
c001c921:	56                   	push   esi
c001c922:	53                   	push   ebx
c001c923:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c927:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c92b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001c935:	85 ff                	test   edi,edi
c001c937:	74 3d                	je     c001c976 <Process::addArgs(char**)+0x56>
c001c939:	8b 07                	mov    eax,DWORD PTR [edi]
c001c93b:	85 c0                	test   eax,eax
c001c93d:	74 37                	je     c001c976 <Process::addArgs(char**)+0x56>
c001c93f:	31 db                	xor    ebx,ebx
c001c941:	83 ec 0c             	sub    esp,0xc
c001c944:	50                   	push   eax
c001c945:	e8 5e 3d fe ff       	call   c00006a8 <strlen>
c001c94a:	40                   	inc    eax
c001c94b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c94e:	e8 81 2b ff ff       	call   c000f4d4 <malloc>
c001c953:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001c95a:	5a                   	pop    edx
c001c95b:	59                   	pop    ecx
c001c95c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001c95f:	43                   	inc    ebx
c001c960:	50                   	push   eax
c001c961:	e8 c4 3d fe ff       	call   c000072a <strcpy>
c001c966:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001c96c:	83 c4 10             	add    esp,0x10
c001c96f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c972:	85 c0                	test   eax,eax
c001c974:	75 cb                	jne    c001c941 <Process::addArgs(char**)+0x21>
c001c976:	5b                   	pop    ebx
c001c977:	5e                   	pop    esi
c001c978:	5f                   	pop    edi
c001c979:	c3                   	ret    

c001c97a <Process::Process(char const*, Process*, char**)>:
c001c97a:	56                   	push   esi
c001c97b:	53                   	push   ebx
c001c97c:	83 ec 14             	sub    esp,0x14
c001c97f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c983:	05 0c 02 00 00       	add    eax,0x20c
c001c988:	bb 07 00 00 00       	mov    ebx,0x7
c001c98d:	89 c6                	mov    esi,eax
c001c98f:	85 db                	test   ebx,ebx
c001c991:	78 12                	js     c001c9a5 <Process::Process(char const*, Process*, char**)+0x2b>
c001c993:	83 ec 0c             	sub    esp,0xc
c001c996:	56                   	push   esi
c001c997:	e8 c6 ac 00 00       	call   c0027662 <ThreadControlBlock::ThreadControlBlock()>
c001c99c:	83 c4 10             	add    esp,0x10
c001c99f:	83 c6 63             	add    esi,0x63
c001c9a2:	4b                   	dec    ebx
c001c9a3:	eb ea                	jmp    c001c98f <Process::Process(char const*, Process*, char**)+0x15>
c001c9a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9a9:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001c9b0:	83 ec 0c             	sub    esp,0xc
c001c9b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c9b7:	e8 30 cd ff ff       	call   c00196ec <Krnl::newProcessEnv(Process*)>
c001c9bc:	83 c4 10             	add    esp,0x10
c001c9bf:	89 c2                	mov    edx,eax
c001c9c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9c5:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001c9cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9cf:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001c9d8:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001c9dd:	8d 50 01             	lea    edx,[eax+0x1]
c001c9e0:	89 15 d0 be 02 c0    	mov    DWORD PTR ds:0xc002bed0,edx
c001c9e6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c9ea:	89 02                	mov    DWORD PTR [edx],eax
c001c9ec:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001c9f4:	83 ec 0c             	sub    esp,0xc
c001c9f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9fb:	e8 d4 2a ff ff       	call   c000f4d4 <malloc>
c001ca00:	83 c4 10             	add    esp,0x10
c001ca03:	89 c3                	mov    ebx,eax
c001ca05:	83 ec 08             	sub    esp,0x8
c001ca08:	6a 00                	push   0x0
c001ca0a:	53                   	push   ebx
c001ca0b:	e8 f4 58 ff ff       	call   c0012304 <VAS::VAS(bool)>
c001ca10:	83 c4 10             	add    esp,0x10
c001ca13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca17:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001ca1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca21:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ca2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca2f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ca33:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ca39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca3d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ca43:	85 c0                	test   eax,eax
c001ca45:	74 42                	je     c001ca89 <Process::Process(char const*, Process*, char**)+0x10f>
c001ca47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca4b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ca51:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ca57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca5b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001ca61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca65:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ca6b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001ca71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca75:	05 0c 01 00 00       	add    eax,0x10c
c001ca7a:	83 ec 08             	sub    esp,0x8
c001ca7d:	52                   	push   edx
c001ca7e:	50                   	push   eax
c001ca7f:	e8 a6 3c fe ff       	call   c000072a <strcpy>
c001ca84:	83 c4 10             	add    esp,0x10
c001ca87:	eb 63                	jmp    c001caec <Process::Process(char const*, Process*, char**)+0x172>
c001ca89:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001ca91:	83 ec 0c             	sub    esp,0xc
c001ca94:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ca98:	e8 37 2a ff ff       	call   c000f4d4 <malloc>
c001ca9d:	83 c4 10             	add    esp,0x10
c001caa0:	89 c3                	mov    ebx,eax
c001caa2:	83 ec 08             	sub    esp,0x8
c001caa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001caa9:	53                   	push   ebx
c001caaa:	e8 f5 42 ff ff       	call   c0010da4 <VgaText::VgaText(char const*)>
c001caaf:	83 c4 10             	add    esp,0x10
c001cab2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cab6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cabc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cac0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cac6:	83 ec 0c             	sub    esp,0xc
c001cac9:	50                   	push   eax
c001caca:	e8 20 36 ff ff       	call   c00100ef <addToTerminalCycle(VgaText*)>
c001cacf:	83 c4 10             	add    esp,0x10
c001cad2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cad6:	05 0c 01 00 00       	add    eax,0x10c
c001cadb:	83 ec 08             	sub    esp,0x8
c001cade:	68 84 a7 02 c0       	push   0xc002a784
c001cae3:	50                   	push   eax
c001cae4:	e8 41 3c fe ff       	call   c000072a <strcpy>
c001cae9:	83 c4 10             	add    esp,0x10
c001caec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caf0:	83 c0 0c             	add    eax,0xc
c001caf3:	83 ec 08             	sub    esp,0x8
c001caf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cafa:	50                   	push   eax
c001cafb:	e8 2a 3c fe ff       	call   c000072a <strcpy>
c001cb00:	83 c4 10             	add    esp,0x10
c001cb03:	83 ec 08             	sub    esp,0x8
c001cb06:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cb0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb0e:	e8 0d fe ff ff       	call   c001c920 <Process::addArgs(char**)>
c001cb13:	83 c4 10             	add    esp,0x10
c001cb16:	83 ec 08             	sub    esp,0x8
c001cb19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb21:	e8 58 ee ff ff       	call   c001b97e <Thr::loadProgramIntoMemory(Process*, char const*)>
c001cb26:	83 c4 10             	add    esp,0x10
c001cb29:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cb2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001cb31:	83 f0 01             	xor    eax,0x1
c001cb34:	88 c2                	mov    dl,al
c001cb36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb3a:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001cb40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001cb45:	83 ec 08             	sub    esp,0x8
c001cb48:	50                   	push   eax
c001cb49:	68 80 a8 02 c0       	push   0xc002a880
c001cb4e:	e8 2e 5c ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001cb53:	83 c4 10             	add    esp,0x10
c001cb56:	90                   	nop
c001cb57:	83 c4 14             	add    esp,0x14
c001cb5a:	5b                   	pop    ebx
c001cb5b:	5e                   	pop    esi
c001cb5c:	c3                   	ret    
c001cb5d:	90                   	nop

c001cb5e <Process::Process(bool, char const*, Process*, char**)>:
c001cb5e:	56                   	push   esi
c001cb5f:	53                   	push   ebx
c001cb60:	83 ec 24             	sub    esp,0x24
c001cb63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb67:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cb6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb6f:	05 0c 02 00 00       	add    eax,0x20c
c001cb74:	bb 07 00 00 00       	mov    ebx,0x7
c001cb79:	89 c6                	mov    esi,eax
c001cb7b:	85 db                	test   ebx,ebx
c001cb7d:	78 12                	js     c001cb91 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001cb7f:	83 ec 0c             	sub    esp,0xc
c001cb82:	56                   	push   esi
c001cb83:	e8 da aa 00 00       	call   c0027662 <ThreadControlBlock::ThreadControlBlock()>
c001cb88:	83 c4 10             	add    esp,0x10
c001cb8b:	83 c6 63             	add    esi,0x63
c001cb8e:	4b                   	dec    ebx
c001cb8f:	eb ea                	jmp    c001cb7b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001cb91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb95:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cb9c:	83 ec 0c             	sub    esp,0xc
c001cb9f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cba3:	e8 44 cb ff ff       	call   c00196ec <Krnl::newProcessEnv(Process*)>
c001cba8:	83 c4 10             	add    esp,0x10
c001cbab:	89 c2                	mov    edx,eax
c001cbad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbb1:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cbb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbbb:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cbc4:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001cbc9:	8d 50 01             	lea    edx,[eax+0x1]
c001cbcc:	89 15 d0 be 02 c0    	mov    DWORD PTR ds:0xc002bed0,edx
c001cbd2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cbd6:	89 02                	mov    DWORD PTR [edx],eax
c001cbd8:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001cbe0:	83 ec 0c             	sub    esp,0xc
c001cbe3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cbe7:	e8 e8 28 ff ff       	call   c000f4d4 <malloc>
c001cbec:	83 c4 10             	add    esp,0x10
c001cbef:	89 c3                	mov    ebx,eax
c001cbf1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cbf6:	83 ec 08             	sub    esp,0x8
c001cbf9:	50                   	push   eax
c001cbfa:	53                   	push   ebx
c001cbfb:	e8 04 57 ff ff       	call   c0012304 <VAS::VAS(bool)>
c001cc00:	83 c4 10             	add    esp,0x10
c001cc03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc07:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cc0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc11:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cc1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc1f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cc23:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cc29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc2d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc33:	85 c0                	test   eax,eax
c001cc35:	74 42                	je     c001cc79 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001cc37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc3b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc41:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cc47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc4b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001cc51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc55:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc5b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cc61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc65:	05 0c 01 00 00       	add    eax,0x10c
c001cc6a:	83 ec 08             	sub    esp,0x8
c001cc6d:	52                   	push   edx
c001cc6e:	50                   	push   eax
c001cc6f:	e8 b6 3a fe ff       	call   c000072a <strcpy>
c001cc74:	83 c4 10             	add    esp,0x10
c001cc77:	eb 63                	jmp    c001ccdc <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001cc79:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001cc81:	83 ec 0c             	sub    esp,0xc
c001cc84:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc88:	e8 47 28 ff ff       	call   c000f4d4 <malloc>
c001cc8d:	83 c4 10             	add    esp,0x10
c001cc90:	89 c3                	mov    ebx,eax
c001cc92:	83 ec 08             	sub    esp,0x8
c001cc95:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cc99:	53                   	push   ebx
c001cc9a:	e8 05 41 ff ff       	call   c0010da4 <VgaText::VgaText(char const*)>
c001cc9f:	83 c4 10             	add    esp,0x10
c001cca2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cca6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ccac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccb0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ccb6:	83 ec 0c             	sub    esp,0xc
c001ccb9:	50                   	push   eax
c001ccba:	e8 30 34 ff ff       	call   c00100ef <addToTerminalCycle(VgaText*)>
c001ccbf:	83 c4 10             	add    esp,0x10
c001ccc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccc6:	05 0c 01 00 00       	add    eax,0x10c
c001cccb:	83 ec 08             	sub    esp,0x8
c001ccce:	68 84 a7 02 c0       	push   0xc002a784
c001ccd3:	50                   	push   eax
c001ccd4:	e8 51 3a fe ff       	call   c000072a <strcpy>
c001ccd9:	83 c4 10             	add    esp,0x10
c001ccdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cce0:	83 c0 0c             	add    eax,0xc
c001cce3:	83 ec 08             	sub    esp,0x8
c001cce6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ccea:	50                   	push   eax
c001cceb:	e8 3a 3a fe ff       	call   c000072a <strcpy>
c001ccf0:	83 c4 10             	add    esp,0x10
c001ccf3:	83 ec 08             	sub    esp,0x8
c001ccf6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ccfa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ccfe:	e8 1d fc ff ff       	call   c001c920 <Process::addArgs(char**)>
c001cd03:	83 c4 10             	add    esp,0x10
c001cd06:	90                   	nop
c001cd07:	83 c4 24             	add    esp,0x24
c001cd0a:	5b                   	pop    ebx
c001cd0b:	5e                   	pop    esi
c001cd0c:	c3                   	ret    

c001cd0d <disableIRQs()>:
c001cd0d:	fa                   	cli    
c001cd0e:	ff 05 6c de 02 c0    	inc    DWORD PTR ds:0xc002de6c
c001cd14:	c3                   	ret    

c001cd15 <getIRQNestingLevel()>:
c001cd15:	a1 6c de 02 c0       	mov    eax,ds:0xc002de6c
c001cd1a:	c3                   	ret    

c001cd1b <enableIRQs()>:
c001cd1b:	a1 6c de 02 c0       	mov    eax,ds:0xc002de6c
c001cd20:	48                   	dec    eax
c001cd21:	a3 6c de 02 c0       	mov    ds:0xc002de6c,eax
c001cd26:	75 01                	jne    c001cd29 <enableIRQs()+0xe>
c001cd28:	fb                   	sti    
c001cd29:	c3                   	ret    

c001cd2a <lockScheduler()>:
c001cd2a:	eb e1                	jmp    c001cd0d <disableIRQs()>

c001cd2c <unlockScheduler()>:
c001cd2c:	eb ed                	jmp    c001cd1b <enableIRQs()>

c001cd2e <userModeEntryPoint(void*)>:
c001cd2e:	83 ec 0c             	sub    esp,0xc
c001cd31:	e8 f6 ff ff ff       	call   c001cd2c <unlockScheduler()>
c001cd36:	fb                   	sti    
c001cd37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd3c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd3f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001cd45:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd49:	83 c4 0c             	add    esp,0xc
c001cd4c:	e9 8e 35 fe ff       	jmp    c00002df <goToUsermode>

c001cd51 <lockStuff()>:
c001cd51:	e8 b7 ff ff ff       	call   c001cd0d <disableIRQs()>
c001cd56:	ff 05 68 de 02 c0    	inc    DWORD PTR ds:0xc002de68
c001cd5c:	c3                   	ret    

c001cd5d <taskStartupFunction>:
c001cd5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd62:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001cd65:	c3                   	ret    

c001cd66 <updateTimeUsed()>:
c001cd66:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001cd6b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cd71:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001cd78:	74 50                	je     c001cdca <updateTimeUsed()+0x64>
c001cd7a:	57                   	push   edi
c001cd7b:	56                   	push   esi
c001cd7c:	53                   	push   ebx
c001cd7d:	0f 31                	rdtsc  
c001cd7f:	89 c1                	mov    ecx,eax
c001cd81:	a3 a8 de 02 c0       	mov    ds:0xc002dea8,eax
c001cd86:	2b 0d 98 de 02 c0    	sub    ecx,DWORD PTR ds:0xc002de98
c001cd8c:	89 d3                	mov    ebx,edx
c001cd8e:	89 0d a0 de 02 c0    	mov    DWORD PTR ds:0xc002dea0,ecx
c001cd94:	1b 1d 9c de 02 c0    	sbb    ebx,DWORD PTR ds:0xc002de9c
c001cd9a:	a3 98 de 02 c0       	mov    ds:0xc002de98,eax
c001cd9f:	89 1d a4 de 02 c0    	mov    DWORD PTR ds:0xc002dea4,ebx
c001cda5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cdaa:	89 15 ac de 02 c0    	mov    DWORD PTR ds:0xc002deac,edx
c001cdb0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001cdb3:	89 15 9c de 02 c0    	mov    DWORD PTR ds:0xc002de9c,edx
c001cdb9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001cdbc:	01 f1                	add    ecx,esi
c001cdbe:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001cdc1:	11 fb                	adc    ebx,edi
c001cdc3:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001cdc6:	5b                   	pop    ebx
c001cdc7:	5e                   	pop    esi
c001cdc8:	5f                   	pop    edi
c001cdc9:	c3                   	ret    
c001cdca:	c3                   	ret    

c001cdcb <switchToThread(ThreadControlBlock*)>:
c001cdcb:	53                   	push   ebx
c001cdcc:	83 ec 08             	sub    esp,0x8
c001cdcf:	a1 68 de 02 c0       	mov    eax,ds:0xc002de68
c001cdd4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cdd8:	85 c0                	test   eax,eax
c001cdda:	75 30                	jne    c001ce0c <switchToThread(ThreadControlBlock*)+0x41>
c001cddc:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001cddf:	3c ff                	cmp    al,0xff
c001cde1:	74 25                	je     c001ce08 <switchToThread(ThreadControlBlock*)+0x3d>
c001cde3:	0f b6 d0             	movzx  edx,al
c001cde6:	b8 84 03 00 00       	mov    eax,0x384
c001cdeb:	29 d0                	sub    eax,edx
c001cded:	c1 e0 10             	shl    eax,0x10
c001cdf0:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001cdf3:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001cdf6:	e8 6b ff ff ff       	call   c001cd66 <updateTimeUsed()>
c001cdfb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001cdff:	83 c4 08             	add    esp,0x8
c001ce02:	5b                   	pop    ebx
c001ce03:	e9 0f 35 fe ff       	jmp    c0000317 <switchToThreadASM>
c001ce08:	31 c0                	xor    eax,eax
c001ce0a:	eb e7                	jmp    c001cdf3 <switchToThread(ThreadControlBlock*)+0x28>
c001ce0c:	c7 05 64 de 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002de64,0x1
c001ce16:	83 c4 08             	add    esp,0x8
c001ce19:	5b                   	pop    ebx
c001ce1a:	c3                   	ret    
c001ce1b:	90                   	nop

c001ce1c <Semaphore::Semaphore(int)>:
c001ce1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce24:	89 10                	mov    DWORD PTR [eax],edx
c001ce26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce2a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ce31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce35:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ce3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce40:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ce47:	90                   	nop
c001ce48:	c3                   	ret    
c001ce49:	90                   	nop

c001ce4a <Mutex::Mutex()>:
c001ce4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce4e:	6a 01                	push   0x1
c001ce50:	50                   	push   eax
c001ce51:	e8 c6 ff ff ff       	call   c001ce1c <Semaphore::Semaphore(int)>
c001ce56:	83 c4 08             	add    esp,0x8
c001ce59:	90                   	nop
c001ce5a:	c3                   	ret    
c001ce5b:	90                   	nop

c001ce5c <Process::createThread(void (*)(void*), void*, int)>:
c001ce5c:	55                   	push   ebp
c001ce5d:	31 c9                	xor    ecx,ecx
c001ce5f:	57                   	push   edi
c001ce60:	56                   	push   esi
c001ce61:	53                   	push   ebx
c001ce62:	83 ec 1c             	sub    esp,0x1c
c001ce65:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ce69:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001ce70:	89 f2                	mov    edx,esi
c001ce72:	0f b7 c2             	movzx  eax,dx
c001ce75:	83 e2 01             	and    edx,0x1
c001ce78:	74 14                	je     c001ce8e <Process::createThread(void (*)(void*), void*, int)+0x32>
c001ce7a:	d1 f8                	sar    eax,1
c001ce7c:	41                   	inc    ecx
c001ce7d:	89 c2                	mov    edx,eax
c001ce7f:	83 f9 10             	cmp    ecx,0x10
c001ce82:	75 ee                	jne    c001ce72 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001ce84:	83 c4 1c             	add    esp,0x1c
c001ce87:	31 c0                	xor    eax,eax
c001ce89:	5b                   	pop    ebx
c001ce8a:	5e                   	pop    esi
c001ce8b:	5f                   	pop    edi
c001ce8c:	5d                   	pop    ebp
c001ce8d:	c3                   	ret    
c001ce8e:	83 ec 08             	sub    esp,0x8
c001ce91:	b8 01 00 00 00       	mov    eax,0x1
c001ce96:	d3 e0                	shl    eax,cl
c001ce98:	09 c6                	or     esi,eax
c001ce9a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001cea0:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001cea7:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001ceaa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001cead:	01 ce                	add    esi,ecx
c001ceaf:	89 f0                	mov    eax,esi
c001ceb1:	c1 e0 05             	shl    eax,0x5
c001ceb4:	01 c6                	add    esi,eax
c001ceb6:	8d 04 33             	lea    eax,[ebx+esi*1]
c001ceb9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001cebf:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001cec5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001cec9:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001cecf:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001ced5:	89 ca                	mov    edx,ecx
c001ced7:	f7 da                	neg    edx
c001ced9:	c1 e2 15             	shl    edx,0x15
c001cedc:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001cee2:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001cee8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001ceec:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001cef6:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001cefc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cf00:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001cf06:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001cf10:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001cf1a:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001cf21:	50                   	push   eax
c001cf22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf26:	68 88 de 02 c0       	push   0xc002de88
c001cf2b:	e8 c0 a5 00 00       	call   c00274f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cf30:	83 c4 10             	add    esp,0x10
c001cf33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf37:	83 c4 1c             	add    esp,0x1c
c001cf3a:	5b                   	pop    ebx
c001cf3b:	5e                   	pop    esi
c001cf3c:	5f                   	pop    edi
c001cf3d:	5d                   	pop    ebp
c001cf3e:	c3                   	ret    
c001cf3f:	90                   	nop

c001cf40 <Process::createUserThread()>:
c001cf40:	83 ec 0c             	sub    esp,0xc
c001cf43:	68 80 00 00 00       	push   0x80
c001cf48:	6a 00                	push   0x0
c001cf4a:	68 2e cd 01 c0       	push   0xc001cd2e
c001cf4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf53:	e8 04 ff ff ff       	call   c001ce5c <Process::createThread(void (*)(void*), void*, int)>
c001cf58:	83 c4 1c             	add    esp,0x1c
c001cf5b:	c3                   	ret    

c001cf5c <setupMultitasking(void (*)())>:
c001cf5c:	56                   	push   esi
c001cf5d:	53                   	push   ebx
c001cf5e:	53                   	push   ebx
c001cf5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf63:	eb 10                	jmp    c001cf75 <setupMultitasking(void (*)())+0x19>
c001cf65:	83 ec 0c             	sub    esp,0xc
c001cf68:	68 88 de 02 c0       	push   0xc002de88
c001cf6d:	e8 d0 a4 00 00       	call   c0027442 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cf72:	83 c4 10             	add    esp,0x10
c001cf75:	83 ec 0c             	sub    esp,0xc
c001cf78:	68 88 de 02 c0       	push   0xc002de88
c001cf7d:	e8 a4 a4 00 00       	call   c0027426 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cf82:	83 c4 10             	add    esp,0x10
c001cf85:	84 c0                	test   al,al
c001cf87:	74 dc                	je     c001cf65 <setupMultitasking(void (*)())+0x9>
c001cf89:	83 ec 0c             	sub    esp,0xc
c001cf8c:	68 3f 07 00 00       	push   0x73f
c001cf91:	e8 3e 25 ff ff       	call   c000f4d4 <malloc>
c001cf96:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001cf9d:	89 c3                	mov    ebx,eax
c001cf9f:	6a 00                	push   0x0
c001cfa1:	68 88 a7 02 c0       	push   0xc002a788
c001cfa6:	6a 01                	push   0x1
c001cfa8:	50                   	push   eax
c001cfa9:	e8 b0 fb ff ff       	call   c001cb5e <Process::Process(bool, char const*, Process*, char**)>
c001cfae:	83 c4 18             	add    esp,0x18
c001cfb1:	89 1d 94 de 02 c0    	mov    DWORD PTR ds:0xc002de94,ebx
c001cfb7:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001cfbd:	68 a8 a8 02 c0       	push   0xc002a8a8
c001cfc2:	e8 ba 57 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001cfc7:	58                   	pop    eax
c001cfc8:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001cfce:	e8 46 39 ff ff       	call   c0010919 <setActiveTerminal(VgaText*)>
c001cfd3:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001cfdb:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001cfe1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cfe4:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001cfee:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001cff4:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001cffa:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d004:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d00e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d018:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d01e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d024:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d02e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d034:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d03e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d044:	5a                   	pop    edx
c001d045:	59                   	pop    ecx
c001d046:	68 84 a7 02 c0       	push   0xc002a784
c001d04b:	50                   	push   eax
c001d04c:	e8 d9 36 fe ff       	call   c000072a <strcpy>
c001d051:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d058:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d05c:	83 c4 14             	add    esp,0x14
c001d05f:	5b                   	pop    ebx
c001d060:	5e                   	pop    esi
c001d061:	e9 a3 32 fe ff       	jmp    c0000309 <switchToThreadASMFirstTime>

c001d066 <schedule()>:
c001d066:	a1 68 de 02 c0       	mov    eax,ds:0xc002de68
c001d06b:	85 c0                	test   eax,eax
c001d06d:	74 0b                	je     c001d07a <schedule()+0x14>
c001d06f:	c7 05 64 de 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002de64,0x1
c001d079:	c3                   	ret    
c001d07a:	53                   	push   ebx
c001d07b:	83 ec 14             	sub    esp,0x14
c001d07e:	68 88 de 02 c0       	push   0xc002de88
c001d083:	e8 9e a3 00 00       	call   c0027426 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d088:	83 c4 10             	add    esp,0x10
c001d08b:	84 c0                	test   al,al
c001d08d:	75 38                	jne    c001d0c7 <schedule()+0x61>
c001d08f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d094:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d097:	4a                   	dec    edx
c001d098:	74 32                	je     c001d0cc <schedule()+0x66>
c001d09a:	83 ec 0c             	sub    esp,0xc
c001d09d:	68 88 de 02 c0       	push   0xc002de88
c001d0a2:	e8 77 a3 00 00       	call   c002741e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d0a7:	c7 04 24 88 de 02 c0 	mov    DWORD PTR [esp],0xc002de88
c001d0ae:	89 c3                	mov    ebx,eax
c001d0b0:	e8 8d a3 00 00       	call   c0027442 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d0b5:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d0bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0bf:	e8 07 fd ff ff       	call   c001cdcb <switchToThread(ThreadControlBlock*)>
c001d0c4:	83 c4 10             	add    esp,0x10
c001d0c7:	83 c4 08             	add    esp,0x8
c001d0ca:	5b                   	pop    ebx
c001d0cb:	c3                   	ret    
c001d0cc:	83 ec 08             	sub    esp,0x8
c001d0cf:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d0d6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d0dc:	68 88 de 02 c0       	push   0xc002de88
c001d0e1:	e8 0a a4 00 00       	call   c00274f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d0e6:	83 c4 10             	add    esp,0x10
c001d0e9:	eb af                	jmp    c001d09a <schedule()+0x34>

c001d0eb <unlockStuff()>:
c001d0eb:	a1 68 de 02 c0       	mov    eax,ds:0xc002de68
c001d0f0:	48                   	dec    eax
c001d0f1:	a3 68 de 02 c0       	mov    ds:0xc002de68,eax
c001d0f6:	75 09                	jne    c001d101 <unlockStuff()+0x16>
c001d0f8:	a1 64 de 02 c0       	mov    eax,ds:0xc002de64
c001d0fd:	85 c0                	test   eax,eax
c001d0ff:	75 05                	jne    c001d106 <unlockStuff()+0x1b>
c001d101:	e9 15 fc ff ff       	jmp    c001cd1b <enableIRQs()>
c001d106:	83 ec 0c             	sub    esp,0xc
c001d109:	c7 05 64 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de64,0x0
c001d113:	e8 4e ff ff ff       	call   c001d066 <schedule()>
c001d118:	83 c4 0c             	add    esp,0xc
c001d11b:	e9 fb fb ff ff       	jmp    c001cd1b <enableIRQs()>

c001d120 <Semaphore::tryAcquire()>:
c001d120:	83 ec 0c             	sub    esp,0xc
c001d123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d127:	e8 25 fc ff ff       	call   c001cd51 <lockStuff()>
c001d12c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d12f:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d131:	7c 0b                	jl     c001d13e <Semaphore::tryAcquire()+0x1e>
c001d133:	e8 b3 ff ff ff       	call   c001d0eb <unlockStuff()>
c001d138:	31 c0                	xor    eax,eax
c001d13a:	83 c4 0c             	add    esp,0xc
c001d13d:	c3                   	ret    
c001d13e:	42                   	inc    edx
c001d13f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d142:	e8 a4 ff ff ff       	call   c001d0eb <unlockStuff()>
c001d147:	b0 01                	mov    al,0x1
c001d149:	83 c4 0c             	add    esp,0xc
c001d14c:	c3                   	ret    
c001d14d:	90                   	nop

c001d14e <Semaphore::assertLocked(char const*)>:
c001d14e:	83 ec 0c             	sub    esp,0xc
c001d151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d155:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d159:	e8 f3 fb ff ff       	call   c001cd51 <lockStuff()>
c001d15e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d160:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d163:	7c 05                	jl     c001d16a <Semaphore::assertLocked(char const*)+0x1c>
c001d165:	83 c4 0c             	add    esp,0xc
c001d168:	eb 81                	jmp    c001d0eb <unlockStuff()>
c001d16a:	83 ec 0c             	sub    esp,0xc
c001d16d:	52                   	push   edx
c001d16e:	e8 28 c7 ff ff       	call   c001989b <Krnl::panic(char const*)>
c001d173:	83 c4 10             	add    esp,0x10
c001d176:	83 c4 0c             	add    esp,0xc
c001d179:	e9 6d ff ff ff       	jmp    c001d0eb <unlockStuff()>

c001d17e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d17e:	83 ec 0c             	sub    esp,0xc
c001d181:	e8 8f fb ff ff       	call   c001cd15 <getIRQNestingLevel()>
c001d186:	83 ec 08             	sub    esp,0x8
c001d189:	50                   	push   eax
c001d18a:	68 dc a8 02 c0       	push   0xc002a8dc
c001d18f:	e8 ed 55 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d194:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d198:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d19d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d1a0:	e8 c1 fe ff ff       	call   c001d066 <schedule()>
c001d1a5:	e8 82 fb ff ff       	call   c001cd2c <unlockScheduler()>
c001d1aa:	e8 66 fb ff ff       	call   c001cd15 <getIRQNestingLevel()>
c001d1af:	5a                   	pop    edx
c001d1b0:	59                   	pop    ecx
c001d1b1:	50                   	push   eax
c001d1b2:	68 10 a9 02 c0       	push   0xc002a910
c001d1b7:	e8 c5 55 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d1bc:	83 c4 1c             	add    esp,0x1c
c001d1bf:	c3                   	ret    

c001d1c0 <blockTask(TaskState)>:
c001d1c0:	83 ec 0c             	sub    esp,0xc
c001d1c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d1c7:	e8 5e fb ff ff       	call   c001cd2a <lockScheduler()>
c001d1cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1d1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d1d4:	e8 8d fe ff ff       	call   c001d066 <schedule()>
c001d1d9:	83 c4 0c             	add    esp,0xc
c001d1dc:	e9 4b fb ff ff       	jmp    c001cd2c <unlockScheduler()>

c001d1e1 <waitTask(int, int*, int)>:
c001d1e1:	83 ec 18             	sub    esp,0x18
c001d1e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1ed:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d1f0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d1f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1f9:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d1fc:	6a 07                	push   0x7
c001d1fe:	e8 bd ff ff ff       	call   c001d1c0 <blockTask(TaskState)>
c001d203:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d208:	83 c4 10             	add    esp,0x10
c001d20b:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d20e:	85 d2                	test   edx,edx
c001d210:	74 0a                	je     c001d21c <waitTask(int, int*, int)+0x3b>
c001d212:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d215:	89 02                	mov    DWORD PTR [edx],eax
c001d217:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d21c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d21f:	83 c4 0c             	add    esp,0xc
c001d222:	c3                   	ret    

c001d223 <nanoSleepUntil(unsigned long long)>:
c001d223:	83 ec 0c             	sub    esp,0xc
c001d226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d22a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d22e:	3b 05 d0 cf 02 c0    	cmp    eax,DWORD PTR ds:0xc002cfd0
c001d234:	89 d1                	mov    ecx,edx
c001d236:	1b 0d d4 cf 02 c0    	sbb    ecx,DWORD PTR ds:0xc002cfd4
c001d23c:	73 04                	jae    c001d242 <nanoSleepUntil(unsigned long long)+0x1f>
c001d23e:	83 c4 0c             	add    esp,0xc
c001d241:	c3                   	ret    
c001d242:	e8 0a fb ff ff       	call   c001cd51 <lockStuff()>
c001d247:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d24d:	83 ec 08             	sub    esp,0x8
c001d250:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d253:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d256:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d25c:	68 7c de 02 c0       	push   0xc002de7c
c001d261:	e8 8a a2 00 00       	call   c00274f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d266:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d26d:	e8 4e ff ff ff       	call   c001d1c0 <blockTask(TaskState)>
c001d272:	83 c4 1c             	add    esp,0x1c
c001d275:	e9 71 fe ff ff       	jmp    c001d0eb <unlockStuff()>

c001d27a <nanoSleep(unsigned long long)>:
c001d27a:	a1 d0 cf 02 c0       	mov    eax,ds:0xc002cfd0
c001d27f:	8b 15 d4 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cfd4
c001d285:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d289:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d28d:	eb 94                	jmp    c001d223 <nanoSleepUntil(unsigned long long)>

c001d28f <sleep(unsigned long long)>:
c001d28f:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d297:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d29c:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d2a0:	01 ca                	add    edx,ecx
c001d2a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2a6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d2aa:	eb ce                	jmp    c001d27a <nanoSleep(unsigned long long)>

c001d2ac <Semaphore::acquire()>:
c001d2ac:	83 ec 0c             	sub    esp,0xc
c001d2af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2b3:	e8 99 fa ff ff       	call   c001cd51 <lockStuff()>
c001d2b8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d2bb:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d2bd:	7d 0c                	jge    c001d2cb <Semaphore::acquire()+0x1f>
c001d2bf:	42                   	inc    edx
c001d2c0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d2c3:	83 c4 0c             	add    esp,0xc
c001d2c6:	e9 20 fe ff ff       	jmp    c001d0eb <unlockStuff()>
c001d2cb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d2d1:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d2d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d2db:	85 d2                	test   edx,edx
c001d2dd:	74 2a                	je     c001d309 <Semaphore::acquire()+0x5d>
c001d2df:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d2e2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d2e8:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d2eb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d2f1:	83 ec 0c             	sub    esp,0xc
c001d2f4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d2f7:	6a 05                	push   0x5
c001d2f9:	e8 c2 fe ff ff       	call   c001d1c0 <blockTask(TaskState)>
c001d2fe:	83 c4 10             	add    esp,0x10
c001d301:	83 c4 0c             	add    esp,0xc
c001d304:	e9 e2 fd ff ff       	jmp    c001d0eb <unlockStuff()>
c001d309:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d30f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d312:	eb d7                	jmp    c001d2eb <Semaphore::acquire()+0x3f>

c001d314 <taskReturned>:
c001d314:	83 ec 18             	sub    esp,0x18
c001d317:	68 44 a9 02 c0       	push   0xc002a944
c001d31c:	e8 7a c5 ff ff       	call   c001989b <Krnl::panic(char const*)>
c001d321:	83 c4 10             	add    esp,0x10
c001d324:	83 ec 0c             	sub    esp,0xc
c001d327:	6a 02                	push   0x2
c001d329:	e8 92 fe ff ff       	call   c001d1c0 <blockTask(TaskState)>
c001d32e:	e8 f7 f9 ff ff       	call   c001cd2a <lockScheduler()>
c001d333:	e8 2e fd ff ff       	call   c001d066 <schedule()>
c001d338:	e8 ef f9 ff ff       	call   c001cd2c <unlockScheduler()>
c001d33d:	83 c4 10             	add    esp,0x10
c001d340:	eb e2                	jmp    c001d324 <taskReturned+0x10>

c001d342 <unblockTask(ThreadControlBlock*)>:
c001d342:	53                   	push   ebx
c001d343:	83 ec 08             	sub    esp,0x8
c001d346:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d34a:	e8 db f9 ff ff       	call   c001cd2a <lockScheduler()>
c001d34f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d352:	85 c0                	test   eax,eax
c001d354:	74 5c                	je     c001d3b2 <unblockTask(ThreadControlBlock*)+0x70>
c001d356:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d359:	48                   	dec    eax
c001d35a:	74 31                	je     c001d38d <unblockTask(ThreadControlBlock*)+0x4b>
c001d35c:	83 ec 0c             	sub    esp,0xc
c001d35f:	68 88 de 02 c0       	push   0xc002de88
c001d364:	e8 b5 a0 00 00       	call   c002741e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d369:	83 c4 10             	add    esp,0x10
c001d36c:	85 c0                	test   eax,eax
c001d36e:	75 17                	jne    c001d387 <unblockTask(ThreadControlBlock*)+0x45>
c001d370:	eb 65                	jmp    c001d3d7 <unblockTask(ThreadControlBlock*)+0x95>
c001d372:	83 ec 08             	sub    esp,0x8
c001d375:	50                   	push   eax
c001d376:	68 88 de 02 c0       	push   0xc002de88
c001d37b:	e8 78 a3 00 00       	call   c00276f8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d380:	83 c4 10             	add    esp,0x10
c001d383:	85 c0                	test   eax,eax
c001d385:	74 50                	je     c001d3d7 <unblockTask(ThreadControlBlock*)+0x95>
c001d387:	39 c3                	cmp    ebx,eax
c001d389:	75 e7                	jne    c001d372 <unblockTask(ThreadControlBlock*)+0x30>
c001d38b:	eb 1c                	jmp    c001d3a9 <unblockTask(ThreadControlBlock*)+0x67>
c001d38d:	83 ec 0c             	sub    esp,0xc
c001d390:	68 34 aa 02 c0       	push   0xc002aa34
c001d395:	e8 e7 53 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d39a:	c7 04 24 c0 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9c0
c001d3a1:	e8 db 53 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d3a6:	83 c4 10             	add    esp,0x10
c001d3a9:	83 c4 08             	add    esp,0x8
c001d3ac:	5b                   	pop    ebx
c001d3ad:	e9 7a f9 ff ff       	jmp    c001cd2c <unlockScheduler()>
c001d3b2:	83 ec 0c             	sub    esp,0xc
c001d3b5:	68 78 a9 02 c0       	push   0xc002a978
c001d3ba:	e8 c2 53 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d3bf:	c7 04 24 c0 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9c0
c001d3c6:	e8 b6 53 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d3cb:	83 c4 10             	add    esp,0x10
c001d3ce:	83 c4 08             	add    esp,0x8
c001d3d1:	5b                   	pop    ebx
c001d3d2:	e9 55 f9 ff ff       	jmp    c001cd2c <unlockScheduler()>
c001d3d7:	83 ec 08             	sub    esp,0x8
c001d3da:	53                   	push   ebx
c001d3db:	68 88 de 02 c0       	push   0xc002de88
c001d3e0:	e8 0b a1 00 00       	call   c00274f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d3e5:	83 c4 10             	add    esp,0x10
c001d3e8:	83 c4 08             	add    esp,0x8
c001d3eb:	5b                   	pop    ebx
c001d3ec:	e9 3b f9 ff ff       	jmp    c001cd2c <unlockScheduler()>

c001d3f1 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d3f1:	55                   	push   ebp
c001d3f2:	57                   	push   edi
c001d3f3:	56                   	push   esi
c001d3f4:	53                   	push   ebx
c001d3f5:	83 ec 1c             	sub    esp,0x1c
c001d3f8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d3fc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d3ff:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d405:	85 ff                	test   edi,edi
c001d407:	7e 20                	jle    c001d429 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d409:	31 f6                	xor    esi,esi
c001d40b:	83 ec 0c             	sub    esp,0xc
c001d40e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d415:	46                   	inc    esi
c001d416:	e8 c9 20 ff ff       	call   c000f4e4 <free>
c001d41b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d41e:	83 c4 10             	add    esp,0x10
c001d421:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d427:	7f e2                	jg     c001d40b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d429:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d433:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d438:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d43b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d43e:	d3 c0                	rol    eax,cl
c001d440:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d447:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d44a:	89 f7                	mov    edi,esi
c001d44c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d454:	0f 85 74 01 00 00    	jne    c001d5ce <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d45a:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d460:	85 ed                	test   ebp,ebp
c001d462:	74 1b                	je     c001d47f <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d464:	83 ec 0c             	sub    esp,0xc
c001d467:	55                   	push   ebp
c001d468:	e8 9b c1 ff ff       	call   c0019608 <EnvVarContainer::~EnvVarContainer()>
c001d46d:	59                   	pop    ecx
c001d46e:	5e                   	pop    esi
c001d46f:	6a 0c                	push   0xc
c001d471:	55                   	push   ebp
c001d472:	e8 2a 52 ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c001d477:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d47a:	83 c4 10             	add    esp,0x10
c001d47d:	89 f7                	mov    edi,esi
c001d47f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d485:	85 c0                	test   eax,eax
c001d487:	0f 84 aa 00 00 00    	je     c001d537 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d48d:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d490:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d494:	31 c9                	xor    ecx,ecx
c001d496:	eb 10                	jmp    c001d4a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d498:	41                   	inc    ecx
c001d499:	83 f9 10             	cmp    ecx,0x10
c001d49c:	0f 84 95 00 00 00    	je     c001d537 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d4a2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d4a8:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d4af:	d3 fa                	sar    edx,cl
c001d4b1:	83 e2 01             	and    edx,0x1
c001d4b4:	74 e2                	je     c001d498 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d4b6:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d4b9:	01 ca                	add    edx,ecx
c001d4bb:	89 d5                	mov    ebp,edx
c001d4bd:	c1 e5 05             	shl    ebp,0x5
c001d4c0:	01 ea                	add    edx,ebp
c001d4c2:	01 d0                	add    eax,edx
c001d4c4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d4ca:	83 fd 07             	cmp    ebp,0x7
c001d4cd:	75 c9                	jne    c001d498 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d4cf:	05 40 02 00 00       	add    eax,0x240
c001d4d4:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d4d7:	83 fd ff             	cmp    ebp,0xffffffff
c001d4da:	0f 8c 08 01 00 00    	jl     c001d5e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d4e0:	0f 84 b9 01 00 00    	je     c001d69f <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d4e6:	85 ed                	test   ebp,ebp
c001d4e8:	0f 84 a0 01 00 00    	je     c001d68e <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d4ee:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d4f0:	75 a6                	jne    c001d498 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d4f2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d4f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d4fc:	01 d0                	add    eax,edx
c001d4fe:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d502:	83 ec 0c             	sub    esp,0xc
c001d505:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001d50b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d50e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d514:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001d51b:	50                   	push   eax
c001d51c:	e8 21 fe ff ff       	call   c001d342 <unblockTask(ThreadControlBlock*)>
c001d521:	83 c4 10             	add    esp,0x10
c001d524:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d52b:	89 f7                	mov    edi,esi
c001d52d:	41                   	inc    ecx
c001d52e:	83 f9 10             	cmp    ecx,0x10
c001d531:	0f 85 6b ff ff ff    	jne    c001d4a2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001d537:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001d53d:	85 c0                	test   eax,eax
c001d53f:	74 5d                	je     c001d59e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d541:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001d547:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001d54d:	74 4f                	je     c001d59e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d54f:	83 ec 0c             	sub    esp,0xc
c001d552:	68 88 de 02 c0       	push   0xc002de88
c001d557:	e8 c2 9e 00 00       	call   c002741e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d55c:	c7 04 24 88 de 02 c0 	mov    DWORD PTR [esp],0xc002de88
c001d563:	89 c7                	mov    edi,eax
c001d565:	e8 bc 9e 00 00       	call   c0027426 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d56a:	83 c4 10             	add    esp,0x10
c001d56d:	84 c0                	test   al,al
c001d56f:	0f 84 e4 00 00 00    	je     c001d659 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001d575:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d578:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d57e:	85 d2                	test   edx,edx
c001d580:	74 0f                	je     c001d591 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001d582:	83 ec 0c             	sub    esp,0xc
c001d585:	8b 02                	mov    eax,DWORD PTR [edx]
c001d587:	52                   	push   edx
c001d588:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d58b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d58e:	83 c4 10             	add    esp,0x10
c001d591:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001d59b:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d59e:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001d5a4:	85 db                	test   ebx,ebx
c001d5a6:	74 16                	je     c001d5be <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001d5a8:	83 ec 0c             	sub    esp,0xc
c001d5ab:	53                   	push   ebx
c001d5ac:	e8 3f 47 ff ff       	call   c0011cf0 <VAS::~VAS()>
c001d5b1:	58                   	pop    eax
c001d5b2:	5a                   	pop    edx
c001d5b3:	6a 10                	push   0x10
c001d5b5:	53                   	push   ebx
c001d5b6:	e8 e6 50 ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c001d5bb:	83 c4 10             	add    esp,0x10
c001d5be:	83 ec 0c             	sub    esp,0xc
c001d5c1:	68 8f a7 02 c0       	push   0xc002a78f
c001d5c6:	e8 b6 51 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d5cb:	83 c4 10             	add    esp,0x10
c001d5ce:	83 ec 08             	sub    esp,0x8
c001d5d1:	68 3f 07 00 00       	push   0x73f
c001d5d6:	68 9d a7 02 c0       	push   0xc002a79d
c001d5db:	e8 a1 51 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d5e0:	83 c4 2c             	add    esp,0x2c
c001d5e3:	5b                   	pop    ebx
c001d5e4:	5e                   	pop    esi
c001d5e5:	5f                   	pop    edi
c001d5e6:	5d                   	pop    ebp
c001d5e7:	c3                   	ret    
c001d5e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d5ec:	83 ec 0c             	sub    esp,0xc
c001d5ef:	68 78 aa 02 c0       	push   0xc002aa78
c001d5f4:	e8 a2 c2 ff ff       	call   c001989b <Krnl::panic(char const*)>
c001d5f9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d5fc:	83 c4 10             	add    esp,0x10
c001d5ff:	89 f7                	mov    edi,esi
c001d601:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d605:	e9 8e fe ff ff       	jmp    c001d498 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d60a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d610:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001d616:	75 1c                	jne    c001d634 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d618:	83 ec 0c             	sub    esp,0xc
c001d61b:	68 e0 aa 02 c0       	push   0xc002aae0
c001d620:	e8 5c 51 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d625:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d62c:	e8 8f fb ff ff       	call   c001d1c0 <blockTask(TaskState)>
c001d631:	83 c4 10             	add    esp,0x10
c001d634:	83 ec 08             	sub    esp,0x8
c001d637:	56                   	push   esi
c001d638:	68 88 de 02 c0       	push   0xc002de88
c001d63d:	e8 ae 9e 00 00       	call   c00274f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d642:	c7 04 24 88 de 02 c0 	mov    DWORD PTR [esp],0xc002de88
c001d649:	e8 d0 9d 00 00       	call   c002741e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d64e:	83 c4 10             	add    esp,0x10
c001d651:	39 f8                	cmp    eax,edi
c001d653:	0f 84 1c ff ff ff    	je     c001d575 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001d659:	83 ec 0c             	sub    esp,0xc
c001d65c:	68 88 de 02 c0       	push   0xc002de88
c001d661:	e8 b8 9d 00 00       	call   c002741e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d666:	c7 04 24 88 de 02 c0 	mov    DWORD PTR [esp],0xc002de88
c001d66d:	89 c6                	mov    esi,eax
c001d66f:	e8 ce 9d 00 00       	call   c0027442 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d674:	83 c4 10             	add    esp,0x10
c001d677:	39 f3                	cmp    ebx,esi
c001d679:	74 b9                	je     c001d634 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d67b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001d67e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d681:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001d687:	75 ab                	jne    c001d634 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d689:	e9 7c ff ff ff       	jmp    c001d60a <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001d68e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d692:	83 ec 0c             	sub    esp,0xc
c001d695:	68 ac aa 02 c0       	push   0xc002aaac
c001d69a:	e9 55 ff ff ff       	jmp    c001d5f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001d69f:	8b 36                	mov    esi,DWORD PTR [esi]
c001d6a1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d6a5:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001d6a8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d6ab:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001d6b1:	01 d7                	add    edi,edx
c001d6b3:	89 f8                	mov    eax,edi
c001d6b5:	e9 44 fe ff ff       	jmp    c001d4fe <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001d6ba <cleanerTaskFunction(void*)>:
c001d6ba:	53                   	push   ebx
c001d6bb:	83 ec 08             	sub    esp,0x8
c001d6be:	e8 69 f6 ff ff       	call   c001cd2c <unlockScheduler()>
c001d6c3:	e8 62 f6 ff ff       	call   c001cd2a <lockScheduler()>
c001d6c8:	80 3d 4c de 02 c0 00 	cmp    BYTE PTR ds:0xc002de4c,0x0
c001d6cf:	0f 85 8e 00 00 00    	jne    c001d763 <cleanerTaskFunction(void*)+0xa9>
c001d6d5:	83 ec 0c             	sub    esp,0xc
c001d6d8:	6a 02                	push   0x2
c001d6da:	e8 9f fa ff ff       	call   c001d17e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d6df:	83 c4 10             	add    esp,0x10
c001d6e2:	c6 05 4c de 02 c0 00 	mov    BYTE PTR ds:0xc002de4c,0x0
c001d6e9:	e8 63 f6 ff ff       	call   c001cd51 <lockStuff()>
c001d6ee:	e8 37 f6 ff ff       	call   c001cd2a <lockScheduler()>
c001d6f3:	83 ec 0c             	sub    esp,0xc
c001d6f6:	68 70 de 02 c0       	push   0xc002de70
c001d6fb:	e8 26 9d 00 00       	call   c0027426 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d700:	83 c4 10             	add    esp,0x10
c001d703:	84 c0                	test   al,al
c001d705:	75 40                	jne    c001d747 <cleanerTaskFunction(void*)+0x8d>
c001d707:	83 ec 0c             	sub    esp,0xc
c001d70a:	68 70 de 02 c0       	push   0xc002de70
c001d70f:	e8 0a 9d 00 00       	call   c002741e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d714:	c7 04 24 70 de 02 c0 	mov    DWORD PTR [esp],0xc002de70
c001d71b:	89 c3                	mov    ebx,eax
c001d71d:	e8 20 9d 00 00       	call   c0027442 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d722:	c7 04 24 b3 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7b3
c001d729:	e8 53 50 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d72e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d731:	e8 bb fc ff ff       	call   c001d3f1 <cleanupTerminatedTask(ThreadControlBlock*)>
c001d736:	c7 04 24 cc a7 02 c0 	mov    DWORD PTR [esp],0xc002a7cc
c001d73d:	e8 3f 50 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d742:	83 c4 10             	add    esp,0x10
c001d745:	eb ac                	jmp    c001d6f3 <cleanerTaskFunction(void*)+0x39>
c001d747:	e8 e0 f5 ff ff       	call   c001cd2c <unlockScheduler()>
c001d74c:	e8 9a f9 ff ff       	call   c001d0eb <unlockStuff()>
c001d751:	e8 d4 f5 ff ff       	call   c001cd2a <lockScheduler()>
c001d756:	80 3d 4c de 02 c0 00 	cmp    BYTE PTR ds:0xc002de4c,0x0
c001d75d:	0f 84 72 ff ff ff    	je     c001d6d5 <cleanerTaskFunction(void*)+0x1b>
c001d763:	e8 c4 f5 ff ff       	call   c001cd2c <unlockScheduler()>
c001d768:	e9 75 ff ff ff       	jmp    c001d6e2 <cleanerTaskFunction(void*)+0x28>

c001d76d <terminateTask(int)>:
c001d76d:	83 ec 14             	sub    esp,0x14
c001d770:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d775:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d778:	83 c0 0c             	add    eax,0xc
c001d77b:	50                   	push   eax
c001d77c:	68 08 ab 02 c0       	push   0xc002ab08
c001d781:	e8 fb 4f ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d786:	e8 c6 f5 ff ff       	call   c001cd51 <lockStuff()>
c001d78b:	e8 9a f5 ff ff       	call   c001cd2a <lockScheduler()>
c001d790:	c7 04 24 df a7 02 c0 	mov    DWORD PTR [esp],0xc002a7df
c001d797:	e8 e5 4f ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d79c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d7a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7a5:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001d7a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7ad:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001d7b0:	5a                   	pop    edx
c001d7b1:	59                   	pop    ecx
c001d7b2:	50                   	push   eax
c001d7b3:	68 70 de 02 c0       	push   0xc002de70
c001d7b8:	e8 33 9d 00 00       	call   c00274f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d7bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7c2:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001d7c9:	c7 04 24 f9 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7f9
c001d7d0:	e8 ac 4f ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d7d5:	83 c4 10             	add    esp,0x10
c001d7d8:	a1 48 de 02 c0       	mov    eax,ds:0xc002de48
c001d7dd:	85 c0                	test   eax,eax
c001d7df:	74 5a                	je     c001d83b <terminateTask(int)+0xce>
c001d7e1:	83 ec 0c             	sub    esp,0xc
c001d7e4:	68 13 a8 02 c0       	push   0xc002a813
c001d7e9:	e8 93 4f ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d7ee:	58                   	pop    eax
c001d7ef:	c6 05 4c de 02 c0 01 	mov    BYTE PTR ds:0xc002de4c,0x1
c001d7f6:	ff 35 48 de 02 c0    	push   DWORD PTR ds:0xc002de48
c001d7fc:	e8 41 fb ff ff       	call   c001d342 <unblockTask(ThreadControlBlock*)>
c001d801:	c7 04 24 2d a8 02 c0 	mov    DWORD PTR [esp],0xc002a82d
c001d808:	e8 74 4f ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d80d:	83 c4 10             	add    esp,0x10
c001d810:	e8 17 f5 ff ff       	call   c001cd2c <unlockScheduler()>
c001d815:	e8 d1 f8 ff ff       	call   c001d0eb <unlockStuff()>
c001d81a:	83 ec 0c             	sub    esp,0xc
c001d81d:	68 65 a8 02 c0       	push   0xc002a865
c001d822:	e8 5a 4f ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d827:	83 c4 10             	add    esp,0x10
c001d82a:	e8 fb f4 ff ff       	call   c001cd2a <lockScheduler()>
c001d82f:	e8 32 f8 ff ff       	call   c001d066 <schedule()>
c001d834:	e8 f3 f4 ff ff       	call   c001cd2c <unlockScheduler()>
c001d839:	eb ef                	jmp    c001d82a <terminateTask(int)+0xbd>
c001d83b:	83 ec 0c             	sub    esp,0xc
c001d83e:	68 47 a8 02 c0       	push   0xc002a847
c001d843:	e8 39 4f ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d848:	83 c4 10             	add    esp,0x10
c001d84b:	eb c3                	jmp    c001d810 <terminateTask(int)+0xa3>

c001d84d <Thr::terminateFromIRQ(int)>:
c001d84d:	83 ec 18             	sub    esp,0x18
c001d850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d854:	e8 14 ff ff ff       	call   c001d76d <terminateTask(int)>
c001d859:	90                   	nop

c001d85a <Semaphore::release()>:
c001d85a:	83 ec 0c             	sub    esp,0xc
c001d85d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d861:	e8 eb f4 ff ff       	call   c001cd51 <lockStuff()>
c001d866:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d869:	85 d2                	test   edx,edx
c001d86b:	74 1a                	je     c001d887 <Semaphore::release()+0x2d>
c001d86d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001d870:	83 ec 0c             	sub    esp,0xc
c001d873:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001d876:	52                   	push   edx
c001d877:	e8 c6 fa ff ff       	call   c001d342 <unblockTask(ThreadControlBlock*)>
c001d87c:	83 c4 10             	add    esp,0x10
c001d87f:	83 c4 0c             	add    esp,0xc
c001d882:	e9 64 f8 ff ff       	jmp    c001d0eb <unlockStuff()>
c001d887:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001d88a:	83 c4 0c             	add    esp,0xc
c001d88d:	e9 59 f8 ff ff       	jmp    c001d0eb <unlockStuff()>

c001d892 <__static_initialization_and_destruction_0(int, int)>:
c001d892:	83 ec 0c             	sub    esp,0xc
c001d895:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001d89a:	0f 85 88 00 00 00    	jne    c001d928 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d8a0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001d8a8:	75 7e                	jne    c001d928 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d8aa:	83 ec 0c             	sub    esp,0xc
c001d8ad:	68 88 de 02 c0       	push   0xc002de88
c001d8b2:	e8 e9 9d 00 00       	call   c00276a0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d8b7:	83 c4 10             	add    esp,0x10
c001d8ba:	83 ec 04             	sub    esp,0x4
c001d8bd:	68 68 b8 02 c0       	push   0xc002b868
c001d8c2:	68 88 de 02 c0       	push   0xc002de88
c001d8c7:	68 60 76 02 c0       	push   0xc0027660
c001d8cc:	e8 4a 4d ff ff       	call   c001261b <__cxa_atexit>
c001d8d1:	83 c4 10             	add    esp,0x10
c001d8d4:	83 ec 0c             	sub    esp,0xc
c001d8d7:	68 7c de 02 c0       	push   0xc002de7c
c001d8dc:	e8 bf 9d 00 00       	call   c00276a0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d8e1:	83 c4 10             	add    esp,0x10
c001d8e4:	83 ec 04             	sub    esp,0x4
c001d8e7:	68 68 b8 02 c0       	push   0xc002b868
c001d8ec:	68 7c de 02 c0       	push   0xc002de7c
c001d8f1:	68 60 76 02 c0       	push   0xc0027660
c001d8f6:	e8 20 4d ff ff       	call   c001261b <__cxa_atexit>
c001d8fb:	83 c4 10             	add    esp,0x10
c001d8fe:	83 ec 0c             	sub    esp,0xc
c001d901:	68 70 de 02 c0       	push   0xc002de70
c001d906:	e8 95 9d 00 00       	call   c00276a0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d90b:	83 c4 10             	add    esp,0x10
c001d90e:	83 ec 04             	sub    esp,0x4
c001d911:	68 68 b8 02 c0       	push   0xc002b868
c001d916:	68 70 de 02 c0       	push   0xc002de70
c001d91b:	68 60 76 02 c0       	push   0xc0027660
c001d920:	e8 f6 4c ff ff       	call   c001261b <__cxa_atexit>
c001d925:	83 c4 10             	add    esp,0x10
c001d928:	90                   	nop
c001d929:	83 c4 0c             	add    esp,0xc
c001d92c:	c3                   	ret    

c001d92d <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001d92d:	83 ec 0c             	sub    esp,0xc
c001d930:	83 ec 08             	sub    esp,0x8
c001d933:	68 ff ff 00 00       	push   0xffff
c001d938:	6a 01                	push   0x1
c001d93a:	e8 53 ff ff ff       	call   c001d892 <__static_initialization_and_destruction_0(int, int)>
c001d93f:	83 c4 10             	add    esp,0x10
c001d942:	83 c4 0c             	add    esp,0xc
c001d945:	c3                   	ret    

c001d946 <Vm::inbv(unsigned short)>:
c001d946:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d94a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d94f:	75 06                	jne    c001d957 <Vm::inbv(unsigned short)+0x11>
c001d951:	a0 cc de 02 c0       	mov    al,ds:0xc002decc
c001d956:	c3                   	ret    
c001d957:	ec                   	in     al,dx
c001d958:	c3                   	ret    

c001d959 <Vm::outbv(unsigned short, unsigned char)>:
c001d959:	53                   	push   ebx
c001d95a:	83 ec 08             	sub    esp,0x8
c001d95d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d961:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d965:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d96a:	75 38                	jne    c001d9a4 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001d96c:	0f b6 c3             	movzx  eax,bl
c001d96f:	51                   	push   ecx
c001d970:	51                   	push   ecx
c001d971:	50                   	push   eax
c001d972:	68 27 ab 02 c0       	push   0xc002ab27
c001d977:	e8 05 4e ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001d97c:	8b 15 cc de 02 c0    	mov    edx,DWORD PTR ds:0xc002decc
c001d982:	83 c4 10             	add    esp,0x10
c001d985:	8d 42 01             	lea    eax,[edx+0x1]
c001d988:	88 9a e0 de 02 c0    	mov    BYTE PTR [edx-0x3ffd2120],bl
c001d98e:	a3 cc de 02 c0       	mov    ds:0xc002decc,eax
c001d993:	83 f8 20             	cmp    eax,0x20
c001d996:	75 0f                	jne    c001d9a7 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d998:	c7 05 cc de 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002decc,0x1f
c001d9a2:	eb 03                	jmp    c001d9a7 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d9a4:	88 d8                	mov    al,bl
c001d9a6:	ee                   	out    dx,al
c001d9a7:	83 c4 08             	add    esp,0x8
c001d9aa:	5b                   	pop    ebx
c001d9ab:	c3                   	ret    

c001d9ac <Vm::realToLinear(unsigned short, unsigned short)>:
c001d9ac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d9b1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d9b6:	c1 e0 04             	shl    eax,0x4
c001d9b9:	01 d0                	add    eax,edx
c001d9bb:	c3                   	ret    

c001d9bc <Vm::getSegment(unsigned int)>:
c001d9bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9c0:	c1 e8 10             	shr    eax,0x10
c001d9c3:	c3                   	ret    

c001d9c4 <Vm::getOffset(unsigned int)>:
c001d9c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9c8:	c3                   	ret    

c001d9c9 <Vm::mainloop2()>:
c001d9c9:	83 ec 0c             	sub    esp,0xc
c001d9cc:	e8 59 f3 ff ff       	call   c001cd2a <lockScheduler()>
c001d9d1:	83 ec 0c             	sub    esp,0xc
c001d9d4:	c6 05 c5 de 02 c0 01 	mov    BYTE PTR ds:0xc002dec5,0x1
c001d9db:	6a 02                	push   0x2
c001d9dd:	e8 9c f7 ff ff       	call   c001d17e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d9e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9e7:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001d9eb:	52                   	push   edx
c001d9ec:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001d9f0:	52                   	push   edx
c001d9f1:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001d9f5:	52                   	push   edx
c001d9f6:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001d9fa:	50                   	push   eax
c001d9fb:	e8 af 28 fe ff       	call   c00002af <goToVM86>
c001da00:	83 c4 2c             	add    esp,0x2c
c001da03:	c3                   	ret    

c001da04 <Vm::mainVm8086Loop(void*)>:
c001da04:	83 ec 0c             	sub    esp,0xc
c001da07:	e8 20 f3 ff ff       	call   c001cd2c <unlockScheduler()>
c001da0c:	83 c4 0c             	add    esp,0xc
c001da0f:	eb b8                	jmp    c001d9c9 <Vm::mainloop2()>

c001da11 <Vm::mainloop3(unsigned long)>:
c001da11:	53                   	push   ebx
c001da12:	83 ec 08             	sub    esp,0x8
c001da15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da19:	e8 0c f3 ff ff       	call   c001cd2a <lockScheduler()>
c001da1e:	83 ec 0c             	sub    esp,0xc
c001da21:	89 1d c0 de 02 c0    	mov    DWORD PTR ds:0xc002dec0,ebx
c001da27:	6a 02                	push   0x2
c001da29:	c6 05 c4 de 02 c0 01 	mov    BYTE PTR ds:0xc002dec4,0x1
c001da30:	e8 49 f7 ff ff       	call   c001d17e <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001da35:	83 c4 18             	add    esp,0x18
c001da38:	5b                   	pop    ebx
c001da39:	eb 8e                	jmp    c001d9c9 <Vm::mainloop2()>

c001da3b <Vm::initialise8086()>:
c001da3b:	83 ec 0c             	sub    esp,0xc
c001da3e:	68 80 00 00 00       	push   0x80
c001da43:	6a 00                	push   0x0
c001da45:	68 04 da 01 c0       	push   0xc001da04
c001da4a:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c001da50:	e8 07 f4 ff ff       	call   c001ce5c <Process::createThread(void (*)(void*), void*, int)>
c001da55:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001da5c:	a3 c8 de 02 c0       	mov    ds:0xc002dec8,eax
c001da61:	68 00 01 00 00       	push   0x100
c001da66:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001da6b:	6a 00                	push   0x0
c001da6d:	6a 00                	push   0x0
c001da6f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001da75:	e8 d6 46 ff ff       	call   c0012150 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001da7a:	83 c4 2c             	add    esp,0x2c
c001da7d:	c3                   	ret    

c001da7e <Vm::finish8086()>:
c001da7e:	53                   	push   ebx
c001da7f:	83 ec 08             	sub    esp,0x8
c001da82:	e8 a3 f2 ff ff       	call   c001cd2a <lockScheduler()>
c001da87:	80 3d c4 de 02 c0 00 	cmp    BYTE PTR ds:0xc002dec4,0x0
c001da8e:	75 0c                	jne    c001da9c <Vm::finish8086()+0x1e>
c001da90:	e8 d1 f5 ff ff       	call   c001d066 <schedule()>
c001da95:	e8 92 f2 ff ff       	call   c001cd2c <unlockScheduler()>
c001da9a:	eb e6                	jmp    c001da82 <Vm::finish8086()+0x4>
c001da9c:	83 ec 0c             	sub    esp,0xc
c001da9f:	8b 1d c0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002dec0
c001daa5:	ff 35 c8 de 02 c0    	push   DWORD PTR ds:0xc002dec8
c001daab:	c6 05 c4 de 02 c0 00 	mov    BYTE PTR ds:0xc002dec4,0x0
c001dab2:	e8 8b f8 ff ff       	call   c001d342 <unblockTask(ThreadControlBlock*)>
c001dab7:	e8 70 f2 ff ff       	call   c001cd2c <unlockScheduler()>
c001dabc:	89 d8                	mov    eax,ebx
c001dabe:	83 c4 18             	add    esp,0x18
c001dac1:	5b                   	pop    ebx
c001dac2:	c3                   	ret    

c001dac3 <Vm::getOutput8086(unsigned char*)>:
c001dac3:	83 ec 10             	sub    esp,0x10
c001dac6:	ff 35 cc de 02 c0    	push   DWORD PTR ds:0xc002decc
c001dacc:	68 e0 de 02 c0       	push   0xc002dee0
c001dad1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dad5:	e8 7b 2b fe ff       	call   c0000655 <memcpy>
c001dada:	a1 cc de 02 c0       	mov    eax,ds:0xc002decc
c001dadf:	c7 05 cc de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002decc,0x0
c001dae9:	83 c4 1c             	add    esp,0x1c
c001daec:	c3                   	ret    

c001daed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001daed:	55                   	push   ebp
c001daee:	57                   	push   edi
c001daef:	56                   	push   esi
c001daf0:	53                   	push   ebx
c001daf1:	83 ec 2c             	sub    esp,0x2c
c001daf4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001daf8:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001dafc:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001db00:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001db04:	e8 21 f2 ff ff       	call   c001cd2a <lockScheduler()>
c001db09:	a0 c5 de 02 c0       	mov    al,ds:0xc002dec5
c001db0e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001db12:	84 c0                	test   al,al
c001db14:	75 0c                	jne    c001db22 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001db16:	e8 4b f5 ff ff       	call   c001d066 <schedule()>
c001db1b:	e8 0c f2 ff ff       	call   c001cd2c <unlockScheduler()>
c001db20:	eb e2                	jmp    c001db04 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001db22:	a1 c8 de 02 c0       	mov    eax,ds:0xc002dec8
c001db27:	c7 05 cc de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002decc,0x0
c001db31:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001db35:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001db39:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001db3d:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001db41:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001db45:	50                   	push   eax
c001db46:	6a 20                	push   0x20
c001db48:	6a 00                	push   0x0
c001db4a:	68 e0 de 02 c0       	push   0xc002dee0
c001db4f:	e8 37 2b fe ff       	call   c000068b <memset>
c001db54:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001db5b:	e8 74 19 ff ff       	call   c000f4d4 <malloc>
c001db60:	83 c4 0c             	add    esp,0xc
c001db63:	89 c7                	mov    edi,eax
c001db65:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c001db6b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001db6f:	50                   	push   eax
c001db70:	e8 3b 51 ff ff       	call   c0012cb0 <File::File(char const*, Process*)>
c001db75:	83 c4 10             	add    esp,0x10
c001db78:	85 ff                	test   edi,edi
c001db7a:	75 0a                	jne    c001db86 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001db7c:	83 ec 0c             	sub    esp,0xc
c001db7f:	68 43 ab 02 c0       	push   0xc002ab43
c001db84:	eb 27                	jmp    c001dbad <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001db86:	50                   	push   eax
c001db87:	8d 44 24 17          	lea    eax,[esp+0x17]
c001db8b:	50                   	push   eax
c001db8c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001db90:	50                   	push   eax
c001db91:	57                   	push   edi
c001db92:	e8 29 54 ff ff       	call   c0012fc0 <File::stat(unsigned long long*, bool*)>
c001db97:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001db9c:	83 c4 10             	add    esp,0x10
c001db9f:	89 e8                	mov    eax,ebp
c001dba1:	84 c0                	test   al,al
c001dba3:	74 19                	je     c001dbbe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001dba5:	83 ec 0c             	sub    esp,0xc
c001dba8:	68 57 ab 02 c0       	push   0xc002ab57
c001dbad:	e8 e9 bc ff ff       	call   c001989b <Krnl::panic(char const*)>
c001dbb2:	31 ed                	xor    ebp,ebp
c001dbb4:	e8 73 f1 ff ff       	call   c001cd2c <unlockScheduler()>
c001dbb9:	83 c4 10             	add    esp,0x10
c001dbbc:	eb 75                	jmp    c001dc33 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dbbe:	50                   	push   eax
c001dbbf:	50                   	push   eax
c001dbc0:	6a 01                	push   0x1
c001dbc2:	57                   	push   edi
c001dbc3:	e8 4c 51 ff ff       	call   c0012d14 <File::open(FileOpenMode)>
c001dbc8:	83 c4 10             	add    esp,0x10
c001dbcb:	85 c0                	test   eax,eax
c001dbcd:	74 17                	je     c001dbe6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001dbcf:	83 ec 0c             	sub    esp,0xc
c001dbd2:	68 70 ab 02 c0       	push   0xc002ab70
c001dbd7:	e8 bf bc ff ff       	call   c001989b <Krnl::panic(char const*)>
c001dbdc:	e8 4b f1 ff ff       	call   c001cd2c <unlockScheduler()>
c001dbe1:	83 c4 10             	add    esp,0x10
c001dbe4:	eb 4d                	jmp    c001dc33 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dbe6:	0f b7 f6             	movzx  esi,si
c001dbe9:	50                   	push   eax
c001dbea:	0f b7 db             	movzx  ebx,bx
c001dbed:	50                   	push   eax
c001dbee:	56                   	push   esi
c001dbef:	53                   	push   ebx
c001dbf0:	e8 b7 fd ff ff       	call   c001d9ac <Vm::realToLinear(unsigned short, unsigned short)>
c001dbf5:	5a                   	pop    edx
c001dbf6:	8b 17                	mov    edx,DWORD PTR [edi]
c001dbf8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001dbfc:	51                   	push   ecx
c001dbfd:	50                   	push   eax
c001dbfe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dc02:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dc06:	57                   	push   edi
c001dc07:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001dc0a:	83 c4 14             	add    esp,0x14
c001dc0d:	57                   	push   edi
c001dc0e:	e8 5f 51 ff ff       	call   c0012d72 <File::close()>
c001dc13:	c6 05 c5 de 02 c0 00 	mov    BYTE PTR ds:0xc002dec5,0x0
c001dc1a:	e8 0d f1 ff ff       	call   c001cd2c <unlockScheduler()>
c001dc1f:	59                   	pop    ecx
c001dc20:	ff 35 c8 de 02 c0    	push   DWORD PTR ds:0xc002dec8
c001dc26:	e8 17 f7 ff ff       	call   c001d342 <unblockTask(ThreadControlBlock*)>
c001dc2b:	83 c4 10             	add    esp,0x10
c001dc2e:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001dc33:	83 c4 2c             	add    esp,0x2c
c001dc36:	89 e8                	mov    eax,ebp
c001dc38:	5b                   	pop    ebx
c001dc39:	5e                   	pop    esi
c001dc3a:	5f                   	pop    edi
c001dc3b:	5d                   	pop    ebp
c001dc3c:	c3                   	ret    

c001dc3d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001dc3d:	57                   	push   edi
c001dc3e:	56                   	push   esi
c001dc3f:	53                   	push   ebx
c001dc40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc48:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001dc4c:	83 e8 06             	sub    eax,0x6
c001dc4f:	0f b7 c0             	movzx  eax,ax
c001dc52:	50                   	push   eax
c001dc53:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001dc58:	50                   	push   eax
c001dc59:	e8 4e fd ff ff       	call   c001d9ac <Vm::realToLinear(unsigned short, unsigned short)>
c001dc5e:	5a                   	pop    edx
c001dc5f:	5e                   	pop    esi
c001dc60:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001dc63:	8d 56 fa             	lea    edx,[esi-0x6]
c001dc66:	81 e2 ff ff 00 00    	and    edx,0xffff
c001dc6c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001dc6f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001dc72:	83 c2 02             	add    edx,0x2
c001dc75:	66 89 10             	mov    WORD PTR [eax],dx
c001dc78:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001dc7b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001dc7f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001dc82:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001dc86:	89 d6                	mov    esi,edx
c001dc88:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001dc8e:	66 81 e6 ff fd       	and    si,0xfdff
c001dc93:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001dc97:	74 07                	je     c001dca0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001dc99:	89 d6                	mov    esi,edx
c001dc9b:	66 81 ce 00 02       	or     si,0x200
c001dca0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001dca4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dca9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001dcad:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001dcb5:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001dcb8:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001dcc0:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dcc3:	5b                   	pop    ebx
c001dcc4:	5e                   	pop    esi
c001dcc5:	5f                   	pop    edi
c001dcc6:	c3                   	ret    

c001dcc7 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001dcc7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dccc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dcd1:	c1 e0 04             	shl    eax,0x4
c001dcd4:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001dcd7:	c3                   	ret    

c001dcd8 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001dcd8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dcdd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dce2:	c1 e0 04             	shl    eax,0x4
c001dce5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001dce9:	c3                   	ret    

c001dcea <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001dcea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dcef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dcf4:	c1 e0 04             	shl    eax,0x4
c001dcf7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001dcfa:	c3                   	ret    

c001dcfb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001dcfb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd00:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd05:	c1 e0 04             	shl    eax,0x4
c001dd08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd0c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001dd0f:	c3                   	ret    

c001dd10 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001dd10:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd15:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd1a:	c1 e0 04             	shl    eax,0x4
c001dd1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd21:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001dd25:	c3                   	ret    

c001dd26 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001dd26:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd2b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd30:	c1 e0 04             	shl    eax,0x4
c001dd33:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd37:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001dd3a:	c3                   	ret    

c001dd3b <Vm::faultHandler(regs*)>:
c001dd3b:	55                   	push   ebp
c001dd3c:	57                   	push   edi
c001dd3d:	56                   	push   esi
c001dd3e:	53                   	push   ebx
c001dd3f:	83 ec 1c             	sub    esp,0x1c
c001dd42:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dd46:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001dd49:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001dd4c:	0f b7 c1             	movzx  eax,cx
c001dd4f:	50                   	push   eax
c001dd50:	0f b7 c3             	movzx  eax,bx
c001dd53:	c1 e3 04             	shl    ebx,0x4
c001dd56:	50                   	push   eax
c001dd57:	e8 50 fc ff ff       	call   c001d9ac <Vm::realToLinear(unsigned short, unsigned short)>
c001dd5c:	5a                   	pop    edx
c001dd5d:	89 c5                	mov    ebp,eax
c001dd5f:	5e                   	pop    esi
c001dd60:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001dd64:	50                   	push   eax
c001dd65:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001dd69:	50                   	push   eax
c001dd6a:	e8 3d fc ff ff       	call   c001d9ac <Vm::realToLinear(unsigned short, unsigned short)>
c001dd6f:	01 cb                	add    ebx,ecx
c001dd71:	89 c6                	mov    esi,eax
c001dd73:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001dd77:	50                   	push   eax
c001dd78:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd7c:	50                   	push   eax
c001dd7d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dd81:	50                   	push   eax
c001dd82:	55                   	push   ebp
c001dd83:	53                   	push   ebx
c001dd84:	b3 06                	mov    bl,0x6
c001dd86:	68 89 ab 02 c0       	push   0xc002ab89
c001dd8b:	e8 f1 49 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001dd90:	83 c4 20             	add    esp,0x20
c001dd93:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001dd98:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001dd9d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dda1:	3c 9d                	cmp    al,0x9d
c001dda3:	0f 84 d7 02 00 00    	je     c001e080 <Vm::faultHandler(regs*)+0x345>
c001dda9:	0f 87 a3 00 00 00    	ja     c001de52 <Vm::faultHandler(regs*)+0x117>
c001ddaf:	3c 66                	cmp    al,0x66
c001ddb1:	0f 84 15 02 00 00    	je     c001dfcc <Vm::faultHandler(regs*)+0x291>
c001ddb7:	77 5f                	ja     c001de18 <Vm::faultHandler(regs*)+0xdd>
c001ddb9:	3c 36                	cmp    al,0x36
c001ddbb:	0f 84 f1 01 00 00    	je     c001dfb2 <Vm::faultHandler(regs*)+0x277>
c001ddc1:	77 28                	ja     c001ddeb <Vm::faultHandler(regs*)+0xb0>
c001ddc3:	3c 26                	cmp    al,0x26
c001ddc5:	0f 84 99 01 00 00    	je     c001df64 <Vm::faultHandler(regs*)+0x229>
c001ddcb:	3c 2e                	cmp    al,0x2e
c001ddcd:	0f 85 3b 07 00 00    	jne    c001e50e <Vm::faultHandler(regs*)+0x7d3>
c001ddd3:	83 ec 0c             	sub    esp,0xc
c001ddd6:	31 db                	xor    ebx,ebx
c001ddd8:	68 9e ab 02 c0       	push   0xc002ab9e
c001dddd:	e8 9f 49 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001dde2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dde5:	83 c4 10             	add    esp,0x10
c001dde8:	45                   	inc    ebp
c001dde9:	eb b2                	jmp    c001dd9d <Vm::faultHandler(regs*)+0x62>
c001ddeb:	3c 64                	cmp    al,0x64
c001dded:	0f 84 8b 01 00 00    	je     c001df7e <Vm::faultHandler(regs*)+0x243>
c001ddf3:	0f 87 9f 01 00 00    	ja     c001df98 <Vm::faultHandler(regs*)+0x25d>
c001ddf9:	3c 3e                	cmp    al,0x3e
c001ddfb:	0f 85 0d 07 00 00    	jne    c001e50e <Vm::faultHandler(regs*)+0x7d3>
c001de01:	83 ec 0c             	sub    esp,0xc
c001de04:	b3 01                	mov    bl,0x1
c001de06:	68 a2 ab 02 c0       	push   0xc002aba2
c001de0b:	e8 71 49 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001de10:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001de13:	83 c4 10             	add    esp,0x10
c001de16:	eb d0                	jmp    c001dde8 <Vm::faultHandler(regs*)+0xad>
c001de18:	3c 6d                	cmp    al,0x6d
c001de1a:	0f 84 af 03 00 00    	je     c001e1cf <Vm::faultHandler(regs*)+0x494>
c001de20:	77 15                	ja     c001de37 <Vm::faultHandler(regs*)+0xfc>
c001de22:	3c 67                	cmp    al,0x67
c001de24:	0f 84 bf 01 00 00    	je     c001dfe9 <Vm::faultHandler(regs*)+0x2ae>
c001de2a:	3c 6c                	cmp    al,0x6c
c001de2c:	0f 84 3f 03 00 00    	je     c001e171 <Vm::faultHandler(regs*)+0x436>
c001de32:	e9 d7 06 00 00       	jmp    c001e50e <Vm::faultHandler(regs*)+0x7d3>
c001de37:	3c 6f                	cmp    al,0x6f
c001de39:	0f 84 a4 04 00 00    	je     c001e2e3 <Vm::faultHandler(regs*)+0x5a8>
c001de3f:	0f 82 11 04 00 00    	jb     c001e256 <Vm::faultHandler(regs*)+0x51b>
c001de45:	3c 9c                	cmp    al,0x9c
c001de47:	0f 84 ba 01 00 00    	je     c001e007 <Vm::faultHandler(regs*)+0x2cc>
c001de4d:	e9 bc 06 00 00       	jmp    c001e50e <Vm::faultHandler(regs*)+0x7d3>
c001de52:	3c ec                	cmp    al,0xec
c001de54:	0f 84 24 06 00 00    	je     c001e47e <Vm::faultHandler(regs*)+0x743>
c001de5a:	0f 87 93 00 00 00    	ja     c001def3 <Vm::faultHandler(regs*)+0x1b8>
c001de60:	3c e4                	cmp    al,0xe4
c001de62:	0f 84 5c 05 00 00    	je     c001e3c4 <Vm::faultHandler(regs*)+0x689>
c001de68:	77 6a                	ja     c001ded4 <Vm::faultHandler(regs*)+0x199>
c001de6a:	3c cd                	cmp    al,0xcd
c001de6c:	0f 84 7e 02 00 00    	je     c001e0f0 <Vm::faultHandler(regs*)+0x3b5>
c001de72:	3c cf                	cmp    al,0xcf
c001de74:	0f 85 94 06 00 00    	jne    c001e50e <Vm::faultHandler(regs*)+0x7d3>
c001de7a:	83 ec 0c             	sub    esp,0xc
c001de7d:	68 e6 ab 02 c0       	push   0xc002abe6
c001de82:	e8 fa 48 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001de87:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001de8a:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001de8d:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001de91:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001de94:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001de98:	0d 00 02 02 00       	or     eax,0x20200
c001de9d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001dea0:	56                   	push   esi
c001dea1:	53                   	push   ebx
c001dea2:	52                   	push   edx
c001dea3:	68 ec ab 02 c0       	push   0xc002abec
c001dea8:	e8 d4 48 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001dead:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001deb1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001deb7:	66 c1 e8 09          	shr    ax,0x9
c001debb:	83 e0 01             	and    eax,0x1
c001debe:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001dec1:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001dec4:	83 c0 06             	add    eax,0x6
c001dec7:	25 ff ff 00 00       	and    eax,0xffff
c001decc:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001decf:	e9 95 02 00 00       	jmp    c001e169 <Vm::faultHandler(regs*)+0x42e>
c001ded4:	3c e6                	cmp    al,0xe6
c001ded6:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001deda:	0f 84 4e 05 00 00    	je     c001e42e <Vm::faultHandler(regs*)+0x6f3>
c001dee0:	0f 82 0a 05 00 00    	jb     c001e3f0 <Vm::faultHandler(regs*)+0x6b5>
c001dee6:	3c e7                	cmp    al,0xe7
c001dee8:	0f 84 69 05 00 00    	je     c001e457 <Vm::faultHandler(regs*)+0x71c>
c001deee:	e9 1b 06 00 00       	jmp    c001e50e <Vm::faultHandler(regs*)+0x7d3>
c001def3:	3c ef                	cmp    al,0xef
c001def5:	0f 84 e6 05 00 00    	je     c001e4e1 <Vm::faultHandler(regs*)+0x7a6>
c001defb:	77 37                	ja     c001df34 <Vm::faultHandler(regs*)+0x1f9>
c001defd:	3c ed                	cmp    al,0xed
c001deff:	0f 84 a3 05 00 00    	je     c001e4a8 <Vm::faultHandler(regs*)+0x76d>
c001df05:	3c ee                	cmp    al,0xee
c001df07:	0f 85 01 06 00 00    	jne    c001e50e <Vm::faultHandler(regs*)+0x7d3>
c001df0d:	52                   	push   edx
c001df0e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001df11:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001df14:	68 87 ac 02 c0       	push   0xc002ac87
c001df19:	e8 63 48 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001df1e:	59                   	pop    ecx
c001df1f:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001df23:	5b                   	pop    ebx
c001df24:	50                   	push   eax
c001df25:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001df29:	50                   	push   eax
c001df2a:	e8 2a fa ff ff       	call   c001d959 <Vm::outbv(unsigned short, unsigned char)>
c001df2f:	e9 a5 05 00 00       	jmp    c001e4d9 <Vm::faultHandler(regs*)+0x79e>
c001df34:	3c fa                	cmp    al,0xfa
c001df36:	0f 84 f7 01 00 00    	je     c001e133 <Vm::faultHandler(regs*)+0x3f8>
c001df3c:	3c fb                	cmp    al,0xfb
c001df3e:	0f 84 0a 02 00 00    	je     c001e14e <Vm::faultHandler(regs*)+0x413>
c001df44:	3c f3                	cmp    al,0xf3
c001df46:	0f 85 c2 05 00 00    	jne    c001e50e <Vm::faultHandler(regs*)+0x7d3>
c001df4c:	83 ec 0c             	sub    esp,0xc
c001df4f:	68 bf ab 02 c0       	push   0xc002abbf
c001df54:	e8 28 48 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001df59:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df5c:	83 c4 10             	add    esp,0x10
c001df5f:	e9 84 fe ff ff       	jmp    c001dde8 <Vm::faultHandler(regs*)+0xad>
c001df64:	83 ec 0c             	sub    esp,0xc
c001df67:	b3 02                	mov    bl,0x2
c001df69:	68 9a ab 02 c0       	push   0xc002ab9a
c001df6e:	e8 0e 48 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001df73:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df76:	83 c4 10             	add    esp,0x10
c001df79:	e9 6a fe ff ff       	jmp    c001dde8 <Vm::faultHandler(regs*)+0xad>
c001df7e:	83 ec 0c             	sub    esp,0xc
c001df81:	b3 03                	mov    bl,0x3
c001df83:	68 a6 ab 02 c0       	push   0xc002aba6
c001df88:	e8 f4 47 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001df8d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df90:	83 c4 10             	add    esp,0x10
c001df93:	e9 50 fe ff ff       	jmp    c001dde8 <Vm::faultHandler(regs*)+0xad>
c001df98:	83 ec 0c             	sub    esp,0xc
c001df9b:	b3 04                	mov    bl,0x4
c001df9d:	68 aa ab 02 c0       	push   0xc002abaa
c001dfa2:	e8 da 47 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001dfa7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfaa:	83 c4 10             	add    esp,0x10
c001dfad:	e9 36 fe ff ff       	jmp    c001dde8 <Vm::faultHandler(regs*)+0xad>
c001dfb2:	83 ec 0c             	sub    esp,0xc
c001dfb5:	b3 05                	mov    bl,0x5
c001dfb7:	68 ae ab 02 c0       	push   0xc002abae
c001dfbc:	e8 c0 47 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001dfc1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfc4:	83 c4 10             	add    esp,0x10
c001dfc7:	e9 1c fe ff ff       	jmp    c001dde8 <Vm::faultHandler(regs*)+0xad>
c001dfcc:	83 ec 0c             	sub    esp,0xc
c001dfcf:	68 b2 ab 02 c0       	push   0xc002abb2
c001dfd4:	e8 a8 47 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001dfd9:	83 c4 10             	add    esp,0x10
c001dfdc:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfdf:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001dfe4:	e9 ff fd ff ff       	jmp    c001dde8 <Vm::faultHandler(regs*)+0xad>
c001dfe9:	50                   	push   eax
c001dfea:	50                   	push   eax
c001dfeb:	6a 01                	push   0x1
c001dfed:	68 b7 ab 02 c0       	push   0xc002abb7
c001dff2:	e8 8a 47 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001dff7:	83 c4 10             	add    esp,0x10
c001dffa:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dffd:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e002:	e9 e1 fd ff ff       	jmp    c001dde8 <Vm::faultHandler(regs*)+0xad>
c001e007:	83 ec 0c             	sub    esp,0xc
c001e00a:	68 c5 ab 02 c0       	push   0xc002abc5
c001e00f:	e8 6d 47 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e014:	83 c4 10             	add    esp,0x10
c001e017:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e01a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e01f:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e022:	74 2f                	je     c001e053 <Vm::faultHandler(regs*)+0x318>
c001e024:	83 ea 04             	sub    edx,0x4
c001e027:	25 ff 0d 00 00       	and    eax,0xdff
c001e02c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e032:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e035:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e038:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e03e:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e042:	0f 84 bf 04 00 00    	je     c001e507 <Vm::faultHandler(regs*)+0x7cc>
c001e048:	80 cc 02             	or     ah,0x2
c001e04b:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e04e:	e9 b4 04 00 00       	jmp    c001e507 <Vm::faultHandler(regs*)+0x7cc>
c001e053:	83 ea 02             	sub    edx,0x2
c001e056:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e05c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e05f:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e063:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e069:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e06d:	74 05                	je     c001e074 <Vm::faultHandler(regs*)+0x339>
c001e06f:	80 cc 02             	or     ah,0x2
c001e072:	eb 03                	jmp    c001e077 <Vm::faultHandler(regs*)+0x33c>
c001e074:	80 e4 fd             	and    ah,0xfd
c001e077:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e07b:	e9 87 04 00 00       	jmp    c001e507 <Vm::faultHandler(regs*)+0x7cc>
c001e080:	83 ec 0c             	sub    esp,0xc
c001e083:	68 cc ab 02 c0       	push   0xc002abcc
c001e088:	e8 f4 46 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e08d:	83 c4 10             	add    esp,0x10
c001e090:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e095:	74 28                	je     c001e0bf <Vm::faultHandler(regs*)+0x384>
c001e097:	8b 06                	mov    eax,DWORD PTR [esi]
c001e099:	25 ff 0d 00 00       	and    eax,0xdff
c001e09e:	0d 00 02 02 00       	or     eax,0x20200
c001e0a3:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e0a6:	8b 06                	mov    eax,DWORD PTR [esi]
c001e0a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e0ae:	c1 e8 09             	shr    eax,0x9
c001e0b1:	83 e0 01             	and    eax,0x1
c001e0b4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e0b7:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e0ba:	83 c0 04             	add    eax,0x4
c001e0bd:	eb 24                	jmp    c001e0e3 <Vm::faultHandler(regs*)+0x3a8>
c001e0bf:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e0c2:	0d 00 02 02 00       	or     eax,0x20200
c001e0c7:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e0ca:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e0cd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e0d3:	66 c1 e8 09          	shr    ax,0x9
c001e0d7:	83 e0 01             	and    eax,0x1
c001e0da:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e0dd:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e0e0:	83 c0 02             	add    eax,0x2
c001e0e3:	25 ff ff 00 00       	and    eax,0xffff
c001e0e8:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e0eb:	e9 17 04 00 00       	jmp    c001e507 <Vm::faultHandler(regs*)+0x7cc>
c001e0f0:	53                   	push   ebx
c001e0f1:	53                   	push   ebx
c001e0f2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e0f6:	50                   	push   eax
c001e0f7:	68 d2 ab 02 c0       	push   0xc002abd2
c001e0fc:	e8 80 46 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e101:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e105:	83 c4 10             	add    esp,0x10
c001e108:	3c ee                	cmp    al,0xee
c001e10a:	75 10                	jne    c001e11c <Vm::faultHandler(regs*)+0x3e1>
c001e10c:	83 ec 0c             	sub    esp,0xc
c001e10f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e112:	e8 fa f8 ff ff       	call   c001da11 <Vm::mainloop3(unsigned long)>
c001e117:	e9 c0 03 00 00       	jmp    c001e4dc <Vm::faultHandler(regs*)+0x7a1>
c001e11c:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e120:	83 ec 0c             	sub    esp,0xc
c001e123:	53                   	push   ebx
c001e124:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e128:	53                   	push   ebx
c001e129:	55                   	push   ebp
c001e12a:	50                   	push   eax
c001e12b:	57                   	push   edi
c001e12c:	e8 0c fb ff ff       	call   c001dc3d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e131:	eb 36                	jmp    c001e169 <Vm::faultHandler(regs*)+0x42e>
c001e133:	83 ec 0c             	sub    esp,0xc
c001e136:	68 dc ab 02 c0       	push   0xc002abdc
c001e13b:	e8 41 46 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e140:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e145:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e149:	e9 8b 03 00 00       	jmp    c001e4d9 <Vm::faultHandler(regs*)+0x79e>
c001e14e:	83 ec 0c             	sub    esp,0xc
c001e151:	68 e1 ab 02 c0       	push   0xc002abe1
c001e156:	e8 26 46 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e15b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e160:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e164:	e9 70 03 00 00       	jmp    c001e4d9 <Vm::faultHandler(regs*)+0x79e>
c001e169:	83 c4 20             	add    esp,0x20
c001e16c:	e9 99 03 00 00       	jmp    c001e50a <Vm::faultHandler(regs*)+0x7cf>
c001e171:	83 ec 0c             	sub    esp,0xc
c001e174:	68 1f ac 02 c0       	push   0xc002ac1f
c001e179:	e8 03 46 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e17e:	83 c4 10             	add    esp,0x10
c001e181:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e184:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e189:	74 0d                	je     c001e198 <Vm::faultHandler(regs*)+0x45d>
c001e18b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e192:	0f 87 9e 01 00 00    	ja     c001e336 <Vm::faultHandler(regs*)+0x5fb>
c001e198:	83 ec 0c             	sub    esp,0xc
c001e19b:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e19f:	0f b7 db             	movzx  ebx,bx
c001e1a2:	50                   	push   eax
c001e1a3:	e8 9e f7 ff ff       	call   c001d946 <Vm::inbv(unsigned short)>
c001e1a8:	83 c4 0c             	add    esp,0xc
c001e1ab:	0f b6 c0             	movzx  eax,al
c001e1ae:	50                   	push   eax
c001e1af:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e1b3:	50                   	push   eax
c001e1b4:	53                   	push   ebx
c001e1b5:	e8 41 fb ff ff       	call   c001dcfb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e1ba:	83 c4 10             	add    esp,0x10
c001e1bd:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e1c0:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e1c4:	74 03                	je     c001e1c9 <Vm::faultHandler(regs*)+0x48e>
c001e1c6:	48                   	dec    eax
c001e1c7:	eb 01                	jmp    c001e1ca <Vm::faultHandler(regs*)+0x48f>
c001e1c9:	40                   	inc    eax
c001e1ca:	0f b7 c0             	movzx  eax,ax
c001e1cd:	eb 7f                	jmp    c001e24e <Vm::faultHandler(regs*)+0x513>
c001e1cf:	83 ec 0c             	sub    esp,0xc
c001e1d2:	68 51 ac 02 c0       	push   0xc002ac51
c001e1d7:	e8 a5 45 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e1dc:	83 c4 10             	add    esp,0x10
c001e1df:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e1e2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e1e7:	74 0d                	je     c001e1f6 <Vm::faultHandler(regs*)+0x4bb>
c001e1e9:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e1f0:	0f 87 40 01 00 00    	ja     c001e336 <Vm::faultHandler(regs*)+0x5fb>
c001e1f6:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e1f9:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e1fd:	0f b7 db             	movzx  ebx,bx
c001e200:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e205:	74 20                	je     c001e227 <Vm::faultHandler(regs*)+0x4ec>
c001e207:	ed                   	in     eax,dx
c001e208:	51                   	push   ecx
c001e209:	50                   	push   eax
c001e20a:	56                   	push   esi
c001e20b:	53                   	push   ebx
c001e20c:	e8 15 fb ff ff       	call   c001dd26 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e211:	83 c4 10             	add    esp,0x10
c001e214:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e217:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e21b:	74 05                	je     c001e222 <Vm::faultHandler(regs*)+0x4e7>
c001e21d:	83 e8 04             	sub    eax,0x4
c001e220:	eb 27                	jmp    c001e249 <Vm::faultHandler(regs*)+0x50e>
c001e222:	83 c0 04             	add    eax,0x4
c001e225:	eb 22                	jmp    c001e249 <Vm::faultHandler(regs*)+0x50e>
c001e227:	66 ed                	in     ax,dx
c001e229:	0f b7 c0             	movzx  eax,ax
c001e22c:	52                   	push   edx
c001e22d:	50                   	push   eax
c001e22e:	56                   	push   esi
c001e22f:	53                   	push   ebx
c001e230:	e8 db fa ff ff       	call   c001dd10 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e235:	83 c4 10             	add    esp,0x10
c001e238:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e23b:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e23f:	74 05                	je     c001e246 <Vm::faultHandler(regs*)+0x50b>
c001e241:	83 e8 02             	sub    eax,0x2
c001e244:	eb 03                	jmp    c001e249 <Vm::faultHandler(regs*)+0x50e>
c001e246:	83 c0 02             	add    eax,0x2
c001e249:	25 ff ff 00 00       	and    eax,0xffff
c001e24e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e251:	e9 b1 02 00 00       	jmp    c001e507 <Vm::faultHandler(regs*)+0x7cc>
c001e256:	83 ec 0c             	sub    esp,0xc
c001e259:	4b                   	dec    ebx
c001e25a:	68 57 ac 02 c0       	push   0xc002ac57
c001e25f:	e8 1d 45 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e264:	83 c4 10             	add    esp,0x10
c001e267:	80 fb 05             	cmp    bl,0x5
c001e26a:	77 0a                	ja     c001e276 <Vm::faultHandler(regs*)+0x53b>
c001e26c:	0f b6 db             	movzx  ebx,bl
c001e26f:	ff 24 9d c8 ac 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5338]
c001e276:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e27a:	eb 1b                	jmp    c001e297 <Vm::faultHandler(regs*)+0x55c>
c001e27c:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e280:	eb 15                	jmp    c001e297 <Vm::faultHandler(regs*)+0x55c>
c001e282:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e286:	eb 0f                	jmp    c001e297 <Vm::faultHandler(regs*)+0x55c>
c001e288:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e28c:	eb 09                	jmp    c001e297 <Vm::faultHandler(regs*)+0x55c>
c001e28e:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e291:	eb 04                	jmp    c001e297 <Vm::faultHandler(regs*)+0x55c>
c001e293:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e297:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e29c:	74 0d                	je     c001e2ab <Vm::faultHandler(regs*)+0x570>
c001e29e:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e2a5:	0f 87 8b 00 00 00    	ja     c001e336 <Vm::faultHandler(regs*)+0x5fb>
c001e2ab:	53                   	push   ebx
c001e2ac:	53                   	push   ebx
c001e2ad:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e2b1:	52                   	push   edx
c001e2b2:	50                   	push   eax
c001e2b3:	e8 0f fa ff ff       	call   c001dcc7 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e2b8:	5e                   	pop    esi
c001e2b9:	0f b6 c0             	movzx  eax,al
c001e2bc:	5d                   	pop    ebp
c001e2bd:	50                   	push   eax
c001e2be:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e2c2:	50                   	push   eax
c001e2c3:	e8 91 f6 ff ff       	call   c001d959 <Vm::outbv(unsigned short, unsigned char)>
c001e2c8:	83 c4 10             	add    esp,0x10
c001e2cb:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e2ce:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e2d2:	74 03                	je     c001e2d7 <Vm::faultHandler(regs*)+0x59c>
c001e2d4:	48                   	dec    eax
c001e2d5:	eb 01                	jmp    c001e2d8 <Vm::faultHandler(regs*)+0x59d>
c001e2d7:	40                   	inc    eax
c001e2d8:	0f b7 c0             	movzx  eax,ax
c001e2db:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e2de:	e9 24 02 00 00       	jmp    c001e507 <Vm::faultHandler(regs*)+0x7cc>
c001e2e3:	83 ec 0c             	sub    esp,0xc
c001e2e6:	4b                   	dec    ebx
c001e2e7:	68 57 ac 02 c0       	push   0xc002ac57
c001e2ec:	e8 90 44 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e2f1:	83 c4 10             	add    esp,0x10
c001e2f4:	80 fb 05             	cmp    bl,0x5
c001e2f7:	77 0a                	ja     c001e303 <Vm::faultHandler(regs*)+0x5c8>
c001e2f9:	0f b6 db             	movzx  ebx,bl
c001e2fc:	ff 24 9d e0 ac 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5320]
c001e303:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e307:	eb 1b                	jmp    c001e324 <Vm::faultHandler(regs*)+0x5e9>
c001e309:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e30d:	eb 15                	jmp    c001e324 <Vm::faultHandler(regs*)+0x5e9>
c001e30f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e313:	eb 0f                	jmp    c001e324 <Vm::faultHandler(regs*)+0x5e9>
c001e315:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e319:	eb 09                	jmp    c001e324 <Vm::faultHandler(regs*)+0x5e9>
c001e31b:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e31e:	eb 04                	jmp    c001e324 <Vm::faultHandler(regs*)+0x5e9>
c001e320:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e324:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e327:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e32c:	74 39                	je     c001e367 <Vm::faultHandler(regs*)+0x62c>
c001e32e:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e334:	76 31                	jbe    c001e367 <Vm::faultHandler(regs*)+0x62c>
c001e336:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e33a:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e33e:	51                   	push   ecx
c001e33f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e343:	51                   	push   ecx
c001e344:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e348:	51                   	push   ecx
c001e349:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e34d:	51                   	push   ecx
c001e34e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e352:	52                   	push   edx
c001e353:	50                   	push   eax
c001e354:	50                   	push   eax
c001e355:	68 24 ac 02 c0       	push   0xc002ac24
c001e35a:	e8 22 44 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e35f:	83 c4 20             	add    esp,0x20
c001e362:	e9 fb 01 00 00       	jmp    c001e562 <Vm::faultHandler(regs*)+0x827>
c001e367:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e36a:	0f b7 d3             	movzx  edx,bx
c001e36d:	81 e6 00 04 00 00    	and    esi,0x400
c001e373:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e376:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e37b:	74 1d                	je     c001e39a <Vm::faultHandler(regs*)+0x65f>
c001e37d:	51                   	push   ecx
c001e37e:	51                   	push   ecx
c001e37f:	52                   	push   edx
c001e380:	50                   	push   eax
c001e381:	e8 64 f9 ff ff       	call   c001dcea <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e386:	83 c4 10             	add    esp,0x10
c001e389:	89 ea                	mov    edx,ebp
c001e38b:	ef                   	out    dx,eax
c001e38c:	85 f6                	test   esi,esi
c001e38e:	74 05                	je     c001e395 <Vm::faultHandler(regs*)+0x65a>
c001e390:	83 eb 04             	sub    ebx,0x4
c001e393:	eb 21                	jmp    c001e3b6 <Vm::faultHandler(regs*)+0x67b>
c001e395:	83 c3 04             	add    ebx,0x4
c001e398:	eb 1c                	jmp    c001e3b6 <Vm::faultHandler(regs*)+0x67b>
c001e39a:	51                   	push   ecx
c001e39b:	51                   	push   ecx
c001e39c:	52                   	push   edx
c001e39d:	50                   	push   eax
c001e39e:	e8 35 f9 ff ff       	call   c001dcd8 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e3a3:	83 c4 10             	add    esp,0x10
c001e3a6:	89 ea                	mov    edx,ebp
c001e3a8:	66 ef                	out    dx,ax
c001e3aa:	85 f6                	test   esi,esi
c001e3ac:	74 05                	je     c001e3b3 <Vm::faultHandler(regs*)+0x678>
c001e3ae:	83 eb 02             	sub    ebx,0x2
c001e3b1:	eb 03                	jmp    c001e3b6 <Vm::faultHandler(regs*)+0x67b>
c001e3b3:	83 c3 02             	add    ebx,0x2
c001e3b6:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e3bc:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e3bf:	e9 43 01 00 00       	jmp    c001e507 <Vm::faultHandler(regs*)+0x7cc>
c001e3c4:	53                   	push   ebx
c001e3c5:	53                   	push   ebx
c001e3c6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e3ca:	50                   	push   eax
c001e3cb:	68 5d ac 02 c0       	push   0xc002ac5d
c001e3d0:	e8 ac 43 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e3d5:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e3dc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e3e0:	89 04 24             	mov    DWORD PTR [esp],eax
c001e3e3:	e8 5e f5 ff ff       	call   c001d946 <Vm::inbv(unsigned short)>
c001e3e8:	0f b6 c0             	movzx  eax,al
c001e3eb:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e3ee:	eb 5e                	jmp    c001e44e <Vm::faultHandler(regs*)+0x713>
c001e3f0:	51                   	push   ecx
c001e3f1:	51                   	push   ecx
c001e3f2:	53                   	push   ebx
c001e3f3:	68 63 ac 02 c0       	push   0xc002ac63
c001e3f8:	e8 84 43 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e3fd:	83 c4 10             	add    esp,0x10
c001e400:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e405:	74 07                	je     c001e40e <Vm::faultHandler(regs*)+0x6d3>
c001e407:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e40b:	ed                   	in     eax,dx
c001e40c:	eb 14                	jmp    c001e422 <Vm::faultHandler(regs*)+0x6e7>
c001e40e:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e411:	66 31 db             	xor    bx,bx
c001e414:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e417:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e41b:	66 ed                	in     ax,dx
c001e41d:	0f b7 c0             	movzx  eax,ax
c001e420:	09 d8                	or     eax,ebx
c001e422:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e425:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e429:	e9 dc 00 00 00       	jmp    c001e50a <Vm::faultHandler(regs*)+0x7cf>
c001e42e:	50                   	push   eax
c001e42f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e432:	53                   	push   ebx
c001e433:	68 69 ac 02 c0       	push   0xc002ac69
c001e438:	e8 44 43 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e43d:	58                   	pop    eax
c001e43e:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e442:	5a                   	pop    edx
c001e443:	50                   	push   eax
c001e444:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e448:	50                   	push   eax
c001e449:	e8 0b f5 ff ff       	call   c001d959 <Vm::outbv(unsigned short, unsigned char)>
c001e44e:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e452:	e9 85 00 00 00       	jmp    c001e4dc <Vm::faultHandler(regs*)+0x7a1>
c001e457:	50                   	push   eax
c001e458:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e45b:	53                   	push   ebx
c001e45c:	68 72 ac 02 c0       	push   0xc002ac72
c001e461:	e8 1b 43 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e466:	83 c4 10             	add    esp,0x10
c001e469:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e46d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e472:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e475:	74 03                	je     c001e47a <Vm::faultHandler(regs*)+0x73f>
c001e477:	ef                   	out    dx,eax
c001e478:	eb ab                	jmp    c001e425 <Vm::faultHandler(regs*)+0x6ea>
c001e47a:	66 ef                	out    dx,ax
c001e47c:	eb a7                	jmp    c001e425 <Vm::faultHandler(regs*)+0x6ea>
c001e47e:	55                   	push   ebp
c001e47f:	55                   	push   ebp
c001e480:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e483:	68 7b ac 02 c0       	push   0xc002ac7b
c001e488:	e8 f4 42 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e48d:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e494:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e498:	89 04 24             	mov    DWORD PTR [esp],eax
c001e49b:	e8 a6 f4 ff ff       	call   c001d946 <Vm::inbv(unsigned short)>
c001e4a0:	0f b6 c0             	movzx  eax,al
c001e4a3:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e4a6:	eb 31                	jmp    c001e4d9 <Vm::faultHandler(regs*)+0x79e>
c001e4a8:	56                   	push   esi
c001e4a9:	56                   	push   esi
c001e4aa:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e4ad:	68 81 ac 02 c0       	push   0xc002ac81
c001e4b2:	e8 ca 42 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e4b7:	83 c4 10             	add    esp,0x10
c001e4ba:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e4bd:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e4c2:	74 03                	je     c001e4c7 <Vm::faultHandler(regs*)+0x78c>
c001e4c4:	ed                   	in     eax,dx
c001e4c5:	eb 0d                	jmp    c001e4d4 <Vm::faultHandler(regs*)+0x799>
c001e4c7:	66 ed                	in     ax,dx
c001e4c9:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e4cc:	0f b7 c0             	movzx  eax,ax
c001e4cf:	66 31 d2             	xor    dx,dx
c001e4d2:	09 d0                	or     eax,edx
c001e4d4:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e4d7:	eb 2e                	jmp    c001e507 <Vm::faultHandler(regs*)+0x7cc>
c001e4d9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e4dc:	83 c4 10             	add    esp,0x10
c001e4df:	eb 29                	jmp    c001e50a <Vm::faultHandler(regs*)+0x7cf>
c001e4e1:	50                   	push   eax
c001e4e2:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e4e5:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e4e8:	68 90 ac 02 c0       	push   0xc002ac90
c001e4ed:	e8 8f 42 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e4f2:	83 c4 10             	add    esp,0x10
c001e4f5:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e4f8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e4fd:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e500:	74 03                	je     c001e505 <Vm::faultHandler(regs*)+0x7ca>
c001e502:	ef                   	out    dx,eax
c001e503:	eb 02                	jmp    c001e507 <Vm::faultHandler(regs*)+0x7cc>
c001e505:	66 ef                	out    dx,ax
c001e507:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e50a:	b0 01                	mov    al,0x1
c001e50c:	eb 56                	jmp    c001e564 <Vm::faultHandler(regs*)+0x829>
c001e50e:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e512:	51                   	push   ecx
c001e513:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e517:	51                   	push   ecx
c001e518:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e51c:	51                   	push   ecx
c001e51d:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e521:	51                   	push   ecx
c001e522:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e526:	52                   	push   edx
c001e527:	50                   	push   eax
c001e528:	50                   	push   eax
c001e529:	68 99 ac 02 c0       	push   0xc002ac99
c001e52e:	e8 4e 42 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001e533:	83 c4 20             	add    esp,0x20
c001e536:	83 ec 0c             	sub    esp,0xc
c001e539:	6a 60                	push   0x60
c001e53b:	e8 06 f4 ff ff       	call   c001d946 <Vm::inbv(unsigned short)>
c001e540:	83 c4 10             	add    esp,0x10
c001e543:	3c 1c                	cmp    al,0x1c
c001e545:	74 04                	je     c001e54b <Vm::faultHandler(regs*)+0x810>
c001e547:	3c 5a                	cmp    al,0x5a
c001e549:	75 eb                	jne    c001e536 <Vm::faultHandler(regs*)+0x7fb>
c001e54b:	3c 1c                	cmp    al,0x1c
c001e54d:	74 04                	je     c001e553 <Vm::faultHandler(regs*)+0x818>
c001e54f:	3c 5a                	cmp    al,0x5a
c001e551:	75 0f                	jne    c001e562 <Vm::faultHandler(regs*)+0x827>
c001e553:	83 ec 0c             	sub    esp,0xc
c001e556:	6a 60                	push   0x60
c001e558:	e8 e9 f3 ff ff       	call   c001d946 <Vm::inbv(unsigned short)>
c001e55d:	83 c4 10             	add    esp,0x10
c001e560:	eb e9                	jmp    c001e54b <Vm::faultHandler(regs*)+0x810>
c001e562:	31 c0                	xor    eax,eax
c001e564:	83 c4 1c             	add    esp,0x1c
c001e567:	5b                   	pop    ebx
c001e568:	5e                   	pop    esi
c001e569:	5f                   	pop    edi
c001e56a:	5d                   	pop    ebp
c001e56b:	c3                   	ret    

c001e56c <Vm::fpuInternalTo32(unsigned long long)>:
c001e56c:	57                   	push   edi
c001e56d:	56                   	push   esi
c001e56e:	53                   	push   ebx
c001e56f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e577:	89 d6                	mov    esi,edx
c001e579:	89 d7                	mov    edi,edx
c001e57b:	89 c1                	mov    ecx,eax
c001e57d:	c1 ef 14             	shr    edi,0x14
c001e580:	89 d3                	mov    ebx,edx
c001e582:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e588:	31 d2                	xor    edx,edx
c001e58a:	89 f8                	mov    eax,edi
c001e58c:	81 e6 00 00 00 80    	and    esi,0x80000000
c001e592:	bf ff 00 00 00       	mov    edi,0xff
c001e597:	05 80 fc ff ff       	add    eax,0xfffffc80
c001e59c:	83 d2 ff             	adc    edx,0xffffffff
c001e59f:	39 c7                	cmp    edi,eax
c001e5a1:	bf 00 00 00 00       	mov    edi,0x0
c001e5a6:	19 d7                	sbb    edi,edx
c001e5a8:	72 15                	jb     c001e5bf <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001e5aa:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001e5ae:	c1 e0 17             	shl    eax,0x17
c001e5b1:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001e5b7:	09 f1                	or     ecx,esi
c001e5b9:	09 c1                	or     ecx,eax
c001e5bb:	89 cf                	mov    edi,ecx
c001e5bd:	eb 02                	jmp    c001e5c1 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001e5bf:	31 ff                	xor    edi,edi
c001e5c1:	89 f8                	mov    eax,edi
c001e5c3:	5b                   	pop    ebx
c001e5c4:	5e                   	pop    esi
c001e5c5:	5f                   	pop    edi
c001e5c6:	c3                   	ret    

c001e5c7 <Vm::fpuInternalTo64(unsigned long long)>:
c001e5c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e5cf:	c3                   	ret    

c001e5d0 <Vm::fpu32ToInternal(unsigned int)>:
c001e5d0:	57                   	push   edi
c001e5d1:	31 ff                	xor    edi,edi
c001e5d3:	56                   	push   esi
c001e5d4:	53                   	push   ebx
c001e5d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5d9:	89 cb                	mov    ebx,ecx
c001e5db:	89 ce                	mov    esi,ecx
c001e5dd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001e5e3:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001e5e9:	c1 e9 17             	shr    ecx,0x17
c001e5ec:	89 f0                	mov    eax,esi
c001e5ee:	0f b6 d1             	movzx  edx,cl
c001e5f1:	81 c2 80 03 00 00    	add    edx,0x380
c001e5f7:	89 d1                	mov    ecx,edx
c001e5f9:	89 fa                	mov    edx,edi
c001e5fb:	c1 e1 14             	shl    ecx,0x14
c001e5fe:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001e602:	c1 e0 1d             	shl    eax,0x1d
c001e605:	89 d7                	mov    edi,edx
c001e607:	89 c6                	mov    esi,eax
c001e609:	89 ca                	mov    edx,ecx
c001e60b:	89 f0                	mov    eax,esi
c001e60d:	09 fa                	or     edx,edi
c001e60f:	09 da                	or     edx,ebx
c001e611:	5b                   	pop    ebx
c001e612:	5e                   	pop    esi
c001e613:	5f                   	pop    edi
c001e614:	c3                   	ret    

c001e615 <Vm::fpu64ToInternal(unsigned long long)>:
c001e615:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e619:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e61d:	c3                   	ret    

c001e61e <Vm::fpuFloatToLong(unsigned long long)>:
c001e61e:	57                   	push   edi
c001e61f:	31 c0                	xor    eax,eax
c001e621:	56                   	push   esi
c001e622:	31 d2                	xor    edx,edx
c001e624:	53                   	push   ebx
c001e625:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e629:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e62d:	89 d9                	mov    ecx,ebx
c001e62f:	c1 e9 14             	shr    ecx,0x14
c001e632:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001e638:	89 cf                	mov    edi,ecx
c001e63a:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001e640:	78 33                	js     c001e675 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e642:	89 d9                	mov    ecx,ebx
c001e644:	89 f0                	mov    eax,esi
c001e646:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e64c:	81 c9 00 00 10 00    	or     ecx,0x100000
c001e652:	89 ca                	mov    edx,ecx
c001e654:	b9 34 00 00 00       	mov    ecx,0x34
c001e659:	29 f9                	sub    ecx,edi
c001e65b:	0f ad d0             	shrd   eax,edx,cl
c001e65e:	d3 fa                	sar    edx,cl
c001e660:	f6 c1 20             	test   cl,0x20
c001e663:	74 05                	je     c001e66a <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001e665:	89 d0                	mov    eax,edx
c001e667:	c1 fa 1f             	sar    edx,0x1f
c001e66a:	85 db                	test   ebx,ebx
c001e66c:	79 07                	jns    c001e675 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e66e:	f7 d8                	neg    eax
c001e670:	83 d2 00             	adc    edx,0x0
c001e673:	f7 da                	neg    edx
c001e675:	5b                   	pop    ebx
c001e676:	5e                   	pop    esi
c001e677:	5f                   	pop    edi
c001e678:	c3                   	ret    

c001e679 <Vm::fpuULongToFloat(unsigned long long)>:
c001e679:	57                   	push   edi
c001e67a:	31 c9                	xor    ecx,ecx
c001e67c:	56                   	push   esi
c001e67d:	53                   	push   ebx
c001e67e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e682:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e686:	0f ba e7 14          	bt     edi,0x14
c001e68a:	72 07                	jb     c001e693 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001e68c:	01 f6                	add    esi,esi
c001e68e:	11 ff                	adc    edi,edi
c001e690:	41                   	inc    ecx
c001e691:	eb f3                	jmp    c001e686 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001e693:	89 fa                	mov    edx,edi
c001e695:	89 f0                	mov    eax,esi
c001e697:	bb 33 04 00 00       	mov    ebx,0x433
c001e69c:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001e6a2:	29 cb                	sub    ebx,ecx
c001e6a4:	89 d9                	mov    ecx,ebx
c001e6a6:	5b                   	pop    ebx
c001e6a7:	c1 e1 14             	shl    ecx,0x14
c001e6aa:	5e                   	pop    esi
c001e6ab:	09 ca                	or     edx,ecx
c001e6ad:	5f                   	pop    edi
c001e6ae:	c3                   	ret    

c001e6af <Vm::fpuLongToFloat(long long)>:
c001e6af:	56                   	push   esi
c001e6b0:	31 c0                	xor    eax,eax
c001e6b2:	53                   	push   ebx
c001e6b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e6bb:	39 c8                	cmp    eax,ecx
c001e6bd:	19 d8                	sbb    eax,ebx
c001e6bf:	7d 04                	jge    c001e6c5 <Vm::fpuLongToFloat(long long)+0x16>
c001e6c1:	31 f6                	xor    esi,esi
c001e6c3:	eb 0c                	jmp    c001e6d1 <Vm::fpuLongToFloat(long long)+0x22>
c001e6c5:	f7 d9                	neg    ecx
c001e6c7:	be 01 00 00 00       	mov    esi,0x1
c001e6cc:	83 d3 00             	adc    ebx,0x0
c001e6cf:	f7 db                	neg    ebx
c001e6d1:	31 c0                	xor    eax,eax
c001e6d3:	0f ba e3 14          	bt     ebx,0x14
c001e6d7:	72 07                	jb     c001e6e0 <Vm::fpuLongToFloat(long long)+0x31>
c001e6d9:	01 c9                	add    ecx,ecx
c001e6db:	11 db                	adc    ebx,ebx
c001e6dd:	40                   	inc    eax
c001e6de:	eb f3                	jmp    c001e6d3 <Vm::fpuLongToFloat(long long)+0x24>
c001e6e0:	ba 33 04 00 00       	mov    edx,0x433
c001e6e5:	29 c2                	sub    edx,eax
c001e6e7:	89 c8                	mov    eax,ecx
c001e6e9:	c1 e2 14             	shl    edx,0x14
c001e6ec:	89 d9                	mov    ecx,ebx
c001e6ee:	89 f3                	mov    ebx,esi
c001e6f0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e6f6:	09 ca                	or     edx,ecx
c001e6f8:	84 db                	test   bl,bl
c001e6fa:	74 06                	je     c001e702 <Vm::fpuLongToFloat(long long)+0x53>
c001e6fc:	81 ca 00 00 00 80    	or     edx,0x80000000
c001e702:	5b                   	pop    ebx
c001e703:	5e                   	pop    esi
c001e704:	c3                   	ret    

c001e705 <Vm::fpuGet0()>:
c001e705:	31 c0                	xor    eax,eax
c001e707:	31 d2                	xor    edx,edx
c001e709:	c3                   	ret    

c001e70a <Vm::fpuGet1()>:
c001e70a:	b8 01 00 00 00       	mov    eax,0x1
c001e70f:	31 d2                	xor    edx,edx
c001e711:	c3                   	ret    

c001e712 <Vm::fpuGetPi()>:
c001e712:	b8 03 00 00 00       	mov    eax,0x3
c001e717:	31 d2                	xor    edx,edx
c001e719:	c3                   	ret    

c001e71a <Vm::fpuGetLog2E()>:
c001e71a:	83 ec 18             	sub    esp,0x18
c001e71d:	68 f8 ac 02 c0       	push   0xc002acf8
c001e722:	e8 74 b1 ff ff       	call   c001989b <Krnl::panic(char const*)>
c001e727:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e72c:	31 d2                	xor    edx,edx
c001e72e:	83 c4 1c             	add    esp,0x1c
c001e731:	c3                   	ret    

c001e732 <Vm::fpuGetLogE2()>:
c001e732:	83 ec 18             	sub    esp,0x18
c001e735:	68 04 ad 02 c0       	push   0xc002ad04
c001e73a:	e8 5c b1 ff ff       	call   c001989b <Krnl::panic(char const*)>
c001e73f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e744:	31 d2                	xor    edx,edx
c001e746:	83 c4 1c             	add    esp,0x1c
c001e749:	c3                   	ret    

c001e74a <Vm::fpuGetLog210()>:
c001e74a:	83 ec 18             	sub    esp,0x18
c001e74d:	68 10 ad 02 c0       	push   0xc002ad10
c001e752:	e8 44 b1 ff ff       	call   c001989b <Krnl::panic(char const*)>
c001e757:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e75c:	31 d2                	xor    edx,edx
c001e75e:	83 c4 1c             	add    esp,0x1c
c001e761:	c3                   	ret    

c001e762 <Vm::fpuGetLog102()>:
c001e762:	83 ec 18             	sub    esp,0x18
c001e765:	68 1d ad 02 c0       	push   0xc002ad1d
c001e76a:	e8 2c b1 ff ff       	call   c001989b <Krnl::panic(char const*)>
c001e76f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e774:	31 d2                	xor    edx,edx
c001e776:	83 c4 1c             	add    esp,0x1c
c001e779:	c3                   	ret    

c001e77a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001e77a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e77e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e782:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e786:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001e78a:	0f 92 c0             	setb   al
c001e78d:	c3                   	ret    

c001e78e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001e78e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e796:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001e79a:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001e79e:	09 c2                	or     edx,eax
c001e7a0:	0f 94 c0             	sete   al
c001e7a3:	c3                   	ret    

c001e7a4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001e7a4:	57                   	push   edi
c001e7a5:	56                   	push   esi
c001e7a6:	53                   	push   ebx
c001e7a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e7ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e7af:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e7b3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e7b7:	57                   	push   edi
c001e7b8:	56                   	push   esi
c001e7b9:	53                   	push   ebx
c001e7ba:	51                   	push   ecx
c001e7bb:	e8 ce ff ff ff       	call   c001e78e <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001e7c0:	83 c4 10             	add    esp,0x10
c001e7c3:	88 c2                	mov    dl,al
c001e7c5:	31 c0                	xor    eax,eax
c001e7c7:	84 d2                	test   dl,dl
c001e7c9:	75 0c                	jne    c001e7d7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001e7cb:	57                   	push   edi
c001e7cc:	56                   	push   esi
c001e7cd:	53                   	push   ebx
c001e7ce:	51                   	push   ecx
c001e7cf:	e8 a6 ff ff ff       	call   c001e77a <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001e7d4:	83 c4 10             	add    esp,0x10
c001e7d7:	83 e0 01             	and    eax,0x1
c001e7da:	5b                   	pop    ebx
c001e7db:	88 c1                	mov    cl,al
c001e7dd:	83 e2 01             	and    edx,0x1
c001e7e0:	a0 01 df 02 c0       	mov    al,ds:0xc002df01
c001e7e5:	c1 e2 06             	shl    edx,0x6
c001e7e8:	83 e0 ba             	and    eax,0xffffffba
c001e7eb:	5e                   	pop    esi
c001e7ec:	09 c8                	or     eax,ecx
c001e7ee:	5f                   	pop    edi
c001e7ef:	09 d0                	or     eax,edx
c001e7f1:	a2 01 df 02 c0       	mov    ds:0xc002df01,al
c001e7f6:	c3                   	ret    

c001e7f7 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001e7f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e7fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7ff:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001e803:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001e807:	c3                   	ret    

c001e808 <Vm::fpuAbs(unsigned long long)>:
c001e808:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e80c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e810:	c3                   	ret    

c001e811 <Vm::fpuChs(unsigned long long)>:
c001e811:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e815:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e819:	f7 d8                	neg    eax
c001e81b:	83 d2 00             	adc    edx,0x0
c001e81e:	f7 da                	neg    edx
c001e820:	c3                   	ret    

c001e821 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001e821:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001e825:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001e82a:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001e82e:	eb c7                	jmp    c001e7f7 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001e830 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001e830:	53                   	push   ebx
c001e831:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e835:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e83d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e841:	0f af ca             	imul   ecx,edx
c001e844:	0f af d8             	imul   ebx,eax
c001e847:	f7 e2                	mul    edx
c001e849:	01 d9                	add    ecx,ebx
c001e84b:	5b                   	pop    ebx
c001e84c:	01 ca                	add    edx,ecx
c001e84e:	c3                   	ret    

c001e84f <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001e84f:	83 ec 0c             	sub    esp,0xc
c001e852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e85a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e862:	e8 45 6b 00 00       	call   c00253ac <__udivdi3>
c001e867:	83 c4 1c             	add    esp,0x1c
c001e86a:	c3                   	ret    

c001e86b <Vm::fpuSquare(unsigned long long)>:
c001e86b:	50                   	push   eax
c001e86c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e870:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e874:	52                   	push   edx
c001e875:	50                   	push   eax
c001e876:	52                   	push   edx
c001e877:	50                   	push   eax
c001e878:	e8 b3 ff ff ff       	call   c001e830 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e87d:	83 c4 14             	add    esp,0x14
c001e880:	c3                   	ret    

c001e881 <Vm::fpuGetReg(int)>:
c001e881:	83 ec 0c             	sub    esp,0xc
c001e884:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e889:	76 10                	jbe    c001e89b <Vm::fpuGetReg(int)+0x1a>
c001e88b:	83 ec 0c             	sub    esp,0xc
c001e88e:	68 2a ad 02 c0       	push   0xc002ad2a
c001e893:	e8 03 b0 ff ff       	call   c001989b <Krnl::panic(char const*)>
c001e898:	83 c4 10             	add    esp,0x10
c001e89b:	a0 01 df 02 c0       	mov    al,ds:0xc002df01
c001e8a0:	b9 08 00 00 00       	mov    ecx,0x8
c001e8a5:	c0 e8 03             	shr    al,0x3
c001e8a8:	83 e0 07             	and    eax,0x7
c001e8ab:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e8af:	99                   	cdq    
c001e8b0:	f7 f9                	idiv   ecx
c001e8b2:	8b 04 d5 04 df 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd20fc]
c001e8b9:	8b 14 d5 08 df 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd20f8]
c001e8c0:	83 c4 0c             	add    esp,0xc
c001e8c3:	c3                   	ret    

c001e8c4 <Vm::fpuSetReg(int, unsigned long long)>:
c001e8c4:	57                   	push   edi
c001e8c5:	56                   	push   esi
c001e8c6:	52                   	push   edx
c001e8c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001e8cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e8cf:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e8d4:	76 10                	jbe    c001e8e6 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001e8d6:	83 ec 0c             	sub    esp,0xc
c001e8d9:	68 3d ad 02 c0       	push   0xc002ad3d
c001e8de:	e8 b8 af ff ff       	call   c001989b <Krnl::panic(char const*)>
c001e8e3:	83 c4 10             	add    esp,0x10
c001e8e6:	a0 01 df 02 c0       	mov    al,ds:0xc002df01
c001e8eb:	b9 08 00 00 00       	mov    ecx,0x8
c001e8f0:	c0 e8 03             	shr    al,0x3
c001e8f3:	83 e0 07             	and    eax,0x7
c001e8f6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e8fa:	99                   	cdq    
c001e8fb:	f7 f9                	idiv   ecx
c001e8fd:	89 34 d5 04 df 02 c0 	mov    DWORD PTR [edx*8-0x3ffd20fc],esi
c001e904:	89 3c d5 08 df 02 c0 	mov    DWORD PTR [edx*8-0x3ffd20f8],edi
c001e90b:	58                   	pop    eax
c001e90c:	5e                   	pop    esi
c001e90d:	5f                   	pop    edi
c001e90e:	c3                   	ret    

c001e90f <Vm::fpuPush(unsigned long long)>:
c001e90f:	a0 01 df 02 c0       	mov    al,ds:0xc002df01
c001e914:	c0 e8 03             	shr    al,0x3
c001e917:	83 e0 07             	and    eax,0x7
c001e91a:	83 c0 07             	add    eax,0x7
c001e91d:	88 c2                	mov    dl,al
c001e91f:	83 e0 07             	and    eax,0x7
c001e922:	83 e2 07             	and    edx,0x7
c001e925:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001e92c:	8a 15 01 df 02 c0    	mov    dl,BYTE PTR ds:0xc002df01
c001e932:	83 e2 c7             	and    edx,0xffffffc7
c001e935:	09 ca                	or     edx,ecx
c001e937:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e93b:	88 15 01 df 02 c0    	mov    BYTE PTR ds:0xc002df01,dl
c001e941:	89 0c c5 08 df 02 c0 	mov    DWORD PTR [eax*8-0x3ffd20f8],ecx
c001e948:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e94c:	89 14 c5 04 df 02 c0 	mov    DWORD PTR [eax*8-0x3ffd20fc],edx
c001e953:	a1 44 df 02 c0       	mov    eax,ds:0xc002df44
c001e958:	83 f8 08             	cmp    eax,0x8
c001e95b:	75 08                	jne    c001e965 <Vm::fpuPush(unsigned long long)+0x56>
c001e95d:	80 0d 00 df 02 c0 40 	or     BYTE PTR ds:0xc002df00,0x40
c001e964:	c3                   	ret    
c001e965:	40                   	inc    eax
c001e966:	a3 44 df 02 c0       	mov    ds:0xc002df44,eax
c001e96b:	c3                   	ret    

c001e96c <Vm::fpuPop()>:
c001e96c:	8a 0d 01 df 02 c0    	mov    cl,BYTE PTR ds:0xc002df01
c001e972:	53                   	push   ebx
c001e973:	c0 e9 03             	shr    cl,0x3
c001e976:	8a 1d 01 df 02 c0    	mov    bl,BYTE PTR ds:0xc002df01
c001e97c:	83 e1 07             	and    ecx,0x7
c001e97f:	83 e3 c7             	and    ebx,0xffffffc7
c001e982:	8b 04 cd 04 df 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd20fc]
c001e989:	8b 14 cd 08 df 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd20f8]
c001e990:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001e997:	83 e1 38             	and    ecx,0x38
c001e99a:	09 d9                	or     ecx,ebx
c001e99c:	88 0d 01 df 02 c0    	mov    BYTE PTR ds:0xc002df01,cl
c001e9a2:	8b 0d 44 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df44
c001e9a8:	85 c9                	test   ecx,ecx
c001e9aa:	74 09                	je     c001e9b5 <Vm::fpuPop()+0x49>
c001e9ac:	49                   	dec    ecx
c001e9ad:	89 0d 44 df 02 c0    	mov    DWORD PTR ds:0xc002df44,ecx
c001e9b3:	eb 07                	jmp    c001e9bc <Vm::fpuPop()+0x50>
c001e9b5:	80 0d 00 df 02 c0 40 	or     BYTE PTR ds:0xc002df00,0x40
c001e9bc:	5b                   	pop    ebx
c001e9bd:	c3                   	ret    

c001e9be <Vm::x87Handler(regs*)>:
c001e9be:	55                   	push   ebp
c001e9bf:	57                   	push   edi
c001e9c0:	56                   	push   esi
c001e9c1:	53                   	push   ebx
c001e9c2:	83 ec 1c             	sub    esp,0x1c
c001e9c5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e9c9:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001e9ce:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001e9d1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001e9d9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001e9dd:	50                   	push   eax
c001e9de:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001e9e2:	50                   	push   eax
c001e9e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e9e7:	50                   	push   eax
c001e9e8:	53                   	push   ebx
c001e9e9:	e8 de a6 ff ff       	call   c00190cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001e9ee:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001e9f1:	83 c4 10             	add    esp,0x10
c001e9f4:	89 c6                	mov    esi,eax
c001e9f6:	80 fa d9             	cmp    dl,0xd9
c001e9f9:	0f 85 52 01 00 00    	jne    c001eb51 <Vm::x87Handler(regs*)+0x193>
c001e9ff:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ea03:	8d 50 20             	lea    edx,[eax+0x20]
c001ea06:	80 fa 0e             	cmp    dl,0xe
c001ea09:	0f 87 86 00 00 00    	ja     c001ea95 <Vm::x87Handler(regs*)+0xd7>
c001ea0f:	0f b6 d2             	movzx  edx,dl
c001ea12:	ff 24 95 50 ad 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd52b0]
c001ea19:	e8 e7 fc ff ff       	call   c001e705 <Vm::fpuGet0()>
c001ea1e:	eb 05                	jmp    c001ea25 <Vm::x87Handler(regs*)+0x67>
c001ea20:	e8 e5 fc ff ff       	call   c001e70a <Vm::fpuGet1()>
c001ea25:	57                   	push   edi
c001ea26:	57                   	push   edi
c001ea27:	52                   	push   edx
c001ea28:	50                   	push   eax
c001ea29:	e8 e1 fe ff ff       	call   c001e90f <Vm::fpuPush(unsigned long long)>
c001ea2e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ea32:	83 c4 10             	add    esp,0x10
c001ea35:	b0 01                	mov    al,0x1
c001ea37:	e9 e3 09 00 00       	jmp    c001f41f <Vm::x87Handler(regs*)+0xa61>
c001ea3c:	83 ec 0c             	sub    esp,0xc
c001ea3f:	6a 00                	push   0x0
c001ea41:	e8 3b fe ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ea46:	59                   	pop    ecx
c001ea47:	5e                   	pop    esi
c001ea48:	52                   	push   edx
c001ea49:	50                   	push   eax
c001ea4a:	e8 c2 fd ff ff       	call   c001e811 <Vm::fpuChs(unsigned long long)>
c001ea4f:	eb 13                	jmp    c001ea64 <Vm::x87Handler(regs*)+0xa6>
c001ea51:	83 ec 0c             	sub    esp,0xc
c001ea54:	6a 00                	push   0x0
c001ea56:	e8 26 fe ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ea5b:	5f                   	pop    edi
c001ea5c:	5d                   	pop    ebp
c001ea5d:	52                   	push   edx
c001ea5e:	50                   	push   eax
c001ea5f:	e8 a4 fd ff ff       	call   c001e808 <Vm::fpuAbs(unsigned long long)>
c001ea64:	83 c4 0c             	add    esp,0xc
c001ea67:	52                   	push   edx
c001ea68:	50                   	push   eax
c001ea69:	6a 00                	push   0x0
c001ea6b:	e8 54 fe ff ff       	call   c001e8c4 <Vm::fpuSetReg(int, unsigned long long)>
c001ea70:	eb bc                	jmp    c001ea2e <Vm::x87Handler(regs*)+0x70>
c001ea72:	e8 d3 fc ff ff       	call   c001e74a <Vm::fpuGetLog210()>
c001ea77:	eb ac                	jmp    c001ea25 <Vm::x87Handler(regs*)+0x67>
c001ea79:	e8 9c fc ff ff       	call   c001e71a <Vm::fpuGetLog2E()>
c001ea7e:	eb a5                	jmp    c001ea25 <Vm::x87Handler(regs*)+0x67>
c001ea80:	e8 8d fc ff ff       	call   c001e712 <Vm::fpuGetPi()>
c001ea85:	eb 9e                	jmp    c001ea25 <Vm::x87Handler(regs*)+0x67>
c001ea87:	e8 d6 fc ff ff       	call   c001e762 <Vm::fpuGetLog102()>
c001ea8c:	eb 97                	jmp    c001ea25 <Vm::x87Handler(regs*)+0x67>
c001ea8e:	e8 9f fc ff ff       	call   c001e732 <Vm::fpuGetLogE2()>
c001ea93:	eb 90                	jmp    c001ea25 <Vm::x87Handler(regs*)+0x67>
c001ea95:	8d 50 40             	lea    edx,[eax+0x40]
c001ea98:	80 fa 07             	cmp    dl,0x7
c001ea9b:	77 15                	ja     c001eab2 <Vm::x87Handler(regs*)+0xf4>
c001ea9d:	83 ec 0c             	sub    esp,0xc
c001eaa0:	2d c0 00 00 00       	sub    eax,0xc0
c001eaa5:	50                   	push   eax
c001eaa6:	e8 d6 fd ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001eaab:	59                   	pop    ecx
c001eaac:	5e                   	pop    esi
c001eaad:	e9 75 ff ff ff       	jmp    c001ea27 <Vm::x87Handler(regs*)+0x69>
c001eab2:	8d 50 38             	lea    edx,[eax+0x38]
c001eab5:	80 fa 07             	cmp    dl,0x7
c001eab8:	77 3c                	ja     c001eaf6 <Vm::x87Handler(regs*)+0x138>
c001eaba:	83 ec 0c             	sub    esp,0xc
c001eabd:	2d c8 00 00 00       	sub    eax,0xc8
c001eac2:	50                   	push   eax
c001eac3:	e8 b9 fd ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001eac8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eacf:	89 c6                	mov    esi,eax
c001ead1:	89 d7                	mov    edi,edx
c001ead3:	e8 a9 fd ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ead8:	83 c4 0c             	add    esp,0xc
c001eadb:	52                   	push   edx
c001eadc:	50                   	push   eax
c001eadd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eae1:	2d c8 00 00 00       	sub    eax,0xc8
c001eae6:	50                   	push   eax
c001eae7:	e8 d8 fd ff ff       	call   c001e8c4 <Vm::fpuSetReg(int, unsigned long long)>
c001eaec:	83 c4 0c             	add    esp,0xc
c001eaef:	57                   	push   edi
c001eaf0:	56                   	push   esi
c001eaf1:	e9 73 ff ff ff       	jmp    c001ea69 <Vm::x87Handler(regs*)+0xab>
c001eaf6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eafa:	84 d2                	test   dl,dl
c001eafc:	75 0f                	jne    c001eb0d <Vm::x87Handler(regs*)+0x14f>
c001eafe:	83 ec 0c             	sub    esp,0xc
c001eb01:	ff 36                	push   DWORD PTR [esi]
c001eb03:	e8 c8 fa ff ff       	call   c001e5d0 <Vm::fpu32ToInternal(unsigned int)>
c001eb08:	e9 bf 00 00 00       	jmp    c001ebcc <Vm::x87Handler(regs*)+0x20e>
c001eb0d:	80 fa 03             	cmp    dl,0x3
c001eb10:	75 13                	jne    c001eb25 <Vm::x87Handler(regs*)+0x167>
c001eb12:	e8 55 fe ff ff       	call   c001e96c <Vm::fpuPop()>
c001eb17:	55                   	push   ebp
c001eb18:	55                   	push   ebp
c001eb19:	52                   	push   edx
c001eb1a:	50                   	push   eax
c001eb1b:	e8 4c fa ff ff       	call   c001e56c <Vm::fpuInternalTo32(unsigned long long)>
c001eb20:	e9 88 00 00 00       	jmp    c001ebad <Vm::x87Handler(regs*)+0x1ef>
c001eb25:	80 fa 05             	cmp    dl,0x5
c001eb28:	75 0e                	jne    c001eb38 <Vm::x87Handler(regs*)+0x17a>
c001eb2a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001eb2d:	66 a3 02 df 02 c0    	mov    ds:0xc002df02,ax
c001eb33:	e9 df 00 00 00       	jmp    c001ec17 <Vm::x87Handler(regs*)+0x259>
c001eb38:	31 c0                	xor    eax,eax
c001eb3a:	80 fa 07             	cmp    dl,0x7
c001eb3d:	0f 85 dc 08 00 00    	jne    c001f41f <Vm::x87Handler(regs*)+0xa61>
c001eb43:	66 a1 02 df 02 c0    	mov    ax,ds:0xc002df02
c001eb49:	66 89 06             	mov    WORD PTR [esi],ax
c001eb4c:	e9 c6 00 00 00       	jmp    c001ec17 <Vm::x87Handler(regs*)+0x259>
c001eb51:	80 fa d8             	cmp    dl,0xd8
c001eb54:	0f 84 c9 00 00 00    	je     c001ec23 <Vm::x87Handler(regs*)+0x265>
c001eb5a:	80 fa dc             	cmp    dl,0xdc
c001eb5d:	0f 84 0d 02 00 00    	je     c001ed70 <Vm::x87Handler(regs*)+0x3b2>
c001eb63:	80 fa de             	cmp    dl,0xde
c001eb66:	0f 84 cd 02 00 00    	je     c001ee39 <Vm::x87Handler(regs*)+0x47b>
c001eb6c:	80 fa dd             	cmp    dl,0xdd
c001eb6f:	0f 84 5f 04 00 00    	je     c001efd4 <Vm::x87Handler(regs*)+0x616>
c001eb75:	80 fa da             	cmp    dl,0xda
c001eb78:	0f 84 24 05 00 00    	je     c001f0a2 <Vm::x87Handler(regs*)+0x6e4>
c001eb7e:	80 fa df             	cmp    dl,0xdf
c001eb81:	0f 84 68 05 00 00    	je     c001f0ef <Vm::x87Handler(regs*)+0x731>
c001eb87:	31 c0                	xor    eax,eax
c001eb89:	80 fa db             	cmp    dl,0xdb
c001eb8c:	0f 85 8d 08 00 00    	jne    c001f41f <Vm::x87Handler(regs*)+0xa61>
c001eb92:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eb96:	80 fa 03             	cmp    dl,0x3
c001eb99:	0f 85 70 06 00 00    	jne    c001f20f <Vm::x87Handler(regs*)+0x851>
c001eb9f:	e8 c8 fd ff ff       	call   c001e96c <Vm::fpuPop()>
c001eba4:	55                   	push   ebp
c001eba5:	55                   	push   ebp
c001eba6:	52                   	push   edx
c001eba7:	50                   	push   eax
c001eba8:	e8 71 fa ff ff       	call   c001e61e <Vm::fpuFloatToLong(unsigned long long)>
c001ebad:	83 c4 10             	add    esp,0x10
c001ebb0:	89 06                	mov    DWORD PTR [esi],eax
c001ebb2:	eb 63                	jmp    c001ec17 <Vm::x87Handler(regs*)+0x259>
c001ebb4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ebb8:	84 d2                	test   dl,dl
c001ebba:	0f 85 e6 05 00 00    	jne    c001f1a6 <Vm::x87Handler(regs*)+0x7e8>
c001ebc0:	57                   	push   edi
c001ebc1:	57                   	push   edi
c001ebc2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ebc5:	ff 36                	push   DWORD PTR [esi]
c001ebc7:	e8 49 fa ff ff       	call   c001e615 <Vm::fpu64ToInternal(unsigned long long)>
c001ebcc:	5e                   	pop    esi
c001ebcd:	5f                   	pop    edi
c001ebce:	52                   	push   edx
c001ebcf:	50                   	push   eax
c001ebd0:	e8 3a fd ff ff       	call   c001e90f <Vm::fpuPush(unsigned long long)>
c001ebd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ebd9:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ebdc:	e9 51 fe ff ff       	jmp    c001ea32 <Vm::x87Handler(regs*)+0x74>
c001ebe1:	80 fa 03             	cmp    dl,0x3
c001ebe4:	0f 85 d7 06 00 00    	jne    c001f2c1 <Vm::x87Handler(regs*)+0x903>
c001ebea:	57                   	push   edi
c001ebeb:	57                   	push   edi
c001ebec:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ebef:	ff 36                	push   DWORD PTR [esi]
c001ebf1:	e8 1f fa ff ff       	call   c001e615 <Vm::fpu64ToInternal(unsigned long long)>
c001ebf6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ebfd:	89 c6                	mov    esi,eax
c001ebff:	89 d7                	mov    edi,edx
c001ec01:	e8 7b fc ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ec06:	57                   	push   edi
c001ec07:	56                   	push   esi
c001ec08:	52                   	push   edx
c001ec09:	50                   	push   eax
c001ec0a:	e8 95 fb ff ff       	call   c001e7a4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ec0f:	83 c4 20             	add    esp,0x20
c001ec12:	e8 55 fd ff ff       	call   c001e96c <Vm::fpuPop()>
c001ec17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec1b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ec1e:	e9 12 fe ff ff       	jmp    c001ea35 <Vm::x87Handler(regs*)+0x77>
c001ec23:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ec27:	8d 50 40             	lea    edx,[eax+0x40]
c001ec2a:	80 fa 07             	cmp    dl,0x7
c001ec2d:	77 29                	ja     c001ec58 <Vm::x87Handler(regs*)+0x29a>
c001ec2f:	83 ec 0c             	sub    esp,0xc
c001ec32:	2d c0 00 00 00       	sub    eax,0xc0
c001ec37:	50                   	push   eax
c001ec38:	e8 44 fc ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ec3d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec44:	89 c6                	mov    esi,eax
c001ec46:	89 d7                	mov    edi,edx
c001ec48:	e8 34 fc ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ec4d:	57                   	push   edi
c001ec4e:	56                   	push   esi
c001ec4f:	52                   	push   edx
c001ec50:	50                   	push   eax
c001ec51:	e8 a1 fb ff ff       	call   c001e7f7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ec56:	eb 2f                	jmp    c001ec87 <Vm::x87Handler(regs*)+0x2c9>
c001ec58:	8d 50 38             	lea    edx,[eax+0x38]
c001ec5b:	80 fa 07             	cmp    dl,0x7
c001ec5e:	77 2f                	ja     c001ec8f <Vm::x87Handler(regs*)+0x2d1>
c001ec60:	83 ec 0c             	sub    esp,0xc
c001ec63:	2d c8 00 00 00       	sub    eax,0xc8
c001ec68:	50                   	push   eax
c001ec69:	e8 13 fc ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ec6e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec75:	89 c6                	mov    esi,eax
c001ec77:	89 d7                	mov    edi,edx
c001ec79:	e8 03 fc ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ec7e:	57                   	push   edi
c001ec7f:	56                   	push   esi
c001ec80:	52                   	push   edx
c001ec81:	50                   	push   eax
c001ec82:	e8 a9 fb ff ff       	call   c001e830 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ec87:	83 c4 1c             	add    esp,0x1c
c001ec8a:	e9 d8 fd ff ff       	jmp    c001ea67 <Vm::x87Handler(regs*)+0xa9>
c001ec8f:	8d 50 30             	lea    edx,[eax+0x30]
c001ec92:	80 fa 07             	cmp    dl,0x7
c001ec95:	77 0d                	ja     c001eca4 <Vm::x87Handler(regs*)+0x2e6>
c001ec97:	83 ec 0c             	sub    esp,0xc
c001ec9a:	2d d0 00 00 00       	sub    eax,0xd0
c001ec9f:	e9 99 03 00 00       	jmp    c001f03d <Vm::x87Handler(regs*)+0x67f>
c001eca4:	8d 50 28             	lea    edx,[eax+0x28]
c001eca7:	80 fa 07             	cmp    dl,0x7
c001ecaa:	77 0d                	ja     c001ecb9 <Vm::x87Handler(regs*)+0x2fb>
c001ecac:	83 ec 0c             	sub    esp,0xc
c001ecaf:	2d d8 00 00 00       	sub    eax,0xd8
c001ecb4:	e9 c0 03 00 00       	jmp    c001f079 <Vm::x87Handler(regs*)+0x6bb>
c001ecb9:	8d 50 20             	lea    edx,[eax+0x20]
c001ecbc:	80 fa 07             	cmp    dl,0x7
c001ecbf:	77 1b                	ja     c001ecdc <Vm::x87Handler(regs*)+0x31e>
c001ecc1:	83 ec 0c             	sub    esp,0xc
c001ecc4:	2d e0 00 00 00       	sub    eax,0xe0
c001ecc9:	50                   	push   eax
c001ecca:	e8 b2 fb ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001eccf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ecd6:	89 c6                	mov    esi,eax
c001ecd8:	89 d7                	mov    edi,edx
c001ecda:	eb 22                	jmp    c001ecfe <Vm::x87Handler(regs*)+0x340>
c001ecdc:	8d 50 18             	lea    edx,[eax+0x18]
c001ecdf:	80 fa 07             	cmp    dl,0x7
c001ece2:	77 2d                	ja     c001ed11 <Vm::x87Handler(regs*)+0x353>
c001ece4:	83 ec 0c             	sub    esp,0xc
c001ece7:	6a 00                	push   0x0
c001ece9:	e8 93 fb ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ecee:	89 c6                	mov    esi,eax
c001ecf0:	89 d7                	mov    edi,edx
c001ecf2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ecf6:	2d e8 00 00 00       	sub    eax,0xe8
c001ecfb:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecfe:	e8 7e fb ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ed03:	57                   	push   edi
c001ed04:	56                   	push   esi
c001ed05:	52                   	push   edx
c001ed06:	50                   	push   eax
c001ed07:	e8 15 fb ff ff       	call   c001e821 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ed0c:	e9 76 ff ff ff       	jmp    c001ec87 <Vm::x87Handler(regs*)+0x2c9>
c001ed11:	8d 50 10             	lea    edx,[eax+0x10]
c001ed14:	80 fa 07             	cmp    dl,0x7
c001ed17:	77 1b                	ja     c001ed34 <Vm::x87Handler(regs*)+0x376>
c001ed19:	83 ec 0c             	sub    esp,0xc
c001ed1c:	2d f0 00 00 00       	sub    eax,0xf0
c001ed21:	50                   	push   eax
c001ed22:	e8 5a fb ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ed27:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed2e:	89 c6                	mov    esi,eax
c001ed30:	89 d7                	mov    edi,edx
c001ed32:	eb 22                	jmp    c001ed56 <Vm::x87Handler(regs*)+0x398>
c001ed34:	3c f7                	cmp    al,0xf7
c001ed36:	0f 86 d1 03 00 00    	jbe    c001f10d <Vm::x87Handler(regs*)+0x74f>
c001ed3c:	83 ec 0c             	sub    esp,0xc
c001ed3f:	6a 00                	push   0x0
c001ed41:	e8 3b fb ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ed46:	89 c6                	mov    esi,eax
c001ed48:	89 d7                	mov    edi,edx
c001ed4a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed4e:	2d f8 00 00 00       	sub    eax,0xf8
c001ed53:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed56:	e8 26 fb ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ed5b:	57                   	push   edi
c001ed5c:	56                   	push   esi
c001ed5d:	52                   	push   edx
c001ed5e:	50                   	push   eax
c001ed5f:	e8 eb fa ff ff       	call   c001e84f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ed64:	83 c4 1c             	add    esp,0x1c
c001ed67:	52                   	push   edx
c001ed68:	50                   	push   eax
c001ed69:	6a 00                	push   0x0
c001ed6b:	e9 51 02 00 00       	jmp    c001efc1 <Vm::x87Handler(regs*)+0x603>
c001ed70:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed74:	8d 50 40             	lea    edx,[eax+0x40]
c001ed77:	80 fa 07             	cmp    dl,0x7
c001ed7a:	77 37                	ja     c001edb3 <Vm::x87Handler(regs*)+0x3f5>
c001ed7c:	83 ec 0c             	sub    esp,0xc
c001ed7f:	2d c0 00 00 00       	sub    eax,0xc0
c001ed84:	50                   	push   eax
c001ed85:	e8 f7 fa ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ed8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed91:	89 c6                	mov    esi,eax
c001ed93:	89 d7                	mov    edi,edx
c001ed95:	e8 e7 fa ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ed9a:	57                   	push   edi
c001ed9b:	56                   	push   esi
c001ed9c:	52                   	push   edx
c001ed9d:	50                   	push   eax
c001ed9e:	e8 54 fa ff ff       	call   c001e7f7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001eda3:	83 c4 1c             	add    esp,0x1c
c001eda6:	52                   	push   edx
c001eda7:	50                   	push   eax
c001eda8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edac:	2d c0 00 00 00       	sub    eax,0xc0
c001edb1:	eb 3d                	jmp    c001edf0 <Vm::x87Handler(regs*)+0x432>
c001edb3:	8d 50 38             	lea    edx,[eax+0x38]
c001edb6:	80 fa 07             	cmp    dl,0x7
c001edb9:	77 3b                	ja     c001edf6 <Vm::x87Handler(regs*)+0x438>
c001edbb:	83 ec 0c             	sub    esp,0xc
c001edbe:	2d c8 00 00 00       	sub    eax,0xc8
c001edc3:	50                   	push   eax
c001edc4:	e8 b8 fa ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001edc9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001edd0:	89 c6                	mov    esi,eax
c001edd2:	89 d7                	mov    edi,edx
c001edd4:	e8 a8 fa ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001edd9:	57                   	push   edi
c001edda:	56                   	push   esi
c001eddb:	52                   	push   edx
c001eddc:	50                   	push   eax
c001eddd:	e8 4e fa ff ff       	call   c001e830 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ede2:	83 c4 1c             	add    esp,0x1c
c001ede5:	52                   	push   edx
c001ede6:	50                   	push   eax
c001ede7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edeb:	2d c8 00 00 00       	sub    eax,0xc8
c001edf0:	50                   	push   eax
c001edf1:	e9 75 fc ff ff       	jmp    c001ea6b <Vm::x87Handler(regs*)+0xad>
c001edf6:	83 c0 18             	add    eax,0x18
c001edf9:	3c 07                	cmp    al,0x7
c001edfb:	0f 87 3b 04 00 00    	ja     c001f23c <Vm::x87Handler(regs*)+0x87e>
c001ee01:	83 ec 0c             	sub    esp,0xc
c001ee04:	6a 00                	push   0x0
c001ee06:	e8 76 fa ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ee0b:	89 c6                	mov    esi,eax
c001ee0d:	89 d7                	mov    edi,edx
c001ee0f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee13:	2d e8 00 00 00       	sub    eax,0xe8
c001ee18:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee1b:	e8 61 fa ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ee20:	57                   	push   edi
c001ee21:	56                   	push   esi
c001ee22:	52                   	push   edx
c001ee23:	50                   	push   eax
c001ee24:	e8 f8 f9 ff ff       	call   c001e821 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ee29:	83 c4 1c             	add    esp,0x1c
c001ee2c:	52                   	push   edx
c001ee2d:	50                   	push   eax
c001ee2e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee32:	2d e8 00 00 00       	sub    eax,0xe8
c001ee37:	eb b7                	jmp    c001edf0 <Vm::x87Handler(regs*)+0x432>
c001ee39:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee3d:	8d 50 40             	lea    edx,[eax+0x40]
c001ee40:	80 fa 07             	cmp    dl,0x7
c001ee43:	77 3a                	ja     c001ee7f <Vm::x87Handler(regs*)+0x4c1>
c001ee45:	83 ec 0c             	sub    esp,0xc
c001ee48:	2d c0 00 00 00       	sub    eax,0xc0
c001ee4d:	50                   	push   eax
c001ee4e:	e8 2e fa ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ee53:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee5a:	89 c6                	mov    esi,eax
c001ee5c:	89 d7                	mov    edi,edx
c001ee5e:	e8 1e fa ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ee63:	57                   	push   edi
c001ee64:	56                   	push   esi
c001ee65:	52                   	push   edx
c001ee66:	50                   	push   eax
c001ee67:	e8 8b f9 ff ff       	call   c001e7f7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ee6c:	83 c4 1c             	add    esp,0x1c
c001ee6f:	52                   	push   edx
c001ee70:	50                   	push   eax
c001ee71:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee75:	2d c0 00 00 00       	sub    eax,0xc0
c001ee7a:	e9 9e 01 00 00       	jmp    c001f01d <Vm::x87Handler(regs*)+0x65f>
c001ee7f:	8d 50 20             	lea    edx,[eax+0x20]
c001ee82:	80 fa 07             	cmp    dl,0x7
c001ee85:	77 3a                	ja     c001eec1 <Vm::x87Handler(regs*)+0x503>
c001ee87:	83 ec 0c             	sub    esp,0xc
c001ee8a:	2d e0 00 00 00       	sub    eax,0xe0
c001ee8f:	50                   	push   eax
c001ee90:	e8 ec f9 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ee95:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee9c:	89 c6                	mov    esi,eax
c001ee9e:	89 d7                	mov    edi,edx
c001eea0:	e8 dc f9 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001eea5:	57                   	push   edi
c001eea6:	56                   	push   esi
c001eea7:	52                   	push   edx
c001eea8:	50                   	push   eax
c001eea9:	e8 73 f9 ff ff       	call   c001e821 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001eeae:	83 c4 1c             	add    esp,0x1c
c001eeb1:	52                   	push   edx
c001eeb2:	50                   	push   eax
c001eeb3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eeb7:	2d e0 00 00 00       	sub    eax,0xe0
c001eebc:	e9 5c 01 00 00       	jmp    c001f01d <Vm::x87Handler(regs*)+0x65f>
c001eec1:	8d 50 18             	lea    edx,[eax+0x18]
c001eec4:	80 fa 07             	cmp    dl,0x7
c001eec7:	77 3b                	ja     c001ef04 <Vm::x87Handler(regs*)+0x546>
c001eec9:	83 ec 0c             	sub    esp,0xc
c001eecc:	6a 00                	push   0x0
c001eece:	e8 ae f9 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001eed3:	89 c6                	mov    esi,eax
c001eed5:	89 d7                	mov    edi,edx
c001eed7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eedb:	2d e8 00 00 00       	sub    eax,0xe8
c001eee0:	89 04 24             	mov    DWORD PTR [esp],eax
c001eee3:	e8 99 f9 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001eee8:	57                   	push   edi
c001eee9:	56                   	push   esi
c001eeea:	52                   	push   edx
c001eeeb:	50                   	push   eax
c001eeec:	e8 30 f9 ff ff       	call   c001e821 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001eef1:	83 c4 1c             	add    esp,0x1c
c001eef4:	52                   	push   edx
c001eef5:	50                   	push   eax
c001eef6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eefa:	2d e8 00 00 00       	sub    eax,0xe8
c001eeff:	e9 19 01 00 00       	jmp    c001f01d <Vm::x87Handler(regs*)+0x65f>
c001ef04:	8d 50 38             	lea    edx,[eax+0x38]
c001ef07:	80 fa 07             	cmp    dl,0x7
c001ef0a:	77 37                	ja     c001ef43 <Vm::x87Handler(regs*)+0x585>
c001ef0c:	83 ec 0c             	sub    esp,0xc
c001ef0f:	2d c8 00 00 00       	sub    eax,0xc8
c001ef14:	50                   	push   eax
c001ef15:	e8 67 f9 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ef1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef21:	89 c6                	mov    esi,eax
c001ef23:	89 d7                	mov    edi,edx
c001ef25:	e8 57 f9 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ef2a:	57                   	push   edi
c001ef2b:	56                   	push   esi
c001ef2c:	52                   	push   edx
c001ef2d:	50                   	push   eax
c001ef2e:	e8 fd f8 ff ff       	call   c001e830 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ef33:	83 c4 1c             	add    esp,0x1c
c001ef36:	52                   	push   edx
c001ef37:	50                   	push   eax
c001ef38:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef3c:	2d c8 00 00 00       	sub    eax,0xc8
c001ef41:	eb 7d                	jmp    c001efc0 <Vm::x87Handler(regs*)+0x602>
c001ef43:	3c f7                	cmp    al,0xf7
c001ef45:	76 38                	jbe    c001ef7f <Vm::x87Handler(regs*)+0x5c1>
c001ef47:	83 ec 0c             	sub    esp,0xc
c001ef4a:	6a 00                	push   0x0
c001ef4c:	e8 30 f9 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ef51:	89 c6                	mov    esi,eax
c001ef53:	89 d7                	mov    edi,edx
c001ef55:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef59:	2d f8 00 00 00       	sub    eax,0xf8
c001ef5e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef61:	e8 1b f9 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ef66:	57                   	push   edi
c001ef67:	56                   	push   esi
c001ef68:	52                   	push   edx
c001ef69:	50                   	push   eax
c001ef6a:	e8 e0 f8 ff ff       	call   c001e84f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ef6f:	83 c4 1c             	add    esp,0x1c
c001ef72:	52                   	push   edx
c001ef73:	50                   	push   eax
c001ef74:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef78:	2d f8 00 00 00       	sub    eax,0xf8
c001ef7d:	eb 41                	jmp    c001efc0 <Vm::x87Handler(regs*)+0x602>
c001ef7f:	8d 50 10             	lea    edx,[eax+0x10]
c001ef82:	80 fa 07             	cmp    dl,0x7
c001ef85:	0f 87 5a 01 00 00    	ja     c001f0e5 <Vm::x87Handler(regs*)+0x727>
c001ef8b:	83 ec 0c             	sub    esp,0xc
c001ef8e:	2d f0 00 00 00       	sub    eax,0xf0
c001ef93:	50                   	push   eax
c001ef94:	e8 e8 f8 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001ef99:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001efa0:	89 c6                	mov    esi,eax
c001efa2:	89 d7                	mov    edi,edx
c001efa4:	e8 d8 f8 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001efa9:	57                   	push   edi
c001efaa:	56                   	push   esi
c001efab:	52                   	push   edx
c001efac:	50                   	push   eax
c001efad:	e8 9d f8 ff ff       	call   c001e84f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001efb2:	83 c4 1c             	add    esp,0x1c
c001efb5:	52                   	push   edx
c001efb6:	50                   	push   eax
c001efb7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efbb:	2d f0 00 00 00       	sub    eax,0xf0
c001efc0:	50                   	push   eax
c001efc1:	e8 fe f8 ff ff       	call   c001e8c4 <Vm::fpuSetReg(int, unsigned long long)>
c001efc6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001efca:	e8 9d f9 ff ff       	call   c001e96c <Vm::fpuPop()>
c001efcf:	e9 5e fa ff ff       	jmp    c001ea32 <Vm::x87Handler(regs*)+0x74>
c001efd4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efd8:	8d 50 30             	lea    edx,[eax+0x30]
c001efdb:	80 fa 07             	cmp    dl,0x7
c001efde:	77 1d                	ja     c001effd <Vm::x87Handler(regs*)+0x63f>
c001efe0:	83 ec 0c             	sub    esp,0xc
c001efe3:	6a 00                	push   0x0
c001efe5:	e8 97 f8 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001efea:	83 c4 0c             	add    esp,0xc
c001efed:	52                   	push   edx
c001efee:	50                   	push   eax
c001efef:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eff3:	2d d0 00 00 00       	sub    eax,0xd0
c001eff8:	e9 f3 fd ff ff       	jmp    c001edf0 <Vm::x87Handler(regs*)+0x432>
c001effd:	8d 50 28             	lea    edx,[eax+0x28]
c001f000:	80 fa 07             	cmp    dl,0x7
c001f003:	77 28                	ja     c001f02d <Vm::x87Handler(regs*)+0x66f>
c001f005:	83 ec 0c             	sub    esp,0xc
c001f008:	6a 00                	push   0x0
c001f00a:	e8 72 f8 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f00f:	83 c4 0c             	add    esp,0xc
c001f012:	52                   	push   edx
c001f013:	50                   	push   eax
c001f014:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f018:	2d d8 00 00 00       	sub    eax,0xd8
c001f01d:	50                   	push   eax
c001f01e:	e8 a1 f8 ff ff       	call   c001e8c4 <Vm::fpuSetReg(int, unsigned long long)>
c001f023:	e8 44 f9 ff ff       	call   c001e96c <Vm::fpuPop()>
c001f028:	e9 01 fa ff ff       	jmp    c001ea2e <Vm::x87Handler(regs*)+0x70>
c001f02d:	8d 50 20             	lea    edx,[eax+0x20]
c001f030:	80 fa 07             	cmp    dl,0x7
c001f033:	77 30                	ja     c001f065 <Vm::x87Handler(regs*)+0x6a7>
c001f035:	83 ec 0c             	sub    esp,0xc
c001f038:	2d e0 00 00 00       	sub    eax,0xe0
c001f03d:	50                   	push   eax
c001f03e:	e8 3e f8 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f043:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f04a:	89 c6                	mov    esi,eax
c001f04c:	89 d7                	mov    edi,edx
c001f04e:	e8 2e f8 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f053:	57                   	push   edi
c001f054:	56                   	push   esi
c001f055:	52                   	push   edx
c001f056:	50                   	push   eax
c001f057:	e8 48 f7 ff ff       	call   c001e7a4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f05c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f060:	e9 54 02 00 00       	jmp    c001f2b9 <Vm::x87Handler(regs*)+0x8fb>
c001f065:	8d 50 18             	lea    edx,[eax+0x18]
c001f068:	80 fa 07             	cmp    dl,0x7
c001f06b:	0f 87 43 fb ff ff    	ja     c001ebb4 <Vm::x87Handler(regs*)+0x1f6>
c001f071:	83 ec 0c             	sub    esp,0xc
c001f074:	2d e8 00 00 00       	sub    eax,0xe8
c001f079:	50                   	push   eax
c001f07a:	e8 02 f8 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f07f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f086:	89 c6                	mov    esi,eax
c001f088:	89 d7                	mov    edi,edx
c001f08a:	e8 f2 f7 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f08f:	57                   	push   edi
c001f090:	56                   	push   esi
c001f091:	52                   	push   edx
c001f092:	50                   	push   eax
c001f093:	e8 0c f7 ff ff       	call   c001e7a4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f098:	83 c4 20             	add    esp,0x20
c001f09b:	e8 cc f8 ff ff       	call   c001e96c <Vm::fpuPop()>
c001f0a0:	eb 62                	jmp    c001f104 <Vm::x87Handler(regs*)+0x746>
c001f0a2:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f0a6:	0f 85 0f 01 00 00    	jne    c001f1bb <Vm::x87Handler(regs*)+0x7fd>
c001f0ac:	83 ec 0c             	sub    esp,0xc
c001f0af:	6a 01                	push   0x1
c001f0b1:	e8 cb f7 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f0b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f0bd:	89 c6                	mov    esi,eax
c001f0bf:	89 d7                	mov    edi,edx
c001f0c1:	e8 bb f7 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f0c6:	57                   	push   edi
c001f0c7:	56                   	push   esi
c001f0c8:	52                   	push   edx
c001f0c9:	50                   	push   eax
c001f0ca:	e8 d5 f6 ff ff       	call   c001e7a4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f0cf:	83 c4 20             	add    esp,0x20
c001f0d2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f0d6:	e8 91 f8 ff ff       	call   c001e96c <Vm::fpuPop()>
c001f0db:	e8 8c f8 ff ff       	call   c001e96c <Vm::fpuPop()>
c001f0e0:	e9 50 f9 ff ff       	jmp    c001ea35 <Vm::x87Handler(regs*)+0x77>
c001f0e5:	3c d9                	cmp    al,0xd9
c001f0e7:	0f 85 b5 02 00 00    	jne    c001f3a2 <Vm::x87Handler(regs*)+0x9e4>
c001f0ed:	eb bd                	jmp    c001f0ac <Vm::x87Handler(regs*)+0x6ee>
c001f0ef:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f0f3:	0f 85 ea 02 00 00    	jne    c001f3e3 <Vm::x87Handler(regs*)+0xa25>
c001f0f9:	0f b7 05 00 df 02 c0 	movzx  eax,WORD PTR ds:0xc002df00
c001f100:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f104:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f108:	e9 28 f9 ff ff       	jmp    c001ea35 <Vm::x87Handler(regs*)+0x77>
c001f10d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f111:	84 d2                	test   dl,dl
c001f113:	75 0f                	jne    c001f124 <Vm::x87Handler(regs*)+0x766>
c001f115:	83 ec 0c             	sub    esp,0xc
c001f118:	ff 36                	push   DWORD PTR [esi]
c001f11a:	e8 b1 f4 ff ff       	call   c001e5d0 <Vm::fpu32ToInternal(unsigned int)>
c001f11f:	e9 2c 01 00 00       	jmp    c001f250 <Vm::x87Handler(regs*)+0x892>
c001f124:	80 fa 01             	cmp    dl,0x1
c001f127:	75 0f                	jne    c001f138 <Vm::x87Handler(regs*)+0x77a>
c001f129:	83 ec 0c             	sub    esp,0xc
c001f12c:	ff 36                	push   DWORD PTR [esi]
c001f12e:	e8 9d f4 ff ff       	call   c001e5d0 <Vm::fpu32ToInternal(unsigned int)>
c001f133:	e9 81 02 00 00       	jmp    c001f3b9 <Vm::x87Handler(regs*)+0x9fb>
c001f138:	80 fa 04             	cmp    dl,0x4
c001f13b:	75 0f                	jne    c001f14c <Vm::x87Handler(regs*)+0x78e>
c001f13d:	83 ec 0c             	sub    esp,0xc
c001f140:	ff 36                	push   DWORD PTR [esi]
c001f142:	e8 89 f4 ff ff       	call   c001e5d0 <Vm::fpu32ToInternal(unsigned int)>
c001f147:	e9 86 01 00 00       	jmp    c001f2d2 <Vm::x87Handler(regs*)+0x914>
c001f14c:	80 fa 05             	cmp    dl,0x5
c001f14f:	75 1b                	jne    c001f16c <Vm::x87Handler(regs*)+0x7ae>
c001f151:	83 ec 0c             	sub    esp,0xc
c001f154:	6a 00                	push   0x0
c001f156:	e8 26 f7 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f15b:	89 c7                	mov    edi,eax
c001f15d:	89 d5                	mov    ebp,edx
c001f15f:	58                   	pop    eax
c001f160:	ff 36                	push   DWORD PTR [esi]
c001f162:	e8 69 f4 ff ff       	call   c001e5d0 <Vm::fpu32ToInternal(unsigned int)>
c001f167:	e9 a3 01 00 00       	jmp    c001f30f <Vm::x87Handler(regs*)+0x951>
c001f16c:	80 fa 06             	cmp    dl,0x6
c001f16f:	75 0f                	jne    c001f180 <Vm::x87Handler(regs*)+0x7c2>
c001f171:	83 ec 0c             	sub    esp,0xc
c001f174:	ff 36                	push   DWORD PTR [esi]
c001f176:	e8 55 f4 ff ff       	call   c001e5d0 <Vm::fpu32ToInternal(unsigned int)>
c001f17b:	e9 ae 01 00 00       	jmp    c001f32e <Vm::x87Handler(regs*)+0x970>
c001f180:	31 c0                	xor    eax,eax
c001f182:	80 fa 07             	cmp    dl,0x7
c001f185:	0f 85 94 02 00 00    	jne    c001f41f <Vm::x87Handler(regs*)+0xa61>
c001f18b:	83 ec 0c             	sub    esp,0xc
c001f18e:	6a 00                	push   0x0
c001f190:	e8 ec f6 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f195:	89 c7                	mov    edi,eax
c001f197:	89 d5                	mov    ebp,edx
c001f199:	58                   	pop    eax
c001f19a:	ff 36                	push   DWORD PTR [esi]
c001f19c:	e8 2f f4 ff ff       	call   c001e5d0 <Vm::fpu32ToInternal(unsigned int)>
c001f1a1:	e9 cb 01 00 00       	jmp    c001f371 <Vm::x87Handler(regs*)+0x9b3>
c001f1a6:	80 fa 03             	cmp    dl,0x3
c001f1a9:	0f 85 d3 01 00 00    	jne    c001f382 <Vm::x87Handler(regs*)+0x9c4>
c001f1af:	e8 b8 f7 ff ff       	call   c001e96c <Vm::fpuPop()>
c001f1b4:	51                   	push   ecx
c001f1b5:	51                   	push   ecx
c001f1b6:	e9 de 01 00 00       	jmp    c001f399 <Vm::x87Handler(regs*)+0x9db>
c001f1bb:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f1bf:	80 fa 01             	cmp    dl,0x1
c001f1c2:	75 09                	jne    c001f1cd <Vm::x87Handler(regs*)+0x80f>
c001f1c4:	57                   	push   edi
c001f1c5:	57                   	push   edi
c001f1c6:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1c8:	e9 e3 01 00 00       	jmp    c001f3b0 <Vm::x87Handler(regs*)+0x9f2>
c001f1cd:	80 fa 04             	cmp    dl,0x4
c001f1d0:	75 12                	jne    c001f1e4 <Vm::x87Handler(regs*)+0x826>
c001f1d2:	31 d2                	xor    edx,edx
c001f1d4:	51                   	push   ecx
c001f1d5:	51                   	push   ecx
c001f1d6:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1d8:	52                   	push   edx
c001f1d9:	50                   	push   eax
c001f1da:	e8 d0 f4 ff ff       	call   c001e6af <Vm::fpuLongToFloat(long long)>
c001f1df:	e9 ee 00 00 00       	jmp    c001f2d2 <Vm::x87Handler(regs*)+0x914>
c001f1e4:	31 c0                	xor    eax,eax
c001f1e6:	80 fa 07             	cmp    dl,0x7
c001f1e9:	0f 85 30 02 00 00    	jne    c001f41f <Vm::x87Handler(regs*)+0xa61>
c001f1ef:	83 ec 0c             	sub    esp,0xc
c001f1f2:	6a 00                	push   0x0
c001f1f4:	e8 88 f6 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f1f9:	89 c7                	mov    edi,eax
c001f1fb:	89 d5                	mov    ebp,edx
c001f1fd:	58                   	pop    eax
c001f1fe:	8b 06                	mov    eax,DWORD PTR [esi]
c001f200:	5a                   	pop    edx
c001f201:	31 d2                	xor    edx,edx
c001f203:	52                   	push   edx
c001f204:	50                   	push   eax
c001f205:	e8 a5 f4 ff ff       	call   c001e6af <Vm::fpuLongToFloat(long long)>
c001f20a:	e9 62 01 00 00       	jmp    c001f371 <Vm::x87Handler(regs*)+0x9b3>
c001f20f:	84 d2                	test   dl,dl
c001f211:	75 0d                	jne    c001f220 <Vm::x87Handler(regs*)+0x862>
c001f213:	31 d2                	xor    edx,edx
c001f215:	55                   	push   ebp
c001f216:	55                   	push   ebp
c001f217:	8b 06                	mov    eax,DWORD PTR [esi]
c001f219:	52                   	push   edx
c001f21a:	50                   	push   eax
c001f21b:	e9 d3 01 00 00       	jmp    c001f3f3 <Vm::x87Handler(regs*)+0xa35>
c001f220:	31 c0                	xor    eax,eax
c001f222:	80 fa 02             	cmp    dl,0x2
c001f225:	0f 85 f4 01 00 00    	jne    c001f41f <Vm::x87Handler(regs*)+0xa61>
c001f22b:	83 ec 0c             	sub    esp,0xc
c001f22e:	6a 00                	push   0x0
c001f230:	e8 4c f6 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f235:	59                   	pop    ecx
c001f236:	5f                   	pop    edi
c001f237:	e9 6a f9 ff ff       	jmp    c001eba6 <Vm::x87Handler(regs*)+0x1e8>
c001f23c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f240:	84 d2                	test   dl,dl
c001f242:	75 2a                	jne    c001f26e <Vm::x87Handler(regs*)+0x8b0>
c001f244:	50                   	push   eax
c001f245:	50                   	push   eax
c001f246:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f249:	ff 36                	push   DWORD PTR [esi]
c001f24b:	e8 c5 f3 ff ff       	call   c001e615 <Vm::fpu64ToInternal(unsigned long long)>
c001f250:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f257:	89 c6                	mov    esi,eax
c001f259:	89 d7                	mov    edi,edx
c001f25b:	e8 21 f6 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f260:	57                   	push   edi
c001f261:	56                   	push   esi
c001f262:	52                   	push   edx
c001f263:	50                   	push   eax
c001f264:	e8 8e f5 ff ff       	call   c001e7f7 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f269:	e9 64 01 00 00       	jmp    c001f3d2 <Vm::x87Handler(regs*)+0xa14>
c001f26e:	80 fa 01             	cmp    dl,0x1
c001f271:	75 11                	jne    c001f284 <Vm::x87Handler(regs*)+0x8c6>
c001f273:	50                   	push   eax
c001f274:	50                   	push   eax
c001f275:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f278:	ff 36                	push   DWORD PTR [esi]
c001f27a:	e8 96 f3 ff ff       	call   c001e615 <Vm::fpu64ToInternal(unsigned long long)>
c001f27f:	e9 35 01 00 00       	jmp    c001f3b9 <Vm::x87Handler(regs*)+0x9fb>
c001f284:	80 fa 02             	cmp    dl,0x2
c001f287:	0f 85 54 f9 ff ff    	jne    c001ebe1 <Vm::x87Handler(regs*)+0x223>
c001f28d:	55                   	push   ebp
c001f28e:	55                   	push   ebp
c001f28f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f292:	ff 36                	push   DWORD PTR [esi]
c001f294:	e8 7c f3 ff ff       	call   c001e615 <Vm::fpu64ToInternal(unsigned long long)>
c001f299:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2a0:	89 c6                	mov    esi,eax
c001f2a2:	89 d7                	mov    edi,edx
c001f2a4:	e8 d8 f5 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f2a9:	57                   	push   edi
c001f2aa:	56                   	push   esi
c001f2ab:	52                   	push   edx
c001f2ac:	50                   	push   eax
c001f2ad:	e8 f2 f4 ff ff       	call   c001e7a4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f2b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f2b6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f2b9:	83 c4 20             	add    esp,0x20
c001f2bc:	e9 74 f7 ff ff       	jmp    c001ea35 <Vm::x87Handler(regs*)+0x77>
c001f2c1:	80 fa 04             	cmp    dl,0x4
c001f2c4:	75 2a                	jne    c001f2f0 <Vm::x87Handler(regs*)+0x932>
c001f2c6:	51                   	push   ecx
c001f2c7:	51                   	push   ecx
c001f2c8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f2cb:	ff 36                	push   DWORD PTR [esi]
c001f2cd:	e8 43 f3 ff ff       	call   c001e615 <Vm::fpu64ToInternal(unsigned long long)>
c001f2d2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2d9:	89 c6                	mov    esi,eax
c001f2db:	89 d7                	mov    edi,edx
c001f2dd:	e8 9f f5 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f2e2:	57                   	push   edi
c001f2e3:	56                   	push   esi
c001f2e4:	52                   	push   edx
c001f2e5:	50                   	push   eax
c001f2e6:	e8 36 f5 ff ff       	call   c001e821 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f2eb:	e9 e2 00 00 00       	jmp    c001f3d2 <Vm::x87Handler(regs*)+0xa14>
c001f2f0:	80 fa 05             	cmp    dl,0x5
c001f2f3:	75 28                	jne    c001f31d <Vm::x87Handler(regs*)+0x95f>
c001f2f5:	83 ec 0c             	sub    esp,0xc
c001f2f8:	6a 00                	push   0x0
c001f2fa:	e8 82 f5 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f2ff:	89 c7                	mov    edi,eax
c001f301:	89 d5                	mov    ebp,edx
c001f303:	58                   	pop    eax
c001f304:	5a                   	pop    edx
c001f305:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f308:	ff 36                	push   DWORD PTR [esi]
c001f30a:	e8 06 f3 ff ff       	call   c001e615 <Vm::fpu64ToInternal(unsigned long long)>
c001f30f:	83 c4 10             	add    esp,0x10
c001f312:	55                   	push   ebp
c001f313:	57                   	push   edi
c001f314:	52                   	push   edx
c001f315:	50                   	push   eax
c001f316:	e8 06 f5 ff ff       	call   c001e821 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f31b:	eb 60                	jmp    c001f37d <Vm::x87Handler(regs*)+0x9bf>
c001f31d:	80 fa 06             	cmp    dl,0x6
c001f320:	75 2a                	jne    c001f34c <Vm::x87Handler(regs*)+0x98e>
c001f322:	51                   	push   ecx
c001f323:	51                   	push   ecx
c001f324:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f327:	ff 36                	push   DWORD PTR [esi]
c001f329:	e8 e7 f2 ff ff       	call   c001e615 <Vm::fpu64ToInternal(unsigned long long)>
c001f32e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f335:	89 c6                	mov    esi,eax
c001f337:	89 d7                	mov    edi,edx
c001f339:	e8 43 f5 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f33e:	57                   	push   edi
c001f33f:	56                   	push   esi
c001f340:	52                   	push   edx
c001f341:	50                   	push   eax
c001f342:	e8 08 f5 ff ff       	call   c001e84f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f347:	e9 86 00 00 00       	jmp    c001f3d2 <Vm::x87Handler(regs*)+0xa14>
c001f34c:	31 c0                	xor    eax,eax
c001f34e:	80 fa 07             	cmp    dl,0x7
c001f351:	0f 85 c8 00 00 00    	jne    c001f41f <Vm::x87Handler(regs*)+0xa61>
c001f357:	83 ec 0c             	sub    esp,0xc
c001f35a:	6a 00                	push   0x0
c001f35c:	e8 20 f5 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f361:	89 c7                	mov    edi,eax
c001f363:	89 d5                	mov    ebp,edx
c001f365:	58                   	pop    eax
c001f366:	5a                   	pop    edx
c001f367:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f36a:	ff 36                	push   DWORD PTR [esi]
c001f36c:	e8 a4 f2 ff ff       	call   c001e615 <Vm::fpu64ToInternal(unsigned long long)>
c001f371:	83 c4 10             	add    esp,0x10
c001f374:	55                   	push   ebp
c001f375:	57                   	push   edi
c001f376:	52                   	push   edx
c001f377:	50                   	push   eax
c001f378:	e8 d2 f4 ff ff       	call   c001e84f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f37d:	83 c4 0c             	add    esp,0xc
c001f380:	eb 53                	jmp    c001f3d5 <Vm::x87Handler(regs*)+0xa17>
c001f382:	31 c0                	xor    eax,eax
c001f384:	80 fa 02             	cmp    dl,0x2
c001f387:	0f 85 92 00 00 00    	jne    c001f41f <Vm::x87Handler(regs*)+0xa61>
c001f38d:	83 ec 0c             	sub    esp,0xc
c001f390:	6a 00                	push   0x0
c001f392:	e8 ea f4 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f397:	59                   	pop    ecx
c001f398:	5f                   	pop    edi
c001f399:	52                   	push   edx
c001f39a:	50                   	push   eax
c001f39b:	e8 27 f2 ff ff       	call   c001e5c7 <Vm::fpuInternalTo64(unsigned long long)>
c001f3a0:	eb 70                	jmp    c001f412 <Vm::x87Handler(regs*)+0xa54>
c001f3a2:	31 c0                	xor    eax,eax
c001f3a4:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f3a9:	75 74                	jne    c001f41f <Vm::x87Handler(regs*)+0xa61>
c001f3ab:	50                   	push   eax
c001f3ac:	50                   	push   eax
c001f3ad:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f3b0:	31 d2                	xor    edx,edx
c001f3b2:	52                   	push   edx
c001f3b3:	50                   	push   eax
c001f3b4:	e8 f6 f2 ff ff       	call   c001e6af <Vm::fpuLongToFloat(long long)>
c001f3b9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3c0:	89 c6                	mov    esi,eax
c001f3c2:	89 d7                	mov    edi,edx
c001f3c4:	e8 b8 f4 ff ff       	call   c001e881 <Vm::fpuGetReg(int)>
c001f3c9:	57                   	push   edi
c001f3ca:	56                   	push   esi
c001f3cb:	52                   	push   edx
c001f3cc:	50                   	push   eax
c001f3cd:	e8 5e f4 ff ff       	call   c001e830 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f3d2:	83 c4 1c             	add    esp,0x1c
c001f3d5:	52                   	push   edx
c001f3d6:	50                   	push   eax
c001f3d7:	6a 00                	push   0x0
c001f3d9:	e8 e6 f4 ff ff       	call   c001e8c4 <Vm::fpuSetReg(int, unsigned long long)>
c001f3de:	e9 f2 f7 ff ff       	jmp    c001ebd5 <Vm::x87Handler(regs*)+0x217>
c001f3e3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f3e7:	80 fa 05             	cmp    dl,0x5
c001f3ea:	75 11                	jne    c001f3fd <Vm::x87Handler(regs*)+0xa3f>
c001f3ec:	55                   	push   ebp
c001f3ed:	55                   	push   ebp
c001f3ee:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f3f1:	ff 36                	push   DWORD PTR [esi]
c001f3f3:	e8 81 f2 ff ff       	call   c001e679 <Vm::fpuULongToFloat(unsigned long long)>
c001f3f8:	e9 cf f7 ff ff       	jmp    c001ebcc <Vm::x87Handler(regs*)+0x20e>
c001f3fd:	31 c0                	xor    eax,eax
c001f3ff:	80 fa 07             	cmp    dl,0x7
c001f402:	75 1b                	jne    c001f41f <Vm::x87Handler(regs*)+0xa61>
c001f404:	e8 63 f5 ff ff       	call   c001e96c <Vm::fpuPop()>
c001f409:	51                   	push   ecx
c001f40a:	51                   	push   ecx
c001f40b:	52                   	push   edx
c001f40c:	50                   	push   eax
c001f40d:	e8 0c f2 ff ff       	call   c001e61e <Vm::fpuFloatToLong(unsigned long long)>
c001f412:	83 c4 10             	add    esp,0x10
c001f415:	89 06                	mov    DWORD PTR [esi],eax
c001f417:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f41a:	e9 f8 f7 ff ff       	jmp    c001ec17 <Vm::x87Handler(regs*)+0x259>
c001f41f:	83 c4 1c             	add    esp,0x1c
c001f422:	5b                   	pop    ebx
c001f423:	5e                   	pop    esi
c001f424:	5f                   	pop    edi
c001f425:	5d                   	pop    ebp
c001f426:	c3                   	ret    

c001f427 <__static_initialization_and_destruction_0(int, int)>:
c001f427:	83 ec 0c             	sub    esp,0xc
c001f42a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f42f:	75 1a                	jne    c001f44b <__static_initialization_and_destruction_0(int, int)+0x24>
c001f431:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f439:	75 10                	jne    c001f44b <__static_initialization_and_destruction_0(int, int)+0x24>
c001f43b:	83 ec 0c             	sub    esp,0xc
c001f43e:	68 00 df 02 c0       	push   0xc002df00
c001f443:	e8 b8 82 00 00       	call   c0027700 <Vm::_FPUState::_FPUState()>
c001f448:	83 c4 10             	add    esp,0x10
c001f44b:	90                   	nop
c001f44c:	83 c4 0c             	add    esp,0xc
c001f44f:	c3                   	ret    

c001f450 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f450:	83 ec 0c             	sub    esp,0xc
c001f453:	83 ec 08             	sub    esp,0x8
c001f456:	68 ff ff 00 00       	push   0xffff
c001f45b:	6a 01                	push   0x1
c001f45d:	e8 c5 ff ff ff       	call   c001f427 <__static_initialization_and_destruction_0(int, int)>
c001f462:	83 c4 10             	add    esp,0x10
c001f465:	83 c4 0c             	add    esp,0xc
c001f468:	c3                   	ret    
c001f469:	90                   	nop

c001f46a <FAT::getName()>:
c001f46a:	b8 8c ad 02 c0       	mov    eax,0xc002ad8c
c001f46f:	c3                   	ret    

c001f470 <FAT::tell(void*, unsigned long long*)>:
c001f470:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f475:	75 06                	jne    c001f47d <FAT::tell(void*, unsigned long long*)+0xd>
c001f477:	b8 04 00 00 00       	mov    eax,0x4
c001f47c:	c3                   	ret    
c001f47d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f482:	75 06                	jne    c001f48a <FAT::tell(void*, unsigned long long*)+0x1a>
c001f484:	b8 04 00 00 00       	mov    eax,0x4
c001f489:	c3                   	ret    
c001f48a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f48e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f491:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f494:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f498:	89 01                	mov    DWORD PTR [ecx],eax
c001f49a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f49d:	b8 00 00 00 00       	mov    eax,0x0
c001f4a2:	c3                   	ret    
c001f4a3:	90                   	nop

c001f4a4 <FAT::stat(void*, unsigned long long*)>:
c001f4a4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f4a9:	75 06                	jne    c001f4b1 <FAT::stat(void*, unsigned long long*)+0xd>
c001f4ab:	b8 04 00 00 00       	mov    eax,0x4
c001f4b0:	c3                   	ret    
c001f4b1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f4b6:	75 06                	jne    c001f4be <FAT::stat(void*, unsigned long long*)+0x1a>
c001f4b8:	b8 04 00 00 00       	mov    eax,0x4
c001f4bd:	c3                   	ret    
c001f4be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f4c2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f4c5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f4c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f4cc:	89 01                	mov    DWORD PTR [ecx],eax
c001f4ce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f4d1:	b8 00 00 00 00       	mov    eax,0x0
c001f4d6:	c3                   	ret    
c001f4d7:	90                   	nop

c001f4d8 <FAT::~FAT()>:
c001f4d8:	83 ec 0c             	sub    esp,0xc
c001f4db:	ba 10 ae 02 c0       	mov    edx,0xc002ae10
c001f4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e4:	89 10                	mov    DWORD PTR [eax],edx
c001f4e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ea:	83 ec 0c             	sub    esp,0xc
c001f4ed:	50                   	push   eax
c001f4ee:	e8 b7 35 ff ff       	call   c0012aaa <Filesystem::~Filesystem()>
c001f4f3:	83 c4 10             	add    esp,0x10
c001f4f6:	90                   	nop
c001f4f7:	83 c4 0c             	add    esp,0xc
c001f4fa:	c3                   	ret    
c001f4fb:	90                   	nop

c001f4fc <FAT::~FAT()>:
c001f4fc:	83 ec 0c             	sub    esp,0xc
c001f4ff:	83 ec 0c             	sub    esp,0xc
c001f502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f506:	e8 cd ff ff ff       	call   c001f4d8 <FAT::~FAT()>
c001f50b:	83 c4 10             	add    esp,0x10
c001f50e:	83 ec 08             	sub    esp,0x8
c001f511:	6a 08                	push   0x8
c001f513:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f517:	e8 85 31 ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c001f51c:	83 c4 10             	add    esp,0x10
c001f51f:	83 c4 0c             	add    esp,0xc
c001f522:	c3                   	ret    
c001f523:	90                   	nop

c001f524 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001f524:	83 ec 1c             	sub    esp,0x1c
c001f527:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001f52e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001f533:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f537:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c001f53e:	83 f8 ff             	cmp    eax,0xffffffff
c001f541:	75 34                	jne    c001f577 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001f543:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f547:	88 c2                	mov    dl,al
c001f549:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f54e:	01 d0                	add    eax,edx
c001f550:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f554:	8b 15 60 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df60
c001f55a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f55e:	89 14 85 80 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2080],edx
c001f565:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f56a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f56e:	89 14 85 00 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2000],edx
c001f575:	eb 17                	jmp    c001f58e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001f577:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f57b:	88 c2                	mov    dl,al
c001f57d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f581:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c001f588:	01 d0                	add    eax,edx
c001f58a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f58e:	83 ec 04             	sub    esp,0x4
c001f591:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f595:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f599:	8d 44 24 15          	lea    eax,[esp+0x15]
c001f59d:	50                   	push   eax
c001f59e:	e8 45 75 fe ff       	call   c0006ae8 <f_getlabel>
c001f5a3:	83 c4 10             	add    esp,0x10
c001f5a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f5af:	75 07                	jne    c001f5b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001f5b1:	b8 00 00 00 00       	mov    eax,0x0
c001f5b6:	eb 05                	jmp    c001f5bd <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001f5b8:	b8 01 00 00 00       	mov    eax,0x1
c001f5bd:	83 c4 1c             	add    esp,0x1c
c001f5c0:	c3                   	ret    
c001f5c1:	90                   	nop

c001f5c2 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001f5c2:	57                   	push   edi
c001f5c3:	83 ec 58             	sub    esp,0x58
c001f5c6:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001f5ce:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f5d2:	b9 0f 00 00 00       	mov    ecx,0xf
c001f5d7:	b8 00 00 00 00       	mov    eax,0x0
c001f5dc:	fc                   	cld    
c001f5dd:	89 d7                	mov    edi,edx
c001f5df:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f5e1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f5e5:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c001f5ec:	83 f8 ff             	cmp    eax,0xffffffff
c001f5ef:	75 34                	jne    c001f625 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001f5f1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f5f5:	88 c2                	mov    dl,al
c001f5f7:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f5fc:	01 d0                	add    eax,edx
c001f5fe:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f602:	8b 15 60 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df60
c001f608:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f60c:	89 14 85 80 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2080],edx
c001f613:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f618:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001f61c:	89 14 85 00 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2000],edx
c001f623:	eb 17                	jmp    c001f63c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001f625:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f629:	88 c2                	mov    dl,al
c001f62b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f62f:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c001f636:	01 d0                	add    eax,edx
c001f638:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f63c:	83 ec 08             	sub    esp,0x8
c001f63f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001f643:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f647:	50                   	push   eax
c001f648:	e8 94 11 fe ff       	call   c00007e1 <strcat>
c001f64d:	83 c4 10             	add    esp,0x10
c001f650:	83 ec 0c             	sub    esp,0xc
c001f653:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f657:	50                   	push   eax
c001f658:	e8 79 76 fe ff       	call   c0006cd6 <f_setlabel>
c001f65d:	83 c4 10             	add    esp,0x10
c001f660:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f664:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001f669:	75 07                	jne    c001f672 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001f66b:	b8 00 00 00 00       	mov    eax,0x0
c001f670:	eb 05                	jmp    c001f677 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001f672:	b8 01 00 00 00       	mov    eax,0x1
c001f677:	83 c4 58             	add    esp,0x58
c001f67a:	5f                   	pop    edi
c001f67b:	c3                   	ret    

c001f67c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001f67c:	83 ec 2c             	sub    esp,0x2c
c001f67f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001f687:	83 ec 08             	sub    esp,0x8
c001f68a:	68 b0 ad 02 c0       	push   0xc002adb0
c001f68f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f693:	e8 e3 10 fe ff       	call   c000077b <strcmp>
c001f698:	83 c4 10             	add    esp,0x10
c001f69b:	85 c0                	test   eax,eax
c001f69d:	0f 94 c0             	sete   al
c001f6a0:	84 c0                	test   al,al
c001f6a2:	74 0d                	je     c001f6b1 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001f6a4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f6ac:	e9 a6 00 00 00       	jmp    c001f757 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f6b1:	83 ec 08             	sub    esp,0x8
c001f6b4:	68 a2 ad 02 c0       	push   0xc002ada2
c001f6b9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f6bd:	e8 b9 10 fe ff       	call   c000077b <strcmp>
c001f6c2:	83 c4 10             	add    esp,0x10
c001f6c5:	85 c0                	test   eax,eax
c001f6c7:	0f 94 c0             	sete   al
c001f6ca:	84 c0                	test   al,al
c001f6cc:	74 0a                	je     c001f6d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001f6ce:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f6d6:	eb 7f                	jmp    c001f757 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f6d8:	83 ec 08             	sub    esp,0x8
c001f6db:	68 a8 ad 02 c0       	push   0xc002ada8
c001f6e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f6e4:	e8 92 10 fe ff       	call   c000077b <strcmp>
c001f6e9:	83 c4 10             	add    esp,0x10
c001f6ec:	85 c0                	test   eax,eax
c001f6ee:	0f 94 c0             	sete   al
c001f6f1:	84 c0                	test   al,al
c001f6f3:	74 0a                	je     c001f6ff <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001f6f5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f6fd:	eb 58                	jmp    c001f757 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f6ff:	83 ec 08             	sub    esp,0x8
c001f702:	68 0c 7e 02 c0       	push   0xc0027e0c
c001f707:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f70b:	e8 6b 10 fe ff       	call   c000077b <strcmp>
c001f710:	83 c4 10             	add    esp,0x10
c001f713:	85 c0                	test   eax,eax
c001f715:	0f 94 c0             	sete   al
c001f718:	84 c0                	test   al,al
c001f71a:	74 0a                	je     c001f726 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001f71c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001f724:	eb 31                	jmp    c001f757 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f726:	83 ec 08             	sub    esp,0x8
c001f729:	68 ae ad 02 c0       	push   0xc002adae
c001f72e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f732:	e8 44 10 fe ff       	call   c000077b <strcmp>
c001f737:	83 c4 10             	add    esp,0x10
c001f73a:	85 c0                	test   eax,eax
c001f73c:	0f 94 c0             	sete   al
c001f73f:	84 c0                	test   al,al
c001f741:	74 0a                	je     c001f74d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001f743:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001f74b:	eb 0a                	jmp    c001f757 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f74d:	b8 08 00 00 00       	mov    eax,0x8
c001f752:	e9 04 01 00 00       	jmp    c001f85b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f757:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001f75e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001f763:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f767:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c001f76e:	83 f8 ff             	cmp    eax,0xffffffff
c001f771:	75 34                	jne    c001f7a7 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001f773:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f777:	88 c2                	mov    dl,al
c001f779:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f77e:	01 d0                	add    eax,edx
c001f780:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f784:	8b 15 60 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df60
c001f78a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f78e:	89 14 85 80 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2080],edx
c001f795:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f79a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f79e:	89 14 85 00 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2000],edx
c001f7a5:	eb 17                	jmp    c001f7be <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001f7a7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f7ab:	88 c2                	mov    dl,al
c001f7ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f7b1:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c001f7b8:	01 d0                	add    eax,edx
c001f7ba:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f7be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f7c2:	88 04 24             	mov    BYTE PTR [esp],al
c001f7c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001f7c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7cd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f7d5:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001f7da:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f7e2:	83 ec 0c             	sub    esp,0xc
c001f7e5:	68 00 20 00 00       	push   0x2000
c001f7ea:	e8 e5 fc fe ff       	call   c000f4d4 <malloc>
c001f7ef:	83 c4 10             	add    esp,0x10
c001f7f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f7f6:	68 00 20 00 00       	push   0x2000
c001f7fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7ff:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f803:	50                   	push   eax
c001f804:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001f808:	50                   	push   eax
c001f809:	e8 13 79 fe ff       	call   c0007121 <f_mkfs>
c001f80e:	83 c4 10             	add    esp,0x10
c001f811:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f815:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f81a:	75 07                	jne    c001f823 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001f81c:	b8 00 00 00 00       	mov    eax,0x0
c001f821:	eb 38                	jmp    c001f85b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f823:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001f828:	75 17                	jne    c001f841 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001f82a:	83 ec 0c             	sub    esp,0xc
c001f82d:	68 e0 ad 02 c0       	push   0xc002ade0
c001f832:	e8 4a 2f ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001f837:	83 c4 10             	add    esp,0x10
c001f83a:	b8 09 00 00 00       	mov    eax,0x9
c001f83f:	eb 1a                	jmp    c001f85b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f841:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f845:	83 ec 08             	sub    esp,0x8
c001f848:	50                   	push   eax
c001f849:	68 b4 ad 02 c0       	push   0xc002adb4
c001f84e:	e8 2e 2f ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c001f853:	83 c4 10             	add    esp,0x10
c001f856:	b8 01 00 00 00       	mov    eax,0x1
c001f85b:	83 c4 2c             	add    esp,0x2c
c001f85e:	c3                   	ret    
c001f85f:	90                   	nop

c001f860 <FAT::tryMount(LogicalDisk*, int)>:
c001f860:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001f866:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f86b:	83 f8 14             	cmp    eax,0x14
c001f86e:	75 17                	jne    c001f887 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001f870:	83 ec 0c             	sub    esp,0xc
c001f873:	68 c6 ad 02 c0       	push   0xc002adc6
c001f878:	e8 1e a0 ff ff       	call   c001989b <Krnl::panic(char const*)>
c001f87d:	83 c4 10             	add    esp,0x10
c001f880:	b0 00                	mov    al,0x0
c001f882:	e9 d7 01 00 00       	jmp    c001fa5e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f887:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001f88e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f894:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f89a:	3d 00 02 00 00       	cmp    eax,0x200
c001f89f:	74 07                	je     c001f8a8 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001f8a1:	b0 00                	mov    al,0x0
c001f8a3:	e9 b6 01 00 00       	jmp    c001fa5e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f8a8:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001f8b0:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f8b7:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c001f8be:	83 f8 ff             	cmp    eax,0xffffffff
c001f8c1:	74 07                	je     c001f8ca <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001f8c3:	b0 01                	mov    al,0x1
c001f8c5:	e9 94 01 00 00       	jmp    c001fa5e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f8ca:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001f8d4:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001f8dc:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001f8e3:	88 c2                	mov    dl,al
c001f8e5:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f8ea:	01 d0                	add    eax,edx
c001f8ec:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001f8f3:	8b 15 60 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df60
c001f8f9:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f900:	89 14 85 80 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2080],edx
c001f907:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f90c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001f913:	89 14 85 00 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2000],edx
c001f91a:	83 ec 0c             	sub    esp,0xc
c001f91d:	68 54 02 00 00       	push   0x254
c001f922:	e8 ad fb fe ff       	call   c000f4d4 <malloc>
c001f927:	83 c4 10             	add    esp,0x10
c001f92a:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001f931:	83 ec 04             	sub    esp,0x4
c001f934:	6a 00                	push   0x0
c001f936:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f93d:	50                   	push   eax
c001f93e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f945:	e8 95 53 fe ff       	call   c0004cdf <f_mount>
c001f94a:	83 c4 10             	add    esp,0x10
c001f94d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f954:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001f95c:	74 19                	je     c001f977 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001f95e:	83 ec 0c             	sub    esp,0xc
c001f961:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f968:	e8 87 fb fe ff       	call   c000f4f4 <rfree>
c001f96d:	83 c4 10             	add    esp,0x10
c001f970:	b0 00                	mov    al,0x0
c001f972:	e9 e7 00 00 00       	jmp    c001fa5e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f977:	83 ec 04             	sub    esp,0x4
c001f97a:	68 00 01 00 00       	push   0x100
c001f97f:	6a 00                	push   0x0
c001f981:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f988:	50                   	push   eax
c001f989:	e8 fd 0c fe ff       	call   c000068b <memset>
c001f98e:	83 c4 10             	add    esp,0x10
c001f991:	83 ec 08             	sub    esp,0x8
c001f994:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f99b:	50                   	push   eax
c001f99c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f9a3:	50                   	push   eax
c001f9a4:	e8 38 0e fe ff       	call   c00007e1 <strcat>
c001f9a9:	83 c4 10             	add    esp,0x10
c001f9ac:	83 ec 08             	sub    esp,0x8
c001f9af:	68 d4 ad 02 c0       	push   0xc002add4
c001f9b4:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f9bb:	50                   	push   eax
c001f9bc:	e8 20 0e fe ff       	call   c00007e1 <strcat>
c001f9c1:	83 c4 10             	add    esp,0x10
c001f9c4:	83 ec 04             	sub    esp,0x4
c001f9c7:	6a 01                	push   0x1
c001f9c9:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001f9d0:	50                   	push   eax
c001f9d1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f9d5:	50                   	push   eax
c001f9d6:	e8 66 53 fe ff       	call   c0004d41 <f_open>
c001f9db:	83 c4 10             	add    esp,0x10
c001f9de:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f9e5:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001f9ec:	85 c0                	test   eax,eax
c001f9ee:	74 0a                	je     c001f9fa <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001f9f0:	78 2d                	js     c001fa1f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001f9f2:	83 e8 04             	sub    eax,0x4
c001f9f5:	83 f8 01             	cmp    eax,0x1
c001f9f8:	77 25                	ja     c001fa1f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001f9fa:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001fa02:	83 ec 0c             	sub    esp,0xc
c001fa05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fa09:	50                   	push   eax
c001fa0a:	e8 84 5e fe ff       	call   c0005893 <f_close>
c001fa0f:	83 c4 10             	add    esp,0x10
c001fa12:	90                   	nop
c001fa13:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001fa1b:	74 3a                	je     c001fa57 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001fa1d:	eb 2d                	jmp    c001fa4c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001fa1f:	83 ec 0c             	sub    esp,0xc
c001fa22:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fa29:	e8 c6 fa fe ff       	call   c000f4f4 <rfree>
c001fa2e:	83 c4 10             	add    esp,0x10
c001fa31:	83 ec 04             	sub    esp,0x4
c001fa34:	6a 00                	push   0x0
c001fa36:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fa3d:	50                   	push   eax
c001fa3e:	6a 00                	push   0x0
c001fa40:	e8 9a 52 fe ff       	call   c0004cdf <f_mount>
c001fa45:	83 c4 10             	add    esp,0x10
c001fa48:	b0 00                	mov    al,0x0
c001fa4a:	eb 12                	jmp    c001fa5e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fa4c:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001fa51:	40                   	inc    eax
c001fa52:	a3 60 df 02 c0       	mov    ds:0xc002df60,eax
c001fa57:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001fa5e:	81 c4 6c 03 00 00    	add    esp,0x36c
c001fa64:	c3                   	ret    
c001fa65:	90                   	nop

c001fa66 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001fa66:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001fa6c:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001fa74:	74 0a                	je     c001fa80 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001fa76:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001fa7e:	75 0a                	jne    c001fa8a <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001fa80:	b8 04 00 00 00       	mov    eax,0x4
c001fa85:	e9 db 00 00 00       	jmp    c001fb65 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fa8a:	83 ec 08             	sub    esp,0x8
c001fa8d:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fa94:	50                   	push   eax
c001fa95:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001fa9c:	e8 fc 63 fe ff       	call   c0005e9d <f_readdir>
c001faa1:	83 c4 10             	add    esp,0x10
c001faa4:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001faab:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001fab1:	83 ec 0c             	sub    esp,0xc
c001fab4:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001fabb:	83 c0 1a             	add    eax,0x1a
c001fabe:	50                   	push   eax
c001fabf:	e8 e4 0b fe ff       	call   c00006a8 <strlen>
c001fac4:	83 c4 10             	add    esp,0x10
c001fac7:	ba 00 00 00 00       	mov    edx,0x0
c001facc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fad0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fad4:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001fadb:	0f b6 c0             	movzx  eax,al
c001fade:	83 e0 10             	and    eax,0x10
c001fae1:	74 07                	je     c001faea <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001fae3:	b8 02 00 00 00       	mov    eax,0x2
c001fae8:	eb 05                	jmp    c001faef <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001faea:	b8 01 00 00 00       	mov    eax,0x1
c001faef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001faf3:	83 ec 08             	sub    esp,0x8
c001faf6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fafd:	83 c0 1a             	add    eax,0x1a
c001fb00:	50                   	push   eax
c001fb01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fb05:	83 c0 10             	add    eax,0x10
c001fb08:	50                   	push   eax
c001fb09:	e8 1c 0c fe ff       	call   c000072a <strcpy>
c001fb0e:	83 c4 10             	add    esp,0x10
c001fb11:	83 ec 04             	sub    esp,0x4
c001fb14:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001fb1b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fb1f:	50                   	push   eax
c001fb20:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001fb27:	e8 29 0b fe ff       	call   c0000655 <memcpy>
c001fb2c:	83 c4 10             	add    esp,0x10
c001fb2f:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001fb36:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001fb3c:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001fb43:	84 c0                	test   al,al
c001fb45:	75 07                	jne    c001fb4e <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001fb47:	b8 07 00 00 00       	mov    eax,0x7
c001fb4c:	eb 17                	jmp    c001fb65 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fb4e:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001fb55:	85 c0                	test   eax,eax
c001fb57:	75 07                	jne    c001fb60 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001fb59:	b8 00 00 00 00       	mov    eax,0x0
c001fb5e:	eb 05                	jmp    c001fb65 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fb60:	b8 01 00 00 00       	mov    eax,0x1
c001fb65:	81 c4 3c 02 00 00    	add    esp,0x23c
c001fb6b:	c3                   	ret    

c001fb6c <FAT::read(void*, unsigned long, void*, int*)>:
c001fb6c:	83 ec 1c             	sub    esp,0x1c
c001fb6f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fb74:	74 07                	je     c001fb7d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001fb76:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fb7b:	75 07                	jne    c001fb84 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001fb7d:	b8 04 00 00 00       	mov    eax,0x4
c001fb82:	eb 3d                	jmp    c001fbc1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fb84:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fb88:	50                   	push   eax
c001fb89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fb8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fb91:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fb95:	e8 e3 55 fe ff       	call   c000517d <f_read>
c001fb9a:	83 c4 10             	add    esp,0x10
c001fb9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fba1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fba5:	89 c2                	mov    edx,eax
c001fba7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fbab:	89 10                	mov    DWORD PTR [eax],edx
c001fbad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbb1:	85 c0                	test   eax,eax
c001fbb3:	75 07                	jne    c001fbbc <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001fbb5:	b8 00 00 00 00       	mov    eax,0x0
c001fbba:	eb 05                	jmp    c001fbc1 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fbbc:	b8 01 00 00 00       	mov    eax,0x1
c001fbc1:	83 c4 1c             	add    esp,0x1c
c001fbc4:	c3                   	ret    
c001fbc5:	90                   	nop

c001fbc6 <FAT::write(void*, unsigned long, void*, int*)>:
c001fbc6:	83 ec 1c             	sub    esp,0x1c
c001fbc9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fbce:	74 07                	je     c001fbd7 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001fbd0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fbd5:	75 07                	jne    c001fbde <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001fbd7:	b8 04 00 00 00       	mov    eax,0x4
c001fbdc:	eb 3d                	jmp    c001fc1b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fbde:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fbe2:	50                   	push   eax
c001fbe3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fbe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fbeb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fbef:	e8 09 58 fe ff       	call   c00053fd <f_write>
c001fbf4:	83 c4 10             	add    esp,0x10
c001fbf7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbfb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbff:	89 c2                	mov    edx,eax
c001fc01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fc05:	89 10                	mov    DWORD PTR [eax],edx
c001fc07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc0b:	85 c0                	test   eax,eax
c001fc0d:	75 07                	jne    c001fc16 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001fc0f:	b8 00 00 00 00       	mov    eax,0x0
c001fc14:	eb 05                	jmp    c001fc1b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fc16:	b8 01 00 00 00       	mov    eax,0x1
c001fc1b:	83 c4 1c             	add    esp,0x1c
c001fc1e:	c3                   	ret    
c001fc1f:	90                   	nop

c001fc20 <FAT::close(void*)>:
c001fc20:	83 ec 1c             	sub    esp,0x1c
c001fc23:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fc28:	75 07                	jne    c001fc31 <FAT::close(void*)+0x11>
c001fc2a:	b8 04 00 00 00       	mov    eax,0x4
c001fc2f:	eb 36                	jmp    c001fc67 <FAT::close(void*)+0x47>
c001fc31:	83 ec 0c             	sub    esp,0xc
c001fc34:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc38:	e8 56 5c fe ff       	call   c0005893 <f_close>
c001fc3d:	83 c4 10             	add    esp,0x10
c001fc40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc44:	83 ec 0c             	sub    esp,0xc
c001fc47:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc4b:	e8 94 f8 fe ff       	call   c000f4e4 <free>
c001fc50:	83 c4 10             	add    esp,0x10
c001fc53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc57:	85 c0                	test   eax,eax
c001fc59:	75 07                	jne    c001fc62 <FAT::close(void*)+0x42>
c001fc5b:	b8 00 00 00 00       	mov    eax,0x0
c001fc60:	eb 05                	jmp    c001fc67 <FAT::close(void*)+0x47>
c001fc62:	b8 01 00 00 00       	mov    eax,0x1
c001fc67:	83 c4 1c             	add    esp,0x1c
c001fc6a:	c3                   	ret    
c001fc6b:	90                   	nop

c001fc6c <FAT::closeDir(void*)>:
c001fc6c:	83 ec 1c             	sub    esp,0x1c
c001fc6f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fc74:	75 07                	jne    c001fc7d <FAT::closeDir(void*)+0x11>
c001fc76:	b8 04 00 00 00       	mov    eax,0x4
c001fc7b:	eb 36                	jmp    c001fcb3 <FAT::closeDir(void*)+0x47>
c001fc7d:	83 ec 0c             	sub    esp,0xc
c001fc80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc84:	e8 f2 61 fe ff       	call   c0005e7b <f_closedir>
c001fc89:	83 c4 10             	add    esp,0x10
c001fc8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc90:	83 ec 0c             	sub    esp,0xc
c001fc93:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc97:	e8 48 f8 fe ff       	call   c000f4e4 <free>
c001fc9c:	83 c4 10             	add    esp,0x10
c001fc9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fca3:	85 c0                	test   eax,eax
c001fca5:	75 07                	jne    c001fcae <FAT::closeDir(void*)+0x42>
c001fca7:	b8 00 00 00 00       	mov    eax,0x0
c001fcac:	eb 05                	jmp    c001fcb3 <FAT::closeDir(void*)+0x47>
c001fcae:	b8 01 00 00 00       	mov    eax,0x1
c001fcb3:	83 c4 1c             	add    esp,0x1c
c001fcb6:	c3                   	ret    
c001fcb7:	90                   	nop

c001fcb8 <FAT::seek(void*, unsigned long long)>:
c001fcb8:	83 ec 2c             	sub    esp,0x2c
c001fcbb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fcbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fcc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fcc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fccb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001fcd0:	75 07                	jne    c001fcd9 <FAT::seek(void*, unsigned long long)+0x21>
c001fcd2:	b8 04 00 00 00       	mov    eax,0x4
c001fcd7:	eb 2f                	jmp    c001fd08 <FAT::seek(void*, unsigned long long)+0x50>
c001fcd9:	83 ec 04             	sub    esp,0x4
c001fcdc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fce0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fce4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fce8:	e8 d5 5b fe ff       	call   c00058c2 <f_lseek>
c001fced:	83 c4 10             	add    esp,0x10
c001fcf0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fcf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fcf8:	85 c0                	test   eax,eax
c001fcfa:	75 07                	jne    c001fd03 <FAT::seek(void*, unsigned long long)+0x4b>
c001fcfc:	b8 00 00 00 00       	mov    eax,0x0
c001fd01:	eb 05                	jmp    c001fd08 <FAT::seek(void*, unsigned long long)+0x50>
c001fd03:	b8 01 00 00 00       	mov    eax,0x1
c001fd08:	83 c4 2c             	add    esp,0x2c
c001fd0b:	c3                   	ret    

c001fd0c <fatWrapperReadDisk>:
c001fd0c:	83 ec 1c             	sub    esp,0x1c
c001fd0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd13:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fd17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd1b:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd1e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fd22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fd26:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fd2b:	8b 04 85 60 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30a0]
c001fd32:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fd36:	83 ec 0c             	sub    esp,0xc
c001fd39:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fd3d:	52                   	push   edx
c001fd3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd46:	50                   	push   eax
c001fd47:	e8 c2 60 ff ff       	call   c0015e0e <LogicalDisk::read(unsigned long long, int, void*)>
c001fd4c:	83 c4 20             	add    esp,0x20
c001fd4f:	83 c4 1c             	add    esp,0x1c
c001fd52:	c3                   	ret    

c001fd53 <fatWrapperWriteDisk>:
c001fd53:	83 ec 1c             	sub    esp,0x1c
c001fd56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd5a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fd5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd62:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fd69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fd6d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fd72:	8b 04 85 60 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30a0]
c001fd79:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fd7d:	83 ec 0c             	sub    esp,0xc
c001fd80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fd84:	52                   	push   edx
c001fd85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd8d:	50                   	push   eax
c001fd8e:	e8 e7 60 ff ff       	call   c0015e7a <LogicalDisk::write(unsigned long long, int, void*)>
c001fd93:	83 c4 20             	add    esp,0x20
c001fd96:	83 c4 1c             	add    esp,0x1c
c001fd99:	c3                   	ret    

c001fd9a <fatWrapperIoctl>:
c001fd9a:	53                   	push   ebx
c001fd9b:	83 ec 28             	sub    esp,0x28
c001fd9e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fda2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001fda6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001fdaa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001fdae:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001fdb3:	75 31                	jne    c001fde6 <fatWrapperIoctl+0x4c>
c001fdb5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fdb9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fdbd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fdc2:	8b 04 85 60 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30a0]
c001fdc9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fdcf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fdd5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fdd9:	66 89 02             	mov    WORD PTR [edx],ax
c001fddc:	b8 00 00 00 00       	mov    eax,0x0
c001fde1:	e9 b2 00 00 00       	jmp    c001fe98 <fatWrapperIoctl+0xfe>
c001fde6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001fdeb:	75 6a                	jne    c001fe57 <fatWrapperIoctl+0xbd>
c001fded:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fdf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fdf5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fdfa:	8b 04 85 60 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30a0]
c001fe01:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fe07:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001fe0d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001fe13:	89 c8                	mov    eax,ecx
c001fe15:	89 da                	mov    edx,ebx
c001fe17:	0f a4 c2 0a          	shld   edx,eax,0xa
c001fe1b:	c1 e0 0a             	shl    eax,0xa
c001fe1e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001fe23:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c001fe2a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001fe30:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001fe36:	89 cb                	mov    ebx,ecx
c001fe38:	c1 fb 1f             	sar    ebx,0x1f
c001fe3b:	53                   	push   ebx
c001fe3c:	51                   	push   ecx
c001fe3d:	52                   	push   edx
c001fe3e:	50                   	push   eax
c001fe3f:	e8 68 55 00 00       	call   c00253ac <__udivdi3>
c001fe44:	83 c4 10             	add    esp,0x10
c001fe47:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fe4b:	89 01                	mov    DWORD PTR [ecx],eax
c001fe4d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe50:	b8 00 00 00 00       	mov    eax,0x0
c001fe55:	eb 41                	jmp    c001fe98 <fatWrapperIoctl+0xfe>
c001fe57:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001fe5c:	75 07                	jne    c001fe65 <fatWrapperIoctl+0xcb>
c001fe5e:	b8 00 00 00 00       	mov    eax,0x0
c001fe63:	eb 33                	jmp    c001fe98 <fatWrapperIoctl+0xfe>
c001fe65:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001fe6a:	75 19                	jne    c001fe85 <fatWrapperIoctl+0xeb>
c001fe6c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fe70:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fe74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fe78:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fe7e:	b8 00 00 00 00       	mov    eax,0x0
c001fe83:	eb 13                	jmp    c001fe98 <fatWrapperIoctl+0xfe>
c001fe85:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001fe8a:	75 07                	jne    c001fe93 <fatWrapperIoctl+0xf9>
c001fe8c:	b8 00 00 00 00       	mov    eax,0x0
c001fe91:	eb 05                	jmp    c001fe98 <fatWrapperIoctl+0xfe>
c001fe93:	b8 04 00 00 00       	mov    eax,0x4
c001fe98:	83 c4 28             	add    esp,0x28
c001fe9b:	5b                   	pop    ebx
c001fe9c:	c3                   	ret    
c001fe9d:	90                   	nop

c001fe9e <FAT::FAT()>:
c001fe9e:	83 ec 1c             	sub    esp,0x1c
c001fea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fea5:	83 ec 0c             	sub    esp,0xc
c001fea8:	50                   	push   eax
c001fea9:	e8 d8 2b ff ff       	call   c0012a86 <Filesystem::Filesystem()>
c001feae:	83 c4 10             	add    esp,0x10
c001feb1:	ba 10 ae 02 c0       	mov    edx,0xc002ae10
c001feb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001feba:	89 10                	mov    DWORD PTR [eax],edx
c001febc:	c7 05 60 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df60,0x0
c001fec6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fece:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001fed3:	7f 15                	jg     c001feea <FAT::FAT()+0x4c>
c001fed5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fed9:	c7 04 85 80 df 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2080],0xffffffff
c001fee4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fee8:	eb e4                	jmp    c001fece <FAT::FAT()+0x30>
c001feea:	90                   	nop
c001feeb:	83 c4 1c             	add    esp,0x1c
c001feee:	c3                   	ret    
c001feef:	90                   	nop

c001fef0 <FAT::fixFilepath(char*)>:
c001fef0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fef4:	8a 00                	mov    al,BYTE PTR [eax]
c001fef6:	3c 40                	cmp    al,0x40
c001fef8:	7e 2c                	jle    c001ff26 <FAT::fixFilepath(char*)+0x36>
c001fefa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fefe:	8a 00                	mov    al,BYTE PTR [eax]
c001ff00:	83 e8 41             	sub    eax,0x41
c001ff03:	88 c2                	mov    dl,al
c001ff05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff09:	88 10                	mov    BYTE PTR [eax],dl
c001ff0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff0f:	8a 00                	mov    al,BYTE PTR [eax]
c001ff11:	0f be c0             	movsx  eax,al
c001ff14:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c001ff1b:	83 c0 30             	add    eax,0x30
c001ff1e:	88 c2                	mov    dl,al
c001ff20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff24:	88 10                	mov    BYTE PTR [eax],dl
c001ff26:	90                   	nop
c001ff27:	c3                   	ret    

c001ff28 <FAT::open(char const*, void**, FileOpenMode)>:
c001ff28:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ff2e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ff36:	74 0a                	je     c001ff42 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001ff38:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ff40:	75 0a                	jne    c001ff4c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001ff42:	b8 04 00 00 00       	mov    eax,0x4
c001ff47:	e9 fd 00 00 00       	jmp    c0020049 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001ff4c:	83 ec 08             	sub    esp,0x8
c001ff4f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ff56:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ff5a:	50                   	push   eax
c001ff5b:	e8 ca 07 fe ff       	call   c000072a <strcpy>
c001ff60:	83 c4 10             	add    esp,0x10
c001ff63:	83 ec 08             	sub    esp,0x8
c001ff66:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ff6a:	50                   	push   eax
c001ff6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ff72:	e8 79 ff ff ff       	call   c001fef0 <FAT::fixFilepath(char*)>
c001ff77:	83 c4 10             	add    esp,0x10
c001ff7a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001ff82:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ff89:	83 e0 01             	and    eax,0x1
c001ff8c:	74 08                	je     c001ff96 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001ff8e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001ff96:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ff9d:	83 e0 04             	and    eax,0x4
c001ffa0:	74 10                	je     c001ffb2 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001ffa2:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001ffaa:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ffb2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ffb9:	83 e0 02             	and    eax,0x2
c001ffbc:	74 08                	je     c001ffc6 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001ffbe:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ffc6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ffcd:	83 e0 08             	and    eax,0x8
c001ffd0:	74 08                	je     c001ffda <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001ffd2:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001ffda:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ffe1:	83 e0 10             	and    eax,0x10
c001ffe4:	74 08                	je     c001ffee <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001ffe6:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001ffee:	83 ec 0c             	sub    esp,0xc
c001fff1:	68 50 02 00 00       	push   0x250
c001fff6:	e8 d9 f4 fe ff       	call   c000f4d4 <malloc>
c001fffb:	83 c4 10             	add    esp,0x10
c001fffe:	89 c2                	mov    edx,eax
c0020000:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020007:	89 10                	mov    DWORD PTR [eax],edx
c0020009:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020011:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020018:	8b 00                	mov    eax,DWORD PTR [eax]
c002001a:	83 ec 04             	sub    esp,0x4
c002001d:	52                   	push   edx
c002001e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020022:	52                   	push   edx
c0020023:	50                   	push   eax
c0020024:	e8 18 4d fe ff       	call   c0004d41 <f_open>
c0020029:	83 c4 10             	add    esp,0x10
c002002c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020033:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c002003b:	74 07                	je     c0020044 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002003d:	b8 01 00 00 00       	mov    eax,0x1
c0020042:	eb 05                	jmp    c0020049 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020044:	b8 00 00 00 00       	mov    eax,0x0
c0020049:	81 c4 1c 01 00 00    	add    esp,0x11c
c002004f:	c3                   	ret    

c0020050 <FAT::openDir(char const*, void**)>:
c0020050:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020056:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002005e:	74 0a                	je     c002006a <FAT::openDir(char const*, void**)+0x1a>
c0020060:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020068:	75 07                	jne    c0020071 <FAT::openDir(char const*, void**)+0x21>
c002006a:	b8 04 00 00 00       	mov    eax,0x4
c002006f:	eb 7d                	jmp    c00200ee <FAT::openDir(char const*, void**)+0x9e>
c0020071:	83 ec 08             	sub    esp,0x8
c0020074:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002007b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002007f:	50                   	push   eax
c0020080:	e8 a5 06 fe ff       	call   c000072a <strcpy>
c0020085:	83 c4 10             	add    esp,0x10
c0020088:	83 ec 08             	sub    esp,0x8
c002008b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002008f:	50                   	push   eax
c0020090:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020097:	e8 54 fe ff ff       	call   c001fef0 <FAT::fixFilepath(char*)>
c002009c:	83 c4 10             	add    esp,0x10
c002009f:	83 ec 0c             	sub    esp,0xc
c00200a2:	6a 4c                	push   0x4c
c00200a4:	e8 2b f4 fe ff       	call   c000f4d4 <malloc>
c00200a9:	83 c4 10             	add    esp,0x10
c00200ac:	89 c2                	mov    edx,eax
c00200ae:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00200b5:	89 10                	mov    DWORD PTR [eax],edx
c00200b7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00200be:	8b 00                	mov    eax,DWORD PTR [eax]
c00200c0:	83 ec 08             	sub    esp,0x8
c00200c3:	8d 54 24 14          	lea    edx,[esp+0x14]
c00200c7:	52                   	push   edx
c00200c8:	50                   	push   eax
c00200c9:	e8 ab 5c fe ff       	call   c0005d79 <f_opendir>
c00200ce:	83 c4 10             	add    esp,0x10
c00200d1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00200d8:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00200e0:	74 07                	je     c00200e9 <FAT::openDir(char const*, void**)+0x99>
c00200e2:	b8 01 00 00 00       	mov    eax,0x1
c00200e7:	eb 05                	jmp    c00200ee <FAT::openDir(char const*, void**)+0x9e>
c00200e9:	b8 00 00 00 00       	mov    eax,0x0
c00200ee:	81 c4 1c 01 00 00    	add    esp,0x11c
c00200f4:	c3                   	ret    
c00200f5:	90                   	nop

c00200f6 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00200f6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00200fc:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020104:	75 0a                	jne    c0020110 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020106:	b8 04 00 00 00       	mov    eax,0x4
c002010b:	e9 c9 00 00 00       	jmp    c00201d9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020110:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020118:	75 0a                	jne    c0020124 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002011a:	b8 04 00 00 00       	mov    eax,0x4
c002011f:	e9 b5 00 00 00       	jmp    c00201d9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020124:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002012c:	75 0a                	jne    c0020138 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002012e:	b8 04 00 00 00       	mov    eax,0x4
c0020133:	e9 a1 00 00 00       	jmp    c00201d9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020138:	83 ec 08             	sub    esp,0x8
c002013b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020142:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020149:	50                   	push   eax
c002014a:	e8 db 05 fe ff       	call   c000072a <strcpy>
c002014f:	83 c4 10             	add    esp,0x10
c0020152:	83 ec 08             	sub    esp,0x8
c0020155:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002015c:	50                   	push   eax
c002015d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020164:	e8 87 fd ff ff       	call   c001fef0 <FAT::fixFilepath(char*)>
c0020169:	83 c4 10             	add    esp,0x10
c002016c:	83 ec 08             	sub    esp,0x8
c002016f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020173:	50                   	push   eax
c0020174:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002017b:	50                   	push   eax
c002017c:	e8 b7 5d fe ff       	call   c0005f38 <f_stat>
c0020181:	83 c4 10             	add    esp,0x10
c0020184:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002018b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020192:	85 c0                	test   eax,eax
c0020194:	74 07                	je     c002019d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020196:	83 f8 04             	cmp    eax,0x4
c0020199:	74 32                	je     c00201cd <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002019b:	eb 37                	jmp    c00201d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002019d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00201a1:	0f b6 c0             	movzx  eax,al
c00201a4:	83 e0 10             	and    eax,0x10
c00201a7:	0f 95 c2             	setne  dl
c00201aa:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00201b1:	88 10                	mov    BYTE PTR [eax],dl
c00201b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00201b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00201ba:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00201c1:	89 01                	mov    DWORD PTR [ecx],eax
c00201c3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00201c6:	b8 00 00 00 00       	mov    eax,0x0
c00201cb:	eb 0c                	jmp    c00201d9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00201cd:	b8 02 00 00 00       	mov    eax,0x2
c00201d2:	eb 05                	jmp    c00201d9 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00201d4:	b8 01 00 00 00       	mov    eax,0x1
c00201d9:	81 c4 2c 02 00 00    	add    esp,0x22c
c00201df:	c3                   	ret    

c00201e0 <FAT::unlink(char const*)>:
c00201e0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00201e6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00201ee:	75 07                	jne    c00201f7 <FAT::unlink(char const*)+0x17>
c00201f0:	b8 04 00 00 00       	mov    eax,0x4
c00201f5:	eb 5c                	jmp    c0020253 <FAT::unlink(char const*)+0x73>
c00201f7:	83 ec 08             	sub    esp,0x8
c00201fa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020201:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020205:	50                   	push   eax
c0020206:	e8 1f 05 fe ff       	call   c000072a <strcpy>
c002020b:	83 c4 10             	add    esp,0x10
c002020e:	83 ec 08             	sub    esp,0x8
c0020211:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020215:	50                   	push   eax
c0020216:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002021d:	e8 ce fc ff ff       	call   c001fef0 <FAT::fixFilepath(char*)>
c0020222:	83 c4 10             	add    esp,0x10
c0020225:	83 ec 0c             	sub    esp,0xc
c0020228:	8d 44 24 18          	lea    eax,[esp+0x18]
c002022c:	50                   	push   eax
c002022d:	e8 58 60 fe ff       	call   c000628a <f_unlink>
c0020232:	83 c4 10             	add    esp,0x10
c0020235:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002023c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020243:	85 c0                	test   eax,eax
c0020245:	75 07                	jne    c002024e <FAT::unlink(char const*)+0x6e>
c0020247:	b8 00 00 00 00       	mov    eax,0x0
c002024c:	eb 05                	jmp    c0020253 <FAT::unlink(char const*)+0x73>
c002024e:	b8 01 00 00 00       	mov    eax,0x1
c0020253:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020259:	c3                   	ret    

c002025a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002025a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020260:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020267:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002026e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020272:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020276:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002027e:	75 0a                	jne    c002028a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020280:	b8 04 00 00 00       	mov    eax,0x4
c0020285:	e9 1c 01 00 00       	jmp    c00203a6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002028a:	83 ec 08             	sub    esp,0x8
c002028d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020294:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020298:	50                   	push   eax
c0020299:	e8 8c 04 fe ff       	call   c000072a <strcpy>
c002029e:	83 c4 10             	add    esp,0x10
c00202a1:	83 ec 08             	sub    esp,0x8
c00202a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00202a8:	50                   	push   eax
c00202a9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00202b0:	e8 3b fc ff ff       	call   c001fef0 <FAT::fixFilepath(char*)>
c00202b5:	83 c4 10             	add    esp,0x10
c00202b8:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00202c0:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00202c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00202cd:	83 e0 01             	and    eax,0x1
c00202d0:	74 08                	je     c00202da <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00202d2:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00202da:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00202df:	83 e0 02             	and    eax,0x2
c00202e2:	74 08                	je     c00202ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00202e4:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00202ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00202f1:	83 e0 04             	and    eax,0x4
c00202f4:	74 08                	je     c00202fe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00202f6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00202fe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020303:	83 e0 08             	and    eax,0x8
c0020306:	74 08                	je     c0020310 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020308:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020310:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020315:	83 e0 01             	and    eax,0x1
c0020318:	74 08                	je     c0020322 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002031a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020322:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020327:	83 e0 02             	and    eax,0x2
c002032a:	74 08                	je     c0020334 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002032c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020334:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020339:	83 e0 04             	and    eax,0x4
c002033c:	74 08                	je     c0020346 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002033e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020346:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002034b:	83 e0 08             	and    eax,0x8
c002034e:	74 08                	je     c0020358 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020350:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020358:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002035f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020366:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002036e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020376:	83 ec 04             	sub    esp,0x4
c0020379:	52                   	push   edx
c002037a:	50                   	push   eax
c002037b:	8d 44 24 24          	lea    eax,[esp+0x24]
c002037f:	50                   	push   eax
c0020380:	e8 a7 65 fe ff       	call   c000692c <f_chmod>
c0020385:	83 c4 10             	add    esp,0x10
c0020388:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002038f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020396:	85 c0                	test   eax,eax
c0020398:	75 07                	jne    c00203a1 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002039a:	b8 00 00 00 00       	mov    eax,0x0
c002039f:	eb 05                	jmp    c00203a6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00203a1:	b8 01 00 00 00       	mov    eax,0x1
c00203a6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00203ac:	c3                   	ret    
c00203ad:	90                   	nop

c00203ae <FAT::rename(char const*, char const*)>:
c00203ae:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00203b4:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00203bc:	74 0a                	je     c00203c8 <FAT::rename(char const*, char const*)+0x1a>
c00203be:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00203c6:	75 0a                	jne    c00203d2 <FAT::rename(char const*, char const*)+0x24>
c00203c8:	b8 04 00 00 00       	mov    eax,0x4
c00203cd:	e9 98 00 00 00       	jmp    c002046a <FAT::rename(char const*, char const*)+0xbc>
c00203d2:	83 ec 08             	sub    esp,0x8
c00203d5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00203dc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00203e3:	50                   	push   eax
c00203e4:	e8 41 03 fe ff       	call   c000072a <strcpy>
c00203e9:	83 c4 10             	add    esp,0x10
c00203ec:	83 ec 08             	sub    esp,0x8
c00203ef:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00203f6:	50                   	push   eax
c00203f7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00203fe:	e8 ed fa ff ff       	call   c001fef0 <FAT::fixFilepath(char*)>
c0020403:	83 c4 10             	add    esp,0x10
c0020406:	83 ec 08             	sub    esp,0x8
c0020409:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020410:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020414:	50                   	push   eax
c0020415:	e8 10 03 fe ff       	call   c000072a <strcpy>
c002041a:	83 c4 10             	add    esp,0x10
c002041d:	83 ec 08             	sub    esp,0x8
c0020420:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020424:	50                   	push   eax
c0020425:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002042c:	e8 bf fa ff ff       	call   c001fef0 <FAT::fixFilepath(char*)>
c0020431:	83 c4 10             	add    esp,0x10
c0020434:	83 ec 08             	sub    esp,0x8
c0020437:	8d 44 24 14          	lea    eax,[esp+0x14]
c002043b:	50                   	push   eax
c002043c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020443:	50                   	push   eax
c0020444:	e8 f0 61 fe ff       	call   c0006639 <f_rename>
c0020449:	83 c4 10             	add    esp,0x10
c002044c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020453:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002045a:	85 c0                	test   eax,eax
c002045c:	75 07                	jne    c0020465 <FAT::rename(char const*, char const*)+0xb7>
c002045e:	b8 00 00 00 00       	mov    eax,0x0
c0020463:	eb 05                	jmp    c002046a <FAT::rename(char const*, char const*)+0xbc>
c0020465:	b8 01 00 00 00       	mov    eax,0x1
c002046a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020470:	c3                   	ret    
c0020471:	90                   	nop

c0020472 <FAT::mkdir(char const*)>:
c0020472:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020478:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020480:	75 07                	jne    c0020489 <FAT::mkdir(char const*)+0x17>
c0020482:	b8 04 00 00 00       	mov    eax,0x4
c0020487:	eb 5c                	jmp    c00204e5 <FAT::mkdir(char const*)+0x73>
c0020489:	83 ec 08             	sub    esp,0x8
c002048c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020493:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020497:	50                   	push   eax
c0020498:	e8 8d 02 fe ff       	call   c000072a <strcpy>
c002049d:	83 c4 10             	add    esp,0x10
c00204a0:	83 ec 08             	sub    esp,0x8
c00204a3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00204a7:	50                   	push   eax
c00204a8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00204af:	e8 3c fa ff ff       	call   c001fef0 <FAT::fixFilepath(char*)>
c00204b4:	83 c4 10             	add    esp,0x10
c00204b7:	83 ec 0c             	sub    esp,0xc
c00204ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00204be:	50                   	push   eax
c00204bf:	e8 49 5f fe ff       	call   c000640d <f_mkdir>
c00204c4:	83 c4 10             	add    esp,0x10
c00204c7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00204ce:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00204d5:	85 c0                	test   eax,eax
c00204d7:	75 07                	jne    c00204e0 <FAT::mkdir(char const*)+0x6e>
c00204d9:	b8 00 00 00 00       	mov    eax,0x0
c00204de:	eb 05                	jmp    c00204e5 <FAT::mkdir(char const*)+0x73>
c00204e0:	b8 01 00 00 00       	mov    eax,0x1
c00204e5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00204eb:	c3                   	ret    

c00204ec <FAT::exists(char const*)>:
c00204ec:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00204f2:	83 ec 08             	sub    esp,0x8
c00204f5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00204fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020500:	50                   	push   eax
c0020501:	e8 24 02 fe ff       	call   c000072a <strcpy>
c0020506:	83 c4 10             	add    esp,0x10
c0020509:	83 ec 08             	sub    esp,0x8
c002050c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020510:	50                   	push   eax
c0020511:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020518:	e8 d3 f9 ff ff       	call   c001fef0 <FAT::fixFilepath(char*)>
c002051d:	83 c4 10             	add    esp,0x10
c0020520:	83 ec 08             	sub    esp,0x8
c0020523:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002052a:	50                   	push   eax
c002052b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002052f:	50                   	push   eax
c0020530:	e8 03 5a fe ff       	call   c0005f38 <f_stat>
c0020535:	83 c4 10             	add    esp,0x10
c0020538:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002053f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020546:	85 c0                	test   eax,eax
c0020548:	75 04                	jne    c002054e <FAT::exists(char const*)+0x62>
c002054a:	b0 01                	mov    al,0x1
c002054c:	eb 02                	jmp    c0020550 <FAT::exists(char const*)+0x64>
c002054e:	b0 00                	mov    al,0x0
c0020550:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020556:	c3                   	ret    
c0020557:	90                   	nop

c0020558 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020558:	b8 08 00 00 00       	mov    eax,0x8
c002055d:	c3                   	ret    

c002055e <ISO9660::seek(void*, unsigned long long)>:
c002055e:	53                   	push   ebx
c002055f:	b8 04 00 00 00       	mov    eax,0x4
c0020564:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020568:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002056c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020570:	85 d2                	test   edx,edx
c0020572:	74 17                	je     c002058b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020574:	89 c8                	mov    eax,ecx
c0020576:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020579:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002057c:	b8 01 00 00 00       	mov    eax,0x1
c0020581:	73 08                	jae    c002058b <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020583:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020586:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020589:	31 c0                	xor    eax,eax
c002058b:	5b                   	pop    ebx
c002058c:	c3                   	ret    
c002058d:	90                   	nop

c002058e <ISO9660::tell(void*, unsigned long long*)>:
c002058e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020592:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020596:	85 d2                	test   edx,edx
c0020598:	74 12                	je     c00205ac <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002059a:	85 c0                	test   eax,eax
c002059c:	74 0e                	je     c00205ac <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002059e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00205a1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00205a4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00205a7:	89 10                	mov    DWORD PTR [eax],edx
c00205a9:	31 c0                	xor    eax,eax
c00205ab:	c3                   	ret    
c00205ac:	b8 04 00 00 00       	mov    eax,0x4
c00205b1:	c3                   	ret    

c00205b2 <ISO9660::getName()>:
c00205b2:	b8 6c ae 02 c0       	mov    eax,0xc002ae6c
c00205b7:	c3                   	ret    

c00205b8 <ISO9660::stat(void*, unsigned long long*)>:
c00205b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00205bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205c0:	85 d2                	test   edx,edx
c00205c2:	74 12                	je     c00205d6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00205c4:	85 c0                	test   eax,eax
c00205c6:	74 0e                	je     c00205d6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00205c8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00205cb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00205ce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00205d1:	89 10                	mov    DWORD PTR [eax],edx
c00205d3:	31 c0                	xor    eax,eax
c00205d5:	c3                   	ret    
c00205d6:	b8 04 00 00 00       	mov    eax,0x4
c00205db:	c3                   	ret    

c00205dc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00205dc:	b8 01 00 00 00       	mov    eax,0x1
c00205e1:	c3                   	ret    

c00205e2 <ISO9660::unlink(char const*)>:
c00205e2:	b8 01 00 00 00       	mov    eax,0x1
c00205e7:	c3                   	ret    

c00205e8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00205e8:	b8 01 00 00 00       	mov    eax,0x1
c00205ed:	c3                   	ret    

c00205ee <ISO9660::rename(char const*, char const*)>:
c00205ee:	b8 01 00 00 00       	mov    eax,0x1
c00205f3:	c3                   	ret    

c00205f4 <ISO9660::mkdir(char const*)>:
c00205f4:	b8 01 00 00 00       	mov    eax,0x1
c00205f9:	c3                   	ret    

c00205fa <ISO9660::close(void*)>:
c00205fa:	83 ec 0c             	sub    esp,0xc
c00205fd:	b8 04 00 00 00       	mov    eax,0x4
c0020602:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020606:	85 d2                	test   edx,edx
c0020608:	74 0e                	je     c0020618 <ISO9660::close(void*)+0x1e>
c002060a:	83 ec 0c             	sub    esp,0xc
c002060d:	52                   	push   edx
c002060e:	e8 d1 ee fe ff       	call   c000f4e4 <free>
c0020613:	83 c4 10             	add    esp,0x10
c0020616:	31 c0                	xor    eax,eax
c0020618:	83 c4 0c             	add    esp,0xc
c002061b:	c3                   	ret    

c002061c <ISO9660::closeDir(void*)>:
c002061c:	83 ec 0c             	sub    esp,0xc
c002061f:	b8 04 00 00 00       	mov    eax,0x4
c0020624:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020628:	85 d2                	test   edx,edx
c002062a:	74 0e                	je     c002063a <ISO9660::closeDir(void*)+0x1e>
c002062c:	83 ec 0c             	sub    esp,0xc
c002062f:	52                   	push   edx
c0020630:	e8 af ee fe ff       	call   c000f4e4 <free>
c0020635:	83 c4 10             	add    esp,0x10
c0020638:	31 c0                	xor    eax,eax
c002063a:	83 c4 0c             	add    esp,0xc
c002063d:	c3                   	ret    

c002063e <ISO9660::~ISO9660()>:
c002063e:	83 ec 0c             	sub    esp,0xc
c0020641:	ba c0 ae 02 c0       	mov    edx,0xc002aec0
c0020646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002064a:	89 10                	mov    DWORD PTR [eax],edx
c002064c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020650:	83 ec 0c             	sub    esp,0xc
c0020653:	50                   	push   eax
c0020654:	e8 51 24 ff ff       	call   c0012aaa <Filesystem::~Filesystem()>
c0020659:	83 c4 10             	add    esp,0x10
c002065c:	90                   	nop
c002065d:	83 c4 0c             	add    esp,0xc
c0020660:	c3                   	ret    
c0020661:	90                   	nop

c0020662 <ISO9660::~ISO9660()>:
c0020662:	83 ec 0c             	sub    esp,0xc
c0020665:	83 ec 0c             	sub    esp,0xc
c0020668:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002066c:	e8 cd ff ff ff       	call   c002063e <ISO9660::~ISO9660()>
c0020671:	83 c4 10             	add    esp,0x10
c0020674:	83 ec 08             	sub    esp,0x8
c0020677:	6a 08                	push   0x8
c0020679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002067d:	e8 1f 20 ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0020682:	83 c4 10             	add    esp,0x10
c0020685:	83 c4 0c             	add    esp,0xc
c0020688:	c3                   	ret    

c0020689 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020689:	55                   	push   ebp
c002068a:	31 c9                	xor    ecx,ecx
c002068c:	57                   	push   edi
c002068d:	56                   	push   esi
c002068e:	53                   	push   ebx
c002068f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020693:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020697:	89 eb                	mov    ebx,ebp
c0020699:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002069d:	39 ce                	cmp    esi,ecx
c002069f:	7e 17                	jle    c00206b8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00206a1:	31 d2                	xor    edx,edx
c00206a3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00206a7:	7d 13                	jge    c00206bc <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00206a9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00206ad:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00206b0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00206b3:	75 0d                	jne    c00206c2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00206b5:	42                   	inc    edx
c00206b6:	eb eb                	jmp    c00206a3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00206b8:	31 c0                	xor    eax,eax
c00206ba:	eb 0a                	jmp    c00206c6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00206bc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00206c0:	eb 04                	jmp    c00206c6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00206c2:	41                   	inc    ecx
c00206c3:	43                   	inc    ebx
c00206c4:	eb d7                	jmp    c002069d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00206c6:	5b                   	pop    ebx
c00206c7:	5e                   	pop    esi
c00206c8:	5f                   	pop    edi
c00206c9:	5d                   	pop    ebp
c00206ca:	c3                   	ret    

c00206cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00206cb:	56                   	push   esi
c00206cc:	53                   	push   ebx
c00206cd:	52                   	push   edx
c00206ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00206d2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00206d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00206da:	39 0d 60 e0 02 c0    	cmp    DWORD PTR ds:0xc002e060,ecx
c00206e0:	75 08                	jne    c00206ea <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00206e2:	38 05 d4 be 02 c0    	cmp    BYTE PTR ds:0xc002bed4,al
c00206e8:	74 2b                	je     c0020715 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00206ea:	83 ec 0c             	sub    esp,0xc
c00206ed:	a2 d4 be 02 c0       	mov    ds:0xc002bed4,al
c00206f2:	68 80 e0 02 c0       	push   0xc002e080
c00206f7:	0f be c0             	movsx  eax,al
c00206fa:	6a 01                	push   0x1
c00206fc:	89 0d 60 e0 02 c0    	mov    DWORD PTR ds:0xc002e060,ecx
c0020702:	31 db                	xor    ebx,ebx
c0020704:	53                   	push   ebx
c0020705:	51                   	push   ecx
c0020706:	ff 34 85 5c ce 02 c0 	push   DWORD PTR [eax*4-0x3ffd31a4]
c002070d:	e8 fc 56 ff ff       	call   c0015e0e <LogicalDisk::read(unsigned long long, int, void*)>
c0020712:	83 c4 20             	add    esp,0x20
c0020715:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c002071d:	c7 44 24 14 80 e0 02 c0 	mov    DWORD PTR [esp+0x14],0xc002e080
c0020725:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020729:	58                   	pop    eax
c002072a:	5b                   	pop    ebx
c002072b:	5e                   	pop    esi
c002072c:	e9 24 ff fd ff       	jmp    c0000655 <memcpy>
c0020731:	90                   	nop

c0020732 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020732:	81 ec 10 08 00 00    	sub    esp,0x810
c0020738:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002073f:	83 c0 41             	add    eax,0x41
c0020742:	0f be c0             	movsx  eax,al
c0020745:	50                   	push   eax
c0020746:	8d 44 24 08          	lea    eax,[esp+0x8]
c002074a:	50                   	push   eax
c002074b:	6a 10                	push   0x10
c002074d:	e8 79 ff ff ff       	call   c00206cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020752:	83 c4 10             	add    esp,0x10
c0020755:	31 c0                	xor    eax,eax
c0020757:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002075c:	75 1d                	jne    c002077b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002075e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020763:	75 16                	jne    c002077b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020765:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002076a:	75 0f                	jne    c002077b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002076c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020771:	75 08                	jne    c002077b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020773:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020778:	0f 94 c0             	sete   al
c002077b:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020781:	c3                   	ret    

c0020782 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020782:	55                   	push   ebp
c0020783:	57                   	push   edi
c0020784:	56                   	push   esi
c0020785:	53                   	push   ebx
c0020786:	81 ec 34 08 00 00    	sub    esp,0x834
c002078c:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c0020793:	55                   	push   ebp
c0020794:	68 87 ae 02 c0       	push   0xc002ae87
c0020799:	e8 e3 1f ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c002079e:	83 c4 10             	add    esp,0x10
c00207a1:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c00207a9:	0f 84 06 02 00 00    	je     c00209b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c00207af:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00207b7:	0f 84 f8 01 00 00    	je     c00209b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c00207bd:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c00207c4:	b8 01 00 00 00       	mov    eax,0x1
c00207c9:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c00207cd:	0f 85 e7 01 00 00    	jne    c00209ba <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c00207d3:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c00207d6:	31 d2                	xor    edx,edx
c00207d8:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c00207db:	89 e9                	mov    ecx,ebp
c00207dd:	89 d3                	mov    ebx,edx
c00207df:	01 f1                	add    ecx,esi
c00207e1:	11 fb                	adc    ebx,edi
c00207e3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00207e7:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00207eb:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c00207f2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00207f5:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c00207f8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00207fc:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020800:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020804:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020808:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002080c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0020810:	72 19                	jb     c002082b <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c0020812:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002081a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002081e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0020821:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020825:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020829:	eb 13                	jmp    c002083e <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c002082b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002082f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020833:	29 f0                	sub    eax,esi
c0020835:	19 fa                	sbb    edx,edi
c0020837:	89 04 24             	mov    DWORD PTR [esp],eax
c002083a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002083e:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0020845:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0020848:	8b 00                	mov    eax,DWORD PTR [eax]
c002084a:	53                   	push   ebx
c002084b:	0f a4 c2 0b          	shld   edx,eax,0xb
c002084f:	c1 e0 0b             	shl    eax,0xb
c0020852:	01 c6                	add    esi,eax
c0020854:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002085b:	11 d7                	adc    edi,edx
c002085d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020861:	89 fa                	mov    edx,edi
c0020863:	50                   	push   eax
c0020864:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020868:	50                   	push   eax
c0020869:	89 f0                	mov    eax,esi
c002086b:	0f ac d0 0b          	shrd   eax,edx,0xb
c002086f:	50                   	push   eax
c0020870:	e8 56 fe ff ff       	call   c00206cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020875:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002087c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020880:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020883:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0020887:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002088d:	83 c4 10             	add    esp,0x10
c0020890:	b8 00 08 00 00       	mov    eax,0x800
c0020895:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0020899:	29 d0                	sub    eax,edx
c002089b:	39 c1                	cmp    ecx,eax
c002089d:	83 db 00             	sbb    ebx,0x0
c00208a0:	7d 19                	jge    c00208bb <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c00208a2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00208a7:	75 16                	jne    c00208bf <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c00208a9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00208b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00208b6:	e9 f6 00 00 00       	jmp    c00209b1 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c00208bb:	89 c5                	mov    ebp,eax
c00208bd:	eb 03                	jmp    c00208c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c00208bf:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00208c2:	51                   	push   ecx
c00208c3:	55                   	push   ebp
c00208c4:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c00208c8:	50                   	push   eax
c00208c9:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c00208d0:	e8 80 fd fd ff       	call   c0000655 <memcpy>
c00208d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00208d9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00208dd:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c00208e4:	01 e8                	add    eax,ebp
c00208e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00208ea:	89 e8                	mov    eax,ebp
c00208ec:	99                   	cdq    
c00208ed:	01 ee                	add    esi,ebp
c00208ef:	11 d7                	adc    edi,edx
c00208f1:	29 e9                	sub    ecx,ebp
c00208f3:	19 d3                	sbb    ebx,edx
c00208f5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00208f9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00208fd:	83 c4 10             	add    esp,0x10
c0020900:	b8 ff 07 00 00       	mov    eax,0x7ff
c0020905:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0020908:	b8 00 00 00 00       	mov    eax,0x0
c002090d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020911:	7d 3f                	jge    c0020952 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0020913:	52                   	push   edx
c0020914:	89 fa                	mov    edx,edi
c0020916:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002091d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020921:	50                   	push   eax
c0020922:	89 f0                	mov    eax,esi
c0020924:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020928:	0f ac d0 0b          	shrd   eax,edx,0xb
c002092c:	50                   	push   eax
c002092d:	e8 99 fd ff ff       	call   c00206cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020932:	81 c6 00 08 00 00    	add    esi,0x800
c0020938:	83 d7 00             	adc    edi,0x0
c002093b:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0020943:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002094b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0020950:	eb ab                	jmp    c00208fd <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c0020952:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020956:	0b 04 24             	or     eax,DWORD PTR [esp]
c0020959:	74 34                	je     c002098f <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c002095b:	89 fa                	mov    edx,edi
c002095d:	50                   	push   eax
c002095e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020965:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020969:	50                   	push   eax
c002096a:	89 f0                	mov    eax,esi
c002096c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0020970:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020974:	55                   	push   ebp
c0020975:	50                   	push   eax
c0020976:	e8 50 fd ff ff       	call   c00206cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002097b:	83 c4 0c             	add    esp,0xc
c002097e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0020982:	55                   	push   ebp
c0020983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020987:	e8 c9 fc fd ff       	call   c0000655 <memcpy>
c002098c:	83 c4 10             	add    esp,0x10
c002098f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020996:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002099a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002099e:	89 38                	mov    DWORD PTR [eax],edi
c00209a0:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c00209a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209ab:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c00209ae:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c00209b1:	31 c0                	xor    eax,eax
c00209b3:	eb 05                	jmp    c00209ba <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c00209b5:	b8 04 00 00 00       	mov    eax,0x4
c00209ba:	81 c4 2c 08 00 00    	add    esp,0x82c
c00209c0:	5b                   	pop    ebx
c00209c1:	5e                   	pop    esi
c00209c2:	5f                   	pop    edi
c00209c3:	5d                   	pop    ebp
c00209c4:	c3                   	ret    
c00209c5:	90                   	nop

c00209c6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00209c6:	55                   	push   ebp
c00209c7:	57                   	push   edi
c00209c8:	56                   	push   esi
c00209c9:	53                   	push   ebx
c00209ca:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00209d0:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00209d7:	85 f6                	test   esi,esi
c00209d9:	0f 84 64 02 00 00    	je     c0020c43 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00209df:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00209e7:	0f 84 56 02 00 00    	je     c0020c43 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00209ed:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00209f0:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c00209f3:	75 0a                	jne    c00209ff <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00209f5:	b8 07 00 00 00       	mov    eax,0x7
c00209fa:	e9 49 02 00 00       	jmp    c0020c48 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00209ff:	50                   	push   eax
c0020a00:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020a04:	50                   	push   eax
c0020a05:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020a0c:	53                   	push   ebx
c0020a0d:	8b 06                	mov    eax,DWORD PTR [esi]
c0020a0f:	c1 e0 0b             	shl    eax,0xb
c0020a12:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0020a15:	c1 e8 0b             	shr    eax,0xb
c0020a18:	50                   	push   eax
c0020a19:	e8 ad fc ff ff       	call   c00206cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020a1e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020a21:	83 c4 10             	add    esp,0x10
c0020a24:	89 c1                	mov    ecx,eax
c0020a26:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0020a29:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020a2f:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020a32:	84 db                	test   bl,bl
c0020a34:	0f 85 90 00 00 00    	jne    c0020aca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0020a3a:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020a40:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020a46:	29 c7                	sub    edi,eax
c0020a48:	89 fb                	mov    ebx,edi
c0020a4a:	c1 fb 1f             	sar    ebx,0x1f
c0020a4d:	01 f8                	add    eax,edi
c0020a4f:	11 da                	adc    edx,ebx
c0020a51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020a59:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020a5c:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020a5f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020a62:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020a65:	89 04 24             	mov    DWORD PTR [esp],eax
c0020a68:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020a6c:	89 d8                	mov    eax,ebx
c0020a6e:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020a71:	ba 00 00 00 00       	mov    edx,0x0
c0020a76:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020a7a:	b8 00 00 00 00       	mov    eax,0x0
c0020a7f:	73 0b                	jae    c0020a8c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020a84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020a88:	29 f8                	sub    eax,edi
c0020a8a:	19 da                	sbb    edx,ebx
c0020a8c:	89 d3                	mov    ebx,edx
c0020a8e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020a91:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020a94:	09 c3                	or     ebx,eax
c0020a96:	0f 84 59 ff ff ff    	je     c00209f5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0020a9c:	55                   	push   ebp
c0020a9d:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020aa1:	50                   	push   eax
c0020aa2:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020aa9:	53                   	push   ebx
c0020aaa:	8b 06                	mov    eax,DWORD PTR [esi]
c0020aac:	c1 e0 0b             	shl    eax,0xb
c0020aaf:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020ab3:	c1 e8 0b             	shr    eax,0xb
c0020ab6:	50                   	push   eax
c0020ab7:	e8 0f fc ff ff       	call   c00206cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020abc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020abf:	83 c4 10             	add    esp,0x10
c0020ac2:	25 ff 07 00 00       	and    eax,0x7ff
c0020ac7:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0020aca:	57                   	push   edi
c0020acb:	6a 28                	push   0x28
c0020acd:	6a 00                	push   0x0
c0020acf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020ad3:	50                   	push   eax
c0020ad4:	e8 b2 fb fd ff       	call   c000068b <memset>
c0020ad9:	31 d2                	xor    edx,edx
c0020adb:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0020ade:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020ae4:	89 f8                	mov    eax,edi
c0020ae6:	83 c0 21             	add    eax,0x21
c0020ae9:	83 d2 00             	adc    edx,0x0
c0020aec:	89 c7                	mov    edi,eax
c0020aee:	89 d5                	mov    ebp,edx
c0020af0:	83 c4 10             	add    esp,0x10
c0020af3:	31 c9                	xor    ecx,ecx
c0020af5:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020afc:	83 f9 28             	cmp    ecx,0x28
c0020aff:	88 04 24             	mov    BYTE PTR [esp],al
c0020b02:	0f 94 c2             	sete   dl
c0020b05:	88 d0                	mov    al,dl
c0020b07:	ba ff 07 00 00       	mov    edx,0x7ff
c0020b0c:	39 fa                	cmp    edx,edi
c0020b0e:	ba 00 00 00 00       	mov    edx,0x0
c0020b13:	19 ea                	sbb    edx,ebp
c0020b15:	0f 92 c2             	setb   dl
c0020b18:	09 c2                	or     edx,eax
c0020b1a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020b1e:	0f 94 c0             	sete   al
c0020b21:	08 d0                	or     al,dl
c0020b23:	75 16                	jne    c0020b3b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020b25:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020b29:	74 10                	je     c0020b3b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020b2b:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020b2e:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020b32:	41                   	inc    ecx
c0020b33:	83 c7 01             	add    edi,0x1
c0020b36:	83 d5 00             	adc    ebp,0x0
c0020b39:	eb ba                	jmp    c0020af5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0020b3b:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0020b42:	83 ec 0c             	sub    esp,0xc
c0020b45:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020b49:	57                   	push   edi
c0020b4a:	e8 59 fb fd ff       	call   c00006a8 <strlen>
c0020b4f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0020b57:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020b5b:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0020b62:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020b65:	5a                   	pop    edx
c0020b66:	25 ff 07 00 00       	and    eax,0x7ff
c0020b6b:	01 c8                	add    eax,ecx
c0020b6d:	59                   	pop    ecx
c0020b6e:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0020b74:	83 e0 02             	and    eax,0x2
c0020b77:	3c 01                	cmp    al,0x1
c0020b79:	19 c0                	sbb    eax,eax
c0020b7b:	83 c0 02             	add    eax,0x2
c0020b7e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020b82:	57                   	push   edi
c0020b83:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020b87:	50                   	push   eax
c0020b88:	e8 9d fb fd ff       	call   c000072a <strcpy>
c0020b8d:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0020b91:	83 c4 10             	add    esp,0x10
c0020b94:	84 c0                	test   al,al
c0020b96:	75 21                	jne    c0020bb9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020b98:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0020ba0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020ba8:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020bb0:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020bb7:	eb 28                	jmp    c0020be1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020bb9:	fe c8                	dec    al
c0020bbb:	75 24                	jne    c0020be1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020bbd:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0020bc5:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020bcd:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020bd5:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0020bdc:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0020be1:	0f b6 fb             	movzx  edi,bl
c0020be4:	31 db                	xor    ebx,ebx
c0020be6:	50                   	push   eax
c0020be7:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0020bee:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020bf2:	50                   	push   eax
c0020bf3:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0020bfa:	e8 56 fa fd ff       	call   c0000655 <memcpy>
c0020bff:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0020c06:	89 f9                	mov    ecx,edi
c0020c08:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c0e:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0020c11:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020c14:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0020c17:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020c1a:	83 c4 10             	add    esp,0x10
c0020c1d:	39 c7                	cmp    edi,eax
c0020c1f:	89 df                	mov    edi,ebx
c0020c21:	19 d7                	sbb    edi,edx
c0020c23:	72 10                	jb     c0020c35 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0020c25:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0020c2c:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0020c33:	eb 0a                	jmp    c0020c3f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0020c35:	29 c8                	sub    eax,ecx
c0020c37:	19 da                	sbb    edx,ebx
c0020c39:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020c3c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020c3f:	31 c0                	xor    eax,eax
c0020c41:	eb 05                	jmp    c0020c48 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020c43:	b8 04 00 00 00       	mov    eax,0x4
c0020c48:	81 c4 5c 09 00 00    	add    esp,0x95c
c0020c4e:	5b                   	pop    ebx
c0020c4f:	5e                   	pop    esi
c0020c50:	5f                   	pop    edi
c0020c51:	5d                   	pop    ebp
c0020c52:	c3                   	ret    

c0020c53 <readRoot(unsigned int*, unsigned int*, char)>:
c0020c53:	81 ec 40 08 00 00    	sub    esp,0x840
c0020c59:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0020c61:	50                   	push   eax
c0020c62:	8d 44 24 38          	lea    eax,[esp+0x38]
c0020c66:	50                   	push   eax
c0020c67:	6a 10                	push   0x10
c0020c69:	e8 5d fa ff ff       	call   c00206cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020c6e:	83 c4 0c             	add    esp,0xc
c0020c71:	6a 22                	push   0x22
c0020c73:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0020c7a:	50                   	push   eax
c0020c7b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020c7f:	50                   	push   eax
c0020c80:	e8 d0 f9 fd ff       	call   c0000655 <memcpy>
c0020c85:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020c8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020c90:	89 10                	mov    DWORD PTR [eax],edx
c0020c92:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020c99:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020c9d:	89 10                	mov    DWORD PTR [eax],edx
c0020c9f:	b0 01                	mov    al,0x1
c0020ca1:	81 c4 4c 08 00 00    	add    esp,0x84c
c0020ca7:	c3                   	ret    

c0020ca8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0020ca8:	55                   	push   ebp
c0020ca9:	57                   	push   edi
c0020caa:	56                   	push   esi
c0020cab:	53                   	push   ebx
c0020cac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020cb2:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0020cb9:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0020cc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020cc4:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0020cc8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020ccc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020cd0:	75 03                	jne    c0020cd5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020cd2:	83 c3 02             	add    ebx,0x2
c0020cd5:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0020cd8:	75 03                	jne    c0020cdd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0020cda:	43                   	inc    ebx
c0020cdb:	eb f8                	jmp    c0020cd5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020cdd:	51                   	push   ecx
c0020cde:	68 00 01 00 00       	push   0x100
c0020ce3:	6a 00                	push   0x0
c0020ce5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020ce9:	50                   	push   eax
c0020cea:	e8 9c f9 fd ff       	call   c000068b <memset>
c0020cef:	83 c4 10             	add    esp,0x10
c0020cf2:	31 d2                	xor    edx,edx
c0020cf4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020cf7:	84 c0                	test   al,al
c0020cf9:	74 21                	je     c0020d1c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0020cfb:	3c 2f                	cmp    al,0x2f
c0020cfd:	75 0b                	jne    c0020d0a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0020cff:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0020d03:	bd 01 00 00 00       	mov    ebp,0x1
c0020d08:	eb 14                	jmp    c0020d1e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0020d0a:	8d 48 9f             	lea    ecx,[eax-0x61]
c0020d0d:	80 f9 19             	cmp    cl,0x19
c0020d10:	77 03                	ja     c0020d15 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020d12:	83 e8 20             	sub    eax,0x20
c0020d15:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0020d19:	42                   	inc    edx
c0020d1a:	eb d8                	jmp    c0020cf4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0020d1c:	31 ed                	xor    ebp,ebp
c0020d1e:	83 ec 0c             	sub    esp,0xc
c0020d21:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0020d28:	e8 a7 e7 fe ff       	call   c000f4d4 <malloc>
c0020d2d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0020d34:	89 c6                	mov    esi,eax
c0020d36:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0020d3c:	c1 ef 0b             	shr    edi,0xb
c0020d3f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0020d46:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0020d4a:	83 c4 10             	add    esp,0x10
c0020d4d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0020d52:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020d56:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0020d5d:	74 28                	je     c0020d87 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0020d5f:	52                   	push   edx
c0020d60:	57                   	push   edi
c0020d61:	50                   	push   eax
c0020d62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d66:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0020d6d:	e8 59 f9 ff ff       	call   c00206cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d76:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0020d7d:	05 00 08 00 00       	add    eax,0x800
c0020d82:	83 c4 10             	add    esp,0x10
c0020d85:	eb cb                	jmp    c0020d52 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0020d87:	83 ec 0c             	sub    esp,0xc
c0020d8a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0020d8e:	57                   	push   edi
c0020d8f:	e8 14 f9 fd ff       	call   c00006a8 <strlen>
c0020d94:	50                   	push   eax
c0020d95:	57                   	push   edi
c0020d96:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0020d9d:	56                   	push   esi
c0020d9e:	e8 e6 f8 ff ff       	call   c0020689 <__memmem(unsigned char*, int, unsigned char*, int)>
c0020da3:	83 c4 20             	add    esp,0x20
c0020da6:	85 c0                	test   eax,eax
c0020da8:	75 13                	jne    c0020dbd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0020daa:	83 ec 0c             	sub    esp,0xc
c0020dad:	56                   	push   esi
c0020dae:	e8 31 e7 fe ff       	call   c000f4e4 <free>
c0020db3:	83 c4 10             	add    esp,0x10
c0020db6:	31 c0                	xor    eax,eax
c0020db8:	e9 b3 00 00 00       	jmp    c0020e70 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020dbd:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0020dc1:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0020dc5:	c1 e7 08             	shl    edi,0x8
c0020dc8:	c1 e2 10             	shl    edx,0x10
c0020dcb:	09 d7                	or     edi,edx
c0020dcd:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0020dd1:	09 d7                	or     edi,edx
c0020dd3:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0020dd7:	c1 e2 18             	shl    edx,0x18
c0020dda:	09 d7                	or     edi,edx
c0020ddc:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0020de0:	89 d1                	mov    ecx,edx
c0020de2:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0020de6:	c1 e1 08             	shl    ecx,0x8
c0020de9:	c1 e2 10             	shl    edx,0x10
c0020dec:	09 ca                	or     edx,ecx
c0020dee:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0020df2:	09 ca                	or     edx,ecx
c0020df4:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0020df8:	c1 e1 18             	shl    ecx,0x18
c0020dfb:	09 ca                	or     edx,ecx
c0020dfd:	89 e9                	mov    ecx,ebp
c0020dff:	84 c9                	test   cl,cl
c0020e01:	74 3c                	je     c0020e3f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0020e03:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020e07:	83 ec 0c             	sub    esp,0xc
c0020e0a:	56                   	push   esi
c0020e0b:	e8 d4 e6 fe ff       	call   c000f4e4 <free>
c0020e10:	83 c4 0c             	add    esp,0xc
c0020e13:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e1a:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0020e1f:	50                   	push   eax
c0020e20:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e27:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e32:	52                   	push   edx
c0020e33:	57                   	push   edi
c0020e34:	53                   	push   ebx
c0020e35:	e8 6e fe ff ff       	call   c0020ca8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020e3a:	83 c4 20             	add    esp,0x20
c0020e3d:	eb 31                	jmp    c0020e70 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020e3f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0020e42:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0020e49:	d0 e8                	shr    al,1
c0020e4b:	89 3b                	mov    DWORD PTR [ebx],edi
c0020e4d:	83 e0 01             	and    eax,0x1
c0020e50:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0020e57:	83 ec 0c             	sub    esp,0xc
c0020e5a:	89 13                	mov    DWORD PTR [ebx],edx
c0020e5c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0020e63:	89 03                	mov    DWORD PTR [ebx],eax
c0020e65:	56                   	push   esi
c0020e66:	e8 79 e6 fe ff       	call   c000f4e4 <free>
c0020e6b:	83 c4 10             	add    esp,0x10
c0020e6e:	b0 01                	mov    al,0x1
c0020e70:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e76:	5b                   	pop    ebx
c0020e77:	5e                   	pop    esi
c0020e78:	5f                   	pop    edi
c0020e79:	5d                   	pop    ebp
c0020e7a:	c3                   	ret    

c0020e7b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0020e7b:	55                   	push   ebp
c0020e7c:	57                   	push   edi
c0020e7d:	56                   	push   esi
c0020e7e:	53                   	push   ebx
c0020e7f:	83 ec 20             	sub    esp,0x20
c0020e82:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020e86:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020e8a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020e8e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020e96:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020e9e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0020ea3:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0020ea9:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0020eaf:	57                   	push   edi
c0020eb0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020eb4:	50                   	push   eax
c0020eb5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020eb9:	50                   	push   eax
c0020eba:	e8 94 fd ff ff       	call   c0020c53 <readRoot(unsigned int*, unsigned int*, char)>
c0020ebf:	5a                   	pop    edx
c0020ec0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020ec4:	e8 df f7 fd ff       	call   c00006a8 <strlen>
c0020ec9:	83 c4 10             	add    esp,0x10
c0020ecc:	83 f8 03             	cmp    eax,0x3
c0020ecf:	77 17                	ja     c0020ee8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020ed1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ed5:	89 03                	mov    DWORD PTR [ebx],eax
c0020ed7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020edb:	89 06                	mov    DWORD PTR [esi],eax
c0020edd:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0020ee4:	b0 01                	mov    al,0x1
c0020ee6:	eb 19                	jmp    c0020f01 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0020ee8:	50                   	push   eax
c0020ee9:	55                   	push   ebp
c0020eea:	57                   	push   edi
c0020eeb:	56                   	push   esi
c0020eec:	53                   	push   ebx
c0020eed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020ef1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020ef5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020ef9:	e8 aa fd ff ff       	call   c0020ca8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020efe:	83 c4 20             	add    esp,0x20
c0020f01:	83 c4 1c             	add    esp,0x1c
c0020f04:	5b                   	pop    ebx
c0020f05:	5e                   	pop    esi
c0020f06:	5f                   	pop    edi
c0020f07:	5d                   	pop    ebp
c0020f08:	c3                   	ret    
c0020f09:	90                   	nop

c0020f0a <ISO9660::open(char const*, void**, FileOpenMode)>:
c0020f0a:	57                   	push   edi
c0020f0b:	56                   	push   esi
c0020f0c:	53                   	push   ebx
c0020f0d:	83 ec 10             	sub    esp,0x10
c0020f10:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020f14:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020f18:	85 ff                	test   edi,edi
c0020f1a:	74 7b                	je     c0020f97 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020f1c:	85 f6                	test   esi,esi
c0020f1e:	74 77                	je     c0020f97 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020f20:	83 ec 0c             	sub    esp,0xc
c0020f23:	6a 1c                	push   0x1c
c0020f25:	e8 aa e5 fe ff       	call   c000f4d4 <malloc>
c0020f2a:	89 07                	mov    DWORD PTR [edi],eax
c0020f2c:	89 c3                	mov    ebx,eax
c0020f2e:	58                   	pop    eax
c0020f2f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f33:	50                   	push   eax
c0020f34:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020f37:	50                   	push   eax
c0020f38:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f3c:	50                   	push   eax
c0020f3d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f41:	50                   	push   eax
c0020f42:	56                   	push   esi
c0020f43:	e8 33 ff ff ff       	call   c0020e7b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020f48:	83 c4 20             	add    esp,0x20
c0020f4b:	84 c0                	test   al,al
c0020f4d:	74 07                	je     c0020f56 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c0020f4f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020f54:	74 0b                	je     c0020f61 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0020f56:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0020f5a:	b8 01 00 00 00       	mov    eax,0x1
c0020f5f:	eb 3b                	jmp    c0020f9c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020f61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f65:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020f69:	89 03                	mov    DWORD PTR [ebx],eax
c0020f6b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0020f72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f76:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0020f7d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020f84:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020f87:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0020f8e:	8a 06                	mov    al,BYTE PTR [esi]
c0020f90:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0020f93:	31 c0                	xor    eax,eax
c0020f95:	eb 05                	jmp    c0020f9c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020f97:	b8 04 00 00 00       	mov    eax,0x4
c0020f9c:	83 c4 10             	add    esp,0x10
c0020f9f:	5b                   	pop    ebx
c0020fa0:	5e                   	pop    esi
c0020fa1:	5f                   	pop    edi
c0020fa2:	c3                   	ret    
c0020fa3:	90                   	nop

c0020fa4 <ISO9660::exists(char const*)>:
c0020fa4:	83 ec 28             	sub    esp,0x28
c0020fa7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020fab:	8d 54 24 18          	lea    edx,[esp+0x18]
c0020faf:	52                   	push   edx
c0020fb0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0020fb3:	52                   	push   edx
c0020fb4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020fb8:	52                   	push   edx
c0020fb9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020fbd:	52                   	push   edx
c0020fbe:	50                   	push   eax
c0020fbf:	e8 b7 fe ff ff       	call   c0020e7b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020fc4:	83 c4 3c             	add    esp,0x3c
c0020fc7:	c3                   	ret    

c0020fc8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0020fc8:	56                   	push   esi
c0020fc9:	53                   	push   ebx
c0020fca:	83 ec 14             	sub    esp,0x14
c0020fcd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0020fd1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0020fd5:	85 db                	test   ebx,ebx
c0020fd7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020fdb:	0f 94 c2             	sete   dl
c0020fde:	85 f6                	test   esi,esi
c0020fe0:	0f 94 c0             	sete   al
c0020fe3:	08 c2                	or     dl,al
c0020fe5:	75 68                	jne    c002104f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020fe7:	85 c9                	test   ecx,ecx
c0020fe9:	74 64                	je     c002104f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020feb:	83 ec 0c             	sub    esp,0xc
c0020fee:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0020ff1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ff5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020ffb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021002:	50                   	push   eax
c0021003:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021006:	50                   	push   eax
c0021007:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002100b:	50                   	push   eax
c002100c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021010:	50                   	push   eax
c0021011:	51                   	push   ecx
c0021012:	e8 64 fe ff ff       	call   c0020e7b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021017:	83 c4 20             	add    esp,0x20
c002101a:	ba 01 00 00 00       	mov    edx,0x1
c002101f:	84 c0                	test   al,al
c0021021:	74 31                	je     c0021054 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021023:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021027:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002102e:	89 03                	mov    DWORD PTR [ebx],eax
c0021030:	ba 00 00 00 00       	mov    edx,0x0
c0021035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021039:	85 c0                	test   eax,eax
c002103b:	0f 95 06             	setne  BYTE PTR [esi]
c002103e:	74 14                	je     c0021054 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021040:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021046:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002104d:	eb 05                	jmp    c0021054 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002104f:	ba 04 00 00 00       	mov    edx,0x4
c0021054:	83 c4 14             	add    esp,0x14
c0021057:	89 d0                	mov    eax,edx
c0021059:	5b                   	pop    ebx
c002105a:	5e                   	pop    esi
c002105b:	c3                   	ret    

c002105c <ISO9660::openDir(char const*, void**)>:
c002105c:	57                   	push   edi
c002105d:	56                   	push   esi
c002105e:	53                   	push   ebx
c002105f:	83 ec 10             	sub    esp,0x10
c0021062:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021066:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002106a:	85 ff                	test   edi,edi
c002106c:	0f 84 95 00 00 00    	je     c0021107 <ISO9660::openDir(char const*, void**)+0xab>
c0021072:	85 f6                	test   esi,esi
c0021074:	0f 84 8d 00 00 00    	je     c0021107 <ISO9660::openDir(char const*, void**)+0xab>
c002107a:	83 ec 0c             	sub    esp,0xc
c002107d:	6a 1c                	push   0x1c
c002107f:	e8 50 e4 fe ff       	call   c000f4d4 <malloc>
c0021084:	89 07                	mov    DWORD PTR [edi],eax
c0021086:	89 c3                	mov    ebx,eax
c0021088:	59                   	pop    ecx
c0021089:	8d 44 24 18          	lea    eax,[esp+0x18]
c002108d:	50                   	push   eax
c002108e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021091:	50                   	push   eax
c0021092:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021096:	50                   	push   eax
c0021097:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002109b:	50                   	push   eax
c002109c:	56                   	push   esi
c002109d:	e8 d9 fd ff ff       	call   c0020e7b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00210a2:	83 c4 20             	add    esp,0x20
c00210a5:	84 c0                	test   al,al
c00210a7:	74 07                	je     c00210b0 <ISO9660::openDir(char const*, void**)+0x54>
c00210a9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00210ae:	75 21                	jne    c00210d1 <ISO9660::openDir(char const*, void**)+0x75>
c00210b0:	0f b6 c0             	movzx  eax,al
c00210b3:	52                   	push   edx
c00210b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00210b8:	50                   	push   eax
c00210b9:	68 9a ae 02 c0       	push   0xc002ae9a
c00210be:	e8 be 16 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00210c3:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00210c7:	83 c4 10             	add    esp,0x10
c00210ca:	b8 01 00 00 00       	mov    eax,0x1
c00210cf:	eb 3b                	jmp    c002110c <ISO9660::openDir(char const*, void**)+0xb0>
c00210d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210d5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00210d9:	89 03                	mov    DWORD PTR [ebx],eax
c00210db:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00210e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210e6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00210ed:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00210f4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00210f7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00210fe:	8a 06                	mov    al,BYTE PTR [esi]
c0021100:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021103:	31 c0                	xor    eax,eax
c0021105:	eb 05                	jmp    c002110c <ISO9660::openDir(char const*, void**)+0xb0>
c0021107:	b8 04 00 00 00       	mov    eax,0x4
c002110c:	83 c4 10             	add    esp,0x10
c002110f:	5b                   	pop    ebx
c0021110:	5e                   	pop    esi
c0021111:	5f                   	pop    edi
c0021112:	c3                   	ret    
c0021113:	90                   	nop

c0021114 <ISO9660::ISO9660()>:
c0021114:	83 ec 0c             	sub    esp,0xc
c0021117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002111b:	83 ec 0c             	sub    esp,0xc
c002111e:	50                   	push   eax
c002111f:	e8 62 19 ff ff       	call   c0012a86 <Filesystem::Filesystem()>
c0021124:	83 c4 10             	add    esp,0x10
c0021127:	ba c0 ae 02 c0       	mov    edx,0xc002aec0
c002112c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021130:	89 10                	mov    DWORD PTR [eax],edx
c0021132:	90                   	nop
c0021133:	83 c4 0c             	add    esp,0xc
c0021136:	c3                   	ret    
c0021137:	90                   	nop

c0021138 <SoundChannel::~SoundChannel()>:
c0021138:	83 ec 0c             	sub    esp,0xc
c002113b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002113f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021142:	83 ec 0c             	sub    esp,0xc
c0021145:	50                   	push   eax
c0021146:	e8 99 e3 fe ff       	call   c000f4e4 <free>
c002114b:	83 c4 10             	add    esp,0x10
c002114e:	90                   	nop
c002114f:	83 c4 0c             	add    esp,0xc
c0021152:	c3                   	ret    
c0021153:	90                   	nop

c0021154 <SoundChannel::setSpeed(float)>:
c0021154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021158:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002115c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002115f:	c3                   	ret    

c0021160 <SoundChannel::getSpeed()>:
c0021160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021164:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021167:	c3                   	ret    

c0021168 <SoundChannel::setVolume(int)>:
c0021168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002116c:	83 f8 64             	cmp    eax,0x64
c002116f:	7e 05                	jle    c0021176 <SoundChannel::setVolume(int)+0xe>
c0021171:	b8 64 00 00 00       	mov    eax,0x64
c0021176:	85 c0                	test   eax,eax
c0021178:	79 02                	jns    c002117c <SoundChannel::setVolume(int)+0x14>
c002117a:	31 c0                	xor    eax,eax
c002117c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021180:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021183:	c3                   	ret    

c0021184 <SoundChannel::getVolume()>:
c0021184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021188:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002118b:	c3                   	ret    

c002118c <SoundChannel::pause()>:
c002118c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021190:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021194:	c3                   	ret    
c0021195:	90                   	nop

c0021196 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021196:	83 ec 1c             	sub    esp,0x1c
c0021199:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002119d:	e8 ea ff ff ff       	call   c002118c <SoundChannel::pause()>
c00211a2:	83 c4 04             	add    esp,0x4
c00211a5:	6a 50                	push   0x50
c00211a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00211ab:	e8 b8 ff ff ff       	call   c0021168 <SoundChannel::setVolume(int)>
c00211b0:	83 c4 08             	add    esp,0x8
c00211b3:	a1 38 af 02 c0       	mov    eax,ds:0xc002af38
c00211b8:	50                   	push   eax
c00211b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00211bd:	e8 92 ff ff ff       	call   c0021154 <SoundChannel::setSpeed(float)>
c00211c2:	83 c4 08             	add    esp,0x8
c00211c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211c9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00211cd:	89 10                	mov    DWORD PTR [eax],edx
c00211cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00211d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00211da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211de:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00211e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00211e5:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00211ea:	75 23                	jne    c002120f <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00211ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211f0:	8b 10                	mov    edx,DWORD PTR [eax]
c00211f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00211f9:	0f af c2             	imul   eax,edx
c00211fc:	85 c0                	test   eax,eax
c00211fe:	79 03                	jns    c0021203 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021200:	83 c0 03             	add    eax,0x3
c0021203:	c1 f8 02             	sar    eax,0x2
c0021206:	05 a0 0f 00 00       	add    eax,0xfa0
c002120b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002120f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021213:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021217:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002121a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002121e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021229:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021230:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021234:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021237:	c1 e0 02             	shl    eax,0x2
c002123a:	83 ec 0c             	sub    esp,0xc
c002123d:	50                   	push   eax
c002123e:	e8 91 e2 fe ff       	call   c000f4d4 <malloc>
c0021243:	83 c4 10             	add    esp,0x10
c0021246:	89 c2                	mov    edx,eax
c0021248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002124c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002124f:	83 ec 04             	sub    esp,0x4
c0021252:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021256:	50                   	push   eax
c0021257:	6a 01                	push   0x1
c0021259:	6a 04                	push   0x4
c002125b:	e8 ef 76 fe ff       	call   c000894f <src_new>
c0021260:	83 c4 10             	add    esp,0x10
c0021263:	89 c2                	mov    edx,eax
c0021265:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021269:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002126c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021270:	85 c0                	test   eax,eax
c0021272:	74 10                	je     c0021284 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021274:	83 ec 0c             	sub    esp,0xc
c0021277:	68 1c af 02 c0       	push   0xc002af1c
c002127c:	e8 1a 86 ff ff       	call   c001989b <Krnl::panic(char const*)>
c0021281:	83 c4 10             	add    esp,0x10
c0021284:	a0 80 ec 02 c0       	mov    al,ds:0xc002ec80
c0021289:	83 f0 01             	xor    eax,0x1
c002128c:	84 c0                	test   al,al
c002128e:	74 57                	je     c00212e7 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021290:	a1 3c af 02 c0       	mov    eax,ds:0xc002af3c
c0021295:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021299:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00212a1:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00212a9:	7f 35                	jg     c00212e0 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00212ab:	83 ec 0c             	sub    esp,0xc
c00212ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00212b2:	e8 20 4a 00 00       	call   c0025cd7 <__floatsisf>
c00212b7:	83 c4 10             	add    esp,0x10
c00212ba:	8b 15 3c af 02 c0    	mov    edx,DWORD PTR ds:0xc002af3c
c00212c0:	83 ec 08             	sub    esp,0x8
c00212c3:	52                   	push   edx
c00212c4:	50                   	push   eax
c00212c5:	e8 1f 46 00 00       	call   c00258e9 <__mulsf3>
c00212ca:	83 c4 10             	add    esp,0x10
c00212cd:	89 c2                	mov    edx,eax
c00212cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212d3:	89 14 85 80 e8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1780],edx
c00212da:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00212de:	eb c1                	jmp    c00212a1 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00212e0:	c6 05 80 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec80,0x1
c00212e7:	90                   	nop
c00212e8:	83 c4 1c             	add    esp,0x1c
c00212eb:	c3                   	ret    

c00212ec <SoundChannel::play()>:
c00212ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212f0:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00212f4:	c3                   	ret    
c00212f5:	90                   	nop

c00212f6 <SoundChannel::paused()>:
c00212f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212fa:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00212fd:	c3                   	ret    

c00212fe <SoundChannel::getSampleRate()>:
c00212fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021302:	8b 00                	mov    eax,DWORD PTR [eax]
c0021304:	c3                   	ret    
c0021305:	90                   	nop

c0021306 <SoundChannel::getBits()>:
c0021306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002130a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002130d:	c3                   	ret    

c002130e <SoundChannel::getBufferUsed()>:
c002130e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021312:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021315:	c3                   	ret    

c0021316 <SoundChannel::getBufferSize()>:
c0021316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002131a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002131d:	c3                   	ret    

c002131e <SoundChannel::unbuffer(float*, int, int)>:
c002131e:	56                   	push   esi
c002131f:	53                   	push   ebx
c0021320:	83 ec 40             	sub    esp,0x40
c0021323:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021327:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002132a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002132e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021331:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021335:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021339:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002133d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021341:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021345:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021349:	e8 89 49 00 00       	call   c0025cd7 <__floatsisf>
c002134e:	5a                   	pop    edx
c002134f:	89 c6                	mov    esi,eax
c0021351:	ff 33                	push   DWORD PTR [ebx]
c0021353:	e8 7f 49 00 00       	call   c0025cd7 <__floatsisf>
c0021358:	59                   	pop    ecx
c0021359:	5a                   	pop    edx
c002135a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002135d:	50                   	push   eax
c002135e:	e8 86 45 00 00       	call   c00258e9 <__mulsf3>
c0021363:	59                   	pop    ecx
c0021364:	5a                   	pop    edx
c0021365:	50                   	push   eax
c0021366:	56                   	push   esi
c0021367:	e8 40 47 00 00       	call   c0025aac <__divsf3>
c002136c:	89 04 24             	mov    DWORD PTR [esp],eax
c002136f:	e8 33 5c 00 00       	call   c0026fa7 <__extendsfdf2>
c0021374:	59                   	pop    ecx
c0021375:	5e                   	pop    esi
c0021376:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002137a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002137e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021386:	8d 44 24 14          	lea    eax,[esp+0x14]
c002138a:	50                   	push   eax
c002138b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002138e:	e8 b1 71 fe ff       	call   c0008544 <src_process>
c0021393:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021397:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002139a:	83 c4 0c             	add    esp,0xc
c002139d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00213a0:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00213a3:	29 d0                	sub    eax,edx
c00213a5:	c1 e0 02             	shl    eax,0x2
c00213a8:	50                   	push   eax
c00213a9:	8d 04 91             	lea    eax,[ecx+edx*4]
c00213ac:	50                   	push   eax
c00213ad:	51                   	push   ecx
c00213ae:	e8 6a f2 fd ff       	call   c000061d <memmove>
c00213b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00213b7:	83 c4 44             	add    esp,0x44
c00213ba:	5b                   	pop    ebx
c00213bb:	5e                   	pop    esi
c00213bc:	c3                   	ret    
c00213bd:	90                   	nop

c00213be <SoundChannel::buffer8(unsigned char*, int)>:
c00213be:	55                   	push   ebp
c00213bf:	57                   	push   edi
c00213c0:	56                   	push   esi
c00213c1:	53                   	push   ebx
c00213c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213c6:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00213ca:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00213cd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00213d1:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00213d4:	74 7a                	je     c0021450 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00213d6:	85 ff                	test   edi,edi
c00213d8:	7e 76                	jle    c0021450 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00213da:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00213de:	8d 70 01             	lea    esi,[eax+0x1]
c00213e1:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00213e4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00213e7:	8b 1c 9d 80 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1780]
c00213ee:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00213f1:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00213f4:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00213f7:	74 5e                	je     c0021457 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00213f9:	83 ff 01             	cmp    edi,0x1
c00213fc:	74 4b                	je     c0021449 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00213fe:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021402:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021405:	8d 70 01             	lea    esi,[eax+0x1]
c0021408:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002140b:	8b 1c 9d 80 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1780]
c0021412:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021415:	b8 02 00 00 00       	mov    eax,0x2
c002141a:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002141d:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021420:	75 23                	jne    c0021445 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021422:	eb 27                	jmp    c002144b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021424:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021429:	8d 71 01             	lea    esi,[ecx+0x1]
c002142c:	40                   	inc    eax
c002142d:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021430:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021433:	8b 1c 9d 80 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1780]
c002143a:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002143d:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021440:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021443:	74 06                	je     c002144b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021445:	39 c7                	cmp    edi,eax
c0021447:	75 db                	jne    c0021424 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021449:	89 f8                	mov    eax,edi
c002144b:	5b                   	pop    ebx
c002144c:	5e                   	pop    esi
c002144d:	5f                   	pop    edi
c002144e:	5d                   	pop    ebp
c002144f:	c3                   	ret    
c0021450:	5b                   	pop    ebx
c0021451:	31 c0                	xor    eax,eax
c0021453:	5e                   	pop    esi
c0021454:	5f                   	pop    edi
c0021455:	5d                   	pop    ebp
c0021456:	c3                   	ret    
c0021457:	b8 01 00 00 00       	mov    eax,0x1
c002145c:	eb ed                	jmp    c002144b <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002145e <SoundDevice::SoundDevice(char const*)>:
c002145e:	83 ec 1c             	sub    esp,0x1c
c0021461:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021465:	83 ec 08             	sub    esp,0x8
c0021468:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002146c:	50                   	push   eax
c002146d:	e8 ee 28 ff ff       	call   c0013d60 <Device::Device(char const*)>
c0021472:	83 c4 10             	add    esp,0x10
c0021475:	ba 48 af 02 c0       	mov    edx,0xc002af48
c002147a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002147e:	89 10                	mov    DWORD PTR [eax],edx
c0021480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021484:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002148e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021492:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002149c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00214a4:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00214a9:	7f 19                	jg     c00214c4 <SoundDevice::SoundDevice(char const*)+0x66>
c00214ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214b3:	83 c2 54             	add    edx,0x54
c00214b6:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00214be:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00214c2:	eb e0                	jmp    c00214a4 <SoundDevice::SoundDevice(char const*)+0x46>
c00214c4:	90                   	nop
c00214c5:	83 c4 1c             	add    esp,0x1c
c00214c8:	c3                   	ret    
c00214c9:	90                   	nop

c00214ca <SoundDevice::~SoundDevice()>:
c00214ca:	53                   	push   ebx
c00214cb:	83 ec 18             	sub    esp,0x18
c00214ce:	ba 48 af 02 c0       	mov    edx,0xc002af48
c00214d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214d7:	89 10                	mov    DWORD PTR [eax],edx
c00214d9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00214e1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00214e6:	7f 46                	jg     c002152e <SoundDevice::~SoundDevice()+0x64>
c00214e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214f0:	83 c2 54             	add    edx,0x54
c00214f3:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00214f7:	85 c0                	test   eax,eax
c00214f9:	74 2d                	je     c0021528 <SoundDevice::~SoundDevice()+0x5e>
c00214fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021503:	83 c2 54             	add    edx,0x54
c0021506:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002150a:	85 db                	test   ebx,ebx
c002150c:	74 1a                	je     c0021528 <SoundDevice::~SoundDevice()+0x5e>
c002150e:	83 ec 0c             	sub    esp,0xc
c0021511:	53                   	push   ebx
c0021512:	e8 21 fc ff ff       	call   c0021138 <SoundChannel::~SoundChannel()>
c0021517:	83 c4 10             	add    esp,0x10
c002151a:	83 ec 08             	sub    esp,0x8
c002151d:	6a 2c                	push   0x2c
c002151f:	53                   	push   ebx
c0021520:	e8 7c 11 ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0021525:	83 c4 10             	add    esp,0x10
c0021528:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002152c:	eb b3                	jmp    c00214e1 <SoundDevice::~SoundDevice()+0x17>
c002152e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021532:	83 ec 0c             	sub    esp,0xc
c0021535:	50                   	push   eax
c0021536:	e8 07 25 ff ff       	call   c0013a42 <Device::~Device()>
c002153b:	83 c4 10             	add    esp,0x10
c002153e:	90                   	nop
c002153f:	83 c4 18             	add    esp,0x18
c0021542:	5b                   	pop    ebx
c0021543:	c3                   	ret    

c0021544 <SoundDevice::~SoundDevice()>:
c0021544:	83 ec 0c             	sub    esp,0xc
c0021547:	83 ec 0c             	sub    esp,0xc
c002154a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002154e:	e8 77 ff ff ff       	call   c00214ca <SoundDevice::~SoundDevice()>
c0021553:	83 c4 10             	add    esp,0x10
c0021556:	83 ec 08             	sub    esp,0x8
c0021559:	68 e4 01 00 00       	push   0x1e4
c002155e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021562:	e8 3a 11 ff ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0021567:	83 c4 10             	add    esp,0x10
c002156a:	83 c4 0c             	add    esp,0xc
c002156d:	c3                   	ret    

c002156e <SoundDevice::getFreeChannelNum()>:
c002156e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021572:	31 c0                	xor    eax,eax
c0021574:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002157c:	74 09                	je     c0021587 <SoundDevice::getFreeChannelNum()+0x19>
c002157e:	40                   	inc    eax
c002157f:	83 f8 20             	cmp    eax,0x20
c0021582:	75 f0                	jne    c0021574 <SoundDevice::getFreeChannelNum()+0x6>
c0021584:	83 c8 ff             	or     eax,0xffffffff
c0021587:	c3                   	ret    

c0021588 <SoundDevice::addChannel(SoundChannel*)>:
c0021588:	56                   	push   esi
c0021589:	53                   	push   ebx
c002158a:	51                   	push   ecx
c002158b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002158f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021593:	53                   	push   ebx
c0021594:	e8 d5 ff ff ff       	call   c002156e <SoundDevice::getFreeChannelNum()>
c0021599:	5a                   	pop    edx
c002159a:	83 f8 ff             	cmp    eax,0xffffffff
c002159d:	74 51                	je     c00215f0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002159f:	85 f6                	test   esi,esi
c00215a1:	74 4d                	je     c00215f0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00215a3:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00215aa:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00215b1:	75 30                	jne    c00215e3 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00215b3:	83 ec 0c             	sub    esp,0xc
c00215b6:	56                   	push   esi
c00215b7:	e8 42 fd ff ff       	call   c00212fe <SoundChannel::getSampleRate()>
c00215bc:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00215c2:	89 34 24             	mov    DWORD PTR [esp],esi
c00215c5:	e8 3c fd ff ff       	call   c0021306 <SoundChannel::getBits()>
c00215ca:	83 c4 0c             	add    esp,0xc
c00215cd:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00215d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00215d5:	50                   	push   eax
c00215d6:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00215dc:	53                   	push   ebx
c00215dd:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00215e0:	83 c4 10             	add    esp,0x10
c00215e3:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00215e9:	b8 01 00 00 00       	mov    eax,0x1
c00215ee:	eb 03                	jmp    c00215f3 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00215f0:	83 c8 ff             	or     eax,0xffffffff
c00215f3:	5a                   	pop    edx
c00215f4:	5b                   	pop    ebx
c00215f5:	5e                   	pop    esi
c00215f6:	c3                   	ret    
c00215f7:	90                   	nop

c00215f8 <SoundDevice::removeChannel(int)>:
c00215f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00215fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021600:	83 fa 1f             	cmp    edx,0x1f
c0021603:	77 23                	ja     c0021628 <SoundDevice::removeChannel(int)+0x30>
c0021605:	8d 14 90             	lea    edx,[eax+edx*4]
c0021608:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002160f:	74 17                	je     c0021628 <SoundDevice::removeChannel(int)+0x30>
c0021611:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002161b:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021621:	75 05                	jne    c0021628 <SoundDevice::removeChannel(int)+0x30>
c0021623:	8b 00                	mov    eax,DWORD PTR [eax]
c0021625:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021628:	c3                   	ret    
c0021629:	90                   	nop

c002162a <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002162a:	57                   	push   edi
c002162b:	56                   	push   esi
c002162c:	53                   	push   ebx
c002162d:	31 db                	xor    ebx,ebx
c002162f:	83 ec 10             	sub    esp,0x10
c0021632:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021636:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002163a:	0f 8d cb 00 00 00    	jge    c002170b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021640:	83 ec 0c             	sub    esp,0xc
c0021643:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021647:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002164a:	e8 58 59 00 00       	call   c0026fa7 <__extendsfdf2>
c002164f:	83 c4 10             	add    esp,0x10
c0021652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021656:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002165a:	68 00 00 f0 3f       	push   0x3ff00000
c002165f:	6a 00                	push   0x0
c0021661:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021665:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021669:	e8 c5 48 00 00       	call   c0025f33 <__adddf3>
c002166e:	83 c4 10             	add    esp,0x10
c0021671:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021675:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021679:	68 00 00 e0 3f       	push   0x3fe00000
c002167e:	6a 00                	push   0x0
c0021680:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021684:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021688:	e8 23 4f 00 00       	call   c00265b0 <__muldf3>
c002168d:	83 c4 10             	add    esp,0x10
c0021690:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021694:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021698:	68 00 00 60 40       	push   0x40600000
c002169d:	6a 00                	push   0x0
c002169f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216a7:	e8 04 4f 00 00       	call   c00265b0 <__muldf3>
c00216ac:	59                   	pop    ecx
c00216ad:	5f                   	pop    edi
c00216ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00216b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00216b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216be:	e8 c0 57 00 00       	call   c0026e83 <__truncdfsf2>
c00216c3:	5a                   	pop    edx
c00216c4:	89 c7                	mov    edi,eax
c00216c6:	59                   	pop    ecx
c00216c7:	68 00 00 fe 42       	push   0x42fe0000
c00216cc:	50                   	push   eax
c00216cd:	e8 5b 48 00 00       	call   c0025f2d <__gesf2>
c00216d2:	83 c4 10             	add    esp,0x10
c00216d5:	85 c0                	test   eax,eax
c00216d7:	78 06                	js     c00216df <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00216d9:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00216dd:	eb 26                	jmp    c0021705 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00216df:	50                   	push   eax
c00216e0:	50                   	push   eax
c00216e1:	6a 00                	push   0x0
c00216e3:	57                   	push   edi
c00216e4:	e8 48 48 00 00       	call   c0025f31 <__lesf2>
c00216e9:	83 c4 10             	add    esp,0x10
c00216ec:	85 c0                	test   eax,eax
c00216ee:	7f 06                	jg     c00216f6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00216f0:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00216f4:	eb 0f                	jmp    c0021705 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00216f6:	83 ec 0c             	sub    esp,0xc
c00216f9:	57                   	push   edi
c00216fa:	e8 3d 59 00 00       	call   c002703c <lrintf>
c00216ff:	83 c4 10             	add    esp,0x10
c0021702:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021705:	43                   	inc    ebx
c0021706:	e9 2b ff ff ff       	jmp    c0021636 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002170b:	83 c4 10             	add    esp,0x10
c002170e:	5b                   	pop    ebx
c002170f:	5e                   	pop    esi
c0021710:	5f                   	pop    edi
c0021711:	c3                   	ret    

c0021712 <SoundDevice::getAudio(int, float*, float*)>:
c0021712:	55                   	push   ebp
c0021713:	57                   	push   edi
c0021714:	56                   	push   esi
c0021715:	53                   	push   ebx
c0021716:	31 db                	xor    ebx,ebx
c0021718:	83 ec 20             	sub    esp,0x20
c002171b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002171f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021723:	c1 e0 02             	shl    eax,0x2
c0021726:	50                   	push   eax
c0021727:	6a 00                	push   0x0
c0021729:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002172d:	e8 59 ef fd ff       	call   c000068b <memset>
c0021732:	83 c4 10             	add    esp,0x10
c0021735:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021739:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021740:	85 c0                	test   eax,eax
c0021742:	0f 84 d7 00 00 00    	je     c002181f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021748:	83 ec 0c             	sub    esp,0xc
c002174b:	50                   	push   eax
c002174c:	e8 a5 fb ff ff       	call   c00212f6 <SoundChannel::paused()>
c0021751:	83 c4 10             	add    esp,0x10
c0021754:	84 c0                	test   al,al
c0021756:	0f 85 c3 00 00 00    	jne    c002181f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002175c:	83 ec 0c             	sub    esp,0xc
c002175f:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021766:	e8 19 fa ff ff       	call   c0021184 <SoundChannel::getVolume()>
c002176b:	83 c4 10             	add    esp,0x10
c002176e:	85 c0                	test   eax,eax
c0021770:	0f 84 a9 00 00 00    	je     c002181f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021776:	83 ec 0c             	sub    esp,0xc
c0021779:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021780:	e8 ff f9 ff ff       	call   c0021184 <SoundChannel::getVolume()>
c0021785:	83 ec 0c             	sub    esp,0xc
c0021788:	50                   	push   eax
c0021789:	e8 49 45 00 00       	call   c0025cd7 <__floatsisf>
c002178e:	59                   	pop    ecx
c002178f:	5d                   	pop    ebp
c0021790:	31 ed                	xor    ebp,ebp
c0021792:	68 00 00 c8 42       	push   0x42c80000
c0021797:	50                   	push   eax
c0021798:	e8 0f 43 00 00       	call   c0025aac <__divsf3>
c002179d:	83 c4 10             	add    esp,0x10
c00217a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00217a4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00217a8:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00217ae:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00217b2:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00217b9:	e8 60 fb ff ff       	call   c002131e <SoundChannel::unbuffer(float*, int, int)>
c00217be:	83 c4 20             	add    esp,0x20
c00217c1:	89 c1                	mov    ecx,eax
c00217c3:	39 cd                	cmp    ebp,ecx
c00217c5:	7d 52                	jge    c0021819 <SoundDevice::getAudio(int, float*, float*)+0x107>
c00217c7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00217cb:	50                   	push   eax
c00217cc:	50                   	push   eax
c00217cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00217d1:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00217d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00217d8:	e8 0c 41 00 00       	call   c00258e9 <__mulsf3>
c00217dd:	5a                   	pop    edx
c00217de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00217e2:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00217e8:	e8 ea 44 00 00       	call   c0025cd7 <__floatsisf>
c00217ed:	59                   	pop    ecx
c00217ee:	5a                   	pop    edx
c00217ef:	50                   	push   eax
c00217f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00217f4:	e8 b3 42 00 00       	call   c0025aac <__divsf3>
c00217f9:	59                   	pop    ecx
c00217fa:	5a                   	pop    edx
c00217fb:	50                   	push   eax
c00217fc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021800:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021803:	e8 be 3d 00 00       	call   c00255c6 <__addsf3>
c0021808:	83 c4 10             	add    esp,0x10
c002180b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002180f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021813:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0021816:	45                   	inc    ebp
c0021817:	eb aa                	jmp    c00217c3 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0021819:	39 cf                	cmp    edi,ecx
c002181b:	7e 02                	jle    c002181f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002181d:	89 cf                	mov    edi,ecx
c002181f:	43                   	inc    ebx
c0021820:	83 fb 20             	cmp    ebx,0x20
c0021823:	0f 85 10 ff ff ff    	jne    c0021739 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0021829:	83 c4 1c             	add    esp,0x1c
c002182c:	89 f8                	mov    eax,edi
c002182e:	5b                   	pop    ebx
c002182f:	5e                   	pop    esi
c0021830:	5f                   	pop    edi
c0021831:	5d                   	pop    ebp
c0021832:	c3                   	ret    
c0021833:	90                   	nop

c0021834 <PCI::open(int, int, void*)>:
c0021834:	83 ec 18             	sub    esp,0x18
c0021837:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002183b:	8b 10                	mov    edx,DWORD PTR [eax]
c002183d:	50                   	push   eax
c002183e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021841:	31 c0                	xor    eax,eax
c0021843:	83 c4 1c             	add    esp,0x1c
c0021846:	c3                   	ret    
c0021847:	90                   	nop

c0021848 <PCI::close(int, int, void*)>:
c0021848:	31 c0                	xor    eax,eax
c002184a:	c3                   	ret    
c002184b:	90                   	nop

c002184c <PCI::PCI()>:
c002184c:	83 ec 0c             	sub    esp,0xc
c002184f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021853:	83 ec 08             	sub    esp,0x8
c0021856:	68 78 af 02 c0       	push   0xc002af78
c002185b:	50                   	push   eax
c002185c:	e8 bb 1b ff ff       	call   c001341c <Bus::Bus(char const*)>
c0021861:	83 c4 10             	add    esp,0x10
c0021864:	ba e4 af 02 c0       	mov    edx,0xc002afe4
c0021869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002186d:	89 10                	mov    DWORD PTR [eax],edx
c002186f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021873:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021879:	0f b6 d0             	movzx  edx,al
c002187c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021880:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0021887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002188b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021891:	0f b6 d0             	movzx  edx,al
c0021894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021898:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002189d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00218a7:	8d 50 01             	lea    edx,[eax+0x1]
c00218aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218ae:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00218b4:	0f b6 d0             	movzx  edx,al
c00218b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218bb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00218bf:	83 c9 c0             	or     ecx,0xffffffc0
c00218c2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00218c6:	90                   	nop
c00218c7:	83 c4 0c             	add    esp,0xc
c00218ca:	c3                   	ret    
c00218cb:	90                   	nop

c00218cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00218cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00218d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00218d5:	89 ca                	mov    edx,ecx
c00218d7:	c1 e0 10             	shl    eax,0x10
c00218da:	81 e2 fc 00 00 00    	and    edx,0xfc
c00218e0:	09 d0                	or     eax,edx
c00218e2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00218e7:	c1 e2 08             	shl    edx,0x8
c00218ea:	09 d0                	or     eax,edx
c00218ec:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00218f1:	c1 e2 0b             	shl    edx,0xb
c00218f4:	09 d0                	or     eax,edx
c00218f6:	ba f8 0c 00 00       	mov    edx,0xcf8
c00218fb:	0d 00 00 00 80       	or     eax,0x80000000
c0021900:	ef                   	out    dx,eax
c0021901:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021906:	ed                   	in     eax,dx
c0021907:	83 e1 02             	and    ecx,0x2
c002190a:	0f b6 c9             	movzx  ecx,cl
c002190d:	c1 e1 03             	shl    ecx,0x3
c0021910:	d3 e8                	shr    eax,cl
c0021912:	c3                   	ret    
c0021913:	90                   	nop

c0021914 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0021914:	6a 00                	push   0x0
c0021916:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002191b:	50                   	push   eax
c002191c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021921:	50                   	push   eax
c0021922:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021927:	50                   	push   eax
c0021928:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002192c:	e8 9b ff ff ff       	call   c00218cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021931:	83 c4 14             	add    esp,0x14
c0021934:	c3                   	ret    
c0021935:	90                   	nop

c0021936 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0021936:	6a 0e                	push   0xe
c0021938:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002193d:	50                   	push   eax
c002193e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021943:	50                   	push   eax
c0021944:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021949:	50                   	push   eax
c002194a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002194e:	e8 79 ff ff ff       	call   c00218cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021953:	83 c4 14             	add    esp,0x14
c0021956:	0f b6 c0             	movzx  eax,al
c0021959:	c3                   	ret    

c002195a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002195a:	55                   	push   ebp
c002195b:	57                   	push   edi
c002195c:	56                   	push   esi
c002195d:	53                   	push   ebx
c002195e:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0021963:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0021968:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c002196d:	6a 0a                	push   0xa
c002196f:	56                   	push   esi
c0021970:	55                   	push   ebp
c0021971:	57                   	push   edi
c0021972:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021976:	e8 51 ff ff ff       	call   c00218cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002197b:	6a 0a                	push   0xa
c002197d:	89 c3                	mov    ebx,eax
c002197f:	56                   	push   esi
c0021980:	0f b6 db             	movzx  ebx,bl
c0021983:	55                   	push   ebp
c0021984:	57                   	push   edi
c0021985:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021989:	e8 3e ff ff ff       	call   c00218cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002198e:	83 c4 28             	add    esp,0x28
c0021991:	25 00 ff 00 00       	and    eax,0xff00
c0021996:	09 d8                	or     eax,ebx
c0021998:	5b                   	pop    ebx
c0021999:	5e                   	pop    esi
c002199a:	5f                   	pop    edi
c002199b:	5d                   	pop    ebp
c002199c:	c3                   	ret    
c002199d:	90                   	nop

c002199e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002199e:	6a 08                	push   0x8
c00219a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219a5:	50                   	push   eax
c00219a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219ab:	50                   	push   eax
c00219ac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219b1:	50                   	push   eax
c00219b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219b6:	e8 11 ff ff ff       	call   c00218cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219bb:	83 c4 14             	add    esp,0x14
c00219be:	0f b6 c4             	movzx  eax,ah
c00219c1:	c3                   	ret    

c00219c2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00219c2:	6a 08                	push   0x8
c00219c4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219c9:	50                   	push   eax
c00219ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219cf:	50                   	push   eax
c00219d0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219d5:	50                   	push   eax
c00219d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219da:	e8 ed fe ff ff       	call   c00218cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219df:	83 c4 14             	add    esp,0x14
c00219e2:	c3                   	ret    
c00219e3:	90                   	nop

c00219e4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00219e4:	6a 3c                	push   0x3c
c00219e6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219eb:	50                   	push   eax
c00219ec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219f1:	50                   	push   eax
c00219f2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219f7:	50                   	push   eax
c00219f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219fc:	e8 cb fe ff ff       	call   c00218cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a01:	83 c4 14             	add    esp,0x14
c0021a04:	c3                   	ret    
c0021a05:	90                   	nop

c0021a06 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0021a06:	6a 18                	push   0x18
c0021a08:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a0d:	50                   	push   eax
c0021a0e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a13:	50                   	push   eax
c0021a14:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a19:	50                   	push   eax
c0021a1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a1e:	e8 a9 fe ff ff       	call   c00218cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a23:	83 c4 14             	add    esp,0x14
c0021a26:	0f b6 c4             	movzx  eax,ah
c0021a29:	c3                   	ret    

c0021a2a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021a2a:	55                   	push   ebp
c0021a2b:	57                   	push   edi
c0021a2c:	56                   	push   esi
c0021a2d:	53                   	push   ebx
c0021a2e:	50                   	push   eax
c0021a2f:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021a33:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021a38:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021a3d:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021a42:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021a49:	8d 43 12             	lea    eax,[ebx+0x12]
c0021a4c:	83 c3 10             	add    ebx,0x10
c0021a4f:	0f b6 c0             	movzx  eax,al
c0021a52:	0f b6 db             	movzx  ebx,bl
c0021a55:	50                   	push   eax
c0021a56:	51                   	push   ecx
c0021a57:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021a5b:	57                   	push   edi
c0021a5c:	55                   	push   ebp
c0021a5d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021a61:	e8 66 fe ff ff       	call   c00218cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a66:	53                   	push   ebx
c0021a67:	89 c6                	mov    esi,eax
c0021a69:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021a6d:	c1 e6 10             	shl    esi,0x10
c0021a70:	51                   	push   ecx
c0021a71:	57                   	push   edi
c0021a72:	55                   	push   ebp
c0021a73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021a77:	e8 50 fe ff ff       	call   c00218cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a7c:	83 c4 2c             	add    esp,0x2c
c0021a7f:	0f b7 c0             	movzx  eax,ax
c0021a82:	5b                   	pop    ebx
c0021a83:	09 f0                	or     eax,esi
c0021a85:	5e                   	pop    esi
c0021a86:	5f                   	pop    edi
c0021a87:	5d                   	pop    ebp
c0021a88:	c3                   	ret    
c0021a89:	90                   	nop

c0021a8a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021a8a:	53                   	push   ebx
c0021a8b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021a90:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021a95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021a99:	c1 e1 10             	shl    ecx,0x10
c0021a9c:	25 fc 00 00 00       	and    eax,0xfc
c0021aa1:	09 c1                	or     ecx,eax
c0021aa3:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021aa8:	c1 e0 08             	shl    eax,0x8
c0021aab:	09 c1                	or     ecx,eax
c0021aad:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021ab2:	c1 e0 0b             	shl    eax,0xb
c0021ab5:	09 c1                	or     ecx,eax
c0021ab7:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021abd:	89 c8                	mov    eax,ecx
c0021abf:	ef                   	out    dx,eax
c0021ac0:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021ac5:	ed                   	in     eax,dx
c0021ac6:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0021acb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0021ad0:	74 0a                	je     c0021adc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0021ad2:	0f b7 d8             	movzx  ebx,ax
c0021ad5:	89 d0                	mov    eax,edx
c0021ad7:	c1 e0 10             	shl    eax,0x10
c0021ada:	eb 05                	jmp    c0021ae1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0021adc:	66 31 c0             	xor    ax,ax
c0021adf:	89 d3                	mov    ebx,edx
c0021ae1:	09 c3                	or     ebx,eax
c0021ae3:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021ae8:	89 c8                	mov    eax,ecx
c0021aea:	ef                   	out    dx,eax
c0021aeb:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021af0:	89 d8                	mov    eax,ebx
c0021af2:	ef                   	out    dx,eax
c0021af3:	5b                   	pop    ebx
c0021af4:	c3                   	ret    
c0021af5:	90                   	nop

c0021af6 <PCI::checkBus(unsigned char)>:
c0021af6:	56                   	push   esi
c0021af7:	53                   	push   ebx
c0021af8:	31 db                	xor    ebx,ebx
c0021afa:	51                   	push   ecx
c0021afb:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021b00:	52                   	push   edx
c0021b01:	53                   	push   ebx
c0021b02:	43                   	inc    ebx
c0021b03:	56                   	push   esi
c0021b04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b08:	e8 2b 03 00 00       	call   c0021e38 <PCI::checkDevice(unsigned char, unsigned char)>
c0021b0d:	83 c4 10             	add    esp,0x10
c0021b10:	83 fb 20             	cmp    ebx,0x20
c0021b13:	75 eb                	jne    c0021b00 <PCI::checkBus(unsigned char)+0xa>
c0021b15:	58                   	pop    eax
c0021b16:	5b                   	pop    ebx
c0021b17:	5e                   	pop    esi
c0021b18:	c3                   	ret    
c0021b19:	90                   	nop

c0021b1a <PCI::foundDevice(PCIDeviceInfo)>:
c0021b1a:	55                   	push   ebp
c0021b1b:	57                   	push   edi
c0021b1c:	56                   	push   esi
c0021b1d:	53                   	push   ebx
c0021b1e:	83 ec 1c             	sub    esp,0x1c
c0021b21:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021b25:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0021b2b:	0f 84 52 01 00 00    	je     c0021c83 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021b31:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0021b35:	66 81 f9 06 04       	cmp    cx,0x406
c0021b3a:	75 2c                	jne    c0021b68 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0021b3c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0021b41:	50                   	push   eax
c0021b42:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0021b47:	50                   	push   eax
c0021b48:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0021b4d:	50                   	push   eax
c0021b4e:	56                   	push   esi
c0021b4f:	e8 b2 fe ff ff       	call   c0021a06 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021b54:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021b58:	0f b6 c0             	movzx  eax,al
c0021b5b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0021b5f:	83 c4 2c             	add    esp,0x2c
c0021b62:	5b                   	pop    ebx
c0021b63:	5e                   	pop    esi
c0021b64:	5f                   	pop    edi
c0021b65:	5d                   	pop    ebp
c0021b66:	eb 8e                	jmp    c0021af6 <PCI::checkBus(unsigned char)>
c0021b68:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021b6c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0021b72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b76:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0021b7a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0021b7e:	88 d3                	mov    bl,dl
c0021b80:	85 c0                	test   eax,eax
c0021b82:	74 33                	je     c0021bb7 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0021b84:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021b87:	85 d2                	test   edx,edx
c0021b89:	74 28                	je     c0021bb3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021b8b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021b91:	31 ef                	xor    edi,ebp
c0021b93:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021b99:	75 18                	jne    c0021bb3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021b9b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021b9f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0021ba5:	75 0c                	jne    c0021bb3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021ba7:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0021bad:	0f 84 d0 00 00 00    	je     c0021c83 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021bb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bb5:	eb c9                	jmp    c0021b80 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021bb7:	66 81 f9 01 06       	cmp    cx,0x601
c0021bbc:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0021bc0:	75 19                	jne    c0021bdb <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0021bc2:	83 ec 0c             	sub    esp,0xc
c0021bc5:	68 64 01 00 00       	push   0x164
c0021bca:	e8 05 d9 fe ff       	call   c000f4d4 <malloc>
c0021bcf:	89 c5                	mov    ebp,eax
c0021bd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0021bd4:	e8 95 0f 00 00       	call   c0022b6e <SATABus::SATABus()>
c0021bd9:	eb 1e                	jmp    c0021bf9 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0021bdb:	66 81 f9 01 01       	cmp    cx,0x101
c0021be0:	75 60                	jne    c0021c42 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0021be2:	83 ec 0c             	sub    esp,0xc
c0021be5:	68 70 02 00 00       	push   0x270
c0021bea:	e8 e5 d8 fe ff       	call   c000f4d4 <malloc>
c0021bef:	89 c5                	mov    ebp,eax
c0021bf1:	89 04 24             	mov    DWORD PTR [esp],eax
c0021bf4:	e8 03 03 00 00       	call   c0021efc <IDE::IDE()>
c0021bf9:	58                   	pop    eax
c0021bfa:	5a                   	pop    edx
c0021bfb:	55                   	push   ebp
c0021bfc:	56                   	push   esi
c0021bfd:	e8 6e 1f ff ff       	call   c0013b70 <Device::addChild(Device*)>
c0021c02:	83 ec 1c             	sub    esp,0x1c
c0021c05:	b9 09 00 00 00       	mov    ecx,0x9
c0021c0a:	fc                   	cld    
c0021c0b:	89 e7                	mov    edi,esp
c0021c0d:	89 de                	mov    esi,ebx
c0021c0f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021c11:	55                   	push   ebp
c0021c12:	e8 63 1e ff ff       	call   c0013a7a <Device::preOpenPCI(PCIDeviceInfo)>
c0021c17:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021c1a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0021c1e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0021c26:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0021c2e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0021c36:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021c39:	83 c4 4c             	add    esp,0x4c
c0021c3c:	5b                   	pop    ebx
c0021c3d:	5e                   	pop    esi
c0021c3e:	5f                   	pop    edi
c0021c3f:	5d                   	pop    ebp
c0021c40:	ff e0                	jmp    eax
c0021c42:	83 ec 0c             	sub    esp,0xc
c0021c45:	68 58 01 00 00       	push   0x158
c0021c4a:	e8 85 d8 fe ff       	call   c000f4d4 <malloc>
c0021c4f:	89 c5                	mov    ebp,eax
c0021c51:	58                   	pop    eax
c0021c52:	5a                   	pop    edx
c0021c53:	68 80 af 02 c0       	push   0xc002af80
c0021c58:	55                   	push   ebp
c0021c59:	e8 08 22 ff ff       	call   c0013e66 <DriverlessDevice::DriverlessDevice(char const*)>
c0021c5e:	59                   	pop    ecx
c0021c5f:	5f                   	pop    edi
c0021c60:	55                   	push   ebp
c0021c61:	56                   	push   esi
c0021c62:	e8 09 1f ff ff       	call   c0013b70 <Device::addChild(Device*)>
c0021c67:	b9 09 00 00 00       	mov    ecx,0x9
c0021c6c:	fc                   	cld    
c0021c6d:	89 df                	mov    edi,ebx
c0021c6f:	89 de                	mov    esi,ebx
c0021c71:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021c73:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0021c77:	83 c4 2c             	add    esp,0x2c
c0021c7a:	5b                   	pop    ebx
c0021c7b:	5e                   	pop    esi
c0021c7c:	5f                   	pop    edi
c0021c7d:	5d                   	pop    ebp
c0021c7e:	e9 f7 1d ff ff       	jmp    c0013a7a <Device::preOpenPCI(PCIDeviceInfo)>
c0021c83:	83 c4 1c             	add    esp,0x1c
c0021c86:	5b                   	pop    ebx
c0021c87:	5e                   	pop    esi
c0021c88:	5f                   	pop    edi
c0021c89:	5d                   	pop    ebp
c0021c8a:	c3                   	ret    
c0021c8b:	90                   	nop

c0021c8c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0021c8c:	55                   	push   ebp
c0021c8d:	57                   	push   edi
c0021c8e:	56                   	push   esi
c0021c8f:	53                   	push   ebx
c0021c90:	83 ec 5c             	sub    esp,0x5c
c0021c93:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0021c97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021c9b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0021c9f:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0021ca4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021ca8:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0021cac:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0021cb1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021cb5:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0021cba:	6a 0c                	push   0xc
c0021cbc:	55                   	push   ebp
c0021cbd:	53                   	push   ebx
c0021cbe:	57                   	push   edi
c0021cbf:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0021cc6:	e8 01 fc ff ff       	call   c00218cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021ccb:	55                   	push   ebp
c0021ccc:	53                   	push   ebx
c0021ccd:	57                   	push   edi
c0021cce:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021cd5:	e8 80 fc ff ff       	call   c002195a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0021cda:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0021cdf:	83 c4 24             	add    esp,0x24
c0021ce2:	55                   	push   ebp
c0021ce3:	53                   	push   ebx
c0021ce4:	57                   	push   edi
c0021ce5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021ce9:	e8 f6 fc ff ff       	call   c00219e4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0021cee:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021cf2:	6a 3c                	push   0x3c
c0021cf4:	55                   	push   ebp
c0021cf5:	53                   	push   ebx
c0021cf6:	57                   	push   edi
c0021cf7:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021cfe:	e8 c9 fb ff ff       	call   c00218cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d03:	0f b6 c4             	movzx  eax,ah
c0021d06:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021d0a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0021d0e:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0021d12:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0021d17:	83 c4 24             	add    esp,0x24
c0021d1a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021d20:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0021d27:	74 6c                	je     c0021d95 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021d29:	31 f6                	xor    esi,esi
c0021d2b:	8b 15 48 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c948
c0021d31:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021d37:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0021d3d:	7e 56                	jle    c0021d95 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021d3f:	8d 14 f2             	lea    edx,[edx+esi*8]
c0021d42:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0021d49:	39 cb                	cmp    ebx,ecx
c0021d4b:	75 45                	jne    c0021d92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021d4d:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0021d54:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0021d58:	75 38                	jne    c0021d92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021d5a:	83 ec 0c             	sub    esp,0xc
c0021d5d:	68 9a af 02 c0       	push   0xc002af9a
c0021d62:	e8 1a 0a ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0021d67:	8b 15 48 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c948
c0021d6d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021d73:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0021d7b:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0021d7f:	52                   	push   edx
c0021d80:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d84:	53                   	push   ebx
c0021d85:	68 bf af 02 c0       	push   0xc002afbf
c0021d8a:	e8 f2 09 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0021d8f:	83 c4 20             	add    esp,0x20
c0021d92:	46                   	inc    esi
c0021d93:	eb 96                	jmp    c0021d2b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0021d95:	31 d2                	xor    edx,edx
c0021d97:	83 ec 0c             	sub    esp,0xc
c0021d9a:	55                   	push   ebp
c0021d9b:	53                   	push   ebx
c0021d9c:	57                   	push   edi
c0021d9d:	52                   	push   edx
c0021d9e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021da2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021da9:	e8 7c fc ff ff       	call   c0021a2a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021dae:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0021db2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021db6:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0021dba:	42                   	inc    edx
c0021dbb:	83 c4 20             	add    esp,0x20
c0021dbe:	83 fa 06             	cmp    edx,0x6
c0021dc1:	75 d4                	jne    c0021d97 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0021dc3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021dc7:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0021dcb:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0021dcf:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0021dd3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021dd7:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0021ddb:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0021de0:	86 e0                	xchg   al,ah
c0021de2:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0021de7:	55                   	push   ebp
c0021de8:	53                   	push   ebx
c0021de9:	57                   	push   edi
c0021dea:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021dee:	e8 ab fb ff ff       	call   c002199e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0021df3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0021df7:	55                   	push   ebp
c0021df8:	53                   	push   ebx
c0021df9:	57                   	push   edi
c0021dfa:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021e01:	e8 0e fb ff ff       	call   c0021914 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021e06:	83 ec 0c             	sub    esp,0xc
c0021e09:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0021e0e:	b9 09 00 00 00       	mov    ecx,0x9
c0021e13:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0021e17:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0021e1b:	fc                   	cld    
c0021e1c:	89 e7                	mov    edi,esp
c0021e1e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021e20:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021e27:	e8 ee fc ff ff       	call   c0021b1a <PCI::foundDevice(PCIDeviceInfo)>
c0021e2c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0021e32:	5b                   	pop    ebx
c0021e33:	5e                   	pop    esi
c0021e34:	5f                   	pop    edi
c0021e35:	5d                   	pop    ebp
c0021e36:	c3                   	ret    
c0021e37:	90                   	nop

c0021e38 <PCI::checkDevice(unsigned char, unsigned char)>:
c0021e38:	55                   	push   ebp
c0021e39:	57                   	push   edi
c0021e3a:	56                   	push   esi
c0021e3b:	53                   	push   ebx
c0021e3c:	83 ec 0c             	sub    esp,0xc
c0021e3f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0021e43:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0021e48:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021e4d:	6a 00                	push   0x0
c0021e4f:	56                   	push   esi
c0021e50:	57                   	push   edi
c0021e51:	55                   	push   ebp
c0021e52:	e8 bd fa ff ff       	call   c0021914 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021e57:	6a 00                	push   0x0
c0021e59:	56                   	push   esi
c0021e5a:	57                   	push   edi
c0021e5b:	55                   	push   ebp
c0021e5c:	e8 2b fe ff ff       	call   c0021c8c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021e61:	83 c4 20             	add    esp,0x20
c0021e64:	6a 00                	push   0x0
c0021e66:	56                   	push   esi
c0021e67:	57                   	push   edi
c0021e68:	55                   	push   ebp
c0021e69:	e8 c8 fa ff ff       	call   c0021936 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021e6e:	83 c4 10             	add    esp,0x10
c0021e71:	84 c0                	test   al,al
c0021e73:	79 27                	jns    c0021e9c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0021e75:	bb 01 00 00 00       	mov    ebx,0x1
c0021e7a:	53                   	push   ebx
c0021e7b:	56                   	push   esi
c0021e7c:	57                   	push   edi
c0021e7d:	55                   	push   ebp
c0021e7e:	e8 91 fa ff ff       	call   c0021914 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021e83:	83 c4 10             	add    esp,0x10
c0021e86:	66 40                	inc    ax
c0021e88:	74 0c                	je     c0021e96 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0021e8a:	53                   	push   ebx
c0021e8b:	56                   	push   esi
c0021e8c:	57                   	push   edi
c0021e8d:	55                   	push   ebp
c0021e8e:	e8 f9 fd ff ff       	call   c0021c8c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021e93:	83 c4 10             	add    esp,0x10
c0021e96:	43                   	inc    ebx
c0021e97:	83 fb 08             	cmp    ebx,0x8
c0021e9a:	75 de                	jne    c0021e7a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0021e9c:	83 c4 0c             	add    esp,0xc
c0021e9f:	5b                   	pop    ebx
c0021ea0:	5e                   	pop    esi
c0021ea1:	5f                   	pop    edi
c0021ea2:	5d                   	pop    ebp
c0021ea3:	c3                   	ret    

c0021ea4 <PCI::detect()>:
c0021ea4:	56                   	push   esi
c0021ea5:	53                   	push   ebx
c0021ea6:	53                   	push   ebx
c0021ea7:	31 db                	xor    ebx,ebx
c0021ea9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021ead:	6a 00                	push   0x0
c0021eaf:	6a 00                	push   0x0
c0021eb1:	6a 00                	push   0x0
c0021eb3:	56                   	push   esi
c0021eb4:	e8 7d fa ff ff       	call   c0021936 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021eb9:	83 c4 10             	add    esp,0x10
c0021ebc:	a8 80                	test   al,0x80
c0021ebe:	75 21                	jne    c0021ee1 <PCI::detect()+0x3d>
c0021ec0:	51                   	push   ecx
c0021ec1:	51                   	push   ecx
c0021ec2:	6a 00                	push   0x0
c0021ec4:	56                   	push   esi
c0021ec5:	e8 2c fc ff ff       	call   c0021af6 <PCI::checkBus(unsigned char)>
c0021eca:	83 c4 10             	add    esp,0x10
c0021ecd:	eb 24                	jmp    c0021ef3 <PCI::detect()+0x4f>
c0021ecf:	52                   	push   edx
c0021ed0:	52                   	push   edx
c0021ed1:	53                   	push   ebx
c0021ed2:	43                   	inc    ebx
c0021ed3:	56                   	push   esi
c0021ed4:	e8 1d fc ff ff       	call   c0021af6 <PCI::checkBus(unsigned char)>
c0021ed9:	83 c4 10             	add    esp,0x10
c0021edc:	83 fb 08             	cmp    ebx,0x8
c0021edf:	74 12                	je     c0021ef3 <PCI::detect()+0x4f>
c0021ee1:	53                   	push   ebx
c0021ee2:	6a 00                	push   0x0
c0021ee4:	6a 00                	push   0x0
c0021ee6:	56                   	push   esi
c0021ee7:	e8 28 fa ff ff       	call   c0021914 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021eec:	83 c4 10             	add    esp,0x10
c0021eef:	66 40                	inc    ax
c0021ef1:	74 dc                	je     c0021ecf <PCI::detect()+0x2b>
c0021ef3:	58                   	pop    eax
c0021ef4:	5b                   	pop    ebx
c0021ef5:	5e                   	pop    esi
c0021ef6:	c3                   	ret    
c0021ef7:	90                   	nop

c0021ef8 <IDE::close(int, int, void*)>:
c0021ef8:	83 c8 ff             	or     eax,0xffffffff
c0021efb:	c3                   	ret    

c0021efc <IDE::IDE()>:
c0021efc:	83 ec 0c             	sub    esp,0xc
c0021eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f03:	83 ec 08             	sub    esp,0x8
c0021f06:	68 08 b0 02 c0       	push   0xc002b008
c0021f0b:	50                   	push   eax
c0021f0c:	e8 eb 1f ff ff       	call   c0013efc <HardDiskController::HardDiskController(char const*)>
c0021f11:	83 c4 10             	add    esp,0x10
c0021f14:	ba 48 b2 02 c0       	mov    edx,0xc002b248
c0021f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f1d:	89 10                	mov    DWORD PTR [eax],edx
c0021f1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f23:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0021f2a:	90                   	nop
c0021f2b:	83 c4 0c             	add    esp,0xc
c0021f2e:	c3                   	ret    
c0021f2f:	90                   	nop

c0021f30 <IDE::prepareInterrupt(unsigned char)>:
c0021f30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021f35:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021f39:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0021f41:	c3                   	ret    

c0021f42 <selectDrive(unsigned char, unsigned char)>:
c0021f42:	c3                   	ret    
c0021f43:	90                   	nop

c0021f44 <IDE::getBase(unsigned char)>:
c0021f44:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0021f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f4d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0021f55:	c3                   	ret    

c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0021f56:	55                   	push   ebp
c0021f57:	57                   	push   edi
c0021f58:	56                   	push   esi
c0021f59:	53                   	push   ebx
c0021f5a:	83 ec 1c             	sub    esp,0x1c
c0021f5d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f61:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021f65:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0021f68:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021f6c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021f70:	80 f9 03             	cmp    cl,0x3
c0021f73:	77 51                	ja     c0021fc6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0021f75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021f79:	0f b6 f2             	movzx  esi,dl
c0021f7c:	0f b6 db             	movzx  ebx,bl
c0021f7f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0021f82:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0021f86:	83 ca 80             	or     edx,0xffffff80
c0021f89:	0f b6 d2             	movzx  edx,dl
c0021f8c:	52                   	push   edx
c0021f8d:	6a 0c                	push   0xc
c0021f8f:	56                   	push   esi
c0021f90:	57                   	push   edi
c0021f91:	e8 c0 ff ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f96:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0021f9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021f9f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0021fa3:	ee                   	out    dx,al
c0021fa4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0021fa9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0021fad:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0021fb1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0021fb5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021fbd:	83 c4 2c             	add    esp,0x2c
c0021fc0:	5b                   	pop    ebx
c0021fc1:	5e                   	pop    esi
c0021fc2:	5f                   	pop    edi
c0021fc3:	5d                   	pop    ebp
c0021fc4:	eb 90                	jmp    c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021fc6:	80 fb 07             	cmp    bl,0x7
c0021fc9:	77 12                	ja     c0021fdd <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0021fcb:	0f b6 d2             	movzx  edx,dl
c0021fce:	0f b6 db             	movzx  ebx,bl
c0021fd1:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0021fd9:	89 da                	mov    edx,ebx
c0021fdb:	eb 2f                	jmp    c002200c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021fdd:	80 fb 0d             	cmp    bl,0xd
c0021fe0:	77 13                	ja     c0021ff5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0021fe2:	0f b6 d2             	movzx  edx,dl
c0021fe5:	0f b6 db             	movzx  ebx,bl
c0021fe8:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0021fef:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0021ff3:	eb 17                	jmp    c002200c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021ff5:	80 fb 15             	cmp    bl,0x15
c0021ff8:	77 13                	ja     c002200d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0021ffa:	0f b6 d2             	movzx  edx,dl
c0021ffd:	0f b6 db             	movzx  ebx,bl
c0022000:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022008:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002200c:	ee                   	out    dx,al
c002200d:	83 c4 1c             	add    esp,0x1c
c0022010:	5b                   	pop    ebx
c0022011:	5e                   	pop    esi
c0022012:	5f                   	pop    edi
c0022013:	5d                   	pop    ebp
c0022014:	c3                   	ret    
c0022015:	90                   	nop

c0022016 <IDE::read(unsigned char, unsigned char)>:
c0022016:	55                   	push   ebp
c0022017:	57                   	push   edi
c0022018:	56                   	push   esi
c0022019:	53                   	push   ebx
c002201a:	83 ec 1c             	sub    esp,0x1c
c002201d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022021:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022025:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022028:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002202c:	3c 03                	cmp    al,0x3
c002202e:	77 43                	ja     c0022073 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022030:	0f b6 f2             	movzx  esi,dl
c0022033:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022036:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002203a:	83 c8 80             	or     eax,0xffffff80
c002203d:	0f b6 c0             	movzx  eax,al
c0022040:	50                   	push   eax
c0022041:	6a 0c                	push   0xc
c0022043:	56                   	push   esi
c0022044:	57                   	push   edi
c0022045:	e8 0c ff ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002204a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002204f:	0f b6 c3             	movzx  eax,bl
c0022052:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022056:	ec                   	in     al,dx
c0022057:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002205b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022060:	52                   	push   edx
c0022061:	6a 0c                	push   0xc
c0022063:	56                   	push   esi
c0022064:	57                   	push   edi
c0022065:	e8 ec fe ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002206a:	83 c4 20             	add    esp,0x20
c002206d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022071:	eb 49                	jmp    c00220bc <IDE::read(unsigned char, unsigned char)+0xa6>
c0022073:	80 fb 07             	cmp    bl,0x7
c0022076:	77 12                	ja     c002208a <IDE::read(unsigned char, unsigned char)+0x74>
c0022078:	0f b6 d2             	movzx  edx,dl
c002207b:	0f b6 c3             	movzx  eax,bl
c002207e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022086:	89 c2                	mov    edx,eax
c0022088:	eb 31                	jmp    c00220bb <IDE::read(unsigned char, unsigned char)+0xa5>
c002208a:	80 fb 0d             	cmp    bl,0xd
c002208d:	77 13                	ja     c00220a2 <IDE::read(unsigned char, unsigned char)+0x8c>
c002208f:	0f b6 d2             	movzx  edx,dl
c0022092:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022099:	0f b6 d3             	movzx  edx,bl
c002209c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00220a0:	eb 19                	jmp    c00220bb <IDE::read(unsigned char, unsigned char)+0xa5>
c00220a2:	31 c0                	xor    eax,eax
c00220a4:	80 fb 15             	cmp    bl,0x15
c00220a7:	77 13                	ja     c00220bc <IDE::read(unsigned char, unsigned char)+0xa6>
c00220a9:	0f b6 d2             	movzx  edx,dl
c00220ac:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00220b4:	0f b6 d3             	movzx  edx,bl
c00220b7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00220bb:	ec                   	in     al,dx
c00220bc:	83 c4 1c             	add    esp,0x1c
c00220bf:	5b                   	pop    ebx
c00220c0:	5e                   	pop    esi
c00220c1:	5f                   	pop    edi
c00220c2:	5d                   	pop    ebp
c00220c3:	c3                   	ret    

c00220c4 <IDE::waitInterrupt(unsigned char)>:
c00220c4:	55                   	push   ebp
c00220c5:	57                   	push   edi
c00220c6:	56                   	push   esi
c00220c7:	53                   	push   ebx
c00220c8:	31 db                	xor    ebx,ebx
c00220ca:	83 ec 0c             	sub    esp,0xc
c00220cd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00220d1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00220d6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00220de:	89 e8                	mov    eax,ebp
c00220e0:	84 c0                	test   al,al
c00220e2:	75 34                	jne    c0022118 <IDE::waitInterrupt(unsigned char)+0x54>
c00220e4:	52                   	push   edx
c00220e5:	6a 0c                	push   0xc
c00220e7:	56                   	push   esi
c00220e8:	57                   	push   edi
c00220e9:	e8 28 ff ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c00220ee:	83 c4 10             	add    esp,0x10
c00220f1:	a8 01                	test   al,0x1
c00220f3:	75 2b                	jne    c0022120 <IDE::waitInterrupt(unsigned char)+0x5c>
c00220f5:	f6 c3 04             	test   bl,0x4
c00220f8:	75 16                	jne    c0022110 <IDE::waitInterrupt(unsigned char)+0x4c>
c00220fa:	83 fb 32             	cmp    ebx,0x32
c00220fd:	7e 11                	jle    c0022110 <IDE::waitInterrupt(unsigned char)+0x4c>
c00220ff:	50                   	push   eax
c0022100:	50                   	push   eax
c0022101:	6a 00                	push   0x0
c0022103:	68 80 96 98 00       	push   0x989680
c0022108:	e8 6d b1 ff ff       	call   c001d27a <nanoSleep(unsigned long long)>
c002210d:	83 c4 10             	add    esp,0x10
c0022110:	83 fb 3c             	cmp    ebx,0x3c
c0022113:	74 0b                	je     c0022120 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022115:	43                   	inc    ebx
c0022116:	eb be                	jmp    c00220d6 <IDE::waitInterrupt(unsigned char)+0x12>
c0022118:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022120:	83 c4 0c             	add    esp,0xc
c0022123:	89 e8                	mov    eax,ebp
c0022125:	5b                   	pop    ebx
c0022126:	5e                   	pop    esi
c0022127:	5f                   	pop    edi
c0022128:	5d                   	pop    ebp
c0022129:	c3                   	ret    

c002212a <ideChannel0IRQHandler(regs*, void*)>:
c002212a:	83 ec 10             	sub    esp,0x10
c002212d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022131:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022138:	6a 07                	push   0x7
c002213a:	6a 00                	push   0x0
c002213c:	50                   	push   eax
c002213d:	e8 d4 fe ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c0022142:	83 c4 1c             	add    esp,0x1c
c0022145:	c3                   	ret    

c0022146 <ideChannel1IRQHandler(regs*, void*)>:
c0022146:	83 ec 10             	sub    esp,0x10
c0022149:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002214d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022154:	6a 07                	push   0x7
c0022156:	6a 01                	push   0x1
c0022158:	50                   	push   eax
c0022159:	e8 b8 fe ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c002215e:	83 c4 1c             	add    esp,0x1c
c0022161:	c3                   	ret    

c0022162 <IDE::enableIRQs(unsigned char, bool)>:
c0022162:	57                   	push   edi
c0022163:	56                   	push   esi
c0022164:	be 04 00 00 00       	mov    esi,0x4
c0022169:	53                   	push   ebx
c002216a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002216f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022173:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022178:	0f 94 c0             	sete   al
c002217b:	d1 e0                	shl    eax,1
c002217d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022184:	0f b6 c0             	movzx  eax,al
c0022187:	50                   	push   eax
c0022188:	6a 0c                	push   0xc
c002218a:	57                   	push   edi
c002218b:	53                   	push   ebx
c002218c:	e8 c5 fd ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022191:	83 c4 10             	add    esp,0x10
c0022194:	50                   	push   eax
c0022195:	6a 0c                	push   0xc
c0022197:	57                   	push   edi
c0022198:	53                   	push   ebx
c0022199:	e8 78 fe ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c002219e:	83 c4 10             	add    esp,0x10
c00221a1:	4e                   	dec    esi
c00221a2:	75 f0                	jne    c0022194 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00221a4:	5b                   	pop    ebx
c00221a5:	5e                   	pop    esi
c00221a6:	5f                   	pop    edi
c00221a7:	c3                   	ret    

c00221a8 <IDE::open(int, int, void*)>:
c00221a8:	55                   	push   ebp
c00221a9:	57                   	push   edi
c00221aa:	56                   	push   esi
c00221ab:	53                   	push   ebx
c00221ac:	83 ec 1c             	sub    esp,0x1c
c00221af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00221b3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00221bc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00221c5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00221cc:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00221d3:	0f 85 b0 02 00 00    	jne    c0022489 <IDE::open(int, int, void*)+0x2e1>
c00221d9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00221df:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00221e3:	83 e0 7f             	and    eax,0x7f
c00221e6:	3c 05                	cmp    al,0x5
c00221e8:	74 04                	je     c00221ee <IDE::open(int, int, void*)+0x46>
c00221ea:	3c 0f                	cmp    al,0xf
c00221ec:	75 32                	jne    c0022220 <IDE::open(int, int, void*)+0x78>
c00221ee:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00221f4:	83 e0 fc             	and    eax,0xfffffffc
c00221f7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00221fe:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022204:	83 e0 fc             	and    eax,0xfffffffc
c0022207:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002220e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022214:	83 e0 fc             	and    eax,0xfffffffc
c0022217:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002221e:	eb 14                	jmp    c0022234 <IDE::open(int, int, void*)+0x8c>
c0022220:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002222a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022234:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002223b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022242:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022246:	89 c6                	mov    esi,eax
c0022248:	bf f8 0c 00 00       	mov    edi,0xcf8
c002224d:	c1 e6 10             	shl    esi,0x10
c0022250:	89 e8                	mov    eax,ebp
c0022252:	89 fa                	mov    edx,edi
c0022254:	c1 e0 0b             	shl    eax,0xb
c0022257:	09 f0                	or     eax,esi
c0022259:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0022260:	c1 e6 08             	shl    esi,0x8
c0022263:	09 c6                	or     esi,eax
c0022265:	89 f0                	mov    eax,esi
c0022267:	0d 08 00 00 80       	or     eax,0x80000008
c002226c:	ef                   	out    dx,eax
c002226d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022272:	89 ca                	mov    edx,ecx
c0022274:	ed                   	in     eax,dx
c0022275:	c1 e8 10             	shr    eax,0x10
c0022278:	3d ff ff 00 00       	cmp    eax,0xffff
c002227d:	0f 84 f5 00 00 00    	je     c0022378 <IDE::open(int, int, void*)+0x1d0>
c0022283:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0022289:	89 fa                	mov    edx,edi
c002228b:	89 f0                	mov    eax,esi
c002228d:	ef                   	out    dx,eax
c002228e:	b0 fe                	mov    al,0xfe
c0022290:	89 ca                	mov    edx,ecx
c0022292:	ee                   	out    dx,al
c0022293:	89 f0                	mov    eax,esi
c0022295:	89 fa                	mov    edx,edi
c0022297:	ef                   	out    dx,eax
c0022298:	89 ca                	mov    edx,ecx
c002229a:	ed                   	in     eax,dx
c002229b:	3c fe                	cmp    al,0xfe
c002229d:	0f 85 a9 00 00 00    	jne    c002234c <IDE::open(int, int, void*)+0x1a4>
c00222a3:	8b 15 48 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c948
c00222a9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00222b0:	74 33                	je     c00222e5 <IDE::open(int, int, void*)+0x13d>
c00222b2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00222b8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00222bc:	40                   	inc    eax
c00222bd:	83 ec 0c             	sub    esp,0xc
c00222c0:	0f b6 c0             	movzx  eax,al
c00222c3:	50                   	push   eax
c00222c4:	55                   	push   ebp
c00222c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00222c9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00222cf:	51                   	push   ecx
c00222d0:	e8 bb 54 ff ff       	call   c0017790 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00222d5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00222da:	83 c4 1c             	add    esp,0x1c
c00222dd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00222e3:	eb 0a                	jmp    c00222ef <IDE::open(int, int, void*)+0x147>
c00222e5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00222ef:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00222f6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00222fd:	c1 e1 10             	shl    ecx,0x10
c0022300:	c1 e0 08             	shl    eax,0x8
c0022303:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022308:	09 c1                	or     ecx,eax
c002230a:	89 fa                	mov    edx,edi
c002230c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022313:	c1 e0 0b             	shl    eax,0xb
c0022316:	09 c1                	or     ecx,eax
c0022318:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002231e:	89 c8                	mov    eax,ecx
c0022320:	ef                   	out    dx,eax
c0022321:	be fc 0c 00 00       	mov    esi,0xcfc
c0022326:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002232c:	89 f2                	mov    edx,esi
c002232e:	ee                   	out    dx,al
c002232f:	89 c8                	mov    eax,ecx
c0022331:	89 fa                	mov    edx,edi
c0022333:	ef                   	out    dx,eax
c0022334:	89 f2                	mov    edx,esi
c0022336:	ed                   	in     eax,dx
c0022337:	0f b6 c0             	movzx  eax,al
c002233a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022340:	74 46                	je     c0022388 <IDE::open(int, int, void*)+0x1e0>
c0022342:	83 ec 0c             	sub    esp,0xc
c0022345:	68 20 b0 02 c0       	push   0xc002b020
c002234a:	eb 34                	jmp    c0022380 <IDE::open(int, int, void*)+0x1d8>
c002234c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022355:	75 17                	jne    c002236e <IDE::open(int, int, void*)+0x1c6>
c0022357:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002235c:	74 07                	je     c0022365 <IDE::open(int, int, void*)+0x1bd>
c002235e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022363:	75 09                	jne    c002236e <IDE::open(int, int, void*)+0x1c6>
c0022365:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002236c:	eb 1a                	jmp    c0022388 <IDE::open(int, int, void*)+0x1e0>
c002236e:	83 ec 0c             	sub    esp,0xc
c0022371:	68 28 b0 02 c0       	push   0xc002b028
c0022376:	eb 08                	jmp    c0022380 <IDE::open(int, int, void*)+0x1d8>
c0022378:	83 ec 0c             	sub    esp,0xc
c002237b:	68 59 b0 02 c0       	push   0xc002b059
c0022380:	e8 16 75 ff ff       	call   c001989b <Krnl::panic(char const*)>
c0022385:	83 c4 10             	add    esp,0x10
c0022388:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002238f:	79 1a                	jns    c00223ab <IDE::open(int, int, void*)+0x203>
c0022391:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0022397:	83 e0 fc             	and    eax,0xfffffffc
c002239a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00223a1:	83 c0 08             	add    eax,0x8
c00223a4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00223ab:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00223b1:	89 c2                	mov    edx,eax
c00223b3:	83 e2 0f             	and    edx,0xf
c00223b6:	66 83 fa 08          	cmp    dx,0x8
c00223ba:	75 0a                	jne    c00223c6 <IDE::open(int, int, void*)+0x21e>
c00223bc:	83 e8 02             	sub    eax,0x2
c00223bf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00223c6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00223cc:	89 c2                	mov    edx,eax
c00223ce:	83 e2 0f             	and    edx,0xf
c00223d1:	66 83 fa 08          	cmp    dx,0x8
c00223d5:	75 0a                	jne    c00223e1 <IDE::open(int, int, void*)+0x239>
c00223d7:	83 e8 02             	sub    eax,0x2
c00223da:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00223e1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00223e8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00223ef:	89 d0                	mov    eax,edx
c00223f1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00223f4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00223f8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00223fc:	8d 4a 01             	lea    ecx,[edx+0x1]
c00223ff:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022404:	0f b6 c9             	movzx  ecx,cl
c0022407:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002240e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022411:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022415:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022419:	8d 50 02             	lea    edx,[eax+0x2]
c002241c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022421:	0f b6 d2             	movzx  edx,dl
c0022424:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002242a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002242d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022431:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022435:	8d 48 03             	lea    ecx,[eax+0x3]
c0022438:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002243d:	0f b6 c9             	movzx  ecx,cl
c0022440:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022446:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022449:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002244d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022451:	8d 50 04             	lea    edx,[eax+0x4]
c0022454:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002245a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002245f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0022466:	66 85 f6             	test   si,si
c0022469:	74 3e                	je     c00224a9 <IDE::open(int, int, void*)+0x301>
c002246b:	0f b6 d2             	movzx  edx,dl
c002246e:	83 c0 05             	add    eax,0x5
c0022471:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022474:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022478:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002247c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022482:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022487:	eb 20                	jmp    c00224a9 <IDE::open(int, int, void*)+0x301>
c0022489:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022493:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002249d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00224a4:	e9 02 ff ff ff       	jmp    c00223ab <IDE::open(int, int, void*)+0x203>
c00224a9:	52                   	push   edx
c00224aa:	52                   	push   edx
c00224ab:	6a 00                	push   0x0
c00224ad:	53                   	push   ebx
c00224ae:	e8 7d fa ff ff       	call   c0021f30 <IDE::prepareInterrupt(unsigned char)>
c00224b3:	59                   	pop    ecx
c00224b4:	5e                   	pop    esi
c00224b5:	6a 01                	push   0x1
c00224b7:	53                   	push   ebx
c00224b8:	e8 73 fa ff ff       	call   c0021f30 <IDE::prepareInterrupt(unsigned char)>
c00224bd:	83 c4 0c             	add    esp,0xc
c00224c0:	6a 00                	push   0x0
c00224c2:	6a 00                	push   0x0
c00224c4:	53                   	push   ebx
c00224c5:	e8 98 fc ff ff       	call   c0022162 <IDE::enableIRQs(unsigned char, bool)>
c00224ca:	83 c4 0c             	add    esp,0xc
c00224cd:	6a 00                	push   0x0
c00224cf:	6a 01                	push   0x1
c00224d1:	53                   	push   ebx
c00224d2:	e8 8b fc ff ff       	call   c0022162 <IDE::enableIRQs(unsigned char, bool)>
c00224d7:	83 c4 10             	add    esp,0x10
c00224da:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00224e1:	74 40                	je     c0022523 <IDE::open(int, int, void*)+0x37b>
c00224e3:	83 ec 0c             	sub    esp,0xc
c00224e6:	68 83 b0 02 c0       	push   0xc002b083
c00224eb:	e8 91 02 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00224f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00224f3:	6a 01                	push   0x1
c00224f5:	68 2a 21 02 c0       	push   0xc002212a
c00224fa:	6a 0e                	push   0xe
c00224fc:	53                   	push   ebx
c00224fd:	e8 f2 15 ff ff       	call   c0013af4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022502:	83 c4 14             	add    esp,0x14
c0022505:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002250b:	53                   	push   ebx
c002250c:	6a 01                	push   0x1
c002250e:	68 46 21 02 c0       	push   0xc0022146
c0022513:	6a 0f                	push   0xf
c0022515:	53                   	push   ebx
c0022516:	e8 d9 15 ff ff       	call   c0013af4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002251b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022521:	eb 4a                	jmp    c002256d <IDE::open(int, int, void*)+0x3c5>
c0022523:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002252d:	50                   	push   eax
c002252e:	6a 0f                	push   0xf
c0022530:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022536:	68 9f b0 02 c0       	push   0xc002b09f
c002253b:	e8 41 02 ff ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0022540:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022543:	6a 00                	push   0x0
c0022545:	68 2a 21 02 c0       	push   0xc002212a
c002254a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022550:	53                   	push   ebx
c0022551:	e8 9e 15 ff ff       	call   c0013af4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022556:	83 c4 14             	add    esp,0x14
c0022559:	53                   	push   ebx
c002255a:	6a 00                	push   0x0
c002255c:	68 46 21 02 c0       	push   0xc0022146
c0022561:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022567:	53                   	push   ebx
c0022568:	e8 87 15 ff ff       	call   c0013af4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002256d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002256f:	83 c4 20             	add    esp,0x20
c0022572:	83 ec 0c             	sub    esp,0xc
c0022575:	53                   	push   ebx
c0022576:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0022579:	83 c4 0c             	add    esp,0xc
c002257c:	6a 07                	push   0x7
c002257e:	6a 00                	push   0x0
c0022580:	53                   	push   ebx
c0022581:	e8 90 fa ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c0022586:	83 c4 0c             	add    esp,0xc
c0022589:	6a 07                	push   0x7
c002258b:	6a 01                	push   0x1
c002258d:	53                   	push   ebx
c002258e:	e8 83 fa ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c0022593:	83 c4 0c             	add    esp,0xc
c0022596:	6a 01                	push   0x1
c0022598:	6a 00                	push   0x0
c002259a:	53                   	push   ebx
c002259b:	e8 c2 fb ff ff       	call   c0022162 <IDE::enableIRQs(unsigned char, bool)>
c00225a0:	83 c4 0c             	add    esp,0xc
c00225a3:	6a 01                	push   0x1
c00225a5:	6a 01                	push   0x1
c00225a7:	53                   	push   ebx
c00225a8:	e8 b5 fb ff ff       	call   c0022162 <IDE::enableIRQs(unsigned char, bool)>
c00225ad:	83 c4 2c             	add    esp,0x2c
c00225b0:	31 c0                	xor    eax,eax
c00225b2:	5b                   	pop    ebx
c00225b3:	5e                   	pop    esi
c00225b4:	5f                   	pop    edi
c00225b5:	5d                   	pop    ebp
c00225b6:	c3                   	ret    
c00225b7:	90                   	nop

c00225b8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00225b8:	55                   	push   ebp
c00225b9:	57                   	push   edi
c00225ba:	56                   	push   esi
c00225bb:	53                   	push   ebx
c00225bc:	83 ec 1c             	sub    esp,0x1c
c00225bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00225c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00225c7:	8d 50 f8             	lea    edx,[eax-0x8]
c00225ca:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00225ce:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00225d2:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00225d6:	80 fa 03             	cmp    dl,0x3
c00225d9:	77 5d                	ja     c0022638 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00225db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00225df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225e3:	0f b6 db             	movzx  ebx,bl
c00225e6:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00225e9:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00225ed:	83 ca 80             	or     edx,0xffffff80
c00225f0:	0f b6 d2             	movzx  edx,dl
c00225f3:	52                   	push   edx
c00225f4:	6a 0c                	push   0xc
c00225f6:	53                   	push   ebx
c00225f7:	56                   	push   esi
c00225f8:	e8 59 f9 ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225fd:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022602:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022606:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002260a:	0f b6 c0             	movzx  eax,al
c002260d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022611:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022613:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022618:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002261c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022620:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022624:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002262c:	83 c4 2c             	add    esp,0x2c
c002262f:	5b                   	pop    ebx
c0022630:	5e                   	pop    esi
c0022631:	5f                   	pop    edi
c0022632:	5d                   	pop    ebp
c0022633:	e9 1e f9 ff ff       	jmp    c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022638:	3c 07                	cmp    al,0x7
c002263a:	77 10                	ja     c002264c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002263c:	0f b6 db             	movzx  ebx,bl
c002263f:	0f b6 d0             	movzx  edx,al
c0022642:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002264a:	eb 2d                	jmp    c0022679 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002264c:	3c 0d                	cmp    al,0xd
c002264e:	77 13                	ja     c0022663 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022650:	0f b6 db             	movzx  ebx,bl
c0022653:	0f b6 c0             	movzx  eax,al
c0022656:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002265d:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022661:	eb 16                	jmp    c0022679 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022663:	3c 15                	cmp    al,0x15
c0022665:	77 14                	ja     c002267b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022667:	0f b6 db             	movzx  ebx,bl
c002266a:	0f b6 c0             	movzx  eax,al
c002266d:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022675:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022679:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002267b:	83 c4 1c             	add    esp,0x1c
c002267e:	5b                   	pop    ebx
c002267f:	5e                   	pop    esi
c0022680:	5f                   	pop    edi
c0022681:	5d                   	pop    ebp
c0022682:	c3                   	ret    
c0022683:	90                   	nop

c0022684 <IDE::detect()>:
c0022684:	55                   	push   ebp
c0022685:	57                   	push   edi
c0022686:	56                   	push   esi
c0022687:	53                   	push   ebx
c0022688:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002268e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0022695:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002269c:	0f 85 be 02 00 00    	jne    c0022960 <IDE::detect()+0x2dc>
c00226a2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00226a9:	31 f6                	xor    esi,esi
c00226ab:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00226b3:	31 ed                	xor    ebp,ebp
c00226b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226b9:	c1 e0 06             	shl    eax,0x6
c00226bc:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00226c4:	89 e8                	mov    eax,ebp
c00226c6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00226ca:	c1 e0 04             	shl    eax,0x4
c00226cd:	83 c8 a0             	or     eax,0xffffffa0
c00226d0:	0f b6 c0             	movzx  eax,al
c00226d3:	50                   	push   eax
c00226d4:	6a 06                	push   0x6
c00226d6:	56                   	push   esi
c00226d7:	53                   	push   ebx
c00226d8:	e8 79 f8 ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00226dd:	83 c4 0c             	add    esp,0xc
c00226e0:	6a 0c                	push   0xc
c00226e2:	56                   	push   esi
c00226e3:	53                   	push   ebx
c00226e4:	e8 2d f9 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c00226e9:	83 c4 0c             	add    esp,0xc
c00226ec:	6a 0c                	push   0xc
c00226ee:	56                   	push   esi
c00226ef:	53                   	push   ebx
c00226f0:	e8 21 f9 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c00226f5:	83 c4 0c             	add    esp,0xc
c00226f8:	6a 0c                	push   0xc
c00226fa:	56                   	push   esi
c00226fb:	53                   	push   ebx
c00226fc:	e8 15 f9 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c0022701:	83 c4 0c             	add    esp,0xc
c0022704:	6a 0c                	push   0xc
c0022706:	56                   	push   esi
c0022707:	53                   	push   ebx
c0022708:	e8 09 f9 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c002270d:	68 ec 00 00 00       	push   0xec
c0022712:	6a 07                	push   0x7
c0022714:	56                   	push   esi
c0022715:	53                   	push   ebx
c0022716:	e8 3b f8 ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002271b:	83 c4 1c             	add    esp,0x1c
c002271e:	6a 0c                	push   0xc
c0022720:	56                   	push   esi
c0022721:	53                   	push   ebx
c0022722:	e8 ef f8 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c0022727:	83 c4 0c             	add    esp,0xc
c002272a:	6a 0c                	push   0xc
c002272c:	56                   	push   esi
c002272d:	53                   	push   ebx
c002272e:	e8 e3 f8 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c0022733:	83 c4 0c             	add    esp,0xc
c0022736:	6a 0c                	push   0xc
c0022738:	56                   	push   esi
c0022739:	53                   	push   ebx
c002273a:	e8 d7 f8 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c002273f:	83 c4 0c             	add    esp,0xc
c0022742:	6a 0c                	push   0xc
c0022744:	56                   	push   esi
c0022745:	53                   	push   ebx
c0022746:	e8 cb f8 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c002274b:	83 c4 0c             	add    esp,0xc
c002274e:	6a 0c                	push   0xc
c0022750:	56                   	push   esi
c0022751:	53                   	push   ebx
c0022752:	e8 bf f8 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c0022757:	83 c4 10             	add    esp,0x10
c002275a:	84 c0                	test   al,al
c002275c:	0f 84 8b 01 00 00    	je     c00228ed <IDE::detect()+0x269>
c0022762:	31 ff                	xor    edi,edi
c0022764:	50                   	push   eax
c0022765:	6a 0c                	push   0xc
c0022767:	56                   	push   esi
c0022768:	53                   	push   ebx
c0022769:	e8 a8 f8 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c002276e:	83 c4 10             	add    esp,0x10
c0022771:	a8 01                	test   al,0x1
c0022773:	0f 85 8e 01 00 00    	jne    c0022907 <IDE::detect()+0x283>
c0022779:	84 c0                	test   al,al
c002277b:	78 04                	js     c0022781 <IDE::detect()+0xfd>
c002277d:	a8 08                	test   al,0x8
c002277f:	75 27                	jne    c00227a8 <IDE::detect()+0x124>
c0022781:	47                   	inc    edi
c0022782:	81 ff 17 01 00 00    	cmp    edi,0x117
c0022788:	7e da                	jle    c0022764 <IDE::detect()+0xe0>
c002278a:	50                   	push   eax
c002278b:	50                   	push   eax
c002278c:	6a 00                	push   0x0
c002278e:	68 40 4b 4c 00       	push   0x4c4b40
c0022793:	e8 e2 aa ff ff       	call   c001d27a <nanoSleep(unsigned long long)>
c0022798:	83 c4 10             	add    esp,0x10
c002279b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00227a1:	75 c1                	jne    c0022764 <IDE::detect()+0xe0>
c00227a3:	e9 5f 01 00 00       	jmp    c0022907 <IDE::detect()+0x283>
c00227a8:	31 c9                	xor    ecx,ecx
c00227aa:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00227ae:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00227b2:	83 ec 0c             	sub    esp,0xc
c00227b5:	68 80 00 00 00       	push   0x80
c00227ba:	57                   	push   edi
c00227bb:	6a 00                	push   0x0
c00227bd:	56                   	push   esi
c00227be:	53                   	push   ebx
c00227bf:	e8 f4 fd ff ff       	call   c00225b8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00227c4:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00227c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00227cd:	89 d1                	mov    ecx,edx
c00227cf:	c1 e0 06             	shl    eax,0x6
c00227d2:	01 d8                	add    eax,ebx
c00227d4:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00227db:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00227e2:	89 f2                	mov    edx,esi
c00227e4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00227ea:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00227ee:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00227f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00227f8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00227ff:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0022807:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002280e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0022816:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002281c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022823:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0022829:	8d 54 24 58          	lea    edx,[esp+0x58]
c002282d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022831:	83 c4 20             	add    esp,0x20
c0022834:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0022837:	83 c0 02             	add    eax,0x2
c002283a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022840:	83 c7 02             	add    edi,0x2
c0022843:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0022846:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002284c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022850:	75 e2                	jne    c0022834 <IDE::detect()+0x1b0>
c0022852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022856:	c1 e0 06             	shl    eax,0x6
c0022859:	01 d8                	add    eax,ebx
c002285b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0022861:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022868:	66 c1 ea 09          	shr    dx,0x9
c002286c:	83 e2 01             	and    edx,0x1
c002286f:	84 c9                	test   cl,cl
c0022871:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0022877:	75 2f                	jne    c00228a8 <IDE::detect()+0x224>
c0022879:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002287f:	85 c0                	test   eax,eax
c0022881:	74 66                	je     c00228e9 <IDE::detect()+0x265>
c0022883:	50                   	push   eax
c0022884:	55                   	push   ebp
c0022885:	56                   	push   esi
c0022886:	68 bb b0 02 c0       	push   0xc002b0bb
c002288b:	e8 f1 fe fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0022890:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0022897:	e8 38 cc fe ff       	call   c000f4d4 <malloc>
c002289c:	89 c7                	mov    edi,eax
c002289e:	89 04 24             	mov    DWORD PTR [esp],eax
c00228a1:	e8 62 06 00 00       	call   c0022f08 <ATA::ATA()>
c00228a6:	eb 28                	jmp    c00228d0 <IDE::detect()+0x24c>
c00228a8:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00228ae:	55                   	push   ebp
c00228af:	56                   	push   esi
c00228b0:	68 ea b0 02 c0       	push   0xc002b0ea
c00228b5:	e8 c7 fe fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00228ba:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00228c1:	e8 0e cc fe ff       	call   c000f4d4 <malloc>
c00228c6:	89 c7                	mov    edi,eax
c00228c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00228cb:	e8 68 0c 00 00       	call   c0023538 <ATAPI::ATAPI()>
c00228d0:	5a                   	pop    edx
c00228d1:	59                   	pop    ecx
c00228d2:	57                   	push   edi
c00228d3:	53                   	push   ebx
c00228d4:	e8 97 12 ff ff       	call   c0013b70 <Device::addChild(Device*)>
c00228d9:	8b 07                	mov    eax,DWORD PTR [edi]
c00228db:	53                   	push   ebx
c00228dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00228e0:	6a 00                	push   0x0
c00228e2:	57                   	push   edi
c00228e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00228e6:	83 c4 20             	add    esp,0x20
c00228e9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00228ed:	4d                   	dec    ebp
c00228ee:	74 0a                	je     c00228fa <IDE::detect()+0x276>
c00228f0:	bd 01 00 00 00       	mov    ebp,0x1
c00228f5:	e9 bb fd ff ff       	jmp    c00226b5 <IDE::detect()+0x31>
c00228fa:	4e                   	dec    esi
c00228fb:	74 63                	je     c0022960 <IDE::detect()+0x2dc>
c00228fd:	be 01 00 00 00       	mov    esi,0x1
c0022902:	e9 ac fd ff ff       	jmp    c00226b3 <IDE::detect()+0x2f>
c0022907:	50                   	push   eax
c0022908:	6a 04                	push   0x4
c002290a:	56                   	push   esi
c002290b:	53                   	push   ebx
c002290c:	e8 05 f7 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c0022911:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022915:	83 c4 0c             	add    esp,0xc
c0022918:	6a 05                	push   0x5
c002291a:	56                   	push   esi
c002291b:	53                   	push   ebx
c002291c:	e8 f5 f6 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c0022921:	83 c4 10             	add    esp,0x10
c0022924:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0022928:	80 fa 14             	cmp    dl,0x14
c002292b:	75 04                	jne    c0022931 <IDE::detect()+0x2ad>
c002292d:	3c eb                	cmp    al,0xeb
c002292f:	eb 07                	jmp    c0022938 <IDE::detect()+0x2b4>
c0022931:	3c 96                	cmp    al,0x96
c0022933:	75 b8                	jne    c00228ed <IDE::detect()+0x269>
c0022935:	80 fa 69             	cmp    dl,0x69
c0022938:	75 b3                	jne    c00228ed <IDE::detect()+0x269>
c002293a:	68 a1 00 00 00       	push   0xa1
c002293f:	6a 07                	push   0x7
c0022941:	56                   	push   esi
c0022942:	53                   	push   ebx
c0022943:	e8 0e f6 ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022948:	5f                   	pop    edi
c0022949:	58                   	pop    eax
c002294a:	6a 00                	push   0x0
c002294c:	68 40 42 0f 00       	push   0xf4240
c0022951:	e8 24 a9 ff ff       	call   c001d27a <nanoSleep(unsigned long long)>
c0022956:	83 c4 10             	add    esp,0x10
c0022959:	b1 01                	mov    cl,0x1
c002295b:	e9 4a fe ff ff       	jmp    c00227aa <IDE::detect()+0x126>
c0022960:	81 c4 1c 02 00 00    	add    esp,0x21c
c0022966:	5b                   	pop    ebx
c0022967:	5e                   	pop    esi
c0022968:	5f                   	pop    edi
c0022969:	5d                   	pop    ebp
c002296a:	c3                   	ret    
c002296b:	90                   	nop

c002296c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002296c:	55                   	push   ebp
c002296d:	57                   	push   edi
c002296e:	56                   	push   esi
c002296f:	53                   	push   ebx
c0022970:	83 ec 1c             	sub    esp,0x1c
c0022973:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022977:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002297b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002297f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022983:	88 c3                	mov    bl,al
c0022985:	84 c0                	test   al,al
c0022987:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002298b:	0f 84 67 01 00 00    	je     c0022af8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0022991:	83 ec 0c             	sub    esp,0xc
c0022994:	68 1b b1 02 c0       	push   0xc002b11b
c0022999:	e8 e3 fd fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c002299e:	83 c4 10             	add    esp,0x10
c00229a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00229a5:	3c 01                	cmp    al,0x1
c00229a7:	75 17                	jne    c00229c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00229a9:	83 ec 0c             	sub    esp,0xc
c00229ac:	b3 13                	mov    bl,0x13
c00229ae:	68 27 b1 02 c0       	push   0xc002b127
c00229b3:	e8 c9 fd fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00229b8:	83 c4 10             	add    esp,0x10
c00229bb:	e9 25 01 00 00       	jmp    c0022ae5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00229c0:	3c 02                	cmp    al,0x2
c00229c2:	0f 85 ef 00 00 00    	jne    c0022ab7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00229c8:	d1 e6                	shl    esi,1
c00229ca:	09 ee                	or     esi,ebp
c00229cc:	52                   	push   edx
c00229cd:	89 f0                	mov    eax,esi
c00229cf:	6a 01                	push   0x1
c00229d1:	0f b6 f0             	movzx  esi,al
c00229d4:	c1 e6 06             	shl    esi,0x6
c00229d7:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00229df:	50                   	push   eax
c00229e0:	57                   	push   edi
c00229e1:	e8 30 f6 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c00229e6:	83 c4 10             	add    esp,0x10
c00229e9:	89 c6                	mov    esi,eax
c00229eb:	a8 01                	test   al,0x1
c00229ed:	74 12                	je     c0022a01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00229ef:	83 ec 0c             	sub    esp,0xc
c00229f2:	b3 07                	mov    bl,0x7
c00229f4:	68 3c b1 02 c0       	push   0xc002b13c
c00229f9:	e8 83 fd fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00229fe:	83 c4 10             	add    esp,0x10
c0022a01:	f7 c6 02 00 00 00    	test   esi,0x2
c0022a07:	74 12                	je     c0022a1b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0022a09:	83 ec 0c             	sub    esp,0xc
c0022a0c:	b3 03                	mov    bl,0x3
c0022a0e:	68 5a b1 02 c0       	push   0xc002b15a
c0022a13:	e8 69 fd fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0022a18:	83 c4 10             	add    esp,0x10
c0022a1b:	f7 c6 04 00 00 00    	test   esi,0x4
c0022a21:	74 12                	je     c0022a35 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022a23:	83 ec 0c             	sub    esp,0xc
c0022a26:	b3 14                	mov    bl,0x14
c0022a28:	68 7a b1 02 c0       	push   0xc002b17a
c0022a2d:	e8 4f fd fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0022a32:	83 c4 10             	add    esp,0x10
c0022a35:	f7 c6 08 00 00 00    	test   esi,0x8
c0022a3b:	74 12                	je     c0022a4f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022a3d:	83 ec 0c             	sub    esp,0xc
c0022a40:	b3 03                	mov    bl,0x3
c0022a42:	68 5a b1 02 c0       	push   0xc002b15a
c0022a47:	e8 35 fd fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0022a4c:	83 c4 10             	add    esp,0x10
c0022a4f:	f7 c6 10 00 00 00    	test   esi,0x10
c0022a55:	74 12                	je     c0022a69 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0022a57:	83 ec 0c             	sub    esp,0xc
c0022a5a:	b3 15                	mov    bl,0x15
c0022a5c:	68 92 b1 02 c0       	push   0xc002b192
c0022a61:	e8 1b fd fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0022a66:	83 c4 10             	add    esp,0x10
c0022a69:	f7 c6 20 00 00 00    	test   esi,0x20
c0022a6f:	74 12                	je     c0022a83 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022a71:	83 ec 0c             	sub    esp,0xc
c0022a74:	b3 03                	mov    bl,0x3
c0022a76:	68 5a b1 02 c0       	push   0xc002b15a
c0022a7b:	e8 01 fd fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0022a80:	83 c4 10             	add    esp,0x10
c0022a83:	f7 c6 40 00 00 00    	test   esi,0x40
c0022a89:	74 12                	je     c0022a9d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0022a8b:	83 ec 0c             	sub    esp,0xc
c0022a8e:	b3 16                	mov    bl,0x16
c0022a90:	68 ac b1 02 c0       	push   0xc002b1ac
c0022a95:	e8 e7 fc fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0022a9a:	83 c4 10             	add    esp,0x10
c0022a9d:	89 f0                	mov    eax,esi
c0022a9f:	84 c0                	test   al,al
c0022aa1:	79 42                	jns    c0022ae5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022aa3:	83 ec 0c             	sub    esp,0xc
c0022aa6:	b3 0d                	mov    bl,0xd
c0022aa8:	68 cd b1 02 c0       	push   0xc002b1cd
c0022aad:	e8 cf fc fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0022ab2:	83 c4 10             	add    esp,0x10
c0022ab5:	eb 2e                	jmp    c0022ae5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022ab7:	3c 03                	cmp    al,0x3
c0022ab9:	75 14                	jne    c0022acf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0022abb:	83 ec 0c             	sub    esp,0xc
c0022abe:	b3 17                	mov    bl,0x17
c0022ac0:	68 e1 b1 02 c0       	push   0xc002b1e1
c0022ac5:	e8 b7 fc fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0022aca:	83 c4 10             	add    esp,0x10
c0022acd:	eb 16                	jmp    c0022ae5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022acf:	3c 04                	cmp    al,0x4
c0022ad1:	75 12                	jne    c0022ae5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022ad3:	83 ec 0c             	sub    esp,0xc
c0022ad6:	b3 08                	mov    bl,0x8
c0022ad8:	68 f7 b1 02 c0       	push   0xc002b1f7
c0022add:	e8 9f fc fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0022ae2:	83 c4 10             	add    esp,0x10
c0022ae5:	50                   	push   eax
c0022ae6:	50                   	push   eax
c0022ae7:	0f b6 c3             	movzx  eax,bl
c0022aea:	50                   	push   eax
c0022aeb:	68 0f b2 02 c0       	push   0xc002b20f
c0022af0:	e8 8c fc fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0022af5:	83 c4 10             	add    esp,0x10
c0022af8:	83 c4 1c             	add    esp,0x1c
c0022afb:	88 d8                	mov    al,bl
c0022afd:	5b                   	pop    ebx
c0022afe:	5e                   	pop    esi
c0022aff:	5f                   	pop    edi
c0022b00:	5d                   	pop    ebp
c0022b01:	c3                   	ret    

c0022b02 <IDE::polling(unsigned char, unsigned int)>:
c0022b02:	57                   	push   edi
c0022b03:	56                   	push   esi
c0022b04:	53                   	push   ebx
c0022b05:	bb 04 00 00 00       	mov    ebx,0x4
c0022b0a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022b0e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b13:	52                   	push   edx
c0022b14:	6a 0c                	push   0xc
c0022b16:	56                   	push   esi
c0022b17:	57                   	push   edi
c0022b18:	e8 f9 f4 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c0022b1d:	83 c4 10             	add    esp,0x10
c0022b20:	4b                   	dec    ebx
c0022b21:	75 f0                	jne    c0022b13 <IDE::polling(unsigned char, unsigned int)+0x11>
c0022b23:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022b28:	50                   	push   eax
c0022b29:	6a 0c                	push   0xc
c0022b2b:	56                   	push   esi
c0022b2c:	57                   	push   edi
c0022b2d:	e8 e4 f4 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c0022b32:	83 c4 10             	add    esp,0x10
c0022b35:	a8 01                	test   al,0x1
c0022b37:	74 12                	je     c0022b4b <IDE::polling(unsigned char, unsigned int)+0x49>
c0022b39:	83 ec 0c             	sub    esp,0xc
c0022b3c:	68 29 b2 02 c0       	push   0xc002b229
c0022b41:	e8 3b fc fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0022b46:	83 c4 10             	add    esp,0x10
c0022b49:	eb 17                	jmp    c0022b62 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022b4b:	a8 20                	test   al,0x20
c0022b4d:	75 0f                	jne    c0022b5e <IDE::polling(unsigned char, unsigned int)+0x5c>
c0022b4f:	4b                   	dec    ebx
c0022b50:	74 10                	je     c0022b62 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022b52:	84 c0                	test   al,al
c0022b54:	78 d2                	js     c0022b28 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022b56:	a8 08                	test   al,0x8
c0022b58:	74 ce                	je     c0022b28 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022b5a:	31 c0                	xor    eax,eax
c0022b5c:	eb 06                	jmp    c0022b64 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022b5e:	b0 01                	mov    al,0x1
c0022b60:	eb 02                	jmp    c0022b64 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022b62:	b0 02                	mov    al,0x2
c0022b64:	5b                   	pop    ebx
c0022b65:	5e                   	pop    esi
c0022b66:	5f                   	pop    edi
c0022b67:	c3                   	ret    

c0022b68 <SATABus::close(int, int, void*)>:
c0022b68:	31 c0                	xor    eax,eax
c0022b6a:	c3                   	ret    
c0022b6b:	90                   	nop

c0022b6c <SATABus::detect()>:
c0022b6c:	c3                   	ret    
c0022b6d:	90                   	nop

c0022b6e <SATABus::SATABus()>:
c0022b6e:	83 ec 0c             	sub    esp,0xc
c0022b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b75:	83 ec 08             	sub    esp,0x8
c0022b78:	68 6c b2 02 c0       	push   0xc002b26c
c0022b7d:	50                   	push   eax
c0022b7e:	e8 79 13 ff ff       	call   c0013efc <HardDiskController::HardDiskController(char const*)>
c0022b83:	83 c4 10             	add    esp,0x10
c0022b86:	ba 28 b3 02 c0       	mov    edx,0xc002b328
c0022b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b8f:	89 10                	mov    DWORD PTR [eax],edx
c0022b91:	83 ec 0c             	sub    esp,0xc
c0022b94:	6a 50                	push   0x50
c0022b96:	e8 ab cf fe ff       	call   c000fb46 <Phys::allocateContiguousPages(int)>
c0022b9b:	83 c4 10             	add    esp,0x10
c0022b9e:	89 c2                	mov    edx,eax
c0022ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ba4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022baa:	83 ec 0c             	sub    esp,0xc
c0022bad:	6a 50                	push   0x50
c0022baf:	e8 dd eb fe ff       	call   c0011791 <Virt::allocateKernelVirtualPages(int)>
c0022bb4:	83 c4 10             	add    esp,0x10
c0022bb7:	89 c2                	mov    edx,eax
c0022bb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bbd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022bc3:	e8 59 ed fe ff       	call   c0011921 <Virt::getAKernelVAS()>
c0022bc8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022bcc:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022bd2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022bd6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022bdc:	83 ec 0c             	sub    esp,0xc
c0022bdf:	6a 03                	push   0x3
c0022be1:	6a 50                	push   0x50
c0022be3:	51                   	push   ecx
c0022be4:	52                   	push   edx
c0022be5:	50                   	push   eax
c0022be6:	e8 65 f5 fe ff       	call   c0012150 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0022beb:	83 c4 20             	add    esp,0x20
c0022bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bf2:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0022bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bfc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022c02:	83 ec 04             	sub    esp,0x4
c0022c05:	52                   	push   edx
c0022c06:	50                   	push   eax
c0022c07:	68 90 b2 02 c0       	push   0xc002b290
c0022c0c:	e8 70 fb fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0022c11:	83 c4 10             	add    esp,0x10
c0022c14:	90                   	nop
c0022c15:	83 c4 0c             	add    esp,0xc
c0022c18:	c3                   	ret    
c0022c19:	90                   	nop

c0022c1a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0022c1a:	83 ec 0c             	sub    esp,0xc
c0022c1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c21:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0022c24:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0022c27:	09 c2                	or     edx,eax
c0022c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022c33:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022c35:	31 c0                	xor    eax,eax
c0022c37:	c1 e9 08             	shr    ecx,0x8
c0022c3a:	83 e1 0f             	and    ecx,0xf
c0022c3d:	39 c8                	cmp    eax,ecx
c0022c3f:	74 0a                	je     c0022c4b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0022c41:	f6 c2 01             	test   dl,0x1
c0022c44:	74 18                	je     c0022c5e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0022c46:	d1 ea                	shr    edx,1
c0022c48:	40                   	inc    eax
c0022c49:	eb f2                	jmp    c0022c3d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0022c4b:	83 ec 0c             	sub    esp,0xc
c0022c4e:	68 b4 b2 02 c0       	push   0xc002b2b4
c0022c53:	e8 43 6c ff ff       	call   c001989b <Krnl::panic(char const*)>
c0022c58:	83 c4 10             	add    esp,0x10
c0022c5b:	83 c8 ff             	or     eax,0xffffffff
c0022c5e:	83 c4 0c             	add    esp,0xc
c0022c61:	c3                   	ret    

c0022c62 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0022c62:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022c66:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0022c69:	89 c2                	mov    edx,eax
c0022c6b:	c1 ea 08             	shr    edx,0x8
c0022c6e:	83 e2 0f             	and    edx,0xf
c0022c71:	fe ca                	dec    dl
c0022c73:	75 31                	jne    c0022ca6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022c75:	83 e0 0f             	and    eax,0xf
c0022c78:	3c 03                	cmp    al,0x3
c0022c7a:	75 2a                	jne    c0022ca6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022c7c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0022c7f:	b8 02 00 00 00       	mov    eax,0x2
c0022c84:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0022c8a:	74 1c                	je     c0022ca8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022c8c:	b8 04 00 00 00       	mov    eax,0x4
c0022c91:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0022c97:	74 0f                	je     c0022ca8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022c99:	31 c0                	xor    eax,eax
c0022c9b:	83 fa 03             	cmp    edx,0x3
c0022c9e:	0f 94 c0             	sete   al
c0022ca1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0022ca5:	c3                   	ret    
c0022ca6:	31 c0                	xor    eax,eax
c0022ca8:	c3                   	ret    
c0022ca9:	90                   	nop

c0022caa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022caa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022cae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cb1:	0f ba e2 0f          	bt     edx,0xf
c0022cb5:	72 f7                	jb     c0022cae <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0022cb7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cba:	83 ca 10             	or     edx,0x10
c0022cbd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022cc0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cc3:	83 ca 01             	or     edx,0x1
c0022cc6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022cc9:	c3                   	ret    

c0022cca <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022cca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022cce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cd1:	83 e2 fe             	and    edx,0xfffffffe
c0022cd4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022cd7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cda:	83 e2 ef             	and    edx,0xffffffef
c0022cdd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022ce0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022ce3:	0f ba e2 0e          	bt     edx,0xe
c0022ce7:	72 f7                	jb     c0022ce0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022ce9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cec:	0f ba e2 0f          	bt     edx,0xf
c0022cf0:	72 ee                	jb     c0022ce0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022cf2:	c3                   	ret    
c0022cf3:	90                   	nop

c0022cf4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0022cf4:	55                   	push   ebp
c0022cf5:	57                   	push   edi
c0022cf6:	56                   	push   esi
c0022cf7:	53                   	push   ebx
c0022cf8:	83 ec 1c             	sub    esp,0x1c
c0022cfb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022cff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022d03:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022d07:	53                   	push   ebx
c0022d08:	89 fd                	mov    ebp,edi
c0022d0a:	56                   	push   esi
c0022d0b:	c1 e5 0a             	shl    ebp,0xa
c0022d0e:	e8 b7 ff ff ff       	call   c0022cca <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0022d13:	83 ec 0c             	sub    esp,0xc
c0022d16:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0022d1c:	01 e8                	add    eax,ebp
c0022d1e:	89 03                	mov    DWORD PTR [ebx],eax
c0022d20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d22:	68 00 04 00 00       	push   0x400
c0022d27:	6a 00                	push   0x0
c0022d29:	50                   	push   eax
c0022d2a:	e8 5c d9 fd ff       	call   c000068b <memset>
c0022d2f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0022d35:	89 fa                	mov    edx,edi
c0022d37:	01 e8                	add    eax,ebp
c0022d39:	c1 e7 0d             	shl    edi,0xd
c0022d3c:	89 03                	mov    DWORD PTR [ebx],eax
c0022d3e:	c1 e2 08             	shl    edx,0x8
c0022d41:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022d48:	81 c2 00 80 00 00    	add    edx,0x8000
c0022d4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0022d52:	89 d0                	mov    eax,edx
c0022d54:	83 c4 1c             	add    esp,0x1c
c0022d57:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022d5d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022d60:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0022d63:	68 00 01 00 00       	push   0x100
c0022d68:	6a 00                	push   0x0
c0022d6a:	50                   	push   eax
c0022d6b:	e8 1b d9 fd ff       	call   c000068b <memset>
c0022d70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022d74:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0022d7a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0022d80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022d84:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0022d87:	83 c4 10             	add    esp,0x10
c0022d8a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022d91:	31 ff                	xor    edi,edi
c0022d93:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0022d99:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0022d9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022da3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022da9:	83 c5 20             	add    ebp,0x20
c0022dac:	01 f8                	add    eax,edi
c0022dae:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022db1:	52                   	push   edx
c0022db2:	68 00 01 00 00       	push   0x100
c0022db7:	6a 00                	push   0x0
c0022db9:	50                   	push   eax
c0022dba:	e8 cc d8 fd ff       	call   c000068b <memset>
c0022dbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022dc3:	83 c4 10             	add    esp,0x10
c0022dc6:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0022dcc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0022dd3:	01 f8                	add    eax,edi
c0022dd5:	81 c7 00 01 00 00    	add    edi,0x100
c0022ddb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022dde:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0022de4:	75 b3                	jne    c0022d99 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0022de6:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0022dea:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0022dee:	83 c4 1c             	add    esp,0x1c
c0022df1:	5b                   	pop    ebx
c0022df2:	5e                   	pop    esi
c0022df3:	5f                   	pop    edi
c0022df4:	5d                   	pop    ebp
c0022df5:	e9 b0 fe ff ff       	jmp    c0022caa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0022dfa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0022dfa:	55                   	push   ebp
c0022dfb:	57                   	push   edi
c0022dfc:	56                   	push   esi
c0022dfd:	53                   	push   ebx
c0022dfe:	31 db                	xor    ebx,ebx
c0022e00:	83 ec 0c             	sub    esp,0xc
c0022e03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022e07:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022e0b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0022e0e:	f7 c7 01 00 00 00    	test   edi,0x1
c0022e14:	0f 84 94 00 00 00    	je     c0022eae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022e1a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022e1e:	89 d8                	mov    eax,ebx
c0022e20:	c1 e0 07             	shl    eax,0x7
c0022e23:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0022e2a:	55                   	push   ebp
c0022e2b:	56                   	push   esi
c0022e2c:	e8 31 fe ff ff       	call   c0022c62 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0022e31:	59                   	pop    ecx
c0022e32:	83 f8 01             	cmp    eax,0x1
c0022e35:	5a                   	pop    edx
c0022e36:	75 47                	jne    c0022e7f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c0022e38:	51                   	push   ecx
c0022e39:	51                   	push   ecx
c0022e3a:	53                   	push   ebx
c0022e3b:	68 d9 b2 02 c0       	push   0xc002b2d9
c0022e40:	e8 3c f9 fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0022e45:	83 c4 0c             	add    esp,0xc
c0022e48:	53                   	push   ebx
c0022e49:	55                   	push   ebp
c0022e4a:	56                   	push   esi
c0022e4b:	e8 a4 fe ff ff       	call   c0022cf4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022e50:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0022e57:	e8 78 c6 fe ff       	call   c000f4d4 <malloc>
c0022e5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0022e5f:	89 c5                	mov    ebp,eax
c0022e61:	e8 de 0c 00 00       	call   c0023b44 <SATA::SATA()>
c0022e66:	58                   	pop    eax
c0022e67:	5a                   	pop    edx
c0022e68:	55                   	push   ebp
c0022e69:	56                   	push   esi
c0022e6a:	e8 01 0d ff ff       	call   c0013b70 <Device::addChild(Device*)>
c0022e6f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022e72:	56                   	push   esi
c0022e73:	6a 00                	push   0x0
c0022e75:	53                   	push   ebx
c0022e76:	55                   	push   ebp
c0022e77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022e7a:	83 c4 20             	add    esp,0x20
c0022e7d:	eb 2f                	jmp    c0022eae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022e7f:	83 f8 04             	cmp    eax,0x4
c0022e82:	75 1a                	jne    c0022e9e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c0022e84:	52                   	push   edx
c0022e85:	52                   	push   edx
c0022e86:	53                   	push   ebx
c0022e87:	68 f0 b2 02 c0       	push   0xc002b2f0
c0022e8c:	e8 f0 f8 fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0022e91:	83 c4 0c             	add    esp,0xc
c0022e94:	53                   	push   ebx
c0022e95:	55                   	push   ebp
c0022e96:	56                   	push   esi
c0022e97:	e8 58 fe ff ff       	call   c0022cf4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022e9c:	eb 0d                	jmp    c0022eab <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c0022e9e:	50                   	push   eax
c0022e9f:	50                   	push   eax
c0022ea0:	53                   	push   ebx
c0022ea1:	68 09 b3 02 c0       	push   0xc002b309
c0022ea6:	e8 d6 f8 fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0022eab:	83 c4 10             	add    esp,0x10
c0022eae:	d1 ef                	shr    edi,1
c0022eb0:	43                   	inc    ebx
c0022eb1:	83 fb 20             	cmp    ebx,0x20
c0022eb4:	0f 85 54 ff ff ff    	jne    c0022e0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0022eba:	83 c4 0c             	add    esp,0xc
c0022ebd:	5b                   	pop    ebx
c0022ebe:	5e                   	pop    esi
c0022ebf:	5f                   	pop    edi
c0022ec0:	5d                   	pop    ebp
c0022ec1:	c3                   	ret    

c0022ec2 <SATABus::open(int, int, void*)>:
c0022ec2:	83 ec 14             	sub    esp,0x14
c0022ec5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022ec9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0022ecf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022ed5:	52                   	push   edx
c0022ed6:	50                   	push   eax
c0022ed7:	e8 1e ff ff ff       	call   c0022dfa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0022edc:	31 c0                	xor    eax,eax
c0022ede:	83 c4 1c             	add    esp,0x1c
c0022ee1:	c3                   	ret    

c0022ee2 <ATA::close(int, int, void*)>:
c0022ee2:	83 ec 0c             	sub    esp,0xc
c0022ee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ee9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022eef:	85 c0                	test   eax,eax
c0022ef1:	74 0c                	je     c0022eff <ATA::close(int, int, void*)+0x1d>
c0022ef3:	83 ec 0c             	sub    esp,0xc
c0022ef6:	8b 10                	mov    edx,DWORD PTR [eax]
c0022ef8:	50                   	push   eax
c0022ef9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022efc:	83 c4 10             	add    esp,0x10
c0022eff:	31 c0                	xor    eax,eax
c0022f01:	83 c4 0c             	add    esp,0xc
c0022f04:	c3                   	ret    
c0022f05:	90                   	nop

c0022f06 <ATA::powerSaving(PowerSavingLevel)>:
c0022f06:	c3                   	ret    
c0022f07:	90                   	nop

c0022f08 <ATA::ATA()>:
c0022f08:	83 ec 0c             	sub    esp,0xc
c0022f0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f0f:	83 ec 04             	sub    esp,0x4
c0022f12:	68 00 02 00 00       	push   0x200
c0022f17:	68 1c b4 02 c0       	push   0xc002b41c
c0022f1c:	50                   	push   eax
c0022f1d:	e8 5e 10 ff ff       	call   c0013f80 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022f22:	83 c4 10             	add    esp,0x10
c0022f25:	ba 68 b3 02 c0       	mov    edx,0xc002b368
c0022f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f2e:	89 10                	mov    DWORD PTR [eax],edx
c0022f30:	90                   	nop
c0022f31:	83 c4 0c             	add    esp,0xc
c0022f34:	c3                   	ret    
c0022f35:	90                   	nop

c0022f36 <ATA::flush(bool)>:
c0022f36:	53                   	push   ebx
c0022f37:	83 ec 08             	sub    esp,0x8
c0022f3a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0022f3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022f43:	19 c0                	sbb    eax,eax
c0022f45:	83 e0 fd             	and    eax,0xfffffffd
c0022f48:	05 ea 00 00 00       	add    eax,0xea
c0022f4d:	50                   	push   eax
c0022f4e:	6a 07                	push   0x7
c0022f50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022f57:	50                   	push   eax
c0022f58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022f5e:	e8 f3 ef ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f63:	83 c4 0c             	add    esp,0xc
c0022f66:	6a 00                	push   0x0
c0022f68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022f6f:	50                   	push   eax
c0022f70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022f76:	e8 87 fb ff ff       	call   c0022b02 <IDE::polling(unsigned char, unsigned int)>
c0022f7b:	83 c4 18             	add    esp,0x18
c0022f7e:	5b                   	pop    ebx
c0022f7f:	c3                   	ret    

c0022f80 <ATA::readyForCommand()>:
c0022f80:	56                   	push   esi
c0022f81:	53                   	push   ebx
c0022f82:	31 db                	xor    ebx,ebx
c0022f84:	50                   	push   eax
c0022f85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f89:	50                   	push   eax
c0022f8a:	6a 0c                	push   0xc
c0022f8c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022f93:	50                   	push   eax
c0022f94:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022f9a:	e8 77 f0 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c0022f9f:	83 c4 10             	add    esp,0x10
c0022fa2:	a8 88                	test   al,0x88
c0022fa4:	74 23                	je     c0022fc9 <ATA::readyForCommand()+0x49>
c0022fa6:	43                   	inc    ebx
c0022fa7:	83 fb 63             	cmp    ebx,0x63
c0022faa:	7e dd                	jle    c0022f89 <ATA::readyForCommand()+0x9>
c0022fac:	51                   	push   ecx
c0022fad:	51                   	push   ecx
c0022fae:	6a 00                	push   0x0
c0022fb0:	68 40 42 0f 00       	push   0xf4240
c0022fb5:	e8 c0 a2 ff ff       	call   c001d27a <nanoSleep(unsigned long long)>
c0022fba:	83 c4 10             	add    esp,0x10
c0022fbd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0022fc3:	75 c4                	jne    c0022f89 <ATA::readyForCommand()+0x9>
c0022fc5:	31 c0                	xor    eax,eax
c0022fc7:	eb 02                	jmp    c0022fcb <ATA::readyForCommand()+0x4b>
c0022fc9:	b0 01                	mov    al,0x1
c0022fcb:	5a                   	pop    edx
c0022fcc:	5b                   	pop    ebx
c0022fcd:	5e                   	pop    esi
c0022fce:	c3                   	ret    
c0022fcf:	90                   	nop

c0022fd0 <ATA::access(unsigned long long, int, void*, bool)>:
c0022fd0:	55                   	push   ebp
c0022fd1:	57                   	push   edi
c0022fd2:	56                   	push   esi
c0022fd3:	53                   	push   ebx
c0022fd4:	83 ec 2c             	sub    esp,0x2c
c0022fd7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022fdb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022fdf:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022fe3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022fe7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0022feb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022fef:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022ff3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0022ff9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022ffd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023003:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023007:	c1 e0 06             	shl    eax,0x6
c002300a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023012:	74 5d                	je     c0023071 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023014:	89 fa                	mov    edx,edi
c0023016:	89 f0                	mov    eax,esi
c0023018:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002301c:	c1 ea 1c             	shr    edx,0x1c
c002301f:	89 d1                	mov    ecx,edx
c0023021:	09 c1                	or     ecx,eax
c0023023:	74 25                	je     c002304a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023025:	31 ed                	xor    ebp,ebp
c0023027:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002302e:	89 fa                	mov    edx,edi
c0023030:	89 f0                	mov    eax,esi
c0023032:	0f ad d0             	shrd   eax,edx,cl
c0023035:	d3 ea                	shr    edx,cl
c0023037:	f6 c1 20             	test   cl,0x20
c002303a:	74 02                	je     c002303e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002303c:	89 d0                	mov    eax,edx
c002303e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023042:	45                   	inc    ebp
c0023043:	83 fd 06             	cmp    ebp,0x6
c0023046:	75 df                	jne    c0023027 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023048:	eb 76                	jmp    c00230c0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002304a:	89 f0                	mov    eax,esi
c002304c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023051:	89 fa                	mov    edx,edi
c0023053:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002305a:	0f ac d0 10          	shrd   eax,edx,0x10
c002305e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023063:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023067:	c1 ee 18             	shr    esi,0x18
c002306a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002306f:	eb 56                	jmp    c00230c7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023071:	6a 00                	push   0x0
c0023073:	6a 3f                	push   0x3f
c0023075:	57                   	push   edi
c0023076:	56                   	push   esi
c0023077:	e8 30 24 00 00       	call   c00254ac <__umoddi3>
c002307c:	83 c4 10             	add    esp,0x10
c002307f:	40                   	inc    eax
c0023080:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023084:	6a 00                	push   0x0
c0023086:	68 f0 03 00 00       	push   0x3f0
c002308b:	57                   	push   edi
c002308c:	56                   	push   esi
c002308d:	e8 1a 23 00 00       	call   c00253ac <__udivdi3>
c0023092:	83 c4 10             	add    esp,0x10
c0023095:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002309a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00230a1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00230a6:	6a 00                	push   0x0
c00230a8:	6a 3f                	push   0x3f
c00230aa:	57                   	push   edi
c00230ab:	56                   	push   esi
c00230ac:	e8 fb 22 00 00       	call   c00253ac <__udivdi3>
c00230b1:	83 c4 10             	add    esp,0x10
c00230b4:	89 c6                	mov    esi,eax
c00230b6:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00230bb:	83 e6 0f             	and    esi,0xf
c00230be:	eb 07                	jmp    c00230c7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00230c0:	31 f6                	xor    esi,esi
c00230c2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00230c7:	bf 01 00 00 00       	mov    edi,0x1
c00230cc:	50                   	push   eax
c00230cd:	6a 00                	push   0x0
c00230cf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00230d6:	50                   	push   eax
c00230d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230db:	e8 82 f0 ff ff       	call   c0022162 <IDE::enableIRQs(unsigned char, bool)>
c00230e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00230e3:	e8 98 fe ff ff       	call   c0022f80 <ATA::readyForCommand()>
c00230e8:	83 c4 10             	add    esp,0x10
c00230eb:	84 c0                	test   al,al
c00230ed:	0f 84 50 02 00 00    	je     c0023343 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00230f3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00230f9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00230ff:	c1 e0 04             	shl    eax,0x4
c0023102:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023109:	09 c6                	or     esi,eax
c002310b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023110:	75 05                	jne    c0023117 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023112:	83 ce a0             	or     esi,0xffffffa0
c0023115:	eb 03                	jmp    c002311a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023117:	83 ce e0             	or     esi,0xffffffe0
c002311a:	89 f0                	mov    eax,esi
c002311c:	0f b6 f0             	movzx  esi,al
c002311f:	56                   	push   esi
c0023120:	6a 06                	push   0x6
c0023122:	51                   	push   ecx
c0023123:	52                   	push   edx
c0023124:	e8 2d ee ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023129:	83 c4 10             	add    esp,0x10
c002312c:	6a 00                	push   0x0
c002312e:	6a 01                	push   0x1
c0023130:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023137:	50                   	push   eax
c0023138:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002313e:	e8 13 ee ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023143:	83 c4 10             	add    esp,0x10
c0023146:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002314b:	75 6e                	jne    c00231bb <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002314d:	6a 00                	push   0x0
c002314f:	6a 08                	push   0x8
c0023151:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023158:	50                   	push   eax
c0023159:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002315f:	e8 f2 ed ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023164:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023169:	50                   	push   eax
c002316a:	6a 09                	push   0x9
c002316c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023173:	50                   	push   eax
c0023174:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002317a:	e8 d7 ed ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002317f:	83 c4 20             	add    esp,0x20
c0023182:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023187:	50                   	push   eax
c0023188:	6a 0a                	push   0xa
c002318a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023191:	50                   	push   eax
c0023192:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023198:	e8 b9 ed ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002319d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00231a2:	50                   	push   eax
c00231a3:	6a 0b                	push   0xb
c00231a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231ac:	50                   	push   eax
c00231ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231b3:	e8 9e ed ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231b8:	83 c4 20             	add    esp,0x20
c00231bb:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00231c0:	50                   	push   eax
c00231c1:	6a 02                	push   0x2
c00231c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231ca:	50                   	push   eax
c00231cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231d1:	e8 80 ed ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231d6:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00231db:	50                   	push   eax
c00231dc:	6a 03                	push   0x3
c00231de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231e5:	50                   	push   eax
c00231e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231ec:	e8 65 ed ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231f1:	83 c4 20             	add    esp,0x20
c00231f4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00231f9:	50                   	push   eax
c00231fa:	6a 04                	push   0x4
c00231fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023203:	50                   	push   eax
c0023204:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002320a:	e8 47 ed ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002320f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023214:	50                   	push   eax
c0023215:	6a 05                	push   0x5
c0023217:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002321e:	50                   	push   eax
c002321f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023225:	e8 2c ed ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002322a:	83 c4 20             	add    esp,0x20
c002322d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023232:	0f 94 c0             	sete   al
c0023235:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002323a:	74 09                	je     c0023245 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002323c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023243:	eb 07                	jmp    c002324c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023245:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002324c:	0f b6 c0             	movzx  eax,al
c002324f:	50                   	push   eax
c0023250:	6a 07                	push   0x7
c0023252:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023259:	50                   	push   eax
c002325a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023260:	e8 f1 ec ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023265:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023269:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002326d:	83 c4 10             	add    esp,0x10
c0023270:	85 f6                	test   esi,esi
c0023272:	0f 84 ac 00 00 00    	je     c0023324 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0023278:	50                   	push   eax
c0023279:	6a 01                	push   0x1
c002327b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023282:	50                   	push   eax
c0023283:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023289:	e8 74 f8 ff ff       	call   c0022b02 <IDE::polling(unsigned char, unsigned int)>
c002328e:	83 c4 10             	add    esp,0x10
c0023291:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023297:	84 c0                	test   al,al
c0023299:	74 20                	je     c00232bb <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c002329b:	0f b6 f8             	movzx  edi,al
c002329e:	0f b6 d2             	movzx  edx,dl
c00232a1:	57                   	push   edi
c00232a2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00232a9:	50                   	push   eax
c00232aa:	52                   	push   edx
c00232ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232b1:	e8 b6 f6 ff ff       	call   c002296c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00232b6:	e9 85 00 00 00       	jmp    c0023340 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00232bb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00232c0:	74 41                	je     c0023303 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00232c2:	31 c9                	xor    ecx,ecx
c00232c4:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00232c8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00232cc:	50                   	push   eax
c00232cd:	50                   	push   eax
c00232ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00232d5:	50                   	push   eax
c00232d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232dc:	e8 63 ec ff ff       	call   c0021f44 <IDE::getBase(unsigned char)>
c00232e1:	89 c2                	mov    edx,eax
c00232e3:	89 e8                	mov    eax,ebp
c00232e5:	66 ef                	out    dx,ax
c00232e7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00232eb:	83 c4 10             	add    esp,0x10
c00232ee:	41                   	inc    ecx
c00232ef:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00232f5:	75 cd                	jne    c00232c4 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00232f7:	4e                   	dec    esi
c00232f8:	81 c7 00 02 00 00    	add    edi,0x200
c00232fe:	e9 6d ff ff ff       	jmp    c0023270 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0023303:	0f b6 d2             	movzx  edx,dl
c0023306:	51                   	push   ecx
c0023307:	51                   	push   ecx
c0023308:	52                   	push   edx
c0023309:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002330f:	e8 30 ec ff ff       	call   c0021f44 <IDE::getBase(unsigned char)>
c0023314:	b9 00 01 00 00       	mov    ecx,0x100
c0023319:	89 c2                	mov    edx,eax
c002331b:	fc                   	cld    
c002331c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002331f:	83 c4 10             	add    esp,0x10
c0023322:	eb d3                	jmp    c00232f7 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0023324:	31 ff                	xor    edi,edi
c0023326:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002332b:	74 16                	je     c0023343 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002332d:	50                   	push   eax
c002332e:	50                   	push   eax
c002332f:	31 c0                	xor    eax,eax
c0023331:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023336:	0f 94 c0             	sete   al
c0023339:	50                   	push   eax
c002333a:	53                   	push   ebx
c002333b:	e8 f6 fb ff ff       	call   c0022f36 <ATA::flush(bool)>
c0023340:	83 c4 10             	add    esp,0x10
c0023343:	83 c4 2c             	add    esp,0x2c
c0023346:	89 f8                	mov    eax,edi
c0023348:	5b                   	pop    ebx
c0023349:	5e                   	pop    esi
c002334a:	5f                   	pop    edi
c002334b:	5d                   	pop    ebp
c002334c:	c3                   	ret    
c002334d:	90                   	nop

c002334e <ATA::read(unsigned long long, int, void*)>:
c002334e:	57                   	push   edi
c002334f:	b8 04 00 00 00       	mov    eax,0x4
c0023354:	56                   	push   esi
c0023355:	53                   	push   ebx
c0023356:	83 ec 10             	sub    esp,0x10
c0023359:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002335d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023361:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023364:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023368:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002336c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023372:	77 3b                	ja     c00233af <ATA::read(unsigned long long, int, void*)+0x61>
c0023374:	b8 06 00 00 00       	mov    eax,0x6
c0023379:	85 d2                	test   edx,edx
c002337b:	74 32                	je     c00233af <ATA::read(unsigned long long, int, void*)+0x61>
c002337d:	50                   	push   eax
c002337e:	50                   	push   eax
c002337f:	6a 00                	push   0x0
c0023381:	52                   	push   edx
c0023382:	53                   	push   ebx
c0023383:	57                   	push   edi
c0023384:	56                   	push   esi
c0023385:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023389:	e8 42 fc ff ff       	call   c0022fd0 <ATA::access(unsigned long long, int, void*, bool)>
c002338e:	83 c4 20             	add    esp,0x20
c0023391:	85 c0                	test   eax,eax
c0023393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023397:	75 11                	jne    c00233aa <ATA::read(unsigned long long, int, void*)+0x5c>
c0023399:	01 1d 88 ec 02 c0    	add    DWORD PTR ds:0xc002ec88,ebx
c002339f:	e8 a0 d1 fe ff       	call   c0010544 <VgaText::updateDiskUsage()>
c00233a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00233a8:	eb 05                	jmp    c00233af <ATA::read(unsigned long long, int, void*)+0x61>
c00233aa:	b8 01 00 00 00       	mov    eax,0x1
c00233af:	83 c4 10             	add    esp,0x10
c00233b2:	5b                   	pop    ebx
c00233b3:	5e                   	pop    esi
c00233b4:	5f                   	pop    edi
c00233b5:	c3                   	ret    

c00233b6 <ATA::write(unsigned long long, int, void*)>:
c00233b6:	57                   	push   edi
c00233b7:	b8 04 00 00 00       	mov    eax,0x4
c00233bc:	56                   	push   esi
c00233bd:	53                   	push   ebx
c00233be:	83 ec 10             	sub    esp,0x10
c00233c1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00233c5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00233c9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00233cc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00233d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00233d4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00233da:	77 3b                	ja     c0023417 <ATA::write(unsigned long long, int, void*)+0x61>
c00233dc:	b8 06 00 00 00       	mov    eax,0x6
c00233e1:	85 d2                	test   edx,edx
c00233e3:	74 32                	je     c0023417 <ATA::write(unsigned long long, int, void*)+0x61>
c00233e5:	50                   	push   eax
c00233e6:	50                   	push   eax
c00233e7:	6a 01                	push   0x1
c00233e9:	52                   	push   edx
c00233ea:	53                   	push   ebx
c00233eb:	57                   	push   edi
c00233ec:	56                   	push   esi
c00233ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00233f1:	e8 da fb ff ff       	call   c0022fd0 <ATA::access(unsigned long long, int, void*, bool)>
c00233f6:	83 c4 20             	add    esp,0x20
c00233f9:	85 c0                	test   eax,eax
c00233fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00233ff:	75 11                	jne    c0023412 <ATA::write(unsigned long long, int, void*)+0x5c>
c0023401:	01 1d 84 ec 02 c0    	add    DWORD PTR ds:0xc002ec84,ebx
c0023407:	e8 38 d1 fe ff       	call   c0010544 <VgaText::updateDiskUsage()>
c002340c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023410:	eb 05                	jmp    c0023417 <ATA::write(unsigned long long, int, void*)+0x61>
c0023412:	b8 01 00 00 00       	mov    eax,0x1
c0023417:	83 c4 10             	add    esp,0x10
c002341a:	5b                   	pop    ebx
c002341b:	5e                   	pop    esi
c002341c:	5f                   	pop    edi
c002341d:	c3                   	ret    

c002341e <ATA::detectCHS()>:
c002341e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023422:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0023428:	c1 e0 06             	shl    eax,0x6
c002342b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023431:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002343b:	c7 44 24 04 4c b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b34c
c0023443:	e9 53 64 ff ff       	jmp    c001989b <Krnl::panic(char const*)>

c0023448 <ATA::open(int, int, void*)>:
c0023448:	53                   	push   ebx
c0023449:	83 ec 08             	sub    esp,0x8
c002344c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023450:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023454:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023458:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002345e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023464:	c1 e0 06             	shl    eax,0x6
c0023467:	01 d0                	add    eax,edx
c0023469:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023470:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0023476:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002347d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023487:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002348d:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0023494:	75 0c                	jne    c00234a2 <ATA::open(int, int, void*)+0x5a>
c0023496:	83 ec 0c             	sub    esp,0xc
c0023499:	53                   	push   ebx
c002349a:	e8 7f ff ff ff       	call   c002341e <ATA::detectCHS()>
c002349f:	83 c4 10             	add    esp,0x10
c00234a2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00234a8:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00234ae:	c1 e0 06             	shl    eax,0x6
c00234b1:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00234b8:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00234c2:	d1 e8                	shr    eax,1
c00234c4:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00234ca:	6a 04                	push   0x4
c00234cc:	6a 0c                	push   0xc
c00234ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234d5:	50                   	push   eax
c00234d6:	52                   	push   edx
c00234d7:	e8 7a ea ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234dc:	90                   	nop
c00234dd:	90                   	nop
c00234de:	6a 00                	push   0x0
c00234e0:	6a 0c                	push   0xc
c00234e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234e9:	50                   	push   eax
c00234ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00234f0:	e8 61 ea ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234f5:	83 c4 14             	add    esp,0x14
c00234f8:	53                   	push   ebx
c00234f9:	e8 ea 0a ff ff       	call   c0013fe8 <PhysicalDisk::startCache()>
c00234fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023501:	e8 0c 2b ff ff       	call   c0016012 <createPartitionsForDisk(PhysicalDisk*)>
c0023506:	31 c0                	xor    eax,eax
c0023508:	83 c4 18             	add    esp,0x18
c002350b:	5b                   	pop    ebx
c002350c:	c3                   	ret    
c002350d:	90                   	nop

c002350e <ATAPI::write(unsigned long long, int, void*)>:
c002350e:	b8 03 00 00 00       	mov    eax,0x3
c0023513:	c3                   	ret    

c0023514 <ATAPI::close(int, int, void*)>:
c0023514:	83 ec 0c             	sub    esp,0xc
c0023517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002351b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023521:	85 c0                	test   eax,eax
c0023523:	74 0c                	je     c0023531 <ATAPI::close(int, int, void*)+0x1d>
c0023525:	83 ec 0c             	sub    esp,0xc
c0023528:	8b 10                	mov    edx,DWORD PTR [eax]
c002352a:	50                   	push   eax
c002352b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002352e:	83 c4 10             	add    esp,0x10
c0023531:	31 c0                	xor    eax,eax
c0023533:	83 c4 0c             	add    esp,0xc
c0023536:	c3                   	ret    
c0023537:	90                   	nop

c0023538 <ATAPI::ATAPI()>:
c0023538:	83 ec 0c             	sub    esp,0xc
c002353b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002353f:	83 ec 04             	sub    esp,0x4
c0023542:	68 00 08 00 00       	push   0x800
c0023547:	68 94 b3 02 c0       	push   0xc002b394
c002354c:	50                   	push   eax
c002354d:	e8 2e 0a ff ff       	call   c0013f80 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023552:	83 c4 10             	add    esp,0x10
c0023555:	ba d4 b3 02 c0       	mov    edx,0xc002b3d4
c002355a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002355e:	89 10                	mov    DWORD PTR [eax],edx
c0023560:	90                   	nop
c0023561:	83 c4 0c             	add    esp,0xc
c0023564:	c3                   	ret    
c0023565:	90                   	nop

c0023566 <ATAPI::readyForCommand()>:
c0023566:	56                   	push   esi
c0023567:	53                   	push   ebx
c0023568:	31 db                	xor    ebx,ebx
c002356a:	50                   	push   eax
c002356b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002356f:	50                   	push   eax
c0023570:	6a 0c                	push   0xc
c0023572:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023579:	50                   	push   eax
c002357a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023580:	e8 91 ea ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c0023585:	83 c4 10             	add    esp,0x10
c0023588:	a8 88                	test   al,0x88
c002358a:	74 23                	je     c00235af <ATAPI::readyForCommand()+0x49>
c002358c:	43                   	inc    ebx
c002358d:	83 fb 63             	cmp    ebx,0x63
c0023590:	7e dd                	jle    c002356f <ATAPI::readyForCommand()+0x9>
c0023592:	51                   	push   ecx
c0023593:	51                   	push   ecx
c0023594:	6a 00                	push   0x0
c0023596:	68 40 42 0f 00       	push   0xf4240
c002359b:	e8 da 9c ff ff       	call   c001d27a <nanoSleep(unsigned long long)>
c00235a0:	83 c4 10             	add    esp,0x10
c00235a3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00235a9:	75 c4                	jne    c002356f <ATAPI::readyForCommand()+0x9>
c00235ab:	31 c0                	xor    eax,eax
c00235ad:	eb 02                	jmp    c00235b1 <ATAPI::readyForCommand()+0x4b>
c00235af:	b0 01                	mov    al,0x1
c00235b1:	5a                   	pop    edx
c00235b2:	5b                   	pop    ebx
c00235b3:	5e                   	pop    esi
c00235b4:	c3                   	ret    
c00235b5:	90                   	nop

c00235b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00235b6:	55                   	push   ebp
c00235b7:	57                   	push   edi
c00235b8:	56                   	push   esi
c00235b9:	53                   	push   ebx
c00235ba:	83 ec 20             	sub    esp,0x20
c00235bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00235c1:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00235c5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00235c9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00235cd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00235d1:	6a 01                	push   0x1
c00235d3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00235da:	50                   	push   eax
c00235db:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235e1:	e8 7c eb ff ff       	call   c0022162 <IDE::enableIRQs(unsigned char, bool)>
c00235e6:	5e                   	pop    esi
c00235e7:	58                   	pop    eax
c00235e8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00235ef:	50                   	push   eax
c00235f0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235f6:	e8 35 e9 ff ff       	call   c0021f30 <IDE::prepareInterrupt(unsigned char)>
c00235fb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00235fe:	e8 63 ff ff ff       	call   c0023566 <ATAPI::readyForCommand()>
c0023603:	83 c4 10             	add    esp,0x10
c0023606:	84 c0                	test   al,al
c0023608:	75 0a                	jne    c0023614 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002360a:	bb 01 00 00 00       	mov    ebx,0x1
c002360f:	e9 57 02 00 00       	jmp    c002386b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023614:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002361a:	c1 e0 04             	shl    eax,0x4
c002361d:	0f b6 c0             	movzx  eax,al
c0023620:	50                   	push   eax
c0023621:	6a 06                	push   0x6
c0023623:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002362a:	50                   	push   eax
c002362b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023631:	e8 20 e9 ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023636:	6a 00                	push   0x0
c0023638:	6a 01                	push   0x1
c002363a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023641:	50                   	push   eax
c0023642:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023648:	e8 09 e9 ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002364d:	83 c4 20             	add    esp,0x20
c0023650:	0f b6 c3             	movzx  eax,bl
c0023653:	0f b6 df             	movzx  ebx,bh
c0023656:	50                   	push   eax
c0023657:	6a 04                	push   0x4
c0023659:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023660:	50                   	push   eax
c0023661:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023667:	e8 ea e8 ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002366c:	53                   	push   ebx
c002366d:	6a 05                	push   0x5
c002366f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023676:	50                   	push   eax
c0023677:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002367d:	e8 d4 e8 ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023682:	83 c4 20             	add    esp,0x20
c0023685:	68 a0 00 00 00       	push   0xa0
c002368a:	6a 07                	push   0x7
c002368c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023693:	50                   	push   eax
c0023694:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002369a:	e8 b7 e8 ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002369f:	83 c4 0c             	add    esp,0xc
c00236a2:	6a 01                	push   0x1
c00236a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00236ab:	50                   	push   eax
c00236ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236b2:	e8 4b f4 ff ff       	call   c0022b02 <IDE::polling(unsigned char, unsigned int)>
c00236b7:	83 c4 10             	add    esp,0x10
c00236ba:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00236c0:	84 c0                	test   al,al
c00236c2:	74 23                	je     c00236e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00236c4:	0f b6 d8             	movzx  ebx,al
c00236c7:	0f b6 d2             	movzx  edx,dl
c00236ca:	53                   	push   ebx
c00236cb:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00236d2:	50                   	push   eax
c00236d3:	52                   	push   edx
c00236d4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236da:	e8 8d f2 ff ff       	call   c002296c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00236df:	83 c4 10             	add    esp,0x10
c00236e2:	e9 84 01 00 00       	jmp    c002386b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00236e7:	0f b6 d2             	movzx  edx,dl
c00236ea:	53                   	push   ebx
c00236eb:	53                   	push   ebx
c00236ec:	52                   	push   edx
c00236ed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236f3:	e8 4c e8 ff ff       	call   c0021f44 <IDE::getBase(unsigned char)>
c00236f8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00236fc:	b9 06 00 00 00       	mov    ecx,0x6
c0023701:	89 c2                	mov    edx,eax
c0023703:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0023706:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002370a:	83 c4 10             	add    esp,0x10
c002370d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023713:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002371a:	85 db                	test   ebx,ebx
c002371c:	0f 84 ec 00 00 00    	je     c002380e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023722:	51                   	push   ecx
c0023723:	51                   	push   ecx
c0023724:	52                   	push   edx
c0023725:	50                   	push   eax
c0023726:	e8 99 e9 ff ff       	call   c00220c4 <IDE::waitInterrupt(unsigned char)>
c002372b:	83 c4 10             	add    esp,0x10
c002372e:	84 c0                	test   al,al
c0023730:	0f 84 d4 fe ff ff    	je     c002360a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023736:	56                   	push   esi
c0023737:	56                   	push   esi
c0023738:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002373f:	50                   	push   eax
c0023740:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023746:	e8 e5 e7 ff ff       	call   c0021f30 <IDE::prepareInterrupt(unsigned char)>
c002374b:	83 c4 0c             	add    esp,0xc
c002374e:	6a 04                	push   0x4
c0023750:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023757:	50                   	push   eax
c0023758:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002375e:	e8 b3 e8 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c0023763:	83 c4 0c             	add    esp,0xc
c0023766:	89 c6                	mov    esi,eax
c0023768:	6a 05                	push   0x5
c002376a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023771:	50                   	push   eax
c0023772:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023778:	e8 99 e8 ff ff       	call   c0022016 <IDE::read(unsigned char, unsigned char)>
c002377d:	89 f1                	mov    ecx,esi
c002377f:	0f b6 c0             	movzx  eax,al
c0023782:	0f b6 f1             	movzx  esi,cl
c0023785:	c1 e0 08             	shl    eax,0x8
c0023788:	09 c6                	or     esi,eax
c002378a:	d1 fe                	sar    esi,1
c002378c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023790:	83 c4 10             	add    esp,0x10
c0023793:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0023798:	74 41                	je     c00237db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002379a:	31 c9                	xor    ecx,ecx
c002379c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00237a2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00237a9:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00237ad:	75 0a                	jne    c00237b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00237af:	01 c9                	add    ecx,ecx
c00237b1:	01 cd                	add    ebp,ecx
c00237b3:	4b                   	dec    ebx
c00237b4:	e9 54 ff ff ff       	jmp    c002370d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00237b9:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00237be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00237c2:	51                   	push   ecx
c00237c3:	51                   	push   ecx
c00237c4:	52                   	push   edx
c00237c5:	50                   	push   eax
c00237c6:	e8 79 e7 ff ff       	call   c0021f44 <IDE::getBase(unsigned char)>
c00237cb:	89 c2                	mov    edx,eax
c00237cd:	89 f0                	mov    eax,esi
c00237cf:	66 ef                	out    dx,ax
c00237d1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00237d5:	83 c4 10             	add    esp,0x10
c00237d8:	41                   	inc    ecx
c00237d9:	eb c1                	jmp    c002379c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00237db:	31 f6                	xor    esi,esi
c00237dd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00237e3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00237ea:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00237ee:	75 06                	jne    c00237f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00237f0:	01 f6                	add    esi,esi
c00237f2:	01 f5                	add    ebp,esi
c00237f4:	eb bd                	jmp    c00237b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00237f6:	51                   	push   ecx
c00237f7:	51                   	push   ecx
c00237f8:	52                   	push   edx
c00237f9:	50                   	push   eax
c00237fa:	e8 45 e7 ff ff       	call   c0021f44 <IDE::getBase(unsigned char)>
c00237ff:	89 c2                	mov    edx,eax
c0023801:	66 ed                	in     ax,dx
c0023803:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0023808:	83 c4 10             	add    esp,0x10
c002380b:	46                   	inc    esi
c002380c:	eb cf                	jmp    c00237dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002380e:	51                   	push   ecx
c002380f:	51                   	push   ecx
c0023810:	52                   	push   edx
c0023811:	50                   	push   eax
c0023812:	e8 ad e8 ff ff       	call   c00220c4 <IDE::waitInterrupt(unsigned char)>
c0023817:	83 c4 10             	add    esp,0x10
c002381a:	84 c0                	test   al,al
c002381c:	0f 84 e8 fd ff ff    	je     c002360a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023822:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023827:	52                   	push   edx
c0023828:	52                   	push   edx
c0023829:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023830:	50                   	push   eax
c0023831:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023837:	e8 f4 e6 ff ff       	call   c0021f30 <IDE::prepareInterrupt(unsigned char)>
c002383c:	83 c4 10             	add    esp,0x10
c002383f:	50                   	push   eax
c0023840:	50                   	push   eax
c0023841:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023848:	50                   	push   eax
c0023849:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002384f:	e8 f0 e6 ff ff       	call   c0021f44 <IDE::getBase(unsigned char)>
c0023854:	8d 50 07             	lea    edx,[eax+0x7]
c0023857:	ec                   	in     al,dx
c0023858:	83 c4 10             	add    esp,0x10
c002385b:	a8 88                	test   al,0x88
c002385d:	74 0a                	je     c0023869 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002385f:	4b                   	dec    ebx
c0023860:	75 dd                	jne    c002383f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0023862:	bb 02 00 00 00       	mov    ebx,0x2
c0023867:	eb 02                	jmp    c002386b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023869:	31 db                	xor    ebx,ebx
c002386b:	83 c4 1c             	add    esp,0x1c
c002386e:	89 d8                	mov    eax,ebx
c0023870:	5b                   	pop    ebx
c0023871:	5e                   	pop    esi
c0023872:	5f                   	pop    edi
c0023873:	5d                   	pop    ebp
c0023874:	c3                   	ret    
c0023875:	90                   	nop

c0023876 <ATAPI::diskRemoved()>:
c0023876:	83 ec 18             	sub    esp,0x18
c0023879:	68 9f b3 02 c0       	push   0xc002b39f
c002387e:	e8 fe ee fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0023883:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023887:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002388e:	83 c4 1c             	add    esp,0x1c
c0023891:	c3                   	ret    

c0023892 <ATAPI::eject()>:
c0023892:	57                   	push   edi
c0023893:	b9 03 00 00 00       	mov    ecx,0x3
c0023898:	53                   	push   ebx
c0023899:	83 ec 14             	sub    esp,0x14
c002389c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00238a0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00238a4:	fc                   	cld    
c00238a5:	31 c0                	xor    eax,eax
c00238a7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00238a9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00238ae:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00238b3:	50                   	push   eax
c00238b4:	50                   	push   eax
c00238b5:	6a 00                	push   0x0
c00238b7:	6a 00                	push   0x0
c00238b9:	6a 00                	push   0x0
c00238bb:	6a 02                	push   0x2
c00238bd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00238c1:	50                   	push   eax
c00238c2:	53                   	push   ebx
c00238c3:	e8 ee fc ff ff       	call   c00235b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00238c8:	83 c4 14             	add    esp,0x14
c00238cb:	53                   	push   ebx
c00238cc:	e8 a5 ff ff ff       	call   c0023876 <ATAPI::diskRemoved()>
c00238d1:	83 c4 24             	add    esp,0x24
c00238d4:	5b                   	pop    ebx
c00238d5:	5f                   	pop    edi
c00238d6:	c3                   	ret    
c00238d7:	90                   	nop

c00238d8 <ATAPI::diskInserted()>:
c00238d8:	53                   	push   ebx
c00238d9:	83 ec 14             	sub    esp,0x14
c00238dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00238e0:	68 b5 b3 02 c0       	push   0xc002b3b5
c00238e5:	e8 97 ee fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00238ea:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00238f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00238f4:	e8 ef 06 ff ff       	call   c0013fe8 <PhysicalDisk::startCache()>
c00238f9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00238fd:	83 c4 18             	add    esp,0x18
c0023900:	5b                   	pop    ebx
c0023901:	e9 0c 27 ff ff       	jmp    c0016012 <createPartitionsForDisk(PhysicalDisk*)>

c0023906 <ATAPI::detectMedia()>:
c0023906:	56                   	push   esi
c0023907:	53                   	push   ebx
c0023908:	83 ec 28             	sub    esp,0x28
c002390b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002390f:	6a 0c                	push   0xc
c0023911:	6a 00                	push   0x0
c0023913:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0023917:	56                   	push   esi
c0023918:	e8 6e cd fd ff       	call   c000068b <memset>
c002391d:	58                   	pop    eax
c002391e:	5a                   	pop    edx
c002391f:	6a 00                	push   0x0
c0023921:	6a 00                	push   0x0
c0023923:	6a 00                	push   0x0
c0023925:	6a 00                	push   0x0
c0023927:	56                   	push   esi
c0023928:	53                   	push   ebx
c0023929:	e8 88 fc ff ff       	call   c00235b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002392e:	83 c4 1c             	add    esp,0x1c
c0023931:	6a 0c                	push   0xc
c0023933:	6a 00                	push   0x0
c0023935:	56                   	push   esi
c0023936:	e8 50 cd fd ff       	call   c000068b <memset>
c002393b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0023940:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0023945:	59                   	pop    ecx
c0023946:	58                   	pop    eax
c0023947:	6a 01                	push   0x1
c0023949:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002394d:	50                   	push   eax
c002394e:	6a 00                	push   0x0
c0023950:	6a 12                	push   0x12
c0023952:	56                   	push   esi
c0023953:	53                   	push   ebx
c0023954:	e8 5d fc ff ff       	call   c00235b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023959:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002395d:	83 c4 20             	add    esp,0x20
c0023960:	83 e0 7f             	and    eax,0x7f
c0023963:	3c 70                	cmp    al,0x70
c0023965:	74 15                	je     c002397c <ATAPI::detectMedia()+0x76>
c0023967:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002396e:	75 0c                	jne    c002397c <ATAPI::detectMedia()+0x76>
c0023970:	83 ec 0c             	sub    esp,0xc
c0023973:	53                   	push   ebx
c0023974:	e8 5f ff ff ff       	call   c00238d8 <ATAPI::diskInserted()>
c0023979:	83 c4 10             	add    esp,0x10
c002397c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023980:	83 e0 0f             	and    eax,0xf
c0023983:	3c 02                	cmp    al,0x2
c0023985:	75 1b                	jne    c00239a2 <ATAPI::detectMedia()+0x9c>
c0023987:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002398c:	75 2d                	jne    c00239bb <ATAPI::detectMedia()+0xb5>
c002398e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023995:	74 24                	je     c00239bb <ATAPI::detectMedia()+0xb5>
c0023997:	83 ec 0c             	sub    esp,0xc
c002399a:	53                   	push   ebx
c002399b:	e8 d6 fe ff ff       	call   c0023876 <ATAPI::diskRemoved()>
c00239a0:	eb 16                	jmp    c00239b8 <ATAPI::detectMedia()+0xb2>
c00239a2:	84 c0                	test   al,al
c00239a4:	75 15                	jne    c00239bb <ATAPI::detectMedia()+0xb5>
c00239a6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00239ad:	75 0c                	jne    c00239bb <ATAPI::detectMedia()+0xb5>
c00239af:	83 ec 0c             	sub    esp,0xc
c00239b2:	53                   	push   ebx
c00239b3:	e8 20 ff ff ff       	call   c00238d8 <ATAPI::diskInserted()>
c00239b8:	83 c4 10             	add    esp,0x10
c00239bb:	83 c4 24             	add    esp,0x24
c00239be:	5b                   	pop    ebx
c00239bf:	5e                   	pop    esi
c00239c0:	c3                   	ret    
c00239c1:	90                   	nop

c00239c2 <ATAPI::open(int, int, void*)>:
c00239c2:	53                   	push   ebx
c00239c3:	83 ec 08             	sub    esp,0x8
c00239c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00239ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00239d2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00239d8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00239de:	c1 e0 06             	shl    eax,0x6
c00239e1:	01 d0                	add    eax,edx
c00239e3:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00239ea:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00239f0:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00239f7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023a01:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023a07:	6a 04                	push   0x4
c0023a09:	6a 0c                	push   0xc
c0023a0b:	51                   	push   ecx
c0023a0c:	52                   	push   edx
c0023a0d:	e8 44 e5 ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a12:	90                   	nop
c0023a13:	90                   	nop
c0023a14:	6a 00                	push   0x0
c0023a16:	6a 0c                	push   0xc
c0023a18:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a1f:	50                   	push   eax
c0023a20:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a26:	e8 2b e5 ff ff       	call   c0021f56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a2b:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023a32:	83 c4 14             	add    esp,0x14
c0023a35:	53                   	push   ebx
c0023a36:	e8 cb fe ff ff       	call   c0023906 <ATAPI::detectMedia()>
c0023a3b:	31 c0                	xor    eax,eax
c0023a3d:	83 c4 18             	add    esp,0x18
c0023a40:	5b                   	pop    ebx
c0023a41:	c3                   	ret    

c0023a42 <ATAPI::read(unsigned long long, int, void*)>:
c0023a42:	55                   	push   ebp
c0023a43:	57                   	push   edi
c0023a44:	56                   	push   esi
c0023a45:	53                   	push   ebx
c0023a46:	83 ec 1c             	sub    esp,0x1c
c0023a49:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023a4d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023a51:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023a55:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023a5c:	74 41                	je     c0023a9f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023a5e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023a62:	b9 03 00 00 00       	mov    ecx,0x3
c0023a67:	fc                   	cld    
c0023a68:	31 c0                	xor    eax,eax
c0023a6a:	86 fb                	xchg   bl,bh
c0023a6c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023a6e:	c1 c3 10             	rol    ebx,0x10
c0023a71:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023a76:	89 e8                	mov    eax,ebp
c0023a78:	86 fb                	xchg   bl,bh
c0023a7a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023a7e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023a82:	50                   	push   eax
c0023a83:	50                   	push   eax
c0023a84:	55                   	push   ebp
c0023a85:	c1 e5 0b             	shl    ebp,0xb
c0023a88:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023a8c:	6a 00                	push   0x0
c0023a8e:	55                   	push   ebp
c0023a8f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023a93:	50                   	push   eax
c0023a94:	56                   	push   esi
c0023a95:	e8 1c fb ff ff       	call   c00235b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023a9a:	83 c4 20             	add    esp,0x20
c0023a9d:	eb 1a                	jmp    c0023ab9 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0023a9f:	83 ec 0c             	sub    esp,0xc
c0023aa2:	56                   	push   esi
c0023aa3:	e8 5e fe ff ff       	call   c0023906 <ATAPI::detectMedia()>
c0023aa8:	83 c4 10             	add    esp,0x10
c0023aab:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023ab2:	75 aa                	jne    c0023a5e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023ab4:	b8 02 00 00 00       	mov    eax,0x2
c0023ab9:	83 c4 1c             	add    esp,0x1c
c0023abc:	5b                   	pop    ebx
c0023abd:	5e                   	pop    esi
c0023abe:	5f                   	pop    edi
c0023abf:	5d                   	pop    ebp
c0023ac0:	c3                   	ret    
c0023ac1:	90                   	nop

c0023ac2 <SATA::close(int, int, void*)>:
c0023ac2:	83 ec 0c             	sub    esp,0xc
c0023ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ac9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023acf:	85 c0                	test   eax,eax
c0023ad1:	74 0c                	je     c0023adf <SATA::close(int, int, void*)+0x1d>
c0023ad3:	83 ec 0c             	sub    esp,0xc
c0023ad6:	8b 10                	mov    edx,DWORD PTR [eax]
c0023ad8:	50                   	push   eax
c0023ad9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023adc:	83 c4 10             	add    esp,0x10
c0023adf:	31 c0                	xor    eax,eax
c0023ae1:	83 c4 0c             	add    esp,0xc
c0023ae4:	c3                   	ret    
c0023ae5:	90                   	nop

c0023ae6 <SATA::powerSaving(PowerSavingLevel)>:
c0023ae6:	c3                   	ret    
c0023ae7:	90                   	nop

c0023ae8 <SATA::open(int, int, void*)>:
c0023ae8:	53                   	push   ebx
c0023ae9:	83 ec 14             	sub    esp,0x14
c0023aec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023af0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023af4:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023afe:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023b04:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0023b0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023b12:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023b1c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023b22:	68 00 b4 02 c0       	push   0xc002b400
c0023b27:	e8 55 ec fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0023b2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023b2f:	e8 b4 04 ff ff       	call   c0013fe8 <PhysicalDisk::startCache()>
c0023b34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023b37:	e8 d6 24 ff ff       	call   c0016012 <createPartitionsForDisk(PhysicalDisk*)>
c0023b3c:	31 c0                	xor    eax,eax
c0023b3e:	83 c4 18             	add    esp,0x18
c0023b41:	5b                   	pop    ebx
c0023b42:	c3                   	ret    
c0023b43:	90                   	nop

c0023b44 <SATA::SATA()>:
c0023b44:	83 ec 0c             	sub    esp,0xc
c0023b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b4b:	83 ec 04             	sub    esp,0x4
c0023b4e:	68 00 02 00 00       	push   0x200
c0023b53:	68 1b b4 02 c0       	push   0xc002b41b
c0023b58:	50                   	push   eax
c0023b59:	e8 22 04 ff ff       	call   c0013f80 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023b5e:	83 c4 10             	add    esp,0x10
c0023b61:	ba f8 b4 02 c0       	mov    edx,0xc002b4f8
c0023b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b6a:	89 10                	mov    DWORD PTR [eax],edx
c0023b6c:	90                   	nop
c0023b6d:	83 c4 0c             	add    esp,0xc
c0023b70:	c3                   	ret    
c0023b71:	90                   	nop

c0023b72 <SATA::access(unsigned long long, int, void*, bool)>:
c0023b72:	55                   	push   ebp
c0023b73:	57                   	push   edi
c0023b74:	56                   	push   esi
c0023b75:	53                   	push   ebx
c0023b76:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0023b7c:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0023b83:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0023b8a:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0023b91:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023b98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023b9c:	83 ff 08             	cmp    edi,0x8
c0023b9f:	7e 10                	jle    c0023bb1 <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0023ba1:	83 ec 0c             	sub    esp,0xc
c0023ba4:	68 2b b4 02 c0       	push   0xc002b42b
c0023ba9:	e8 ed 5c ff ff       	call   c001989b <Krnl::panic(char const*)>
c0023bae:	83 c4 10             	add    esp,0x10
c0023bb1:	51                   	push   ecx
c0023bb2:	68 00 02 00 00       	push   0x200
c0023bb7:	68 ee 00 00 00       	push   0xee
c0023bbc:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0023bc0:	55                   	push   ebp
c0023bc1:	e8 c5 ca fd ff       	call   c000068b <memset>
c0023bc6:	83 c4 0c             	add    esp,0xc
c0023bc9:	68 00 02 00 00       	push   0x200
c0023bce:	68 ee 00 00 00       	push   0xee
c0023bd3:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0023bda:	50                   	push   eax
c0023bdb:	e8 ab ca fd ff       	call   c000068b <memset>
c0023be0:	55                   	push   ebp
c0023be1:	57                   	push   edi
c0023be2:	56                   	push   esi
c0023be3:	68 5d b4 02 c0       	push   0xc002b45d
c0023be8:	e8 94 eb fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0023bed:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023bf3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023bf9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023bfd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023c03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023c07:	c1 e0 07             	shl    eax,0x7
c0023c0a:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0023c0e:	83 c4 18             	add    esp,0x18
c0023c11:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023c1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0023c22:	c1 e2 07             	shl    edx,0x7
c0023c25:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c0023c29:	52                   	push   edx
c0023c2a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023c2e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023c34:	e8 e1 ef ff ff       	call   c0022c1a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023c39:	89 c1                	mov    ecx,eax
c0023c3b:	58                   	pop    eax
c0023c3c:	5a                   	pop    edx
c0023c3d:	51                   	push   ecx
c0023c3e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0023c42:	68 92 b4 02 c0       	push   0xc002b492
c0023c47:	e8 35 eb fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0023c4c:	83 c4 10             	add    esp,0x10
c0023c4f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023c53:	83 f9 ff             	cmp    ecx,0xffffffff
c0023c56:	0f 84 9a 01 00 00    	je     c0023df6 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023c5c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023c62:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c66:	8b 12                	mov    edx,DWORD PTR [edx]
c0023c68:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0023c6e:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0023c74:	89 c8                	mov    eax,ecx
c0023c76:	c1 e0 05             	shl    eax,0x5
c0023c79:	01 c2                	add    edx,eax
c0023c7b:	8a 02                	mov    al,BYTE PTR [edx]
c0023c7d:	83 e0 a0             	and    eax,0xffffffa0
c0023c80:	83 c8 05             	or     eax,0x5
c0023c83:	88 02                	mov    BYTE PTR [edx],al
c0023c85:	8d 47 ff             	lea    eax,[edi-0x1]
c0023c88:	c1 f8 04             	sar    eax,0x4
c0023c8b:	40                   	inc    eax
c0023c8c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0023c90:	0f b7 c0             	movzx  eax,ax
c0023c93:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c0023c99:	83 c0 08             	add    eax,0x8
c0023c9c:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0023ca2:	c1 e0 04             	shl    eax,0x4
c0023ca5:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c0023cab:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0023cae:	01 cb                	add    ebx,ecx
c0023cb0:	52                   	push   edx
c0023cb1:	50                   	push   eax
c0023cb2:	6a 00                	push   0x0
c0023cb4:	53                   	push   ebx
c0023cb5:	e8 d1 c9 fd ff       	call   c000068b <memset>
c0023cba:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023cc0:	83 c4 10             	add    esp,0x10
c0023cc3:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c0023cc9:	25 00 00 c0 7f       	and    eax,0x7fc00000
c0023cce:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c0023cd5:	0d ff 01 00 80       	or     eax,0x800001ff
c0023cda:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023cde:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0023ce4:	b8 01 00 00 00       	mov    eax,0x1
c0023ce9:	89 c2                	mov    edx,eax
c0023ceb:	c1 e2 04             	shl    edx,0x4
c0023cee:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c0023cf5:	8d 50 08             	lea    edx,[eax+0x8]
c0023cf8:	40                   	inc    eax
c0023cf9:	c1 e2 04             	shl    edx,0x4
c0023cfc:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c0023d04:	83 f8 10             	cmp    eax,0x10
c0023d07:	75 e0                	jne    c0023ce9 <SATA::access(unsigned long long, int, void*, bool)+0x177>
c0023d09:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0023d0c:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c0023d10:	66 25 00 7f          	and    ax,0x7f00
c0023d14:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c0023d18:	66 0d 27 80          	or     ax,0x8027
c0023d1c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0023d20:	66 89 03             	mov    WORD PTR [ebx],ax
c0023d23:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c0023d27:	89 f0                	mov    eax,esi
c0023d29:	31 d2                	xor    edx,edx
c0023d2b:	c1 e8 10             	shr    eax,0x10
c0023d2e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0023d31:	89 f0                	mov    eax,esi
c0023d33:	c1 e8 18             	shr    eax,0x18
c0023d36:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0023d39:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023d3d:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0023d40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d44:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d4b:	c1 e0 07             	shl    eax,0x7
c0023d4e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0023d52:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c0023d58:	80 e3 88             	and    bl,0x88
c0023d5b:	74 0b                	je     c0023d68 <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c0023d5d:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023d63:	74 0b                	je     c0023d70 <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c0023d65:	42                   	inc    edx
c0023d66:	eb ea                	jmp    c0023d52 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0023d68:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023d6e:	75 0a                	jne    c0023d7a <SATA::access(unsigned long long, int, void*, bool)+0x208>
c0023d70:	83 ec 0c             	sub    esp,0xc
c0023d73:	68 9b b4 02 c0       	push   0xc002b49b
c0023d78:	eb 60                	jmp    c0023dda <SATA::access(unsigned long long, int, void*, bool)+0x268>
c0023d7a:	be 01 00 00 00       	mov    esi,0x1
c0023d7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023d83:	d3 e6                	shl    esi,cl
c0023d85:	c1 e3 07             	shl    ebx,0x7
c0023d88:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0023d8e:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0023d92:	83 ec 0c             	sub    esp,0xc
c0023d95:	68 a9 b4 02 c0       	push   0xc002b4a9
c0023d9a:	e8 e2 e9 fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0023d9f:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0023da5:	83 c4 10             	add    esp,0x10
c0023da8:	85 c6                	test   esi,eax
c0023daa:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0023db0:	74 1a                	je     c0023dcc <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c0023db2:	0f ba e0 1e          	bt     eax,0x1e
c0023db6:	73 da                	jae    c0023d92 <SATA::access(unsigned long long, int, void*, bool)+0x220>
c0023db8:	83 ec 0c             	sub    esp,0xc
c0023dbb:	68 b6 b4 02 c0       	push   0xc002b4b6
c0023dc0:	e8 d6 5a ff ff       	call   c001989b <Krnl::panic(char const*)>
c0023dc5:	83 c4 10             	add    esp,0x10
c0023dc8:	31 c0                	xor    eax,eax
c0023dca:	eb 2f                	jmp    c0023dfb <SATA::access(unsigned long long, int, void*, bool)+0x289>
c0023dcc:	0f ba e0 1e          	bt     eax,0x1e
c0023dd0:	73 12                	jae    c0023de4 <SATA::access(unsigned long long, int, void*, bool)+0x272>
c0023dd2:	83 ec 0c             	sub    esp,0xc
c0023dd5:	68 b6 b4 02 c0       	push   0xc002b4b6
c0023dda:	e8 bc 5a ff ff       	call   c001989b <Krnl::panic(char const*)>
c0023ddf:	83 c4 10             	add    esp,0x10
c0023de2:	eb 12                	jmp    c0023df6 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023de4:	83 ec 0c             	sub    esp,0xc
c0023de7:	68 c7 b4 02 c0       	push   0xc002b4c7
c0023dec:	e8 aa 5a ff ff       	call   c001989b <Krnl::panic(char const*)>
c0023df1:	83 c4 10             	add    esp,0x10
c0023df4:	eb fe                	jmp    c0023df4 <SATA::access(unsigned long long, int, void*, bool)+0x282>
c0023df6:	b8 01 00 00 00       	mov    eax,0x1
c0023dfb:	81 c4 2c 04 00 00    	add    esp,0x42c
c0023e01:	5b                   	pop    ebx
c0023e02:	5e                   	pop    esi
c0023e03:	5f                   	pop    edi
c0023e04:	5d                   	pop    ebp
c0023e05:	c3                   	ret    

c0023e06 <SATA::read(unsigned long long, int, void*)>:
c0023e06:	57                   	push   edi
c0023e07:	b8 04 00 00 00       	mov    eax,0x4
c0023e0c:	56                   	push   esi
c0023e0d:	53                   	push   ebx
c0023e0e:	83 ec 10             	sub    esp,0x10
c0023e11:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023e15:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023e19:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023e1c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023e20:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023e24:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023e2a:	77 3b                	ja     c0023e67 <SATA::read(unsigned long long, int, void*)+0x61>
c0023e2c:	b8 06 00 00 00       	mov    eax,0x6
c0023e31:	85 d2                	test   edx,edx
c0023e33:	74 32                	je     c0023e67 <SATA::read(unsigned long long, int, void*)+0x61>
c0023e35:	50                   	push   eax
c0023e36:	50                   	push   eax
c0023e37:	6a 00                	push   0x0
c0023e39:	52                   	push   edx
c0023e3a:	53                   	push   ebx
c0023e3b:	57                   	push   edi
c0023e3c:	56                   	push   esi
c0023e3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023e41:	e8 2c fd ff ff       	call   c0023b72 <SATA::access(unsigned long long, int, void*, bool)>
c0023e46:	83 c4 20             	add    esp,0x20
c0023e49:	85 c0                	test   eax,eax
c0023e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023e4f:	75 11                	jne    c0023e62 <SATA::read(unsigned long long, int, void*)+0x5c>
c0023e51:	01 1d 88 ec 02 c0    	add    DWORD PTR ds:0xc002ec88,ebx
c0023e57:	e8 e8 c6 fe ff       	call   c0010544 <VgaText::updateDiskUsage()>
c0023e5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e60:	eb 05                	jmp    c0023e67 <SATA::read(unsigned long long, int, void*)+0x61>
c0023e62:	b8 01 00 00 00       	mov    eax,0x1
c0023e67:	83 c4 10             	add    esp,0x10
c0023e6a:	5b                   	pop    ebx
c0023e6b:	5e                   	pop    esi
c0023e6c:	5f                   	pop    edi
c0023e6d:	c3                   	ret    

c0023e6e <SATA::write(unsigned long long, int, void*)>:
c0023e6e:	57                   	push   edi
c0023e6f:	b8 04 00 00 00       	mov    eax,0x4
c0023e74:	56                   	push   esi
c0023e75:	53                   	push   ebx
c0023e76:	83 ec 10             	sub    esp,0x10
c0023e79:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023e7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023e81:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023e84:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023e88:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023e8c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023e92:	77 3b                	ja     c0023ecf <SATA::write(unsigned long long, int, void*)+0x61>
c0023e94:	b8 06 00 00 00       	mov    eax,0x6
c0023e99:	85 d2                	test   edx,edx
c0023e9b:	74 32                	je     c0023ecf <SATA::write(unsigned long long, int, void*)+0x61>
c0023e9d:	50                   	push   eax
c0023e9e:	50                   	push   eax
c0023e9f:	6a 01                	push   0x1
c0023ea1:	52                   	push   edx
c0023ea2:	53                   	push   ebx
c0023ea3:	57                   	push   edi
c0023ea4:	56                   	push   esi
c0023ea5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023ea9:	e8 c4 fc ff ff       	call   c0023b72 <SATA::access(unsigned long long, int, void*, bool)>
c0023eae:	83 c4 20             	add    esp,0x20
c0023eb1:	85 c0                	test   eax,eax
c0023eb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023eb7:	75 11                	jne    c0023eca <SATA::write(unsigned long long, int, void*)+0x5c>
c0023eb9:	01 1d 84 ec 02 c0    	add    DWORD PTR ds:0xc002ec84,ebx
c0023ebf:	e8 80 c6 fe ff       	call   c0010544 <VgaText::updateDiskUsage()>
c0023ec4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ec8:	eb 05                	jmp    c0023ecf <SATA::write(unsigned long long, int, void*)+0x61>
c0023eca:	b8 01 00 00 00       	mov    eax,0x1
c0023ecf:	83 c4 10             	add    esp,0x10
c0023ed2:	5b                   	pop    ebx
c0023ed3:	5e                   	pop    esi
c0023ed4:	5f                   	pop    edi
c0023ed5:	c3                   	ret    

c0023ed6 <AVX::open(int, int, void*)>:
c0023ed6:	83 ec 0c             	sub    esp,0xc
c0023ed9:	e8 3a 11 00 00       	call   c0025018 <avxInit>
c0023ede:	b8 00 00 00 00       	mov    eax,0x0
c0023ee3:	83 c4 0c             	add    esp,0xc
c0023ee6:	c3                   	ret    
c0023ee7:	90                   	nop

c0023ee8 <AVX::close(int, int, void*)>:
c0023ee8:	83 ec 0c             	sub    esp,0xc
c0023eeb:	e8 29 11 00 00       	call   c0025019 <avxClose>
c0023ef0:	b8 00 00 00 00       	mov    eax,0x0
c0023ef5:	83 c4 0c             	add    esp,0xc
c0023ef8:	c3                   	ret    
c0023ef9:	90                   	nop

c0023efa <AVX::available()>:
c0023efa:	83 ec 0c             	sub    esp,0xc
c0023efd:	e8 0e 11 00 00       	call   c0025010 <avxDetect>
c0023f02:	85 c0                	test   eax,eax
c0023f04:	0f 95 c0             	setne  al
c0023f07:	83 c4 0c             	add    esp,0xc
c0023f0a:	c3                   	ret    
c0023f0b:	90                   	nop

c0023f0c <AVX::save(void*)>:
c0023f0c:	83 ec 0c             	sub    esp,0xc
c0023f0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f13:	83 ec 0c             	sub    esp,0xc
c0023f16:	50                   	push   eax
c0023f17:	e8 fa 10 00 00       	call   c0025016 <avxSave>
c0023f1c:	83 c4 10             	add    esp,0x10
c0023f1f:	90                   	nop
c0023f20:	83 c4 0c             	add    esp,0xc
c0023f23:	c3                   	ret    

c0023f24 <AVX::load(void*)>:
c0023f24:	83 ec 0c             	sub    esp,0xc
c0023f27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f2b:	83 ec 0c             	sub    esp,0xc
c0023f2e:	50                   	push   eax
c0023f2f:	e8 e3 10 00 00       	call   c0025017 <avxLoad>
c0023f34:	83 c4 10             	add    esp,0x10
c0023f37:	90                   	nop
c0023f38:	83 c4 0c             	add    esp,0xc
c0023f3b:	c3                   	ret    

c0023f3c <AVX::AVX()>:
c0023f3c:	83 ec 0c             	sub    esp,0xc
c0023f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f43:	83 ec 08             	sub    esp,0x8
c0023f46:	68 24 b5 02 c0       	push   0xc002b524
c0023f4b:	50                   	push   eax
c0023f4c:	e8 0d 01 ff ff       	call   c001405e <FPU::FPU(char const*)>
c0023f51:	83 c4 10             	add    esp,0x10
c0023f54:	ba 34 b5 02 c0       	mov    edx,0xc002b534
c0023f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f5d:	89 10                	mov    DWORD PTR [eax],edx
c0023f5f:	90                   	nop
c0023f60:	83 c4 0c             	add    esp,0xc
c0023f63:	c3                   	ret    

c0023f64 <MMX::available()>:
c0023f64:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0023f69:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0023f6f:	83 e0 20             	and    eax,0x20
c0023f72:	84 c0                	test   al,al
c0023f74:	0f 95 c0             	setne  al
c0023f77:	c3                   	ret    

c0023f78 <MMX::open(int, int, void*)>:
c0023f78:	83 ec 0c             	sub    esp,0xc
c0023f7b:	e8 1c 11 00 00       	call   c002509c <x87Init>
c0023f80:	b8 00 00 00 00       	mov    eax,0x0
c0023f85:	83 c4 0c             	add    esp,0xc
c0023f88:	c3                   	ret    
c0023f89:	90                   	nop

c0023f8a <MMX::close(int, int, void*)>:
c0023f8a:	83 ec 0c             	sub    esp,0xc
c0023f8d:	e8 24 11 00 00       	call   c00250b6 <x87Close>
c0023f92:	b8 00 00 00 00       	mov    eax,0x0
c0023f97:	83 c4 0c             	add    esp,0xc
c0023f9a:	c3                   	ret    
c0023f9b:	90                   	nop

c0023f9c <MMX::save(void*)>:
c0023f9c:	83 ec 0c             	sub    esp,0xc
c0023f9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fa3:	83 ec 0c             	sub    esp,0xc
c0023fa6:	50                   	push   eax
c0023fa7:	e8 e5 10 00 00       	call   c0025091 <x87Save>
c0023fac:	83 c4 10             	add    esp,0x10
c0023faf:	90                   	nop
c0023fb0:	83 c4 0c             	add    esp,0xc
c0023fb3:	c3                   	ret    

c0023fb4 <MMX::load(void*)>:
c0023fb4:	83 ec 0c             	sub    esp,0xc
c0023fb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fbb:	83 ec 0c             	sub    esp,0xc
c0023fbe:	50                   	push   eax
c0023fbf:	e8 d3 10 00 00       	call   c0025097 <x87Load>
c0023fc4:	83 c4 10             	add    esp,0x10
c0023fc7:	90                   	nop
c0023fc8:	83 c4 0c             	add    esp,0xc
c0023fcb:	c3                   	ret    

c0023fcc <MMX::MMX()>:
c0023fcc:	83 ec 0c             	sub    esp,0xc
c0023fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fd3:	83 ec 08             	sub    esp,0x8
c0023fd6:	68 64 b5 02 c0       	push   0xc002b564
c0023fdb:	50                   	push   eax
c0023fdc:	e8 7d 00 ff ff       	call   c001405e <FPU::FPU(char const*)>
c0023fe1:	83 c4 10             	add    esp,0x10
c0023fe4:	ba 74 b5 02 c0       	mov    edx,0xc002b574
c0023fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fed:	89 10                	mov    DWORD PTR [eax],edx
c0023fef:	90                   	nop
c0023ff0:	83 c4 0c             	add    esp,0xc
c0023ff3:	c3                   	ret    

c0023ff4 <SSE::open(int, int, void*)>:
c0023ff4:	83 ec 0c             	sub    esp,0xc
c0023ff7:	e8 58 10 00 00       	call   c0025054 <sseInit>
c0023ffc:	b8 00 00 00 00       	mov    eax,0x0
c0024001:	83 c4 0c             	add    esp,0xc
c0024004:	c3                   	ret    
c0024005:	90                   	nop

c0024006 <SSE::close(int, int, void*)>:
c0024006:	83 ec 0c             	sub    esp,0xc
c0024009:	e8 56 10 00 00       	call   c0025064 <sseClose>
c002400e:	b8 00 00 00 00       	mov    eax,0x0
c0024013:	83 c4 0c             	add    esp,0xc
c0024016:	c3                   	ret    
c0024017:	90                   	nop

c0024018 <SSE::available()>:
c0024018:	83 ec 1c             	sub    esp,0x1c
c002401b:	e8 10 10 00 00       	call   c0025030 <absolutelyNoChanceInHell>
c0024020:	85 c0                	test   eax,eax
c0024022:	0f 95 c0             	setne  al
c0024025:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024029:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002402d:	83 c4 1c             	add    esp,0x1c
c0024030:	c3                   	ret    
c0024031:	90                   	nop

c0024032 <SSE::save(void*)>:
c0024032:	83 ec 0c             	sub    esp,0xc
c0024035:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024039:	83 ec 0c             	sub    esp,0xc
c002403c:	50                   	push   eax
c002403d:	e8 06 10 00 00       	call   c0025048 <sseSave>
c0024042:	83 c4 10             	add    esp,0x10
c0024045:	90                   	nop
c0024046:	83 c4 0c             	add    esp,0xc
c0024049:	c3                   	ret    

c002404a <SSE::load(void*)>:
c002404a:	83 ec 0c             	sub    esp,0xc
c002404d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024051:	83 ec 0c             	sub    esp,0xc
c0024054:	50                   	push   eax
c0024055:	e8 f4 0f 00 00       	call   c002504e <sseLoad>
c002405a:	83 c4 10             	add    esp,0x10
c002405d:	90                   	nop
c002405e:	83 c4 0c             	add    esp,0xc
c0024061:	c3                   	ret    

c0024062 <SSE::SSE()>:
c0024062:	83 ec 0c             	sub    esp,0xc
c0024065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024069:	83 ec 08             	sub    esp,0x8
c002406c:	68 a4 b5 02 c0       	push   0xc002b5a4
c0024071:	50                   	push   eax
c0024072:	e8 e7 ff fe ff       	call   c001405e <FPU::FPU(char const*)>
c0024077:	83 c4 10             	add    esp,0x10
c002407a:	ba b4 b5 02 c0       	mov    edx,0xc002b5b4
c002407f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024083:	89 10                	mov    DWORD PTR [eax],edx
c0024085:	90                   	nop
c0024086:	83 c4 0c             	add    esp,0xc
c0024089:	c3                   	ret    

c002408a <x87::open(int, int, void*)>:
c002408a:	83 ec 0c             	sub    esp,0xc
c002408d:	e8 0a 10 00 00       	call   c002509c <x87Init>
c0024092:	b8 00 00 00 00       	mov    eax,0x0
c0024097:	83 c4 0c             	add    esp,0xc
c002409a:	c3                   	ret    
c002409b:	90                   	nop

c002409c <x87::close(int, int, void*)>:
c002409c:	83 ec 0c             	sub    esp,0xc
c002409f:	e8 12 10 00 00       	call   c00250b6 <x87Close>
c00240a4:	b8 00 00 00 00       	mov    eax,0x0
c00240a9:	83 c4 0c             	add    esp,0xc
c00240ac:	c3                   	ret    
c00240ad:	90                   	nop

c00240ae <x87::available()>:
c00240ae:	83 ec 0c             	sub    esp,0xc
c00240b1:	e8 c0 0f 00 00       	call   c0025076 <x87Detect>
c00240b6:	85 c0                	test   eax,eax
c00240b8:	0f 95 c0             	setne  al
c00240bb:	83 c4 0c             	add    esp,0xc
c00240be:	c3                   	ret    
c00240bf:	90                   	nop

c00240c0 <x87::save(void*)>:
c00240c0:	83 ec 0c             	sub    esp,0xc
c00240c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240c7:	83 ec 0c             	sub    esp,0xc
c00240ca:	50                   	push   eax
c00240cb:	e8 c1 0f 00 00       	call   c0025091 <x87Save>
c00240d0:	83 c4 10             	add    esp,0x10
c00240d3:	90                   	nop
c00240d4:	83 c4 0c             	add    esp,0xc
c00240d7:	c3                   	ret    

c00240d8 <x87::load(void*)>:
c00240d8:	83 ec 0c             	sub    esp,0xc
c00240db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240df:	83 ec 0c             	sub    esp,0xc
c00240e2:	50                   	push   eax
c00240e3:	e8 af 0f 00 00       	call   c0025097 <x87Load>
c00240e8:	83 c4 10             	add    esp,0x10
c00240eb:	90                   	nop
c00240ec:	83 c4 0c             	add    esp,0xc
c00240ef:	c3                   	ret    

c00240f0 <x87::x87()>:
c00240f0:	83 ec 0c             	sub    esp,0xc
c00240f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240f7:	83 ec 08             	sub    esp,0x8
c00240fa:	68 e4 b5 02 c0       	push   0xc002b5e4
c00240ff:	50                   	push   eax
c0024100:	e8 59 ff fe ff       	call   c001405e <FPU::FPU(char const*)>
c0024105:	83 c4 10             	add    esp,0x10
c0024108:	ba f4 b5 02 c0       	mov    edx,0xc002b5f4
c002410d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024111:	89 10                	mov    DWORD PTR [eax],edx
c0024113:	90                   	nop
c0024114:	83 c4 0c             	add    esp,0xc
c0024117:	c3                   	ret    

c0024118 <APIC::disable()>:
c0024118:	90                   	nop
c0024119:	c3                   	ret    

c002411a <APIC::close(int, int, void*)>:
c002411a:	55                   	push   ebp
c002411b:	89 e5                	mov    ebp,esp
c002411d:	83 ec 08             	sub    esp,0x8
c0024120:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024123:	8b 00                	mov    eax,DWORD PTR [eax]
c0024125:	83 c0 3c             	add    eax,0x3c
c0024128:	8b 00                	mov    eax,DWORD PTR [eax]
c002412a:	83 ec 0c             	sub    esp,0xc
c002412d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024130:	ff d0                	call   eax
c0024132:	83 c4 10             	add    esp,0x10
c0024135:	b8 00 00 00 00       	mov    eax,0x0
c002413a:	c9                   	leave  
c002413b:	c3                   	ret    

c002413c <IOAPIC::close(int, int, void*)>:
c002413c:	b8 00 00 00 00       	mov    eax,0x0
c0024141:	c3                   	ret    

c0024142 <APIC::io_wait()>:
c0024142:	eb 00                	jmp    c0024144 <APIC::io_wait()+0x2>
c0024144:	eb 00                	jmp    c0024146 <APIC::io_wait()+0x4>
c0024146:	90                   	nop
c0024147:	c3                   	ret    

c0024148 <APIC::getBase()>:
c0024148:	55                   	push   ebp
c0024149:	89 e5                	mov    ebp,esp
c002414b:	83 ec 18             	sub    esp,0x18
c002414e:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0024153:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024159:	83 e0 08             	and    eax,0x8
c002415c:	84 c0                	test   al,al
c002415e:	75 07                	jne    c0024167 <APIC::getBase()+0x1f>
c0024160:	b8 00 00 00 00       	mov    eax,0x0
c0024165:	eb 21                	jmp    c0024188 <APIC::getBase()+0x40>
c0024167:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c002416c:	83 ec 08             	sub    esp,0x8
c002416f:	6a 1b                	push   0x1b
c0024171:	50                   	push   eax
c0024172:	e8 05 a9 fe ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c0024177:	83 c4 10             	add    esp,0x10
c002417a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002417d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024180:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024183:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024188:	c9                   	leave  
c0024189:	c3                   	ret    

c002418a <APIC::eoi(unsigned char)>:
c002418a:	55                   	push   ebp
c002418b:	89 e5                	mov    ebp,esp
c002418d:	83 ec 28             	sub    esp,0x28
c0024190:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024193:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0024196:	83 ec 0c             	sub    esp,0xc
c0024199:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002419c:	e8 a7 ff ff ff       	call   c0024148 <APIC::getBase()>
c00241a1:	83 c4 10             	add    esp,0x10
c00241a4:	05 b0 00 00 00       	add    eax,0xb0
c00241a9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00241ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00241af:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00241b5:	90                   	nop
c00241b6:	c9                   	leave  
c00241b7:	c3                   	ret    

c00241b8 <APIC::open(int, int, void*)>:
c00241b8:	55                   	push   ebp
c00241b9:	89 e5                	mov    ebp,esp
c00241bb:	57                   	push   edi
c00241bc:	56                   	push   esi
c00241bd:	53                   	push   ebx
c00241be:	83 ec 2c             	sub    esp,0x2c
c00241c1:	83 ec 0c             	sub    esp,0xc
c00241c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00241c7:	e8 7c ff ff ff       	call   c0024148 <APIC::getBase()>
c00241cc:	83 c4 10             	add    esp,0x10
c00241cf:	89 c2                	mov    edx,eax
c00241d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00241d4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00241da:	0f b6 f8             	movzx  edi,al
c00241dd:	89 d0                	mov    eax,edx
c00241df:	ba 00 00 00 00       	mov    edx,0x0
c00241e4:	89 c1                	mov    ecx,eax
c00241e6:	80 e5 ff             	and    ch,0xff
c00241e9:	89 cb                	mov    ebx,ecx
c00241eb:	0f b6 f2             	movzx  esi,dl
c00241ee:	89 d8                	mov    eax,ebx
c00241f0:	89 f2                	mov    edx,esi
c00241f2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00241f5:	8d 5f 08             	lea    ebx,[edi+0x8]
c00241f8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00241fc:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024200:	83 e0 00             	and    eax,0x0
c0024203:	09 d0                	or     eax,edx
c0024205:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002420c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024212:	8d 50 01             	lea    edx,[eax+0x1]
c0024215:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024218:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002421e:	0f b6 d0             	movzx  edx,al
c0024221:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024224:	83 c2 08             	add    edx,0x8
c0024227:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002422b:	0f b6 c9             	movzx  ecx,cl
c002422e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024234:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024238:	83 ec 0c             	sub    esp,0xc
c002423b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002423e:	e8 05 ff ff ff       	call   c0024148 <APIC::getBase()>
c0024243:	83 c4 10             	add    esp,0x10
c0024246:	05 f0 00 00 00       	add    eax,0xf0
c002424b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002424e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024251:	8b 00                	mov    eax,DWORD PTR [eax]
c0024253:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024256:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002425d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0024264:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024267:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002426a:	89 10                	mov    DWORD PTR [eax],edx
c002426c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0024273:	a1 10 d2 02 c0       	mov    eax,ds:0xc002d210
c0024278:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002427b:	7d 7c                	jge    c00242f9 <APIC::open(int, int, void*)+0x141>
c002427d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024280:	8b 04 85 20 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2de0]
c0024287:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002428a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002428d:	8b 04 85 20 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2de0]
c0024294:	c1 e8 08             	shr    eax,0x8
c0024297:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002429b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002429e:	8b 04 85 20 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2de0]
c00242a5:	c1 e8 18             	shr    eax,0x18
c00242a8:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00242ab:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00242af:	75 40                	jne    c00242f1 <APIC::open(int, int, void*)+0x139>
c00242b1:	83 ec 0c             	sub    esp,0xc
c00242b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00242b7:	e8 8c fe ff ff       	call   c0024148 <APIC::getBase()>
c00242bc:	83 c4 10             	add    esp,0x10
c00242bf:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00242c3:	75 07                	jne    c00242cc <APIC::open(int, int, void*)+0x114>
c00242c5:	ba 60 03 00 00       	mov    edx,0x360
c00242ca:	eb 05                	jmp    c00242d1 <APIC::open(int, int, void*)+0x119>
c00242cc:	ba 50 03 00 00       	mov    edx,0x350
c00242d1:	01 d0                	add    eax,edx
c00242d3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00242d6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00242d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00242db:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00242de:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00242e5:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00242e9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00242ec:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00242ef:	89 10                	mov    DWORD PTR [eax],edx
c00242f1:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00242f4:	e9 7a ff ff ff       	jmp    c0024273 <APIC::open(int, int, void*)+0xbb>
c00242f9:	b8 00 00 00 00       	mov    eax,0x0
c00242fe:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024301:	5b                   	pop    ebx
c0024302:	5e                   	pop    esi
c0024303:	5f                   	pop    edi
c0024304:	5d                   	pop    ebp
c0024305:	c3                   	ret    

c0024306 <IOAPIC::IOAPIC()>:
c0024306:	83 ec 0c             	sub    esp,0xc
c0024309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002430d:	83 ec 08             	sub    esp,0x8
c0024310:	68 24 b6 02 c0       	push   0xc002b624
c0024315:	50                   	push   eax
c0024316:	e8 45 fa fe ff       	call   c0013d60 <Device::Device(char const*)>
c002431b:	83 c4 10             	add    esp,0x10
c002431e:	ba 4c b7 02 c0       	mov    edx,0xc002b74c
c0024323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024327:	89 10                	mov    DWORD PTR [eax],edx
c0024329:	90                   	nop
c002432a:	83 c4 0c             	add    esp,0xc
c002432d:	c3                   	ret    

c002432e <APIC::APIC()>:
c002432e:	53                   	push   ebx
c002432f:	83 ec 18             	sub    esp,0x18
c0024332:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024336:	83 ec 08             	sub    esp,0x8
c0024339:	68 2c b6 02 c0       	push   0xc002b62c
c002433e:	50                   	push   eax
c002433f:	e8 74 01 ff ff       	call   c00144b8 <InterruptController::InterruptController(char const*)>
c0024344:	83 c4 10             	add    esp,0x10
c0024347:	ba 04 b7 02 c0       	mov    edx,0xc002b704
c002434c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024350:	89 10                	mov    DWORD PTR [eax],edx
c0024352:	a0 e0 ec 02 c0       	mov    al,ds:0xc002ece0
c0024357:	83 f0 01             	xor    eax,0x1
c002435a:	84 c0                	test   al,al
c002435c:	0f 84 a1 00 00 00    	je     c0024403 <APIC::APIC()+0xd5>
c0024362:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0024367:	a0 c0 d2 02 c0       	mov    al,ds:0xc002d2c0
c002436c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0024370:	0f 83 86 00 00 00    	jae    c00243fc <APIC::APIC()+0xce>
c0024376:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002437e:	83 ec 0c             	sub    esp,0xc
c0024381:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024385:	e8 4a b1 fe ff       	call   c000f4d4 <malloc>
c002438a:	83 c4 10             	add    esp,0x10
c002438d:	89 c3                	mov    ebx,eax
c002438f:	83 ec 0c             	sub    esp,0xc
c0024392:	53                   	push   ebx
c0024393:	e8 6e ff ff ff       	call   c0024306 <IOAPIC::IOAPIC()>
c0024398:	83 c4 10             	add    esp,0x10
c002439b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002439f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00243a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00243a8:	89 14 85 c0 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1340],edx
c00243af:	a1 a0 ec 02 c0       	mov    eax,ds:0xc002eca0
c00243b4:	40                   	inc    eax
c00243b5:	a3 a0 ec 02 c0       	mov    ds:0xc002eca0,eax
c00243ba:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00243bf:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00243c5:	83 ec 08             	sub    esp,0x8
c00243c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00243cc:	50                   	push   eax
c00243cd:	e8 9e f7 fe ff       	call   c0013b70 <Device::addChild(Device*)>
c00243d2:	83 c4 10             	add    esp,0x10
c00243d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00243d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00243db:	83 c0 08             	add    eax,0x8
c00243de:	8b 00                	mov    eax,DWORD PTR [eax]
c00243e0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00243e5:	6a 00                	push   0x0
c00243e7:	6a 00                	push   0x0
c00243e9:	52                   	push   edx
c00243ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00243ee:	ff d0                	call   eax
c00243f0:	83 c4 10             	add    esp,0x10
c00243f3:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00243f7:	e9 6b ff ff ff       	jmp    c0024367 <APIC::APIC()+0x39>
c00243fc:	c6 05 e0 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ece0,0x1
c0024403:	90                   	nop
c0024404:	83 c4 18             	add    esp,0x18
c0024407:	5b                   	pop    ebx
c0024408:	c3                   	ret    
c0024409:	90                   	nop

c002440a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002440a:	55                   	push   ebp
c002440b:	89 e5                	mov    ebp,esp
c002440d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024410:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024416:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024419:	72 1d                	jb     c0024438 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002441b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002441e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0024424:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024427:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002442d:	01 d0                	add    eax,edx
c002442f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024432:	73 04                	jae    c0024438 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024434:	b0 01                	mov    al,0x1
c0024436:	eb 02                	jmp    c002443a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0024438:	b0 00                	mov    al,0x0
c002443a:	5d                   	pop    ebp
c002443b:	c3                   	ret    

c002443c <IOAPIC::read(int)>:
c002443c:	55                   	push   ebp
c002443d:	89 e5                	mov    ebp,esp
c002443f:	83 ec 10             	sub    esp,0x10
c0024442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024445:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002444b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002444e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024451:	0f b6 d0             	movzx  edx,al
c0024454:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024457:	89 10                	mov    DWORD PTR [eax],edx
c0024459:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002445c:	83 c0 10             	add    eax,0x10
c002445f:	8b 00                	mov    eax,DWORD PTR [eax]
c0024461:	c9                   	leave  
c0024462:	c3                   	ret    
c0024463:	90                   	nop

c0024464 <IOAPIC::open(int, int, void*)>:
c0024464:	55                   	push   ebp
c0024465:	89 e5                	mov    ebp,esp
c0024467:	57                   	push   edi
c0024468:	56                   	push   esi
c0024469:	53                   	push   ebx
c002446a:	83 ec 0c             	sub    esp,0xc
c002446d:	83 ec 0c             	sub    esp,0xc
c0024470:	68 57 b6 02 c0       	push   0xc002b657
c0024475:	e8 07 e3 fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c002447a:	83 c4 10             	add    esp,0x10
c002447d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024480:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024483:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002448c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024492:	8b 14 85 00 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2d00]
c0024499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002449c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00244a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244a5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00244ab:	8b 14 85 80 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2c80]
c00244b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244b5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00244bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244be:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00244c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244c7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00244cd:	0f b6 f8             	movzx  edi,al
c00244d0:	89 d0                	mov    eax,edx
c00244d2:	ba 00 00 00 00       	mov    edx,0x0
c00244d7:	89 c1                	mov    ecx,eax
c00244d9:	80 e5 ff             	and    ch,0xff
c00244dc:	89 cb                	mov    ebx,ecx
c00244de:	0f b6 f2             	movzx  esi,dl
c00244e1:	89 d8                	mov    eax,ebx
c00244e3:	89 f2                	mov    edx,esi
c00244e5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00244e8:	8d 5f 08             	lea    ebx,[edi+0x8]
c00244eb:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00244ef:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00244f3:	83 e0 00             	and    eax,0x0
c00244f6:	09 d0                	or     eax,edx
c00244f8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00244fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244ff:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024505:	8d 50 01             	lea    edx,[eax+0x1]
c0024508:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002450b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024511:	0f b6 d0             	movzx  edx,al
c0024514:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024517:	83 c2 08             	add    edx,0x8
c002451a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002451e:	0f b6 c9             	movzx  ecx,cl
c0024521:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0024527:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002452b:	83 ec 08             	sub    esp,0x8
c002452e:	6a 01                	push   0x1
c0024530:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024533:	e8 04 ff ff ff       	call   c002443c <IOAPIC::read(int)>
c0024538:	83 c4 10             	add    esp,0x10
c002453b:	c1 f8 10             	sar    eax,0x10
c002453e:	0f b6 c0             	movzx  eax,al
c0024541:	8d 50 01             	lea    edx,[eax+0x1]
c0024544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024547:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002454d:	b8 00 00 00 00       	mov    eax,0x0
c0024552:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024555:	5b                   	pop    ebx
c0024556:	5e                   	pop    esi
c0024557:	5f                   	pop    edi
c0024558:	5d                   	pop    ebp
c0024559:	c3                   	ret    

c002455a <IOAPIC::write(int, int)>:
c002455a:	55                   	push   ebp
c002455b:	89 e5                	mov    ebp,esp
c002455d:	83 ec 10             	sub    esp,0x10
c0024560:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024563:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024569:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002456c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002456f:	0f b6 d0             	movzx  edx,al
c0024572:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024575:	89 10                	mov    DWORD PTR [eax],edx
c0024577:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002457a:	8d 50 10             	lea    edx,[eax+0x10]
c002457d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024580:	89 02                	mov    DWORD PTR [edx],eax
c0024582:	90                   	nop
c0024583:	c9                   	leave  
c0024584:	c3                   	ret    
c0024585:	90                   	nop

c0024586 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0024586:	55                   	push   ebp
c0024587:	89 e5                	mov    ebp,esp
c0024589:	53                   	push   ebx
c002458a:	83 ec 2c             	sub    esp,0x2c
c002458d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024590:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0024593:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0024596:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0024599:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002459c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002459f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00245a2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00245a5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00245a8:	88 d8                	mov    al,bl
c00245aa:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00245ad:	88 c8                	mov    al,cl
c00245af:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00245b2:	88 d0                	mov    al,dl
c00245b4:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00245b7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00245bb:	83 c0 08             	add    eax,0x8
c00245be:	01 c0                	add    eax,eax
c00245c0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00245c3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00245c7:	83 c0 08             	add    eax,0x8
c00245ca:	01 c0                	add    eax,eax
c00245cc:	40                   	inc    eax
c00245cd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00245d0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00245d3:	50                   	push   eax
c00245d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245d7:	e8 60 fe ff ff       	call   c002443c <IOAPIC::read(int)>
c00245dc:	83 c4 08             	add    esp,0x8
c00245df:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00245e2:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00245e9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00245ec:	c1 e0 18             	shl    eax,0x18
c00245ef:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00245f2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00245f5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00245f8:	52                   	push   edx
c00245f9:	50                   	push   eax
c00245fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245fd:	e8 58 ff ff ff       	call   c002455a <IOAPIC::write(int, int)>
c0024602:	83 c4 0c             	add    esp,0xc
c0024605:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024608:	50                   	push   eax
c0024609:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002460c:	e8 2b fe ff ff       	call   c002443c <IOAPIC::read(int)>
c0024611:	83 c4 08             	add    esp,0x8
c0024614:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0024617:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002461e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0024625:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002462c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024630:	74 09                	je     c002463b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0024632:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0024639:	eb 07                	jmp    c0024642 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002463b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0024642:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0024646:	74 09                	je     c0024651 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0024648:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002464f:	eb 07                	jmp    c0024658 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0024651:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0024658:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002465f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0024663:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0024666:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0024669:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002466c:	52                   	push   edx
c002466d:	50                   	push   eax
c002466e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024671:	e8 e4 fe ff ff       	call   c002455a <IOAPIC::write(int, int)>
c0024676:	83 c4 0c             	add    esp,0xc
c0024679:	90                   	nop
c002467a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002467d:	c9                   	leave  
c002467e:	c3                   	ret    
c002467f:	90                   	nop

c0024680 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0024680:	55                   	push   ebp
c0024681:	89 e5                	mov    ebp,esp
c0024683:	57                   	push   edi
c0024684:	56                   	push   esi
c0024685:	53                   	push   ebx
c0024686:	83 ec 2c             	sub    esp,0x2c
c0024689:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002468c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002468f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024693:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0024697:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002469b:	74 5a                	je     c00246f7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002469d:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00246a1:	7f 44                	jg     c00246e7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00246a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00246a6:	05 a0 bb 02 c0       	add    eax,0xc002bba0
c00246ab:	8a 00                	mov    al,BYTE PTR [eax]
c00246ad:	0f b6 c0             	movzx  eax,al
c00246b0:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00246b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00246b6:	66 8b 84 00 a0 d2 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2d60]
c00246be:	0f b7 c0             	movzx  eax,ax
c00246c1:	83 e0 02             	and    eax,0x2
c00246c4:	85 c0                	test   eax,eax
c00246c6:	74 04                	je     c00246cc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00246c8:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00246cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00246cf:	66 8b 84 00 a0 d2 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2d60]
c00246d7:	0f b7 c0             	movzx  eax,ax
c00246da:	83 e0 08             	and    eax,0x8
c00246dd:	85 c0                	test   eax,eax
c00246df:	74 16                	je     c00246f7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00246e1:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00246e5:	eb 10                	jmp    c00246f7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00246e7:	83 ec 0c             	sub    esp,0xc
c00246ea:	68 68 b6 02 c0       	push   0xc002b668
c00246ef:	e8 a7 51 ff ff       	call   c001989b <Krnl::panic(char const*)>
c00246f4:	83 c4 10             	add    esp,0x10
c00246f7:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00246fb:	a1 a0 ec 02 c0       	mov    eax,ds:0xc002eca0
c0024700:	83 ec 08             	sub    esp,0x8
c0024703:	50                   	push   eax
c0024704:	68 a0 b6 02 c0       	push   0xc002b6a0
c0024709:	e8 73 e0 fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c002470e:	83 c4 10             	add    esp,0x10
c0024711:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0024718:	a1 a0 ec 02 c0       	mov    eax,ds:0xc002eca0
c002471d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0024720:	7d 67                	jge    c0024789 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024722:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024725:	8b 04 85 c0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1340]
c002472c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002472f:	83 ec 08             	sub    esp,0x8
c0024732:	52                   	push   edx
c0024733:	50                   	push   eax
c0024734:	e8 d1 fc ff ff       	call   c002440a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0024739:	83 c4 10             	add    esp,0x10
c002473c:	84 c0                	test   al,al
c002473e:	74 44                	je     c0024784 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0024740:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024743:	8b 1c 85 c0 ec 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd1340]
c002474a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002474e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024751:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0024755:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024758:	83 c0 20             	add    eax,0x20
c002475b:	0f b6 f0             	movzx  esi,al
c002475e:	b8 00 00 00 00       	mov    eax,0x0
c0024763:	99                   	cdq    
c0024764:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024767:	0f b6 c9             	movzx  ecx,cl
c002476a:	83 ec 04             	sub    esp,0x4
c002476d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0024770:	57                   	push   edi
c0024771:	56                   	push   esi
c0024772:	52                   	push   edx
c0024773:	50                   	push   eax
c0024774:	51                   	push   ecx
c0024775:	53                   	push   ebx
c0024776:	e8 0b fe ff ff       	call   c0024586 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002477b:	83 c4 20             	add    esp,0x20
c002477e:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0024782:	eb 05                	jmp    c0024789 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024784:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0024787:	eb 8f                	jmp    c0024718 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0024789:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002478c:	83 f0 01             	xor    eax,0x1
c002478f:	84 c0                	test   al,al
c0024791:	74 10                	je     c00247a3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0024793:	83 ec 0c             	sub    esp,0xc
c0024796:	68 b7 b6 02 c0       	push   0xc002b6b7
c002479b:	e8 fb 50 ff ff       	call   c001989b <Krnl::panic(char const*)>
c00247a0:	83 c4 10             	add    esp,0x10
c00247a3:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00247a7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00247ae:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00247b2:	7f 65                	jg     c0024819 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00247b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247b7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00247ba:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00247c1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00247c4:	01 ca                	add    edx,ecx
c00247c6:	83 c2 54             	add    edx,0x54
c00247c9:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00247cd:	85 c0                	test   eax,eax
c00247cf:	75 43                	jne    c0024814 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00247d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247d4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00247d7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00247de:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00247e1:	01 ca                	add    edx,ecx
c00247e3:	8d 4a 54             	lea    ecx,[edx+0x54]
c00247e6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00247e9:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00247ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00247f3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00247fa:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00247fd:	01 ca                	add    edx,ecx
c00247ff:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0024805:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0024808:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002480c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002480f:	83 e8 20             	sub    eax,0x20
c0024812:	eb 1a                	jmp    c002482e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0024814:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0024817:	eb 95                	jmp    c00247ae <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0024819:	83 ec 0c             	sub    esp,0xc
c002481c:	68 c4 b6 02 c0       	push   0xc002b6c4
c0024821:	e8 75 50 ff ff       	call   c001989b <Krnl::panic(char const*)>
c0024826:	83 c4 10             	add    esp,0x10
c0024829:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002482e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024831:	5b                   	pop    ebx
c0024832:	5e                   	pop    esi
c0024833:	5f                   	pop    edi
c0024834:	5d                   	pop    ebp
c0024835:	c3                   	ret    

c0024836 <PIC::disable()>:
c0024836:	55                   	push   ebp
c0024837:	89 e5                	mov    ebp,esp
c0024839:	83 ec 10             	sub    esp,0x10
c002483c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0024842:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0024846:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024849:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002484d:	ee                   	out    dx,al
c002484e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0024854:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0024858:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002485b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002485f:	ee                   	out    dx,al
c0024860:	90                   	nop
c0024861:	c9                   	leave  
c0024862:	c3                   	ret    
c0024863:	90                   	nop

c0024864 <PIC::close(int, int, void*)>:
c0024864:	55                   	push   ebp
c0024865:	89 e5                	mov    ebp,esp
c0024867:	83 ec 08             	sub    esp,0x8
c002486a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002486d:	8b 00                	mov    eax,DWORD PTR [eax]
c002486f:	83 c0 3c             	add    eax,0x3c
c0024872:	8b 00                	mov    eax,DWORD PTR [eax]
c0024874:	83 ec 0c             	sub    esp,0xc
c0024877:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002487a:	ff d0                	call   eax
c002487c:	83 c4 10             	add    esp,0x10
c002487f:	b8 00 00 00 00       	mov    eax,0x0
c0024884:	c9                   	leave  
c0024885:	c3                   	ret    

c0024886 <PIC::PIC()>:
c0024886:	83 ec 0c             	sub    esp,0xc
c0024889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002488d:	83 ec 08             	sub    esp,0x8
c0024890:	68 70 b7 02 c0       	push   0xc002b770
c0024895:	50                   	push   eax
c0024896:	e8 1d fc fe ff       	call   c00144b8 <InterruptController::InterruptController(char const*)>
c002489b:	83 c4 10             	add    esp,0x10
c002489e:	ba 9c b7 02 c0       	mov    edx,0xc002b79c
c00248a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248a7:	89 10                	mov    DWORD PTR [eax],edx
c00248a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248ad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248b3:	0f b6 d0             	movzx  edx,al
c00248b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248ba:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00248c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248cb:	0f b6 d0             	movzx  edx,al
c00248ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248d2:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00248d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248db:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248e1:	8d 50 01             	lea    edx,[eax+0x1]
c00248e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00248e8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00248ee:	0f b6 d0             	movzx  edx,al
c00248f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248f5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00248f9:	83 e1 3f             	and    ecx,0x3f
c00248fc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024904:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002490a:	0f b6 d0             	movzx  edx,al
c002490d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024911:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0024918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002491c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024922:	0f b6 d0             	movzx  edx,al
c0024925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024929:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002492e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024932:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024938:	8d 50 01             	lea    edx,[eax+0x1]
c002493b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002493f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024945:	0f b6 d0             	movzx  edx,al
c0024948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002494c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024950:	83 e1 3f             	and    ecx,0x3f
c0024953:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024957:	90                   	nop
c0024958:	83 c4 0c             	add    esp,0xc
c002495b:	c3                   	ret    

c002495c <PIC::ioWait()>:
c002495c:	eb 00                	jmp    c002495e <PIC::ioWait()+0x2>
c002495e:	eb 00                	jmp    c0024960 <PIC::ioWait()+0x4>
c0024960:	90                   	nop
c0024961:	c3                   	ret    

c0024962 <PIC::getIRQReg(int)>:
c0024962:	55                   	push   ebp
c0024963:	89 e5                	mov    ebp,esp
c0024965:	83 ec 10             	sub    esp,0x10
c0024968:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002496b:	0f b6 c0             	movzx  eax,al
c002496e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024974:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0024977:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002497a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002497e:	ee                   	out    dx,al
c002497f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024982:	0f b6 c0             	movzx  eax,al
c0024985:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002498b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002498e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024991:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024995:	ee                   	out    dx,al
c0024996:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002499c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00249a0:	89 c2                	mov    edx,eax
c00249a2:	ec                   	in     al,dx
c00249a3:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00249a6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00249a9:	0f b6 c0             	movzx  eax,al
c00249ac:	c1 e0 08             	shl    eax,0x8
c00249af:	89 c1                	mov    ecx,eax
c00249b1:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00249b7:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00249bb:	89 c2                	mov    edx,eax
c00249bd:	ec                   	in     al,dx
c00249be:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00249c1:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00249c4:	0f b6 c0             	movzx  eax,al
c00249c7:	09 c8                	or     eax,ecx
c00249c9:	c9                   	leave  
c00249ca:	c3                   	ret    
c00249cb:	90                   	nop

c00249cc <PIC::eoi(unsigned char)>:
c00249cc:	55                   	push   ebp
c00249cd:	89 e5                	mov    ebp,esp
c00249cf:	83 ec 14             	sub    esp,0x14
c00249d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00249d5:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00249d8:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00249dc:	75 1e                	jne    c00249fc <PIC::eoi(unsigned char)+0x30>
c00249de:	6a 0b                	push   0xb
c00249e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00249e3:	e8 7a ff ff ff       	call   c0024962 <PIC::getIRQReg(int)>
c00249e8:	83 c4 08             	add    esp,0x8
c00249eb:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00249ef:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00249f3:	25 80 00 00 00       	and    eax,0x80
c00249f8:	85 c0                	test   eax,eax
c00249fa:	74 5f                	je     c0024a5b <PIC::eoi(unsigned char)+0x8f>
c00249fc:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0024a00:	75 2d                	jne    c0024a2f <PIC::eoi(unsigned char)+0x63>
c0024a02:	6a 0b                	push   0xb
c0024a04:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a07:	e8 56 ff ff ff       	call   c0024962 <PIC::getIRQReg(int)>
c0024a0c:	83 c4 08             	add    esp,0x8
c0024a0f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0024a13:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024a16:	66 85 c0             	test   ax,ax
c0024a19:	78 14                	js     c0024a2f <PIC::eoi(unsigned char)+0x63>
c0024a1b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0024a21:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0024a25:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024a28:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024a2c:	ee                   	out    dx,al
c0024a2d:	eb 2d                	jmp    c0024a5c <PIC::eoi(unsigned char)+0x90>
c0024a2f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024a33:	76 12                	jbe    c0024a47 <PIC::eoi(unsigned char)+0x7b>
c0024a35:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024a3b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0024a3f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024a42:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024a46:	ee                   	out    dx,al
c0024a47:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024a4d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0024a51:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024a54:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024a58:	ee                   	out    dx,al
c0024a59:	eb 01                	jmp    c0024a5c <PIC::eoi(unsigned char)+0x90>
c0024a5b:	90                   	nop
c0024a5c:	c9                   	leave  
c0024a5d:	c3                   	ret    

c0024a5e <PIC::remap()>:
c0024a5e:	55                   	push   ebp
c0024a5f:	89 e5                	mov    ebp,esp
c0024a61:	83 ec 48             	sub    esp,0x48
c0024a64:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0024a6b:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0024a72:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0024a78:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0024a7b:	89 c2                	mov    edx,eax
c0024a7d:	ec                   	in     al,dx
c0024a7e:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0024a81:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0024a84:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0024a87:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0024a8d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0024a90:	89 c2                	mov    edx,eax
c0024a92:	ec                   	in     al,dx
c0024a93:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0024a96:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0024a99:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0024a9c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0024aa2:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0024aa6:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0024aa9:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0024aac:	ee                   	out    dx,al
c0024aad:	83 ec 0c             	sub    esp,0xc
c0024ab0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ab3:	e8 a4 fe ff ff       	call   c002495c <PIC::ioWait()>
c0024ab8:	83 c4 10             	add    esp,0x10
c0024abb:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0024ac1:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0024ac5:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0024ac8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024acb:	ee                   	out    dx,al
c0024acc:	83 ec 0c             	sub    esp,0xc
c0024acf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ad2:	e8 85 fe ff ff       	call   c002495c <PIC::ioWait()>
c0024ad7:	83 c4 10             	add    esp,0x10
c0024ada:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024add:	0f b6 c0             	movzx  eax,al
c0024ae0:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0024ae6:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0024ae9:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0024aec:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0024aef:	ee                   	out    dx,al
c0024af0:	83 ec 0c             	sub    esp,0xc
c0024af3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024af6:	e8 61 fe ff ff       	call   c002495c <PIC::ioWait()>
c0024afb:	83 c4 10             	add    esp,0x10
c0024afe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024b01:	0f b6 c0             	movzx  eax,al
c0024b04:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0024b0a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0024b0d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0024b10:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024b13:	ee                   	out    dx,al
c0024b14:	83 ec 0c             	sub    esp,0xc
c0024b17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b1a:	e8 3d fe ff ff       	call   c002495c <PIC::ioWait()>
c0024b1f:	83 c4 10             	add    esp,0x10
c0024b22:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0024b28:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0024b2c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0024b2f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0024b32:	ee                   	out    dx,al
c0024b33:	83 ec 0c             	sub    esp,0xc
c0024b36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b39:	e8 1e fe ff ff       	call   c002495c <PIC::ioWait()>
c0024b3e:	83 c4 10             	add    esp,0x10
c0024b41:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0024b47:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0024b4b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0024b4e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024b51:	ee                   	out    dx,al
c0024b52:	83 ec 0c             	sub    esp,0xc
c0024b55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b58:	e8 ff fd ff ff       	call   c002495c <PIC::ioWait()>
c0024b5d:	83 c4 10             	add    esp,0x10
c0024b60:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024b66:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0024b6a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0024b6d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024b70:	ee                   	out    dx,al
c0024b71:	83 ec 0c             	sub    esp,0xc
c0024b74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b77:	e8 e0 fd ff ff       	call   c002495c <PIC::ioWait()>
c0024b7c:	83 c4 10             	add    esp,0x10
c0024b7f:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0024b85:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024b89:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0024b8c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024b8f:	ee                   	out    dx,al
c0024b90:	83 ec 0c             	sub    esp,0xc
c0024b93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b96:	e8 c1 fd ff ff       	call   c002495c <PIC::ioWait()>
c0024b9b:	83 c4 10             	add    esp,0x10
c0024b9e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0024ba2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024ba8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0024bab:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0024bae:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024bb1:	ee                   	out    dx,al
c0024bb2:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024bb6:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0024bbc:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0024bbf:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0024bc2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024bc5:	ee                   	out    dx,al
c0024bc6:	90                   	nop
c0024bc7:	c9                   	leave  
c0024bc8:	c3                   	ret    
c0024bc9:	90                   	nop

c0024bca <PIC::open(int, int, void*)>:
c0024bca:	55                   	push   ebp
c0024bcb:	89 e5                	mov    ebp,esp
c0024bcd:	83 ec 18             	sub    esp,0x18
c0024bd0:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0024bd6:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0024bda:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024bdd:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024be1:	ee                   	out    dx,al
c0024be2:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0024be8:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0024bec:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024bef:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024bf3:	ee                   	out    dx,al
c0024bf4:	83 ec 0c             	sub    esp,0xc
c0024bf7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024bfa:	e8 5f fe ff ff       	call   c0024a5e <PIC::remap()>
c0024bff:	83 c4 10             	add    esp,0x10
c0024c02:	b8 00 00 00 00       	mov    eax,0x0
c0024c07:	c9                   	leave  
c0024c08:	c3                   	ret    
c0024c09:	90                   	nop

c0024c0a <APICTimer::close(int, int, void*)>:
c0024c0a:	b8 00 00 00 00       	mov    eax,0x0
c0024c0f:	c3                   	ret    

c0024c10 <apicTimerHandler(regs*, void*)>:
c0024c10:	83 ec 0c             	sub    esp,0xc
c0024c13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c17:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c19:	99                   	cdq    
c0024c1a:	52                   	push   edx
c0024c1b:	50                   	push   eax
c0024c1c:	6a 00                	push   0x0
c0024c1e:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024c23:	e8 84 07 00 00       	call   c00253ac <__udivdi3>
c0024c28:	83 c4 10             	add    esp,0x10
c0024c2b:	83 ec 08             	sub    esp,0x8
c0024c2e:	52                   	push   edx
c0024c2f:	50                   	push   eax
c0024c30:	e8 82 17 ff ff       	call   c00163b7 <timerHandler(unsigned long long)>
c0024c35:	83 c4 10             	add    esp,0x10
c0024c38:	90                   	nop
c0024c39:	83 c4 0c             	add    esp,0xc
c0024c3c:	c3                   	ret    
c0024c3d:	90                   	nop

c0024c3e <APICTimer::write(int)>:
c0024c3e:	53                   	push   ebx
c0024c3f:	83 ec 28             	sub    esp,0x28
c0024c42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024c46:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0024c4a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024c50:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0024c55:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c5b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024c61:	83 ec 0c             	sub    esp,0xc
c0024c64:	50                   	push   eax
c0024c65:	e8 de f4 ff ff       	call   c0024148 <APIC::getBase()>
c0024c6a:	83 c4 10             	add    esp,0x10
c0024c6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c71:	a1 d0 cf 02 c0       	mov    eax,ds:0xc002cfd0
c0024c76:	8b 15 d4 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cfd4
c0024c7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c80:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0024c84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c88:	05 e0 03 00 00       	add    eax,0x3e0
c0024c8d:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024c93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c97:	05 80 03 00 00       	add    eax,0x380
c0024c9c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0024ca2:	fb                   	sti    
c0024ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ca7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024cab:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0024cb0:	83 d2 00             	adc    edx,0x0
c0024cb3:	89 c1                	mov    ecx,eax
c0024cb5:	89 d3                	mov    ebx,edx
c0024cb7:	a1 d0 cf 02 c0       	mov    eax,ds:0xc002cfd0
c0024cbc:	8b 15 d4 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cfd4
c0024cc2:	39 c8                	cmp    eax,ecx
c0024cc4:	89 d0                	mov    eax,edx
c0024cc6:	19 d8                	sbb    eax,ebx
c0024cc8:	73 02                	jae    c0024ccc <APICTimer::write(int)+0x8e>
c0024cca:	eb d7                	jmp    c0024ca3 <APICTimer::write(int)+0x65>
c0024ccc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cd0:	05 20 03 00 00       	add    eax,0x320
c0024cd5:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0024cdb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cdf:	05 90 03 00 00       	add    eax,0x390
c0024ce4:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ce6:	f7 d0                	not    eax
c0024ce8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cec:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024cf0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024cf4:	ba 00 00 00 00       	mov    edx,0x0
c0024cf9:	f7 f3                	div    ebx
c0024cfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024cff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d03:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024d09:	0d 00 00 02 00       	or     eax,0x20000
c0024d0e:	89 c2                	mov    edx,eax
c0024d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d14:	05 20 03 00 00       	add    eax,0x320
c0024d19:	89 10                	mov    DWORD PTR [eax],edx
c0024d1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d1f:	05 e0 03 00 00       	add    eax,0x3e0
c0024d24:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024d2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d2e:	05 80 03 00 00       	add    eax,0x380
c0024d33:	89 c2                	mov    edx,eax
c0024d35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024d39:	89 02                	mov    DWORD PTR [edx],eax
c0024d3b:	90                   	nop
c0024d3c:	83 c4 28             	add    esp,0x28
c0024d3f:	5b                   	pop    ebx
c0024d40:	c3                   	ret    
c0024d41:	90                   	nop

c0024d42 <APICTimer::open(int, int, void*)>:
c0024d42:	57                   	push   edi
c0024d43:	56                   	push   esi
c0024d44:	53                   	push   ebx
c0024d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d49:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d4b:	83 c0 24             	add    eax,0x24
c0024d4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d50:	83 ec 08             	sub    esp,0x8
c0024d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d5b:	ff d0                	call   eax
c0024d5d:	83 c4 10             	add    esp,0x10
c0024d60:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0024d65:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d6b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024d71:	83 ec 0c             	sub    esp,0xc
c0024d74:	50                   	push   eax
c0024d75:	e8 ce f3 ff ff       	call   c0024148 <APIC::getBase()>
c0024d7a:	83 c4 10             	add    esp,0x10
c0024d7d:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0024d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d87:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024d8d:	0f b6 f8             	movzx  edi,al
c0024d90:	89 d0                	mov    eax,edx
c0024d92:	ba 00 00 00 00       	mov    edx,0x0
c0024d97:	89 c1                	mov    ecx,eax
c0024d99:	80 e5 ff             	and    ch,0xff
c0024d9c:	89 cb                	mov    ebx,ecx
c0024d9e:	0f b6 f2             	movzx  esi,dl
c0024da1:	89 d8                	mov    eax,ebx
c0024da3:	89 f2                	mov    edx,esi
c0024da5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024da9:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024dac:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024db0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024db4:	83 e0 00             	and    eax,0x0
c0024db7:	09 d0                	or     eax,edx
c0024db9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dc1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024dc7:	8d 50 01             	lea    edx,[eax+0x1]
c0024dca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024dce:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024dd4:	0f b6 d0             	movzx  edx,al
c0024dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ddb:	83 c2 08             	add    edx,0x8
c0024dde:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024de2:	0f b6 c9             	movzx  ecx,cl
c0024de5:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024deb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024df3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024df7:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024e05:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0024e0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024e0f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024e15:	83 ec 0c             	sub    esp,0xc
c0024e18:	51                   	push   ecx
c0024e19:	6a 01                	push   0x1
c0024e1b:	68 10 4c 02 c0       	push   0xc0024c10
c0024e20:	52                   	push   edx
c0024e21:	50                   	push   eax
c0024e22:	e8 cd ec fe ff       	call   c0013af4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024e27:	83 c4 20             	add    esp,0x20
c0024e2a:	89 c2                	mov    edx,eax
c0024e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e30:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024e36:	b8 00 00 00 00       	mov    eax,0x0
c0024e3b:	5b                   	pop    ebx
c0024e3c:	5e                   	pop    esi
c0024e3d:	5f                   	pop    edi
c0024e3e:	c3                   	ret    
c0024e3f:	90                   	nop

c0024e40 <APICTimer::APICTimer()>:
c0024e40:	83 ec 0c             	sub    esp,0xc
c0024e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e47:	83 ec 08             	sub    esp,0x8
c0024e4a:	68 dc b7 02 c0       	push   0xc002b7dc
c0024e4f:	50                   	push   eax
c0024e50:	e8 d3 14 ff ff       	call   c0016328 <Timer::Timer(char const*)>
c0024e55:	83 c4 10             	add    esp,0x10
c0024e58:	ba f0 b7 02 c0       	mov    edx,0xc002b7f0
c0024e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e61:	89 10                	mov    DWORD PTR [eax],edx
c0024e63:	90                   	nop
c0024e64:	83 c4 0c             	add    esp,0xc
c0024e67:	c3                   	ret    

c0024e68 <PIT::write(int)>:
c0024e68:	83 ec 10             	sub    esp,0x10
c0024e6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024e73:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024e79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024e7d:	a3 e4 ec 02 c0       	mov    ds:0xc002ece4,eax
c0024e82:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0024e87:	99                   	cdq    
c0024e88:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0024e8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024e90:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0024e97:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0024e9c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0024ea0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0024ea5:	ee                   	out    dx,al
c0024ea6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024eaa:	0f b6 c0             	movzx  eax,al
c0024ead:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0024eb4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0024eb8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0024ebc:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0024ec1:	ee                   	out    dx,al
c0024ec2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024ec6:	c1 f8 08             	sar    eax,0x8
c0024ec9:	0f b6 c0             	movzx  eax,al
c0024ecc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0024ed3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0024ed7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0024edb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0024ee0:	ee                   	out    dx,al
c0024ee1:	90                   	nop
c0024ee2:	83 c4 10             	add    esp,0x10
c0024ee5:	c3                   	ret    

c0024ee6 <pitHandler(regs*, void*)>:
c0024ee6:	83 ec 0c             	sub    esp,0xc
c0024ee9:	a1 e4 ec 02 c0       	mov    eax,ds:0xc002ece4
c0024eee:	99                   	cdq    
c0024eef:	52                   	push   edx
c0024ef0:	50                   	push   eax
c0024ef1:	6a 00                	push   0x0
c0024ef3:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024ef8:	e8 af 04 00 00       	call   c00253ac <__udivdi3>
c0024efd:	83 c4 10             	add    esp,0x10
c0024f00:	83 ec 08             	sub    esp,0x8
c0024f03:	52                   	push   edx
c0024f04:	50                   	push   eax
c0024f05:	e8 ad 14 ff ff       	call   c00163b7 <timerHandler(unsigned long long)>
c0024f0a:	83 c4 10             	add    esp,0x10
c0024f0d:	90                   	nop
c0024f0e:	83 c4 0c             	add    esp,0xc
c0024f11:	c3                   	ret    

c0024f12 <PIT::open(int, int, void*)>:
c0024f12:	83 ec 0c             	sub    esp,0xc
c0024f15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f19:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f1b:	83 c0 24             	add    eax,0x24
c0024f1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f20:	83 ec 08             	sub    esp,0x8
c0024f23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f2b:	ff d0                	call   eax
c0024f2d:	83 c4 10             	add    esp,0x10
c0024f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f34:	83 ec 0c             	sub    esp,0xc
c0024f37:	6a 00                	push   0x0
c0024f39:	6a 01                	push   0x1
c0024f3b:	68 e6 4e 02 c0       	push   0xc0024ee6
c0024f40:	6a 00                	push   0x0
c0024f42:	50                   	push   eax
c0024f43:	e8 ac eb fe ff       	call   c0013af4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024f48:	83 c4 20             	add    esp,0x20
c0024f4b:	89 c2                	mov    edx,eax
c0024f4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f51:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024f57:	b8 00 00 00 00       	mov    eax,0x0
c0024f5c:	83 c4 0c             	add    esp,0xc
c0024f5f:	c3                   	ret    

c0024f60 <PIT::close(int, int, void*)>:
c0024f60:	83 ec 0c             	sub    esp,0xc
c0024f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f67:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0024f71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f75:	6a 01                	push   0x1
c0024f77:	68 e6 4e 02 c0       	push   0xc0024ee6
c0024f7c:	6a 00                	push   0x0
c0024f7e:	50                   	push   eax
c0024f7f:	e8 ae eb fe ff       	call   c0013b32 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0024f84:	83 c4 10             	add    esp,0x10
c0024f87:	b8 00 00 00 00       	mov    eax,0x0
c0024f8c:	83 c4 0c             	add    esp,0xc
c0024f8f:	c3                   	ret    

c0024f90 <PIT::PIT()>:
c0024f90:	83 ec 0c             	sub    esp,0xc
c0024f93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f97:	83 ec 08             	sub    esp,0x8
c0024f9a:	68 18 b8 02 c0       	push   0xc002b818
c0024f9f:	50                   	push   eax
c0024fa0:	e8 83 13 ff ff       	call   c0016328 <Timer::Timer(char const*)>
c0024fa5:	83 c4 10             	add    esp,0x10
c0024fa8:	ba 40 b8 02 c0       	mov    edx,0xc002b840
c0024fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fb1:	89 10                	mov    DWORD PTR [eax],edx
c0024fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fb7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024fbd:	0f b6 d0             	movzx  edx,al
c0024fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fc4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0024fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fcf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024fd5:	0f b6 d0             	movzx  edx,al
c0024fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fdc:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0024fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fe5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024feb:	8d 50 01             	lea    edx,[eax+0x1]
c0024fee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024ff2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024ff8:	0f b6 d0             	movzx  edx,al
c0024ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fff:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025003:	83 e1 3f             	and    ecx,0x3f
c0025006:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002500a:	90                   	nop
c002500b:	83 c4 0c             	add    esp,0xc
c002500e:	c3                   	ret    
c002500f:	90                   	nop

c0025010 <avxDetect>:
c0025010:	b8 00 00 00 00       	mov    eax,0x0
c0025015:	c3                   	ret    

c0025016 <avxSave>:
c0025016:	c3                   	ret    

c0025017 <avxLoad>:
c0025017:	c3                   	ret    

c0025018 <avxInit>:
c0025018:	c3                   	ret    

c0025019 <avxClose>:
c0025019:	c3                   	ret    

c002501a <wouldSheSayYes>:
c002501a:	c3                   	ret    
c002501b:	49                   	dec    ecx
c002501c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025020:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025024:	75 20                	jne    c0025046 <sseDetect.noSSE+0x1>
c0025026:	4e                   	dec    esi
c0025027:	79 61                	jns    c002508a <x87Detect+0x14>
c0025029:	68 2e 2e 2e 00       	push   0x2e2e2e
c002502e:	66 90                	xchg   ax,ax

c0025030 <absolutelyNoChanceInHell>:
c0025030:	b8 01 00 00 00       	mov    eax,0x1
c0025035:	0f a2                	cpuid  
c0025037:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002503d:	74 06                	je     c0025045 <sseDetect.noSSE>
c002503f:	b8 01 00 00 00       	mov    eax,0x1
c0025044:	c3                   	ret    

c0025045 <sseDetect.noSSE>:
c0025045:	31 c0                	xor    eax,eax
c0025047:	c3                   	ret    

c0025048 <sseSave>:
c0025048:	0f ae 44 24 08       	fxsave [esp+0x8]
c002504d:	c3                   	ret    

c002504e <sseLoad>:
c002504e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025053:	c3                   	ret    

c0025054 <sseInit>:
c0025054:	e8 43 00 00 00       	call   c002509c <x87Init>
c0025059:	0f 20 e0             	mov    eax,cr4
c002505c:	66 0d 00 06          	or     ax,0x600
c0025060:	0f 22 e0             	mov    cr4,eax
c0025063:	c3                   	ret    

c0025064 <sseClose>:
c0025064:	c3                   	ret    
c0025065:	66 90                	xchg   ax,ax
c0025067:	66 90                	xchg   ax,ax
c0025069:	66 90                	xchg   ax,ax
c002506b:	66 90                	xchg   ax,ax
c002506d:	66 90                	xchg   ax,ax
c002506f:	90                   	nop

c0025070 <value_37F>:
c0025070:	7f 03                	jg     c0025075 <value_37A+0x1>

c0025072 <value_37E>:
c0025072:	7e 03                	jle    c0025077 <x87Detect+0x1>

c0025074 <value_37A>:
c0025074:	7a 03                	jp     c0025079 <x87Detect+0x3>

c0025076 <x87Detect>:
c0025076:	b8 01 00 00 00       	mov    eax,0x1
c002507b:	0f a2                	cpuid  
c002507d:	f7 c2 01 00 00 00    	test   edx,0x1
c0025083:	74 06                	je     c002508b <x87Detect.nox87>
c0025085:	b8 01 00 00 00       	mov    eax,0x1
c002508a:	c3                   	ret    

c002508b <x87Detect.nox87>:
c002508b:	b8 00 00 00 00       	mov    eax,0x0
c0025090:	c3                   	ret    

c0025091 <x87Save>:
c0025091:	9b dd 74 24 08       	fsave  [esp+0x8]
c0025096:	c3                   	ret    

c0025097 <x87Load>:
c0025097:	dd 64 24 08          	frstor [esp+0x8]
c002509b:	c3                   	ret    

c002509c <x87Init>:
c002509c:	9b db e3             	finit  
c002509f:	0f 20 c0             	mov    eax,cr0
c00250a2:	66 25 fb ff          	and    ax,0xfffb
c00250a6:	66 0d 22 00          	or     ax,0x22
c00250aa:	0f 22 c0             	mov    cr0,eax
c00250ad:	0f 06                	clts   
c00250af:	d9 2d 74 50 02 c0    	fldcw  WORD PTR ds:0xc0025074
c00250b5:	c3                   	ret    

c00250b6 <x87Close>:
c00250b6:	c3                   	ret    
c00250b7:	90                   	nop

c00250b8 <__do_global_ctors_aux>:
c00250b8:	a1 ac 7b 02 c0       	mov    eax,ds:0xc0027bac
c00250bd:	83 f8 ff             	cmp    eax,0xffffffff
c00250c0:	74 1a                	je     c00250dc <__do_global_ctors_aux+0x24>
c00250c2:	55                   	push   ebp
c00250c3:	89 e5                	mov    ebp,esp
c00250c5:	53                   	push   ebx
c00250c6:	52                   	push   edx
c00250c7:	bb ac 7b 02 c0       	mov    ebx,0xc0027bac
c00250cc:	ff d0                	call   eax
c00250ce:	83 eb 04             	sub    ebx,0x4
c00250d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250d3:	83 f8 ff             	cmp    eax,0xffffffff
c00250d6:	75 f4                	jne    c00250cc <__do_global_ctors_aux+0x14>
c00250d8:	58                   	pop    eax
c00250d9:	5b                   	pop    ebx
c00250da:	5d                   	pop    ebp
c00250db:	c3                   	ret    
c00250dc:	c3                   	ret    
c00250dd:	66 90                	xchg   ax,ax
c00250df:	90                   	nop

c00250e0 <__divdi3>:
c00250e0:	55                   	push   ebp
c00250e1:	57                   	push   edi
c00250e2:	56                   	push   esi
c00250e3:	53                   	push   ebx
c00250e4:	83 ec 1c             	sub    esp,0x1c
c00250e7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00250eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00250ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00250f2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00250f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00250fa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00250fe:	85 db                	test   ebx,ebx
c0025100:	0f 88 8e 00 00 00    	js     c0025194 <__divdi3+0xb4>
c0025106:	89 dd                	mov    ebp,ebx
c0025108:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025110:	89 d3                	mov    ebx,edx
c0025112:	85 d2                	test   edx,edx
c0025114:	79 0d                	jns    c0025123 <__divdi3+0x43>
c0025116:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002511a:	f7 d8                	neg    eax
c002511c:	83 d2 00             	adc    edx,0x0
c002511f:	f7 da                	neg    edx
c0025121:	89 d3                	mov    ebx,edx
c0025123:	89 c7                	mov    edi,eax
c0025125:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025128:	85 db                	test   ebx,ebx
c002512a:	75 48                	jne    c0025174 <__divdi3+0x94>
c002512c:	39 ef                	cmp    edi,ebp
c002512e:	76 24                	jbe    c0025154 <__divdi3+0x74>
c0025130:	89 ea                	mov    edx,ebp
c0025132:	f7 f7                	div    edi
c0025134:	89 c1                	mov    ecx,eax
c0025136:	31 f6                	xor    esi,esi
c0025138:	89 c8                	mov    eax,ecx
c002513a:	89 f2                	mov    edx,esi
c002513c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025140:	85 c9                	test   ecx,ecx
c0025142:	74 07                	je     c002514b <__divdi3+0x6b>
c0025144:	f7 d8                	neg    eax
c0025146:	83 d2 00             	adc    edx,0x0
c0025149:	f7 da                	neg    edx
c002514b:	83 c4 1c             	add    esp,0x1c
c002514e:	5b                   	pop    ebx
c002514f:	5e                   	pop    esi
c0025150:	5f                   	pop    edi
c0025151:	5d                   	pop    ebp
c0025152:	c3                   	ret    
c0025153:	90                   	nop
c0025154:	85 ff                	test   edi,edi
c0025156:	75 0b                	jne    c0025163 <__divdi3+0x83>
c0025158:	b8 01 00 00 00       	mov    eax,0x1
c002515d:	31 d2                	xor    edx,edx
c002515f:	f7 f3                	div    ebx
c0025161:	89 c7                	mov    edi,eax
c0025163:	31 d2                	xor    edx,edx
c0025165:	89 e8                	mov    eax,ebp
c0025167:	f7 f7                	div    edi
c0025169:	89 c6                	mov    esi,eax
c002516b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002516e:	f7 f7                	div    edi
c0025170:	89 c1                	mov    ecx,eax
c0025172:	eb c4                	jmp    c0025138 <__divdi3+0x58>
c0025174:	39 eb                	cmp    ebx,ebp
c0025176:	77 3c                	ja     c00251b4 <__divdi3+0xd4>
c0025178:	0f bd f3             	bsr    esi,ebx
c002517b:	83 f6 1f             	xor    esi,0x1f
c002517e:	75 40                	jne    c00251c0 <__divdi3+0xe0>
c0025180:	39 eb                	cmp    ebx,ebp
c0025182:	72 09                	jb     c002518d <__divdi3+0xad>
c0025184:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0025187:	0f 87 97 00 00 00    	ja     c0025224 <__divdi3+0x144>
c002518d:	b9 01 00 00 00       	mov    ecx,0x1
c0025192:	eb a4                	jmp    c0025138 <__divdi3+0x58>
c0025194:	f7 d9                	neg    ecx
c0025196:	83 d3 00             	adc    ebx,0x0
c0025199:	f7 db                	neg    ebx
c002519b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002519e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00251a2:	89 dd                	mov    ebp,ebx
c00251a4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00251ac:	e9 5f ff ff ff       	jmp    c0025110 <__divdi3+0x30>
c00251b1:	8d 76 00             	lea    esi,[esi+0x0]
c00251b4:	31 f6                	xor    esi,esi
c00251b6:	31 c9                	xor    ecx,ecx
c00251b8:	e9 7b ff ff ff       	jmp    c0025138 <__divdi3+0x58>
c00251bd:	8d 76 00             	lea    esi,[esi+0x0]
c00251c0:	b8 20 00 00 00       	mov    eax,0x20
c00251c5:	29 f0                	sub    eax,esi
c00251c7:	89 f1                	mov    ecx,esi
c00251c9:	d3 e3                	shl    ebx,cl
c00251cb:	89 fa                	mov    edx,edi
c00251cd:	88 c1                	mov    cl,al
c00251cf:	d3 ea                	shr    edx,cl
c00251d1:	09 da                	or     edx,ebx
c00251d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00251d7:	89 f1                	mov    ecx,esi
c00251d9:	d3 e7                	shl    edi,cl
c00251db:	89 eb                	mov    ebx,ebp
c00251dd:	88 c1                	mov    cl,al
c00251df:	d3 eb                	shr    ebx,cl
c00251e1:	89 f1                	mov    ecx,esi
c00251e3:	d3 e5                	shl    ebp,cl
c00251e5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00251e8:	88 c1                	mov    cl,al
c00251ea:	d3 ea                	shr    edx,cl
c00251ec:	09 d5                	or     ebp,edx
c00251ee:	89 e8                	mov    eax,ebp
c00251f0:	89 da                	mov    edx,ebx
c00251f2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00251f6:	89 d3                	mov    ebx,edx
c00251f8:	89 c5                	mov    ebp,eax
c00251fa:	f7 e7                	mul    edi
c00251fc:	39 d3                	cmp    ebx,edx
c00251fe:	72 18                	jb     c0025218 <__divdi3+0x138>
c0025200:	74 0a                	je     c002520c <__divdi3+0x12c>
c0025202:	89 e9                	mov    ecx,ebp
c0025204:	31 f6                	xor    esi,esi
c0025206:	e9 2d ff ff ff       	jmp    c0025138 <__divdi3+0x58>
c002520b:	90                   	nop
c002520c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002520f:	89 f1                	mov    ecx,esi
c0025211:	d3 e7                	shl    edi,cl
c0025213:	39 c7                	cmp    edi,eax
c0025215:	73 eb                	jae    c0025202 <__divdi3+0x122>
c0025217:	90                   	nop
c0025218:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002521b:	31 f6                	xor    esi,esi
c002521d:	e9 16 ff ff ff       	jmp    c0025138 <__divdi3+0x58>
c0025222:	66 90                	xchg   ax,ax
c0025224:	31 c9                	xor    ecx,ecx
c0025226:	e9 0d ff ff ff       	jmp    c0025138 <__divdi3+0x58>
c002522b:	90                   	nop

c002522c <__moddi3>:
c002522c:	55                   	push   ebp
c002522d:	57                   	push   edi
c002522e:	56                   	push   esi
c002522f:	53                   	push   ebx
c0025230:	83 ec 2c             	sub    esp,0x2c
c0025233:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025237:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002523b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002523f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025243:	85 db                	test   ebx,ebx
c0025245:	0f 88 85 00 00 00    	js     c00252d0 <__moddi3+0xa4>
c002524b:	89 de                	mov    esi,ebx
c002524d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025255:	89 d7                	mov    edi,edx
c0025257:	85 d2                	test   edx,edx
c0025259:	79 09                	jns    c0025264 <__moddi3+0x38>
c002525b:	f7 d8                	neg    eax
c002525d:	83 d2 00             	adc    edx,0x0
c0025260:	f7 da                	neg    edx
c0025262:	89 d7                	mov    edi,edx
c0025264:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025268:	89 cd                	mov    ebp,ecx
c002526a:	85 ff                	test   edi,edi
c002526c:	75 52                	jne    c00252c0 <__moddi3+0x94>
c002526e:	89 c3                	mov    ebx,eax
c0025270:	39 f0                	cmp    eax,esi
c0025272:	76 24                	jbe    c0025298 <__moddi3+0x6c>
c0025274:	89 c8                	mov    eax,ecx
c0025276:	89 f2                	mov    edx,esi
c0025278:	f7 f3                	div    ebx
c002527a:	89 d6                	mov    esi,edx
c002527c:	89 f0                	mov    eax,esi
c002527e:	31 d2                	xor    edx,edx
c0025280:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025284:	85 c9                	test   ecx,ecx
c0025286:	74 07                	je     c002528f <__moddi3+0x63>
c0025288:	f7 d8                	neg    eax
c002528a:	83 d2 00             	adc    edx,0x0
c002528d:	f7 da                	neg    edx
c002528f:	83 c4 2c             	add    esp,0x2c
c0025292:	5b                   	pop    ebx
c0025293:	5e                   	pop    esi
c0025294:	5f                   	pop    edi
c0025295:	5d                   	pop    ebp
c0025296:	c3                   	ret    
c0025297:	90                   	nop
c0025298:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002529c:	85 db                	test   ebx,ebx
c002529e:	75 0d                	jne    c00252ad <__moddi3+0x81>
c00252a0:	b8 01 00 00 00       	mov    eax,0x1
c00252a5:	31 d2                	xor    edx,edx
c00252a7:	f7 f7                	div    edi
c00252a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00252ad:	89 f0                	mov    eax,esi
c00252af:	31 d2                	xor    edx,edx
c00252b1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00252b5:	f7 f7                	div    edi
c00252b7:	89 e8                	mov    eax,ebp
c00252b9:	f7 f7                	div    edi
c00252bb:	89 d6                	mov    esi,edx
c00252bd:	eb bd                	jmp    c002527c <__moddi3+0x50>
c00252bf:	90                   	nop
c00252c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00252c4:	39 f7                	cmp    edi,esi
c00252c6:	76 20                	jbe    c00252e8 <__moddi3+0xbc>
c00252c8:	89 c8                	mov    eax,ecx
c00252ca:	89 f2                	mov    edx,esi
c00252cc:	eb b2                	jmp    c0025280 <__moddi3+0x54>
c00252ce:	66 90                	xchg   ax,ax
c00252d0:	f7 d9                	neg    ecx
c00252d2:	83 d3 00             	adc    ebx,0x0
c00252d5:	f7 db                	neg    ebx
c00252d7:	89 de                	mov    esi,ebx
c00252d9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00252e1:	e9 6f ff ff ff       	jmp    c0025255 <__moddi3+0x29>
c00252e6:	66 90                	xchg   ax,ax
c00252e8:	0f bd c7             	bsr    eax,edi
c00252eb:	83 f0 1f             	xor    eax,0x1f
c00252ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00252f2:	75 24                	jne    c0025318 <__moddi3+0xec>
c00252f4:	39 f7                	cmp    edi,esi
c00252f6:	72 06                	jb     c00252fe <__moddi3+0xd2>
c00252f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00252fc:	77 0c                	ja     c002530a <__moddi3+0xde>
c00252fe:	89 e9                	mov    ecx,ebp
c0025300:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0025304:	19 fe                	sbb    esi,edi
c0025306:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002530a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002530e:	89 f2                	mov    edx,esi
c0025310:	e9 6b ff ff ff       	jmp    c0025280 <__moddi3+0x54>
c0025315:	8d 76 00             	lea    esi,[esi+0x0]
c0025318:	b8 20 00 00 00       	mov    eax,0x20
c002531d:	89 c2                	mov    edx,eax
c002531f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025323:	29 da                	sub    edx,ebx
c0025325:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025329:	88 d9                	mov    cl,bl
c002532b:	d3 e7                	shl    edi,cl
c002532d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025331:	88 d1                	mov    cl,dl
c0025333:	d3 e8                	shr    eax,cl
c0025335:	09 c7                	or     edi,eax
c0025337:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002533b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002533f:	89 d8                	mov    eax,ebx
c0025341:	88 d9                	mov    cl,bl
c0025343:	d3 e7                	shl    edi,cl
c0025345:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025349:	89 f3                	mov    ebx,esi
c002534b:	88 d1                	mov    cl,dl
c002534d:	d3 eb                	shr    ebx,cl
c002534f:	89 c7                	mov    edi,eax
c0025351:	88 c1                	mov    cl,al
c0025353:	d3 e6                	shl    esi,cl
c0025355:	89 e8                	mov    eax,ebp
c0025357:	88 d1                	mov    cl,dl
c0025359:	d3 e8                	shr    eax,cl
c002535b:	09 f0                	or     eax,esi
c002535d:	89 f9                	mov    ecx,edi
c002535f:	d3 e5                	shl    ebp,cl
c0025361:	89 da                	mov    edx,ebx
c0025363:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0025367:	89 d3                	mov    ebx,edx
c0025369:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002536d:	89 c6                	mov    esi,eax
c002536f:	89 d1                	mov    ecx,edx
c0025371:	39 d3                	cmp    ebx,edx
c0025373:	72 27                	jb     c002539c <__moddi3+0x170>
c0025375:	74 21                	je     c0025398 <__moddi3+0x16c>
c0025377:	29 f5                	sub    ebp,esi
c0025379:	19 cb                	sbb    ebx,ecx
c002537b:	89 de                	mov    esi,ebx
c002537d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0025381:	d3 e6                	shl    esi,cl
c0025383:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0025387:	89 f9                	mov    ecx,edi
c0025389:	d3 ed                	shr    ebp,cl
c002538b:	09 ee                	or     esi,ebp
c002538d:	89 f0                	mov    eax,esi
c002538f:	d3 eb                	shr    ebx,cl
c0025391:	89 da                	mov    edx,ebx
c0025393:	e9 e8 fe ff ff       	jmp    c0025280 <__moddi3+0x54>
c0025398:	39 c5                	cmp    ebp,eax
c002539a:	73 db                	jae    c0025377 <__moddi3+0x14b>
c002539c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00253a0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00253a4:	89 d1                	mov    ecx,edx
c00253a6:	89 c6                	mov    esi,eax
c00253a8:	eb cd                	jmp    c0025377 <__moddi3+0x14b>
c00253aa:	66 90                	xchg   ax,ax

c00253ac <__udivdi3>:
c00253ac:	55                   	push   ebp
c00253ad:	57                   	push   edi
c00253ae:	56                   	push   esi
c00253af:	53                   	push   ebx
c00253b0:	83 ec 1c             	sub    esp,0x1c
c00253b3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00253b7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00253bb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00253bf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00253c3:	85 d2                	test   edx,edx
c00253c5:	75 41                	jne    c0025408 <__udivdi3+0x5c>
c00253c7:	39 f7                	cmp    edi,esi
c00253c9:	76 15                	jbe    c00253e0 <__udivdi3+0x34>
c00253cb:	89 e8                	mov    eax,ebp
c00253cd:	89 f2                	mov    edx,esi
c00253cf:	f7 f7                	div    edi
c00253d1:	31 db                	xor    ebx,ebx
c00253d3:	89 da                	mov    edx,ebx
c00253d5:	83 c4 1c             	add    esp,0x1c
c00253d8:	5b                   	pop    ebx
c00253d9:	5e                   	pop    esi
c00253da:	5f                   	pop    edi
c00253db:	5d                   	pop    ebp
c00253dc:	c3                   	ret    
c00253dd:	8d 76 00             	lea    esi,[esi+0x0]
c00253e0:	89 f9                	mov    ecx,edi
c00253e2:	85 ff                	test   edi,edi
c00253e4:	75 0b                	jne    c00253f1 <__udivdi3+0x45>
c00253e6:	b8 01 00 00 00       	mov    eax,0x1
c00253eb:	31 d2                	xor    edx,edx
c00253ed:	f7 f7                	div    edi
c00253ef:	89 c1                	mov    ecx,eax
c00253f1:	31 d2                	xor    edx,edx
c00253f3:	89 f0                	mov    eax,esi
c00253f5:	f7 f1                	div    ecx
c00253f7:	89 c3                	mov    ebx,eax
c00253f9:	89 e8                	mov    eax,ebp
c00253fb:	f7 f1                	div    ecx
c00253fd:	89 da                	mov    edx,ebx
c00253ff:	83 c4 1c             	add    esp,0x1c
c0025402:	5b                   	pop    ebx
c0025403:	5e                   	pop    esi
c0025404:	5f                   	pop    edi
c0025405:	5d                   	pop    ebp
c0025406:	c3                   	ret    
c0025407:	90                   	nop
c0025408:	39 f2                	cmp    edx,esi
c002540a:	77 1c                	ja     c0025428 <__udivdi3+0x7c>
c002540c:	0f bd da             	bsr    ebx,edx
c002540f:	83 f3 1f             	xor    ebx,0x1f
c0025412:	75 24                	jne    c0025438 <__udivdi3+0x8c>
c0025414:	39 f2                	cmp    edx,esi
c0025416:	72 08                	jb     c0025420 <__udivdi3+0x74>
c0025418:	39 ef                	cmp    edi,ebp
c002541a:	0f 87 84 00 00 00    	ja     c00254a4 <__udivdi3+0xf8>
c0025420:	b8 01 00 00 00       	mov    eax,0x1
c0025425:	eb ac                	jmp    c00253d3 <__udivdi3+0x27>
c0025427:	90                   	nop
c0025428:	31 db                	xor    ebx,ebx
c002542a:	31 c0                	xor    eax,eax
c002542c:	89 da                	mov    edx,ebx
c002542e:	83 c4 1c             	add    esp,0x1c
c0025431:	5b                   	pop    ebx
c0025432:	5e                   	pop    esi
c0025433:	5f                   	pop    edi
c0025434:	5d                   	pop    ebp
c0025435:	c3                   	ret    
c0025436:	66 90                	xchg   ax,ax
c0025438:	b8 20 00 00 00       	mov    eax,0x20
c002543d:	29 d8                	sub    eax,ebx
c002543f:	88 d9                	mov    cl,bl
c0025441:	d3 e2                	shl    edx,cl
c0025443:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0025447:	89 fa                	mov    edx,edi
c0025449:	88 c1                	mov    cl,al
c002544b:	d3 ea                	shr    edx,cl
c002544d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025451:	09 d1                	or     ecx,edx
c0025453:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025457:	88 d9                	mov    cl,bl
c0025459:	d3 e7                	shl    edi,cl
c002545b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002545f:	89 f7                	mov    edi,esi
c0025461:	88 c1                	mov    cl,al
c0025463:	d3 ef                	shr    edi,cl
c0025465:	88 d9                	mov    cl,bl
c0025467:	d3 e6                	shl    esi,cl
c0025469:	89 ea                	mov    edx,ebp
c002546b:	88 c1                	mov    cl,al
c002546d:	d3 ea                	shr    edx,cl
c002546f:	09 d6                	or     esi,edx
c0025471:	89 f0                	mov    eax,esi
c0025473:	89 fa                	mov    edx,edi
c0025475:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025479:	89 d7                	mov    edi,edx
c002547b:	89 c6                	mov    esi,eax
c002547d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025481:	39 d7                	cmp    edi,edx
c0025483:	72 13                	jb     c0025498 <__udivdi3+0xec>
c0025485:	74 09                	je     c0025490 <__udivdi3+0xe4>
c0025487:	89 f0                	mov    eax,esi
c0025489:	31 db                	xor    ebx,ebx
c002548b:	e9 43 ff ff ff       	jmp    c00253d3 <__udivdi3+0x27>
c0025490:	88 d9                	mov    cl,bl
c0025492:	d3 e5                	shl    ebp,cl
c0025494:	39 c5                	cmp    ebp,eax
c0025496:	73 ef                	jae    c0025487 <__udivdi3+0xdb>
c0025498:	8d 46 ff             	lea    eax,[esi-0x1]
c002549b:	31 db                	xor    ebx,ebx
c002549d:	e9 31 ff ff ff       	jmp    c00253d3 <__udivdi3+0x27>
c00254a2:	66 90                	xchg   ax,ax
c00254a4:	31 c0                	xor    eax,eax
c00254a6:	e9 28 ff ff ff       	jmp    c00253d3 <__udivdi3+0x27>
c00254ab:	90                   	nop

c00254ac <__umoddi3>:
c00254ac:	55                   	push   ebp
c00254ad:	57                   	push   edi
c00254ae:	56                   	push   esi
c00254af:	53                   	push   ebx
c00254b0:	83 ec 1c             	sub    esp,0x1c
c00254b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00254b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00254bb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00254bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00254c3:	89 da                	mov    edx,ebx
c00254c5:	85 c0                	test   eax,eax
c00254c7:	75 37                	jne    c0025500 <__umoddi3+0x54>
c00254c9:	39 df                	cmp    edi,ebx
c00254cb:	76 13                	jbe    c00254e0 <__umoddi3+0x34>
c00254cd:	89 f0                	mov    eax,esi
c00254cf:	f7 f7                	div    edi
c00254d1:	89 d0                	mov    eax,edx
c00254d3:	31 d2                	xor    edx,edx
c00254d5:	83 c4 1c             	add    esp,0x1c
c00254d8:	5b                   	pop    ebx
c00254d9:	5e                   	pop    esi
c00254da:	5f                   	pop    edi
c00254db:	5d                   	pop    ebp
c00254dc:	c3                   	ret    
c00254dd:	8d 76 00             	lea    esi,[esi+0x0]
c00254e0:	89 fd                	mov    ebp,edi
c00254e2:	85 ff                	test   edi,edi
c00254e4:	75 0b                	jne    c00254f1 <__umoddi3+0x45>
c00254e6:	b8 01 00 00 00       	mov    eax,0x1
c00254eb:	31 d2                	xor    edx,edx
c00254ed:	f7 f7                	div    edi
c00254ef:	89 c5                	mov    ebp,eax
c00254f1:	89 d8                	mov    eax,ebx
c00254f3:	31 d2                	xor    edx,edx
c00254f5:	f7 f5                	div    ebp
c00254f7:	89 f0                	mov    eax,esi
c00254f9:	f7 f5                	div    ebp
c00254fb:	89 d0                	mov    eax,edx
c00254fd:	eb d4                	jmp    c00254d3 <__umoddi3+0x27>
c00254ff:	90                   	nop
c0025500:	89 f1                	mov    ecx,esi
c0025502:	39 d8                	cmp    eax,ebx
c0025504:	76 0a                	jbe    c0025510 <__umoddi3+0x64>
c0025506:	89 f0                	mov    eax,esi
c0025508:	83 c4 1c             	add    esp,0x1c
c002550b:	5b                   	pop    ebx
c002550c:	5e                   	pop    esi
c002550d:	5f                   	pop    edi
c002550e:	5d                   	pop    ebp
c002550f:	c3                   	ret    
c0025510:	0f bd e8             	bsr    ebp,eax
c0025513:	83 f5 1f             	xor    ebp,0x1f
c0025516:	75 1c                	jne    c0025534 <__umoddi3+0x88>
c0025518:	39 d8                	cmp    eax,ebx
c002551a:	72 04                	jb     c0025520 <__umoddi3+0x74>
c002551c:	39 f7                	cmp    edi,esi
c002551e:	77 08                	ja     c0025528 <__umoddi3+0x7c>
c0025520:	89 da                	mov    edx,ebx
c0025522:	29 fe                	sub    esi,edi
c0025524:	19 c2                	sbb    edx,eax
c0025526:	89 f1                	mov    ecx,esi
c0025528:	89 c8                	mov    eax,ecx
c002552a:	83 c4 1c             	add    esp,0x1c
c002552d:	5b                   	pop    ebx
c002552e:	5e                   	pop    esi
c002552f:	5f                   	pop    edi
c0025530:	5d                   	pop    ebp
c0025531:	c3                   	ret    
c0025532:	66 90                	xchg   ax,ax
c0025534:	ba 20 00 00 00       	mov    edx,0x20
c0025539:	29 ea                	sub    edx,ebp
c002553b:	89 e9                	mov    ecx,ebp
c002553d:	d3 e0                	shl    eax,cl
c002553f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025543:	89 f8                	mov    eax,edi
c0025545:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025549:	88 d1                	mov    cl,dl
c002554b:	d3 e8                	shr    eax,cl
c002554d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025551:	09 c1                	or     ecx,eax
c0025553:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025557:	89 e9                	mov    ecx,ebp
c0025559:	d3 e7                	shl    edi,cl
c002555b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002555f:	89 d8                	mov    eax,ebx
c0025561:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025565:	88 d1                	mov    cl,dl
c0025567:	d3 e8                	shr    eax,cl
c0025569:	89 c7                	mov    edi,eax
c002556b:	89 e9                	mov    ecx,ebp
c002556d:	d3 e3                	shl    ebx,cl
c002556f:	89 f0                	mov    eax,esi
c0025571:	88 d1                	mov    cl,dl
c0025573:	d3 e8                	shr    eax,cl
c0025575:	09 d8                	or     eax,ebx
c0025577:	89 e9                	mov    ecx,ebp
c0025579:	d3 e6                	shl    esi,cl
c002557b:	89 f3                	mov    ebx,esi
c002557d:	89 fa                	mov    edx,edi
c002557f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025583:	89 d1                	mov    ecx,edx
c0025585:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025589:	89 c6                	mov    esi,eax
c002558b:	89 d7                	mov    edi,edx
c002558d:	39 d1                	cmp    ecx,edx
c002558f:	72 27                	jb     c00255b8 <__umoddi3+0x10c>
c0025591:	74 21                	je     c00255b4 <__umoddi3+0x108>
c0025593:	89 ca                	mov    edx,ecx
c0025595:	29 f3                	sub    ebx,esi
c0025597:	19 fa                	sbb    edx,edi
c0025599:	89 d0                	mov    eax,edx
c002559b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002559f:	d3 e0                	shl    eax,cl
c00255a1:	89 e9                	mov    ecx,ebp
c00255a3:	d3 eb                	shr    ebx,cl
c00255a5:	09 d8                	or     eax,ebx
c00255a7:	d3 ea                	shr    edx,cl
c00255a9:	83 c4 1c             	add    esp,0x1c
c00255ac:	5b                   	pop    ebx
c00255ad:	5e                   	pop    esi
c00255ae:	5f                   	pop    edi
c00255af:	5d                   	pop    ebp
c00255b0:	c3                   	ret    
c00255b1:	8d 76 00             	lea    esi,[esi+0x0]
c00255b4:	39 c3                	cmp    ebx,eax
c00255b6:	73 db                	jae    c0025593 <__umoddi3+0xe7>
c00255b8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00255bc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00255c0:	89 d7                	mov    edi,edx
c00255c2:	89 c6                	mov    esi,eax
c00255c4:	eb cd                	jmp    c0025593 <__umoddi3+0xe7>

c00255c6 <__addsf3>:
c00255c6:	55                   	push   ebp
c00255c7:	89 e5                	mov    ebp,esp
c00255c9:	57                   	push   edi
c00255ca:	56                   	push   esi
c00255cb:	53                   	push   ebx
c00255cc:	83 ec 08             	sub    esp,0x8
c00255cf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00255d2:	89 fa                	mov    edx,edi
c00255d4:	89 f8                	mov    eax,edi
c00255d6:	c1 f8 17             	sar    eax,0x17
c00255d9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00255dc:	c1 e2 08             	shl    edx,0x8
c00255df:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00255e5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00255e8:	89 de                	mov    esi,ebx
c00255ea:	c1 fe 17             	sar    esi,0x17
c00255ed:	c1 e3 08             	shl    ebx,0x8
c00255f0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00255f6:	31 f0                	xor    eax,esi
c00255f8:	0f 88 3b 01 00 00    	js     c0025739 <__addsf3+0x173>
c00255fe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0025601:	29 f1                	sub    ecx,esi
c0025603:	85 c9                	test   ecx,ecx
c0025605:	7e 54                	jle    c002565b <__addsf3+0x95>
c0025607:	89 f0                	mov    eax,esi
c0025609:	84 c0                	test   al,al
c002560b:	75 10                	jne    c002561d <__addsf3+0x57>
c002560d:	85 db                	test   ebx,ebx
c002560f:	0f 84 aa 02 00 00    	je     c00258bf <__addsf3+0x2f9>
c0025615:	49                   	dec    ecx
c0025616:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025619:	74 38                	je     c0025653 <__addsf3+0x8d>
c002561b:	eb 13                	jmp    c0025630 <__addsf3+0x6a>
c002561d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025620:	f7 d0                	not    eax
c0025622:	84 c0                	test   al,al
c0025624:	0f 84 95 02 00 00    	je     c00258bf <__addsf3+0x2f9>
c002562a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025630:	83 f9 1f             	cmp    ecx,0x1f
c0025633:	0f 8f 86 02 00 00    	jg     c00258bf <__addsf3+0x2f9>
c0025639:	89 de                	mov    esi,ebx
c002563b:	d3 ee                	shr    esi,cl
c002563d:	b8 20 00 00 00       	mov    eax,0x20
c0025642:	29 c8                	sub    eax,ecx
c0025644:	89 c1                	mov    ecx,eax
c0025646:	d3 e3                	shl    ebx,cl
c0025648:	31 c0                	xor    eax,eax
c002564a:	85 db                	test   ebx,ebx
c002564c:	0f 95 c0             	setne  al
c002564f:	09 f0                	or     eax,esi
c0025651:	01 d0                	add    eax,edx
c0025653:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025656:	e9 b6 00 00 00       	jmp    c0025711 <__addsf3+0x14b>
c002565b:	74 5c                	je     c00256b9 <__addsf3+0xf3>
c002565d:	89 f1                	mov    ecx,esi
c002565f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0025662:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025665:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0025669:	75 14                	jne    c002567f <__addsf3+0xb9>
c002566b:	85 d2                	test   edx,edx
c002566d:	0f 84 4c 02 00 00    	je     c00258bf <__addsf3+0x2f9>
c0025673:	49                   	dec    ecx
c0025674:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025677:	0f 84 94 00 00 00    	je     c0025711 <__addsf3+0x14b>
c002567d:	eb 12                	jmp    c0025691 <__addsf3+0xcb>
c002567f:	89 f0                	mov    eax,esi
c0025681:	f7 d0                	not    eax
c0025683:	84 c0                	test   al,al
c0025685:	0f 84 34 02 00 00    	je     c00258bf <__addsf3+0x2f9>
c002568b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025691:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025694:	83 f9 1f             	cmp    ecx,0x1f
c0025697:	0f 8f 22 02 00 00    	jg     c00258bf <__addsf3+0x2f9>
c002569d:	89 d7                	mov    edi,edx
c002569f:	d3 ef                	shr    edi,cl
c00256a1:	b8 20 00 00 00       	mov    eax,0x20
c00256a6:	29 c8                	sub    eax,ecx
c00256a8:	89 c1                	mov    ecx,eax
c00256aa:	d3 e2                	shl    edx,cl
c00256ac:	31 c0                	xor    eax,eax
c00256ae:	85 d2                	test   edx,edx
c00256b0:	0f 95 c0             	setne  al
c00256b3:	09 f8                	or     eax,edi
c00256b5:	01 d8                	add    eax,ebx
c00256b7:	eb 58                	jmp    c0025711 <__addsf3+0x14b>
c00256b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00256bc:	8d 70 01             	lea    esi,[eax+0x1]
c00256bf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00256c5:	75 32                	jne    c00256f9 <__addsf3+0x133>
c00256c7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00256cb:	75 1f                	jne    c00256ec <__addsf3+0x126>
c00256cd:	85 d2                	test   edx,edx
c00256cf:	0f 84 e0 01 00 00    	je     c00258b5 <__addsf3+0x2ef>
c00256d5:	85 db                	test   ebx,ebx
c00256d7:	0f 84 e2 01 00 00    	je     c00258bf <__addsf3+0x2f9>
c00256dd:	89 d0                	mov    eax,edx
c00256df:	01 d8                	add    eax,ebx
c00256e1:	0f 89 a9 01 00 00    	jns    c0025890 <__addsf3+0x2ca>
c00256e7:	e9 9d 01 00 00       	jmp    c0025889 <__addsf3+0x2c3>
c00256ec:	85 d2                	test   edx,edx
c00256ee:	0f 85 cb 01 00 00    	jne    c00258bf <__addsf3+0x2f9>
c00256f4:	e9 bc 01 00 00       	jmp    c00258b5 <__addsf3+0x2ef>
c00256f9:	31 c0                	xor    eax,eax
c00256fb:	89 f1                	mov    ecx,esi
c00256fd:	f7 d1                	not    ecx
c00256ff:	84 c9                	test   cl,cl
c0025701:	0f 84 90 01 00 00    	je     c0025897 <__addsf3+0x2d1>
c0025707:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002570a:	d1 e8                	shr    eax,1
c002570c:	e9 86 01 00 00       	jmp    c0025897 <__addsf3+0x2d1>
c0025711:	85 c0                	test   eax,eax
c0025713:	0f 89 7e 01 00 00    	jns    c0025897 <__addsf3+0x2d1>
c0025719:	46                   	inc    esi
c002571a:	89 f2                	mov    edx,esi
c002571c:	f7 d2                	not    edx
c002571e:	84 d2                	test   dl,dl
c0025720:	0f 84 6f 01 00 00    	je     c0025895 <__addsf3+0x2cf>
c0025726:	89 c2                	mov    edx,eax
c0025728:	83 e2 01             	and    edx,0x1
c002572b:	d1 e8                	shr    eax,1
c002572d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025732:	09 d0                	or     eax,edx
c0025734:	e9 5e 01 00 00       	jmp    c0025897 <__addsf3+0x2d1>
c0025739:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002573d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025740:	89 f0                	mov    eax,esi
c0025742:	0f b6 c0             	movzx  eax,al
c0025745:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025748:	29 c1                	sub    ecx,eax
c002574a:	85 c9                	test   ecx,ecx
c002574c:	7e 55                	jle    c00257a3 <__addsf3+0x1dd>
c002574e:	85 c0                	test   eax,eax
c0025750:	75 11                	jne    c0025763 <__addsf3+0x19d>
c0025752:	85 db                	test   ebx,ebx
c0025754:	0f 84 65 01 00 00    	je     c00258bf <__addsf3+0x2f9>
c002575a:	49                   	dec    ecx
c002575b:	75 19                	jne    c0025776 <__addsf3+0x1b0>
c002575d:	89 d0                	mov    eax,edx
c002575f:	29 d8                	sub    eax,ebx
c0025761:	eb 38                	jmp    c002579b <__addsf3+0x1d5>
c0025763:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025766:	f7 d0                	not    eax
c0025768:	84 c0                	test   al,al
c002576a:	0f 84 4f 01 00 00    	je     c00258bf <__addsf3+0x2f9>
c0025770:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025776:	83 f9 1f             	cmp    ecx,0x1f
c0025779:	0f 8f 40 01 00 00    	jg     c00258bf <__addsf3+0x2f9>
c002577f:	89 de                	mov    esi,ebx
c0025781:	d3 ee                	shr    esi,cl
c0025783:	b8 20 00 00 00       	mov    eax,0x20
c0025788:	29 c8                	sub    eax,ecx
c002578a:	89 c1                	mov    ecx,eax
c002578c:	d3 e3                	shl    ebx,cl
c002578e:	31 c0                	xor    eax,eax
c0025790:	85 db                	test   ebx,ebx
c0025792:	0f 95 c0             	setne  al
c0025795:	09 f0                	or     eax,esi
c0025797:	29 c2                	sub    edx,eax
c0025799:	89 d0                	mov    eax,edx
c002579b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002579e:	e9 af 00 00 00       	jmp    c0025852 <__addsf3+0x28c>
c00257a3:	74 5c                	je     c0025801 <__addsf3+0x23b>
c00257a5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00257a8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00257ab:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00257af:	75 14                	jne    c00257c5 <__addsf3+0x1ff>
c00257b1:	85 d2                	test   edx,edx
c00257b3:	0f 84 06 01 00 00    	je     c00258bf <__addsf3+0x2f9>
c00257b9:	48                   	dec    eax
c00257ba:	75 1b                	jne    c00257d7 <__addsf3+0x211>
c00257bc:	89 d8                	mov    eax,ebx
c00257be:	29 d0                	sub    eax,edx
c00257c0:	e9 8d 00 00 00       	jmp    c0025852 <__addsf3+0x28c>
c00257c5:	89 f1                	mov    ecx,esi
c00257c7:	f7 d1                	not    ecx
c00257c9:	84 c9                	test   cl,cl
c00257cb:	0f 84 ee 00 00 00    	je     c00258bf <__addsf3+0x2f9>
c00257d1:	81 ca 00 00 00 80    	or     edx,0x80000000
c00257d7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00257da:	83 f8 1f             	cmp    eax,0x1f
c00257dd:	0f 8f dc 00 00 00    	jg     c00258bf <__addsf3+0x2f9>
c00257e3:	89 d7                	mov    edi,edx
c00257e5:	88 c1                	mov    cl,al
c00257e7:	d3 ef                	shr    edi,cl
c00257e9:	b9 20 00 00 00       	mov    ecx,0x20
c00257ee:	29 c1                	sub    ecx,eax
c00257f0:	d3 e2                	shl    edx,cl
c00257f2:	31 c0                	xor    eax,eax
c00257f4:	85 d2                	test   edx,edx
c00257f6:	0f 95 c0             	setne  al
c00257f9:	09 f8                	or     eax,edi
c00257fb:	29 c3                	sub    ebx,eax
c00257fd:	89 d8                	mov    eax,ebx
c00257ff:	eb 51                	jmp    c0025852 <__addsf3+0x28c>
c0025801:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025804:	40                   	inc    eax
c0025805:	a8 fe                	test   al,0xfe
c0025807:	75 3d                	jne    c0025846 <__addsf3+0x280>
c0025809:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002580d:	0f 85 a7 00 00 00    	jne    c00258ba <__addsf3+0x2f4>
c0025813:	85 d2                	test   edx,edx
c0025815:	75 12                	jne    c0025829 <__addsf3+0x263>
c0025817:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002581a:	85 db                	test   ebx,ebx
c002581c:	0f 85 9d 00 00 00    	jne    c00258bf <__addsf3+0x2f9>
c0025822:	31 ff                	xor    edi,edi
c0025824:	e9 96 00 00 00       	jmp    c00258bf <__addsf3+0x2f9>
c0025829:	85 db                	test   ebx,ebx
c002582b:	0f 84 8e 00 00 00    	je     c00258bf <__addsf3+0x2f9>
c0025831:	89 d0                	mov    eax,edx
c0025833:	29 d8                	sub    eax,ebx
c0025835:	79 06                	jns    c002583d <__addsf3+0x277>
c0025837:	89 d8                	mov    eax,ebx
c0025839:	29 d0                	sub    eax,edx
c002583b:	eb 5a                	jmp    c0025897 <__addsf3+0x2d1>
c002583d:	bf 00 00 00 00       	mov    edi,0x0
c0025842:	74 7b                	je     c00258bf <__addsf3+0x2f9>
c0025844:	eb 4a                	jmp    c0025890 <__addsf3+0x2ca>
c0025846:	89 d0                	mov    eax,edx
c0025848:	29 d8                	sub    eax,ebx
c002584a:	79 12                	jns    c002585e <__addsf3+0x298>
c002584c:	89 d8                	mov    eax,ebx
c002584e:	29 d0                	sub    eax,edx
c0025850:	eb 09                	jmp    c002585b <__addsf3+0x295>
c0025852:	85 c0                	test   eax,eax
c0025854:	79 41                	jns    c0025897 <__addsf3+0x2d1>
c0025856:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002585b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002585e:	31 f6                	xor    esi,esi
c0025860:	85 c0                	test   eax,eax
c0025862:	74 33                	je     c0025897 <__addsf3+0x2d1>
c0025864:	0f bd c8             	bsr    ecx,eax
c0025867:	83 f1 1f             	xor    ecx,0x1f
c002586a:	d3 e0                	shl    eax,cl
c002586c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0025870:	39 ca                	cmp    edx,ecx
c0025872:	7f 10                	jg     c0025884 <__addsf3+0x2be>
c0025874:	29 d1                	sub    ecx,edx
c0025876:	41                   	inc    ecx
c0025877:	d3 e8                	shr    eax,cl
c0025879:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002587c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0025882:	eb 13                	jmp    c0025897 <__addsf3+0x2d1>
c0025884:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025887:	29 ce                	sub    esi,ecx
c0025889:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002588e:	eb 07                	jmp    c0025897 <__addsf3+0x2d1>
c0025890:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025893:	eb 02                	jmp    c0025897 <__addsf3+0x2d1>
c0025895:	31 c0                	xor    eax,eax
c0025897:	89 c2                	mov    edx,eax
c0025899:	c1 ea 08             	shr    edx,0x8
c002589c:	a8 7f                	test   al,0x7f
c002589e:	0f 95 c1             	setne  cl
c00258a1:	09 d1                	or     ecx,edx
c00258a3:	83 e1 01             	and    ecx,0x1
c00258a6:	c1 e8 07             	shr    eax,0x7
c00258a9:	21 c8                	and    eax,ecx
c00258ab:	c1 e6 17             	shl    esi,0x17
c00258ae:	09 d6                	or     esi,edx
c00258b0:	8d 3c 30             	lea    edi,[eax+esi*1]
c00258b3:	eb 0a                	jmp    c00258bf <__addsf3+0x2f9>
c00258b5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00258b8:	eb 05                	jmp    c00258bf <__addsf3+0x2f9>
c00258ba:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00258bf:	89 f8                	mov    eax,edi
c00258c1:	5a                   	pop    edx
c00258c2:	59                   	pop    ecx
c00258c3:	5b                   	pop    ebx
c00258c4:	5e                   	pop    esi
c00258c5:	5f                   	pop    edi
c00258c6:	5d                   	pop    ebp
c00258c7:	c3                   	ret    

c00258c8 <__subsf3>:
c00258c8:	55                   	push   ebp
c00258c9:	89 e5                	mov    ebp,esp
c00258cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258ce:	05 00 00 00 80       	add    eax,0x80000000
c00258d3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00258d6:	5d                   	pop    ebp
c00258d7:	e9 ea fc ff ff       	jmp    c00255c6 <__addsf3>

c00258dc <__negsf2>:
c00258dc:	55                   	push   ebp
c00258dd:	89 e5                	mov    ebp,esp
c00258df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258e2:	05 00 00 00 80       	add    eax,0x80000000
c00258e7:	5d                   	pop    ebp
c00258e8:	c3                   	ret    

c00258e9 <__mulsf3>:
c00258e9:	55                   	push   ebp
c00258ea:	89 e5                	mov    ebp,esp
c00258ec:	57                   	push   edi
c00258ed:	56                   	push   esi
c00258ee:	53                   	push   ebx
c00258ef:	83 ec 1c             	sub    esp,0x1c
c00258f2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00258f5:	89 f0                	mov    eax,esi
c00258f7:	89 f1                	mov    ecx,esi
c00258f9:	c1 f9 17             	sar    ecx,0x17
c00258fc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00258ff:	c1 e0 08             	shl    eax,0x8
c0025902:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025907:	89 c1                	mov    ecx,eax
c0025909:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002590c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002590f:	89 c7                	mov    edi,eax
c0025911:	c1 ff 17             	sar    edi,0x17
c0025914:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025918:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002591b:	89 f8                	mov    eax,edi
c002591d:	0f b6 c0             	movzx  eax,al
c0025920:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025923:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0025927:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002592a:	42                   	inc    edx
c002592b:	80 e2 fe             	and    dl,0xfe
c002592e:	75 7b                	jne    c00259ab <__mulsf3+0xc2>
c0025930:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025934:	74 54                	je     c002598a <__mulsf3+0xa1>
c0025936:	85 c9                	test   ecx,ecx
c0025938:	0f 85 64 01 00 00    	jne    c0025aa2 <__mulsf3+0x1b9>
c002593e:	8d 57 01             	lea    edx,[edi+0x1]
c0025941:	80 e2 fe             	and    dl,0xfe
c0025944:	75 1f                	jne    c0025965 <__mulsf3+0x7c>
c0025946:	85 c0                	test   eax,eax
c0025948:	b8 00 00 00 00       	mov    eax,0x0
c002594d:	74 29                	je     c0025978 <__mulsf3+0x8f>
c002594f:	53                   	push   ebx
c0025950:	53                   	push   ebx
c0025951:	50                   	push   eax
c0025952:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025955:	e8 96 05 00 00       	call   c0025ef0 <__nesf2>
c002595a:	83 c4 10             	add    esp,0x10
c002595d:	85 c0                	test   eax,eax
c002595f:	0f 85 3a 01 00 00    	jne    c0025a9f <__mulsf3+0x1b6>
c0025965:	85 ff                	test   edi,edi
c0025967:	0f 89 35 01 00 00    	jns    c0025aa2 <__mulsf3+0x1b9>
c002596d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0025973:	e9 2a 01 00 00       	jmp    c0025aa2 <__mulsf3+0x1b9>
c0025978:	51                   	push   ecx
c0025979:	51                   	push   ecx
c002597a:	50                   	push   eax
c002597b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002597e:	e8 6d 05 00 00       	call   c0025ef0 <__nesf2>
c0025983:	83 c4 10             	add    esp,0x10
c0025986:	85 c0                	test   eax,eax
c0025988:	eb 15                	jmp    c002599f <__mulsf3+0xb6>
c002598a:	85 c9                	test   ecx,ecx
c002598c:	74 0b                	je     c0025999 <__mulsf3+0xb0>
c002598e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0025991:	01 c9                	add    ecx,ecx
c0025993:	78 16                	js     c00259ab <__mulsf3+0xc2>
c0025995:	89 d3                	mov    ebx,edx
c0025997:	eb f5                	jmp    c002598e <__mulsf3+0xa5>
c0025999:	89 f8                	mov    eax,edi
c002599b:	f7 d0                	not    eax
c002599d:	84 c0                	test   al,al
c002599f:	75 c4                	jne    c0025965 <__mulsf3+0x7c>
c00259a1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00259a6:	e9 f7 00 00 00       	jmp    c0025aa2 <__mulsf3+0x1b9>
c00259ab:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00259ae:	c1 e6 08             	shl    esi,0x8
c00259b1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00259b7:	8d 57 01             	lea    edx,[edi+0x1]
c00259ba:	80 e2 fe             	and    dl,0xfe
c00259bd:	75 63                	jne    c0025a22 <__mulsf3+0x139>
c00259bf:	85 c0                	test   eax,eax
c00259c1:	74 2f                	je     c00259f2 <__mulsf3+0x109>
c00259c3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00259c7:	0f 89 d2 00 00 00    	jns    c0025a9f <__mulsf3+0x1b6>
c00259cd:	52                   	push   edx
c00259ce:	52                   	push   edx
c00259cf:	6a 00                	push   0x0
c00259d1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00259d4:	e8 dc 04 00 00       	call   c0025eb5 <__eqsf2>
c00259d9:	83 c4 10             	add    esp,0x10
c00259dc:	85 c0                	test   eax,eax
c00259de:	0f 85 bb 00 00 00    	jne    c0025a9f <__mulsf3+0x1b6>
c00259e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259e7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00259ed:	e9 b0 00 00 00       	jmp    c0025aa2 <__mulsf3+0x1b9>
c00259f2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00259f5:	50                   	push   eax
c00259f6:	50                   	push   eax
c00259f7:	6a 00                	push   0x0
c00259f9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00259fc:	e8 b4 04 00 00       	call   c0025eb5 <__eqsf2>
c0025a01:	83 c4 10             	add    esp,0x10
c0025a04:	85 c0                	test   eax,eax
c0025a06:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025a09:	75 0c                	jne    c0025a17 <__mulsf3+0x12e>
c0025a0b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025a0f:	0f 89 8a 00 00 00    	jns    c0025a9f <__mulsf3+0x1b6>
c0025a15:	eb cd                	jmp    c00259e4 <__mulsf3+0xfb>
c0025a17:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025a1a:	01 f6                	add    esi,esi
c0025a1c:	78 04                	js     c0025a22 <__mulsf3+0x139>
c0025a1e:	89 c3                	mov    ebx,eax
c0025a20:	eb f5                	jmp    c0025a17 <__mulsf3+0x12e>
c0025a22:	89 c8                	mov    eax,ecx
c0025a24:	0d 00 00 00 80       	or     eax,0x80000000
c0025a29:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025a2f:	f7 e6                	mul    esi
c0025a31:	85 c0                	test   eax,eax
c0025a33:	0f 95 c0             	setne  al
c0025a36:	0f b6 c0             	movzx  eax,al
c0025a39:	09 c2                	or     edx,eax
c0025a3b:	78 03                	js     c0025a40 <__mulsf3+0x157>
c0025a3d:	01 d2                	add    edx,edx
c0025a3f:	4b                   	dec    ebx
c0025a40:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025a46:	7f 22                	jg     c0025a6a <__mulsf3+0x181>
c0025a48:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025a4e:	85 db                	test   ebx,ebx
c0025a50:	7f 23                	jg     c0025a75 <__mulsf3+0x18c>
c0025a52:	83 fb e9             	cmp    ebx,0xffffffe9
c0025a55:	7c 1a                	jl     c0025a71 <__mulsf3+0x188>
c0025a57:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025a5d:	b9 01 00 00 00       	mov    ecx,0x1
c0025a62:	29 d9                	sub    ecx,ebx
c0025a64:	d3 ea                	shr    edx,cl
c0025a66:	31 db                	xor    ebx,ebx
c0025a68:	eb 0b                	jmp    c0025a75 <__mulsf3+0x18c>
c0025a6a:	bb ff 00 00 00       	mov    ebx,0xff
c0025a6f:	eb 02                	jmp    c0025a73 <__mulsf3+0x18a>
c0025a71:	31 db                	xor    ebx,ebx
c0025a73:	31 d2                	xor    edx,edx
c0025a75:	89 d0                	mov    eax,edx
c0025a77:	c1 e8 08             	shr    eax,0x8
c0025a7a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025a7d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025a83:	09 fb                	or     ebx,edi
c0025a85:	c1 e3 17             	shl    ebx,0x17
c0025a88:	09 c3                	or     ebx,eax
c0025a8a:	f6 c2 7f             	test   dl,0x7f
c0025a8d:	0f 95 c1             	setne  cl
c0025a90:	09 c8                	or     eax,ecx
c0025a92:	83 e0 01             	and    eax,0x1
c0025a95:	c1 ea 07             	shr    edx,0x7
c0025a98:	21 c2                	and    edx,eax
c0025a9a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0025a9d:	eb 03                	jmp    c0025aa2 <__mulsf3+0x1b9>
c0025a9f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0025aa2:	89 f0                	mov    eax,esi
c0025aa4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025aa7:	5b                   	pop    ebx
c0025aa8:	5e                   	pop    esi
c0025aa9:	5f                   	pop    edi
c0025aaa:	5d                   	pop    ebp
c0025aab:	c3                   	ret    

c0025aac <__divsf3>:
c0025aac:	55                   	push   ebp
c0025aad:	89 e5                	mov    ebp,esp
c0025aaf:	57                   	push   edi
c0025ab0:	56                   	push   esi
c0025ab1:	53                   	push   ebx
c0025ab2:	83 ec 1c             	sub    esp,0x1c
c0025ab5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025ab8:	89 d8                	mov    eax,ebx
c0025aba:	89 d9                	mov    ecx,ebx
c0025abc:	c1 f9 17             	sar    ecx,0x17
c0025abf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025ac2:	c1 e0 08             	shl    eax,0x8
c0025ac5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025aca:	89 c1                	mov    ecx,eax
c0025acc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025acf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025ad2:	89 c7                	mov    edi,eax
c0025ad4:	c1 ff 17             	sar    edi,0x17
c0025ad7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025adb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025ade:	89 f8                	mov    eax,edi
c0025ae0:	0f b6 c0             	movzx  eax,al
c0025ae3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025ae6:	29 c6                	sub    esi,eax
c0025ae8:	83 c6 7f             	add    esi,0x7f
c0025aeb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025aee:	42                   	inc    edx
c0025aef:	80 e2 fe             	and    dl,0xfe
c0025af2:	0f 85 9c 00 00 00    	jne    c0025b94 <__divsf3+0xe8>
c0025af8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025afc:	74 33                	je     c0025b31 <__divsf3+0x85>
c0025afe:	85 c9                	test   ecx,ecx
c0025b00:	0f 85 c7 01 00 00    	jne    c0025ccd <__divsf3+0x221>
c0025b06:	8d 57 01             	lea    edx,[edi+0x1]
c0025b09:	80 e2 fe             	and    dl,0xfe
c0025b0c:	75 2f                	jne    c0025b3d <__divsf3+0x91>
c0025b0e:	85 c0                	test   eax,eax
c0025b10:	74 2b                	je     c0025b3d <__divsf3+0x91>
c0025b12:	51                   	push   ecx
c0025b13:	51                   	push   ecx
c0025b14:	6a 00                	push   0x0
c0025b16:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b19:	e8 d2 03 00 00       	call   c0025ef0 <__nesf2>
c0025b1e:	83 c4 10             	add    esp,0x10
c0025b21:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025b24:	85 c0                	test   eax,eax
c0025b26:	0f 85 a1 01 00 00    	jne    c0025ccd <__divsf3+0x221>
c0025b2c:	e9 92 01 00 00       	jmp    c0025cc3 <__divsf3+0x217>
c0025b31:	85 c9                	test   ecx,ecx
c0025b33:	75 1b                	jne    c0025b50 <__divsf3+0xa4>
c0025b35:	8d 57 01             	lea    edx,[edi+0x1]
c0025b38:	80 e2 fe             	and    dl,0xfe
c0025b3b:	74 1e                	je     c0025b5b <__divsf3+0xaf>
c0025b3d:	85 ff                	test   edi,edi
c0025b3f:	0f 89 88 01 00 00    	jns    c0025ccd <__divsf3+0x221>
c0025b45:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0025b4b:	e9 7d 01 00 00       	jmp    c0025ccd <__divsf3+0x221>
c0025b50:	8d 56 ff             	lea    edx,[esi-0x1]
c0025b53:	01 c9                	add    ecx,ecx
c0025b55:	78 3d                	js     c0025b94 <__divsf3+0xe8>
c0025b57:	89 d6                	mov    esi,edx
c0025b59:	eb f5                	jmp    c0025b50 <__divsf3+0xa4>
c0025b5b:	85 c0                	test   eax,eax
c0025b5d:	b8 00 00 00 00       	mov    eax,0x0
c0025b62:	74 18                	je     c0025b7c <__divsf3+0xd0>
c0025b64:	52                   	push   edx
c0025b65:	52                   	push   edx
c0025b66:	50                   	push   eax
c0025b67:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b6a:	e8 81 03 00 00       	call   c0025ef0 <__nesf2>
c0025b6f:	83 c4 10             	add    esp,0x10
c0025b72:	85 c0                	test   eax,eax
c0025b74:	0f 85 50 01 00 00    	jne    c0025cca <__divsf3+0x21e>
c0025b7a:	eb c1                	jmp    c0025b3d <__divsf3+0x91>
c0025b7c:	56                   	push   esi
c0025b7d:	56                   	push   esi
c0025b7e:	50                   	push   eax
c0025b7f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b82:	e8 69 03 00 00       	call   c0025ef0 <__nesf2>
c0025b87:	83 c4 10             	add    esp,0x10
c0025b8a:	85 c0                	test   eax,eax
c0025b8c:	0f 84 31 01 00 00    	je     c0025cc3 <__divsf3+0x217>
c0025b92:	eb a9                	jmp    c0025b3d <__divsf3+0x91>
c0025b94:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025b97:	c1 e3 08             	shl    ebx,0x8
c0025b9a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025ba0:	8d 57 01             	lea    edx,[edi+0x1]
c0025ba3:	80 e2 fe             	and    dl,0xfe
c0025ba6:	75 71                	jne    c0025c19 <__divsf3+0x16d>
c0025ba8:	85 c0                	test   eax,eax
c0025baa:	ba 00 00 00 00       	mov    edx,0x0
c0025baf:	74 2f                	je     c0025be0 <__divsf3+0x134>
c0025bb1:	51                   	push   ecx
c0025bb2:	51                   	push   ecx
c0025bb3:	52                   	push   edx
c0025bb4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025bb7:	e8 f9 02 00 00       	call   c0025eb5 <__eqsf2>
c0025bbc:	83 c4 10             	add    esp,0x10
c0025bbf:	85 c0                	test   eax,eax
c0025bc1:	0f 85 03 01 00 00    	jne    c0025cca <__divsf3+0x21e>
c0025bc7:	31 d2                	xor    edx,edx
c0025bc9:	89 d3                	mov    ebx,edx
c0025bcb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025bce:	31 f8                	xor    eax,edi
c0025bd0:	0f 89 f7 00 00 00    	jns    c0025ccd <__divsf3+0x221>
c0025bd6:	bb 00 00 00 80       	mov    ebx,0x80000000
c0025bdb:	e9 ed 00 00 00       	jmp    c0025ccd <__divsf3+0x221>
c0025be0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025be3:	50                   	push   eax
c0025be4:	50                   	push   eax
c0025be5:	52                   	push   edx
c0025be6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025be9:	e8 c7 02 00 00       	call   c0025eb5 <__eqsf2>
c0025bee:	83 c4 10             	add    esp,0x10
c0025bf1:	85 c0                	test   eax,eax
c0025bf3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025bf6:	75 16                	jne    c0025c0e <__divsf3+0x162>
c0025bf8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025bfb:	31 fb                	xor    ebx,edi
c0025bfd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0025c03:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0025c09:	e9 bf 00 00 00       	jmp    c0025ccd <__divsf3+0x221>
c0025c0e:	8d 46 01             	lea    eax,[esi+0x1]
c0025c11:	01 db                	add    ebx,ebx
c0025c13:	78 04                	js     c0025c19 <__divsf3+0x16d>
c0025c15:	89 c6                	mov    esi,eax
c0025c17:	eb f5                	jmp    c0025c0e <__divsf3+0x162>
c0025c19:	89 c8                	mov    eax,ecx
c0025c1b:	0d 00 00 00 80       	or     eax,0x80000000
c0025c20:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025c26:	31 d2                	xor    edx,edx
c0025c28:	39 d8                	cmp    eax,ebx
c0025c2a:	72 07                	jb     c0025c33 <__divsf3+0x187>
c0025c2c:	29 d8                	sub    eax,ebx
c0025c2e:	ba 01 00 00 00       	mov    edx,0x1
c0025c33:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0025c3a:	01 d2                	add    edx,edx
c0025c3c:	89 c1                	mov    ecx,eax
c0025c3e:	01 c0                	add    eax,eax
c0025c40:	85 c9                	test   ecx,ecx
c0025c42:	78 04                	js     c0025c48 <__divsf3+0x19c>
c0025c44:	39 c3                	cmp    ebx,eax
c0025c46:	77 05                	ja     c0025c4d <__divsf3+0x1a1>
c0025c48:	29 d8                	sub    eax,ebx
c0025c4a:	83 ca 01             	or     edx,0x1
c0025c4d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0025c50:	75 e8                	jne    c0025c3a <__divsf3+0x18e>
c0025c52:	85 c0                	test   eax,eax
c0025c54:	0f 95 c0             	setne  al
c0025c57:	0f b6 c0             	movzx  eax,al
c0025c5a:	c1 e2 06             	shl    edx,0x6
c0025c5d:	09 c2                	or     edx,eax
c0025c5f:	78 03                	js     c0025c64 <__divsf3+0x1b8>
c0025c61:	01 d2                	add    edx,edx
c0025c63:	4e                   	dec    esi
c0025c64:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025c6a:	7f 22                	jg     c0025c8e <__divsf3+0x1e2>
c0025c6c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025c72:	85 f6                	test   esi,esi
c0025c74:	7f 23                	jg     c0025c99 <__divsf3+0x1ed>
c0025c76:	83 fe e9             	cmp    esi,0xffffffe9
c0025c79:	7c 1a                	jl     c0025c95 <__divsf3+0x1e9>
c0025c7b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025c81:	b9 01 00 00 00       	mov    ecx,0x1
c0025c86:	29 f1                	sub    ecx,esi
c0025c88:	d3 ea                	shr    edx,cl
c0025c8a:	31 f6                	xor    esi,esi
c0025c8c:	eb 0b                	jmp    c0025c99 <__divsf3+0x1ed>
c0025c8e:	be ff 00 00 00       	mov    esi,0xff
c0025c93:	eb 02                	jmp    c0025c97 <__divsf3+0x1eb>
c0025c95:	31 f6                	xor    esi,esi
c0025c97:	31 d2                	xor    edx,edx
c0025c99:	89 d0                	mov    eax,edx
c0025c9b:	c1 e8 08             	shr    eax,0x8
c0025c9e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025ca1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025ca7:	09 fe                	or     esi,edi
c0025ca9:	c1 e6 17             	shl    esi,0x17
c0025cac:	09 c6                	or     esi,eax
c0025cae:	f6 c2 7f             	test   dl,0x7f
c0025cb1:	0f 95 c1             	setne  cl
c0025cb4:	09 c8                	or     eax,ecx
c0025cb6:	83 e0 01             	and    eax,0x1
c0025cb9:	c1 ea 07             	shr    edx,0x7
c0025cbc:	21 c2                	and    edx,eax
c0025cbe:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0025cc1:	eb 0a                	jmp    c0025ccd <__divsf3+0x221>
c0025cc3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0025cc8:	eb 03                	jmp    c0025ccd <__divsf3+0x221>
c0025cca:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025ccd:	89 d8                	mov    eax,ebx
c0025ccf:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025cd2:	5b                   	pop    ebx
c0025cd3:	5e                   	pop    esi
c0025cd4:	5f                   	pop    edi
c0025cd5:	5d                   	pop    ebp
c0025cd6:	c3                   	ret    

c0025cd7 <__floatsisf>:
c0025cd7:	55                   	push   ebp
c0025cd8:	89 e5                	mov    ebp,esp
c0025cda:	53                   	push   ebx
c0025cdb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025cde:	85 d2                	test   edx,edx
c0025ce0:	7e 2b                	jle    c0025d0d <__floatsisf+0x36>
c0025ce2:	0f bd ca             	bsr    ecx,edx
c0025ce5:	83 f1 1f             	xor    ecx,0x1f
c0025ce8:	d3 e2                	shl    edx,cl
c0025cea:	89 d0                	mov    eax,edx
c0025cec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025cf1:	89 c3                	mov    ebx,eax
c0025cf3:	c1 eb 08             	shr    ebx,0x8
c0025cf6:	80 e2 7f             	and    dl,0x7f
c0025cf9:	0f 95 c2             	setne  dl
c0025cfc:	09 da                	or     edx,ebx
c0025cfe:	83 e2 01             	and    edx,0x1
c0025d01:	c1 e8 07             	shr    eax,0x7
c0025d04:	21 c2                	and    edx,eax
c0025d06:	b8 9e 00 00 00       	mov    eax,0x9e
c0025d0b:	eb 32                	jmp    c0025d3f <__floatsisf+0x68>
c0025d0d:	b8 00 00 00 00       	mov    eax,0x0
c0025d12:	74 34                	je     c0025d48 <__floatsisf+0x71>
c0025d14:	f7 da                	neg    edx
c0025d16:	0f bd ca             	bsr    ecx,edx
c0025d19:	83 f1 1f             	xor    ecx,0x1f
c0025d1c:	d3 e2                	shl    edx,cl
c0025d1e:	89 d0                	mov    eax,edx
c0025d20:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025d25:	89 c3                	mov    ebx,eax
c0025d27:	c1 eb 08             	shr    ebx,0x8
c0025d2a:	80 e2 7f             	and    dl,0x7f
c0025d2d:	0f 95 c2             	setne  dl
c0025d30:	09 da                	or     edx,ebx
c0025d32:	83 e2 01             	and    edx,0x1
c0025d35:	c1 e8 07             	shr    eax,0x7
c0025d38:	21 c2                	and    edx,eax
c0025d3a:	b8 9e 01 00 00       	mov    eax,0x19e
c0025d3f:	29 c8                	sub    eax,ecx
c0025d41:	c1 e0 17             	shl    eax,0x17
c0025d44:	09 d8                	or     eax,ebx
c0025d46:	01 d0                	add    eax,edx
c0025d48:	5b                   	pop    ebx
c0025d49:	5d                   	pop    ebp
c0025d4a:	c3                   	ret    

c0025d4b <__floatunsisf>:
c0025d4b:	55                   	push   ebp
c0025d4c:	89 e5                	mov    ebp,esp
c0025d4e:	53                   	push   ebx
c0025d4f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025d52:	31 c0                	xor    eax,eax
c0025d54:	85 d2                	test   edx,edx
c0025d56:	74 32                	je     c0025d8a <__floatunsisf+0x3f>
c0025d58:	0f bd ca             	bsr    ecx,edx
c0025d5b:	83 f1 1f             	xor    ecx,0x1f
c0025d5e:	d3 e2                	shl    edx,cl
c0025d60:	89 d0                	mov    eax,edx
c0025d62:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025d67:	89 c3                	mov    ebx,eax
c0025d69:	c1 eb 08             	shr    ebx,0x8
c0025d6c:	80 e2 7f             	and    dl,0x7f
c0025d6f:	0f 95 c2             	setne  dl
c0025d72:	09 da                	or     edx,ebx
c0025d74:	83 e2 01             	and    edx,0x1
c0025d77:	c1 e8 07             	shr    eax,0x7
c0025d7a:	21 c2                	and    edx,eax
c0025d7c:	b8 9e 00 00 00       	mov    eax,0x9e
c0025d81:	29 c8                	sub    eax,ecx
c0025d83:	c1 e0 17             	shl    eax,0x17
c0025d86:	09 d8                	or     eax,ebx
c0025d88:	01 d0                	add    eax,edx
c0025d8a:	5b                   	pop    ebx
c0025d8b:	5d                   	pop    ebp
c0025d8c:	c3                   	ret    

c0025d8d <__fixsfsi>:
c0025d8d:	55                   	push   ebp
c0025d8e:	89 e5                	mov    ebp,esp
c0025d90:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025d93:	89 d1                	mov    ecx,edx
c0025d95:	c1 e1 08             	shl    ecx,0x8
c0025d98:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0025d9e:	c1 fa 17             	sar    edx,0x17
c0025da1:	78 1c                	js     c0025dbf <__fixsfsi+0x32>
c0025da3:	83 ea 7f             	sub    edx,0x7f
c0025da6:	31 c0                	xor    eax,eax
c0025da8:	83 fa 1e             	cmp    edx,0x1e
c0025dab:	77 40                	ja     c0025ded <__fixsfsi+0x60>
c0025dad:	89 c8                	mov    eax,ecx
c0025daf:	0d 00 00 00 80       	or     eax,0x80000000
c0025db4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025db9:	29 d1                	sub    ecx,edx
c0025dbb:	d3 e8                	shr    eax,cl
c0025dbd:	eb 2e                	jmp    c0025ded <__fixsfsi+0x60>
c0025dbf:	31 c0                	xor    eax,eax
c0025dc1:	81 c2 81 00 00 00    	add    edx,0x81
c0025dc7:	78 24                	js     c0025ded <__fixsfsi+0x60>
c0025dc9:	83 fa 1e             	cmp    edx,0x1e
c0025dcc:	7e 09                	jle    c0025dd7 <__fixsfsi+0x4a>
c0025dce:	83 fa 1f             	cmp    edx,0x1f
c0025dd1:	75 18                	jne    c0025deb <__fixsfsi+0x5e>
c0025dd3:	85 c9                	test   ecx,ecx
c0025dd5:	75 14                	jne    c0025deb <__fixsfsi+0x5e>
c0025dd7:	89 c8                	mov    eax,ecx
c0025dd9:	0d 00 00 00 80       	or     eax,0x80000000
c0025dde:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025de3:	29 d1                	sub    ecx,edx
c0025de5:	d3 e8                	shr    eax,cl
c0025de7:	f7 d8                	neg    eax
c0025de9:	eb 02                	jmp    c0025ded <__fixsfsi+0x60>
c0025deb:	31 c0                	xor    eax,eax
c0025ded:	5d                   	pop    ebp
c0025dee:	c3                   	ret    

c0025def <__fixunssfsi>:
c0025def:	55                   	push   ebp
c0025df0:	89 e5                	mov    ebp,esp
c0025df2:	53                   	push   ebx
c0025df3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025df6:	89 d3                	mov    ebx,edx
c0025df8:	c1 fb 17             	sar    ebx,0x17
c0025dfb:	83 eb 7f             	sub    ebx,0x7f
c0025dfe:	31 c0                	xor    eax,eax
c0025e00:	83 fb 1f             	cmp    ebx,0x1f
c0025e03:	77 18                	ja     c0025e1d <__fixunssfsi+0x2e>
c0025e05:	89 d0                	mov    eax,edx
c0025e07:	c1 e0 08             	shl    eax,0x8
c0025e0a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025e0f:	0d 00 00 00 80       	or     eax,0x80000000
c0025e14:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025e19:	29 d9                	sub    ecx,ebx
c0025e1b:	d3 e8                	shr    eax,cl
c0025e1d:	5b                   	pop    ebx
c0025e1e:	5d                   	pop    ebp
c0025e1f:	c3                   	ret    

c0025e20 <__cmpsf2>:
c0025e20:	55                   	push   ebp
c0025e21:	89 e5                	mov    ebp,esp
c0025e23:	57                   	push   edi
c0025e24:	56                   	push   esi
c0025e25:	53                   	push   ebx
c0025e26:	83 ec 24             	sub    esp,0x24
c0025e29:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e2f:	e8 4f 10 00 00       	call   c0026e83 <__truncdfsf2>
c0025e34:	5a                   	pop    edx
c0025e35:	59                   	pop    ecx
c0025e36:	89 c3                	mov    ebx,eax
c0025e38:	c1 e8 17             	shr    eax,0x17
c0025e3b:	0f b6 f0             	movzx  esi,al
c0025e3e:	89 d8                	mov    eax,ebx
c0025e40:	c1 e8 1f             	shr    eax,0x1f
c0025e43:	31 c6                	xor    esi,eax
c0025e45:	c1 e3 08             	shl    ebx,0x8
c0025e48:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0025e4b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0025e4e:	e8 30 10 00 00       	call   c0026e83 <__truncdfsf2>
c0025e53:	83 c4 10             	add    esp,0x10
c0025e56:	89 c1                	mov    ecx,eax
c0025e58:	c1 e9 17             	shr    ecx,0x17
c0025e5b:	0f b6 c9             	movzx  ecx,cl
c0025e5e:	89 c7                	mov    edi,eax
c0025e60:	c1 ef 1f             	shr    edi,0x1f
c0025e63:	89 ca                	mov    edx,ecx
c0025e65:	31 fa                	xor    edx,edi
c0025e67:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0025e6a:	c1 e0 08             	shl    eax,0x8
c0025e6d:	89 c2                	mov    edx,eax
c0025e6f:	89 d8                	mov    eax,ebx
c0025e71:	09 d0                	or     eax,edx
c0025e73:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025e78:	09 f0                	or     eax,esi
c0025e7a:	75 08                	jne    c0025e84 <__cmpsf2+0x64>
c0025e7c:	31 c0                	xor    eax,eax
c0025e7e:	39 f9                	cmp    ecx,edi
c0025e80:	75 0c                	jne    c0025e8e <__cmpsf2+0x6e>
c0025e82:	eb 29                	jmp    c0025ead <__cmpsf2+0x8d>
c0025e84:	b8 01 00 00 00       	mov    eax,0x1
c0025e89:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025e8c:	7f 1f                	jg     c0025ead <__cmpsf2+0x8d>
c0025e8e:	83 c8 ff             	or     eax,0xffffffff
c0025e91:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025e94:	7c 17                	jl     c0025ead <__cmpsf2+0x8d>
c0025e96:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025e9c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025ea2:	b8 01 00 00 00       	mov    eax,0x1
c0025ea7:	39 d3                	cmp    ebx,edx
c0025ea9:	77 02                	ja     c0025ead <__cmpsf2+0x8d>
c0025eab:	19 c0                	sbb    eax,eax
c0025ead:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025eb0:	5b                   	pop    ebx
c0025eb1:	5e                   	pop    esi
c0025eb2:	5f                   	pop    edi
c0025eb3:	5d                   	pop    ebp
c0025eb4:	c3                   	ret    

c0025eb5 <__eqsf2>:
c0025eb5:	55                   	push   ebp
c0025eb6:	89 e5                	mov    ebp,esp
c0025eb8:	83 ec 24             	sub    esp,0x24
c0025ebb:	6a 01                	push   0x1
c0025ebd:	83 ec 0c             	sub    esp,0xc
c0025ec0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025ec3:	e8 df 10 00 00       	call   c0026fa7 <__extendsfdf2>
c0025ec8:	83 c4 10             	add    esp,0x10
c0025ecb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025ece:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025ed1:	52                   	push   edx
c0025ed2:	50                   	push   eax
c0025ed3:	50                   	push   eax
c0025ed4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ed7:	e8 cb 10 00 00       	call   c0026fa7 <__extendsfdf2>
c0025edc:	59                   	pop    ecx
c0025edd:	59                   	pop    ecx
c0025ede:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025ee1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025ee4:	52                   	push   edx
c0025ee5:	50                   	push   eax
c0025ee6:	e8 35 ff ff ff       	call   c0025e20 <__cmpsf2>
c0025eeb:	83 c4 20             	add    esp,0x20
c0025eee:	c9                   	leave  
c0025eef:	c3                   	ret    

c0025ef0 <__nesf2>:
c0025ef0:	eb c3                	jmp    c0025eb5 <__eqsf2>

c0025ef2 <__gtsf2>:
c0025ef2:	55                   	push   ebp
c0025ef3:	89 e5                	mov    ebp,esp
c0025ef5:	83 ec 24             	sub    esp,0x24
c0025ef8:	6a ff                	push   0xffffffff
c0025efa:	83 ec 0c             	sub    esp,0xc
c0025efd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025f00:	e8 a2 10 00 00       	call   c0026fa7 <__extendsfdf2>
c0025f05:	83 c4 10             	add    esp,0x10
c0025f08:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f0b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f0e:	52                   	push   edx
c0025f0f:	50                   	push   eax
c0025f10:	50                   	push   eax
c0025f11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f14:	e8 8e 10 00 00       	call   c0026fa7 <__extendsfdf2>
c0025f19:	59                   	pop    ecx
c0025f1a:	59                   	pop    ecx
c0025f1b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f1e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f21:	52                   	push   edx
c0025f22:	50                   	push   eax
c0025f23:	e8 f8 fe ff ff       	call   c0025e20 <__cmpsf2>
c0025f28:	83 c4 20             	add    esp,0x20
c0025f2b:	c9                   	leave  
c0025f2c:	c3                   	ret    

c0025f2d <__gesf2>:
c0025f2d:	eb c3                	jmp    c0025ef2 <__gtsf2>

c0025f2f <__ltsf2>:
c0025f2f:	eb 84                	jmp    c0025eb5 <__eqsf2>

c0025f31 <__lesf2>:
c0025f31:	eb 82                	jmp    c0025eb5 <__eqsf2>

c0025f33 <__adddf3>:
c0025f33:	55                   	push   ebp
c0025f34:	89 e5                	mov    ebp,esp
c0025f36:	57                   	push   edi
c0025f37:	56                   	push   esi
c0025f38:	53                   	push   ebx
c0025f39:	83 ec 24             	sub    esp,0x24
c0025f3c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025f3f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025f42:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025f45:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025f48:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025f4b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025f4e:	89 c8                	mov    eax,ecx
c0025f50:	89 ce                	mov    esi,ecx
c0025f52:	c1 fe 14             	sar    esi,0x14
c0025f55:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0025f58:	89 fb                	mov    ebx,edi
c0025f5a:	89 fa                	mov    edx,edi
c0025f5c:	c1 e2 0b             	shl    edx,0xb
c0025f5f:	c1 e0 0b             	shl    eax,0xb
c0025f62:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025f67:	c1 eb 15             	shr    ebx,0x15
c0025f6a:	09 d8                	or     eax,ebx
c0025f6c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0025f6f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0025f72:	c1 fe 14             	sar    esi,0x14
c0025f75:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0025f78:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025f7b:	89 f3                	mov    ebx,esi
c0025f7d:	c1 e3 0b             	shl    ebx,0xb
c0025f80:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0025f83:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025f86:	c1 e3 0b             	shl    ebx,0xb
c0025f89:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0025f8f:	c1 ee 15             	shr    esi,0x15
c0025f92:	09 f3                	or     ebx,esi
c0025f94:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0025f97:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025f9a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0025f9d:	0f 88 5f 02 00 00    	js     c0026202 <__adddf3+0x2cf>
c0025fa3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025fa6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0025fa9:	85 db                	test   ebx,ebx
c0025fab:	0f 8e c7 00 00 00    	jle    c0026078 <__adddf3+0x145>
c0025fb1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0025fb8:	75 1a                	jne    c0025fd4 <__adddf3+0xa1>
c0025fba:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025fbd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0025fc0:	0f 84 b2 05 00 00    	je     c0026578 <__adddf3+0x645>
c0025fc6:	4b                   	dec    ebx
c0025fc7:	75 23                	jne    c0025fec <__adddf3+0xb9>
c0025fc9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0025fcc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0025fcf:	e9 99 00 00 00       	jmp    c002606d <__adddf3+0x13a>
c0025fd4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025fd7:	f7 d6                	not    esi
c0025fd9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025fdf:	0f 84 93 05 00 00    	je     c0026578 <__adddf3+0x645>
c0025fe5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0025fec:	83 fb 1f             	cmp    ebx,0x1f
c0025fef:	7e 42                	jle    c0026033 <__adddf3+0x100>
c0025ff1:	83 fb 3f             	cmp    ebx,0x3f
c0025ff4:	0f 8f 7e 05 00 00    	jg     c0026578 <__adddf3+0x645>
c0025ffa:	83 e3 1f             	and    ebx,0x1f
c0025ffd:	89 d9                	mov    ecx,ebx
c0025fff:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026002:	d3 ef                	shr    edi,cl
c0026004:	31 db                	xor    ebx,ebx
c0026006:	85 c9                	test   ecx,ecx
c0026008:	74 15                	je     c002601f <__adddf3+0xec>
c002600a:	be 20 00 00 00       	mov    esi,0x20
c002600f:	29 ce                	sub    esi,ecx
c0026011:	89 f1                	mov    ecx,esi
c0026013:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026016:	d3 e6                	shl    esi,cl
c0026018:	31 db                	xor    ebx,ebx
c002601a:	85 f6                	test   esi,esi
c002601c:	0f 95 c3             	setne  bl
c002601f:	31 c9                	xor    ecx,ecx
c0026021:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026025:	0f 95 c1             	setne  cl
c0026028:	09 cf                	or     edi,ecx
c002602a:	09 fb                	or     ebx,edi
c002602c:	01 da                	add    edx,ebx
c002602e:	83 d0 00             	adc    eax,0x0
c0026031:	eb 3a                	jmp    c002606d <__adddf3+0x13a>
c0026033:	bf 20 00 00 00       	mov    edi,0x20
c0026038:	29 df                	sub    edi,ebx
c002603a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002603d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026040:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026043:	d3 e6                	shl    esi,cl
c0026045:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026048:	88 d9                	mov    cl,bl
c002604a:	d3 ef                	shr    edi,cl
c002604c:	09 fe                	or     esi,edi
c002604e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026051:	88 d9                	mov    cl,bl
c0026053:	d3 ef                	shr    edi,cl
c0026055:	89 fb                	mov    ebx,edi
c0026057:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002605a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002605d:	d3 e7                	shl    edi,cl
c002605f:	85 ff                	test   edi,edi
c0026061:	0f 95 c1             	setne  cl
c0026064:	0f b6 c9             	movzx  ecx,cl
c0026067:	09 ce                	or     esi,ecx
c0026069:	01 f2                	add    edx,esi
c002606b:	11 d8                	adc    eax,ebx
c002606d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026070:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026073:	e9 52 01 00 00       	jmp    c00261ca <__adddf3+0x297>
c0026078:	0f 84 d5 00 00 00    	je     c0026153 <__adddf3+0x220>
c002607e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026081:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0026084:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026087:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002608a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026091:	75 20                	jne    c00260b3 <__adddf3+0x180>
c0026093:	89 d6                	mov    esi,edx
c0026095:	09 c6                	or     esi,eax
c0026097:	0f 84 db 04 00 00    	je     c0026578 <__adddf3+0x645>
c002609d:	4b                   	dec    ebx
c002609e:	75 29                	jne    c00260c9 <__adddf3+0x196>
c00260a0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00260a3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00260a6:	01 d1                	add    ecx,edx
c00260a8:	11 c6                	adc    esi,eax
c00260aa:	89 f0                	mov    eax,esi
c00260ac:	89 ca                	mov    edx,ecx
c00260ae:	e9 17 01 00 00       	jmp    c00261ca <__adddf3+0x297>
c00260b3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00260b6:	f7 d6                	not    esi
c00260b8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00260be:	0f 84 b4 04 00 00    	je     c0026578 <__adddf3+0x645>
c00260c4:	0d 00 00 00 80       	or     eax,0x80000000
c00260c9:	83 fb 1f             	cmp    ebx,0x1f
c00260cc:	7e 48                	jle    c0026116 <__adddf3+0x1e3>
c00260ce:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00260d1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00260d4:	83 fb 3f             	cmp    ebx,0x3f
c00260d7:	0f 8f 9b 04 00 00    	jg     c0026578 <__adddf3+0x645>
c00260dd:	83 e3 1f             	and    ebx,0x1f
c00260e0:	89 d9                	mov    ecx,ebx
c00260e2:	89 c7                	mov    edi,eax
c00260e4:	d3 ef                	shr    edi,cl
c00260e6:	31 db                	xor    ebx,ebx
c00260e8:	85 c9                	test   ecx,ecx
c00260ea:	74 12                	je     c00260fe <__adddf3+0x1cb>
c00260ec:	be 20 00 00 00       	mov    esi,0x20
c00260f1:	29 ce                	sub    esi,ecx
c00260f3:	89 f1                	mov    ecx,esi
c00260f5:	d3 e0                	shl    eax,cl
c00260f7:	31 db                	xor    ebx,ebx
c00260f9:	85 c0                	test   eax,eax
c00260fb:	0f 95 c3             	setne  bl
c00260fe:	31 c0                	xor    eax,eax
c0026100:	85 d2                	test   edx,edx
c0026102:	0f 95 c0             	setne  al
c0026105:	09 c7                	or     edi,eax
c0026107:	09 fb                	or     ebx,edi
c0026109:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002610c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002610f:	01 da                	add    edx,ebx
c0026111:	83 d6 00             	adc    esi,0x0
c0026114:	eb 39                	jmp    c002614f <__adddf3+0x21c>
c0026116:	be 20 00 00 00       	mov    esi,0x20
c002611b:	29 de                	sub    esi,ebx
c002611d:	89 c7                	mov    edi,eax
c002611f:	89 f1                	mov    ecx,esi
c0026121:	d3 e7                	shl    edi,cl
c0026123:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026126:	89 d7                	mov    edi,edx
c0026128:	88 d9                	mov    cl,bl
c002612a:	d3 ef                	shr    edi,cl
c002612c:	89 f9                	mov    ecx,edi
c002612e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026131:	09 cf                	or     edi,ecx
c0026133:	88 d9                	mov    cl,bl
c0026135:	d3 e8                	shr    eax,cl
c0026137:	89 f1                	mov    ecx,esi
c0026139:	d3 e2                	shl    edx,cl
c002613b:	85 d2                	test   edx,edx
c002613d:	0f 95 c2             	setne  dl
c0026140:	0f b6 d2             	movzx  edx,dl
c0026143:	09 d7                	or     edi,edx
c0026145:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026148:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002614b:	01 fa                	add    edx,edi
c002614d:	11 c6                	adc    esi,eax
c002614f:	89 f0                	mov    eax,esi
c0026151:	eb 77                	jmp    c00261ca <__adddf3+0x297>
c0026153:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026156:	46                   	inc    esi
c0026157:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002615a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026160:	75 41                	jne    c00261a3 <__adddf3+0x270>
c0026162:	89 d3                	mov    ebx,edx
c0026164:	09 c3                	or     ebx,eax
c0026166:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002616d:	75 27                	jne    c0026196 <__adddf3+0x263>
c002616f:	85 db                	test   ebx,ebx
c0026171:	0f 84 fb 03 00 00    	je     c0026572 <__adddf3+0x63f>
c0026177:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002617a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002617d:	0f 84 f5 03 00 00    	je     c0026578 <__adddf3+0x645>
c0026183:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026186:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026189:	85 c0                	test   eax,eax
c002618b:	0f 89 91 03 00 00    	jns    c0026522 <__adddf3+0x5ef>
c0026191:	e9 85 03 00 00       	jmp    c002651b <__adddf3+0x5e8>
c0026196:	85 db                	test   ebx,ebx
c0026198:	0f 85 da 03 00 00    	jne    c0026578 <__adddf3+0x645>
c002619e:	e9 cf 03 00 00       	jmp    c0026572 <__adddf3+0x63f>
c00261a3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00261a6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00261a9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00261ac:	f7 d1                	not    ecx
c00261ae:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00261b4:	0f 84 70 03 00 00    	je     c002652a <__adddf3+0x5f7>
c00261ba:	d1 ea                	shr    edx,1
c00261bc:	89 c1                	mov    ecx,eax
c00261be:	c1 e1 1f             	shl    ecx,0x1f
c00261c1:	09 ca                	or     edx,ecx
c00261c3:	d1 e8                	shr    eax,1
c00261c5:	e9 6f 03 00 00       	jmp    c0026539 <__adddf3+0x606>
c00261ca:	85 c0                	test   eax,eax
c00261cc:	0f 89 67 03 00 00    	jns    c0026539 <__adddf3+0x606>
c00261d2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00261d5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00261d8:	f7 d1                	not    ecx
c00261da:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00261e0:	0f 84 44 03 00 00    	je     c002652a <__adddf3+0x5f7>
c00261e6:	89 d1                	mov    ecx,edx
c00261e8:	d1 e9                	shr    ecx,1
c00261ea:	83 e2 01             	and    edx,0x1
c00261ed:	09 ca                	or     edx,ecx
c00261ef:	89 c1                	mov    ecx,eax
c00261f1:	c1 e1 1f             	shl    ecx,0x1f
c00261f4:	09 ca                	or     edx,ecx
c00261f6:	d1 e8                	shr    eax,1
c00261f8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00261fd:	e9 37 03 00 00       	jmp    c0026539 <__adddf3+0x606>
c0026202:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026205:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002620b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002620e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026211:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026217:	29 de                	sub    esi,ebx
c0026219:	85 f6                	test   esi,esi
c002621b:	0f 8e bd 00 00 00    	jle    c00262de <__adddf3+0x3ab>
c0026221:	85 db                	test   ebx,ebx
c0026223:	75 17                	jne    c002623c <__adddf3+0x309>
c0026225:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026228:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002622b:	0f 84 47 03 00 00    	je     c0026578 <__adddf3+0x645>
c0026231:	4e                   	dec    esi
c0026232:	75 20                	jne    c0026254 <__adddf3+0x321>
c0026234:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026237:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002623a:	eb 5b                	jmp    c0026297 <__adddf3+0x364>
c002623c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002623f:	f7 d3                	not    ebx
c0026241:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026247:	0f 84 2b 03 00 00    	je     c0026578 <__adddf3+0x645>
c002624d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026254:	83 fe 1f             	cmp    esi,0x1f
c0026257:	7e 49                	jle    c00262a2 <__adddf3+0x36f>
c0026259:	83 fe 3f             	cmp    esi,0x3f
c002625c:	0f 8f 16 03 00 00    	jg     c0026578 <__adddf3+0x645>
c0026262:	83 e6 1f             	and    esi,0x1f
c0026265:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026268:	89 f1                	mov    ecx,esi
c002626a:	d3 ef                	shr    edi,cl
c002626c:	31 db                	xor    ebx,ebx
c002626e:	85 f6                	test   esi,esi
c0026270:	74 13                	je     c0026285 <__adddf3+0x352>
c0026272:	b9 20 00 00 00       	mov    ecx,0x20
c0026277:	29 f1                	sub    ecx,esi
c0026279:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002627c:	d3 e6                	shl    esi,cl
c002627e:	31 db                	xor    ebx,ebx
c0026280:	85 f6                	test   esi,esi
c0026282:	0f 95 c3             	setne  bl
c0026285:	31 c9                	xor    ecx,ecx
c0026287:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002628b:	0f 95 c1             	setne  cl
c002628e:	09 cf                	or     edi,ecx
c0026290:	09 fb                	or     ebx,edi
c0026292:	29 da                	sub    edx,ebx
c0026294:	83 d8 00             	sbb    eax,0x0
c0026297:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002629a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002629d:	e9 aa 01 00 00       	jmp    c002644c <__adddf3+0x519>
c00262a2:	bf 20 00 00 00       	mov    edi,0x20
c00262a7:	29 f7                	sub    edi,esi
c00262a9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00262ac:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00262af:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00262b2:	d3 e3                	shl    ebx,cl
c00262b4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00262b7:	89 f1                	mov    ecx,esi
c00262b9:	d3 ef                	shr    edi,cl
c00262bb:	09 fb                	or     ebx,edi
c00262bd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00262c0:	89 f1                	mov    ecx,esi
c00262c2:	d3 ef                	shr    edi,cl
c00262c4:	89 fe                	mov    esi,edi
c00262c6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00262c9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00262cc:	d3 e7                	shl    edi,cl
c00262ce:	85 ff                	test   edi,edi
c00262d0:	0f 95 c1             	setne  cl
c00262d3:	0f b6 c9             	movzx  ecx,cl
c00262d6:	09 cb                	or     ebx,ecx
c00262d8:	29 da                	sub    edx,ebx
c00262da:	19 f0                	sbb    eax,esi
c00262dc:	eb b9                	jmp    c0026297 <__adddf3+0x364>
c00262de:	0f 84 cd 00 00 00    	je     c00263b1 <__adddf3+0x47e>
c00262e4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00262e7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00262ea:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00262ed:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00262f1:	75 1b                	jne    c002630e <__adddf3+0x3db>
c00262f3:	89 d6                	mov    esi,edx
c00262f5:	09 c6                	or     esi,eax
c00262f7:	0f 84 7b 02 00 00    	je     c0026578 <__adddf3+0x645>
c00262fd:	4b                   	dec    ebx
c00262fe:	75 24                	jne    c0026324 <__adddf3+0x3f1>
c0026300:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026303:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026306:	29 d1                	sub    ecx,edx
c0026308:	19 c6                	sbb    esi,eax
c002630a:	89 ca                	mov    edx,ecx
c002630c:	eb 61                	jmp    c002636f <__adddf3+0x43c>
c002630e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026311:	f7 d6                	not    esi
c0026313:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026319:	0f 84 59 02 00 00    	je     c0026578 <__adddf3+0x645>
c002631f:	0d 00 00 00 80       	or     eax,0x80000000
c0026324:	83 fb 1f             	cmp    ebx,0x1f
c0026327:	7e 4d                	jle    c0026376 <__adddf3+0x443>
c0026329:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002632c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002632f:	83 fb 3f             	cmp    ebx,0x3f
c0026332:	0f 8f 40 02 00 00    	jg     c0026578 <__adddf3+0x645>
c0026338:	83 e3 1f             	and    ebx,0x1f
c002633b:	89 d9                	mov    ecx,ebx
c002633d:	89 c7                	mov    edi,eax
c002633f:	d3 ef                	shr    edi,cl
c0026341:	31 db                	xor    ebx,ebx
c0026343:	85 c9                	test   ecx,ecx
c0026345:	74 12                	je     c0026359 <__adddf3+0x426>
c0026347:	be 20 00 00 00       	mov    esi,0x20
c002634c:	29 ce                	sub    esi,ecx
c002634e:	89 f1                	mov    ecx,esi
c0026350:	d3 e0                	shl    eax,cl
c0026352:	31 db                	xor    ebx,ebx
c0026354:	85 c0                	test   eax,eax
c0026356:	0f 95 c3             	setne  bl
c0026359:	31 c0                	xor    eax,eax
c002635b:	85 d2                	test   edx,edx
c002635d:	0f 95 c0             	setne  al
c0026360:	09 c7                	or     edi,eax
c0026362:	09 fb                	or     ebx,edi
c0026364:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026367:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002636a:	29 da                	sub    edx,ebx
c002636c:	83 de 00             	sbb    esi,0x0
c002636f:	89 f0                	mov    eax,esi
c0026371:	e9 d6 00 00 00       	jmp    c002644c <__adddf3+0x519>
c0026376:	be 20 00 00 00       	mov    esi,0x20
c002637b:	29 de                	sub    esi,ebx
c002637d:	89 c7                	mov    edi,eax
c002637f:	89 f1                	mov    ecx,esi
c0026381:	d3 e7                	shl    edi,cl
c0026383:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026386:	89 d7                	mov    edi,edx
c0026388:	88 d9                	mov    cl,bl
c002638a:	d3 ef                	shr    edi,cl
c002638c:	89 f9                	mov    ecx,edi
c002638e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026391:	09 cf                	or     edi,ecx
c0026393:	88 d9                	mov    cl,bl
c0026395:	d3 e8                	shr    eax,cl
c0026397:	89 f1                	mov    ecx,esi
c0026399:	d3 e2                	shl    edx,cl
c002639b:	85 d2                	test   edx,edx
c002639d:	0f 95 c2             	setne  dl
c00263a0:	0f b6 d2             	movzx  edx,dl
c00263a3:	09 d7                	or     edi,edx
c00263a5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00263a8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00263ab:	29 fa                	sub    edx,edi
c00263ad:	19 c6                	sbb    esi,eax
c00263af:	eb be                	jmp    c002636f <__adddf3+0x43c>
c00263b1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00263b4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00263b7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00263bd:	75 6a                	jne    c0026429 <__adddf3+0x4f6>
c00263bf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00263c3:	75 58                	jne    c002641d <__adddf3+0x4ea>
c00263c5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00263c8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00263cb:	89 d6                	mov    esi,edx
c00263cd:	09 c6                	or     esi,eax
c00263cf:	75 17                	jne    c00263e8 <__adddf3+0x4b5>
c00263d1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00263d4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00263d7:	85 db                	test   ebx,ebx
c00263d9:	0f 85 99 01 00 00    	jne    c0026578 <__adddf3+0x645>
c00263df:	31 ff                	xor    edi,edi
c00263e1:	31 c9                	xor    ecx,ecx
c00263e3:	e9 90 01 00 00       	jmp    c0026578 <__adddf3+0x645>
c00263e8:	85 db                	test   ebx,ebx
c00263ea:	0f 84 88 01 00 00    	je     c0026578 <__adddf3+0x645>
c00263f0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00263f3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00263f6:	85 c0                	test   eax,eax
c00263f8:	79 10                	jns    c002640a <__adddf3+0x4d7>
c00263fa:	31 c9                	xor    ecx,ecx
c00263fc:	f7 da                	neg    edx
c00263fe:	0f 95 c1             	setne  cl
c0026401:	01 c8                	add    eax,ecx
c0026403:	f7 d8                	neg    eax
c0026405:	e9 2f 01 00 00       	jmp    c0026539 <__adddf3+0x606>
c002640a:	31 ff                	xor    edi,edi
c002640c:	31 c9                	xor    ecx,ecx
c002640e:	89 c3                	mov    ebx,eax
c0026410:	09 d3                	or     ebx,edx
c0026412:	0f 84 60 01 00 00    	je     c0026578 <__adddf3+0x645>
c0026418:	e9 05 01 00 00       	jmp    c0026522 <__adddf3+0x5ef>
c002641d:	31 ff                	xor    edi,edi
c002641f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026424:	e9 4f 01 00 00       	jmp    c0026578 <__adddf3+0x645>
c0026429:	89 c1                	mov    ecx,eax
c002642b:	89 d0                	mov    eax,edx
c002642d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0026430:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0026433:	89 ca                	mov    edx,ecx
c0026435:	85 c9                	test   ecx,ecx
c0026437:	79 2c                	jns    c0026465 <__adddf3+0x532>
c0026439:	31 c9                	xor    ecx,ecx
c002643b:	f7 d8                	neg    eax
c002643d:	0f 95 c1             	setne  cl
c0026440:	01 ca                	add    edx,ecx
c0026442:	f7 da                	neg    edx
c0026444:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026447:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002644a:	eb 19                	jmp    c0026465 <__adddf3+0x532>
c002644c:	85 c0                	test   eax,eax
c002644e:	0f 89 e5 00 00 00    	jns    c0026539 <__adddf3+0x606>
c0026454:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026459:	89 c1                	mov    ecx,eax
c002645b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002645e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026461:	89 d0                	mov    eax,edx
c0026463:	89 ca                	mov    edx,ecx
c0026465:	85 d2                	test   edx,edx
c0026467:	74 59                	je     c00264c2 <__adddf3+0x58f>
c0026469:	0f bd da             	bsr    ebx,edx
c002646c:	83 f3 1f             	xor    ebx,0x1f
c002646f:	88 d9                	mov    cl,bl
c0026471:	d3 e2                	shl    edx,cl
c0026473:	bf 20 00 00 00       	mov    edi,0x20
c0026478:	89 f9                	mov    ecx,edi
c002647a:	29 d9                	sub    ecx,ebx
c002647c:	89 c6                	mov    esi,eax
c002647e:	d3 ee                	shr    esi,cl
c0026480:	09 d6                	or     esi,edx
c0026482:	88 d9                	mov    cl,bl
c0026484:	d3 e0                	shl    eax,cl
c0026486:	89 c2                	mov    edx,eax
c0026488:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002648b:	25 ff 07 00 00       	and    eax,0x7ff
c0026490:	39 d8                	cmp    eax,ebx
c0026492:	7f 22                	jg     c00264b6 <__adddf3+0x583>
c0026494:	29 c3                	sub    ebx,eax
c0026496:	43                   	inc    ebx
c0026497:	88 d9                	mov    cl,bl
c0026499:	d3 ea                	shr    edx,cl
c002649b:	29 df                	sub    edi,ebx
c002649d:	89 f9                	mov    ecx,edi
c002649f:	89 f0                	mov    eax,esi
c00264a1:	d3 e0                	shl    eax,cl
c00264a3:	09 c2                	or     edx,eax
c00264a5:	89 f0                	mov    eax,esi
c00264a7:	88 d9                	mov    cl,bl
c00264a9:	d3 e8                	shr    eax,cl
c00264ab:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00264ae:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00264b4:	eb 6f                	jmp    c0026525 <__adddf3+0x5f2>
c00264b6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264b9:	29 d8                	sub    eax,ebx
c00264bb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00264be:	89 f0                	mov    eax,esi
c00264c0:	eb 59                	jmp    c002651b <__adddf3+0x5e8>
c00264c2:	85 c0                	test   eax,eax
c00264c4:	74 6a                	je     c0026530 <__adddf3+0x5fd>
c00264c6:	0f bd c8             	bsr    ecx,eax
c00264c9:	83 f1 1f             	xor    ecx,0x1f
c00264cc:	d3 e0                	shl    eax,cl
c00264ce:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00264d1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00264d7:	83 c1 20             	add    ecx,0x20
c00264da:	39 cb                	cmp    ebx,ecx
c00264dc:	7f 35                	jg     c0026513 <__adddf3+0x5e0>
c00264de:	29 d9                	sub    ecx,ebx
c00264e0:	8d 71 01             	lea    esi,[ecx+0x1]
c00264e3:	83 fe 1f             	cmp    esi,0x1f
c00264e6:	7e 09                	jle    c00264f1 <__adddf3+0x5be>
c00264e8:	83 e9 1f             	sub    ecx,0x1f
c00264eb:	d3 e8                	shr    eax,cl
c00264ed:	89 c3                	mov    ebx,eax
c00264ef:	eb 11                	jmp    c0026502 <__adddf3+0x5cf>
c00264f1:	b9 20 00 00 00       	mov    ecx,0x20
c00264f6:	29 f1                	sub    ecx,esi
c00264f8:	89 c3                	mov    ebx,eax
c00264fa:	d3 e3                	shl    ebx,cl
c00264fc:	89 f1                	mov    ecx,esi
c00264fe:	d3 e8                	shr    eax,cl
c0026500:	89 c2                	mov    edx,eax
c0026502:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026505:	25 00 f8 ff ff       	and    eax,0xfffff800
c002650a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002650d:	89 d0                	mov    eax,edx
c002650f:	89 da                	mov    edx,ebx
c0026511:	eb 26                	jmp    c0026539 <__adddf3+0x606>
c0026513:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026516:	29 cf                	sub    edi,ecx
c0026518:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002651b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026520:	eb 17                	jmp    c0026539 <__adddf3+0x606>
c0026522:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026525:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026528:	eb 0f                	jmp    c0026539 <__adddf3+0x606>
c002652a:	31 d2                	xor    edx,edx
c002652c:	31 c0                	xor    eax,eax
c002652e:	eb 09                	jmp    c0026539 <__adddf3+0x606>
c0026530:	89 c2                	mov    edx,eax
c0026532:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0026539:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002653c:	c1 e1 14             	shl    ecx,0x14
c002653f:	89 c3                	mov    ebx,eax
c0026541:	c1 eb 0b             	shr    ebx,0xb
c0026544:	09 d9                	or     ecx,ebx
c0026546:	89 d3                	mov    ebx,edx
c0026548:	c1 eb 0b             	shr    ebx,0xb
c002654b:	c1 e0 15             	shl    eax,0x15
c002654e:	09 d8                	or     eax,ebx
c0026550:	89 c7                	mov    edi,eax
c0026552:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0026558:	0f 95 c0             	setne  al
c002655b:	89 c6                	mov    esi,eax
c002655d:	09 f3                	or     ebx,esi
c002655f:	83 e3 01             	and    ebx,0x1
c0026562:	c1 ea 0a             	shr    edx,0xa
c0026565:	21 da                	and    edx,ebx
c0026567:	89 f8                	mov    eax,edi
c0026569:	01 d0                	add    eax,edx
c002656b:	83 d1 00             	adc    ecx,0x0
c002656e:	89 c7                	mov    edi,eax
c0026570:	eb 06                	jmp    c0026578 <__adddf3+0x645>
c0026572:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026575:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026578:	89 f8                	mov    eax,edi
c002657a:	89 ca                	mov    edx,ecx
c002657c:	83 c4 24             	add    esp,0x24
c002657f:	5b                   	pop    ebx
c0026580:	5e                   	pop    esi
c0026581:	5f                   	pop    edi
c0026582:	5d                   	pop    ebp
c0026583:	c3                   	ret    

c0026584 <__subdf3>:
c0026584:	55                   	push   ebp
c0026585:	89 e5                	mov    ebp,esp
c0026587:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002658a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002658d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0026593:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0026596:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0026599:	5d                   	pop    ebp
c002659a:	e9 94 f9 ff ff       	jmp    c0025f33 <__adddf3>

c002659f <__negdf2>:
c002659f:	55                   	push   ebp
c00265a0:	89 e5                	mov    ebp,esp
c00265a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265a5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00265a8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00265ae:	5d                   	pop    ebp
c00265af:	c3                   	ret    

c00265b0 <__muldf3>:
c00265b0:	55                   	push   ebp
c00265b1:	89 e5                	mov    ebp,esp
c00265b3:	57                   	push   edi
c00265b4:	56                   	push   esi
c00265b5:	53                   	push   ebx
c00265b6:	83 ec 24             	sub    esp,0x24
c00265b9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00265bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265bf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00265c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00265c5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00265c8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00265cb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00265ce:	89 c8                	mov    eax,ecx
c00265d0:	c1 f8 14             	sar    eax,0x14
c00265d3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00265d6:	89 f8                	mov    eax,edi
c00265d8:	89 fb                	mov    ebx,edi
c00265da:	c1 e3 0b             	shl    ebx,0xb
c00265dd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00265e0:	c1 e1 0b             	shl    ecx,0xb
c00265e3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00265e9:	c1 e8 15             	shr    eax,0x15
c00265ec:	09 c1                	or     ecx,eax
c00265ee:	89 d6                	mov    esi,edx
c00265f0:	89 d0                	mov    eax,edx
c00265f2:	c1 f8 14             	sar    eax,0x14
c00265f5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00265f8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00265fb:	89 c3                	mov    ebx,eax
c00265fd:	c1 e3 0b             	shl    ebx,0xb
c0026600:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026603:	c1 e6 0b             	shl    esi,0xb
c0026606:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002660c:	c1 e8 15             	shr    eax,0x15
c002660f:	09 c6                	or     esi,eax
c0026611:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026614:	25 ff 07 00 00       	and    eax,0x7ff
c0026619:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002661c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002661f:	25 ff 07 00 00       	and    eax,0x7ff
c0026624:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026627:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002662a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002662d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0026634:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026637:	40                   	inc    eax
c0026638:	a9 fe 07 00 00       	test   eax,0x7fe
c002663d:	0f 85 8d 00 00 00    	jne    c00266d0 <__muldf3+0x120>
c0026643:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026646:	09 c8                	or     eax,ecx
c0026648:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002664c:	74 44                	je     c0026692 <__muldf3+0xe2>
c002664e:	85 c0                	test   eax,eax
c0026650:	0f 85 31 02 00 00    	jne    c0026887 <__muldf3+0x2d7>
c0026656:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026659:	40                   	inc    eax
c002665a:	a9 fe 07 00 00       	test   eax,0x7fe
c002665f:	75 13                	jne    c0026674 <__muldf3+0xc4>
c0026661:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026664:	09 f1                	or     ecx,esi
c0026666:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002666a:	74 22                	je     c002668e <__muldf3+0xde>
c002666c:	85 c9                	test   ecx,ecx
c002666e:	0f 85 0d 02 00 00    	jne    c0026881 <__muldf3+0x2d1>
c0026674:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0026678:	0f 89 09 02 00 00    	jns    c0026887 <__muldf3+0x2d7>
c002667e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026681:	05 00 00 00 80       	add    eax,0x80000000
c0026686:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026689:	e9 f9 01 00 00       	jmp    c0026887 <__muldf3+0x2d7>
c002668e:	85 c9                	test   ecx,ecx
c0026690:	eb 2e                	jmp    c00266c0 <__muldf3+0x110>
c0026692:	85 c0                	test   eax,eax
c0026694:	74 20                	je     c00266b6 <__muldf3+0x106>
c0026696:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0026699:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002669c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002669f:	c1 ef 1f             	shr    edi,0x1f
c00266a2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00266a5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00266a8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00266ab:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00266ae:	09 f9                	or     ecx,edi
c00266b0:	78 1e                	js     c00266d0 <__muldf3+0x120>
c00266b2:	89 c3                	mov    ebx,eax
c00266b4:	eb e0                	jmp    c0026696 <__muldf3+0xe6>
c00266b6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00266b9:	f7 d0                	not    eax
c00266bb:	a9 ff 07 00 00       	test   eax,0x7ff
c00266c0:	75 b2                	jne    c0026674 <__muldf3+0xc4>
c00266c2:	31 ff                	xor    edi,edi
c00266c4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00266cb:	e9 b7 01 00 00       	jmp    c0026887 <__muldf3+0x2d7>
c00266d0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00266d3:	40                   	inc    eax
c00266d4:	a9 fe 07 00 00       	test   eax,0x7fe
c00266d9:	75 57                	jne    c0026732 <__muldf3+0x182>
c00266db:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00266de:	09 f0                	or     eax,esi
c00266e0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00266e4:	74 23                	je     c0026709 <__muldf3+0x159>
c00266e6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00266ea:	0f 89 91 01 00 00    	jns    c0026881 <__muldf3+0x2d1>
c00266f0:	85 c0                	test   eax,eax
c00266f2:	0f 85 89 01 00 00    	jne    c0026881 <__muldf3+0x2d1>
c00266f8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00266fb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0026701:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026704:	e9 7e 01 00 00       	jmp    c0026887 <__muldf3+0x2d7>
c0026709:	85 c0                	test   eax,eax
c002670b:	75 0c                	jne    c0026719 <__muldf3+0x169>
c002670d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026711:	0f 89 6a 01 00 00    	jns    c0026881 <__muldf3+0x2d1>
c0026717:	eb df                	jmp    c00266f8 <__muldf3+0x148>
c0026719:	01 f6                	add    esi,esi
c002671b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002671e:	c1 ea 1f             	shr    edx,0x1f
c0026721:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026724:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0026727:	8d 43 ff             	lea    eax,[ebx-0x1]
c002672a:	09 d6                	or     esi,edx
c002672c:	78 04                	js     c0026732 <__muldf3+0x182>
c002672e:	89 c3                	mov    ebx,eax
c0026730:	eb e7                	jmp    c0026719 <__muldf3+0x169>
c0026732:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0026738:	81 ce 00 00 00 80    	or     esi,0x80000000
c002673e:	89 c8                	mov    eax,ecx
c0026740:	f7 e6                	mul    esi
c0026742:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0026745:	89 c7                	mov    edi,eax
c0026747:	89 c8                	mov    eax,ecx
c0026749:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002674c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002674f:	89 c1                	mov    ecx,eax
c0026751:	89 f0                	mov    eax,esi
c0026753:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0026756:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0026759:	89 c6                	mov    esi,eax
c002675b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002675e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026761:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026764:	31 c0                	xor    eax,eax
c0026766:	01 f1                	add    ecx,esi
c0026768:	0f 92 c0             	setb   al
c002676b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002676e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026771:	83 d6 00             	adc    esi,0x0
c0026774:	01 c7                	add    edi,eax
c0026776:	83 d6 00             	adc    esi,0x0
c0026779:	01 ca                	add    edx,ecx
c002677b:	0f 92 c1             	setb   cl
c002677e:	0f b6 c9             	movzx  ecx,cl
c0026781:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0026784:	83 d6 00             	adc    esi,0x0
c0026787:	01 cf                	add    edi,ecx
c0026789:	83 d6 00             	adc    esi,0x0
c002678c:	31 c9                	xor    ecx,ecx
c002678e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0026791:	0f 95 c1             	setne  cl
c0026794:	09 cf                	or     edi,ecx
c0026796:	85 f6                	test   esi,esi
c0026798:	78 0c                	js     c00267a6 <__muldf3+0x1f6>
c002679a:	01 f6                	add    esi,esi
c002679c:	89 f8                	mov    eax,edi
c002679e:	c1 e8 1f             	shr    eax,0x1f
c00267a1:	09 c6                	or     esi,eax
c00267a3:	01 ff                	add    edi,edi
c00267a5:	4b                   	dec    ebx
c00267a6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00267ac:	0f 8f 85 00 00 00    	jg     c0026837 <__muldf3+0x287>
c00267b2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00267b8:	85 db                	test   ebx,ebx
c00267ba:	0f 8f 84 00 00 00    	jg     c0026844 <__muldf3+0x294>
c00267c0:	83 fb cc             	cmp    ebx,0xffffffcc
c00267c3:	7c 79                	jl     c002683e <__muldf3+0x28e>
c00267c5:	ba 01 00 00 00       	mov    edx,0x1
c00267ca:	29 da                	sub    edx,ebx
c00267cc:	81 ce 00 00 00 80    	or     esi,0x80000000
c00267d2:	83 fa 1f             	cmp    edx,0x1f
c00267d5:	7e 30                	jle    c0026807 <__muldf3+0x257>
c00267d7:	83 fa 20             	cmp    edx,0x20
c00267da:	75 0b                	jne    c00267e7 <__muldf3+0x237>
c00267dc:	31 c0                	xor    eax,eax
c00267de:	85 ff                	test   edi,edi
c00267e0:	0f 95 c0             	setne  al
c00267e3:	89 c7                	mov    edi,eax
c00267e5:	eb 1a                	jmp    c0026801 <__muldf3+0x251>
c00267e7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00267ea:	89 f0                	mov    eax,esi
c00267ec:	d3 e0                	shl    eax,cl
c00267ee:	09 f8                	or     eax,edi
c00267f0:	0f 95 c0             	setne  al
c00267f3:	0f b6 c0             	movzx  eax,al
c00267f6:	89 c7                	mov    edi,eax
c00267f8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00267fd:	29 d9                	sub    ecx,ebx
c00267ff:	d3 ee                	shr    esi,cl
c0026801:	09 f7                	or     edi,esi
c0026803:	31 db                	xor    ebx,ebx
c0026805:	eb 3b                	jmp    c0026842 <__muldf3+0x292>
c0026807:	83 c3 1f             	add    ebx,0x1f
c002680a:	89 f0                	mov    eax,esi
c002680c:	88 d9                	mov    cl,bl
c002680e:	d3 e0                	shl    eax,cl
c0026810:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026813:	89 f8                	mov    eax,edi
c0026815:	88 d1                	mov    cl,dl
c0026817:	d3 e8                	shr    eax,cl
c0026819:	89 c1                	mov    ecx,eax
c002681b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002681e:	09 c8                	or     eax,ecx
c0026820:	88 d9                	mov    cl,bl
c0026822:	d3 e7                	shl    edi,cl
c0026824:	31 db                	xor    ebx,ebx
c0026826:	85 ff                	test   edi,edi
c0026828:	0f 95 c3             	setne  bl
c002682b:	89 df                	mov    edi,ebx
c002682d:	09 c7                	or     edi,eax
c002682f:	88 d1                	mov    cl,dl
c0026831:	d3 ee                	shr    esi,cl
c0026833:	31 db                	xor    ebx,ebx
c0026835:	eb 0d                	jmp    c0026844 <__muldf3+0x294>
c0026837:	bb ff 07 00 00       	mov    ebx,0x7ff
c002683c:	eb 02                	jmp    c0026840 <__muldf3+0x290>
c002683e:	31 db                	xor    ebx,ebx
c0026840:	31 ff                	xor    edi,edi
c0026842:	31 f6                	xor    esi,esi
c0026844:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026847:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002684a:	25 00 f8 ff ff       	and    eax,0xfffff800
c002684f:	09 c3                	or     ebx,eax
c0026851:	c1 e3 14             	shl    ebx,0x14
c0026854:	89 f0                	mov    eax,esi
c0026856:	c1 e8 0b             	shr    eax,0xb
c0026859:	09 c3                	or     ebx,eax
c002685b:	89 f8                	mov    eax,edi
c002685d:	c1 e8 0b             	shr    eax,0xb
c0026860:	c1 e6 15             	shl    esi,0x15
c0026863:	09 c6                	or     esi,eax
c0026865:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002686b:	0f 95 c1             	setne  cl
c002686e:	09 c8                	or     eax,ecx
c0026870:	83 e0 01             	and    eax,0x1
c0026873:	c1 ef 0a             	shr    edi,0xa
c0026876:	21 c7                	and    edi,eax
c0026878:	01 f7                	add    edi,esi
c002687a:	83 d3 00             	adc    ebx,0x0
c002687d:	89 da                	mov    edx,ebx
c002687f:	eb 03                	jmp    c0026884 <__muldf3+0x2d4>
c0026881:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026884:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026887:	89 f8                	mov    eax,edi
c0026889:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002688c:	83 c4 24             	add    esp,0x24
c002688f:	5b                   	pop    ebx
c0026890:	5e                   	pop    esi
c0026891:	5f                   	pop    edi
c0026892:	5d                   	pop    ebp
c0026893:	c3                   	ret    

c0026894 <__divdf3>:
c0026894:	55                   	push   ebp
c0026895:	89 e5                	mov    ebp,esp
c0026897:	57                   	push   edi
c0026898:	56                   	push   esi
c0026899:	53                   	push   ebx
c002689a:	83 ec 2c             	sub    esp,0x2c
c002689d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00268a0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00268a3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00268a6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00268a9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00268ac:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00268af:	89 ce                	mov    esi,ecx
c00268b1:	89 c8                	mov    eax,ecx
c00268b3:	c1 f8 14             	sar    eax,0x14
c00268b6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00268b9:	89 f8                	mov    eax,edi
c00268bb:	89 fb                	mov    ebx,edi
c00268bd:	c1 e3 0b             	shl    ebx,0xb
c00268c0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00268c3:	c1 e6 0b             	shl    esi,0xb
c00268c6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00268cc:	c1 e8 15             	shr    eax,0x15
c00268cf:	09 c6                	or     esi,eax
c00268d1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00268d4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00268d7:	89 c2                	mov    edx,eax
c00268d9:	c1 fa 14             	sar    edx,0x14
c00268dc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00268df:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00268e2:	89 de                	mov    esi,ebx
c00268e4:	c1 e6 0b             	shl    esi,0xb
c00268e7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00268ea:	c1 e0 0b             	shl    eax,0xb
c00268ed:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00268f2:	c1 eb 15             	shr    ebx,0x15
c00268f5:	09 d8                	or     eax,ebx
c00268f7:	89 c2                	mov    edx,eax
c00268f9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00268fc:	25 ff 07 00 00       	and    eax,0x7ff
c0026901:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026904:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026907:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002690d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0026910:	29 d8                	sub    eax,ebx
c0026912:	05 ff 03 00 00       	add    eax,0x3ff
c0026917:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002691a:	46                   	inc    esi
c002691b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026921:	0f 85 a5 00 00 00    	jne    c00269cc <__divdf3+0x138>
c0026927:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002692a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002692d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0026931:	74 2a                	je     c002695d <__divdf3+0xc9>
c0026933:	85 f6                	test   esi,esi
c0026935:	0f 85 cc 02 00 00    	jne    c0026c07 <__divdf3+0x373>
c002693b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002693e:	40                   	inc    eax
c002693f:	a9 fe 07 00 00       	test   eax,0x7fe
c0026944:	75 26                	jne    c002696c <__divdf3+0xd8>
c0026946:	85 db                	test   ebx,ebx
c0026948:	74 22                	je     c002696c <__divdf3+0xd8>
c002694a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002694d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026950:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026953:	09 d0                	or     eax,edx
c0026955:	0f 85 ac 02 00 00    	jne    c0026c07 <__divdf3+0x373>
c002695b:	eb 63                	jmp    c00269c0 <__divdf3+0x12c>
c002695d:	85 f6                	test   esi,esi
c002695f:	75 22                	jne    c0026983 <__divdf3+0xef>
c0026961:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026964:	40                   	inc    eax
c0026965:	a9 fe 07 00 00       	test   eax,0x7fe
c002696a:	74 36                	je     c00269a2 <__divdf3+0x10e>
c002696c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026970:	0f 89 91 02 00 00    	jns    c0026c07 <__divdf3+0x373>
c0026976:	89 f8                	mov    eax,edi
c0026978:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002697e:	e9 80 02 00 00       	jmp    c0026c03 <__divdf3+0x36f>
c0026983:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026986:	01 f6                	add    esi,esi
c0026988:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002698b:	c1 ef 1f             	shr    edi,0x1f
c002698e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026991:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0026994:	8d 48 ff             	lea    ecx,[eax-0x1]
c0026997:	09 f7                	or     edi,esi
c0026999:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002699c:	78 2e                	js     c00269cc <__divdf3+0x138>
c002699e:	89 c8                	mov    eax,ecx
c00269a0:	eb e1                	jmp    c0026983 <__divdf3+0xef>
c00269a2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00269a5:	09 d0                	or     eax,edx
c00269a7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00269ab:	74 0f                	je     c00269bc <__divdf3+0x128>
c00269ad:	85 c0                	test   eax,eax
c00269af:	74 bb                	je     c002696c <__divdf3+0xd8>
c00269b1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00269b4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00269b7:	e9 4b 02 00 00       	jmp    c0026c07 <__divdf3+0x373>
c00269bc:	85 c0                	test   eax,eax
c00269be:	75 ac                	jne    c002696c <__divdf3+0xd8>
c00269c0:	31 ff                	xor    edi,edi
c00269c2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00269c7:	e9 3b 02 00 00       	jmp    c0026c07 <__divdf3+0x373>
c00269cc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00269cf:	8d 4f 01             	lea    ecx,[edi+0x1]
c00269d2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00269d8:	75 6b                	jne    c0026a45 <__divdf3+0x1b1>
c00269da:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00269dd:	09 d6                	or     esi,edx
c00269df:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00269e3:	74 28                	je     c0026a0d <__divdf3+0x179>
c00269e5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00269e8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00269eb:	85 f6                	test   esi,esi
c00269ed:	0f 85 14 02 00 00    	jne    c0026c07 <__divdf3+0x373>
c00269f3:	31 ff                	xor    edi,edi
c00269f5:	31 c9                	xor    ecx,ecx
c00269f7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00269fa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00269fd:	0f 89 04 02 00 00    	jns    c0026c07 <__divdf3+0x373>
c0026a03:	b9 00 00 00 80       	mov    ecx,0x80000000
c0026a08:	e9 fa 01 00 00       	jmp    c0026c07 <__divdf3+0x373>
c0026a0d:	85 f6                	test   esi,esi
c0026a0f:	75 1b                	jne    c0026a2c <__divdf3+0x198>
c0026a11:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026a14:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026a17:	25 00 00 00 80       	and    eax,0x80000000
c0026a1c:	31 c9                	xor    ecx,ecx
c0026a1e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0026a23:	89 cf                	mov    edi,ecx
c0026a25:	89 c1                	mov    ecx,eax
c0026a27:	e9 db 01 00 00       	jmp    c0026c07 <__divdf3+0x373>
c0026a2c:	01 d2                	add    edx,edx
c0026a2e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026a31:	c1 eb 1f             	shr    ebx,0x1f
c0026a34:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026a37:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0026a3a:	8d 48 01             	lea    ecx,[eax+0x1]
c0026a3d:	09 da                	or     edx,ebx
c0026a3f:	78 04                	js     c0026a45 <__divdf3+0x1b1>
c0026a41:	89 c8                	mov    eax,ecx
c0026a43:	eb e7                	jmp    c0026a2c <__divdf3+0x198>
c0026a45:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026a48:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026a4e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a54:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0026a57:	39 d6                	cmp    esi,edx
c0026a59:	77 0d                	ja     c0026a68 <__divdf3+0x1d4>
c0026a5b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026a5e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0026a61:	72 1b                	jb     c0026a7e <__divdf3+0x1ea>
c0026a63:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0026a66:	75 16                	jne    c0026a7e <__divdf3+0x1ea>
c0026a68:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026a6b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026a6e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0026a71:	83 de 00             	sbb    esi,0x0
c0026a74:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0026a77:	ba 01 00 00 00       	mov    edx,0x1
c0026a7c:	eb 02                	jmp    c0026a80 <__divdf3+0x1ec>
c0026a7e:	31 d2                	xor    edx,edx
c0026a80:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0026a87:	31 ff                	xor    edi,edi
c0026a89:	01 ff                	add    edi,edi
c0026a8b:	89 d1                	mov    ecx,edx
c0026a8d:	c1 e9 1f             	shr    ecx,0x1f
c0026a90:	09 cf                	or     edi,ecx
c0026a92:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0026a95:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0026a98:	89 da                	mov    edx,ebx
c0026a9a:	89 f3                	mov    ebx,esi
c0026a9c:	8d 34 36             	lea    esi,[esi+esi*1]
c0026a9f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026aa2:	c1 e9 1f             	shr    ecx,0x1f
c0026aa5:	09 ce                	or     esi,ecx
c0026aa7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026aaa:	01 c9                	add    ecx,ecx
c0026aac:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0026aaf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026ab2:	85 db                	test   ebx,ebx
c0026ab4:	78 29                	js     c0026adf <__divdf3+0x24b>
c0026ab6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0026ab9:	72 07                	jb     c0026ac2 <__divdf3+0x22e>
c0026abb:	75 3c                	jne    c0026af9 <__divdf3+0x265>
c0026abd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026ac0:	77 37                	ja     c0026af9 <__divdf3+0x265>
c0026ac2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026ac5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0026ac8:	31 d2                	xor    edx,edx
c0026aca:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0026acd:	0f 97 c2             	seta   dl
c0026ad0:	29 d6                	sub    esi,edx
c0026ad2:	89 d9                	mov    ecx,ebx
c0026ad4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0026ad7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026ada:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026add:	eb 17                	jmp    c0026af6 <__divdf3+0x262>
c0026adf:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026ae2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ae5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026ae8:	0f 97 c1             	seta   cl
c0026aeb:	0f b6 c9             	movzx  ecx,cl
c0026aee:	29 ce                	sub    esi,ecx
c0026af0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0026af3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0026af6:	83 ca 01             	or     edx,0x1
c0026af9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0026afc:	75 8b                	jne    c0026a89 <__divdf3+0x1f5>
c0026afe:	c1 e7 09             	shl    edi,0x9
c0026b01:	89 d1                	mov    ecx,edx
c0026b03:	c1 e9 17             	shr    ecx,0x17
c0026b06:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026b09:	09 f3                	or     ebx,esi
c0026b0b:	0f 95 c3             	setne  bl
c0026b0e:	0f b6 db             	movzx  ebx,bl
c0026b11:	c1 e2 09             	shl    edx,0x9
c0026b14:	09 d3                	or     ebx,edx
c0026b16:	89 ca                	mov    edx,ecx
c0026b18:	09 fa                	or     edx,edi
c0026b1a:	78 0c                	js     c0026b28 <__divdf3+0x294>
c0026b1c:	01 d2                	add    edx,edx
c0026b1e:	89 d9                	mov    ecx,ebx
c0026b20:	c1 e9 1f             	shr    ecx,0x1f
c0026b23:	09 ca                	or     edx,ecx
c0026b25:	01 db                	add    ebx,ebx
c0026b27:	48                   	dec    eax
c0026b28:	3d fe 07 00 00       	cmp    eax,0x7fe
c0026b2d:	0f 8f 83 00 00 00    	jg     c0026bb6 <__divdf3+0x322>
c0026b33:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026b39:	85 c0                	test   eax,eax
c0026b3b:	0f 8f 82 00 00 00    	jg     c0026bc3 <__divdf3+0x32f>
c0026b41:	83 f8 cc             	cmp    eax,0xffffffcc
c0026b44:	7c 77                	jl     c0026bbd <__divdf3+0x329>
c0026b46:	be 01 00 00 00       	mov    esi,0x1
c0026b4b:	29 c6                	sub    esi,eax
c0026b4d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b53:	83 fe 1f             	cmp    esi,0x1f
c0026b56:	7e 2f                	jle    c0026b87 <__divdf3+0x2f3>
c0026b58:	83 fe 20             	cmp    esi,0x20
c0026b5b:	75 0a                	jne    c0026b67 <__divdf3+0x2d3>
c0026b5d:	85 db                	test   ebx,ebx
c0026b5f:	0f 95 c3             	setne  bl
c0026b62:	0f b6 db             	movzx  ebx,bl
c0026b65:	eb 1a                	jmp    c0026b81 <__divdf3+0x2ed>
c0026b67:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0026b6a:	89 d7                	mov    edi,edx
c0026b6c:	d3 e7                	shl    edi,cl
c0026b6e:	89 f9                	mov    ecx,edi
c0026b70:	09 d9                	or     ecx,ebx
c0026b72:	0f 95 c3             	setne  bl
c0026b75:	0f b6 db             	movzx  ebx,bl
c0026b78:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026b7d:	29 c1                	sub    ecx,eax
c0026b7f:	d3 ea                	shr    edx,cl
c0026b81:	09 d3                	or     ebx,edx
c0026b83:	31 c0                	xor    eax,eax
c0026b85:	eb 3a                	jmp    c0026bc1 <__divdf3+0x32d>
c0026b87:	83 c0 1f             	add    eax,0x1f
c0026b8a:	89 d7                	mov    edi,edx
c0026b8c:	88 c1                	mov    cl,al
c0026b8e:	d3 e7                	shl    edi,cl
c0026b90:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026b93:	89 df                	mov    edi,ebx
c0026b95:	89 f1                	mov    ecx,esi
c0026b97:	d3 ef                	shr    edi,cl
c0026b99:	89 f9                	mov    ecx,edi
c0026b9b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026b9e:	09 cf                	or     edi,ecx
c0026ba0:	88 c1                	mov    cl,al
c0026ba2:	d3 e3                	shl    ebx,cl
c0026ba4:	85 db                	test   ebx,ebx
c0026ba6:	0f 95 c3             	setne  bl
c0026ba9:	0f b6 db             	movzx  ebx,bl
c0026bac:	09 fb                	or     ebx,edi
c0026bae:	89 f1                	mov    ecx,esi
c0026bb0:	d3 ea                	shr    edx,cl
c0026bb2:	31 c0                	xor    eax,eax
c0026bb4:	eb 0d                	jmp    c0026bc3 <__divdf3+0x32f>
c0026bb6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0026bbb:	eb 02                	jmp    c0026bbf <__divdf3+0x32b>
c0026bbd:	31 c0                	xor    eax,eax
c0026bbf:	31 db                	xor    ebx,ebx
c0026bc1:	31 d2                	xor    edx,edx
c0026bc3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026bc6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026bc9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0026bcf:	09 c8                	or     eax,ecx
c0026bd1:	c1 e0 14             	shl    eax,0x14
c0026bd4:	89 d1                	mov    ecx,edx
c0026bd6:	c1 e9 0b             	shr    ecx,0xb
c0026bd9:	09 c8                	or     eax,ecx
c0026bdb:	89 c6                	mov    esi,eax
c0026bdd:	89 d9                	mov    ecx,ebx
c0026bdf:	c1 e9 0b             	shr    ecx,0xb
c0026be2:	c1 e2 15             	shl    edx,0x15
c0026be5:	09 ca                	or     edx,ecx
c0026be7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0026bed:	0f 95 c0             	setne  al
c0026bf0:	09 c1                	or     ecx,eax
c0026bf2:	83 e1 01             	and    ecx,0x1
c0026bf5:	c1 eb 0a             	shr    ebx,0xa
c0026bf8:	21 cb                	and    ebx,ecx
c0026bfa:	01 d3                	add    ebx,edx
c0026bfc:	89 d8                	mov    eax,ebx
c0026bfe:	83 d6 00             	adc    esi,0x0
c0026c01:	89 f2                	mov    edx,esi
c0026c03:	89 c7                	mov    edi,eax
c0026c05:	89 d1                	mov    ecx,edx
c0026c07:	89 f8                	mov    eax,edi
c0026c09:	89 ca                	mov    edx,ecx
c0026c0b:	83 c4 2c             	add    esp,0x2c
c0026c0e:	5b                   	pop    ebx
c0026c0f:	5e                   	pop    esi
c0026c10:	5f                   	pop    edi
c0026c11:	5d                   	pop    ebp
c0026c12:	c3                   	ret    

c0026c13 <__floatsidf>:
c0026c13:	55                   	push   ebp
c0026c14:	89 e5                	mov    ebp,esp
c0026c16:	56                   	push   esi
c0026c17:	53                   	push   ebx
c0026c18:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026c1b:	85 db                	test   ebx,ebx
c0026c1d:	7e 15                	jle    c0026c34 <__floatsidf+0x21>
c0026c1f:	0f bd cb             	bsr    ecx,ebx
c0026c22:	83 f1 1f             	xor    ecx,0x1f
c0026c25:	d3 e3                	shl    ebx,cl
c0026c27:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026c2d:	b8 1e 04 00 00       	mov    eax,0x41e
c0026c32:	eb 21                	jmp    c0026c55 <__floatsidf+0x42>
c0026c34:	b8 00 00 00 00       	mov    eax,0x0
c0026c39:	ba 00 00 00 00       	mov    edx,0x0
c0026c3e:	74 2a                	je     c0026c6a <__floatsidf+0x57>
c0026c40:	f7 db                	neg    ebx
c0026c42:	0f bd cb             	bsr    ecx,ebx
c0026c45:	83 f1 1f             	xor    ecx,0x1f
c0026c48:	d3 e3                	shl    ebx,cl
c0026c4a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026c50:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0026c55:	29 c8                	sub    eax,ecx
c0026c57:	c1 e0 14             	shl    eax,0x14
c0026c5a:	89 c1                	mov    ecx,eax
c0026c5c:	89 de                	mov    esi,ebx
c0026c5e:	c1 ee 0b             	shr    esi,0xb
c0026c61:	09 f1                	or     ecx,esi
c0026c63:	89 ca                	mov    edx,ecx
c0026c65:	c1 e3 15             	shl    ebx,0x15
c0026c68:	89 d8                	mov    eax,ebx
c0026c6a:	5b                   	pop    ebx
c0026c6b:	5e                   	pop    esi
c0026c6c:	5d                   	pop    ebp
c0026c6d:	c3                   	ret    

c0026c6e <__floatunsidf>:
c0026c6e:	55                   	push   ebp
c0026c6f:	89 e5                	mov    ebp,esp
c0026c71:	56                   	push   esi
c0026c72:	53                   	push   ebx
c0026c73:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026c76:	85 db                	test   ebx,ebx
c0026c78:	74 2a                	je     c0026ca4 <__floatunsidf+0x36>
c0026c7a:	0f bd cb             	bsr    ecx,ebx
c0026c7d:	83 f1 1f             	xor    ecx,0x1f
c0026c80:	d3 e3                	shl    ebx,cl
c0026c82:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026c88:	b8 1e 04 00 00       	mov    eax,0x41e
c0026c8d:	29 c8                	sub    eax,ecx
c0026c8f:	c1 e0 14             	shl    eax,0x14
c0026c92:	89 c1                	mov    ecx,eax
c0026c94:	89 de                	mov    esi,ebx
c0026c96:	c1 ee 0b             	shr    esi,0xb
c0026c99:	09 f1                	or     ecx,esi
c0026c9b:	89 ca                	mov    edx,ecx
c0026c9d:	c1 e3 15             	shl    ebx,0x15
c0026ca0:	89 d8                	mov    eax,ebx
c0026ca2:	eb 04                	jmp    c0026ca8 <__floatunsidf+0x3a>
c0026ca4:	31 c0                	xor    eax,eax
c0026ca6:	31 d2                	xor    edx,edx
c0026ca8:	5b                   	pop    ebx
c0026ca9:	5e                   	pop    esi
c0026caa:	5d                   	pop    ebp
c0026cab:	c3                   	ret    

c0026cac <__fixdfsi>:
c0026cac:	55                   	push   ebp
c0026cad:	89 e5                	mov    ebp,esp
c0026caf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026cb2:	89 d1                	mov    ecx,edx
c0026cb4:	c1 e1 0b             	shl    ecx,0xb
c0026cb7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026cc0:	c1 e8 15             	shr    eax,0x15
c0026cc3:	09 c1                	or     ecx,eax
c0026cc5:	c1 fa 14             	sar    edx,0x14
c0026cc8:	78 1f                	js     c0026ce9 <__fixdfsi+0x3d>
c0026cca:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0026cd0:	31 c0                	xor    eax,eax
c0026cd2:	83 fa 1e             	cmp    edx,0x1e
c0026cd5:	77 40                	ja     c0026d17 <__fixdfsi+0x6b>
c0026cd7:	89 c8                	mov    eax,ecx
c0026cd9:	0d 00 00 00 80       	or     eax,0x80000000
c0026cde:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026ce3:	29 d1                	sub    ecx,edx
c0026ce5:	d3 e8                	shr    eax,cl
c0026ce7:	eb 2e                	jmp    c0026d17 <__fixdfsi+0x6b>
c0026ce9:	31 c0                	xor    eax,eax
c0026ceb:	81 c2 01 04 00 00    	add    edx,0x401
c0026cf1:	78 24                	js     c0026d17 <__fixdfsi+0x6b>
c0026cf3:	83 fa 1e             	cmp    edx,0x1e
c0026cf6:	7e 09                	jle    c0026d01 <__fixdfsi+0x55>
c0026cf8:	83 fa 1f             	cmp    edx,0x1f
c0026cfb:	75 18                	jne    c0026d15 <__fixdfsi+0x69>
c0026cfd:	85 c9                	test   ecx,ecx
c0026cff:	75 14                	jne    c0026d15 <__fixdfsi+0x69>
c0026d01:	89 c8                	mov    eax,ecx
c0026d03:	0d 00 00 00 80       	or     eax,0x80000000
c0026d08:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026d0d:	29 d1                	sub    ecx,edx
c0026d0f:	d3 e8                	shr    eax,cl
c0026d11:	f7 d8                	neg    eax
c0026d13:	eb 02                	jmp    c0026d17 <__fixdfsi+0x6b>
c0026d15:	31 c0                	xor    eax,eax
c0026d17:	5d                   	pop    ebp
c0026d18:	c3                   	ret    

c0026d19 <__fixunsdfsi>:
c0026d19:	55                   	push   ebp
c0026d1a:	89 e5                	mov    ebp,esp
c0026d1c:	53                   	push   ebx
c0026d1d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026d20:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026d23:	89 d3                	mov    ebx,edx
c0026d25:	c1 fb 14             	sar    ebx,0x14
c0026d28:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0026d2e:	31 c0                	xor    eax,eax
c0026d30:	83 fb 1f             	cmp    ebx,0x1f
c0026d33:	77 1d                	ja     c0026d52 <__fixunsdfsi+0x39>
c0026d35:	89 d0                	mov    eax,edx
c0026d37:	c1 e0 0b             	shl    eax,0xb
c0026d3a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026d3f:	c1 e9 15             	shr    ecx,0x15
c0026d42:	09 c8                	or     eax,ecx
c0026d44:	0d 00 00 00 80       	or     eax,0x80000000
c0026d49:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026d4e:	29 d9                	sub    ecx,ebx
c0026d50:	d3 e8                	shr    eax,cl
c0026d52:	5b                   	pop    ebx
c0026d53:	5d                   	pop    ebp
c0026d54:	c3                   	ret    

c0026d55 <__cmpdf2>:
c0026d55:	55                   	push   ebp
c0026d56:	89 e5                	mov    ebp,esp
c0026d58:	57                   	push   edi
c0026d59:	56                   	push   esi
c0026d5a:	53                   	push   ebx
c0026d5b:	83 ec 0c             	sub    esp,0xc
c0026d5e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0026d61:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026d64:	89 ca                	mov    edx,ecx
c0026d66:	c1 ea 14             	shr    edx,0x14
c0026d69:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0026d6f:	89 cb                	mov    ebx,ecx
c0026d71:	c1 fb 1f             	sar    ebx,0x1f
c0026d74:	31 da                	xor    edx,ebx
c0026d76:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026d79:	89 df                	mov    edi,ebx
c0026d7b:	c1 e7 0b             	shl    edi,0xb
c0026d7e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026d81:	c1 e1 0b             	shl    ecx,0xb
c0026d84:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026d8a:	c1 eb 15             	shr    ebx,0x15
c0026d8d:	09 d9                	or     ecx,ebx
c0026d8f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0026d92:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0026d95:	89 ce                	mov    esi,ecx
c0026d97:	c1 ee 14             	shr    esi,0x14
c0026d9a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026da0:	89 cb                	mov    ebx,ecx
c0026da2:	c1 fb 1f             	sar    ebx,0x1f
c0026da5:	31 de                	xor    esi,ebx
c0026da7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0026daa:	89 df                	mov    edi,ebx
c0026dac:	c1 e7 0b             	shl    edi,0xb
c0026daf:	c1 e1 0b             	shl    ecx,0xb
c0026db2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026db8:	c1 eb 15             	shr    ebx,0x15
c0026dbb:	09 d9                	or     ecx,ebx
c0026dbd:	89 d3                	mov    ebx,edx
c0026dbf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026dc5:	43                   	inc    ebx
c0026dc6:	83 fb 01             	cmp    ebx,0x1
c0026dc9:	77 08                	ja     c0026dd3 <__cmpdf2+0x7e>
c0026dcb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026dce:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026dd1:	75 68                	jne    c0026e3b <__cmpdf2+0xe6>
c0026dd3:	89 f3                	mov    ebx,esi
c0026dd5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026ddb:	43                   	inc    ebx
c0026ddc:	83 fb 01             	cmp    ebx,0x1
c0026ddf:	77 06                	ja     c0026de7 <__cmpdf2+0x92>
c0026de1:	89 fb                	mov    ebx,edi
c0026de3:	09 cb                	or     ebx,ecx
c0026de5:	75 54                	jne    c0026e3b <__cmpdf2+0xe6>
c0026de7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026dea:	09 f8                	or     eax,edi
c0026dec:	09 c8                	or     eax,ecx
c0026dee:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0026df1:	75 12                	jne    c0026e05 <__cmpdf2+0xb0>
c0026df3:	8d 42 01             	lea    eax,[edx+0x1]
c0026df6:	83 f8 01             	cmp    eax,0x1
c0026df9:	77 0a                	ja     c0026e05 <__cmpdf2+0xb0>
c0026dfb:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026dfe:	31 c0                	xor    eax,eax
c0026e00:	83 fb 01             	cmp    ebx,0x1
c0026e03:	76 36                	jbe    c0026e3b <__cmpdf2+0xe6>
c0026e05:	b8 01 00 00 00       	mov    eax,0x1
c0026e0a:	39 f2                	cmp    edx,esi
c0026e0c:	7f 2d                	jg     c0026e3b <__cmpdf2+0xe6>
c0026e0e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026e13:	7c 26                	jl     c0026e3b <__cmpdf2+0xe6>
c0026e15:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026e18:	77 07                	ja     c0026e21 <__cmpdf2+0xcc>
c0026e1a:	72 16                	jb     c0026e32 <__cmpdf2+0xdd>
c0026e1c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0026e1f:	76 0a                	jbe    c0026e2b <__cmpdf2+0xd6>
c0026e21:	89 d0                	mov    eax,edx
c0026e23:	c1 f8 1f             	sar    eax,0x1f
c0026e26:	83 c8 01             	or     eax,0x1
c0026e29:	eb 10                	jmp    c0026e3b <__cmpdf2+0xe6>
c0026e2b:	b8 00 00 00 00       	mov    eax,0x0
c0026e30:	73 09                	jae    c0026e3b <__cmpdf2+0xe6>
c0026e32:	89 d0                	mov    eax,edx
c0026e34:	c1 f8 1f             	sar    eax,0x1f
c0026e37:	83 e0 02             	and    eax,0x2
c0026e3a:	48                   	dec    eax
c0026e3b:	83 c4 0c             	add    esp,0xc
c0026e3e:	5b                   	pop    ebx
c0026e3f:	5e                   	pop    esi
c0026e40:	5f                   	pop    edi
c0026e41:	5d                   	pop    ebp
c0026e42:	c3                   	ret    

c0026e43 <__eqdf2>:
c0026e43:	55                   	push   ebp
c0026e44:	89 e5                	mov    ebp,esp
c0026e46:	50                   	push   eax
c0026e47:	6a 01                	push   0x1
c0026e49:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026e4c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026e4f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e55:	e8 fb fe ff ff       	call   c0026d55 <__cmpdf2>
c0026e5a:	83 c4 18             	add    esp,0x18
c0026e5d:	c9                   	leave  
c0026e5e:	c3                   	ret    

c0026e5f <__nedf2>:
c0026e5f:	eb e2                	jmp    c0026e43 <__eqdf2>

c0026e61 <__gtdf2>:
c0026e61:	55                   	push   ebp
c0026e62:	89 e5                	mov    ebp,esp
c0026e64:	50                   	push   eax
c0026e65:	6a ff                	push   0xffffffff
c0026e67:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026e6a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026e6d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e73:	e8 dd fe ff ff       	call   c0026d55 <__cmpdf2>
c0026e78:	83 c4 18             	add    esp,0x18
c0026e7b:	c9                   	leave  
c0026e7c:	c3                   	ret    

c0026e7d <__gedf2>:
c0026e7d:	eb e2                	jmp    c0026e61 <__gtdf2>

c0026e7f <__ltdf2>:
c0026e7f:	eb c2                	jmp    c0026e43 <__eqdf2>

c0026e81 <__ledf2>:
c0026e81:	eb c0                	jmp    c0026e43 <__eqdf2>

c0026e83 <__truncdfsf2>:
c0026e83:	55                   	push   ebp
c0026e84:	89 e5                	mov    ebp,esp
c0026e86:	57                   	push   edi
c0026e87:	56                   	push   esi
c0026e88:	53                   	push   ebx
c0026e89:	83 ec 0c             	sub    esp,0xc
c0026e8c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026e8f:	89 d1                	mov    ecx,edx
c0026e91:	c1 f9 14             	sar    ecx,0x14
c0026e94:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026e97:	89 df                	mov    edi,ebx
c0026e99:	c1 e7 0b             	shl    edi,0xb
c0026e9c:	89 d0                	mov    eax,edx
c0026e9e:	c1 e0 0b             	shl    eax,0xb
c0026ea1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026ea6:	c1 eb 15             	shr    ebx,0x15
c0026ea9:	09 d8                	or     eax,ebx
c0026eab:	89 cb                	mov    ebx,ecx
c0026ead:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026eb3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0026eb9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0026ebf:	0f 86 9e 00 00 00    	jbe    c0026f63 <__truncdfsf2+0xe0>
c0026ec5:	85 db                	test   ebx,ebx
c0026ec7:	75 0a                	jne    c0026ed3 <__truncdfsf2+0x50>
c0026ec9:	c1 fa 17             	sar    edx,0x17
c0026ecc:	30 d2                	xor    dl,dl
c0026ece:	e9 84 00 00 00       	jmp    c0026f57 <__truncdfsf2+0xd4>
c0026ed3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0026ed9:	83 fe 83             	cmp    esi,0xffffff83
c0026edc:	7d 4b                	jge    c0026f29 <__truncdfsf2+0xa6>
c0026ede:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0026ee3:	29 f1                	sub    ecx,esi
c0026ee5:	83 f9 1f             	cmp    ecx,0x1f
c0026ee8:	7f 6b                	jg     c0026f55 <__truncdfsf2+0xd2>
c0026eea:	0d 00 00 00 80       	or     eax,0x80000000
c0026eef:	89 c3                	mov    ebx,eax
c0026ef1:	d3 eb                	shr    ebx,cl
c0026ef3:	be 01 00 00 00       	mov    esi,0x1
c0026ef8:	d3 e6                	shl    esi,cl
c0026efa:	4e                   	dec    esi
c0026efb:	21 f0                	and    eax,esi
c0026efd:	09 f8                	or     eax,edi
c0026eff:	0f 95 c0             	setne  al
c0026f02:	0f b6 c0             	movzx  eax,al
c0026f05:	09 c3                	or     ebx,eax
c0026f07:	89 d9                	mov    ecx,ebx
c0026f09:	c1 e9 08             	shr    ecx,0x8
c0026f0c:	f6 c3 7f             	test   bl,0x7f
c0026f0f:	0f 95 c0             	setne  al
c0026f12:	09 c8                	or     eax,ecx
c0026f14:	83 e0 01             	and    eax,0x1
c0026f17:	c1 eb 07             	shr    ebx,0x7
c0026f1a:	21 c3                	and    ebx,eax
c0026f1c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0026f22:	09 d1                	or     ecx,edx
c0026f24:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0026f27:	eb 76                	jmp    c0026f9f <__truncdfsf2+0x11c>
c0026f29:	83 c6 80             	add    esi,0xffffff80
c0026f2c:	7e 1d                	jle    c0026f4b <__truncdfsf2+0xc8>
c0026f2e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0026f34:	75 0b                	jne    c0026f41 <__truncdfsf2+0xbe>
c0026f36:	09 f8                	or     eax,edi
c0026f38:	74 09                	je     c0026f43 <__truncdfsf2+0xc0>
c0026f3a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0026f3f:	eb 02                	jmp    c0026f43 <__truncdfsf2+0xc0>
c0026f41:	31 c0                	xor    eax,eax
c0026f43:	c1 fa 17             	sar    edx,0x17
c0026f46:	80 ca ff             	or     dl,0xff
c0026f49:	eb 0e                	jmp    c0026f59 <__truncdfsf2+0xd6>
c0026f4b:	c1 fa 1f             	sar    edx,0x1f
c0026f4e:	c1 e2 08             	shl    edx,0x8
c0026f51:	09 ca                	or     edx,ecx
c0026f53:	eb 04                	jmp    c0026f59 <__truncdfsf2+0xd6>
c0026f55:	31 d2                	xor    edx,edx
c0026f57:	31 c0                	xor    eax,eax
c0026f59:	c1 e2 17             	shl    edx,0x17
c0026f5c:	c1 e8 08             	shr    eax,0x8
c0026f5f:	09 d0                	or     eax,edx
c0026f61:	eb 3c                	jmp    c0026f9f <__truncdfsf2+0x11c>
c0026f63:	81 e9 80 03 00 00    	sub    ecx,0x380
c0026f69:	89 ca                	mov    edx,ecx
c0026f6b:	c1 fa 0b             	sar    edx,0xb
c0026f6e:	c1 e2 08             	shl    edx,0x8
c0026f71:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026f74:	31 db                	xor    ebx,ebx
c0026f76:	85 ff                	test   edi,edi
c0026f78:	0f 95 c3             	setne  bl
c0026f7b:	09 d8                	or     eax,ebx
c0026f7d:	89 c3                	mov    ebx,eax
c0026f7f:	c1 eb 08             	shr    ebx,0x8
c0026f82:	a8 7f                	test   al,0x7f
c0026f84:	0f 95 c2             	setne  dl
c0026f87:	89 d6                	mov    esi,edx
c0026f89:	09 de                	or     esi,ebx
c0026f8b:	83 e6 01             	and    esi,0x1
c0026f8e:	c1 e8 07             	shr    eax,0x7
c0026f91:	21 f0                	and    eax,esi
c0026f93:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026f96:	09 ca                	or     edx,ecx
c0026f98:	c1 e2 17             	shl    edx,0x17
c0026f9b:	09 da                	or     edx,ebx
c0026f9d:	01 d0                	add    eax,edx
c0026f9f:	83 c4 0c             	add    esp,0xc
c0026fa2:	5b                   	pop    ebx
c0026fa3:	5e                   	pop    esi
c0026fa4:	5f                   	pop    edi
c0026fa5:	5d                   	pop    ebp
c0026fa6:	c3                   	ret    

c0026fa7 <__extendsfdf2>:
c0026fa7:	55                   	push   ebp
c0026fa8:	89 e5                	mov    ebp,esp
c0026faa:	57                   	push   edi
c0026fab:	56                   	push   esi
c0026fac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026faf:	89 d1                	mov    ecx,edx
c0026fb1:	c1 f9 17             	sar    ecx,0x17
c0026fb4:	c1 e2 08             	shl    edx,0x8
c0026fb7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026fbd:	89 c8                	mov    eax,ecx
c0026fbf:	80 e4 f8             	and    ah,0xf8
c0026fc2:	8d 71 01             	lea    esi,[ecx+0x1]
c0026fc5:	81 e6 fe 00 00 00    	and    esi,0xfe
c0026fcb:	75 27                	jne    c0026ff4 <__extendsfdf2+0x4d>
c0026fcd:	81 e1 ff 00 00 00    	and    ecx,0xff
c0026fd3:	75 18                	jne    c0026fed <__extendsfdf2+0x46>
c0026fd5:	85 d2                	test   edx,edx
c0026fd7:	74 20                	je     c0026ff9 <__extendsfdf2+0x52>
c0026fd9:	41                   	inc    ecx
c0026fda:	01 d2                	add    edx,edx
c0026fdc:	79 fb                	jns    c0026fd9 <__extendsfdf2+0x32>
c0026fde:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026fe4:	29 c8                	sub    eax,ecx
c0026fe6:	05 81 03 00 00       	add    eax,0x381
c0026feb:	eb 0c                	jmp    c0026ff9 <__extendsfdf2+0x52>
c0026fed:	05 00 07 00 00       	add    eax,0x700
c0026ff2:	eb 05                	jmp    c0026ff9 <__extendsfdf2+0x52>
c0026ff4:	05 80 03 00 00       	add    eax,0x380
c0026ff9:	c1 e0 14             	shl    eax,0x14
c0026ffc:	89 c1                	mov    ecx,eax
c0026ffe:	89 d0                	mov    eax,edx
c0027000:	c1 e8 0b             	shr    eax,0xb
c0027003:	09 c1                	or     ecx,eax
c0027005:	c1 e2 15             	shl    edx,0x15
c0027008:	89 d0                	mov    eax,edx
c002700a:	89 ca                	mov    edx,ecx
c002700c:	5e                   	pop    esi
c002700d:	5f                   	pop    edi
c002700e:	5d                   	pop    ebp
c002700f:	c3                   	ret    

c0027010 <fabs>:
c0027010:	83 ec 0c             	sub    esp,0xc
c0027013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027017:	89 04 24             	mov    DWORD PTR [esp],eax
c002701a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002701e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027023:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027027:	dd 04 24             	fld    QWORD PTR [esp]
c002702a:	83 c4 0c             	add    esp,0xc
c002702d:	c3                   	ret    
c002702e:	66 90                	xchg   ax,ax

c0027030 <lrint>:
c0027030:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027034:	83 ec 04             	sub    esp,0x4
c0027037:	db 1c 24             	fistp  DWORD PTR [esp]
c002703a:	58                   	pop    eax
c002703b:	c3                   	ret    

c002703c <lrintf>:
c002703c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027040:	83 ec 04             	sub    esp,0x4
c0027043:	db 1c 24             	fistp  DWORD PTR [esp]
c0027046:	58                   	pop    eax
c0027047:	c3                   	ret    

Disassembly of section .init:

c0027048 <_init>:
c0027048:	55                   	push   ebp
c0027049:	89 e5                	mov    ebp,esp
c002704b:	e8 c8 90 fd ff       	call   c0000118 <frame_dummy>
c0027050:	e8 63 e0 ff ff       	call   c00250b8 <__do_global_ctors_aux>
c0027055:	5d                   	pop    ebp
c0027056:	c3                   	ret    

Disassembly of section .fini:

c0027057 <_fini>:
c0027057:	55                   	push   ebp
c0027058:	89 e5                	mov    ebp,esp
c002705a:	e8 49 90 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002705f:	5d                   	pop    ebp
c0027060:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027062 <Computer::~Computer()>:
c0027062:	83 ec 0c             	sub    esp,0xc
c0027065:	ba f0 8a 02 c0       	mov    edx,0xc0028af0
c002706a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002706e:	89 10                	mov    DWORD PTR [eax],edx
c0027070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027074:	83 ec 0c             	sub    esp,0xc
c0027077:	50                   	push   eax
c0027078:	e8 c5 c9 fe ff       	call   c0013a42 <Device::~Device()>
c002707d:	83 c4 10             	add    esp,0x10
c0027080:	90                   	nop
c0027081:	83 c4 0c             	add    esp,0xc
c0027084:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027086 <Computer::~Computer()>:
c0027086:	83 ec 0c             	sub    esp,0xc
c0027089:	83 ec 0c             	sub    esp,0xc
c002708c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027090:	e8 cd ff ff ff       	call   c0027062 <Computer::~Computer()>
c0027095:	83 c4 10             	add    esp,0x10
c0027098:	83 ec 08             	sub    esp,0x8
c002709b:	68 ec 01 00 00       	push   0x1ec
c00270a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00270a4:	e8 f8 b5 fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c00270a9:	83 c4 10             	add    esp,0x10
c00270ac:	83 c4 0c             	add    esp,0xc
c00270af:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00270b0 <idleCommon()>:
c00270b0:	83 ec 0c             	sub    esp,0xc
c00270b3:	e8 72 5c ff ff       	call   c001cd2a <lockScheduler()>
c00270b8:	e8 a9 5f ff ff       	call   c001d066 <schedule()>
c00270bd:	83 c4 0c             	add    esp,0xc
c00270c0:	e9 67 5c ff ff       	jmp    c001cd2c <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00270c6 <LinkedList<UnixFile>::~LinkedList()>:
c00270c6:	90                   	nop
c00270c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00270c8 <LinkedList<UnixFile>::LinkedList()>:
c00270c8:	83 ec 0c             	sub    esp,0xc
c00270cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00270d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00270e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270e4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00270eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00270f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027104:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002710b:	83 ec 0c             	sub    esp,0xc
c002710e:	68 66 8d 02 c0       	push   0xc0028d66
c0027113:	e8 69 b6 fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0027118:	83 c4 10             	add    esp,0x10
c002711b:	90                   	nop
c002711c:	83 c4 0c             	add    esp,0xc
c002711f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027120 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027120:	83 ec 0c             	sub    esp,0xc
c0027123:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027128:	75 10                	jne    c002713a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002712a:	83 ec 0c             	sub    esp,0xc
c002712d:	68 80 8d 02 c0       	push   0xc0028d80
c0027132:	e8 64 27 ff ff       	call   c001989b <Krnl::panic(char const*)>
c0027137:	83 c4 10             	add    esp,0x10
c002713a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002713e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027140:	85 c0                	test   eax,eax
c0027142:	74 34                	je     c0027178 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027148:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002714b:	85 c0                	test   eax,eax
c002714d:	74 29                	je     c0027178 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002714f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027153:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027156:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002715a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002715d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027161:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027165:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002716c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002716f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027176:	eb 65                	jmp    c00271dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002717c:	8b 00                	mov    eax,DWORD PTR [eax]
c002717e:	85 c0                	test   eax,eax
c0027180:	75 4b                	jne    c00271cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027186:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027189:	85 c0                	test   eax,eax
c002718b:	75 40                	jne    c00271cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002718d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027191:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027195:	89 10                	mov    DWORD PTR [eax],edx
c0027197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002719b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002719f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00271a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00271a9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00271b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00271b7:	85 c0                	test   eax,eax
c00271b9:	74 22                	je     c00271dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00271bb:	83 ec 0c             	sub    esp,0xc
c00271be:	68 a2 8d 02 c0       	push   0xc0028da2
c00271c3:	e8 d3 26 ff ff       	call   c001989b <Krnl::panic(char const*)>
c00271c8:	83 c4 10             	add    esp,0x10
c00271cb:	eb 10                	jmp    c00271dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00271cd:	83 ec 0c             	sub    esp,0xc
c00271d0:	68 ac 8d 02 c0       	push   0xc0028dac
c00271d5:	e8 c1 26 ff ff       	call   c001989b <Krnl::panic(char const*)>
c00271da:	83 c4 10             	add    esp,0x10
c00271dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00271e4:	8d 50 01             	lea    edx,[eax+0x1]
c00271e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271eb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00271ee:	90                   	nop
c00271ef:	83 c4 0c             	add    esp,0xc
c00271f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00271f4 <LinkedList<UnixFile>::getFirstElement()>:
c00271f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00271f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00271fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00271fc <LinkedList<UnixFile>::removeFirst()>:
c00271fc:	83 ec 0c             	sub    esp,0xc
c00271ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027203:	8b 00                	mov    eax,DWORD PTR [eax]
c0027205:	85 c0                	test   eax,eax
c0027207:	75 12                	jne    c002721b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027209:	83 ec 0c             	sub    esp,0xc
c002720c:	68 b8 8d 02 c0       	push   0xc0028db8
c0027211:	e8 85 26 ff ff       	call   c001989b <Krnl::panic(char const*)>
c0027216:	83 c4 10             	add    esp,0x10
c0027219:	eb 7e                	jmp    c0027299 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002721b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002721f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027222:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027225:	85 c0                	test   eax,eax
c0027227:	74 10                	je     c0027239 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027229:	83 ec 0c             	sub    esp,0xc
c002722c:	68 03 8e 02 c0       	push   0xc0028e03
c0027231:	e8 65 26 ff ff       	call   c001989b <Krnl::panic(char const*)>
c0027236:	83 c4 10             	add    esp,0x10
c0027239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002723d:	8b 00                	mov    eax,DWORD PTR [eax]
c002723f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027242:	85 c0                	test   eax,eax
c0027244:	75 33                	jne    c0027279 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002724a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027254:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002725b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002725f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027262:	83 f8 01             	cmp    eax,0x1
c0027265:	74 21                	je     c0027288 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027267:	83 ec 0c             	sub    esp,0xc
c002726a:	68 dc 8d 02 c0       	push   0xc0028ddc
c002726f:	e8 27 26 ff ff       	call   c001989b <Krnl::panic(char const*)>
c0027274:	83 c4 10             	add    esp,0x10
c0027277:	eb 0f                	jmp    c0027288 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002727d:	8b 00                	mov    eax,DWORD PTR [eax]
c002727f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027286:	89 10                	mov    DWORD PTR [eax],edx
c0027288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002728c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002728f:	8d 50 ff             	lea    edx,[eax-0x1]
c0027292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027296:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027299:	83 c4 0c             	add    esp,0xc
c002729c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002729e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002729e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00272a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00272a5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00272a6 <DriverlessDevice::~DriverlessDevice()>:
c00272a6:	ba c4 94 02 c0       	mov    edx,0xc00294c4
c00272ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00272af:	89 10                	mov    DWORD PTR [eax],edx
c00272b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00272b5:	50                   	push   eax
c00272b6:	e8 87 c7 fe ff       	call   c0013a42 <Device::~Device()>
c00272bb:	83 c4 04             	add    esp,0x4
c00272be:	90                   	nop
c00272bf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00272c0 <DriverlessDevice::~DriverlessDevice()>:
c00272c0:	83 ec 0c             	sub    esp,0xc
c00272c3:	83 ec 0c             	sub    esp,0xc
c00272c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272ca:	e8 d7 ff ff ff       	call   c00272a6 <DriverlessDevice::~DriverlessDevice()>
c00272cf:	83 c4 10             	add    esp,0x10
c00272d2:	83 ec 08             	sub    esp,0x8
c00272d5:	68 58 01 00 00       	push   0x158
c00272da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272de:	e8 be b3 fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c00272e3:	83 c4 10             	add    esp,0x10
c00272e6:	83 c4 0c             	add    esp,0xc
c00272e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00272ea <LinkedList<Device>::addElement(Device*)>:
c00272ea:	83 ec 0c             	sub    esp,0xc
c00272ed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00272f2:	75 10                	jne    c0027304 <LinkedList<Device>::addElement(Device*)+0x1a>
c00272f4:	83 ec 0c             	sub    esp,0xc
c00272f7:	68 80 8d 02 c0       	push   0xc0028d80
c00272fc:	e8 9a 25 ff ff       	call   c001989b <Krnl::panic(char const*)>
c0027301:	83 c4 10             	add    esp,0x10
c0027304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027308:	8b 00                	mov    eax,DWORD PTR [eax]
c002730a:	85 c0                	test   eax,eax
c002730c:	74 3a                	je     c0027348 <LinkedList<Device>::addElement(Device*)+0x5e>
c002730e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027312:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027315:	85 c0                	test   eax,eax
c0027317:	74 2f                	je     c0027348 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002731d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027320:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027324:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002732a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002732e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027332:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027339:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002733c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027346:	eb 68                	jmp    c00273b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002734c:	8b 00                	mov    eax,DWORD PTR [eax]
c002734e:	85 c0                	test   eax,eax
c0027350:	75 4e                	jne    c00273a0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027356:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027359:	85 c0                	test   eax,eax
c002735b:	75 43                	jne    c00273a0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002735d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027361:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027365:	89 10                	mov    DWORD PTR [eax],edx
c0027367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002736b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002736f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027376:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027379:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027387:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002738a:	85 c0                	test   eax,eax
c002738c:	74 22                	je     c00273b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002738e:	83 ec 0c             	sub    esp,0xc
c0027391:	68 a2 8d 02 c0       	push   0xc0028da2
c0027396:	e8 00 25 ff ff       	call   c001989b <Krnl::panic(char const*)>
c002739b:	83 c4 10             	add    esp,0x10
c002739e:	eb 10                	jmp    c00273b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00273a0:	83 ec 0c             	sub    esp,0xc
c00273a3:	68 ac 8d 02 c0       	push   0xc0028dac
c00273a8:	e8 ee 24 ff ff       	call   c001989b <Krnl::panic(char const*)>
c00273ad:	83 c4 10             	add    esp,0x10
c00273b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273b7:	8d 50 01             	lea    edx,[eax+0x1]
c00273ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00273c1:	90                   	nop
c00273c2:	83 c4 0c             	add    esp,0xc
c00273c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00273c6 <LinkedList<Device>::LinkedList()>:
c00273c6:	83 ec 0c             	sub    esp,0xc
c00273c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00273d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00273de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273e2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00273e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00273f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00273fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027402:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027409:	83 ec 0c             	sub    esp,0xc
c002740c:	68 66 8d 02 c0       	push   0xc0028d66
c0027411:	e8 6b b3 fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c0027416:	83 c4 10             	add    esp,0x10
c0027419:	90                   	nop
c002741a:	83 c4 0c             	add    esp,0xc
c002741d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002741e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002741e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027422:	8b 00                	mov    eax,DWORD PTR [eax]
c0027424:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0027426 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0027426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002742a:	8b 00                	mov    eax,DWORD PTR [eax]
c002742c:	85 c0                	test   eax,eax
c002742e:	75 0e                	jne    c002743e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027434:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027437:	85 c0                	test   eax,eax
c0027439:	75 03                	jne    c002743e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002743b:	b0 01                	mov    al,0x1
c002743d:	c3                   	ret    
c002743e:	b0 00                	mov    al,0x0
c0027440:	90                   	nop
c0027441:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027442 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027442:	83 ec 0c             	sub    esp,0xc
c0027445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027449:	8b 00                	mov    eax,DWORD PTR [eax]
c002744b:	85 c0                	test   eax,eax
c002744d:	75 15                	jne    c0027464 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002744f:	83 ec 0c             	sub    esp,0xc
c0027452:	68 b8 8d 02 c0       	push   0xc0028db8
c0027457:	e8 3f 24 ff ff       	call   c001989b <Krnl::panic(char const*)>
c002745c:	83 c4 10             	add    esp,0x10
c002745f:	e9 88 00 00 00       	jmp    c00274ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0027464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027468:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002746b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002746e:	85 c0                	test   eax,eax
c0027470:	0f 95 c0             	setne  al
c0027473:	84 c0                	test   al,al
c0027475:	74 10                	je     c0027487 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0027477:	83 ec 0c             	sub    esp,0xc
c002747a:	68 03 8e 02 c0       	push   0xc0028e03
c002747f:	e8 17 24 ff ff       	call   c001989b <Krnl::panic(char const*)>
c0027484:	83 c4 10             	add    esp,0x10
c0027487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002748b:	8b 00                	mov    eax,DWORD PTR [eax]
c002748d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0027490:	85 c0                	test   eax,eax
c0027492:	0f 94 c0             	sete   al
c0027495:	84 c0                	test   al,al
c0027497:	74 33                	je     c00274cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0027499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002749d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00274a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00274ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00274b5:	83 f8 01             	cmp    eax,0x1
c00274b8:	74 21                	je     c00274db <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00274ba:	83 ec 0c             	sub    esp,0xc
c00274bd:	68 dc 8d 02 c0       	push   0xc0028ddc
c00274c2:	e8 d4 23 ff ff       	call   c001989b <Krnl::panic(char const*)>
c00274c7:	83 c4 10             	add    esp,0x10
c00274ca:	eb 0f                	jmp    c00274db <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00274cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00274d2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00274d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274d9:	89 10                	mov    DWORD PTR [eax],edx
c00274db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00274e2:	8d 50 ff             	lea    edx,[eax-0x1]
c00274e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274e9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00274ec:	83 c4 0c             	add    esp,0xc
c00274ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00274f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00274f0:	83 ec 0c             	sub    esp,0xc
c00274f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00274f8:	75 10                	jne    c002750a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00274fa:	83 ec 0c             	sub    esp,0xc
c00274fd:	68 80 8d 02 c0       	push   0xc0028d80
c0027502:	e8 94 23 ff ff       	call   c001989b <Krnl::panic(char const*)>
c0027507:	83 c4 10             	add    esp,0x10
c002750a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002750e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027510:	85 c0                	test   eax,eax
c0027512:	74 34                	je     c0027548 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0027514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027518:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002751b:	85 c0                	test   eax,eax
c002751d:	74 29                	je     c0027548 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002751f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027523:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027526:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002752a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002752d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027531:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027535:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002753c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002753f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027546:	eb 65                	jmp    c00275ad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0027548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002754c:	8b 00                	mov    eax,DWORD PTR [eax]
c002754e:	85 c0                	test   eax,eax
c0027550:	75 4b                	jne    c002759d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0027552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027556:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027559:	85 c0                	test   eax,eax
c002755b:	75 40                	jne    c002759d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002755d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027561:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027565:	89 10                	mov    DWORD PTR [eax],edx
c0027567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002756b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002756f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027576:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027579:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027584:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027587:	85 c0                	test   eax,eax
c0027589:	74 22                	je     c00275ad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002758b:	83 ec 0c             	sub    esp,0xc
c002758e:	68 a2 8d 02 c0       	push   0xc0028da2
c0027593:	e8 03 23 ff ff       	call   c001989b <Krnl::panic(char const*)>
c0027598:	83 c4 10             	add    esp,0x10
c002759b:	eb 10                	jmp    c00275ad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002759d:	83 ec 0c             	sub    esp,0xc
c00275a0:	68 ac 8d 02 c0       	push   0xc0028dac
c00275a5:	e8 f1 22 ff ff       	call   c001989b <Krnl::panic(char const*)>
c00275aa:	83 c4 10             	add    esp,0x10
c00275ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00275b4:	8d 50 01             	lea    edx,[eax+0x1]
c00275b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00275be:	90                   	nop
c00275bf:	83 c4 0c             	add    esp,0xc
c00275c2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00275c4 <ACPI::~ACPI()>:
c00275c4:	83 ec 0c             	sub    esp,0xc
c00275c7:	ba 68 9d 02 c0       	mov    edx,0xc0029d68
c00275cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275d0:	89 10                	mov    DWORD PTR [eax],edx
c00275d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275d6:	83 ec 0c             	sub    esp,0xc
c00275d9:	50                   	push   eax
c00275da:	e8 63 c4 fe ff       	call   c0013a42 <Device::~Device()>
c00275df:	83 c4 10             	add    esp,0x10
c00275e2:	90                   	nop
c00275e3:	83 c4 0c             	add    esp,0xc
c00275e6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00275e8 <ACPI::~ACPI()>:
c00275e8:	83 ec 0c             	sub    esp,0xc
c00275eb:	83 ec 0c             	sub    esp,0xc
c00275ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00275f2:	e8 cd ff ff ff       	call   c00275c4 <ACPI::~ACPI()>
c00275f7:	83 c4 10             	add    esp,0x10
c00275fa:	83 ec 08             	sub    esp,0x8
c00275fd:	68 68 22 00 00       	push   0x2268
c0027602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027606:	e8 96 b0 fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c002760b:	83 c4 10             	add    esp,0x10
c002760e:	83 c4 0c             	add    esp,0xc
c0027611:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0027612 <CPU::~CPU()>:
c0027612:	83 ec 0c             	sub    esp,0xc
c0027615:	ba 58 a1 02 c0       	mov    edx,0xc002a158
c002761a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002761e:	89 10                	mov    DWORD PTR [eax],edx
c0027620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027624:	83 ec 0c             	sub    esp,0xc
c0027627:	50                   	push   eax
c0027628:	e8 15 c4 fe ff       	call   c0013a42 <Device::~Device()>
c002762d:	83 c4 10             	add    esp,0x10
c0027630:	90                   	nop
c0027631:	83 c4 0c             	add    esp,0xc
c0027634:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0027636 <CPU::~CPU()>:
c0027636:	83 ec 0c             	sub    esp,0xc
c0027639:	83 ec 0c             	sub    esp,0xc
c002763c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027640:	e8 cd ff ff ff       	call   c0027612 <CPU::~CPU()>
c0027645:	83 c4 10             	add    esp,0x10
c0027648:	83 ec 08             	sub    esp,0x8
c002764b:	68 98 11 00 00       	push   0x1198
c0027650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027654:	e8 48 b0 fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0027659:	83 c4 10             	add    esp,0x10
c002765c:	83 c4 0c             	add    esp,0xc
c002765f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0027660 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0027660:	90                   	nop
c0027661:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0027662 <ThreadControlBlock::ThreadControlBlock()>:
c0027662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027666:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002766d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027671:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0027678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002767c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0027683:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027687:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002768e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027692:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0027696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002769a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002769e:	90                   	nop
c002769f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00276a0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00276a0:	83 ec 0c             	sub    esp,0xc
c00276a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00276ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00276b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276bc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00276c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276c7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00276cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00276d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276dc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00276e3:	83 ec 0c             	sub    esp,0xc
c00276e6:	68 66 8d 02 c0       	push   0xc0028d66
c00276eb:	e8 91 b0 fe ff       	call   c0012781 <Dbg::kprintf(char const*, ...)>
c00276f0:	83 c4 10             	add    esp,0x10
c00276f3:	90                   	nop
c00276f4:	83 c4 0c             	add    esp,0xc
c00276f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00276f8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00276f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00276fc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00276ff:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0027700 <Vm::_FPUState::_FPUState()>:
c0027700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027704:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002770b:	90                   	nop
c002770c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002770e <PCI::~PCI()>:
c002770e:	83 ec 0c             	sub    esp,0xc
c0027711:	ba e4 af 02 c0       	mov    edx,0xc002afe4
c0027716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002771a:	89 10                	mov    DWORD PTR [eax],edx
c002771c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027720:	83 ec 0c             	sub    esp,0xc
c0027723:	50                   	push   eax
c0027724:	e8 29 bd fe ff       	call   c0013452 <Bus::~Bus()>
c0027729:	83 c4 10             	add    esp,0x10
c002772c:	90                   	nop
c002772d:	83 c4 0c             	add    esp,0xc
c0027730:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027732 <PCI::~PCI()>:
c0027732:	83 ec 0c             	sub    esp,0xc
c0027735:	83 ec 0c             	sub    esp,0xc
c0027738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002773c:	e8 cd ff ff ff       	call   c002770e <PCI::~PCI()>
c0027741:	83 c4 10             	add    esp,0x10
c0027744:	83 ec 08             	sub    esp,0x8
c0027747:	68 58 01 00 00       	push   0x158
c002774c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027750:	e8 4c af fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0027755:	83 c4 10             	add    esp,0x10
c0027758:	83 c4 0c             	add    esp,0xc
c002775b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002775c <IDE::~IDE()>:
c002775c:	83 ec 0c             	sub    esp,0xc
c002775f:	ba 48 b2 02 c0       	mov    edx,0xc002b248
c0027764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027768:	89 10                	mov    DWORD PTR [eax],edx
c002776a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002776e:	83 ec 0c             	sub    esp,0xc
c0027771:	50                   	push   eax
c0027772:	e8 bb c7 fe ff       	call   c0013f32 <HardDiskController::~HardDiskController()>
c0027777:	83 c4 10             	add    esp,0x10
c002777a:	90                   	nop
c002777b:	83 c4 0c             	add    esp,0xc
c002777e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0027780 <IDE::~IDE()>:
c0027780:	83 ec 0c             	sub    esp,0xc
c0027783:	83 ec 0c             	sub    esp,0xc
c0027786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002778a:	e8 cd ff ff ff       	call   c002775c <IDE::~IDE()>
c002778f:	83 c4 10             	add    esp,0x10
c0027792:	83 ec 08             	sub    esp,0x8
c0027795:	68 70 02 00 00       	push   0x270
c002779a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002779e:	e8 fe ae fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c00277a3:	83 c4 10             	add    esp,0x10
c00277a6:	83 c4 0c             	add    esp,0xc
c00277a9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00277aa <SATABus::~SATABus()>:
c00277aa:	83 ec 0c             	sub    esp,0xc
c00277ad:	ba 28 b3 02 c0       	mov    edx,0xc002b328
c00277b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277b6:	89 10                	mov    DWORD PTR [eax],edx
c00277b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277bc:	83 ec 0c             	sub    esp,0xc
c00277bf:	50                   	push   eax
c00277c0:	e8 6d c7 fe ff       	call   c0013f32 <HardDiskController::~HardDiskController()>
c00277c5:	83 c4 10             	add    esp,0x10
c00277c8:	90                   	nop
c00277c9:	83 c4 0c             	add    esp,0xc
c00277cc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00277ce <SATABus::~SATABus()>:
c00277ce:	83 ec 0c             	sub    esp,0xc
c00277d1:	83 ec 0c             	sub    esp,0xc
c00277d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277d8:	e8 cd ff ff ff       	call   c00277aa <SATABus::~SATABus()>
c00277dd:	83 c4 10             	add    esp,0x10
c00277e0:	83 ec 08             	sub    esp,0x8
c00277e3:	68 64 01 00 00       	push   0x164
c00277e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277ec:	e8 b0 ae fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c00277f1:	83 c4 10             	add    esp,0x10
c00277f4:	83 c4 0c             	add    esp,0xc
c00277f7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00277f8 <ATA::~ATA()>:
c00277f8:	83 ec 0c             	sub    esp,0xc
c00277fb:	ba 68 b3 02 c0       	mov    edx,0xc002b368
c0027800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027804:	89 10                	mov    DWORD PTR [eax],edx
c0027806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002780a:	83 ec 0c             	sub    esp,0xc
c002780d:	50                   	push   eax
c002780e:	e8 fd c7 fe ff       	call   c0014010 <PhysicalDisk::~PhysicalDisk()>
c0027813:	83 c4 10             	add    esp,0x10
c0027816:	90                   	nop
c0027817:	83 c4 0c             	add    esp,0xc
c002781a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002781c <ATA::~ATA()>:
c002781c:	83 ec 0c             	sub    esp,0xc
c002781f:	83 ec 0c             	sub    esp,0xc
c0027822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027826:	e8 cd ff ff ff       	call   c00277f8 <ATA::~ATA()>
c002782b:	83 c4 10             	add    esp,0x10
c002782e:	83 ec 08             	sub    esp,0x8
c0027831:	68 7c 01 00 00       	push   0x17c
c0027836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002783a:	e8 62 ae fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c002783f:	83 c4 10             	add    esp,0x10
c0027842:	83 c4 0c             	add    esp,0xc
c0027845:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027846 <ATAPI::~ATAPI()>:
c0027846:	83 ec 0c             	sub    esp,0xc
c0027849:	ba d4 b3 02 c0       	mov    edx,0xc002b3d4
c002784e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027852:	89 10                	mov    DWORD PTR [eax],edx
c0027854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027858:	83 ec 0c             	sub    esp,0xc
c002785b:	50                   	push   eax
c002785c:	e8 af c7 fe ff       	call   c0014010 <PhysicalDisk::~PhysicalDisk()>
c0027861:	83 c4 10             	add    esp,0x10
c0027864:	90                   	nop
c0027865:	83 c4 0c             	add    esp,0xc
c0027868:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002786a <ATAPI::~ATAPI()>:
c002786a:	83 ec 0c             	sub    esp,0xc
c002786d:	83 ec 0c             	sub    esp,0xc
c0027870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027874:	e8 cd ff ff ff       	call   c0027846 <ATAPI::~ATAPI()>
c0027879:	83 c4 10             	add    esp,0x10
c002787c:	83 ec 08             	sub    esp,0x8
c002787f:	68 80 01 00 00       	push   0x180
c0027884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027888:	e8 14 ae fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c002788d:	83 c4 10             	add    esp,0x10
c0027890:	83 c4 0c             	add    esp,0xc
c0027893:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0027894 <SATA::~SATA()>:
c0027894:	83 ec 0c             	sub    esp,0xc
c0027897:	ba f8 b4 02 c0       	mov    edx,0xc002b4f8
c002789c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278a0:	89 10                	mov    DWORD PTR [eax],edx
c00278a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278a6:	83 ec 0c             	sub    esp,0xc
c00278a9:	50                   	push   eax
c00278aa:	e8 61 c7 fe ff       	call   c0014010 <PhysicalDisk::~PhysicalDisk()>
c00278af:	83 c4 10             	add    esp,0x10
c00278b2:	90                   	nop
c00278b3:	83 c4 0c             	add    esp,0xc
c00278b6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00278b8 <SATA::~SATA()>:
c00278b8:	83 ec 0c             	sub    esp,0xc
c00278bb:	83 ec 0c             	sub    esp,0xc
c00278be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278c2:	e8 cd ff ff ff       	call   c0027894 <SATA::~SATA()>
c00278c7:	83 c4 10             	add    esp,0x10
c00278ca:	83 ec 08             	sub    esp,0x8
c00278cd:	68 74 01 00 00       	push   0x174
c00278d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278d6:	e8 c6 ad fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c00278db:	83 c4 10             	add    esp,0x10
c00278de:	83 c4 0c             	add    esp,0xc
c00278e1:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00278e2 <AVX::~AVX()>:
c00278e2:	83 ec 0c             	sub    esp,0xc
c00278e5:	ba 34 b5 02 c0       	mov    edx,0xc002b534
c00278ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278ee:	89 10                	mov    DWORD PTR [eax],edx
c00278f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278f4:	83 ec 0c             	sub    esp,0xc
c00278f7:	50                   	push   eax
c00278f8:	e8 97 c7 fe ff       	call   c0014094 <FPU::~FPU()>
c00278fd:	83 c4 10             	add    esp,0x10
c0027900:	90                   	nop
c0027901:	83 c4 0c             	add    esp,0xc
c0027904:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0027906 <AVX::~AVX()>:
c0027906:	83 ec 0c             	sub    esp,0xc
c0027909:	83 ec 0c             	sub    esp,0xc
c002790c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027910:	e8 cd ff ff ff       	call   c00278e2 <AVX::~AVX()>
c0027915:	83 c4 10             	add    esp,0x10
c0027918:	83 ec 08             	sub    esp,0x8
c002791b:	68 58 01 00 00       	push   0x158
c0027920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027924:	e8 78 ad fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0027929:	83 c4 10             	add    esp,0x10
c002792c:	83 c4 0c             	add    esp,0xc
c002792f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0027930 <MMX::~MMX()>:
c0027930:	83 ec 0c             	sub    esp,0xc
c0027933:	ba 74 b5 02 c0       	mov    edx,0xc002b574
c0027938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002793c:	89 10                	mov    DWORD PTR [eax],edx
c002793e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027942:	83 ec 0c             	sub    esp,0xc
c0027945:	50                   	push   eax
c0027946:	e8 49 c7 fe ff       	call   c0014094 <FPU::~FPU()>
c002794b:	83 c4 10             	add    esp,0x10
c002794e:	90                   	nop
c002794f:	83 c4 0c             	add    esp,0xc
c0027952:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0027954 <MMX::~MMX()>:
c0027954:	83 ec 0c             	sub    esp,0xc
c0027957:	83 ec 0c             	sub    esp,0xc
c002795a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002795e:	e8 cd ff ff ff       	call   c0027930 <MMX::~MMX()>
c0027963:	83 c4 10             	add    esp,0x10
c0027966:	83 ec 08             	sub    esp,0x8
c0027969:	68 58 01 00 00       	push   0x158
c002796e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027972:	e8 2a ad fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0027977:	83 c4 10             	add    esp,0x10
c002797a:	83 c4 0c             	add    esp,0xc
c002797d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002797e <SSE::~SSE()>:
c002797e:	83 ec 0c             	sub    esp,0xc
c0027981:	ba b4 b5 02 c0       	mov    edx,0xc002b5b4
c0027986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002798a:	89 10                	mov    DWORD PTR [eax],edx
c002798c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027990:	83 ec 0c             	sub    esp,0xc
c0027993:	50                   	push   eax
c0027994:	e8 fb c6 fe ff       	call   c0014094 <FPU::~FPU()>
c0027999:	83 c4 10             	add    esp,0x10
c002799c:	90                   	nop
c002799d:	83 c4 0c             	add    esp,0xc
c00279a0:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00279a2 <SSE::~SSE()>:
c00279a2:	83 ec 0c             	sub    esp,0xc
c00279a5:	83 ec 0c             	sub    esp,0xc
c00279a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279ac:	e8 cd ff ff ff       	call   c002797e <SSE::~SSE()>
c00279b1:	83 c4 10             	add    esp,0x10
c00279b4:	83 ec 08             	sub    esp,0x8
c00279b7:	68 58 01 00 00       	push   0x158
c00279bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279c0:	e8 dc ac fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c00279c5:	83 c4 10             	add    esp,0x10
c00279c8:	83 c4 0c             	add    esp,0xc
c00279cb:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00279cc <x87::~x87()>:
c00279cc:	83 ec 0c             	sub    esp,0xc
c00279cf:	ba f4 b5 02 c0       	mov    edx,0xc002b5f4
c00279d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279d8:	89 10                	mov    DWORD PTR [eax],edx
c00279da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279de:	83 ec 0c             	sub    esp,0xc
c00279e1:	50                   	push   eax
c00279e2:	e8 ad c6 fe ff       	call   c0014094 <FPU::~FPU()>
c00279e7:	83 c4 10             	add    esp,0x10
c00279ea:	90                   	nop
c00279eb:	83 c4 0c             	add    esp,0xc
c00279ee:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00279f0 <x87::~x87()>:
c00279f0:	83 ec 0c             	sub    esp,0xc
c00279f3:	83 ec 0c             	sub    esp,0xc
c00279f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279fa:	e8 cd ff ff ff       	call   c00279cc <x87::~x87()>
c00279ff:	83 c4 10             	add    esp,0x10
c0027a02:	83 ec 08             	sub    esp,0x8
c0027a05:	68 58 01 00 00       	push   0x158
c0027a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a0e:	e8 8e ac fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0027a13:	83 c4 10             	add    esp,0x10
c0027a16:	83 c4 0c             	add    esp,0xc
c0027a19:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0027a1a <IOAPIC::~IOAPIC()>:
c0027a1a:	83 ec 0c             	sub    esp,0xc
c0027a1d:	ba 4c b7 02 c0       	mov    edx,0xc002b74c
c0027a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a26:	89 10                	mov    DWORD PTR [eax],edx
c0027a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a2c:	83 ec 0c             	sub    esp,0xc
c0027a2f:	50                   	push   eax
c0027a30:	e8 0d c0 fe ff       	call   c0013a42 <Device::~Device()>
c0027a35:	83 c4 10             	add    esp,0x10
c0027a38:	90                   	nop
c0027a39:	83 c4 0c             	add    esp,0xc
c0027a3c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0027a3e <IOAPIC::~IOAPIC()>:
c0027a3e:	83 ec 0c             	sub    esp,0xc
c0027a41:	83 ec 0c             	sub    esp,0xc
c0027a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a48:	e8 cd ff ff ff       	call   c0027a1a <IOAPIC::~IOAPIC()>
c0027a4d:	83 c4 10             	add    esp,0x10
c0027a50:	83 ec 08             	sub    esp,0x8
c0027a53:	68 68 01 00 00       	push   0x168
c0027a58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a5c:	e8 40 ac fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0027a61:	83 c4 10             	add    esp,0x10
c0027a64:	83 c4 0c             	add    esp,0xc
c0027a67:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0027a68 <APIC::~APIC()>:
c0027a68:	83 ec 0c             	sub    esp,0xc
c0027a6b:	ba 04 b7 02 c0       	mov    edx,0xc002b704
c0027a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a74:	89 10                	mov    DWORD PTR [eax],edx
c0027a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a7a:	83 ec 0c             	sub    esp,0xc
c0027a7d:	50                   	push   eax
c0027a7e:	e8 db ca fe ff       	call   c001455e <InterruptController::~InterruptController()>
c0027a83:	83 c4 10             	add    esp,0x10
c0027a86:	90                   	nop
c0027a87:	83 c4 0c             	add    esp,0xc
c0027a8a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0027a8c <APIC::~APIC()>:
c0027a8c:	83 ec 0c             	sub    esp,0xc
c0027a8f:	83 ec 0c             	sub    esp,0xc
c0027a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a96:	e8 cd ff ff ff       	call   c0027a68 <APIC::~APIC()>
c0027a9b:	83 c4 10             	add    esp,0x10
c0027a9e:	83 ec 08             	sub    esp,0x8
c0027aa1:	68 58 21 00 00       	push   0x2158
c0027aa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027aaa:	e8 f2 ab fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0027aaf:	83 c4 10             	add    esp,0x10
c0027ab2:	83 c4 0c             	add    esp,0xc
c0027ab5:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0027ab6 <PIC::~PIC()>:
c0027ab6:	83 ec 0c             	sub    esp,0xc
c0027ab9:	ba 9c b7 02 c0       	mov    edx,0xc002b79c
c0027abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ac2:	89 10                	mov    DWORD PTR [eax],edx
c0027ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ac8:	83 ec 0c             	sub    esp,0xc
c0027acb:	50                   	push   eax
c0027acc:	e8 8d ca fe ff       	call   c001455e <InterruptController::~InterruptController()>
c0027ad1:	83 c4 10             	add    esp,0x10
c0027ad4:	90                   	nop
c0027ad5:	83 c4 0c             	add    esp,0xc
c0027ad8:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0027ada <PIC::~PIC()>:
c0027ada:	83 ec 0c             	sub    esp,0xc
c0027add:	83 ec 0c             	sub    esp,0xc
c0027ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ae4:	e8 cd ff ff ff       	call   c0027ab6 <PIC::~PIC()>
c0027ae9:	83 c4 10             	add    esp,0x10
c0027aec:	83 ec 08             	sub    esp,0x8
c0027aef:	68 58 21 00 00       	push   0x2158
c0027af4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027af8:	e8 a4 ab fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0027afd:	83 c4 10             	add    esp,0x10
c0027b00:	83 c4 0c             	add    esp,0xc
c0027b03:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027b04 <APICTimer::~APICTimer()>:
c0027b04:	83 ec 0c             	sub    esp,0xc
c0027b07:	ba f0 b7 02 c0       	mov    edx,0xc002b7f0
c0027b0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b10:	89 10                	mov    DWORD PTR [eax],edx
c0027b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b16:	83 ec 0c             	sub    esp,0xc
c0027b19:	50                   	push   eax
c0027b1a:	e8 3f e8 fe ff       	call   c001635e <Timer::~Timer()>
c0027b1f:	83 c4 10             	add    esp,0x10
c0027b22:	90                   	nop
c0027b23:	83 c4 0c             	add    esp,0xc
c0027b26:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027b28 <APICTimer::~APICTimer()>:
c0027b28:	83 ec 0c             	sub    esp,0xc
c0027b2b:	83 ec 0c             	sub    esp,0xc
c0027b2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b32:	e8 cd ff ff ff       	call   c0027b04 <APICTimer::~APICTimer()>
c0027b37:	83 c4 10             	add    esp,0x10
c0027b3a:	83 ec 08             	sub    esp,0x8
c0027b3d:	68 60 01 00 00       	push   0x160
c0027b42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b46:	e8 56 ab fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0027b4b:	83 c4 10             	add    esp,0x10
c0027b4e:	83 c4 0c             	add    esp,0xc
c0027b51:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027b52 <PIT::~PIT()>:
c0027b52:	83 ec 0c             	sub    esp,0xc
c0027b55:	ba 40 b8 02 c0       	mov    edx,0xc002b840
c0027b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b5e:	89 10                	mov    DWORD PTR [eax],edx
c0027b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b64:	83 ec 0c             	sub    esp,0xc
c0027b67:	50                   	push   eax
c0027b68:	e8 f1 e7 fe ff       	call   c001635e <Timer::~Timer()>
c0027b6d:	83 c4 10             	add    esp,0x10
c0027b70:	90                   	nop
c0027b71:	83 c4 0c             	add    esp,0xc
c0027b74:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027b76 <PIT::~PIT()>:
c0027b76:	83 ec 0c             	sub    esp,0xc
c0027b79:	83 ec 0c             	sub    esp,0xc
c0027b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b80:	e8 cd ff ff ff       	call   c0027b52 <PIT::~PIT()>
c0027b85:	83 c4 10             	add    esp,0x10
c0027b88:	83 ec 08             	sub    esp,0x8
c0027b8b:	68 5c 01 00 00       	push   0x15c
c0027b90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b94:	e8 08 ab fe ff       	call   c00126a1 <operator delete(void*, unsigned long)>
c0027b99:	83 c4 10             	add    esp,0x10
c0027b9c:	83 c4 0c             	add    esp,0xc
c0027b9f:	c3                   	ret    
