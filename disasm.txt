
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 20 7b 00 00       	call   c0007b40 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 64 44 02 c0       	mov    eax,0xc0024464
c0000025:	3d 64 44 02 c0       	cmp    eax,0xc0024464
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 64 44 02 c0       	push   0xc0024464
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 64 44 02 c0       	mov    eax,0xc0024464
c0000051:	2d 64 44 02 c0       	sub    eax,0xc0024464
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 64 44 02 c0       	push   0xc0024464
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 3c 05 02 c0       	mov    ebx,0xc002053c
c0000097:	81 eb 38 05 02 c0    	sub    ebx,0xc0020538
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 38 05 02 c0       	mov    esi,0xc0020538
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 64 44 02 c0       	push   0xc0024464
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 64 44 02 c0       	push   0xc0024464
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 7f 57 01 00       	call   c0015a2c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 38 a4 00 00       	call   c000a6fd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 5d 57 01 00       	call   c0015a2c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 6a 5c 01 00       	call   c0015f58 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 29 63 01 00       	call   c0016620 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 7f 13 01 00       	jmp    c00116fe <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 40 05 02 c0 02 	test   BYTE PTR [edx-0x3ffdfac0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 40 05 02 c0 01 	test   BYTE PTR [edx-0x3ffdfac0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 40 05 02 c0 08 	test   BYTE PTR [edx-0x3ffdfac0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 40 05 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfac0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 40 05 02 c0 01 	test   BYTE PTR [edx-0x3ffdfac0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 e0 6a 00 00       	call   c00079b8 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 25 6a 00 00       	call   c00079b8 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 0f 6a 00 00       	call   c00079b8 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 eb 69 00 00       	call   c00079b8 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001176:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011b2:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011b7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011c5:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001216:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c0001231:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c00012eb:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c00012f1:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c00012f8:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013be:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013c4:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c00013cb:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 44 06 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf9bc]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 26 7e 01 00       	jmp    c0019bc8 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 50 7e 01 00       	jmp    c0019c08 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 71 7e 01 00       	jmp    c0019c48 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 a0 07 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf860]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 a0 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf860]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 70 30 02 c0       	mov    edx,0xc0023070
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 5c 06 02 c0       	mov    edx,0xc002065c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 62 06 02 c0       	mov    eax,0xc0020662
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 20 07 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf8e0]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 6b 06 02 c0       	mov    eax,0xc002066b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 a0 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf860]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 f0 06 02 c0       	mov    eax,0xc00206f0
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb e0 06 02 c0       	mov    ebx,0xc00206e0
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 c0 06 02 c0       	mov    eax,0xc00206c0
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 d0 06 02 c0       	mov    eax,0xc00206d0
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 72 06 02 c0       	mov    edx,0xc0020672
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 7e 06 02 c0       	mov    edx,0xc002067e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 92 06 02 c0       	mov    edx,0xc0020692
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 b7 1e 00 00       	call   c0007ae6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 af 1e 00 00       	call   c0007af6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c c0 0a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020ac0
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 c0 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ac0
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 c0 08 02 c0       	mov    eax,0xc00208c0
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 00 08 02 c0       	mov    eax,0xc0020800
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 c0 07 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf840]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 c0 0b 02 c0       	push   0xc0020bc0
c000611b:	e8 44 44 01 00       	call   c001a564 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 ce 0b 02 c0       	push   0xc0020bce
c0006153:	e8 0c 44 01 00       	call   c001a564 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 75 43 01 00       	call   c001a508 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 dd 0b 02 c0       	push   0xc0020bdd
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000655e:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c0006564:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006580:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00065f9:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00066f1:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000672f:	05 40 65 02 c0       	add    eax,0xc0026540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00067ee:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 e0 0b 02 c0       	push   0xc0020be0
c0006812:	e8 4d 3d 01 00       	call   c001a564 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 61 3d 01 00       	call   c001a580 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 e5 0b 02 c0 	mov    DWORD PTR [esp],0xc0020be5
c000682c:	e8 33 3d 01 00       	call   c001a564 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006838:	e8 43 3d 01 00       	call   c001a580 <iso_kprintfd>
c000683d:	c7 04 24 eb 0b 02 c0 	mov    DWORD PTR [esp],0xc0020beb
c0006844:	e8 1b 3d 01 00       	call   c001a564 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006850:	e8 2b 3d 01 00       	call   c001a580 <iso_kprintfd>
c0006855:	c7 04 24 f1 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bf1
c000685c:	e8 03 3d 01 00       	call   c001a564 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006868:	e8 13 3d 01 00       	call   c001a580 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068ce:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c000692a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 dd 0b 02 c0       	push   0xc0020bdd
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a06:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a0c:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 65 02 c0       	add    eax,0xc0026550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 fa 0b 02 c0       	push   0xc0020bfa
c0006a31:	e8 2e 3b 01 00       	call   c001a564 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a66:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 05 0c 02 c0       	push   0xc0020c05
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 0c 0c 02 c0       	push   0xc0020c0c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b27:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 13 0c 02 c0       	push   0xc0020c13
c0006b48:	e8 17 3a 01 00       	call   c001a564 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 1e 0c 02 c0       	push   0xc0020c1e
c0006b63:	e8 fc 39 01 00       	call   c001a564 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 65 02 c0       	push   0xc0026540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006b8d:	e8 54 0f 00 00       	call   c0007ae6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006b9e:	e8 43 0f 00 00       	call   c0007ae6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 2e 0f 00 00       	call   c0007ae6 <malloc>
c0006bb8:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 15 0f 00 00       	call   c0007ae6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006bfe:	e8 f3 0e 00 00       	call   c0007af6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 e5 0e 00 00       	call   c0007af6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 cb 0e 00 00       	call   c0007af6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 b6 0e 00 00       	call   c0007af6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c4d:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	56                   	push   esi
c0006c5f:	53                   	push   ebx
c0006c60:	83 ec 20             	sub    esp,0x20
c0006c63:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006c67:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0006c6b:	68 2f 0c 02 c0       	push   0xc0020c2f
c0006c70:	e8 00 3d 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0006c75:	e8 ba a2 00 00       	call   c0010f34 <KeExecuteAtexit()>
c0006c7a:	c7 04 24 3d 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c3d
c0006c81:	e8 ef 3c 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0006c86:	c7 04 24 4a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c4a
c0006c8d:	e8 e3 3c 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0006c92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006c96:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006c9c:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c9e:	56                   	push   esi
c0006c9f:	68 0f 27 00 00       	push   0x270f
c0006ca4:	53                   	push   ebx
c0006ca5:	50                   	push   eax
c0006ca6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006ca9:	83 c4 14             	add    esp,0x14
c0006cac:	56                   	push   esi
c0006cad:	68 0f 27 00 00       	push   0x270f
c0006cb2:	53                   	push   ebx
c0006cb3:	50                   	push   eax
c0006cb4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006cb8:	68 84 0d 02 c0       	push   0xc0020d84
c0006cbd:	e8 b3 3c 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0006cc2:	83 c4 14             	add    esp,0x14
c0006cc5:	68 59 0c 02 c0       	push   0xc0020c59
c0006cca:	e8 44 aa 00 00       	call   c0011713 <KePanic(char const*)>
c0006ccf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006cd3:	83 c4 24             	add    esp,0x24
c0006cd6:	5b                   	pop    ebx
c0006cd7:	5e                   	pop    esi
c0006cd8:	c3                   	ret    

c0006cd9 <Krnl::firstTask()>:
c0006cd9:	53                   	push   ebx
c0006cda:	83 ec 14             	sub    esp,0x14
c0006cdd:	fb                   	sti    
c0006cde:	68 6f 0c 02 c0       	push   0xc0020c6f
c0006ce3:	e8 2b a3 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c0006ce8:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cef:	e8 f2 0d 00 00       	call   c0007ae6 <malloc>
c0006cf4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cfb:	89 c3                	mov    ebx,eax
c0006cfd:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006d02:	50                   	push   eax
c0006d03:	68 88 0c 02 c0       	push   0xc0020c88
c0006d08:	6a 01                	push   0x1
c0006d0a:	53                   	push   ebx
c0006d0b:	e8 74 f0 00 00       	call   c0015d84 <Process::Process(bool, char const*, Process*, char**)>
c0006d10:	83 c4 20             	add    esp,0x20
c0006d13:	68 ff 00 00 00       	push   0xff
c0006d18:	6a 00                	push   0x0
c0006d1a:	68 2d 75 00 c0       	push   0xc000752d
c0006d1f:	53                   	push   ebx
c0006d20:	e8 83 f2 00 00       	call   c0015fa8 <Process::createThread(void (*)(void*), void*, int)>
c0006d25:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d2b:	6a 7a                	push   0x7a
c0006d2d:	6a 00                	push   0x0
c0006d2f:	68 90 6a 01 c0       	push   0xc0016a90
c0006d34:	52                   	push   edx
c0006d35:	e8 6e f2 00 00       	call   c0015fa8 <Process::createThread(void (*)(void*), void*, int)>
c0006d3a:	83 c4 14             	add    esp,0x14
c0006d3d:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d42:	68 ac 0d 02 c0       	push   0xc0020dac
c0006d47:	e8 c7 a2 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c0006d4c:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d53:	e8 74 ab 00 00       	call   c00118cc <KeInitRand()>
c0006d58:	e8 56 01 01 00       	call   c0016eb3 <Vm::initialise8086()>
c0006d5d:	e8 f8 4a 00 00       	call   c000b85a <Fs::initVFS()>
c0006d62:	c7 04 24 95 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c95
c0006d69:	e8 a5 a2 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c0006d6e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d73:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d79:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d7b:	6a 00                	push   0x0
c0006d7d:	6a 00                	push   0x0
c0006d7f:	6a 00                	push   0x0
c0006d81:	50                   	push   eax
c0006d82:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d85:	83 c4 14             	add    esp,0x14
c0006d88:	68 ac 0d 02 c0       	push   0xc0020dac
c0006d8d:	e8 81 a2 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c0006d92:	e8 5d 42 00 00       	call   c000aff4 <KeInitialiseSymlinks()>
c0006d97:	e8 da a7 00 00       	call   c0011576 <KeLoadSystemEnv()>
c0006d9c:	e8 37 aa 00 00       	call   c00117d8 <KeSetupPowerManager()>
c0006da1:	83 c4 0c             	add    esp,0xc
c0006da4:	6a 3a                	push   0x3a
c0006da6:	68 af 0c 02 c0       	push   0xc0020caf
c0006dab:	68 b8 0c 02 c0       	push   0xc0020cb8
c0006db0:	e8 a7 d1 00 00       	call   c0013f5c <Reg::readIntWithDefault(char*, char*, int)>
c0006db5:	89 04 24             	mov    DWORD PTR [esp],eax
c0006db8:	e8 b7 56 00 00       	call   c000c474 <User::loadClockSettings(int)>
c0006dbd:	c7 04 24 d0 0d 02 c0 	mov    DWORD PTR [esp],0xc0020dd0
c0006dc4:	e8 4a a2 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c0006dc9:	59                   	pop    ecx
c0006dca:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006dcf:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dd5:	53                   	push   ebx
c0006dd6:	e8 37 5d 00 00       	call   c000cb12 <Device::loadDriversForAll()>
c0006ddb:	c7 04 24 c0 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cc0
c0006de2:	e8 2c a2 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c0006de7:	58                   	pop    eax
c0006de8:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dee:	5a                   	pop    edx
c0006def:	6a 01                	push   0x1
c0006df1:	68 d1 0c 02 c0       	push   0xc0020cd1
c0006df6:	e8 9e e9 00 00       	call   c0015799 <Thr::loadDLL(char const*, bool)>
c0006dfb:	59                   	pop    ecx
c0006dfc:	5a                   	pop    edx
c0006dfd:	53                   	push   ebx
c0006dfe:	50                   	push   eax
c0006dff:	e8 c6 eb 00 00       	call   c00159ca <Thr::executeDLL(unsigned long, void*)>
c0006e04:	83 c4 10             	add    esp,0x10
c0006e07:	83 ec 0c             	sub    esp,0xc
c0006e0a:	6a 02                	push   0x2
c0006e0c:	e8 fb f5 00 00       	call   c001640c <blockTask(TaskState)>
c0006e11:	83 c4 10             	add    esp,0x10
c0006e14:	eb f1                	jmp    c0006e07 <Krnl::firstTask()+0x12e>

c0006e16 <Computer::Computer()>:
c0006e16:	83 ec 0c             	sub    esp,0xc
c0006e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1d:	83 ec 08             	sub    esp,0x8
c0006e20:	68 ed 0c 02 c0       	push   0xc0020ced
c0006e25:	50                   	push   eax
c0006e26:	e8 9d 5d 00 00       	call   c000cbc8 <Device::Device(char const*)>
c0006e2b:	83 c4 10             	add    esp,0x10
c0006e2e:	ba 1c 0e 02 c0       	mov    edx,0xc0020e1c
c0006e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e37:	89 10                	mov    DWORD PTR [eax],edx
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e59:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e5f:	83 ca 04             	or     edx,0x4
c0006e62:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e72:	0f b6 d0             	movzx  edx,al
c0006e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e79:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e8a:	0f b6 d0             	movzx  edx,al
c0006e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e91:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ea0:	8d 50 01             	lea    edx,[eax+0x1]
c0006ea3:	88 d1                	mov    cl,dl
c0006ea5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ea9:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006eaf:	0f b6 d0             	movzx  edx,al
c0006eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eba:	83 e1 3f             	and    ecx,0x3f
c0006ebd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006ec1:	90                   	nop
c0006ec2:	83 c4 0c             	add    esp,0xc
c0006ec5:	c3                   	ret    

c0006ec6 <Computer::setBootMessage(char const*)>:
c0006ec6:	c3                   	ret    
c0006ec7:	90                   	nop

c0006ec8 <Computer::detectFeatures()>:
c0006ec8:	55                   	push   ebp
c0006ec9:	57                   	push   edi
c0006eca:	56                   	push   esi
c0006ecb:	53                   	push   ebx
c0006ecc:	83 ec 1c             	sub    esp,0x1c
c0006ecf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ed3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ed9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006edf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ee5:	e8 0f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eea:	31 d2                	xor    edx,edx
c0006eec:	85 c0                	test   eax,eax
c0006eee:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ef4:	0f 95 c2             	setne  dl
c0006ef7:	83 e0 fd             	and    eax,0xfffffffd
c0006efa:	d1 e2                	shl    edx,1
c0006efc:	09 d0                	or     eax,edx
c0006efe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f04:	a8 02                	test   al,0x2
c0006f06:	75 51                	jne    c0006f59 <Computer::detectFeatures()+0x91>
c0006f08:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f0f:	74 0f                	je     c0006f20 <Computer::detectFeatures()+0x58>
c0006f11:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f17:	83 e0 fb             	and    eax,0xfffffffb
c0006f1a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f20:	e8 11 86 01 00       	call   c001f536 <x87Detect>
c0006f25:	83 e0 01             	and    eax,0x1
c0006f28:	c1 e0 04             	shl    eax,0x4
c0006f2b:	89 c2                	mov    edx,eax
c0006f2d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f33:	83 e0 ef             	and    eax,0xffffffef
c0006f36:	09 d0                	or     eax,edx
c0006f38:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f3e:	88 c2                	mov    dl,al
c0006f40:	a8 10                	test   al,0x10
c0006f42:	0f 85 33 01 00 00    	jne    c000707b <Computer::detectFeatures()+0x1b3>
c0006f48:	80 e2 80             	and    dl,0x80
c0006f4b:	0f 85 4c 01 00 00    	jne    c000709d <Computer::detectFeatures()+0x1d5>
c0006f51:	83 c4 1c             	add    esp,0x1c
c0006f54:	5b                   	pop    ebx
c0006f55:	5e                   	pop    esi
c0006f56:	5f                   	pop    edi
c0006f57:	5d                   	pop    ebp
c0006f58:	c3                   	ret    
c0006f59:	83 ec 0c             	sub    esp,0xc
c0006f5c:	6a 20                	push   0x20
c0006f5e:	e8 e9 94 00 00       	call   c001044c <CPU::cpuidCheckEDX(unsigned int)>
c0006f63:	83 e0 01             	and    eax,0x1
c0006f66:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f6d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f73:	83 e0 f7             	and    eax,0xfffffff7
c0006f76:	09 d0                	or     eax,edx
c0006f78:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f7e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f85:	e8 c2 94 00 00       	call   c001044c <CPU::cpuidCheckEDX(unsigned int)>
c0006f8a:	89 c2                	mov    edx,eax
c0006f8c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f92:	83 e2 01             	and    edx,0x1
c0006f95:	83 e0 fe             	and    eax,0xfffffffe
c0006f98:	09 d0                	or     eax,edx
c0006f9a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fa0:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006fa7:	e8 a0 94 00 00       	call   c001044c <CPU::cpuidCheckEDX(unsigned int)>
c0006fac:	89 c2                	mov    edx,eax
c0006fae:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fb4:	c1 e2 07             	shl    edx,0x7
c0006fb7:	83 e0 7f             	and    eax,0x7f
c0006fba:	09 d0                	or     eax,edx
c0006fbc:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fc2:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fc9:	e8 7e 94 00 00       	call   c001044c <CPU::cpuidCheckEDX(unsigned int)>
c0006fce:	83 c4 10             	add    esp,0x10
c0006fd1:	83 e0 01             	and    eax,0x1
c0006fd4:	c1 e0 05             	shl    eax,0x5
c0006fd7:	89 c2                	mov    edx,eax
c0006fd9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fdf:	83 e0 df             	and    eax,0xffffffdf
c0006fe2:	09 d0                	or     eax,edx
c0006fe4:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fee:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff4:	0f 84 c9 00 00 00    	je     c00070c3 <Computer::detectFeatures()+0x1fb>
c0006ffa:	83 e0 fe             	and    eax,0xfffffffe
c0006ffd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007003:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007009:	89 c2                	mov    edx,eax
c000700b:	83 e2 09             	and    edx,0x9
c000700e:	83 fa 01             	cmp    edx,0x1
c0007011:	75 09                	jne    c000701c <Computer::detectFeatures()+0x154>
c0007013:	83 e0 fe             	and    eax,0xfffffffe
c0007016:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000701c:	83 ec 0c             	sub    esp,0xc
c000701f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007023:	50                   	push   eax
c0007024:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0007028:	55                   	push   ebp
c0007029:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000702d:	57                   	push   edi
c000702e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007032:	56                   	push   esi
c0007033:	68 00 00 00 80       	push   0x80000000
c0007038:	e8 8b 93 00 00       	call   c00103c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000703d:	83 c4 20             	add    esp,0x20
c0007040:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007047:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000704b:	0f 86 b7 fe ff ff    	jbe    c0006f08 <Computer::detectFeatures()+0x40>
c0007051:	83 ec 0c             	sub    esp,0xc
c0007054:	50                   	push   eax
c0007055:	55                   	push   ebp
c0007056:	57                   	push   edi
c0007057:	56                   	push   esi
c0007058:	68 01 00 00 80       	push   0x80000001
c000705d:	e8 66 93 00 00       	call   c00103c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007062:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007068:	83 c4 20             	add    esp,0x20
c000706b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007070:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007076:	e9 8d fe ff ff       	jmp    c0006f08 <Computer::detectFeatures()+0x40>
c000707b:	e8 70 84 01 00       	call   c001f4f0 <absolutelyNoChanceInHell>
c0007080:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007086:	c1 e0 07             	shl    eax,0x7
c0007089:	83 e2 7f             	and    edx,0x7f
c000708c:	09 c2                	or     edx,eax
c000708e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007094:	80 e2 80             	and    dl,0x80
c0007097:	0f 84 b4 fe ff ff    	je     c0006f51 <Computer::detectFeatures()+0x89>
c000709d:	e8 be 80 01 00       	call   c001f160 <avxDetect>
c00070a2:	83 e0 01             	and    eax,0x1
c00070a5:	c1 e0 05             	shl    eax,0x5
c00070a8:	89 c2                	mov    edx,eax
c00070aa:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070b0:	83 e0 df             	and    eax,0xffffffdf
c00070b3:	09 d0                	or     eax,edx
c00070b5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070bb:	83 c4 1c             	add    esp,0x1c
c00070be:	5b                   	pop    ebx
c00070bf:	5e                   	pop    esi
c00070c0:	5f                   	pop    edi
c00070c1:	5d                   	pop    ebp
c00070c2:	c3                   	ret    
c00070c3:	83 ec 0c             	sub    esp,0xc
c00070c6:	68 00 02 00 00       	push   0x200
c00070cb:	e8 7c 93 00 00       	call   c001044c <CPU::cpuidCheckEDX(unsigned int)>
c00070d0:	83 c4 10             	add    esp,0x10
c00070d3:	89 c2                	mov    edx,eax
c00070d5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070db:	83 e2 01             	and    edx,0x1
c00070de:	83 e0 fe             	and    eax,0xfffffffe
c00070e1:	09 d0                	or     eax,edx
c00070e3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070e9:	e9 15 ff ff ff       	jmp    c0007003 <Computer::detectFeatures()+0x13b>

c00070ee <Computer::displayFeatures()>:
c00070ee:	c3                   	ret    
c00070ef:	90                   	nop

c00070f0 <Computer::rdmsr(unsigned int)>:
c00070f0:	83 ec 0c             	sub    esp,0xc
c00070f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070fe:	74 0a                	je     c000710a <Computer::rdmsr(unsigned int)+0x1a>
c0007100:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007104:	0f 32                	rdmsr  
c0007106:	83 c4 0c             	add    esp,0xc
c0007109:	c3                   	ret    
c000710a:	83 ec 0c             	sub    esp,0xc
c000710d:	68 f6 0c 02 c0       	push   0xc0020cf6
c0007112:	e8 fc a5 00 00       	call   c0011713 <KePanic(char const*)>
c0007117:	83 c4 10             	add    esp,0x10
c000711a:	eb e4                	jmp    c0007100 <Computer::rdmsr(unsigned int)+0x10>

c000711c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000711c:	57                   	push   edi
c000711d:	56                   	push   esi
c000711e:	83 ec 04             	sub    esp,0x4
c0007121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007125:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007129:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000712d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007134:	74 10                	je     c0007146 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007136:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000713a:	89 f0                	mov    eax,esi
c000713c:	89 fa                	mov    edx,edi
c000713e:	0f 30                	wrmsr  
c0007140:	83 c4 04             	add    esp,0x4
c0007143:	5e                   	pop    esi
c0007144:	5f                   	pop    edi
c0007145:	c3                   	ret    
c0007146:	83 ec 0c             	sub    esp,0xc
c0007149:	68 fc 0c 02 c0       	push   0xc0020cfc
c000714e:	e8 c0 a5 00 00       	call   c0011713 <KePanic(char const*)>
c0007153:	83 c4 10             	add    esp,0x10
c0007156:	eb de                	jmp    c0007136 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007158 <Computer::shutdown()>:
c0007158:	83 ec 0c             	sub    esp,0xc
c000715b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000715f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007161:	6a 00                	push   0x0
c0007163:	6a 00                	push   0x0
c0007165:	6a 00                	push   0x0
c0007167:	50                   	push   eax
c0007168:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000716b:	83 c4 1c             	add    esp,0x1c
c000716e:	c3                   	ret    
c000716f:	90                   	nop

c0007170 <Computer::restart()>:
c0007170:	83 ec 0c             	sub    esp,0xc
c0007173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007177:	8b 10                	mov    edx,DWORD PTR [eax]
c0007179:	6a 00                	push   0x0
c000717b:	6a 00                	push   0x0
c000717d:	6a 01                	push   0x1
c000717f:	50                   	push   eax
c0007180:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007183:	83 c4 1c             	add    esp,0x1c
c0007186:	c3                   	ret    
c0007187:	90                   	nop

c0007188 <Computer::sleep()>:
c0007188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000718c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007196:	e9 c9 8c 00 00       	jmp    c000fe64 <ACPI::sleep()>
c000719b:	90                   	nop

c000719c <Computer::nmiEnabled()>:
c000719c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071a0:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c00071a6:	c3                   	ret    
c00071a7:	90                   	nop

c00071a8 <Computer::readCMOS(unsigned char)>:
c00071a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00071ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071b0:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c00071b7:	75 09                	jne    c00071c2 <Computer::readCMOS(unsigned char)+0x1a>
c00071b9:	b2 80                	mov    dl,0x80
c00071bb:	09 d0                	or     eax,edx
c00071bd:	e6 70                	out    0x70,al
c00071bf:	e4 71                	in     al,0x71
c00071c1:	c3                   	ret    
c00071c2:	31 d2                	xor    edx,edx
c00071c4:	eb f5                	jmp    c00071bb <Computer::readCMOS(unsigned char)+0x13>

c00071c6 <Computer::enableNMI(bool)>:
c00071c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00071ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071ce:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071d4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071dc:	eb ca                	jmp    c00071a8 <Computer::readCMOS(unsigned char)>

c00071de <Computer::open(int, int, void*)>:
c00071de:	56                   	push   esi
c00071df:	53                   	push   ebx
c00071e0:	83 ec 10             	sub    esp,0x10
c00071e3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071e7:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071ee:	68 02 0d 02 c0       	push   0xc0020d02
c00071f3:	0f 94 05 c0 38 02 c0 	sete   BYTE PTR ds:0xc00238c0
c00071fa:	e8 14 9e 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c00071ff:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0007206:	e8 db 08 00 00       	call   c0007ae6 <malloc>
c000720b:	89 04 24             	mov    DWORD PTR [esp],eax
c000720e:	89 c6                	mov    esi,eax
c0007210:	e8 c3 87 00 00       	call   c000f9d8 <ACPI::ACPI()>
c0007215:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000721b:	58                   	pop    eax
c000721c:	5a                   	pop    edx
c000721d:	56                   	push   esi
c000721e:	53                   	push   ebx
c000721f:	e8 d2 57 00 00       	call   c000c9f6 <Device::addChild(Device*)>
c0007224:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007227:	e8 9c fc ff ff       	call   c0006ec8 <Computer::detectFeatures()>
c000722c:	59                   	pop    ecx
c000722d:	5e                   	pop    esi
c000722e:	6a 01                	push   0x1
c0007230:	53                   	push   ebx
c0007231:	e8 90 ff ff ff       	call   c00071c6 <Computer::enableNMI(bool)>
c0007236:	c7 04 24 1a 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d1a
c000723d:	e8 d1 9d 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c0007242:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007249:	e8 98 08 00 00       	call   c0007ae6 <malloc>
c000724e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007251:	89 c6                	mov    esi,eax
c0007253:	e8 ac 92 00 00       	call   c0010504 <CPU::CPU()>
c0007258:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000725e:	58                   	pop    eax
c000725f:	5a                   	pop    edx
c0007260:	56                   	push   esi
c0007261:	53                   	push   ebx
c0007262:	e8 8f 57 00 00       	call   c000c9f6 <Device::addChild(Device*)>
c0007267:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000726d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007271:	8b 10                	mov    edx,DWORD PTR [eax]
c0007273:	51                   	push   ecx
c0007274:	6a 00                	push   0x0
c0007276:	6a 00                	push   0x0
c0007278:	50                   	push   eax
c0007279:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000727c:	83 c4 14             	add    esp,0x14
c000727f:	68 f0 0d 02 c0       	push   0xc0020df0
c0007284:	e8 8a 9d 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c0007289:	e8 62 0e 01 00       	call   c00180f0 <HalInitialiseCoprocessor()>
c000728e:	c7 04 24 34 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d34
c0007295:	e8 79 9d 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c000729a:	c7 04 24 d9 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cd9
c00072a1:	e8 2e ee 00 00       	call   c00160d4 <setupMultitasking(void (*)())>
c00072a6:	83 c4 14             	add    esp,0x14
c00072a9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00072ae:	5b                   	pop    ebx
c00072af:	5e                   	pop    esi
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::disableNMI()>:
c00072b2:	6a 00                	push   0x0
c00072b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072b8:	50                   	push   eax
c00072b9:	e8 08 ff ff ff       	call   c00071c6 <Computer::enableNMI(bool)>
c00072be:	5a                   	pop    edx
c00072bf:	59                   	pop    ecx
c00072c0:	c3                   	ret    
c00072c1:	90                   	nop

c00072c2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072c2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00072c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00072ce:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072d5:	75 0b                	jne    c00072e2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072d7:	b1 80                	mov    cl,0x80
c00072d9:	09 c8                	or     eax,ecx
c00072db:	e6 70                	out    0x70,al
c00072dd:	88 d0                	mov    al,dl
c00072df:	e6 71                	out    0x71,al
c00072e1:	c3                   	ret    
c00072e2:	31 c9                	xor    ecx,ecx
c00072e4:	eb f3                	jmp    c00072d9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072e6 <Computer::handleNMI()>:
c00072e6:	56                   	push   esi
c00072e7:	53                   	push   ebx
c00072e8:	83 ec 10             	sub    esp,0x10
c00072eb:	e4 92                	in     al,0x92
c00072ed:	89 c6                	mov    esi,eax
c00072ef:	e4 61                	in     al,0x61
c00072f1:	68 4f 0d 02 c0       	push   0xc0020d4f
c00072f6:	88 c3                	mov    bl,al
c00072f8:	e8 78 36 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00072fd:	83 c4 10             	add    esp,0x10
c0007300:	83 e6 10             	and    esi,0x10
c0007303:	75 10                	jne    c0007315 <Computer::handleNMI()+0x2f>
c0007305:	f6 c3 40             	test   bl,0x40
c0007308:	75 20                	jne    c000732a <Computer::handleNMI()+0x44>
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	75 30                	jne    c000733f <Computer::handleNMI()+0x59>
c000730f:	83 c4 04             	add    esp,0x4
c0007312:	5b                   	pop    ebx
c0007313:	5e                   	pop    esi
c0007314:	c3                   	ret    
c0007315:	83 ec 0c             	sub    esp,0xc
c0007318:	68 60 0d 02 c0       	push   0xc0020d60
c000731d:	e8 f1 a3 00 00       	call   c0011713 <KePanic(char const*)>
c0007322:	83 c4 10             	add    esp,0x10
c0007325:	f6 c3 40             	test   bl,0x40
c0007328:	74 e0                	je     c000730a <Computer::handleNMI()+0x24>
c000732a:	83 ec 0c             	sub    esp,0xc
c000732d:	68 6d 0d 02 c0       	push   0xc0020d6d
c0007332:	e8 dc a3 00 00       	call   c0011713 <KePanic(char const*)>
c0007337:	83 c4 10             	add    esp,0x10
c000733a:	80 e3 80             	and    bl,0x80
c000733d:	74 d0                	je     c000730f <Computer::handleNMI()+0x29>
c000733f:	c7 44 24 10 77 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d77
c0007347:	83 c4 04             	add    esp,0x4
c000734a:	5b                   	pop    ebx
c000734b:	5e                   	pop    esi
c000734c:	e9 c2 a3 00 00       	jmp    c0011713 <KePanic(char const*)>
c0007351:	90                   	nop

c0007352 <GDTEntry::setBase(unsigned int)>:
c0007352:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007356:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000735a:	89 c1                	mov    ecx,eax
c000735c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007360:	c1 e9 10             	shr    ecx,0x10
c0007363:	c1 e8 18             	shr    eax,0x18
c0007366:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007369:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000736c:	c3                   	ret    
c000736d:	90                   	nop

c000736e <GDTEntry::setLimit(unsigned int)>:
c000736e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007372:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007376:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007379:	66 89 01             	mov    WORD PTR [ecx],ax
c000737c:	83 e2 f0             	and    edx,0xfffffff0
c000737f:	c1 e8 10             	shr    eax,0x10
c0007382:	83 e0 0f             	and    eax,0xf
c0007385:	09 d0                	or     eax,edx
c0007387:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000738a:	c3                   	ret    
c000738b:	90                   	nop

c000738c <GDT::GDT()>:
c000738c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007390:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000739a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073a0:	90                   	nop
c00073a1:	c3                   	ret    

c00073a2 <GDT::addEntry(GDTEntry)>:
c00073a2:	53                   	push   ebx
c00073a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00073a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073ab:	8b 02                	mov    eax,DWORD PTR [edx]
c00073ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00073b1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073b5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073b9:	8d 48 01             	lea    ecx,[eax+0x1]
c00073bc:	c1 e0 03             	shl    eax,0x3
c00073bf:	89 0a                	mov    DWORD PTR [edx],ecx
c00073c1:	5b                   	pop    ebx
c00073c2:	c3                   	ret    
c00073c3:	90                   	nop

c00073c4 <GDT::getNumberOfEntries()>:
c00073c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ca:	c3                   	ret    
c00073cb:	90                   	nop

c00073cc <GDT::flush()>:
c00073cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073d2:	83 c0 04             	add    eax,0x4
c00073d5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073dc:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073e1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073e8:	e9 6d 8f ff ff       	jmp    c000035a <loadGDT>
c00073ed:	90                   	nop

c00073ee <GDT::setup()>:
c00073ee:	57                   	push   edi
c00073ef:	56                   	push   esi
c00073f0:	53                   	push   ebx
c00073f1:	83 ec 30             	sub    esp,0x30
c00073f4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073f8:	6a 00                	push   0x0
c00073fa:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073fe:	56                   	push   esi
c00073ff:	e8 4e ff ff ff       	call   c0007352 <GDTEntry::setBase(unsigned int)>
c0007404:	6a 00                	push   0x0
c0007406:	56                   	push   esi
c0007407:	e8 62 ff ff ff       	call   c000736e <GDTEntry::setLimit(unsigned int)>
c000740c:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007414:	6a 00                	push   0x0
c0007416:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000741a:	56                   	push   esi
c000741b:	e8 32 ff ff ff       	call   c0007352 <GDTEntry::setBase(unsigned int)>
c0007420:	68 ff ff ff 00       	push   0xffffff
c0007425:	56                   	push   esi
c0007426:	e8 43 ff ff ff       	call   c000736e <GDTEntry::setLimit(unsigned int)>
c000742b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000742f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007433:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007437:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000743b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007440:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007445:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007449:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000744d:	89 f8                	mov    eax,edi
c000744f:	89 fa                	mov    edx,edi
c0007451:	80 e4 f7             	and    ah,0xf7
c0007454:	80 ce 60             	or     dh,0x60
c0007457:	89 c7                	mov    edi,eax
c0007459:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000745d:	80 cc 60             	or     ah,0x60
c0007460:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007464:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007468:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000746c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007470:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007474:	83 c4 20             	add    esp,0x20
c0007477:	6a 00                	push   0x0
c0007479:	8d 44 24 24          	lea    eax,[esp+0x24]
c000747d:	50                   	push   eax
c000747e:	e8 cf fe ff ff       	call   c0007352 <GDTEntry::setBase(unsigned int)>
c0007483:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007487:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000748b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000748f:	83 e0 3f             	and    eax,0x3f
c0007492:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007496:	6a 00                	push   0x0
c0007498:	8d 44 24 34          	lea    eax,[esp+0x34]
c000749c:	50                   	push   eax
c000749d:	e8 b0 fe ff ff       	call   c0007352 <GDTEntry::setBase(unsigned int)>
c00074a2:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c00074a6:	83 e0 3f             	and    eax,0x3f
c00074a9:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c00074ad:	83 c4 0c             	add    esp,0xc
c00074b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074b8:	53                   	push   ebx
c00074b9:	e8 e4 fe ff ff       	call   c00073a2 <GDT::addEntry(GDTEntry)>
c00074be:	83 c4 0c             	add    esp,0xc
c00074c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074c9:	53                   	push   ebx
c00074ca:	e8 d3 fe ff ff       	call   c00073a2 <GDT::addEntry(GDTEntry)>
c00074cf:	83 c4 0c             	add    esp,0xc
c00074d2:	57                   	push   edi
c00074d3:	56                   	push   esi
c00074d4:	53                   	push   ebx
c00074d5:	e8 c8 fe ff ff       	call   c00073a2 <GDT::addEntry(GDTEntry)>
c00074da:	83 c4 0c             	add    esp,0xc
c00074dd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074e1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074e5:	53                   	push   ebx
c00074e6:	e8 b7 fe ff ff       	call   c00073a2 <GDT::addEntry(GDTEntry)>
c00074eb:	83 c4 0c             	add    esp,0xc
c00074ee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074f2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074f6:	53                   	push   ebx
c00074f7:	e8 a6 fe ff ff       	call   c00073a2 <GDT::addEntry(GDTEntry)>
c00074fc:	83 c4 0c             	add    esp,0xc
c00074ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007503:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007507:	53                   	push   ebx
c0007508:	e8 95 fe ff ff       	call   c00073a2 <GDT::addEntry(GDTEntry)>
c000750d:	83 c4 0c             	add    esp,0xc
c0007510:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007514:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007518:	53                   	push   ebx
c0007519:	e8 84 fe ff ff       	call   c00073a2 <GDT::addEntry(GDTEntry)>
c000751e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007521:	e8 a6 fe ff ff       	call   c00073cc <GDT::flush()>
c0007526:	83 c4 40             	add    esp,0x40
c0007529:	5b                   	pop    ebx
c000752a:	5e                   	pop    esi
c000752b:	5f                   	pop    edi
c000752c:	c3                   	ret    

c000752d <idleFunction(void*)>:
c000752d:	83 ec 0c             	sub    esp,0xc
c0007530:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007535:	48                   	dec    eax
c0007536:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000753b:	75 01                	jne    c000753e <idleFunction(void*)+0x11>
c000753d:	fb                   	sti    
c000753e:	e8 79 08 01 00       	call   c0017dbc <HalSystemIdle()>
c0007543:	e8 aa 85 01 00       	call   c001faf2 <idleCommon()>
c0007548:	eb f4                	jmp    c000753e <idleFunction(void*)+0x11>
c000754a:	66 90                	xchg   ax,ax

c000754c <IDTEntry::IDTEntry(bool)>:
c000754c:	53                   	push   ebx
c000754d:	83 ec 04             	sub    esp,0x4
c0007550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007554:	88 04 24             	mov    BYTE PTR [esp],al
c0007557:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007561:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007565:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 f0             	and    edx,0xfffffff0
c0007573:	83 ca 0e             	or     edx,0xe
c0007576:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007579:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000757d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007580:	83 e2 ef             	and    edx,0xffffffef
c0007583:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007586:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000758a:	85 c0                	test   eax,eax
c000758c:	74 06                	je     c0007594 <IDTEntry::IDTEntry(bool)+0x48>
c000758e:	b2 03                	mov    dl,0x3
c0007590:	eb 06                	jmp    c0007598 <IDTEntry::IDTEntry(bool)+0x4c>
c0007592:	66 90                	xchg   ax,ax
c0007594:	b2 00                	mov    dl,0x0
c0007596:	66 90                	xchg   ax,ax
c0007598:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759c:	83 e2 03             	and    edx,0x3
c000759f:	89 d3                	mov    ebx,edx
c00075a1:	c1 e3 05             	shl    ebx,0x5
c00075a4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075a7:	83 e2 9f             	and    edx,0xffffff9f
c00075aa:	88 d1                	mov    cl,dl
c00075ac:	88 da                	mov    dl,bl
c00075ae:	09 ca                	or     edx,ecx
c00075b0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075b7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075ba:	83 ca 80             	or     edx,0xffffff80
c00075bd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075c0:	90                   	nop
c00075c1:	83 c4 04             	add    esp,0x4
c00075c4:	5b                   	pop    ebx
c00075c5:	c3                   	ret    

c00075c6 <IDTEntry::setOffset(unsigned int)>:
c00075c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075ce:	66 89 02             	mov    WORD PTR [edx],ax
c00075d1:	c1 e8 10             	shr    eax,0x10
c00075d4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075d8:	c3                   	ret    
c00075d9:	90                   	nop
c00075da:	66 90                	xchg   ax,ax

c00075dc <IDT::IDT()>:
c00075dc:	90                   	nop
c00075dd:	c3                   	ret    

c00075de <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075e2:	83 c0 30             	add    eax,0x30
c00075e5:	c3                   	ret    

c00075e6 <IDT::addEntry(IDTEntry, int)>:
c00075e6:	53                   	push   ebx
c00075e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075f7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075fa:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075fe:	5b                   	pop    ebx
c00075ff:	c3                   	ret    

c0007600 <IDT::addEntry(int, void (*)(), bool)>:
c0007600:	53                   	push   ebx
c0007601:	83 ec 10             	sub    esp,0x10
c0007604:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007609:	50                   	push   eax
c000760a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000760e:	53                   	push   ebx
c000760f:	e8 38 ff ff ff       	call   c000754c <IDTEntry::IDTEntry(bool)>
c0007614:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007618:	53                   	push   ebx
c0007619:	e8 a8 ff ff ff       	call   c00075c6 <IDTEntry::setOffset(unsigned int)>
c000761e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007622:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007626:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000762a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000762e:	e8 b3 ff ff ff       	call   c00075e6 <IDT::addEntry(IDTEntry, int)>
c0007633:	83 c4 30             	add    esp,0x30
c0007636:	5b                   	pop    ebx
c0007637:	c3                   	ret    

c0007638 <IDT::flush()>:
c0007638:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000763c:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007645:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000764a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007651:	c3                   	ret    

c0007652 <IDT::setup()>:
c0007652:	57                   	push   edi
c0007653:	56                   	push   esi
c0007654:	53                   	push   ebx
c0007655:	83 ec 10             	sub    esp,0x10
c0007658:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000765c:	6a 00                	push   0x0
c000765e:	68 f0 f1 01 c0       	push   0xc001f1f0
c0007663:	6a 00                	push   0x0
c0007665:	53                   	push   ebx
c0007666:	e8 95 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	6a 00                	push   0x0
c000766d:	68 00 f2 01 c0       	push   0xc001f200
c0007672:	6a 01                	push   0x1
c0007674:	53                   	push   ebx
c0007675:	e8 86 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000767a:	83 c4 20             	add    esp,0x20
c000767d:	6a 00                	push   0x0
c000767f:	68 0a f2 01 c0       	push   0xc001f20a
c0007684:	6a 02                	push   0x2
c0007686:	53                   	push   ebx
c0007687:	e8 74 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	6a 00                	push   0x0
c000768e:	68 14 f2 01 c0       	push   0xc001f214
c0007693:	6a 03                	push   0x3
c0007695:	53                   	push   ebx
c0007696:	e8 65 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000769b:	83 c4 20             	add    esp,0x20
c000769e:	6a 00                	push   0x0
c00076a0:	68 1e f2 01 c0       	push   0xc001f21e
c00076a5:	6a 04                	push   0x4
c00076a7:	53                   	push   ebx
c00076a8:	e8 53 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	6a 00                	push   0x0
c00076af:	68 28 f2 01 c0       	push   0xc001f228
c00076b4:	6a 05                	push   0x5
c00076b6:	53                   	push   ebx
c00076b7:	e8 44 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00076bc:	83 c4 20             	add    esp,0x20
c00076bf:	6a 00                	push   0x0
c00076c1:	68 32 f2 01 c0       	push   0xc001f232
c00076c6:	6a 06                	push   0x6
c00076c8:	53                   	push   ebx
c00076c9:	e8 32 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	6a 00                	push   0x0
c00076d0:	68 3c f2 01 c0       	push   0xc001f23c
c00076d5:	6a 07                	push   0x7
c00076d7:	53                   	push   ebx
c00076d8:	e8 23 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00076dd:	83 c4 20             	add    esp,0x20
c00076e0:	6a 00                	push   0x0
c00076e2:	68 46 f2 01 c0       	push   0xc001f246
c00076e7:	6a 08                	push   0x8
c00076e9:	53                   	push   ebx
c00076ea:	e8 11 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	6a 00                	push   0x0
c00076f1:	68 4e f2 01 c0       	push   0xc001f24e
c00076f6:	6a 09                	push   0x9
c00076f8:	53                   	push   ebx
c00076f9:	e8 02 ff ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00076fe:	83 c4 20             	add    esp,0x20
c0007701:	6a 00                	push   0x0
c0007703:	68 58 f2 01 c0       	push   0xc001f258
c0007708:	6a 0a                	push   0xa
c000770a:	53                   	push   ebx
c000770b:	e8 f0 fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	6a 00                	push   0x0
c0007712:	68 60 f2 01 c0       	push   0xc001f260
c0007717:	6a 0b                	push   0xb
c0007719:	53                   	push   ebx
c000771a:	e8 e1 fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000771f:	83 c4 20             	add    esp,0x20
c0007722:	6a 00                	push   0x0
c0007724:	68 68 f2 01 c0       	push   0xc001f268
c0007729:	6a 0c                	push   0xc
c000772b:	53                   	push   ebx
c000772c:	e8 cf fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	6a 00                	push   0x0
c0007733:	68 70 f2 01 c0       	push   0xc001f270
c0007738:	6a 0d                	push   0xd
c000773a:	53                   	push   ebx
c000773b:	e8 c0 fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007740:	83 c4 20             	add    esp,0x20
c0007743:	6a 00                	push   0x0
c0007745:	68 8a f2 01 c0       	push   0xc001f28a
c000774a:	6a 0e                	push   0xe
c000774c:	53                   	push   ebx
c000774d:	e8 ae fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	6a 00                	push   0x0
c0007754:	68 92 f2 01 c0       	push   0xc001f292
c0007759:	6a 0f                	push   0xf
c000775b:	53                   	push   ebx
c000775c:	e8 9f fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007761:	83 c4 20             	add    esp,0x20
c0007764:	6a 00                	push   0x0
c0007766:	68 9c f2 01 c0       	push   0xc001f29c
c000776b:	6a 10                	push   0x10
c000776d:	53                   	push   ebx
c000776e:	e8 8d fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	6a 00                	push   0x0
c0007775:	68 a6 f2 01 c0       	push   0xc001f2a6
c000777a:	6a 11                	push   0x11
c000777c:	53                   	push   ebx
c000777d:	e8 7e fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007782:	83 c4 20             	add    esp,0x20
c0007785:	6a 00                	push   0x0
c0007787:	68 b0 f2 01 c0       	push   0xc001f2b0
c000778c:	6a 12                	push   0x12
c000778e:	53                   	push   ebx
c000778f:	e8 6c fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	6a 01                	push   0x1
c0007796:	68 4a f3 01 c0       	push   0xc001f34a
c000779b:	6a 60                	push   0x60
c000779d:	53                   	push   ebx
c000779e:	e8 5d fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00077a3:	83 c4 20             	add    esp,0x20
c00077a6:	6a 00                	push   0x0
c00077a8:	68 51 f3 01 c0       	push   0xc001f351
c00077ad:	6a 20                	push   0x20
c00077af:	53                   	push   ebx
c00077b0:	e8 4b fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	6a 00                	push   0x0
c00077b7:	68 3c f3 01 c0       	push   0xc001f33c
c00077bc:	6a 21                	push   0x21
c00077be:	53                   	push   ebx
c00077bf:	e8 3c fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00077c4:	83 c4 20             	add    esp,0x20
c00077c7:	6a 00                	push   0x0
c00077c9:	68 43 f3 01 c0       	push   0xc001f343
c00077ce:	6a 22                	push   0x22
c00077d0:	53                   	push   ebx
c00077d1:	e8 2a fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	6a 00                	push   0x0
c00077d8:	68 ba f2 01 c0       	push   0xc001f2ba
c00077dd:	6a 23                	push   0x23
c00077df:	53                   	push   ebx
c00077e0:	e8 1b fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00077e5:	83 c4 20             	add    esp,0x20
c00077e8:	6a 00                	push   0x0
c00077ea:	68 c4 f2 01 c0       	push   0xc001f2c4
c00077ef:	6a 24                	push   0x24
c00077f1:	53                   	push   ebx
c00077f2:	e8 09 fe ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	6a 00                	push   0x0
c00077f9:	68 ce f2 01 c0       	push   0xc001f2ce
c00077fe:	6a 25                	push   0x25
c0007800:	53                   	push   ebx
c0007801:	e8 fa fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007806:	83 c4 20             	add    esp,0x20
c0007809:	6a 00                	push   0x0
c000780b:	68 d8 f2 01 c0       	push   0xc001f2d8
c0007810:	6a 26                	push   0x26
c0007812:	53                   	push   ebx
c0007813:	e8 e8 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	6a 00                	push   0x0
c000781a:	68 e2 f2 01 c0       	push   0xc001f2e2
c000781f:	6a 27                	push   0x27
c0007821:	53                   	push   ebx
c0007822:	e8 d9 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007827:	83 c4 20             	add    esp,0x20
c000782a:	6a 00                	push   0x0
c000782c:	68 ec f2 01 c0       	push   0xc001f2ec
c0007831:	6a 28                	push   0x28
c0007833:	53                   	push   ebx
c0007834:	e8 c7 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	6a 00                	push   0x0
c000783b:	68 f6 f2 01 c0       	push   0xc001f2f6
c0007840:	6a 29                	push   0x29
c0007842:	53                   	push   ebx
c0007843:	e8 b8 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007848:	83 c4 20             	add    esp,0x20
c000784b:	6a 00                	push   0x0
c000784d:	68 00 f3 01 c0       	push   0xc001f300
c0007852:	6a 2a                	push   0x2a
c0007854:	53                   	push   ebx
c0007855:	e8 a6 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	6a 00                	push   0x0
c000785c:	68 0a f3 01 c0       	push   0xc001f30a
c0007861:	6a 2b                	push   0x2b
c0007863:	53                   	push   ebx
c0007864:	e8 97 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007869:	83 c4 20             	add    esp,0x20
c000786c:	6a 00                	push   0x0
c000786e:	68 14 f3 01 c0       	push   0xc001f314
c0007873:	6a 2c                	push   0x2c
c0007875:	53                   	push   ebx
c0007876:	e8 85 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	6a 00                	push   0x0
c000787d:	68 1e f3 01 c0       	push   0xc001f31e
c0007882:	6a 2d                	push   0x2d
c0007884:	53                   	push   ebx
c0007885:	e8 76 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000788a:	83 c4 20             	add    esp,0x20
c000788d:	6a 00                	push   0x0
c000788f:	68 28 f3 01 c0       	push   0xc001f328
c0007894:	6a 2e                	push   0x2e
c0007896:	53                   	push   ebx
c0007897:	e8 64 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	6a 00                	push   0x0
c000789e:	68 32 f3 01 c0       	push   0xc001f332
c00078a3:	6a 2f                	push   0x2f
c00078a5:	53                   	push   ebx
c00078a6:	e8 55 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00078ab:	83 c4 20             	add    esp,0x20
c00078ae:	6a 00                	push   0x0
c00078b0:	68 8c f4 01 c0       	push   0xc001f48c
c00078b5:	6a 30                	push   0x30
c00078b7:	53                   	push   ebx
c00078b8:	e8 43 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	6a 00                	push   0x0
c00078bf:	68 96 f4 01 c0       	push   0xc001f496
c00078c4:	6a 31                	push   0x31
c00078c6:	53                   	push   ebx
c00078c7:	e8 34 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00078cc:	83 c4 20             	add    esp,0x20
c00078cf:	6a 00                	push   0x0
c00078d1:	68 a0 f4 01 c0       	push   0xc001f4a0
c00078d6:	6a 32                	push   0x32
c00078d8:	53                   	push   ebx
c00078d9:	e8 22 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	6a 00                	push   0x0
c00078e0:	68 aa f4 01 c0       	push   0xc001f4aa
c00078e5:	6a 33                	push   0x33
c00078e7:	53                   	push   ebx
c00078e8:	e8 13 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00078ed:	83 c4 20             	add    esp,0x20
c00078f0:	6a 00                	push   0x0
c00078f2:	68 b4 f4 01 c0       	push   0xc001f4b4
c00078f7:	6a 34                	push   0x34
c00078f9:	53                   	push   ebx
c00078fa:	e8 01 fd ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	6a 00                	push   0x0
c0007901:	68 be f4 01 c0       	push   0xc001f4be
c0007906:	6a 35                	push   0x35
c0007908:	53                   	push   ebx
c0007909:	e8 f2 fc ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000790e:	83 c4 20             	add    esp,0x20
c0007911:	6a 00                	push   0x0
c0007913:	68 c8 f4 01 c0       	push   0xc001f4c8
c0007918:	6a 36                	push   0x36
c000791a:	53                   	push   ebx
c000791b:	e8 e0 fc ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c0007920:	6a 00                	push   0x0
c0007922:	68 d2 f4 01 c0       	push   0xc001f4d2
c0007927:	6a 37                	push   0x37
c0007929:	53                   	push   ebx
c000792a:	e8 d1 fc ff ff       	call   c0007600 <IDT::addEntry(int, void (*)(), bool)>
c000792f:	83 c4 1c             	add    esp,0x1c
c0007932:	6a 03                	push   0x3
c0007934:	6a 02                	push   0x2
c0007936:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000793c:	e8 13 25 00 00       	call   c0009e54 <VAS::allocatePages(int, int)>
c0007941:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007948:	89 c6                	mov    esi,eax
c000794a:	e8 97 01 00 00       	call   c0007ae6 <malloc>
c000794f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007955:	89 04 24             	mov    DWORD PTR [esp],eax
c0007958:	89 c7                	mov    edi,eax
c000795a:	e8 15 16 00 00       	call   c0008f74 <TSS::TSS()>
c000795f:	83 c4 0c             	add    esp,0xc
c0007962:	68 46 f2 01 c0       	push   0xc001f246
c0007967:	56                   	push   esi
c0007968:	57                   	push   edi
c0007969:	e8 4a 16 00 00       	call   c0008fb8 <TSS::setup(unsigned long, unsigned long)>
c000796e:	89 c6                	mov    esi,eax
c0007970:	58                   	pop    eax
c0007971:	5a                   	pop    edx
c0007972:	6a 00                	push   0x0
c0007974:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007978:	50                   	push   eax
c0007979:	e8 ce fb ff ff       	call   c000754c <IDTEntry::IDTEntry(bool)>
c000797e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007982:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007987:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000798e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007994:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007998:	80 ce 05             	or     dh,0x5
c000799b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000799e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079a6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00079a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00079ac:	e8 87 fc ff ff       	call   c0007638 <IDT::flush()>
c00079b1:	83 c4 20             	add    esp,0x20
c00079b4:	5b                   	pop    ebx
c00079b5:	5e                   	pop    esi
c00079b6:	5f                   	pop    edi
c00079b7:	c3                   	ret    

c00079b8 <sbrk>:
c00079b8:	55                   	push   ebp
c00079b9:	57                   	push   edi
c00079ba:	56                   	push   esi
c00079bb:	53                   	push   ebx
c00079bc:	83 ec 1c             	sub    esp,0x1c
c00079bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079c3:	85 c0                	test   eax,eax
c00079c5:	74 61                	je     c0007a28 <sbrk+0x70>
c00079c7:	78 66                	js     c0007a2f <sbrk+0x77>
c00079c9:	8b 15 a0 38 02 c0    	mov    edx,DWORD PTR ds:0xc00238a0
c00079cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079d3:	05 ff 0f 00 00       	add    eax,0xfff
c00079d8:	89 c5                	mov    ebp,eax
c00079da:	78 6b                	js     c0007a47 <sbrk+0x8f>
c00079dc:	c1 fd 0c             	sar    ebp,0xc
c00079df:	bb 00 00 00 00       	mov    ebx,0x0
c00079e4:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079ea:	8b 3d a0 38 02 c0    	mov    edi,DWORD PTR ds:0xc00238a0
c00079f0:	e8 fa 03 00 00       	call   c0007def <Phys::allocatePage()>
c00079f5:	68 01 04 00 00       	push   0x401
c00079fa:	57                   	push   edi
c00079fb:	50                   	push   eax
c00079fc:	56                   	push   esi
c00079fd:	e8 4e 23 00 00       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007a02:	81 05 a0 38 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00238a0,0x1000
c0007a0c:	83 c3 01             	add    ebx,0x1
c0007a0f:	83 c4 10             	add    esp,0x10
c0007a12:	39 dd                	cmp    ebp,ebx
c0007a14:	75 ce                	jne    c00079e4 <sbrk+0x2c>
c0007a16:	0f 20 d8             	mov    eax,cr3
c0007a19:	0f 22 d8             	mov    cr3,eax
c0007a1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a20:	83 c4 1c             	add    esp,0x1c
c0007a23:	5b                   	pop    ebx
c0007a24:	5e                   	pop    esi
c0007a25:	5f                   	pop    edi
c0007a26:	5d                   	pop    ebp
c0007a27:	c3                   	ret    
c0007a28:	a1 a0 38 02 c0       	mov    eax,ds:0xc00238a0
c0007a2d:	eb f1                	jmp    c0007a20 <sbrk+0x68>
c0007a2f:	83 ec 08             	sub    esp,0x8
c0007a32:	50                   	push   eax
c0007a33:	68 40 0e 02 c0       	push   0xc0020e40
c0007a38:	e8 38 2f 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0007a3d:	83 c4 10             	add    esp,0x10
c0007a40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a45:	eb d9                	jmp    c0007a20 <sbrk+0x68>
c0007a47:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a4d:	eb 8d                	jmp    c00079dc <sbrk+0x24>

c0007a4f <mmap>:
c0007a4f:	83 ec 18             	sub    esp,0x18
c0007a52:	68 70 0e 02 c0       	push   0xc0020e70
c0007a57:	e8 b7 9c 00 00       	call   c0011713 <KePanic(char const*)>
c0007a5c:	b8 00 00 00 00       	mov    eax,0x0
c0007a61:	83 c4 1c             	add    esp,0x1c
c0007a64:	c3                   	ret    

c0007a65 <munmap>:
c0007a65:	83 ec 18             	sub    esp,0x18
c0007a68:	68 75 0e 02 c0       	push   0xc0020e75
c0007a6d:	e8 a1 9c 00 00       	call   c0011713 <KePanic(char const*)>
c0007a72:	b8 00 00 00 00       	mov    eax,0x0
c0007a77:	83 c4 1c             	add    esp,0x1c
c0007a7a:	c3                   	ret    

c0007a7b <liballoc_lock()>:
c0007a7b:	fa                   	cli    
c0007a7c:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a83:	b8 00 00 00 00       	mov    eax,0x0
c0007a88:	c3                   	ret    

c0007a89 <liballoc_unlock()>:
c0007a89:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a8e:	83 e8 01             	sub    eax,0x1
c0007a91:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a96:	75 01                	jne    c0007a99 <liballoc_unlock()+0x10>
c0007a98:	fb                   	sti    
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	c3                   	ret    

c0007a9f <liballoc_alloc(int)>:
c0007a9f:	83 ec 10             	sub    esp,0x10
c0007aa2:	6a 01                	push   0x1
c0007aa4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aa8:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007aae:	e8 a1 23 00 00       	call   c0009e54 <VAS::allocatePages(int, int)>
c0007ab3:	83 c4 1c             	add    esp,0x1c
c0007ab6:	c3                   	ret    

c0007ab7 <liballoc_free(void*, int)>:
c0007ab7:	83 ec 14             	sub    esp,0x14
c0007aba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007abe:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007ac4:	e8 cf 1f 00 00       	call   c0009a98 <VAS::freeAllocatedPages(unsigned long)>
c0007ac9:	b8 00 00 00 00       	mov    eax,0x0
c0007ace:	83 c4 1c             	add    esp,0x1c
c0007ad1:	c3                   	ret    

c0007ad2 <realloc>:
c0007ad2:	83 ec 14             	sub    esp,0x14
c0007ad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 06 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <malloc>:
c0007ae6:	83 ec 18             	sub    esp,0x18
c0007ae9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aed:	e8 b9 95 ff ff       	call   c00010ab <dlmalloc>
c0007af2:	83 c4 1c             	add    esp,0x1c
c0007af5:	c3                   	ret    

c0007af6 <free>:
c0007af6:	83 ec 18             	sub    esp,0x18
c0007af9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afd:	e8 51 92 ff ff       	call   c0000d53 <dlfree>
c0007b02:	83 c4 1c             	add    esp,0x1c
c0007b05:	c3                   	ret    

c0007b06 <rfree>:
c0007b06:	83 ec 18             	sub    esp,0x18
c0007b09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b0d:	e8 41 92 ff ff       	call   c0000d53 <dlfree>
c0007b12:	83 c4 1c             	add    esp,0x1c
c0007b15:	c3                   	ret    

c0007b16 <calloc>:
c0007b16:	56                   	push   esi
c0007b17:	53                   	push   ebx
c0007b18:	83 ec 10             	sub    esp,0x10
c0007b1b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b1f:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b24:	53                   	push   ebx
c0007b25:	e8 bc ff ff ff       	call   c0007ae6 <malloc>
c0007b2a:	89 c6                	mov    esi,eax
c0007b2c:	83 c4 0c             	add    esp,0xc
c0007b2f:	53                   	push   ebx
c0007b30:	6a 00                	push   0x0
c0007b32:	50                   	push   eax
c0007b33:	e8 b8 89 ff ff       	call   c00004f0 <memset>
c0007b38:	89 f0                	mov    eax,esi
c0007b3a:	83 c4 14             	add    esp,0x14
c0007b3d:	5b                   	pop    ebx
c0007b3e:	5e                   	pop    esi
c0007b3f:	c3                   	ret    

c0007b40 <KeEntryPoint>:
c0007b40:	57                   	push   edi
c0007b41:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b46:	56                   	push   esi
c0007b47:	89 fa                	mov    edx,edi
c0007b49:	53                   	push   ebx
c0007b4a:	31 f6                	xor    esi,esi
c0007b4c:	83 ec 2c             	sub    esp,0x2c
c0007b4f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b54:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b59:	89 f0                	mov    eax,esi
c0007b5b:	ee                   	out    dx,al
c0007b5c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b61:	b0 80                	mov    al,0x80
c0007b63:	89 da                	mov    edx,ebx
c0007b65:	ee                   	out    dx,al
c0007b66:	b1 03                	mov    cl,0x3
c0007b68:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b6d:	88 c8                	mov    al,cl
c0007b6f:	ee                   	out    dx,al
c0007b70:	89 f0                	mov    eax,esi
c0007b72:	89 fa                	mov    edx,edi
c0007b74:	ee                   	out    dx,al
c0007b75:	88 c8                	mov    al,cl
c0007b77:	89 da                	mov    edx,ebx
c0007b79:	ee                   	out    dx,al
c0007b7a:	b0 c7                	mov    al,0xc7
c0007b7c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b81:	ee                   	out    dx,al
c0007b82:	b0 0b                	mov    al,0xb
c0007b84:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b89:	ee                   	out    dx,al
c0007b8a:	68 7c 0e 02 c0       	push   0xc0020e7c
c0007b8f:	e8 e1 2d 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0007b94:	e8 fe 93 00 00       	call   c0010f97 <KeDisplaySplashScreen()>
c0007b99:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b9e:	05 ff 0f 00 00       	add    eax,0xfff
c0007ba3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007ba8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bab:	e8 ad 03 00 00       	call   c0007f5d <Phys::physicalMemorySetup(unsigned int)>
c0007bb0:	e8 66 1c 00 00       	call   c000981b <Virt::virtualMemorySetup()>
c0007bb5:	e8 27 93 00 00       	call   c0010ee1 <KeInitialiseAtexit()>
c0007bba:	58                   	pop    eax
c0007bbb:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bbf:	53                   	push   ebx
c0007bc0:	e8 53 1f 00 00       	call   c0009b18 <VAS::VAS()>
c0007bc5:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007bcb:	e8 ba 7e 01 00       	call   c001fa8a <_init>
c0007bd0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bd7:	e8 0a ff ff ff       	call   c0007ae6 <malloc>
c0007bdc:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	e8 30 f2 ff ff       	call   c0006e16 <Computer::Computer()>
c0007be6:	53                   	push   ebx
c0007be7:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bed:	6a 00                	push   0x0
c0007bef:	6a 00                	push   0x0
c0007bf1:	56                   	push   esi
c0007bf2:	e8 e7 f5 ff ff       	call   c00071de <Computer::open(int, int, void*)>
c0007bf7:	83 c4 14             	add    esp,0x14
c0007bfa:	53                   	push   ebx
c0007bfb:	e8 e2 1f 00 00       	call   c0009be2 <VAS::~VAS()>
c0007c00:	83 c4 30             	add    esp,0x30
c0007c03:	5b                   	pop    ebx
c0007c04:	5e                   	pop    esi
c0007c05:	5f                   	pop    edi
c0007c06:	c3                   	ret    

c0007c07 <Phys::allocateDMA(unsigned long)>:
c0007c07:	55                   	push   ebp
c0007c08:	31 ed                	xor    ebp,ebp
c0007c0a:	57                   	push   edi
c0007c0b:	56                   	push   esi
c0007c0c:	53                   	push   ebx
c0007c0d:	31 db                	xor    ebx,ebx
c0007c0f:	83 ec 1c             	sub    esp,0x1c
c0007c12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c16:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007c1e:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007c24:	31 c0                	xor    eax,eax
c0007c26:	c1 ef 0c             	shr    edi,0xc
c0007c29:	eb 1b                	jmp    c0007c46 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c2b:	85 c0                	test   eax,eax
c0007c2d:	75 06                	jne    c0007c35 <Phys::allocateDMA(unsigned long)+0x2e>
c0007c2f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c33:	89 dd                	mov    ebp,ebx
c0007c35:	8d 70 01             	lea    esi,[eax+0x1]
c0007c38:	39 f7                	cmp    edi,esi
c0007c3a:	74 37                	je     c0007c73 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c3c:	89 f0                	mov    eax,esi
c0007c3e:	83 c3 01             	add    ebx,0x1
c0007c41:	83 fb 0f             	cmp    ebx,0xf
c0007c44:	7f 13                	jg     c0007c59 <Phys::allocateDMA(unsigned long)+0x52>
c0007c46:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c4d:	74 dc                	je     c0007c2b <Phys::allocateDMA(unsigned long)+0x24>
c0007c4f:	31 c0                	xor    eax,eax
c0007c51:	83 c3 01             	add    ebx,0x1
c0007c54:	83 fb 0f             	cmp    ebx,0xf
c0007c57:	7e ed                	jle    c0007c46 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c59:	83 ec 0c             	sub    esp,0xc
c0007c5c:	68 94 0e 02 c0       	push   0xc0020e94
c0007c61:	e8 ad 9a 00 00       	call   c0011713 <KePanic(char const*)>
c0007c66:	83 c4 10             	add    esp,0x10
c0007c69:	31 c0                	xor    eax,eax
c0007c6b:	83 c4 1c             	add    esp,0x1c
c0007c6e:	5b                   	pop    ebx
c0007c6f:	5e                   	pop    esi
c0007c70:	5f                   	pop    edi
c0007c71:	5d                   	pop    ebp
c0007c72:	c3                   	ret    
c0007c73:	89 e9                	mov    ecx,ebp
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c7c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c80:	89 ca                	mov    edx,ecx
c0007c82:	83 ea 01             	sub    edx,0x1
c0007c85:	79 03                	jns    c0007c8a <Phys::allocateDMA(unsigned long)+0x83>
c0007c87:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c8a:	c1 fa 04             	sar    edx,0x4
c0007c8d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c91:	74 08                	je     c0007c9b <Phys::allocateDMA(unsigned long)+0x94>
c0007c93:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c97:	31 c0                	xor    eax,eax
c0007c99:	eb b6                	jmp    c0007c51 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c9b:	85 f6                	test   esi,esi
c0007c9d:	74 17                	je     c0007cb6 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c9f:	8d 95 ec 6e 02 c0    	lea    edx,[ebp-0x3ffd9114]
c0007ca5:	8d 84 05 ed 6e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9113]
c0007cac:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007caf:	83 c2 01             	add    edx,0x1
c0007cb2:	39 d0                	cmp    eax,edx
c0007cb4:	75 f6                	jne    c0007cac <Phys::allocateDMA(unsigned long)+0xa5>
c0007cb6:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007cbf:	01 f8                	add    eax,edi
c0007cc1:	85 d2                	test   edx,edx
c0007cc3:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cc8:	74 17                	je     c0007ce1 <Phys::allocateDMA(unsigned long)+0xda>
c0007cca:	83 ec 0c             	sub    esp,0xc
c0007ccd:	68 94 0e 02 c0       	push   0xc0020e94
c0007cd2:	e8 3c 9a 00 00       	call   c0011713 <KePanic(char const*)>
c0007cd7:	83 c4 10             	add    esp,0x10
c0007cda:	89 f0                	mov    eax,esi
c0007cdc:	e9 5d ff ff ff       	jmp    c0007c3e <Phys::allocateDMA(unsigned long)+0x37>
c0007ce1:	c1 e5 0c             	shl    ebp,0xc
c0007ce4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cea:	e9 7c ff ff ff       	jmp    c0007c6b <Phys::allocateDMA(unsigned long)+0x64>

c0007cef <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cf9:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cfe:	c1 ea 0c             	shr    edx,0xc
c0007d01:	29 d0                	sub    eax,edx
c0007d03:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d0c:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d11:	c1 e8 0c             	shr    eax,0xc
c0007d14:	85 d2                	test   edx,edx
c0007d16:	74 11                	je     c0007d29 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d18:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d1d:	01 c2                	add    edx,eax
c0007d1f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d22:	83 c0 01             	add    eax,0x1
c0007d25:	39 d0                	cmp    eax,edx
c0007d27:	75 f6                	jne    c0007d1f <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d29:	c3                   	ret    

c0007d2a <Phys::setPageState(unsigned long, bool)>:
c0007d2a:	57                   	push   edi
c0007d2b:	56                   	push   esi
c0007d2c:	8b 35 a4 38 02 c0    	mov    esi,DWORD PTR ds:0xc00238a4
c0007d32:	53                   	push   ebx
c0007d33:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d3c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d40:	0f b6 c0             	movzx  eax,al
c0007d43:	89 ca                	mov    edx,ecx
c0007d45:	83 e1 07             	and    ecx,0x7
c0007d48:	c1 ea 03             	shr    edx,0x3
c0007d4b:	d3 c3                	rol    ebx,cl
c0007d4d:	01 d6                	add    esi,edx
c0007d4f:	d3 e0                	shl    eax,cl
c0007d51:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d54:	21 fb                	and    ebx,edi
c0007d56:	88 1e                	mov    BYTE PTR [esi],bl
c0007d58:	8b 1d a4 38 02 c0    	mov    ebx,DWORD PTR ds:0xc00238a4
c0007d5e:	01 da                	add    edx,ebx
c0007d60:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d62:	09 c8                	or     eax,ecx
c0007d64:	88 02                	mov    BYTE PTR [edx],al
c0007d66:	5b                   	pop    ebx
c0007d67:	5e                   	pop    esi
c0007d68:	5f                   	pop    edi
c0007d69:	c3                   	ret    

c0007d6a <Phys::getPageState(unsigned long)>:
c0007d6a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d6e:	8b 15 a4 38 02 c0    	mov    edx,DWORD PTR ds:0xc00238a4
c0007d74:	89 c8                	mov    eax,ecx
c0007d76:	83 e1 07             	and    ecx,0x7
c0007d79:	c1 e8 03             	shr    eax,0x3
c0007d7c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d80:	d3 f8                	sar    eax,cl
c0007d82:	83 e0 01             	and    eax,0x1
c0007d85:	c3                   	ret    

c0007d86 <Phys::freePage(unsigned long)>:
c0007d86:	53                   	push   ebx
c0007d87:	83 ec 08             	sub    esp,0x8
c0007d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d8e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d94:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d9a:	76 41                	jbe    c0007ddd <Phys::freePage(unsigned long)+0x57>
c0007d9c:	c1 e8 0c             	shr    eax,0xc
c0007d9f:	50                   	push   eax
c0007da0:	89 c3                	mov    ebx,eax
c0007da2:	e8 c3 ff ff ff       	call   c0007d6a <Phys::getPageState(unsigned long)>
c0007da7:	5a                   	pop    edx
c0007da8:	84 c0                	test   al,al
c0007daa:	74 20                	je     c0007dcc <Phys::freePage(unsigned long)+0x46>
c0007dac:	83 ec 08             	sub    esp,0x8
c0007daf:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007db4:	6a 00                	push   0x0
c0007db6:	83 e8 01             	sub    eax,0x1
c0007db9:	53                   	push   ebx
c0007dba:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007dbf:	e8 66 ff ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c0007dc4:	83 c4 10             	add    esp,0x10
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	c3                   	ret    
c0007dcc:	c7 44 24 10 39 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f39
c0007dd4:	83 c4 08             	add    esp,0x8
c0007dd7:	5b                   	pop    ebx
c0007dd8:	e9 36 99 00 00       	jmp    c0011713 <KePanic(char const*)>
c0007ddd:	68 00 10 00 00       	push   0x1000
c0007de2:	50                   	push   eax
c0007de3:	e8 07 ff ff ff       	call   c0007cef <Phys::freeDMA(unsigned long, unsigned long)>
c0007de8:	59                   	pop    ecx
c0007de9:	5b                   	pop    ebx
c0007dea:	83 c4 08             	add    esp,0x8
c0007ded:	5b                   	pop    ebx
c0007dee:	c3                   	ret    

c0007def <Phys::allocatePage()>:
c0007def:	56                   	push   esi
c0007df0:	53                   	push   ebx
c0007df1:	83 ec 14             	sub    esp,0x14
c0007df4:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007dfa:	89 f3                	mov    ebx,esi
c0007dfc:	eb 0a                	jmp    c0007e08 <Phys::allocatePage()+0x19>
c0007dfe:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007e04:	39 de                	cmp    esi,ebx
c0007e06:	74 26                	je     c0007e2e <Phys::allocatePage()+0x3f>
c0007e08:	53                   	push   ebx
c0007e09:	e8 5c ff ff ff       	call   c0007d6a <Phys::getPageState(unsigned long)>
c0007e0e:	5a                   	pop    edx
c0007e0f:	84 c0                	test   al,al
c0007e11:	74 67                	je     c0007e7a <Phys::allocatePage()+0x8b>
c0007e13:	83 c3 01             	add    ebx,0x1
c0007e16:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e1c:	75 e0                	jne    c0007dfe <Phys::allocatePage()+0xf>
c0007e1e:	31 db                	xor    ebx,ebx
c0007e20:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e2a:	39 de                	cmp    esi,ebx
c0007e2c:	75 da                	jne    c0007e08 <Phys::allocatePage()+0x19>
c0007e2e:	83 ec 0c             	sub    esp,0xc
c0007e31:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e36:	83 f0 01             	xor    eax,0x1
c0007e39:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e46:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e4c:	50                   	push   eax
c0007e4d:	e8 a8 27 00 00       	call   c000a5fa <VAS::scanForEviction()>
c0007e52:	83 c4 10             	add    esp,0x10
c0007e55:	85 c0                	test   eax,eax
c0007e57:	75 48                	jne    c0007ea1 <Phys::allocatePage()+0xb2>
c0007e59:	83 ec 0c             	sub    esp,0xc
c0007e5c:	68 bc 0e 02 c0       	push   0xc0020ebc
c0007e61:	e8 ad 98 00 00       	call   c0011713 <KePanic(char const*)>
c0007e66:	83 c4 10             	add    esp,0x10
c0007e69:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e6f:	53                   	push   ebx
c0007e70:	e8 f5 fe ff ff       	call   c0007d6a <Phys::getPageState(unsigned long)>
c0007e75:	5a                   	pop    edx
c0007e76:	84 c0                	test   al,al
c0007e78:	75 99                	jne    c0007e13 <Phys::allocatePage()+0x24>
c0007e7a:	6a 01                	push   0x1
c0007e7c:	53                   	push   ebx
c0007e7d:	e8 a8 fe ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c0007e82:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e88:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e8d:	83 c2 01             	add    edx,0x1
c0007e90:	59                   	pop    ecx
c0007e91:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e97:	c1 e0 0c             	shl    eax,0xc
c0007e9a:	5b                   	pop    ebx
c0007e9b:	83 c4 14             	add    esp,0x14
c0007e9e:	5b                   	pop    ebx
c0007e9f:	5e                   	pop    esi
c0007ea0:	c3                   	ret    
c0007ea1:	83 ec 08             	sub    esp,0x8
c0007ea4:	89 c2                	mov    edx,eax
c0007ea6:	6a 01                	push   0x1
c0007ea8:	c1 ea 0c             	shr    edx,0xc
c0007eab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007eaf:	52                   	push   edx
c0007eb0:	e8 75 fe ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c0007eb5:	83 c4 10             	add    esp,0x10
c0007eb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ebc:	eb dd                	jmp    c0007e9b <Phys::allocatePage()+0xac>

c0007ebe <Phys::allocateContiguousPages(int)>:
c0007ebe:	57                   	push   edi
c0007ebf:	56                   	push   esi
c0007ec0:	53                   	push   ebx
c0007ec1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ec5:	fa                   	cli    
c0007ec6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007ecb:	31 db                	xor    ebx,ebx
c0007ecd:	83 c0 01             	add    eax,0x1
c0007ed0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ed5:	85 db                	test   ebx,ebx
c0007ed7:	75 11                	jne    c0007eea <Phys::allocateContiguousPages(int)+0x2c>
c0007ed9:	e8 11 ff ff ff       	call   c0007def <Phys::allocatePage()>
c0007ede:	83 fe 01             	cmp    esi,0x1
c0007ee1:	89 c7                	mov    edi,eax
c0007ee3:	74 21                	je     c0007f06 <Phys::allocateContiguousPages(int)+0x48>
c0007ee5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eea:	e8 00 ff ff ff       	call   c0007def <Phys::allocatePage()>
c0007eef:	89 da                	mov    edx,ebx
c0007ef1:	c1 e2 0c             	shl    edx,0xc
c0007ef4:	01 fa                	add    edx,edi
c0007ef6:	39 c2                	cmp    edx,eax
c0007ef8:	74 22                	je     c0007f1c <Phys::allocateContiguousPages(int)+0x5e>
c0007efa:	bb 01 00 00 00       	mov    ebx,0x1
c0007eff:	89 c7                	mov    edi,eax
c0007f01:	83 fe 01             	cmp    esi,0x1
c0007f04:	75 e4                	jne    c0007eea <Phys::allocateContiguousPages(int)+0x2c>
c0007f06:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007f0b:	83 e8 01             	sub    eax,0x1
c0007f0e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f13:	75 01                	jne    c0007f16 <Phys::allocateContiguousPages(int)+0x58>
c0007f15:	fb                   	sti    
c0007f16:	89 f8                	mov    eax,edi
c0007f18:	5b                   	pop    ebx
c0007f19:	5e                   	pop    esi
c0007f1a:	5f                   	pop    edi
c0007f1b:	c3                   	ret    
c0007f1c:	83 c3 01             	add    ebx,0x1
c0007f1f:	39 f3                	cmp    ebx,esi
c0007f21:	75 b2                	jne    c0007ed5 <Phys::allocateContiguousPages(int)+0x17>
c0007f23:	eb e1                	jmp    c0007f06 <Phys::allocateContiguousPages(int)+0x48>

c0007f25 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f25:	56                   	push   esi
c0007f26:	53                   	push   ebx
c0007f27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f2b:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f31:	73 06                	jae    c0007f39 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f33:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f3d:	c1 eb 0c             	shr    ebx,0xc
c0007f40:	c1 e8 0c             	shr    eax,0xc
c0007f43:	39 d8                	cmp    eax,ebx
c0007f45:	73 13                	jae    c0007f5a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f47:	6a 00                	push   0x0
c0007f49:	8d 70 01             	lea    esi,[eax+0x1]
c0007f4c:	50                   	push   eax
c0007f4d:	e8 d8 fd ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c0007f52:	5a                   	pop    edx
c0007f53:	89 f0                	mov    eax,esi
c0007f55:	59                   	pop    ecx
c0007f56:	39 f3                	cmp    ebx,esi
c0007f58:	75 ed                	jne    c0007f47 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f5a:	5b                   	pop    ebx
c0007f5b:	5e                   	pop    esi
c0007f5c:	c3                   	ret    

c0007f5d <Phys::physicalMemorySetup(unsigned int)>:
c0007f5d:	55                   	push   ebp
c0007f5e:	57                   	push   edi
c0007f5f:	56                   	push   esi
c0007f60:	53                   	push   ebx
c0007f61:	83 ec 40             	sub    esp,0x40
c0007f64:	6a 10                	push   0x10
c0007f66:	6a 00                	push   0x0
c0007f68:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f6d:	e8 7e 85 ff ff       	call   c00004f0 <memset>
c0007f72:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f76:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f7b:	05 00 10 00 00       	add    eax,0x1000
c0007f80:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f84:	5b                   	pop    ebx
c0007f85:	31 db                	xor    ebx,ebx
c0007f87:	5e                   	pop    esi
c0007f88:	50                   	push   eax
c0007f89:	68 4f 0f 02 c0       	push   0xc0020f4f
c0007f8e:	e8 e2 29 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0007f93:	83 c4 10             	add    esp,0x10
c0007f96:	83 ec 08             	sub    esp,0x8
c0007f99:	6a 01                	push   0x1
c0007f9b:	53                   	push   ebx
c0007f9c:	83 c3 01             	add    ebx,0x1
c0007f9f:	e8 86 fd ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c0007fa4:	83 c4 10             	add    esp,0x10
c0007fa7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fad:	75 e7                	jne    c0007f96 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007faf:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fb6:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fbd:	c1 e0 08             	shl    eax,0x8
c0007fc0:	09 c2                	or     edx,eax
c0007fc2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007fc6:	0f 84 98 01 00 00    	je     c0008164 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007fcc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fd0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fd8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fdd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fe1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fe9:	eb 1c                	jmp    c0008007 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007feb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fef:	83 c3 18             	add    ebx,0x18
c0007ff2:	83 c6 01             	add    esi,0x1
c0007ff5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007ff9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ffd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008001:	0f 84 6d 01 00 00    	je     c0008174 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008007:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000800a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000800d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008010:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008014:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008018:	8b 33                	mov    esi,DWORD PTR [ebx]
c000801a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000801d:	01 f0                	add    eax,esi
c000801f:	55                   	push   ebp
c0008020:	11 fa                	adc    edx,edi
c0008022:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008026:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000802a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000802e:	51                   	push   ecx
c000802f:	56                   	push   esi
c0008030:	68 ec 0e 02 c0       	push   0xc0020eec
c0008035:	e8 3b 29 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000803a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000803e:	83 c4 10             	add    esp,0x10
c0008041:	09 f8                	or     eax,edi
c0008043:	0f 85 2b 01 00 00    	jne    c0008174 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008049:	83 fd 01             	cmp    ebp,0x1
c000804c:	75 9d                	jne    c0007feb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000804e:	ba 00 00 08 00       	mov    edx,0x80000
c0008053:	89 c1                	mov    ecx,eax
c0008055:	39 f2                	cmp    edx,esi
c0008057:	19 f9                	sbb    ecx,edi
c0008059:	0f 82 ab 00 00 00    	jb     c000810a <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000805f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008063:	89 c1                	mov    ecx,eax
c0008065:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008069:	0f 83 9b 00 00 00    	jae    c000810a <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000806f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008074:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008078:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000807c:	39 fa                	cmp    edx,edi
c000807e:	19 e8                	sbb    eax,ebp
c0008080:	0f 82 b0 01 00 00    	jb     c0008236 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008086:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000808a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000808e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008094:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008099:	83 d5 ff             	adc    ebp,0xffffffff
c000809c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080a0:	31 c0                	xor    eax,eax
c00080a2:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080a6:	39 fa                	cmp    edx,edi
c00080a8:	89 c1                	mov    ecx,eax
c00080aa:	19 e9                	sbb    ecx,ebp
c00080ac:	0f 83 39 ff ff ff    	jae    c0007feb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080b2:	be 00 00 08 00       	mov    esi,0x80000
c00080b7:	83 ec 04             	sub    esp,0x4
c00080ba:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00080be:	57                   	push   edi
c00080bf:	56                   	push   esi
c00080c0:	68 10 0f 02 c0       	push   0xc0020f10
c00080c5:	e8 ab 28 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00080ca:	5d                   	pop    ebp
c00080cb:	58                   	pop    eax
c00080cc:	57                   	push   edi
c00080cd:	56                   	push   esi
c00080ce:	e8 52 fe ff ff       	call   c0007f25 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080d3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080db:	83 c4 0c             	add    esp,0xc
c00080de:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080e2:	8b 15 e8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee8
c00080e8:	01 d0                	add    eax,edx
c00080ea:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080f1:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00080f6:	52                   	push   edx
c00080f7:	50                   	push   eax
c00080f8:	68 75 0f 02 c0       	push   0xc0020f75
c00080fd:	e8 73 28 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0008102:	83 c4 10             	add    esp,0x10
c0008105:	e9 e1 fe ff ff       	jmp    c0007feb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000810a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000810e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008112:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008116:	39 ea                	cmp    edx,ebp
c0008118:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000811c:	0f 82 c9 fe ff ff    	jb     c0007feb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008122:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008127:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000812b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000812f:	0f 83 b6 fe ff ff    	jae    c0007feb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008135:	39 ee                	cmp    esi,ebp
c0008137:	89 f8                	mov    eax,edi
c0008139:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000813d:	0f 83 74 ff ff ff    	jae    c00080b7 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008143:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008147:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000814b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000814f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008153:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008157:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000815b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000815f:	e9 53 ff ff ff       	jmp    c00080b7 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008164:	83 ec 0c             	sub    esp,0xc
c0008167:	68 67 0f 02 c0       	push   0xc0020f67
c000816c:	e8 a2 95 00 00       	call   c0011713 <KePanic(char const*)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 ec 08             	sub    esp,0x8
c0008177:	bb 60 00 00 00       	mov    ebx,0x60
c000817c:	6a 00                	push   0x0
c000817e:	6a 06                	push   0x6
c0008180:	e8 a5 fb ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c0008185:	58                   	pop    eax
c0008186:	5a                   	pop    edx
c0008187:	6a 00                	push   0x0
c0008189:	6a 07                	push   0x7
c000818b:	e8 9a fb ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c0008190:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008196:	83 c4 10             	add    esp,0x10
c0008199:	83 c1 02             	add    ecx,0x2
c000819c:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c00081a2:	83 ec 08             	sub    esp,0x8
c00081a5:	6a 00                	push   0x0
c00081a7:	53                   	push   ebx
c00081a8:	83 c3 01             	add    ebx,0x1
c00081ab:	e8 7a fb ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c00081b0:	83 c4 10             	add    esp,0x10
c00081b3:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00081b9:	75 e7                	jne    c00081a2 <Phys::physicalMemorySetup(unsigned int)+0x245>
c00081bb:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081c0:	bb 40 01 00 00       	mov    ebx,0x140
c00081c5:	83 c0 20             	add    eax,0x20
c00081c8:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081cd:	eb 26                	jmp    c00081f5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c00081cf:	83 ec 08             	sub    esp,0x8
c00081d2:	6a 00                	push   0x0
c00081d4:	53                   	push   ebx
c00081d5:	83 c3 01             	add    ebx,0x1
c00081d8:	e8 4d fb ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c00081dd:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081e2:	83 c4 10             	add    esp,0x10
c00081e5:	83 c0 01             	add    eax,0x1
c00081e8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081ee:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081f3:	74 07                	je     c00081fc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081f5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081fa:	7e d3                	jle    c00081cf <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081fc:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008201:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008206:	7f 26                	jg     c000822e <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0008208:	83 ec 08             	sub    esp,0x8
c000820b:	6a 00                	push   0x0
c000820d:	53                   	push   ebx
c000820e:	83 c3 01             	add    ebx,0x1
c0008211:	e8 14 fb ff ff       	call   c0007d2a <Phys::setPageState(unsigned long, bool)>
c0008216:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000821b:	83 c4 10             	add    esp,0x10
c000821e:	83 c0 01             	add    eax,0x1
c0008221:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0008227:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000822c:	75 d3                	jne    c0008201 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c000822e:	83 c4 3c             	add    esp,0x3c
c0008231:	5b                   	pop    ebx
c0008232:	5e                   	pop    esi
c0008233:	5f                   	pop    edi
c0008234:	5d                   	pop    ebp
c0008235:	c3                   	ret    
c0008236:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000823e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008246:	e9 3b fe ff ff       	jmp    c0008086 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000824b:	90                   	nop

c000824c <Pipe::isAtty()>:
c000824c:	31 c0                	xor    eax,eax
c000824e:	c3                   	ret    
c000824f:	90                   	nop

c0008250 <Pipe::~Pipe()>:
c0008250:	83 ec 0c             	sub    esp,0xc
c0008253:	ba d4 0f 02 c0       	mov    edx,0xc0020fd4
c0008258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000825c:	89 10                	mov    DWORD PTR [eax],edx
c000825e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008262:	83 ec 0c             	sub    esp,0xc
c0008265:	50                   	push   eax
c0008266:	e8 69 11 00 00       	call   c00093d4 <UnixFile::~UnixFile()>
c000826b:	83 c4 10             	add    esp,0x10
c000826e:	90                   	nop
c000826f:	83 c4 0c             	add    esp,0xc
c0008272:	c3                   	ret    
c0008273:	90                   	nop

c0008274 <Pipe::~Pipe()>:
c0008274:	83 ec 0c             	sub    esp,0xc
c0008277:	83 ec 0c             	sub    esp,0xc
c000827a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827e:	e8 cd ff ff ff       	call   c0008250 <Pipe::~Pipe()>
c0008283:	83 c4 10             	add    esp,0x10
c0008286:	83 ec 08             	sub    esp,0x8
c0008289:	6a 20                	push   0x20
c000828b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000828f:	e8 b4 25 00 00       	call   c000a848 <operator delete(void*, unsigned long)>
c0008294:	83 c4 10             	add    esp,0x10
c0008297:	83 c4 0c             	add    esp,0xc
c000829a:	c3                   	ret    
c000829b:	90                   	nop

c000829c <Pipe::write(unsigned long long, void*, int*)>:
c000829c:	55                   	push   ebp
c000829d:	57                   	push   edi
c000829e:	56                   	push   esi
c000829f:	53                   	push   ebx
c00082a0:	83 ec 1c             	sub    esp,0x1c
c00082a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00082a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00082ab:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00082ae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00082b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00082b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082b9:	89 d8                	mov    eax,ebx
c00082bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082be:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082c2:	89 d6                	mov    esi,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	c1 ff 1f             	sar    edi,0x1f
c00082c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00082cc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082d0:	c1 f8 1f             	sar    eax,0x1f
c00082d3:	39 f3                	cmp    ebx,esi
c00082d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082dd:	19 f8                	sbb    eax,edi
c00082df:	b8 01 00 00 00       	mov    eax,0x1
c00082e4:	72 6e                	jb     c0008354 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082e6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082e9:	01 d0                	add    eax,edx
c00082eb:	99                   	cdq    
c00082ec:	f7 fb                	idiv   ebx
c00082ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082f2:	29 d3                	sub    ebx,edx
c00082f4:	89 d7                	mov    edi,edx
c00082f6:	89 de                	mov    esi,ebx
c00082f8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082fb:	c1 fb 1f             	sar    ebx,0x1f
c00082fe:	39 f2                	cmp    edx,esi
c0008300:	19 d8                	sbb    eax,ebx
c0008302:	b8 00 00 00 00       	mov    eax,0x0
c0008307:	72 04                	jb     c000830d <Pipe::write(unsigned long long, void*, int*)+0x71>
c0008309:	89 d0                	mov    eax,edx
c000830b:	29 f0                	sub    eax,esi
c000830d:	89 d3                	mov    ebx,edx
c000830f:	29 c3                	sub    ebx,eax
c0008311:	74 0b                	je     c000831e <Pipe::write(unsigned long long, void*, int*)+0x82>
c0008313:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008316:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000831a:	89 d9                	mov    ecx,ebx
c000831c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831e:	85 c0                	test   eax,eax
c0008320:	74 0d                	je     c000832f <Pipe::write(unsigned long long, void*, int*)+0x93>
c0008322:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008326:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008329:	89 de                	mov    esi,ebx
c000832b:	89 c1                	mov    ecx,eax
c000832d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000832f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008332:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008337:	75 10                	jne    c0008349 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008339:	83 ec 0c             	sub    esp,0xc
c000833c:	68 91 0f 02 c0       	push   0xc0020f91
c0008341:	e8 cd 93 00 00       	call   c0011713 <KePanic(char const*)>
c0008346:	83 c4 10             	add    esp,0x10
c0008349:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000834d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008350:	89 08                	mov    DWORD PTR [eax],ecx
c0008352:	31 c0                	xor    eax,eax
c0008354:	83 c4 1c             	add    esp,0x1c
c0008357:	5b                   	pop    ebx
c0008358:	5e                   	pop    esi
c0008359:	5f                   	pop    edi
c000835a:	5d                   	pop    ebp
c000835b:	c3                   	ret    

c000835c <Pipe::read(unsigned long long, void*, int*)>:
c000835c:	55                   	push   ebp
c000835d:	57                   	push   edi
c000835e:	56                   	push   esi
c000835f:	53                   	push   ebx
c0008360:	83 ec 1c             	sub    esp,0x1c
c0008363:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008367:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000836b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000836f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008372:	89 c8                	mov    eax,ecx
c0008374:	99                   	cdq    
c0008375:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008379:	74 24                	je     c000839f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000837b:	39 f9                	cmp    ecx,edi
c000837d:	89 d1                	mov    ecx,edx
c000837f:	19 f1                	sbb    ecx,esi
c0008381:	73 1c                	jae    c000839f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008383:	fa                   	cli    
c0008384:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000838a:	e8 69 de 00 00       	call   c00161f8 <schedule()>
c000838f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008394:	48                   	dec    eax
c0008395:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000839a:	75 d3                	jne    c000836f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000839c:	fb                   	sti    
c000839d:	eb d0                	jmp    c000836f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000839f:	39 f8                	cmp    eax,edi
c00083a1:	89 d1                	mov    ecx,edx
c00083a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00083a6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00083aa:	19 f1                	sbb    ecx,esi
c00083ac:	73 07                	jae    c00083b5 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00083ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00083b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00083b5:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083b8:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083bb:	29 f7                	sub    edi,esi
c00083bd:	89 f8                	mov    eax,edi
c00083bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00083c3:	99                   	cdq    
c00083c4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00083c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083cb:	19 d0                	sbb    eax,edx
c00083cd:	73 07                	jae    c00083d6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00083cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083d6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083d9:	89 ea                	mov    edx,ebp
c00083db:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083df:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083e4:	74 0d                	je     c00083f3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083e6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083e9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083f3:	85 d2                	test   edx,edx
c00083f5:	74 11                	je     c0008408 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083fb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083fe:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008402:	89 d1                	mov    ecx,edx
c0008404:	89 c7                	mov    edi,eax
c0008406:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008408:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000840b:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000840e:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008411:	99                   	cdq    
c0008412:	89 f7                	mov    edi,esi
c0008414:	03 04 24             	add    eax,DWORD PTR [esp]
c0008417:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000841b:	c1 ff 1f             	sar    edi,0x1f
c000841e:	57                   	push   edi
c000841f:	56                   	push   esi
c0008420:	52                   	push   edx
c0008421:	50                   	push   eax
c0008422:	e8 49 75 01 00       	call   c001f970 <__umoddi3>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000842d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008432:	75 10                	jne    c0008444 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008434:	83 ec 0c             	sub    esp,0xc
c0008437:	68 ae 0f 02 c0       	push   0xc0020fae
c000843c:	e8 d2 92 00 00       	call   c0011713 <KePanic(char const*)>
c0008441:	83 c4 10             	add    esp,0x10
c0008444:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008448:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000844b:	89 10                	mov    DWORD PTR [eax],edx
c000844d:	83 c4 1c             	add    esp,0x1c
c0008450:	31 c0                	xor    eax,eax
c0008452:	5b                   	pop    ebx
c0008453:	5e                   	pop    esi
c0008454:	5f                   	pop    edi
c0008455:	5d                   	pop    ebp
c0008456:	c3                   	ret    
c0008457:	90                   	nop

c0008458 <Pipe::Pipe(int)>:
c0008458:	83 ec 0c             	sub    esp,0xc
c000845b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845f:	83 ec 08             	sub    esp,0x8
c0008462:	6a 00                	push   0x0
c0008464:	50                   	push   eax
c0008465:	e8 84 0d 00 00       	call   c00091ee <UnixFile::UnixFile(int)>
c000846a:	83 c4 10             	add    esp,0x10
c000846d:	ba d4 0f 02 c0       	mov    edx,0xc0020fd4
c0008472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008476:	89 10                	mov    DWORD PTR [eax],edx
c0008478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008480:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008487:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000848e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008492:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008499:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000849d:	83 ec 0c             	sub    esp,0xc
c00084a0:	50                   	push   eax
c00084a1:	e8 40 f6 ff ff       	call   c0007ae6 <malloc>
c00084a6:	83 c4 10             	add    esp,0x10
c00084a9:	89 c2                	mov    edx,eax
c00084ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084ba:	90                   	nop
c00084bb:	83 c4 0c             	add    esp,0xc
c00084be:	c3                   	ret    
c00084bf:	90                   	nop

c00084c0 <VgaText::isAtty()>:
c00084c0:	b0 01                	mov    al,0x1
c00084c2:	c3                   	ret    
c00084c3:	90                   	nop

c00084c4 <VgaText::~VgaText()>:
c00084c4:	83 ec 0c             	sub    esp,0xc
c00084c7:	ba 1c 10 02 c0       	mov    edx,0xc002101c
c00084cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084d0:	89 10                	mov    DWORD PTR [eax],edx
c00084d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084d6:	83 ec 0c             	sub    esp,0xc
c00084d9:	50                   	push   eax
c00084da:	e8 f5 0e 00 00       	call   c00093d4 <UnixFile::~UnixFile()>
c00084df:	83 c4 10             	add    esp,0x10
c00084e2:	90                   	nop
c00084e3:	83 c4 0c             	add    esp,0xc
c00084e6:	c3                   	ret    
c00084e7:	90                   	nop

c00084e8 <VgaText::~VgaText()>:
c00084e8:	83 ec 0c             	sub    esp,0xc
c00084eb:	83 ec 0c             	sub    esp,0xc
c00084ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f2:	e8 cd ff ff ff       	call   c00084c4 <VgaText::~VgaText()>
c00084f7:	83 c4 10             	add    esp,0x10
c00084fa:	83 ec 08             	sub    esp,0x8
c00084fd:	68 84 01 00 00       	push   0x184
c0008502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008506:	e8 3d 23 00 00       	call   c000a848 <operator delete(void*, unsigned long)>
c000850b:	83 c4 10             	add    esp,0x10
c000850e:	83 c4 0c             	add    esp,0xc
c0008511:	c3                   	ret    

c0008512 <VgaText::read(unsigned long long, void*, int*)>:
c0008512:	83 ec 10             	sub    esp,0x10
c0008515:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008519:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000851d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008521:	e8 e6 53 00 00       	call   c000d90c <readKeyboard(VgaText*, char*, unsigned long)>
c0008526:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000852a:	89 02                	mov    DWORD PTR [edx],eax
c000852c:	31 c0                	xor    eax,eax
c000852e:	83 c4 1c             	add    esp,0x1c
c0008531:	c3                   	ret    

c0008532 <setTerminalScrollLock(bool)>:
c0008532:	c3                   	ret    

c0008533 <doTerminalCycle()>:
c0008533:	c3                   	ret    

c0008534 <addToTerminalCycle(VgaText*)>:
c0008534:	c3                   	ret    

c0008535 <scrollTerminalScrollLock(int)>:
c0008535:	c3                   	ret    

c0008536 <VgaText::updateTitle()>:
c0008536:	c3                   	ret    
c0008537:	90                   	nop

c0008538 <VgaText::load()>:
c0008538:	c3                   	ret    
c0008539:	90                   	nop

c000853a <VgaText::updateCursor()>:
c000853a:	83 ec 14             	sub    esp,0x14
c000853d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008541:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008544:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008547:	e8 64 0a 01 00       	call   c0018fb0 <HalConsoleCursorUpdate(int, int)>
c000854c:	83 c4 1c             	add    esp,0x1c
c000854f:	c3                   	ret    

c0008550 <VgaText::doANSI_SGR(int)>:
c0008550:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008558:	85 d2                	test   edx,edx
c000855a:	75 0b                	jne    c0008567 <VgaText::doANSI_SGR(int)+0x17>
c000855c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000855f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008562:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008565:	eb 59                	jmp    c00085c0 <VgaText::doANSI_SGR(int)+0x70>
c0008567:	83 fa 07             	cmp    edx,0x7
c000856a:	75 0b                	jne    c0008577 <VgaText::doANSI_SGR(int)+0x27>
c000856c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000856f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008572:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008575:	eb 49                	jmp    c00085c0 <VgaText::doANSI_SGR(int)+0x70>
c0008577:	83 fa 1b             	cmp    edx,0x1b
c000857a:	74 e0                	je     c000855c <VgaText::doANSI_SGR(int)+0xc>
c000857c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000857f:	83 f9 07             	cmp    ecx,0x7
c0008582:	77 09                	ja     c000858d <VgaText::doANSI_SGR(int)+0x3d>
c0008584:	8b 14 8d e0 38 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc720]
c000858b:	eb 20                	jmp    c00085ad <VgaText::doANSI_SGR(int)+0x5d>
c000858d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008590:	83 f9 07             	cmp    ecx,0x7
c0008593:	77 09                	ja     c000859e <VgaText::doANSI_SGR(int)+0x4e>
c0008595:	8b 14 8d e0 38 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc720]
c000859c:	eb 22                	jmp    c00085c0 <VgaText::doANSI_SGR(int)+0x70>
c000859e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00085a1:	83 f9 07             	cmp    ecx,0x7
c00085a4:	77 0b                	ja     c00085b1 <VgaText::doANSI_SGR(int)+0x61>
c00085a6:	8b 14 95 98 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc868]
c00085ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b0:	c3                   	ret    
c00085b1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00085b4:	83 f9 07             	cmp    ecx,0x7
c00085b7:	77 0a                	ja     c00085c3 <VgaText::doANSI_SGR(int)+0x73>
c00085b9:	8b 14 95 70 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc890]
c00085c0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085c3:	c3                   	ret    

c00085c4 <VgaText::setDefaultBgColour(VgaColour)>:
c00085c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085cc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085cf:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085d2:	c3                   	ret    
c00085d3:	90                   	nop

c00085d4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085df:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085e2:	c3                   	ret    
c00085e3:	90                   	nop

c00085e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085e4:	53                   	push   ebx
c00085e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085f1:	51                   	push   ecx
c00085f2:	e8 cd ff ff ff       	call   c00085c4 <VgaText::setDefaultBgColour(VgaColour)>
c00085f7:	58                   	pop    eax
c00085f8:	5a                   	pop    edx
c00085f9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008601:	5b                   	pop    ebx
c0008602:	eb d0                	jmp    c00085d4 <VgaText::setDefaultFgColour(VgaColour)>

c0008604 <VgaText::setTitleTextColour(VgaColour)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000860c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000860f:	c3                   	ret    

c0008610 <VgaText::setTitleColour(VgaColour)>:
c0008610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008614:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008618:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000861b:	c3                   	ret    

c000861c <VgaText::setTitle(char*)>:
c000861c:	c3                   	ret    
c000861d:	90                   	nop

c000861e <VgaText::combineColours(unsigned char, unsigned char)>:
c000861e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008622:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008627:	83 e0 0f             	and    eax,0xf
c000862a:	c1 e2 04             	shl    edx,0x4
c000862d:	09 d0                	or     eax,edx
c000862f:	c3                   	ret    

c0008630 <VgaText::scrollScreen()>:
c0008630:	55                   	push   ebp
c0008631:	57                   	push   edi
c0008632:	56                   	push   esi
c0008633:	be 01 00 00 00       	mov    esi,0x1
c0008638:	53                   	push   ebx
c0008639:	83 ec 0c             	sub    esp,0xc
c000863c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008640:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008643:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008649:	31 ff                	xor    edi,edi
c000864b:	01 e9                	add    ecx,ebp
c000864d:	8a 01                	mov    al,BYTE PTR [ecx]
c000864f:	83 fe 18             	cmp    esi,0x18
c0008652:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008658:	75 20                	jne    c000867a <VgaText::scrollScreen()+0x4a>
c000865a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008660:	74 15                	je     c0008677 <VgaText::scrollScreen()+0x47>
c0008662:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008666:	50                   	push   eax
c0008667:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000866b:	50                   	push   eax
c000866c:	e8 ad ff ff ff       	call   c000861e <VgaText::combineColours(unsigned char, unsigned char)>
c0008671:	5a                   	pop    edx
c0008672:	5a                   	pop    edx
c0008673:	88 01                	mov    BYTE PTR [ecx],al
c0008675:	eb 03                	jmp    c000867a <VgaText::scrollScreen()+0x4a>
c0008677:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000867a:	47                   	inc    edi
c000867b:	41                   	inc    ecx
c000867c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008682:	75 c9                	jne    c000864d <VgaText::scrollScreen()+0x1d>
c0008684:	46                   	inc    esi
c0008685:	83 fe 19             	cmp    esi,0x19
c0008688:	75 b9                	jne    c0008643 <VgaText::scrollScreen()+0x13>
c000868a:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008690:	75 1f                	jne    c00086b1 <VgaText::scrollScreen()+0x81>
c0008692:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008696:	74 05                	je     c000869d <VgaText::scrollScreen()+0x6d>
c0008698:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000869b:	eb 14                	jmp    c00086b1 <VgaText::scrollScreen()+0x81>
c000869d:	50                   	push   eax
c000869e:	50                   	push   eax
c000869f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00086a3:	50                   	push   eax
c00086a4:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00086a8:	50                   	push   eax
c00086a9:	e8 96 07 01 00       	call   c0018e44 <HalConsoleScroll(int, int)>
c00086ae:	83 c4 10             	add    esp,0x10
c00086b1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00086b5:	83 c4 0c             	add    esp,0xc
c00086b8:	5b                   	pop    ebx
c00086b9:	5e                   	pop    esi
c00086ba:	5f                   	pop    edi
c00086bb:	5d                   	pop    ebp
c00086bc:	e9 79 fe ff ff       	jmp    c000853a <VgaText::updateCursor()>
c00086c1:	90                   	nop

c00086c2 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086c2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086c7:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086cc:	c1 e0 08             	shl    eax,0x8
c00086cf:	09 d0                	or     eax,edx
c00086d1:	c3                   	ret    

c00086d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086d2:	55                   	push   ebp
c00086d3:	57                   	push   edi
c00086d4:	56                   	push   esi
c00086d5:	53                   	push   ebx
c00086d6:	83 ec 1c             	sub    esp,0x1c
c00086d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086e1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086e9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086ed:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086f1:	0f b6 c3             	movzx  eax,bl
c00086f4:	50                   	push   eax
c00086f5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086fa:	50                   	push   eax
c00086fb:	e8 1e ff ff ff       	call   c000861e <VgaText::combineColours(unsigned char, unsigned char)>
c0008700:	5a                   	pop    edx
c0008701:	0f b6 c0             	movzx  eax,al
c0008704:	59                   	pop    ecx
c0008705:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000870a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000870e:	50                   	push   eax
c000870f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008713:	e8 aa ff ff ff       	call   c00086c2 <VgaText::combineCharAndColour(char, unsigned char)>
c0008718:	5a                   	pop    edx
c0008719:	6b d7 50             	imul   edx,edi,0x50
c000871c:	59                   	pop    ecx
c000871d:	01 f2                	add    edx,esi
c000871f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008722:	0f b7 d2             	movzx  edx,dx
c0008725:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008729:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c000872f:	75 28                	jne    c0008759 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008731:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008735:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008739:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000873d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008741:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008745:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008749:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000874d:	83 c4 1c             	add    esp,0x1c
c0008750:	5b                   	pop    ebx
c0008751:	5e                   	pop    esi
c0008752:	5f                   	pop    edi
c0008753:	5d                   	pop    ebp
c0008754:	e9 f3 07 01 00       	jmp    c0018f4c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008759:	83 c4 1c             	add    esp,0x1c
c000875c:	5b                   	pop    ebx
c000875d:	5e                   	pop    esi
c000875e:	5f                   	pop    edi
c000875f:	5d                   	pop    ebp
c0008760:	c3                   	ret    
c0008761:	90                   	nop

c0008762 <VgaText::getCursorX()>:
c0008762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008766:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008769:	c3                   	ret    

c000876a <VgaText::getCursorY()>:
c000876a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000876e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008771:	c3                   	ret    

c0008772 <VgaText::setCursor(int, int)>:
c0008772:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008776:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000877a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000877d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008781:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008784:	e9 b1 fd ff ff       	jmp    c000853a <VgaText::updateCursor()>

c0008789 <setActiveTerminal(VgaText*)>:
c0008789:	53                   	push   ebx
c000878a:	83 ec 08             	sub    esp,0x8
c000878d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008791:	85 db                	test   ebx,ebx
c0008793:	75 11                	jne    c00087a6 <setActiveTerminal(VgaText*)+0x1d>
c0008795:	c7 44 24 10 e8 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020fe8
c000879d:	83 c4 08             	add    esp,0x8
c00087a0:	5b                   	pop    ebx
c00087a1:	e9 6d 8f 00 00       	jmp    c0011713 <KePanic(char const*)>
c00087a6:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c00087ab:	85 c0                	test   eax,eax
c00087ad:	74 0c                	je     c00087bb <setActiveTerminal(VgaText*)+0x32>
c00087af:	83 ec 0c             	sub    esp,0xc
c00087b2:	50                   	push   eax
c00087b3:	e8 82 fd ff ff       	call   c000853a <VgaText::updateCursor()>
c00087b8:	83 c4 10             	add    esp,0x10
c00087bb:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c00087c1:	50                   	push   eax
c00087c2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087c5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087c8:	53                   	push   ebx
c00087c9:	e8 a4 ff ff ff       	call   c0008772 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 18             	add    esp,0x18
c00087d1:	5b                   	pop    ebx
c00087d2:	c3                   	ret    
c00087d3:	90                   	nop

c00087d4 <VgaText::clearScreen()>:
c00087d4:	57                   	push   edi
c00087d5:	56                   	push   esi
c00087d6:	31 f6                	xor    esi,esi
c00087d8:	53                   	push   ebx
c00087d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087dd:	52                   	push   edx
c00087de:	6a 00                	push   0x0
c00087e0:	6a 00                	push   0x0
c00087e2:	53                   	push   ebx
c00087e3:	e8 8a ff ff ff       	call   c0008772 <VgaText::setCursor(int, int)>
c00087e8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087ef:	83 c4 10             	add    esp,0x10
c00087f2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087f5:	7e 20                	jle    c0008817 <VgaText::clearScreen()+0x43>
c00087f7:	31 ff                	xor    edi,edi
c00087f9:	50                   	push   eax
c00087fa:	50                   	push   eax
c00087fb:	56                   	push   esi
c00087fc:	57                   	push   edi
c00087fd:	47                   	inc    edi
c00087fe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008801:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008804:	6a 20                	push   0x20
c0008806:	53                   	push   ebx
c0008807:	e8 c6 fe ff ff       	call   c00086d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000880c:	83 c4 20             	add    esp,0x20
c000880f:	83 ff 50             	cmp    edi,0x50
c0008812:	75 e5                	jne    c00087f9 <VgaText::clearScreen()+0x25>
c0008814:	46                   	inc    esi
c0008815:	eb db                	jmp    c00087f2 <VgaText::clearScreen()+0x1e>
c0008817:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000881e:	5b                   	pop    ebx
c000881f:	5e                   	pop    esi
c0008820:	5f                   	pop    edi
c0008821:	c3                   	ret    

c0008822 <VgaText::setCursorX(int)>:
c0008822:	83 ec 10             	sub    esp,0x10
c0008825:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008829:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000882c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008830:	50                   	push   eax
c0008831:	e8 3c ff ff ff       	call   c0008772 <VgaText::setCursor(int, int)>
c0008836:	83 c4 1c             	add    esp,0x1c
c0008839:	c3                   	ret    

c000883a <VgaText::setCursorY(int)>:
c000883a:	83 ec 10             	sub    esp,0x10
c000883d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008841:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008845:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008848:	50                   	push   eax
c0008849:	e8 24 ff ff ff       	call   c0008772 <VgaText::setCursor(int, int)>
c000884e:	83 c4 1c             	add    esp,0x1c
c0008851:	c3                   	ret    

c0008852 <VgaText::incrementCursor(bool)>:
c0008852:	56                   	push   esi
c0008853:	53                   	push   ebx
c0008854:	51                   	push   ecx
c0008855:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008859:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000885d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008860:	40                   	inc    eax
c0008861:	83 f8 50             	cmp    eax,0x50
c0008864:	74 05                	je     c000886b <VgaText::incrementCursor(bool)+0x19>
c0008866:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008869:	eb 24                	jmp    c000888f <VgaText::incrementCursor(bool)+0x3d>
c000886b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000886e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008875:	8d 50 01             	lea    edx,[eax+0x1]
c0008878:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000887b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000887e:	75 0f                	jne    c000888f <VgaText::incrementCursor(bool)+0x3d>
c0008880:	83 ec 0c             	sub    esp,0xc
c0008883:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008886:	53                   	push   ebx
c0008887:	e8 a4 fd ff ff       	call   c0008630 <VgaText::scrollScreen()>
c000888c:	83 c4 10             	add    esp,0x10
c000888f:	89 f0                	mov    eax,esi
c0008891:	84 c0                	test   al,al
c0008893:	74 0c                	je     c00088a1 <VgaText::incrementCursor(bool)+0x4f>
c0008895:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008899:	5a                   	pop    edx
c000889a:	5b                   	pop    ebx
c000889b:	5e                   	pop    esi
c000889c:	e9 99 fc ff ff       	jmp    c000853a <VgaText::updateCursor()>
c00088a1:	58                   	pop    eax
c00088a2:	5b                   	pop    ebx
c00088a3:	5e                   	pop    esi
c00088a4:	c3                   	ret    
c00088a5:	90                   	nop

c00088a6 <VgaText::decrementCursor(bool)>:
c00088a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00088ae:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088b1:	85 c0                	test   eax,eax
c00088b3:	74 04                	je     c00088b9 <VgaText::decrementCursor(bool)+0x13>
c00088b5:	48                   	dec    eax
c00088b6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00088b9:	84 c9                	test   cl,cl
c00088bb:	74 09                	je     c00088c6 <VgaText::decrementCursor(bool)+0x20>
c00088bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088c1:	e9 74 fc ff ff       	jmp    c000853a <VgaText::updateCursor()>
c00088c6:	c3                   	ret    
c00088c7:	90                   	nop

c00088c8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088c8:	53                   	push   ebx
c00088c9:	83 ec 08             	sub    esp,0x8
c00088cc:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088dd:	83 f8 07             	cmp    eax,0x7
c00088e0:	75 21                	jne    c0008903 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088e2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ea:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088f2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088fa:	83 c4 08             	add    esp,0x8
c00088fd:	5b                   	pop    ebx
c00088fe:	e9 18 3b 00 00       	jmp    c000c41b <Krnl::beep(int, int, bool)>
c0008903:	83 f8 0d             	cmp    eax,0xd
c0008906:	75 09                	jne    c0008911 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0008908:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000890f:	eb 2d                	jmp    c000893e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0008911:	83 f8 0a             	cmp    eax,0xa
c0008914:	75 31                	jne    c0008947 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0008916:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008919:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008920:	8d 50 01             	lea    edx,[eax+0x1]
c0008923:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008926:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008929:	75 0f                	jne    c000893a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000892b:	83 ec 0c             	sub    esp,0xc
c000892e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008931:	53                   	push   ebx
c0008932:	e8 f9 fc ff ff       	call   c0008630 <VgaText::scrollScreen()>
c0008937:	83 c4 10             	add    esp,0x10
c000893a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000893e:	83 c4 08             	add    esp,0x8
c0008941:	5b                   	pop    ebx
c0008942:	e9 f3 fb ff ff       	jmp    c000853a <VgaText::updateCursor()>
c0008947:	83 f8 08             	cmp    eax,0x8
c000894a:	75 25                	jne    c0008971 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000894c:	50                   	push   eax
c000894d:	50                   	push   eax
c000894e:	6a 01                	push   0x1
c0008950:	53                   	push   ebx
c0008951:	e8 50 ff ff ff       	call   c00088a6 <VgaText::decrementCursor(bool)>
c0008956:	5a                   	pop    edx
c0008957:	59                   	pop    ecx
c0008958:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000895e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008961:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008964:	6a 20                	push   0x20
c0008966:	53                   	push   ebx
c0008967:	e8 66 fd ff ff       	call   c00086d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000896c:	83 c4 28             	add    esp,0x28
c000896f:	5b                   	pop    ebx
c0008970:	c3                   	ret    
c0008971:	83 ec 08             	sub    esp,0x8
c0008974:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008977:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000897a:	51                   	push   ecx
c000897b:	52                   	push   edx
c000897c:	50                   	push   eax
c000897d:	53                   	push   ebx
c000897e:	e8 4f fd ff ff       	call   c00086d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008983:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008987:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000898f:	83 c4 28             	add    esp,0x28
c0008992:	5b                   	pop    ebx
c0008993:	e9 ba fe ff ff       	jmp    c0008852 <VgaText::incrementCursor(bool)>

c0008998 <VgaText::putchar(char)>:
c0008998:	57                   	push   edi
c0008999:	56                   	push   esi
c000899a:	53                   	push   ebx
c000899b:	83 ec 10             	sub    esp,0x10
c000899e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00089a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089a6:	89 f8                	mov    eax,edi
c00089a8:	0f be c0             	movsx  eax,al
c00089ab:	83 f8 5b             	cmp    eax,0x5b
c00089ae:	75 18                	jne    c00089c8 <VgaText::putchar(char)+0x30>
c00089b0:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00089b4:	74 20                	je     c00089d6 <VgaText::putchar(char)+0x3e>
c00089b6:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00089bc:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089c3:	e9 c1 00 00 00       	jmp    c0008a89 <VgaText::putchar(char)+0xf1>
c00089c8:	83 f8 1b             	cmp    eax,0x1b
c00089cb:	75 09                	jne    c00089d6 <VgaText::putchar(char)+0x3e>
c00089cd:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089d1:	e9 b3 00 00 00       	jmp    c0008a89 <VgaText::putchar(char)+0xf1>
c00089d6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089d9:	84 c9                	test   cl,cl
c00089db:	0f 84 98 00 00 00    	je     c0008a79 <VgaText::putchar(char)+0xe1>
c00089e1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089e4:	89 f2                	mov    edx,esi
c00089e6:	80 fa 3e             	cmp    dl,0x3e
c00089e9:	77 78                	ja     c0008a63 <VgaText::putchar(char)+0xcb>
c00089eb:	83 f8 6d             	cmp    eax,0x6d
c00089ee:	75 47                	jne    c0008a37 <VgaText::putchar(char)+0x9f>
c00089f0:	31 f6                	xor    esi,esi
c00089f2:	31 d2                	xor    edx,edx
c00089f4:	31 c0                	xor    eax,eax
c00089f6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089f9:	7e 2d                	jle    c0008a28 <VgaText::putchar(char)+0x90>
c00089fb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008a00:	83 fa 3b             	cmp    edx,0x3b
c0008a03:	75 17                	jne    c0008a1c <VgaText::putchar(char)+0x84>
c0008a05:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008a09:	50                   	push   eax
c0008a0a:	53                   	push   ebx
c0008a0b:	e8 40 fb ff ff       	call   c0008550 <VgaText::doANSI_SGR(int)>
c0008a10:	59                   	pop    ecx
c0008a11:	31 d2                	xor    edx,edx
c0008a13:	5f                   	pop    edi
c0008a14:	31 c0                	xor    eax,eax
c0008a16:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008a1a:	eb 09                	jmp    c0008a25 <VgaText::putchar(char)+0x8d>
c0008a1c:	6b c0 0a             	imul   eax,eax,0xa
c0008a1f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008a23:	88 ca                	mov    dl,cl
c0008a25:	46                   	inc    esi
c0008a26:	eb ce                	jmp    c00089f6 <VgaText::putchar(char)+0x5e>
c0008a28:	84 d2                	test   dl,dl
c0008a2a:	74 2f                	je     c0008a5b <VgaText::putchar(char)+0xc3>
c0008a2c:	50                   	push   eax
c0008a2d:	53                   	push   ebx
c0008a2e:	e8 1d fb ff ff       	call   c0008550 <VgaText::doANSI_SGR(int)>
c0008a33:	58                   	pop    eax
c0008a34:	5a                   	pop    edx
c0008a35:	eb 24                	jmp    c0008a5b <VgaText::putchar(char)+0xc3>
c0008a37:	83 f8 4a             	cmp    eax,0x4a
c0008a3a:	75 1f                	jne    c0008a5b <VgaText::putchar(char)+0xc3>
c0008a3c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a40:	75 19                	jne    c0008a5b <VgaText::putchar(char)+0xc3>
c0008a42:	83 ec 0c             	sub    esp,0xc
c0008a45:	53                   	push   ebx
c0008a46:	e8 89 fd ff ff       	call   c00087d4 <VgaText::clearScreen()>
c0008a4b:	83 c4 0c             	add    esp,0xc
c0008a4e:	6a 00                	push   0x0
c0008a50:	6a 00                	push   0x0
c0008a52:	53                   	push   ebx
c0008a53:	e8 1a fd ff ff       	call   c0008772 <VgaText::setCursor(int, int)>
c0008a58:	83 c4 10             	add    esp,0x10
c0008a5b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a61:	eb 26                	jmp    c0008a89 <VgaText::putchar(char)+0xf1>
c0008a63:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a66:	83 f8 0e             	cmp    eax,0xe
c0008a69:	7f 1e                	jg     c0008a89 <VgaText::putchar(char)+0xf1>
c0008a6b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a6e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a71:	89 f9                	mov    ecx,edi
c0008a73:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a77:	eb 10                	jmp    c0008a89 <VgaText::putchar(char)+0xf1>
c0008a79:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a7c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a7f:	50                   	push   eax
c0008a80:	53                   	push   ebx
c0008a81:	e8 42 fe ff ff       	call   c00088c8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a86:	83 c4 10             	add    esp,0x10
c0008a89:	83 c4 10             	add    esp,0x10
c0008a8c:	5b                   	pop    ebx
c0008a8d:	5e                   	pop    esi
c0008a8e:	5f                   	pop    edi
c0008a8f:	c3                   	ret    

c0008a90 <VgaText::putx(unsigned int)>:
c0008a90:	57                   	push   edi
c0008a91:	b9 11 00 00 00       	mov    ecx,0x11
c0008a96:	56                   	push   esi
c0008a97:	be f6 0f 02 c0       	mov    esi,0xc0020ff6
c0008a9c:	53                   	push   ebx
c0008a9d:	83 ec 20             	sub    esp,0x20
c0008aa0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008aa4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008aa8:	fc                   	cld    
c0008aa9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008aab:	be 08 00 00 00       	mov    esi,0x8
c0008ab0:	50                   	push   eax
c0008ab1:	50                   	push   eax
c0008ab2:	89 d8                	mov    eax,ebx
c0008ab4:	c1 e3 04             	shl    ebx,0x4
c0008ab7:	c1 e8 1c             	shr    eax,0x1c
c0008aba:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008abf:	50                   	push   eax
c0008ac0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008ac4:	e8 cf fe ff ff       	call   c0008998 <VgaText::putchar(char)>
c0008ac9:	83 c4 10             	add    esp,0x10
c0008acc:	4e                   	dec    esi
c0008acd:	75 e1                	jne    c0008ab0 <VgaText::putx(unsigned int)+0x20>
c0008acf:	83 c4 20             	add    esp,0x20
c0008ad2:	5b                   	pop    ebx
c0008ad3:	5e                   	pop    esi
c0008ad4:	5f                   	pop    edi
c0008ad5:	c3                   	ret    

c0008ad6 <VgaText::puts(char const*)>:
c0008ad6:	53                   	push   ebx
c0008ad7:	83 ec 08             	sub    esp,0x8
c0008ada:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ade:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ae1:	85 c0                	test   eax,eax
c0008ae3:	74 12                	je     c0008af7 <VgaText::puts(char const*)+0x21>
c0008ae5:	43                   	inc    ebx
c0008ae6:	51                   	push   ecx
c0008ae7:	51                   	push   ecx
c0008ae8:	50                   	push   eax
c0008ae9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aed:	e8 a6 fe ff ff       	call   c0008998 <VgaText::putchar(char)>
c0008af2:	83 c4 10             	add    esp,0x10
c0008af5:	eb e7                	jmp    c0008ade <VgaText::puts(char const*)+0x8>
c0008af7:	83 c4 08             	add    esp,0x8
c0008afa:	5b                   	pop    ebx
c0008afb:	c3                   	ret    

c0008afc <VgaText::write(unsigned long long, void*, int*)>:
c0008afc:	55                   	push   ebp
c0008afd:	57                   	push   edi
c0008afe:	56                   	push   esi
c0008aff:	53                   	push   ebx
c0008b00:	83 ec 0c             	sub    esp,0xc
c0008b03:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008b07:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b0b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008b0f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008b16:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008b19:	39 eb                	cmp    ebx,ebp
c0008b1b:	74 13                	je     c0008b30 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008b1d:	43                   	inc    ebx
c0008b1e:	50                   	push   eax
c0008b1f:	50                   	push   eax
c0008b20:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008b24:	50                   	push   eax
c0008b25:	56                   	push   esi
c0008b26:	e8 6d fe ff ff       	call   c0008998 <VgaText::putchar(char)>
c0008b2b:	83 c4 10             	add    esp,0x10
c0008b2e:	eb e9                	jmp    c0008b19 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b30:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b3b:	89 38                	mov    DWORD PTR [eax],edi
c0008b3d:	83 c4 0c             	add    esp,0xc
c0008b40:	31 c0                	xor    eax,eax
c0008b42:	5b                   	pop    ebx
c0008b43:	5e                   	pop    esi
c0008b44:	5f                   	pop    edi
c0008b45:	5d                   	pop    ebp
c0008b46:	c3                   	ret    
c0008b47:	90                   	nop

c0008b48 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b48:	55                   	push   ebp
c0008b49:	57                   	push   edi
c0008b4a:	56                   	push   esi
c0008b4b:	53                   	push   ebx
c0008b4c:	83 ec 0c             	sub    esp,0xc
c0008b4f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b53:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b58:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b5f:	50                   	push   eax
c0008b60:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b65:	50                   	push   eax
c0008b66:	e8 b3 fa ff ff       	call   c000861e <VgaText::combineColours(unsigned char, unsigned char)>
c0008b6b:	5a                   	pop    edx
c0008b6c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b70:	59                   	pop    ecx
c0008b71:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b74:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b78:	0f b7 f6             	movzx  esi,si
c0008b7b:	0f b6 e8             	movzx  ebp,al
c0008b7e:	01 f6                	add    esi,esi
c0008b80:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b83:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b86:	85 c0                	test   eax,eax
c0008b88:	0f 84 ef 00 00 00    	je     c0008c7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b8e:	83 f8 0d             	cmp    eax,0xd
c0008b91:	75 0c                	jne    c0008b9f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b93:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b9a:	e9 d8 00 00 00       	jmp    c0008c77 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b9f:	83 f8 0a             	cmp    eax,0xa
c0008ba2:	75 44                	jne    c0008be8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008ba4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ba7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008bae:	8d 48 01             	lea    ecx,[eax+0x1]
c0008bb1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008bb4:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008bb7:	75 0f                	jne    c0008bc8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008bb9:	83 ec 0c             	sub    esp,0xc
c0008bbc:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008bbf:	53                   	push   ebx
c0008bc0:	e8 6b fa ff ff       	call   c0008630 <VgaText::scrollScreen()>
c0008bc5:	83 c4 10             	add    esp,0x10
c0008bc8:	83 ec 0c             	sub    esp,0xc
c0008bcb:	53                   	push   ebx
c0008bcc:	e8 69 f9 ff ff       	call   c000853a <VgaText::updateCursor()>
c0008bd1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bd5:	83 c4 10             	add    esp,0x10
c0008bd8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bdb:	0f b7 f6             	movzx  esi,si
c0008bde:	01 f6                	add    esi,esi
c0008be0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008be3:	e9 8f 00 00 00       	jmp    c0008c77 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008be8:	83 f8 08             	cmp    eax,0x8
c0008beb:	75 34                	jne    c0008c21 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bed:	51                   	push   ecx
c0008bee:	51                   	push   ecx
c0008bef:	6a 01                	push   0x1
c0008bf1:	53                   	push   ebx
c0008bf2:	e8 af fc ff ff       	call   c00088a6 <VgaText::decrementCursor(bool)>
c0008bf7:	5e                   	pop    esi
c0008bf8:	58                   	pop    eax
c0008bf9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bfc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bff:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008c02:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008c05:	6a 20                	push   0x20
c0008c07:	53                   	push   ebx
c0008c08:	e8 c5 fa ff ff       	call   c00086d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c0d:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c11:	83 c4 20             	add    esp,0x20
c0008c14:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008c17:	0f b7 f6             	movzx  esi,si
c0008c1a:	01 f6                	add    esi,esi
c0008c1c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c1f:	eb 56                	jmp    c0008c77 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c21:	52                   	push   edx
c0008c22:	52                   	push   edx
c0008c23:	55                   	push   ebp
c0008c24:	50                   	push   eax
c0008c25:	e8 98 fa ff ff       	call   c00086c2 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c2a:	83 c4 10             	add    esp,0x10
c0008c2d:	66 89 06             	mov    WORD PTR [esi],ax
c0008c30:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008c36:	75 1d                	jne    c0008c55 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c38:	83 ec 0c             	sub    esp,0xc
c0008c3b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c3e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c41:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c45:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c49:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c4c:	50                   	push   eax
c0008c4d:	e8 fa 02 01 00       	call   c0018f4c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c52:	83 c4 20             	add    esp,0x20
c0008c55:	83 c6 02             	add    esi,0x2
c0008c58:	50                   	push   eax
c0008c59:	50                   	push   eax
c0008c5a:	6a 00                	push   0x0
c0008c5c:	53                   	push   ebx
c0008c5d:	e8 f0 fb ff ff       	call   c0008852 <VgaText::incrementCursor(bool)>
c0008c62:	83 c4 10             	add    esp,0x10
c0008c65:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c69:	75 0c                	jne    c0008c77 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c6b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c6f:	0f b7 f6             	movzx  esi,si
c0008c72:	01 f6                	add    esi,esi
c0008c74:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c77:	47                   	inc    edi
c0008c78:	e9 06 ff ff ff       	jmp    c0008b83 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c7d:	83 ec 0c             	sub    esp,0xc
c0008c80:	53                   	push   ebx
c0008c81:	e8 b4 f8 ff ff       	call   c000853a <VgaText::updateCursor()>
c0008c86:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c8d:	83 c4 1c             	add    esp,0x1c
c0008c90:	5b                   	pop    ebx
c0008c91:	5e                   	pop    esi
c0008c92:	5f                   	pop    edi
c0008c93:	5d                   	pop    ebp
c0008c94:	c3                   	ret    
c0008c95:	90                   	nop

c0008c96 <VgaText::VgaText(char const*)>:
c0008c96:	56                   	push   esi
c0008c97:	53                   	push   ebx
c0008c98:	83 ec 04             	sub    esp,0x4
c0008c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9f:	83 ec 08             	sub    esp,0x8
c0008ca2:	6a 00                	push   0x0
c0008ca4:	50                   	push   eax
c0008ca5:	e8 44 05 00 00       	call   c00091ee <UnixFile::UnixFile(int)>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	ba 1c 10 02 c0       	mov    edx,0xc002101c
c0008cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb6:	89 10                	mov    DWORD PTR [eax],edx
c0008cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbc:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc7:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cda:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ced:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d03:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0e:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008d15:	83 ec 0c             	sub    esp,0xc
c0008d18:	6a 01                	push   0x1
c0008d1a:	e8 1e 09 00 00       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c0008d1f:	83 c4 10             	add    esp,0x10
c0008d22:	89 c2                	mov    edx,eax
c0008d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d28:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d2b:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d38:	89 c6                	mov    esi,eax
c0008d3a:	e8 b0 f0 ff ff       	call   c0007def <Phys::allocatePage()>
c0008d3f:	68 05 0c 00 00       	push   0xc05
c0008d44:	56                   	push   esi
c0008d45:	50                   	push   eax
c0008d46:	53                   	push   ebx
c0008d47:	e8 04 10 00 00       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d4c:	83 c4 10             	add    esp,0x10
c0008d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d53:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d56:	83 ec 04             	sub    esp,0x4
c0008d59:	68 a0 0f 00 00       	push   0xfa0
c0008d5e:	6a 00                	push   0x0
c0008d60:	50                   	push   eax
c0008d61:	e8 8a 77 ff ff       	call   c00004f0 <memset>
c0008d66:	83 c4 10             	add    esp,0x10
c0008d69:	83 ec 04             	sub    esp,0x4
c0008d6c:	6a 00                	push   0x0
c0008d6e:	6a 07                	push   0x7
c0008d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d74:	e8 6b f8 ff ff       	call   c00085e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d79:	83 c4 10             	add    esp,0x10
c0008d7c:	83 ec 04             	sub    esp,0x4
c0008d7f:	6a 00                	push   0x0
c0008d81:	6a 00                	push   0x0
c0008d83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d87:	e8 e6 f9 ff ff       	call   c0008772 <VgaText::setCursor(int, int)>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	83 ec 0c             	sub    esp,0xc
c0008d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d96:	e8 39 fa ff ff       	call   c00087d4 <VgaText::clearScreen()>
c0008d9b:	83 c4 10             	add    esp,0x10
c0008d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008da2:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008daa:	05 82 00 00 00       	add    eax,0x82
c0008daf:	83 ec 04             	sub    esp,0x4
c0008db2:	68 80 00 00 00       	push   0x80
c0008db7:	6a 00                	push   0x0
c0008db9:	50                   	push   eax
c0008dba:	e8 31 77 ff ff       	call   c00004f0 <memset>
c0008dbf:	83 c4 10             	add    esp,0x10
c0008dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008dc6:	05 02 01 00 00       	add    eax,0x102
c0008dcb:	83 ec 04             	sub    esp,0x4
c0008dce:	68 80 00 00 00       	push   0x80
c0008dd3:	6a 00                	push   0x0
c0008dd5:	50                   	push   eax
c0008dd6:	e8 15 77 ff ff       	call   c00004f0 <memset>
c0008ddb:	83 c4 10             	add    esp,0x10
c0008dde:	90                   	nop
c0008ddf:	83 c4 04             	add    esp,0x4
c0008de2:	5b                   	pop    ebx
c0008de3:	5e                   	pop    esi
c0008de4:	c3                   	ret    
c0008de5:	90                   	nop

c0008de6 <VgaText::receiveKey(unsigned char)>:
c0008de6:	55                   	push   ebp
c0008de7:	57                   	push   edi
c0008de8:	56                   	push   esi
c0008de9:	53                   	push   ebx
c0008dea:	83 ec 2c             	sub    esp,0x2c
c0008ded:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008df1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008df5:	89 ef                	mov    edi,ebp
c0008df7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dfd:	0f 84 66 01 00 00    	je     c0008f69 <VgaText::receiveKey(unsigned char)+0x183>
c0008e03:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008e09:	83 ff 08             	cmp    edi,0x8
c0008e0c:	75 73                	jne    c0008e81 <VgaText::receiveKey(unsigned char)+0x9b>
c0008e0e:	83 ec 0c             	sub    esp,0xc
c0008e11:	56                   	push   esi
c0008e12:	e8 59 77 ff ff       	call   c0000570 <strlen>
c0008e17:	83 c4 10             	add    esp,0x10
c0008e1a:	85 c0                	test   eax,eax
c0008e1c:	0f 84 02 01 00 00    	je     c0008f24 <VgaText::receiveKey(unsigned char)+0x13e>
c0008e22:	50                   	push   eax
c0008e23:	50                   	push   eax
c0008e24:	6a 08                	push   0x8
c0008e26:	53                   	push   ebx
c0008e27:	e8 6c fb ff ff       	call   c0008998 <VgaText::putchar(char)>
c0008e2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e2f:	e8 3c 77 ff ff       	call   c0000570 <strlen>
c0008e34:	83 c4 10             	add    esp,0x10
c0008e37:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e3f:	83 fa 0d             	cmp    edx,0xd
c0008e42:	89 d0                	mov    eax,edx
c0008e44:	0f 95 c1             	setne  cl
c0008e47:	83 fa 1f             	cmp    edx,0x1f
c0008e4a:	0f 9e c2             	setle  dl
c0008e4d:	0f b6 d2             	movzx  edx,dl
c0008e50:	85 ca                	test   edx,ecx
c0008e52:	74 17                	je     c0008e6b <VgaText::receiveKey(unsigned char)+0x85>
c0008e54:	83 e8 08             	sub    eax,0x8
c0008e57:	3c 02                	cmp    al,0x2
c0008e59:	76 10                	jbe    c0008e6b <VgaText::receiveKey(unsigned char)+0x85>
c0008e5b:	55                   	push   ebp
c0008e5c:	55                   	push   ebp
c0008e5d:	68 07 10 02 c0       	push   0xc0021007
c0008e62:	53                   	push   ebx
c0008e63:	e8 6e fc ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0008e68:	83 c4 10             	add    esp,0x10
c0008e6b:	83 ec 0c             	sub    esp,0xc
c0008e6e:	56                   	push   esi
c0008e6f:	e8 fc 76 ff ff       	call   c0000570 <strlen>
c0008e74:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e7c:	e9 a0 00 00 00       	jmp    c0008f21 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e81:	83 ec 0c             	sub    esp,0xc
c0008e84:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e8a:	50                   	push   eax
c0008e8b:	e8 e0 76 ff ff       	call   c0000570 <strlen>
c0008e90:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e97:	e8 d4 76 ff ff       	call   c0000570 <strlen>
c0008e9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008ea7:	3d 80 00 00 00       	cmp    eax,0x80
c0008eac:	0f 87 b7 00 00 00    	ja     c0008f69 <VgaText::receiveKey(unsigned char)+0x183>
c0008eb2:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008eb5:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008eb8:	3c 1e                	cmp    al,0x1e
c0008eba:	0f 96 c0             	setbe  al
c0008ebd:	80 fa 01             	cmp    dl,0x1
c0008ec0:	0f 97 c2             	seta   dl
c0008ec3:	0f b6 d2             	movzx  edx,dl
c0008ec6:	85 c2                	test   edx,eax
c0008ec8:	74 2e                	je     c0008ef8 <VgaText::receiveKey(unsigned char)+0x112>
c0008eca:	83 ff 0d             	cmp    edi,0xd
c0008ecd:	74 29                	je     c0008ef8 <VgaText::receiveKey(unsigned char)+0x112>
c0008ecf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ed2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ed5:	68 0d 10 02 c0       	push   0xc002100d
c0008eda:	53                   	push   ebx
c0008edb:	e8 68 fc ff ff       	call   c0008b48 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ee0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ee3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008ee6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ee9:	0f b6 c0             	movzx  eax,al
c0008eec:	50                   	push   eax
c0008eed:	53                   	push   ebx
c0008eee:	e8 d5 f9 ff ff       	call   c00088c8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ef3:	83 c4 20             	add    esp,0x20
c0008ef6:	eb 11                	jmp    c0008f09 <VgaText::receiveKey(unsigned char)+0x123>
c0008ef8:	89 e8                	mov    eax,ebp
c0008efa:	51                   	push   ecx
c0008efb:	0f be c0             	movsx  eax,al
c0008efe:	51                   	push   ecx
c0008eff:	50                   	push   eax
c0008f00:	53                   	push   ebx
c0008f01:	e8 92 fa ff ff       	call   c0008998 <VgaText::putchar(char)>
c0008f06:	83 c4 10             	add    esp,0x10
c0008f09:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008f0e:	89 e8                	mov    eax,ebp
c0008f10:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008f14:	52                   	push   edx
c0008f15:	52                   	push   edx
c0008f16:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008f1a:	50                   	push   eax
c0008f1b:	56                   	push   esi
c0008f1c:	e8 1f 79 ff ff       	call   c0000840 <strcat>
c0008f21:	83 c4 10             	add    esp,0x10
c0008f24:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008f2a:	b0 01                	mov    al,0x1
c0008f2c:	83 ff 1c             	cmp    edi,0x1c
c0008f2f:	77 0e                	ja     c0008f3f <VgaText::receiveKey(unsigned char)+0x159>
c0008f31:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f36:	89 f9                	mov    ecx,edi
c0008f38:	d3 e8                	shr    eax,cl
c0008f3a:	f7 d0                	not    eax
c0008f3c:	83 e0 01             	and    eax,0x1
c0008f3f:	84 c0                	test   al,al
c0008f41:	74 04                	je     c0008f47 <VgaText::receiveKey(unsigned char)+0x161>
c0008f43:	84 d2                	test   dl,dl
c0008f45:	74 22                	je     c0008f69 <VgaText::receiveKey(unsigned char)+0x183>
c0008f47:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f4d:	50                   	push   eax
c0008f4e:	50                   	push   eax
c0008f4f:	56                   	push   esi
c0008f50:	53                   	push   ebx
c0008f51:	e8 ea 78 ff ff       	call   c0000840 <strcat>
c0008f56:	83 c4 0c             	add    esp,0xc
c0008f59:	68 80 00 00 00       	push   0x80
c0008f5e:	6a 00                	push   0x0
c0008f60:	56                   	push   esi
c0008f61:	e8 8a 75 ff ff       	call   c00004f0 <memset>
c0008f66:	83 c4 10             	add    esp,0x10
c0008f69:	83 c4 2c             	add    esp,0x2c
c0008f6c:	5b                   	pop    ebx
c0008f6d:	5e                   	pop    esi
c0008f6e:	5f                   	pop    edi
c0008f6f:	5d                   	pop    ebp
c0008f70:	c3                   	ret    
c0008f71:	90                   	nop

c0008f72 <VgaText::doUpdate()>:
c0008f72:	c3                   	ret    
c0008f73:	90                   	nop

c0008f74 <TSS::TSS()>:
c0008f74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f78:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f7f:	90                   	nop
c0008f80:	c3                   	ret    
c0008f81:	90                   	nop
c0008f82:	66 90                	xchg   ax,ax

c0008f84 <TSS::setESP(unsigned long)>:
c0008f84:	55                   	push   ebp
c0008f85:	89 e5                	mov    ebp,esp
c0008f87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f8d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f90:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f93:	90                   	nop
c0008f94:	5d                   	pop    ebp
c0008f95:	c3                   	ret    
c0008f96:	66 90                	xchg   ax,ax

c0008f98 <TSS::flush()>:
c0008f98:	55                   	push   ebp
c0008f99:	89 e5                	mov    ebp,esp
c0008f9b:	83 ec 10             	sub    esp,0x10
c0008f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fa3:	83 c8 03             	or     eax,0x3
c0008fa6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008faa:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008fae:	66 89 d0             	mov    ax,dx
c0008fb1:	0f 00 d8             	ltr    ax
c0008fb4:	90                   	nop
c0008fb5:	c9                   	leave  
c0008fb6:	c3                   	ret    
c0008fb7:	90                   	nop

c0008fb8 <TSS::setup(unsigned long, unsigned long)>:
c0008fb8:	55                   	push   ebp
c0008fb9:	89 e5                	mov    ebp,esp
c0008fbb:	83 ec 18             	sub    esp,0x18
c0008fbe:	83 ec 0c             	sub    esp,0xc
c0008fc1:	6a 68                	push   0x68
c0008fc3:	e8 1e eb ff ff       	call   c0007ae6 <malloc>
c0008fc8:	83 c4 10             	add    esp,0x10
c0008fcb:	89 c2                	mov    edx,eax
c0008fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd9:	83 ec 04             	sub    esp,0x4
c0008fdc:	6a 68                	push   0x68
c0008fde:	6a 00                	push   0x0
c0008fe0:	50                   	push   eax
c0008fe1:	e8 0a 75 ff ff       	call   c00004f0 <memset>
c0008fe6:	83 c4 10             	add    esp,0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000900a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000905b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000905e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009064:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009067:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000906a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000906d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009070:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009073:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000907a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000907d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009080:	0f 20 da             	mov    edx,cr3
c0009083:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009086:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009089:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000908c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000908f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009092:	83 ec 08             	sub    esp,0x8
c0009095:	50                   	push   eax
c0009096:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009099:	50                   	push   eax
c000909a:	e8 b3 e2 ff ff       	call   c0007352 <GDTEntry::setBase(unsigned int)>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	83 ec 08             	sub    esp,0x8
c00090a5:	6a 68                	push   0x68
c00090a7:	8d 45 ec             	lea    eax,[ebp-0x14]
c00090aa:	50                   	push   eax
c00090ab:	e8 be e2 ff ff       	call   c000736e <GDTEntry::setLimit(unsigned int)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00090b7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090ba:	83 e0 0f             	and    eax,0xf
c00090bd:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090c0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090c3:	83 c8 40             	or     eax,0x40
c00090c6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090c9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090d4:	05 78 01 00 00       	add    eax,0x178
c00090d9:	83 ec 04             	sub    esp,0x4
c00090dc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090e2:	50                   	push   eax
c00090e3:	e8 ba e2 ff ff       	call   c00073a2 <GDT::addEntry(GDTEntry)>
c00090e8:	83 c4 10             	add    esp,0x10
c00090eb:	89 c2                	mov    edx,eax
c00090ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090f0:	89 10                	mov    DWORD PTR [eax],edx
c00090f2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090fd:	05 78 01 00 00       	add    eax,0x178
c0009102:	83 ec 0c             	sub    esp,0xc
c0009105:	50                   	push   eax
c0009106:	e8 c1 e2 ff ff       	call   c00073cc <GDT::flush()>
c000910b:	83 c4 10             	add    esp,0x10
c000910e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009111:	8b 00                	mov    eax,DWORD PTR [eax]
c0009113:	c9                   	leave  
c0009114:	c3                   	ret    
c0009115:	90                   	nop

c0009116 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0009116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000911a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000911e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009121:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009126:	75 08                	jne    c0009130 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009128:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000912e:	eb 38                	jmp    c0009168 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009130:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009135:	75 17                	jne    c000914e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000913c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000913f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009145:	8b 10                	mov    edx,DWORD PTR [eax]
c0009147:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000914b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000914e:	89 c1                	mov    ecx,eax
c0009150:	83 e1 fd             	and    ecx,0xfffffffd
c0009153:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009159:	74 cd                	je     c0009128 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000915b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009160:	83 e0 ef             	and    eax,0xffffffef
c0009163:	83 f8 08             	cmp    eax,0x8
c0009166:	76 c0                	jbe    c0009128 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009168:	31 c0                	xor    eax,eax
c000916a:	c3                   	ret    
c000916b:	90                   	nop

c000916c <ReservedFilename::isAtty()>:
c000916c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009170:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009173:	31 c0                	xor    eax,eax
c0009175:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000917b:	74 09                	je     c0009186 <ReservedFilename::isAtty()+0x1a>
c000917d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009183:	0f 94 c0             	sete   al
c0009186:	c3                   	ret    
c0009187:	90                   	nop

c0009188 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000918c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009190:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009193:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009197:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000919c:	75 08                	jne    c00091a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000919e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00091a4:	eb 3d                	jmp    c00091e3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091a6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00091ab:	75 17                	jne    c00091c4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00091ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00091b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00091b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00091bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00091bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091c1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00091c4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00091c9:	75 04                	jne    c00091cf <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00091cb:	89 0a                	mov    DWORD PTR [edx],ecx
c00091cd:	eb 14                	jmp    c00091e3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091cf:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091d4:	74 c8                	je     c000919e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091d6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091db:	83 e0 ef             	and    eax,0xffffffef
c00091de:	83 f8 08             	cmp    eax,0x8
c00091e1:	76 bb                	jbe    c000919e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091e3:	31 c0                	xor    eax,eax
c00091e5:	c3                   	ret    

c00091e6 <UnixFile::getFileDescriptor()>:
c00091e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091ed:	c3                   	ret    

c00091ee <UnixFile::UnixFile(int)>:
c00091ee:	53                   	push   ebx
c00091ef:	83 ec 28             	sub    esp,0x28
c00091f2:	ba e4 10 02 c0       	mov    edx,0xc00210e4
c00091f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091fb:	89 10                	mov    DWORD PTR [eax],edx
c00091fd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0009205:	0f 8f 90 01 00 00    	jg     c000939b <UnixFile::UnixFile(int)+0x1ad>
c000920b:	a1 20 39 02 c0       	mov    eax,ds:0xc0023920
c0009210:	8d 50 01             	lea    edx,[eax+0x1]
c0009213:	89 15 20 39 02 c0    	mov    DWORD PTR ds:0xc0023920,edx
c0009219:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000921d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009220:	83 ec 08             	sub    esp,0x8
c0009223:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009227:	68 98 6f 02 c0       	push   0xc0026f98
c000922c:	e8 27 69 01 00       	call   c001fb58 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009239:	83 f0 01             	xor    eax,0x1
c000923c:	0f b6 c0             	movzx  eax,al
c000923f:	85 c0                	test   eax,eax
c0009241:	0f 84 55 01 00 00    	je     c000939c <UnixFile::UnixFile(int)+0x1ae>
c0009247:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c000924e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000925d:	e8 84 e8 ff ff       	call   c0007ae6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 03 ff ff 0f       	push   0xfffff03
c000926f:	53                   	push   ebx
c0009270:	e8 2d 01 00 00       	call   c00093a2 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c000927e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000928d:	e8 54 e8 ff ff       	call   c0007ae6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 01 ff ff 0f       	push   0xfffff01
c000929f:	53                   	push   ebx
c00092a0:	e8 fd 00 00 00       	call   c00093a2 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c00092ae:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00092bd:	e8 24 e8 ff ff       	call   c0007ae6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 00 ff ff 0f       	push   0xfffff00
c00092cf:	53                   	push   ebx
c00092d0:	e8 cd 00 00 00       	call   c00093a2 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092de:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092e6:	83 ec 0c             	sub    esp,0xc
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 f4 e7 ff ff       	call   c0007ae6 <malloc>
c00092f2:	83 c4 10             	add    esp,0x10
c00092f5:	89 c3                	mov    ebx,eax
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	68 02 ff ff 0f       	push   0xfffff02
c00092ff:	53                   	push   ebx
c0009300:	e8 9d 00 00 00       	call   c00093a2 <ReservedFilename::ReservedFilename(int)>
c0009305:	83 c4 10             	add    esp,0x10
c0009308:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c000930e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009316:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000931b:	7f 7f                	jg     c000939c <UnixFile::UnixFile(int)+0x1ae>
c000931d:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009325:	83 ec 0c             	sub    esp,0xc
c0009328:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000932c:	e8 b5 e7 ff ff       	call   c0007ae6 <malloc>
c0009331:	83 c4 10             	add    esp,0x10
c0009334:	89 c3                	mov    ebx,eax
c0009336:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000933a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000933f:	83 ec 08             	sub    esp,0x8
c0009342:	50                   	push   eax
c0009343:	53                   	push   ebx
c0009344:	e8 59 00 00 00       	call   c00093a2 <ReservedFilename::ReservedFilename(int)>
c0009349:	83 c4 10             	add    esp,0x10
c000934c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009350:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c0009357:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000935f:	83 ec 0c             	sub    esp,0xc
c0009362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009366:	e8 7b e7 ff ff       	call   c0007ae6 <malloc>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 c3                	mov    ebx,eax
c0009370:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009374:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	50                   	push   eax
c000937d:	53                   	push   ebx
c000937e:	e8 1f 00 00 00       	call   c00093a2 <ReservedFilename::ReservedFilename(int)>
c0009383:	83 c4 10             	add    esp,0x10
c0009386:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000938a:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009391:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009396:	e9 7b ff ff ff       	jmp    c0009316 <UnixFile::UnixFile(int)+0x128>
c000939b:	90                   	nop
c000939c:	83 c4 28             	add    esp,0x28
c000939f:	5b                   	pop    ebx
c00093a0:	c3                   	ret    
c00093a1:	90                   	nop

c00093a2 <ReservedFilename::ReservedFilename(int)>:
c00093a2:	83 ec 0c             	sub    esp,0xc
c00093a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a9:	83 ec 08             	sub    esp,0x8
c00093ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093b0:	50                   	push   eax
c00093b1:	e8 38 fe ff ff       	call   c00091ee <UnixFile::UnixFile(int)>
c00093b6:	83 c4 10             	add    esp,0x10
c00093b9:	ba 00 11 02 c0       	mov    edx,0xc0021100
c00093be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c2:	89 10                	mov    DWORD PTR [eax],edx
c00093c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00093cc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093cf:	90                   	nop
c00093d0:	83 c4 0c             	add    esp,0xc
c00093d3:	c3                   	ret    

c00093d4 <UnixFile::~UnixFile()>:
c00093d4:	83 ec 1c             	sub    esp,0x1c
c00093d7:	ba e4 10 02 c0       	mov    edx,0xc00210e4
c00093dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093e0:	89 10                	mov    DWORD PTR [eax],edx
c00093e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093e9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093ee:	7f 76                	jg     c0009466 <UnixFile::~UnixFile()+0x92>
c00093f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093f8:	83 ec 0c             	sub    esp,0xc
c00093fb:	68 98 6f 02 c0       	push   0xc0026f98
c0009400:	e8 27 68 01 00       	call   c001fc2c <LinkedList<UnixFile>::getFirstElement()>
c0009405:	83 c4 10             	add    esp,0x10
c0009408:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 98 6f 02 c0       	push   0xc0026f98
c0009414:	e8 1b 68 01 00       	call   c001fc34 <LinkedList<UnixFile>::removeFirst()>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009420:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009424:	74 43                	je     c0009469 <UnixFile::~UnixFile()+0x95>
c0009426:	83 ec 08             	sub    esp,0x8
c0009429:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000942d:	68 98 6f 02 c0       	push   0xc0026f98
c0009432:	e8 21 67 01 00       	call   c001fb58 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000943e:	8d 50 01             	lea    edx,[eax+0x1]
c0009441:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009445:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000944a:	0f 94 c0             	sete   al
c000944d:	0f b6 c0             	movzx  eax,al
c0009450:	85 c0                	test   eax,eax
c0009452:	74 a4                	je     c00093f8 <UnixFile::~UnixFile()+0x24>
c0009454:	83 ec 0c             	sub    esp,0xc
c0009457:	68 bc 10 02 c0       	push   0xc00210bc
c000945c:	e8 b2 82 00 00       	call   c0011713 <KePanic(char const*)>
c0009461:	83 c4 10             	add    esp,0x10
c0009464:	eb 92                	jmp    c00093f8 <UnixFile::~UnixFile()+0x24>
c0009466:	90                   	nop
c0009467:	eb 01                	jmp    c000946a <UnixFile::~UnixFile()+0x96>
c0009469:	90                   	nop
c000946a:	90                   	nop
c000946b:	83 c4 1c             	add    esp,0x1c
c000946e:	c3                   	ret    
c000946f:	90                   	nop

c0009470 <UnixFile::~UnixFile()>:
c0009470:	83 ec 0c             	sub    esp,0xc
c0009473:	83 ec 0c             	sub    esp,0xc
c0009476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947a:	e8 55 ff ff ff       	call   c00093d4 <UnixFile::~UnixFile()>
c000947f:	83 c4 10             	add    esp,0x10
c0009482:	83 ec 08             	sub    esp,0x8
c0009485:	6a 0c                	push   0xc
c0009487:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948b:	e8 b8 13 00 00       	call   c000a848 <operator delete(void*, unsigned long)>
c0009490:	83 c4 10             	add    esp,0x10
c0009493:	83 c4 0c             	add    esp,0xc
c0009496:	c3                   	ret    
c0009497:	90                   	nop

c0009498 <ReservedFilename::~ReservedFilename()>:
c0009498:	83 ec 0c             	sub    esp,0xc
c000949b:	ba 00 11 02 c0       	mov    edx,0xc0021100
c00094a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094a4:	89 10                	mov    DWORD PTR [eax],edx
c00094a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094aa:	83 ec 0c             	sub    esp,0xc
c00094ad:	50                   	push   eax
c00094ae:	e8 21 ff ff ff       	call   c00093d4 <UnixFile::~UnixFile()>
c00094b3:	83 c4 10             	add    esp,0x10
c00094b6:	90                   	nop
c00094b7:	83 c4 0c             	add    esp,0xc
c00094ba:	c3                   	ret    
c00094bb:	90                   	nop

c00094bc <ReservedFilename::~ReservedFilename()>:
c00094bc:	83 ec 0c             	sub    esp,0xc
c00094bf:	83 ec 0c             	sub    esp,0xc
c00094c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094c6:	e8 cd ff ff ff       	call   c0009498 <ReservedFilename::~ReservedFilename()>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	83 ec 08             	sub    esp,0x8
c00094d1:	6a 0c                	push   0xc
c00094d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094d7:	e8 6c 13 00 00       	call   c000a848 <operator delete(void*, unsigned long)>
c00094dc:	83 c4 10             	add    esp,0x10
c00094df:	83 c4 0c             	add    esp,0xc
c00094e2:	c3                   	ret    

c00094e3 <KeGetFileFromDescriptor(int)>:
c00094e3:	53                   	push   ebx
c00094e4:	83 ec 08             	sub    esp,0x8
c00094e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094eb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094f1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094f7:	7f 2c                	jg     c0009525 <KeGetFileFromDescriptor(int)+0x42>
c00094f9:	83 ec 0c             	sub    esp,0xc
c00094fc:	68 98 6f 02 c0       	push   0xc0026f98
c0009501:	e8 26 67 01 00       	call   c001fc2c <LinkedList<UnixFile>::getFirstElement()>
c0009506:	83 c4 10             	add    esp,0x10
c0009509:	85 c0                	test   eax,eax
c000950b:	75 04                	jne    c0009511 <KeGetFileFromDescriptor(int)+0x2e>
c000950d:	31 c0                	xor    eax,eax
c000950f:	eb 6e                	jmp    c000957f <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009514:	74 69                	je     c000957f <KeGetFileFromDescriptor(int)+0x9c>
c0009516:	52                   	push   edx
c0009517:	52                   	push   edx
c0009518:	50                   	push   eax
c0009519:	68 98 6f 02 c0       	push   0xc0026f98
c000951e:	e8 b3 67 01 00       	call   c001fcd6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009523:	eb e1                	jmp    c0009506 <KeGetFileFromDescriptor(int)+0x23>
c0009525:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c000952a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009530:	74 4d                	je     c000957f <KeGetFileFromDescriptor(int)+0x9c>
c0009532:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009537:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000953d:	74 40                	je     c000957f <KeGetFileFromDescriptor(int)+0x9c>
c000953f:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009544:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000954a:	74 33                	je     c000957f <KeGetFileFromDescriptor(int)+0x9c>
c000954c:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c0009551:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009557:	74 26                	je     c000957f <KeGetFileFromDescriptor(int)+0x9c>
c0009559:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000955f:	83 f8 08             	cmp    eax,0x8
c0009562:	77 09                	ja     c000956d <KeGetFileFromDescriptor(int)+0x8a>
c0009564:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c000956b:	eb 12                	jmp    c000957f <KeGetFileFromDescriptor(int)+0x9c>
c000956d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009573:	83 fb 08             	cmp    ebx,0x8
c0009576:	77 95                	ja     c000950d <KeGetFileFromDescriptor(int)+0x2a>
c0009578:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c000957f:	83 c4 08             	add    esp,0x8
c0009582:	5b                   	pop    ebx
c0009583:	c3                   	ret    

c0009584 <__static_initialization_and_destruction_0(int, int)>:
c0009584:	83 ec 0c             	sub    esp,0xc
c0009587:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000958c:	75 34                	jne    c00095c2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000958e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009596:	75 2a                	jne    c00095c2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009598:	83 ec 0c             	sub    esp,0xc
c000959b:	68 98 6f 02 c0       	push   0xc0026f98
c00095a0:	e8 71 65 01 00       	call   c001fb16 <LinkedList<UnixFile>::LinkedList()>
c00095a5:	83 c4 10             	add    esp,0x10
c00095a8:	83 ec 04             	sub    esp,0x4
c00095ab:	68 9c 38 02 c0       	push   0xc002389c
c00095b0:	68 98 6f 02 c0       	push   0xc0026f98
c00095b5:	68 14 fb 01 c0       	push   0xc001fb14
c00095ba:	e8 39 12 00 00       	call   c000a7f8 <__cxa_atexit>
c00095bf:	83 c4 10             	add    esp,0x10
c00095c2:	90                   	nop
c00095c3:	83 c4 0c             	add    esp,0xc
c00095c6:	c3                   	ret    

c00095c7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00095c7:	83 ec 0c             	sub    esp,0xc
c00095ca:	83 ec 08             	sub    esp,0x8
c00095cd:	68 ff ff 00 00       	push   0xffff
c00095d2:	6a 01                	push   0x1
c00095d4:	e8 ab ff ff ff       	call   c0009584 <__static_initialization_and_destruction_0(int, int)>
c00095d9:	83 c4 10             	add    esp,0x10
c00095dc:	83 c4 0c             	add    esp,0xc
c00095df:	c3                   	ret    

c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095e0:	53                   	push   ebx
c00095e1:	8b 15 28 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023928
c00095e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095ef:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095f5:	89 d8                	mov    eax,ebx
c00095f7:	d1 e8                	shr    eax,1
c00095f9:	01 d0                	add    eax,edx
c00095fb:	80 e3 01             	and    bl,0x1
c00095fe:	8a 10                	mov    dl,BYTE PTR [eax]
c0009600:	75 09                	jne    c000960b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0009602:	83 e2 f0             	and    edx,0xfffffff0
c0009605:	09 ca                	or     edx,ecx
c0009607:	88 10                	mov    BYTE PTR [eax],dl
c0009609:	5b                   	pop    ebx
c000960a:	c3                   	ret    
c000960b:	83 e2 0f             	and    edx,0xf
c000960e:	0f b6 c9             	movzx  ecx,cl
c0009611:	c1 e1 04             	shl    ecx,0x4
c0009614:	09 ca                	or     edx,ecx
c0009616:	88 10                	mov    BYTE PTR [eax],dl
c0009618:	5b                   	pop    ebx
c0009619:	c3                   	ret    

c000961a <Virt::getPageState(unsigned long)>:
c000961a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000961e:	8b 0d 28 39 02 c0    	mov    ecx,DWORD PTR ds:0xc0023928
c0009624:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000962a:	89 d0                	mov    eax,edx
c000962c:	d1 e8                	shr    eax,1
c000962e:	80 e2 01             	and    dl,0x1
c0009631:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009634:	74 03                	je     c0009639 <Virt::getPageState(unsigned long)+0x1f>
c0009636:	c1 e8 04             	shr    eax,0x4
c0009639:	83 e0 0f             	and    eax,0xf
c000963c:	c3                   	ret    

c000963d <Virt::allocateKernelVirtualPages(int)>:
c000963d:	55                   	push   ebp
c000963e:	31 ed                	xor    ebp,ebp
c0009640:	57                   	push   edi
c0009641:	31 ff                	xor    edi,edi
c0009643:	56                   	push   esi
c0009644:	53                   	push   ebx
c0009645:	31 db                	xor    ebx,ebx
c0009647:	83 ec 0c             	sub    esp,0xc
c000964a:	8b 35 24 39 02 c0    	mov    esi,DWORD PTR ds:0xc0023924
c0009650:	56                   	push   esi
c0009651:	e8 c4 ff ff ff       	call   c000961a <Virt::getPageState(unsigned long)>
c0009656:	5a                   	pop    edx
c0009657:	84 c0                	test   al,al
c0009659:	75 41                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000965b:	85 db                	test   ebx,ebx
c000965d:	75 02                	jne    c0009661 <Virt::allocateKernelVirtualPages(int)+0x24>
c000965f:	89 f5                	mov    ebp,esi
c0009661:	83 c3 01             	add    ebx,0x1
c0009664:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009668:	74 5f                	je     c00096c9 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000966a:	83 c6 01             	add    esi,0x1
c000966d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009673:	76 34                	jbe    c00096a9 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009675:	c7 05 24 39 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023924,0xc8000
c000967f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009685:	75 2a                	jne    c00096b1 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009687:	be 00 80 0c 00       	mov    esi,0xc8000
c000968c:	bf 01 00 00 00       	mov    edi,0x1
c0009691:	56                   	push   esi
c0009692:	e8 83 ff ff ff       	call   c000961a <Virt::getPageState(unsigned long)>
c0009697:	5a                   	pop    edx
c0009698:	84 c0                	test   al,al
c000969a:	74 bf                	je     c000965b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000969c:	31 db                	xor    ebx,ebx
c000969e:	83 c6 01             	add    esi,0x1
c00096a1:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00096a7:	77 cc                	ja     c0009675 <Virt::allocateKernelVirtualPages(int)+0x38>
c00096a9:	89 35 24 39 02 c0    	mov    DWORD PTR ds:0xc0023924,esi
c00096af:	eb 9f                	jmp    c0009650 <Virt::allocateKernelVirtualPages(int)+0x13>
c00096b1:	83 ec 0c             	sub    esp,0xc
c00096b4:	68 14 11 02 c0       	push   0xc0021114
c00096b9:	e8 55 80 00 00       	call   c0011713 <KePanic(char const*)>
c00096be:	8b 35 24 39 02 c0    	mov    esi,DWORD PTR ds:0xc0023924
c00096c4:	83 c4 10             	add    esp,0x10
c00096c7:	eb 87                	jmp    c0009650 <Virt::allocateKernelVirtualPages(int)+0x13>
c00096c9:	89 2d 24 39 02 c0    	mov    DWORD PTR ds:0xc0023924,ebp
c00096cf:	83 fb 01             	cmp    ebx,0x1
c00096d2:	74 6f                	je     c0009743 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096d8:	85 c9                	test   ecx,ecx
c00096da:	74 49                	je     c0009725 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096e0:	89 e8                	mov    eax,ebp
c00096e2:	31 db                	xor    ebx,ebx
c00096e4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096e7:	eb 18                	jmp    c0009701 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096e9:	6a 01                	push   0x1
c00096eb:	83 c3 01             	add    ebx,0x1
c00096ee:	50                   	push   eax
c00096ef:	e8 ec fe ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096f4:	58                   	pop    eax
c00096f5:	5a                   	pop    edx
c00096f6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096fa:	74 29                	je     c0009725 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096fc:	a1 24 39 02 c0       	mov    eax,ds:0xc0023924
c0009701:	8d 50 01             	lea    edx,[eax+0x1]
c0009704:	85 db                	test   ebx,ebx
c0009706:	89 15 24 39 02 c0    	mov    DWORD PTR ds:0xc0023924,edx
c000970c:	74 24                	je     c0009732 <Virt::allocateKernelVirtualPages(int)+0xf5>
c000970e:	39 df                	cmp    edi,ebx
c0009710:	75 d7                	jne    c00096e9 <Virt::allocateKernelVirtualPages(int)+0xac>
c0009712:	6a 03                	push   0x3
c0009714:	83 c3 01             	add    ebx,0x1
c0009717:	50                   	push   eax
c0009718:	e8 c3 fe ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000971d:	59                   	pop    ecx
c000971e:	5e                   	pop    esi
c000971f:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009723:	75 d7                	jne    c00096fc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009725:	83 c4 0c             	add    esp,0xc
c0009728:	89 e8                	mov    eax,ebp
c000972a:	5b                   	pop    ebx
c000972b:	c1 e0 0c             	shl    eax,0xc
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    
c0009732:	6a 02                	push   0x2
c0009734:	bb 01 00 00 00       	mov    ebx,0x1
c0009739:	50                   	push   eax
c000973a:	e8 a1 fe ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000973f:	58                   	pop    eax
c0009740:	5a                   	pop    edx
c0009741:	eb b9                	jmp    c00096fc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009743:	6a 04                	push   0x4
c0009745:	8d 45 01             	lea    eax,[ebp+0x1]
c0009748:	55                   	push   ebp
c0009749:	a3 24 39 02 c0       	mov    ds:0xc0023924,eax
c000974e:	e8 8d fe ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009753:	5b                   	pop    ebx
c0009754:	89 e8                	mov    eax,ebp
c0009756:	5e                   	pop    esi
c0009757:	c1 e0 0c             	shl    eax,0xc
c000975a:	83 c4 0c             	add    esp,0xc
c000975d:	5b                   	pop    ebx
c000975e:	5e                   	pop    esi
c000975f:	5f                   	pop    edi
c0009760:	5d                   	pop    ebp
c0009761:	c3                   	ret    

c0009762 <Virt::freeSwapfilePage(unsigned long)>:
c0009762:	53                   	push   ebx
c0009763:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009769:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000976d:	b8 01 00 00 00       	mov    eax,0x1
c0009772:	89 cb                	mov    ebx,ecx
c0009774:	d3 e0                	shl    eax,cl
c0009776:	c1 eb 05             	shr    ebx,0x5
c0009779:	f7 d0                	not    eax
c000977b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000977e:	21 c1                	and    ecx,eax
c0009780:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009783:	5b                   	pop    ebx
c0009784:	c3                   	ret    

c0009785 <Virt::swapIDToSector(unsigned long)>:
c0009785:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009789:	8b 15 2c 39 02 c0    	mov    edx,DWORD PTR ds:0xc002392c
c000978f:	8b 0d 34 39 02 c0    	mov    ecx,DWORD PTR ds:0xc0023934
c0009795:	0f af c2             	imul   eax,edx
c0009798:	01 c8                	add    eax,ecx
c000979a:	c3                   	ret    

c000979b <Virt::allocateSwapfilePage()>:
c000979b:	55                   	push   ebp
c000979c:	31 d2                	xor    edx,edx
c000979e:	57                   	push   edi
c000979f:	56                   	push   esi
c00097a0:	53                   	push   ebx
c00097a1:	83 ec 0c             	sub    esp,0xc
c00097a4:	8b 0d 2c 39 02 c0    	mov    ecx,DWORD PTR ds:0xc002392c
c00097aa:	a1 30 39 02 c0       	mov    eax,ds:0xc0023930
c00097af:	f7 f1                	div    ecx
c00097b1:	39 0d 30 39 02 c0    	cmp    DWORD PTR ds:0xc0023930,ecx
c00097b7:	72 2f                	jb     c00097e8 <Virt::allocateSwapfilePage()+0x4d>
c00097b9:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c00097bf:	8b 16                	mov    edx,DWORD PTR [esi]
c00097c1:	f6 c2 01             	test   dl,0x1
c00097c4:	74 3e                	je     c0009804 <Virt::allocateSwapfilePage()+0x69>
c00097c6:	31 c9                	xor    ecx,ecx
c00097c8:	bf 01 00 00 00       	mov    edi,0x1
c00097cd:	eb 12                	jmp    c00097e1 <Virt::allocateSwapfilePage()+0x46>
c00097cf:	89 fd                	mov    ebp,edi
c00097d1:	89 ca                	mov    edx,ecx
c00097d3:	d3 e5                	shl    ebp,cl
c00097d5:	c1 ea 05             	shr    edx,0x5
c00097d8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097db:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097dd:	85 ea                	test   edx,ebp
c00097df:	74 2c                	je     c000980d <Virt::allocateSwapfilePage()+0x72>
c00097e1:	83 c1 01             	add    ecx,0x1
c00097e4:	39 c8                	cmp    eax,ecx
c00097e6:	77 e7                	ja     c00097cf <Virt::allocateSwapfilePage()+0x34>
c00097e8:	83 ec 0c             	sub    esp,0xc
c00097eb:	68 a8 13 02 c0       	push   0xc00213a8
c00097f0:	e8 1e 7f 00 00       	call   c0011713 <KePanic(char const*)>
c00097f5:	83 c4 10             	add    esp,0x10
c00097f8:	31 c9                	xor    ecx,ecx
c00097fa:	83 c4 0c             	add    esp,0xc
c00097fd:	89 c8                	mov    eax,ecx
c00097ff:	5b                   	pop    ebx
c0009800:	5e                   	pop    esi
c0009801:	5f                   	pop    edi
c0009802:	5d                   	pop    ebp
c0009803:	c3                   	ret    
c0009804:	89 f3                	mov    ebx,esi
c0009806:	bd 01 00 00 00       	mov    ebp,0x1
c000980b:	31 c9                	xor    ecx,ecx
c000980d:	09 ea                	or     edx,ebp
c000980f:	89 c8                	mov    eax,ecx
c0009811:	89 13                	mov    DWORD PTR [ebx],edx
c0009813:	83 c4 0c             	add    esp,0xc
c0009816:	5b                   	pop    ebx
c0009817:	5e                   	pop    esi
c0009818:	5f                   	pop    edi
c0009819:	5d                   	pop    ebp
c000981a:	c3                   	ret    

c000981b <Virt::virtualMemorySetup()>:
c000981b:	53                   	push   ebx
c000981c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009821:	6a 0f                	push   0xf
c0009823:	53                   	push   ebx
c0009824:	83 c3 01             	add    ebx,0x1
c0009827:	e8 b4 fd ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000982c:	58                   	pop    eax
c000982d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009833:	5a                   	pop    edx
c0009834:	75 eb                	jne    c0009821 <Virt::virtualMemorySetup()+0x6>
c0009836:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000983b:	6a 00                	push   0x0
c000983d:	53                   	push   ebx
c000983e:	83 c3 01             	add    ebx,0x1
c0009841:	e8 9a fd ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009846:	59                   	pop    ecx
c0009847:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000984d:	58                   	pop    eax
c000984e:	75 eb                	jne    c000983b <Virt::virtualMemorySetup()+0x20>
c0009850:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009855:	6a 0f                	push   0xf
c0009857:	53                   	push   ebx
c0009858:	83 c3 01             	add    ebx,0x1
c000985b:	e8 80 fd ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009860:	58                   	pop    eax
c0009861:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009867:	5a                   	pop    edx
c0009868:	75 eb                	jne    c0009855 <Virt::virtualMemorySetup()+0x3a>
c000986a:	5b                   	pop    ebx
c000986b:	c3                   	ret    

c000986c <Virt::setupPageSwapping(int)>:
c000986c:	53                   	push   ebx
c000986d:	83 ec 0c             	sub    esp,0xc
c0009870:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009874:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009879:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000987f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009881:	53                   	push   ebx
c0009882:	c1 e3 0b             	shl    ebx,0xb
c0009885:	68 bf 13 02 c0       	push   0xc00213bf
c000988a:	50                   	push   eax
c000988b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000988e:	89 1d 30 39 02 c0    	mov    DWORD PTR ds:0xc0023930,ebx
c0009894:	c6 05 38 39 02 c0 43 	mov    BYTE PTR ds:0xc0023938,0x43
c000989b:	c1 eb 08             	shr    ebx,0x8
c000989e:	a3 34 39 02 c0       	mov    ds:0xc0023934,eax
c00098a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00098a6:	c7 05 2c 39 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002392c,0x8
c00098b0:	e8 31 e2 ff ff       	call   c0007ae6 <malloc>
c00098b5:	83 c4 0c             	add    esp,0xc
c00098b8:	89 c1                	mov    ecx,eax
c00098ba:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c00098bf:	31 d2                	xor    edx,edx
c00098c1:	a1 30 39 02 c0       	mov    eax,ds:0xc0023930
c00098c6:	f7 35 2c 39 02 c0    	div    DWORD PTR ds:0xc002392c
c00098cc:	c1 e8 05             	shr    eax,0x5
c00098cf:	50                   	push   eax
c00098d0:	6a 00                	push   0x0
c00098d2:	51                   	push   ecx
c00098d3:	e8 18 6c ff ff       	call   c00004f0 <memset>
c00098d8:	83 c4 18             	add    esp,0x18
c00098db:	5b                   	pop    ebx
c00098dc:	c3                   	ret    
c00098dd:	90                   	nop

c00098de <VAS::setCPUSpecific(unsigned long)>:
c00098de:	c3                   	ret    
c00098df:	90                   	nop

c00098e0 <VAS::VAS(VAS*)>:
c00098e0:	83 ec 0c             	sub    esp,0xc
c00098e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098f9:	83 ec 0c             	sub    esp,0xc
c00098fc:	68 34 11 02 c0       	push   0xc0021134
c0009901:	e8 0d 7e 00 00       	call   c0011713 <KePanic(char const*)>
c0009906:	83 c4 10             	add    esp,0x10
c0009909:	90                   	nop
c000990a:	83 c4 0c             	add    esp,0xc
c000990d:	c3                   	ret    

c000990e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000990e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009912:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0009917:	89 c2                	mov    edx,eax
c0009919:	c1 e8 0a             	shr    eax,0xa
c000991c:	c1 ea 16             	shr    edx,0x16
c000991f:	83 f9 01             	cmp    ecx,0x1
c0009922:	19 c9                	sbb    ecx,ecx
c0009924:	c1 e2 0c             	shl    edx,0xc
c0009927:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000992d:	25 fc 0f 00 00       	and    eax,0xffc
c0009932:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009939:	01 d0                	add    eax,edx
c000993b:	c3                   	ret    

c000993c <VAS::getPageTableEntry(unsigned long)>:
c000993c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009940:	89 ca                	mov    edx,ecx
c0009942:	c1 e9 0a             	shr    ecx,0xa
c0009945:	c1 ea 16             	shr    edx,0x16
c0009948:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000994e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009954:	c1 e0 0c             	shl    eax,0xc
c0009957:	8d 04 08             	lea    eax,[eax+ecx*1]
c000995a:	c3                   	ret    

c000995b <Virt::freeKernelVirtualPages(unsigned long)>:
c000995b:	55                   	push   ebp
c000995c:	57                   	push   edi
c000995d:	bf 01 00 00 00       	mov    edi,0x1
c0009962:	56                   	push   esi
c0009963:	53                   	push   ebx
c0009964:	83 ec 1c             	sub    esp,0x1c
c0009967:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000996b:	c1 ee 0c             	shr    esi,0xc
c000996e:	eb 48                	jmp    c00099b8 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009970:	83 ec 08             	sub    esp,0x8
c0009973:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009978:	55                   	push   ebp
c0009979:	50                   	push   eax
c000997a:	e8 bd ff ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c000997f:	83 c4 10             	add    esp,0x10
c0009982:	8b 10                	mov    edx,DWORD PTR [eax]
c0009984:	f6 c6 04             	test   dh,0x4
c0009987:	75 70                	jne    c00099f9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009989:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000998f:	83 fb 04             	cmp    ebx,0x4
c0009992:	0f 84 8a 00 00 00    	je     c0009a22 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009998:	83 fb 02             	cmp    ebx,0x2
c000999b:	0f 84 9a 00 00 00    	je     c0009a3b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c00099a1:	83 fb 03             	cmp    ebx,0x3
c00099a4:	0f 84 be 00 00 00    	je     c0009a68 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00099aa:	83 fb 01             	cmp    ebx,0x1
c00099ad:	0f 84 a2 00 00 00    	je     c0009a55 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099b3:	83 c6 01             	add    esi,0x1
c00099b6:	31 ff                	xor    edi,edi
c00099b8:	56                   	push   esi
c00099b9:	89 f5                	mov    ebp,esi
c00099bb:	e8 5a fc ff ff       	call   c000961a <Virt::getPageState(unsigned long)>
c00099c0:	c1 e5 0c             	shl    ebp,0xc
c00099c3:	0f b6 d8             	movzx  ebx,al
c00099c6:	5a                   	pop    edx
c00099c7:	85 db                	test   ebx,ebx
c00099c9:	75 a5                	jne    c0009970 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00099cb:	83 ec 0c             	sub    esp,0xc
c00099ce:	68 d6 13 02 c0       	push   0xc00213d6
c00099d3:	e8 3b 7d 00 00       	call   c0011713 <KePanic(char const*)>
c00099d8:	5a                   	pop    edx
c00099d9:	59                   	pop    ecx
c00099da:	55                   	push   ebp
c00099db:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099e1:	55                   	push   ebp
c00099e2:	e8 55 ff ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c00099e7:	83 c4 10             	add    esp,0x10
c00099ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00099ec:	f6 c6 04             	test   dh,0x4
c00099ef:	75 08                	jne    c00099f9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099f1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099f7:	eb ba                	jmp    c00099b3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099fd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0009a03:	83 ec 0c             	sub    esp,0xc
c0009a06:	52                   	push   edx
c0009a07:	e8 7a e3 ff ff       	call   c0007d86 <Phys::freePage(unsigned long)>
c0009a0c:	83 c4 10             	add    esp,0x10
c0009a0f:	83 fb 04             	cmp    ebx,0x4
c0009a12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a16:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a1c:	0f 85 76 ff ff ff    	jne    c0009998 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0009a22:	83 e7 01             	and    edi,0x1
c0009a25:	75 46                	jne    c0009a6d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0009a27:	c7 44 24 30 58 11 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021158
c0009a2f:	83 c4 1c             	add    esp,0x1c
c0009a32:	5b                   	pop    ebx
c0009a33:	5e                   	pop    esi
c0009a34:	5f                   	pop    edi
c0009a35:	5d                   	pop    ebp
c0009a36:	e9 d8 7c 00 00       	jmp    c0011713 <KePanic(char const*)>
c0009a3b:	83 e7 01             	and    edi,0x1
c0009a3e:	75 15                	jne    c0009a55 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a40:	83 ec 0c             	sub    esp,0xc
c0009a43:	68 f2 13 02 c0       	push   0xc00213f2
c0009a48:	e8 c6 7c 00 00       	call   c0011713 <KePanic(char const*)>
c0009a4d:	83 c4 10             	add    esp,0x10
c0009a50:	e9 5e ff ff ff       	jmp    c00099b3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	6a 00                	push   0x0
c0009a5a:	56                   	push   esi
c0009a5b:	e8 80 fb ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a60:	83 c4 10             	add    esp,0x10
c0009a63:	e9 4b ff ff ff       	jmp    c00099b3 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a68:	83 e7 01             	and    edi,0x1
c0009a6b:	75 16                	jne    c0009a83 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a6d:	83 ec 08             	sub    esp,0x8
c0009a70:	6a 00                	push   0x0
c0009a72:	56                   	push   esi
c0009a73:	e8 68 fb ff ff       	call   c00095e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a78:	83 c4 10             	add    esp,0x10
c0009a7b:	83 c4 1c             	add    esp,0x1c
c0009a7e:	5b                   	pop    ebx
c0009a7f:	5e                   	pop    esi
c0009a80:	5f                   	pop    edi
c0009a81:	5d                   	pop    ebp
c0009a82:	c3                   	ret    
c0009a83:	c7 44 24 30 0e 14 02 c0 	mov    DWORD PTR [esp+0x30],0xc002140e
c0009a8b:	83 c4 1c             	add    esp,0x1c
c0009a8e:	5b                   	pop    ebx
c0009a8f:	5e                   	pop    esi
c0009a90:	5f                   	pop    edi
c0009a91:	5d                   	pop    ebp
c0009a92:	e9 7c 7c 00 00       	jmp    c0011713 <KePanic(char const*)>
c0009a97:	90                   	nop

c0009a98 <VAS::freeAllocatedPages(unsigned long)>:
c0009a98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009aa0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009aa4:	74 09                	je     c0009aaf <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009aa6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009aaa:	e9 ac fe ff ff       	jmp    c000995b <Virt::freeKernelVirtualPages(unsigned long)>
c0009aaf:	c7 44 24 04 7c 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002117c
c0009ab7:	e9 b9 0e 00 00       	jmp    c000a975 <Dbg::kprintf(char const*, ...)>

c0009abc <VAS::virtualToPhysical(unsigned long)>:
c0009abc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ac0:	50                   	push   eax
c0009ac1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ac5:	52                   	push   edx
c0009ac6:	e8 71 fe ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c0009acb:	59                   	pop    ecx
c0009acc:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ace:	5a                   	pop    edx
c0009acf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ad4:	c3                   	ret    
c0009ad5:	90                   	nop

c0009ad6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009ad6:	55                   	push   ebp
c0009ad7:	57                   	push   edi
c0009ad8:	56                   	push   esi
c0009ad9:	53                   	push   ebx
c0009ada:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ade:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ae2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ae6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aea:	85 db                	test   ebx,ebx
c0009aec:	7e 24                	jle    c0009b12 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009aee:	c1 e3 0c             	shl    ebx,0xc
c0009af1:	01 f3                	add    ebx,esi
c0009af3:	56                   	push   esi
c0009af4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009afa:	55                   	push   ebp
c0009afb:	e8 3c fe ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c0009b00:	5a                   	pop    edx
c0009b01:	59                   	pop    ecx
c0009b02:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009b04:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009b08:	21 f9                	and    ecx,edi
c0009b0a:	09 d1                	or     ecx,edx
c0009b0c:	39 f3                	cmp    ebx,esi
c0009b0e:	89 08                	mov    DWORD PTR [eax],ecx
c0009b10:	75 e1                	jne    c0009af3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009b12:	5b                   	pop    ebx
c0009b13:	5e                   	pop    esi
c0009b14:	5f                   	pop    edi
c0009b15:	5d                   	pop    ebp
c0009b16:	c3                   	ret    
c0009b17:	90                   	nop

c0009b18 <VAS::VAS()>:
c0009b18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009b23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009b2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b32:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b3b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b43:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b4a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b51:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b56:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b5b:	29 c2                	sub    edx,eax
c0009b5d:	89 d0                	mov    eax,edx
c0009b5f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b64:	c1 e8 0c             	shr    eax,0xc
c0009b67:	89 c2                	mov    edx,eax
c0009b69:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b6e:	6a 04                	push   0x4
c0009b70:	6a ff                	push   0xffffffff
c0009b72:	52                   	push   edx
c0009b73:	50                   	push   eax
c0009b74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b78:	e8 59 ff ff ff       	call   c0009ad6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b7d:	83 c4 14             	add    esp,0x14
c0009b80:	90                   	nop
c0009b81:	c3                   	ret    

c0009b82 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b82:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b87:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b8d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b94:	75 01                	jne    c0009b97 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b96:	c3                   	ret    
c0009b97:	68 80 00 00 00       	push   0x80
c0009b9c:	6a ff                	push   0xffffffff
c0009b9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009ba2:	50                   	push   eax
c0009ba3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009ba7:	52                   	push   edx
c0009ba8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009bac:	51                   	push   ecx
c0009bad:	e8 24 ff ff ff       	call   c0009ad6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009bb2:	83 c4 14             	add    esp,0x14
c0009bb5:	c3                   	ret    

c0009bb6 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009bb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bba:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009bbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bc1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009bc4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009bc9:	83 f8 01             	cmp    eax,0x1
c0009bcc:	19 c0                	sbb    eax,eax
c0009bce:	83 ca 03             	or     edx,0x3
c0009bd1:	83 e0 fc             	and    eax,0xfffffffc
c0009bd4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bdb:	0f 20 d8             	mov    eax,cr3
c0009bde:	0f 22 d8             	mov    cr3,eax
c0009be1:	c3                   	ret    

c0009be2 <VAS::~VAS()>:
c0009be2:	83 ec 2c             	sub    esp,0x2c
c0009be5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bed:	fa                   	cli    
c0009bee:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009bf3:	83 c0 01             	add    eax,0x1
c0009bf6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bfb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c02:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c05:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c0b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009c0f:	6a 01                	push   0x1
c0009c11:	50                   	push   eax
c0009c12:	e8 9f ff ff ff       	call   c0009bb6 <VAS::mapOtherVASIn(bool, VAS*)>
c0009c17:	83 c4 0c             	add    esp,0xc
c0009c1a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009c22:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009c2a:	0f 8f d8 00 00 00    	jg     c0009d08 <VAS::~VAS()+0x126>
c0009c30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c3b:	c1 e2 02             	shl    edx,0x2
c0009c3e:	01 d0                	add    eax,edx
c0009c40:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c4a:	83 e0 01             	and    eax,0x1
c0009c4d:	0f 84 ab 00 00 00    	je     c0009cfe <VAS::~VAS()+0x11c>
c0009c53:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c5b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c63:	7f 74                	jg     c0009cd9 <VAS::~VAS()+0xf7>
c0009c65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c69:	c1 e0 0a             	shl    eax,0xa
c0009c6c:	89 c2                	mov    edx,eax
c0009c6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c72:	01 d0                	add    eax,edx
c0009c74:	c1 e0 0c             	shl    eax,0xc
c0009c77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c7b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c80:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c85:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c8b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c8f:	6a 01                	push   0x1
c0009c91:	50                   	push   eax
c0009c92:	e8 77 fc ff ff       	call   c000990e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c97:	83 c4 0c             	add    esp,0xc
c0009c9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ca2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ca4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cac:	25 01 04 00 00       	and    eax,0x401
c0009cb1:	3d 01 04 00 00       	cmp    eax,0x401
c0009cb6:	75 1a                	jne    c0009cd2 <VAS::~VAS()+0xf0>
c0009cb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cbc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cc1:	83 ec 0c             	sub    esp,0xc
c0009cc4:	50                   	push   eax
c0009cc5:	e8 bc e0 ff ff       	call   c0007d86 <Phys::freePage(unsigned long)>
c0009cca:	83 c4 10             	add    esp,0x10
c0009ccd:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cd2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009cd7:	eb 82                	jmp    c0009c5b <VAS::~VAS()+0x79>
c0009cd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cdd:	25 00 04 00 00       	and    eax,0x400
c0009ce2:	74 1a                	je     c0009cfe <VAS::~VAS()+0x11c>
c0009ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ce8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ced:	83 ec 0c             	sub    esp,0xc
c0009cf0:	50                   	push   eax
c0009cf1:	e8 90 e0 ff ff       	call   c0007d86 <Phys::freePage(unsigned long)>
c0009cf6:	83 c4 10             	add    esp,0x10
c0009cf9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cfe:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009d03:	e9 1a ff ff ff       	jmp    c0009c22 <VAS::~VAS()+0x40>
c0009d08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d0f:	83 ec 0c             	sub    esp,0xc
c0009d12:	50                   	push   eax
c0009d13:	e8 43 fc ff ff       	call   c000995b <Virt::freeKernelVirtualPages(unsigned long)>
c0009d18:	83 c4 10             	add    esp,0x10
c0009d1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d1f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009d22:	83 ec 0c             	sub    esp,0xc
c0009d25:	50                   	push   eax
c0009d26:	e8 5b e0 ff ff       	call   c0007d86 <Phys::freePage(unsigned long)>
c0009d2b:	83 c4 10             	add    esp,0x10
c0009d2e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d33:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d38:	83 e8 01             	sub    eax,0x1
c0009d3b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d40:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d45:	85 c0                	test   eax,eax
c0009d47:	75 01                	jne    c0009d4a <VAS::~VAS()+0x168>
c0009d49:	fb                   	sti    
c0009d4a:	90                   	nop
c0009d4b:	83 c4 2c             	add    esp,0x2c
c0009d4e:	c3                   	ret    
c0009d4f:	90                   	nop

c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d50:	55                   	push   ebp
c0009d51:	57                   	push   edi
c0009d52:	56                   	push   esi
c0009d53:	53                   	push   ebx
c0009d54:	83 ec 1c             	sub    esp,0x1c
c0009d57:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d5b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d5f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d65:	77 08                	ja     c0009d6f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d67:	0f 20 d8             	mov    eax,cr3
c0009d6a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d6d:	75 49                	jne    c0009db8 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d73:	09 d8                	or     eax,ebx
c0009d75:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7a:	75 59                	jne    c0009dd5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d7c:	89 de                	mov    esi,ebx
c0009d7e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d81:	c1 ee 16             	shr    esi,0x16
c0009d84:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d8b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d8f:	74 56                	je     c0009de7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d91:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d95:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d99:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d9f:	c1 eb 0a             	shr    ebx,0xa
c0009da2:	c1 e6 0c             	shl    esi,0xc
c0009da5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009dab:	09 d0                	or     eax,edx
c0009dad:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009db0:	83 c4 1c             	add    esp,0x1c
c0009db3:	5b                   	pop    ebx
c0009db4:	5e                   	pop    esi
c0009db5:	5f                   	pop    edi
c0009db6:	5d                   	pop    ebp
c0009db7:	c3                   	ret    
c0009db8:	83 ec 0c             	sub    esp,0xc
c0009dbb:	68 a0 11 02 c0       	push   0xc00211a0
c0009dc0:	e8 b0 0b 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0009dc5:	83 c4 10             	add    esp,0x10
c0009dc8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009dcc:	09 d8                	or     eax,ebx
c0009dce:	a9 ff 0f 00 00       	test   eax,0xfff
c0009dd3:	74 a7                	je     c0009d7c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009dd5:	83 ec 0c             	sub    esp,0xc
c0009dd8:	68 08 12 02 c0       	push   0xc0021208
c0009ddd:	e8 31 79 00 00       	call   c0011713 <KePanic(char const*)>
c0009de2:	83 c4 10             	add    esp,0x10
c0009de5:	eb 95                	jmp    c0009d7c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009de7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009deb:	e8 ff df ff ff       	call   c0007def <Phys::allocatePage()>
c0009df0:	83 ec 0c             	sub    esp,0xc
c0009df3:	89 c5                	mov    ebp,eax
c0009df5:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009dfb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dff:	6a 01                	push   0x1
c0009e01:	e8 37 f8 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c0009e06:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009e0d:	6a 01                	push   0x1
c0009e0f:	50                   	push   eax
c0009e10:	55                   	push   ebp
c0009e11:	81 cd 07 04 00 00    	or     ebp,0x407
c0009e17:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009e1b:	51                   	push   ecx
c0009e1c:	e8 29 01 00 00       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e21:	83 c4 1c             	add    esp,0x1c
c0009e24:	68 00 10 00 00       	push   0x1000
c0009e29:	6a 00                	push   0x0
c0009e2b:	50                   	push   eax
c0009e2c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e30:	e8 bb 66 ff ff       	call   c00004f0 <memset>
c0009e35:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e39:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e3c:	e8 1a fb ff ff       	call   c000995b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e41:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e45:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e48:	83 c4 10             	add    esp,0x10
c0009e4b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e4e:	e9 3e ff ff ff       	jmp    c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e53:	90                   	nop

c0009e54 <VAS::allocatePages(int, int)>:
c0009e54:	55                   	push   ebp
c0009e55:	57                   	push   edi
c0009e56:	56                   	push   esi
c0009e57:	53                   	push   ebx
c0009e58:	83 ec 1c             	sub    esp,0x1c
c0009e5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e63:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e67:	75 71                	jne    c0009eda <VAS::allocatePages(int, int)+0x86>
c0009e69:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e70:	85 c0                	test   eax,eax
c0009e72:	74 4d                	je     c0009ec1 <VAS::allocatePages(int, int)+0x6d>
c0009e74:	89 dd                	mov    ebp,ebx
c0009e76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e7a:	c1 e5 0c             	shl    ebp,0xc
c0009e7d:	01 c5                	add    ebp,eax
c0009e7f:	85 db                	test   ebx,ebx
c0009e81:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e84:	7e 29                	jle    c0009eaf <VAS::allocatePages(int, int)+0x5b>
c0009e86:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e8a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e8e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e94:	e8 56 df ff ff       	call   c0007def <Phys::allocatePage()>
c0009e99:	57                   	push   edi
c0009e9a:	53                   	push   ebx
c0009e9b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ea1:	50                   	push   eax
c0009ea2:	56                   	push   esi
c0009ea3:	e8 a8 fe ff ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ea8:	83 c4 10             	add    esp,0x10
c0009eab:	39 dd                	cmp    ebp,ebx
c0009ead:	75 e5                	jne    c0009e94 <VAS::allocatePages(int, int)+0x40>
c0009eaf:	0f 20 d8             	mov    eax,cr3
c0009eb2:	0f 22 d8             	mov    cr3,eax
c0009eb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009eb9:	83 c4 1c             	add    esp,0x1c
c0009ebc:	5b                   	pop    ebx
c0009ebd:	5e                   	pop    esi
c0009ebe:	5f                   	pop    edi
c0009ebf:	5d                   	pop    ebp
c0009ec0:	c3                   	ret    
c0009ec1:	83 ec 0c             	sub    esp,0xc
c0009ec4:	68 2c 12 02 c0       	push   0xc002122c
c0009ec9:	e8 45 78 00 00       	call   c0011713 <KePanic(char const*)>
c0009ece:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ed1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ed5:	83 c4 10             	add    esp,0x10
c0009ed8:	eb 9a                	jmp    c0009e74 <VAS::allocatePages(int, int)+0x20>
c0009eda:	83 ec 0c             	sub    esp,0xc
c0009edd:	53                   	push   ebx
c0009ede:	e8 5a f7 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c0009ee3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ee7:	83 c4 10             	add    esp,0x10
c0009eea:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009eef:	77 37                	ja     c0009f28 <VAS::allocatePages(int, int)+0xd4>
c0009ef1:	85 db                	test   ebx,ebx
c0009ef3:	7e ba                	jle    c0009eaf <VAS::allocatePages(int, int)+0x5b>
c0009ef5:	c1 e3 0c             	shl    ebx,0xc
c0009ef8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009efc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f00:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009f03:	81 cf 00 04 00 00    	or     edi,0x400
c0009f09:	89 c3                	mov    ebx,eax
c0009f0b:	e8 df de ff ff       	call   c0007def <Phys::allocatePage()>
c0009f10:	57                   	push   edi
c0009f11:	53                   	push   ebx
c0009f12:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f18:	50                   	push   eax
c0009f19:	56                   	push   esi
c0009f1a:	e8 31 fe ff ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f1f:	83 c4 10             	add    esp,0x10
c0009f22:	39 dd                	cmp    ebp,ebx
c0009f24:	75 e5                	jne    c0009f0b <VAS::allocatePages(int, int)+0xb7>
c0009f26:	eb 87                	jmp    c0009eaf <VAS::allocatePages(int, int)+0x5b>
c0009f28:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009f2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f33:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f3a:	74 b5                	je     c0009ef1 <VAS::allocatePages(int, int)+0x9d>
c0009f3c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f40:	80 ce 01             	or     dh,0x1
c0009f43:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f47:	eb a8                	jmp    c0009ef1 <VAS::allocatePages(int, int)+0x9d>
c0009f49:	90                   	nop

c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f4a:	55                   	push   ebp
c0009f4b:	57                   	push   edi
c0009f4c:	56                   	push   esi
c0009f4d:	53                   	push   ebx
c0009f4e:	83 ec 0c             	sub    esp,0xc
c0009f51:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f55:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f59:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f5d:	85 db                	test   ebx,ebx
c0009f5f:	7e 2f                	jle    c0009f90 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f61:	c1 e3 0c             	shl    ebx,0xc
c0009f64:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f68:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f6c:	01 d3                	add    ebx,edx
c0009f6e:	55                   	push   ebp
c0009f6f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f77:	29 c2                	sub    edx,eax
c0009f79:	01 f2                	add    edx,esi
c0009f7b:	52                   	push   edx
c0009f7c:	56                   	push   esi
c0009f7d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f83:	57                   	push   edi
c0009f84:	e8 c7 fd ff ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f89:	83 c4 10             	add    esp,0x10
c0009f8c:	39 de                	cmp    esi,ebx
c0009f8e:	75 de                	jne    c0009f6e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f90:	0f 20 d8             	mov    eax,cr3
c0009f93:	0f 22 d8             	mov    cr3,eax
c0009f96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f9a:	83 c4 0c             	add    esp,0xc
c0009f9d:	5b                   	pop    ebx
c0009f9e:	5e                   	pop    esi
c0009f9f:	5f                   	pop    edi
c0009fa0:	5d                   	pop    ebp
c0009fa1:	c3                   	ret    

c0009fa2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009fa2:	55                   	push   ebp
c0009fa3:	57                   	push   edi
c0009fa4:	56                   	push   esi
c0009fa5:	53                   	push   ebx
c0009fa6:	83 ec 1c             	sub    esp,0x1c
c0009fa9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fad:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009fb1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009fb5:	09 f8                	or     eax,edi
c0009fb7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009fbb:	a9 ff 0f 00 00       	test   eax,0xfff
c0009fc0:	75 4f                	jne    c000a011 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009fc2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009fc6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009fc9:	c1 eb 16             	shr    ebx,0x16
c0009fcc:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fd3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fd7:	74 52                	je     c000a02b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fd9:	0f b6 f2             	movzx  esi,dl
c0009fdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fe0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fe4:	c1 e8 0a             	shr    eax,0xa
c0009fe7:	83 fe 01             	cmp    esi,0x1
c0009fea:	19 d2                	sbb    edx,edx
c0009fec:	c1 e3 0c             	shl    ebx,0xc
c0009fef:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009ff5:	25 fc 0f 00 00       	and    eax,0xffc
c0009ffa:	01 d8                	add    eax,ebx
c0009ffc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a000:	09 d9                	or     ecx,ebx
c000a002:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a009:	83 c4 1c             	add    esp,0x1c
c000a00c:	5b                   	pop    ebx
c000a00d:	5e                   	pop    esi
c000a00e:	5f                   	pop    edi
c000a00f:	5d                   	pop    ebp
c000a010:	c3                   	ret    
c000a011:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a015:	83 ec 0c             	sub    esp,0xc
c000a018:	68 58 12 02 c0       	push   0xc0021258
c000a01d:	e8 f1 76 00 00       	call   c0011713 <KePanic(char const*)>
c000a022:	83 c4 10             	add    esp,0x10
c000a025:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a029:	eb 97                	jmp    c0009fc2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000a02b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a02f:	e8 bb dd ff ff       	call   c0007def <Phys::allocatePage()>
c000a034:	83 ec 0c             	sub    esp,0xc
c000a037:	89 c5                	mov    ebp,eax
c000a039:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a03f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a043:	6a 01                	push   0x1
c000a045:	e8 f3 f5 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c000a04a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a051:	6a 01                	push   0x1
c000a053:	50                   	push   eax
c000a054:	55                   	push   ebp
c000a055:	81 cd 07 04 00 00    	or     ebp,0x407
c000a05b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a05f:	51                   	push   ecx
c000a060:	e8 e5 fe ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a065:	83 c4 1c             	add    esp,0x1c
c000a068:	68 00 10 00 00       	push   0x1000
c000a06d:	6a 00                	push   0x0
c000a06f:	50                   	push   eax
c000a070:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a074:	e8 77 64 ff ff       	call   c00004f0 <memset>
c000a079:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a07d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a080:	e8 d6 f8 ff ff       	call   c000995b <Virt::freeKernelVirtualPages(unsigned long)>
c000a085:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a088:	83 c4 10             	add    esp,0x10
c000a08b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a08e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a092:	e9 42 ff ff ff       	jmp    c0009fd9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a097:	90                   	nop

c000a098 <VAS::VAS(bool)>:
c000a098:	53                   	push   ebx
c000a099:	83 ec 28             	sub    esp,0x28
c000a09c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0a0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a0a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a0af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0b3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a0ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0be:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a0c2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a0c5:	e8 25 dd ff ff       	call   c0007def <Phys::allocatePage()>
c000a0ca:	89 c2                	mov    edx,eax
c000a0cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0d3:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0d9:	83 ec 0c             	sub    esp,0xc
c000a0dc:	6a 01                	push   0x1
c000a0de:	e8 5a f5 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c000a0e3:	83 c4 10             	add    esp,0x10
c000a0e6:	89 c2                	mov    edx,eax
c000a0e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0ef:	83 ec 0c             	sub    esp,0xc
c000a0f2:	6a 03                	push   0x3
c000a0f4:	6a 01                	push   0x1
c000a0f6:	52                   	push   edx
c000a0f7:	50                   	push   eax
c000a0f8:	53                   	push   ebx
c000a0f9:	e8 4c fe ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0fe:	83 c4 20             	add    esp,0x20
c000a101:	89 c2                	mov    edx,eax
c000a103:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a107:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a10a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a112:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a11a:	7f 1d                	jg     c000a139 <VAS::VAS(bool)+0xa1>
c000a11c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a120:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a123:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a127:	c1 e2 02             	shl    edx,0x2
c000a12a:	01 d0                	add    eax,edx
c000a12c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a132:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a137:	eb d9                	jmp    c000a112 <VAS::VAS(bool)+0x7a>
c000a139:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a141:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a149:	7f 7e                	jg     c000a1c9 <VAS::VAS(bool)+0x131>
c000a14b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a14f:	2d 00 02 00 00       	sub    eax,0x200
c000a154:	c1 e0 0c             	shl    eax,0xc
c000a157:	83 c8 05             	or     eax,0x5
c000a15a:	89 c2                	mov    edx,eax
c000a15c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a161:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a167:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a16d:	83 e0 10             	and    eax,0x10
c000a170:	0f b6 c0             	movzx  eax,al
c000a173:	85 c0                	test   eax,eax
c000a175:	74 07                	je     c000a17e <VAS::VAS(bool)+0xe6>
c000a177:	b8 00 01 00 00       	mov    eax,0x100
c000a17c:	eb 05                	jmp    c000a183 <VAS::VAS(bool)+0xeb>
c000a17e:	b8 00 00 00 00       	mov    eax,0x0
c000a183:	09 d0                	or     eax,edx
c000a185:	89 c1                	mov    ecx,eax
c000a187:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a18b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a18e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a192:	c1 e2 02             	shl    edx,0x2
c000a195:	01 d0                	add    eax,edx
c000a197:	89 ca                	mov    edx,ecx
c000a199:	89 10                	mov    DWORD PTR [eax],edx
c000a19b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a19f:	2d 40 03 00 00       	sub    eax,0x340
c000a1a4:	83 f8 7f             	cmp    eax,0x7f
c000a1a7:	77 16                	ja     c000a1bf <VAS::VAS(bool)+0x127>
c000a1a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a1b4:	c1 e2 02             	shl    edx,0x2
c000a1b7:	01 d0                	add    eax,edx
c000a1b9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a1bf:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a1c4:	e9 78 ff ff ff       	jmp    c000a141 <VAS::VAS(bool)+0xa9>
c000a1c9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1d4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1da:	83 e0 10             	and    eax,0x10
c000a1dd:	0f b6 c0             	movzx  eax,al
c000a1e0:	85 c0                	test   eax,eax
c000a1e2:	74 07                	je     c000a1eb <VAS::VAS(bool)+0x153>
c000a1e4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1e9:	eb 05                	jmp    c000a1f0 <VAS::VAS(bool)+0x158>
c000a1eb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1f4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1f7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1fd:	89 02                	mov    DWORD PTR [edx],eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a206:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a20b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a211:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a217:	83 e0 10             	and    eax,0x10
c000a21a:	0f b6 c0             	movzx  eax,al
c000a21d:	85 c0                	test   eax,eax
c000a21f:	74 07                	je     c000a228 <VAS::VAS(bool)+0x190>
c000a221:	b8 00 01 00 00       	mov    eax,0x100
c000a226:	eb 05                	jmp    c000a22d <VAS::VAS(bool)+0x195>
c000a228:	b8 00 00 00 00       	mov    eax,0x0
c000a22d:	09 c2                	or     edx,eax
c000a22f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a233:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a236:	05 fc 0f 00 00       	add    eax,0xffc
c000a23b:	83 ca 03             	or     edx,0x3
c000a23e:	89 10                	mov    DWORD PTR [eax],edx
c000a240:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a245:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a24b:	83 ec 0c             	sub    esp,0xc
c000a24e:	50                   	push   eax
c000a24f:	e8 70 2a 00 00       	call   c000ccc4 <Device::getName()>
c000a254:	83 c4 10             	add    esp,0x10
c000a257:	83 ec 08             	sub    esp,0x8
c000a25a:	68 28 14 02 c0       	push   0xc0021428
c000a25f:	50                   	push   eax
c000a260:	e8 eb 64 ff ff       	call   c0000750 <strcmp>
c000a265:	83 c4 10             	add    esp,0x10
c000a268:	85 c0                	test   eax,eax
c000a26a:	0f 94 c0             	sete   al
c000a26d:	0f b6 c0             	movzx  eax,al
c000a270:	85 c0                	test   eax,eax
c000a272:	74 68                	je     c000a2dc <VAS::VAS(bool)+0x244>
c000a274:	fa                   	cli    
c000a275:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a27a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a280:	05 7c 09 00 00       	add    eax,0x97c
c000a285:	83 ec 0c             	sub    esp,0xc
c000a288:	50                   	push   eax
c000a289:	e8 50 d3 ff ff       	call   c00075de <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a28e:	83 c4 10             	add    esp,0x10
c000a291:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a296:	89 c3                	mov    ebx,eax
c000a298:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a29d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2a3:	05 7c 09 00 00       	add    eax,0x97c
c000a2a8:	83 ec 0c             	sub    esp,0xc
c000a2ab:	50                   	push   eax
c000a2ac:	e8 2d d3 ff ff       	call   c00075de <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a2b1:	83 c4 10             	add    esp,0x10
c000a2b4:	83 ec 08             	sub    esp,0x8
c000a2b7:	50                   	push   eax
c000a2b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2bc:	e8 7b f6 ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c000a2c1:	83 c4 10             	add    esp,0x10
c000a2c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000a2c6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2cb:	6a 11                	push   0x11
c000a2cd:	53                   	push   ebx
c000a2ce:	50                   	push   eax
c000a2cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2d3:	e8 78 fa ff ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2d8:	83 c4 10             	add    esp,0x10
c000a2db:	fb                   	sti    
c000a2dc:	90                   	nop
c000a2dd:	83 c4 28             	add    esp,0x28
c000a2e0:	5b                   	pop    ebx
c000a2e1:	c3                   	ret    

c000a2e2 <VAS::evict(unsigned long)>:
c000a2e2:	55                   	push   ebp
c000a2e3:	57                   	push   edi
c000a2e4:	56                   	push   esi
c000a2e5:	53                   	push   ebx
c000a2e6:	83 ec 1c             	sub    esp,0x1c
c000a2e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2ed:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2f5:	e8 a1 f4 ff ff       	call   c000979b <Virt::allocateSwapfilePage()>
c000a2fa:	89 c7                	mov    edi,eax
c000a2fc:	a1 2c 39 02 c0       	mov    eax,ds:0xc002392c
c000a301:	85 c0                	test   eax,eax
c000a303:	7e 40                	jle    c000a345 <VAS::evict(unsigned long)+0x63>
c000a305:	89 ee                	mov    esi,ebp
c000a307:	31 db                	xor    ebx,ebx
c000a309:	83 ec 0c             	sub    esp,0xc
c000a30c:	57                   	push   edi
c000a30d:	e8 73 f4 ff ff       	call   c0009785 <Virt::swapIDToSector(unsigned long)>
c000a312:	89 34 24             	mov    DWORD PTR [esp],esi
c000a315:	01 d8                	add    eax,ebx
c000a317:	6a 01                	push   0x1
c000a319:	31 d2                	xor    edx,edx
c000a31b:	83 c3 01             	add    ebx,0x1
c000a31e:	52                   	push   edx
c000a31f:	81 c6 00 02 00 00    	add    esi,0x200
c000a325:	50                   	push   eax
c000a326:	0f be 05 38 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023938
c000a32d:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a334:	50                   	push   eax
c000a335:	e8 46 3b 00 00       	call   c000de80 <LogicalDisk::write(unsigned long long, int, void*)>
c000a33a:	83 c4 20             	add    esp,0x20
c000a33d:	39 1d 2c 39 02 c0    	cmp    DWORD PTR ds:0xc002392c,ebx
c000a343:	7f c4                	jg     c000a309 <VAS::evict(unsigned long)+0x27>
c000a345:	83 ec 08             	sub    esp,0x8
c000a348:	c1 e7 0c             	shl    edi,0xc
c000a34b:	55                   	push   ebp
c000a34c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a350:	50                   	push   eax
c000a351:	e8 e6 f5 ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c000a356:	8b 10                	mov    edx,DWORD PTR [eax]
c000a358:	89 d3                	mov    ebx,edx
c000a35a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a360:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a366:	09 d7                	or     edi,edx
c000a368:	89 38                	mov    DWORD PTR [eax],edi
c000a36a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a36d:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a373:	83 c2 01             	add    edx,0x1
c000a376:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a37c:	e8 05 da ff ff       	call   c0007d86 <Phys::freePage(unsigned long)>
c000a381:	0f 20 d8             	mov    eax,cr3
c000a384:	0f 22 d8             	mov    cr3,eax
c000a387:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a38d:	51                   	push   ecx
c000a38e:	55                   	push   ebp
c000a38f:	53                   	push   ebx
c000a390:	68 7c 12 02 c0       	push   0xc002127c
c000a395:	e8 db 05 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a39a:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a39f:	c7 44 24 50 36 14 02 c0 	mov    DWORD PTR [esp+0x50],0xc0021436
c000a3a7:	8d 50 01             	lea    edx,[eax+0x1]
c000a3aa:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a3ae:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a3b4:	83 c4 3c             	add    esp,0x3c
c000a3b7:	5b                   	pop    ebx
c000a3b8:	5e                   	pop    esi
c000a3b9:	5f                   	pop    edi
c000a3ba:	5d                   	pop    ebp
c000a3bb:	e9 b5 05 00 00       	jmp    c000a975 <Dbg::kprintf(char const*, ...)>

c000a3c0 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a3c0:	55                   	push   ebp
c000a3c1:	57                   	push   edi
c000a3c2:	56                   	push   esi
c000a3c3:	53                   	push   ebx
c000a3c4:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a3ca:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3d1:	89 f3                	mov    ebx,esi
c000a3d3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3d9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3df:	77 22                	ja     c000a403 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3e1:	83 ec 08             	sub    esp,0x8
c000a3e4:	56                   	push   esi
c000a3e5:	68 59 14 02 c0       	push   0xc0021459
c000a3ea:	e8 86 05 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a3ef:	83 c4 10             	add    esp,0x10
c000a3f2:	85 db                	test   ebx,ebx
c000a3f4:	75 2a                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3f6:	31 c0                	xor    eax,eax
c000a3f8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3fe:	5b                   	pop    ebx
c000a3ff:	5e                   	pop    esi
c000a400:	5f                   	pop    edi
c000a401:	5d                   	pop    ebp
c000a402:	c3                   	ret    
c000a403:	83 ec 0c             	sub    esp,0xc
c000a406:	68 47 14 02 c0       	push   0xc0021447
c000a40b:	e8 03 73 00 00       	call   c0011713 <KePanic(char const*)>
c000a410:	5f                   	pop    edi
c000a411:	5d                   	pop    ebp
c000a412:	56                   	push   esi
c000a413:	68 59 14 02 c0       	push   0xc0021459
c000a418:	e8 58 05 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	83 ec 08             	sub    esp,0x8
c000a423:	53                   	push   ebx
c000a424:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a42b:	51                   	push   ecx
c000a42c:	e8 0b f5 ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c000a431:	83 c4 10             	add    esp,0x10
c000a434:	89 c2                	mov    edx,eax
c000a436:	85 c0                	test   eax,eax
c000a438:	74 bc                	je     c000a3f6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a43a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a43c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a442:	0f 85 c0 00 00 00    	jne    c000a508 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a448:	89 e8                	mov    eax,ebp
c000a44a:	25 01 04 00 00       	and    eax,0x401
c000a44f:	3d 00 04 00 00       	cmp    eax,0x400
c000a454:	75 a0                	jne    c000a3f6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a456:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a45a:	c1 ed 0c             	shr    ebp,0xc
c000a45d:	e8 8d d9 ff ff       	call   c0007def <Phys::allocatePage()>
c000a462:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a466:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a468:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a46e:	09 c1                	or     ecx,eax
c000a470:	81 c9 01 08 00 00    	or     ecx,0x801
c000a476:	89 0a                	mov    DWORD PTR [edx],ecx
c000a478:	8b 15 2c 39 02 c0    	mov    edx,DWORD PTR ds:0xc002392c
c000a47e:	85 d2                	test   edx,edx
c000a480:	7e 40                	jle    c000a4c2 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a482:	89 df                	mov    edi,ebx
c000a484:	31 f6                	xor    esi,esi
c000a486:	83 ec 0c             	sub    esp,0xc
c000a489:	55                   	push   ebp
c000a48a:	e8 f6 f2 ff ff       	call   c0009785 <Virt::swapIDToSector(unsigned long)>
c000a48f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a492:	01 f0                	add    eax,esi
c000a494:	6a 01                	push   0x1
c000a496:	31 d2                	xor    edx,edx
c000a498:	83 c6 01             	add    esi,0x1
c000a49b:	52                   	push   edx
c000a49c:	81 c7 00 02 00 00    	add    edi,0x200
c000a4a2:	50                   	push   eax
c000a4a3:	0f be 05 38 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023938
c000a4aa:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a4b1:	50                   	push   eax
c000a4b2:	e8 5d 39 00 00       	call   c000de14 <LogicalDisk::read(unsigned long long, int, void*)>
c000a4b7:	83 c4 20             	add    esp,0x20
c000a4ba:	39 35 2c 39 02 c0    	cmp    DWORD PTR ds:0xc002392c,esi
c000a4c0:	7f c4                	jg     c000a486 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a4c2:	83 ec 04             	sub    esp,0x4
c000a4c5:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a4ca:	83 e8 01             	sub    eax,0x1
c000a4cd:	50                   	push   eax
c000a4ce:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4d3:	53                   	push   ebx
c000a4d4:	68 6c 14 02 c0       	push   0xc002146c
c000a4d9:	e8 97 04 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a4de:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4e1:	e8 7c f2 ff ff       	call   c0009762 <Virt::freeSwapfilePage(unsigned long)>
c000a4e6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a4eb:	83 c4 10             	add    esp,0x10
c000a4ee:	83 e8 01             	sub    eax,0x1
c000a4f1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a4f6:	85 c0                	test   eax,eax
c000a4f8:	75 01                	jne    c000a4fb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4fa:	fb                   	sti    
c000a4fb:	0f 20 d8             	mov    eax,cr3
c000a4fe:	0f 22 d8             	mov    cr3,eax
c000a501:	b0 01                	mov    al,0x1
c000a503:	e9 f0 fe ff ff       	jmp    c000a3f8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a508:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a50c:	bd 00 10 00 00       	mov    ebp,0x1000
c000a511:	83 ec 0c             	sub    esp,0xc
c000a514:	89 de                	mov    esi,ebx
c000a516:	68 ac 12 02 c0       	push   0xc00212ac
c000a51b:	e8 55 04 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a520:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a524:	e8 c6 d8 ff ff       	call   c0007def <Phys::allocatePage()>
c000a529:	89 e9                	mov    ecx,ebp
c000a52b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a52d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a531:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a533:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a539:	09 c8                	or     eax,ecx
c000a53b:	83 c8 02             	or     eax,0x2
c000a53e:	89 02                	mov    DWORD PTR [edx],eax
c000a540:	0f 20 d8             	mov    eax,cr3
c000a543:	0f 22 d8             	mov    cr3,eax
c000a546:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a54a:	89 df                	mov    edi,ebx
c000a54c:	89 e9                	mov    ecx,ebp
c000a54e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a550:	b0 01                	mov    al,0x1
c000a552:	83 c4 10             	add    esp,0x10
c000a555:	e9 9e fe ff ff       	jmp    c000a3f8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a55a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a55a:	55                   	push   ebp
c000a55b:	57                   	push   edi
c000a55c:	56                   	push   esi
c000a55d:	53                   	push   ebx
c000a55e:	83 ec 28             	sub    esp,0x28
c000a561:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a565:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a569:	50                   	push   eax
c000a56a:	e8 ce f0 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c000a56f:	83 c4 0c             	add    esp,0xc
c000a572:	89 c5                	mov    ebp,eax
c000a574:	6a 07                	push   0x7
c000a576:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a57a:	52                   	push   edx
c000a57b:	56                   	push   esi
c000a57c:	e8 d3 f8 ff ff       	call   c0009e54 <VAS::allocatePages(int, int)>
c000a581:	83 c4 10             	add    esp,0x10
c000a584:	89 c7                	mov    edi,eax
c000a586:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a58a:	85 c9                	test   ecx,ecx
c000a58c:	74 2f                	je     c000a5bd <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a58e:	31 db                	xor    ebx,ebx
c000a590:	e8 5a d8 ff ff       	call   c0007def <Phys::allocatePage()>
c000a595:	83 c3 01             	add    ebx,0x1
c000a598:	6a 03                	push   0x3
c000a59a:	55                   	push   ebp
c000a59b:	50                   	push   eax
c000a59c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5a0:	56                   	push   esi
c000a5a1:	e8 aa f7 ff ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a5a6:	6a 07                	push   0x7
c000a5a8:	57                   	push   edi
c000a5a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a5ad:	50                   	push   eax
c000a5ae:	56                   	push   esi
c000a5af:	e8 9c f7 ff ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a5b4:	83 c4 20             	add    esp,0x20
c000a5b7:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a5bb:	75 d3                	jne    c000a590 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a5bd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a5c1:	89 28                	mov    DWORD PTR [eax],ebp
c000a5c3:	83 c4 1c             	add    esp,0x1c
c000a5c6:	89 f8                	mov    eax,edi
c000a5c8:	5b                   	pop    ebx
c000a5c9:	5e                   	pop    esi
c000a5ca:	5f                   	pop    edi
c000a5cb:	5d                   	pop    ebp
c000a5cc:	c3                   	ret    
c000a5cd:	90                   	nop

c000a5ce <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 14             	sub    esp,0x14
c000a5d2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5d6:	68 cc 12 02 c0       	push   0xc00212cc
c000a5db:	e8 95 03 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a5e0:	c7 04 24 2c 13 02 c0 	mov    DWORD PTR [esp],0xc002132c
c000a5e7:	e8 89 03 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a5ec:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5f0:	83 c4 18             	add    esp,0x18
c000a5f3:	5b                   	pop    ebx
c000a5f4:	e9 62 f3 ff ff       	jmp    c000995b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5f9:	90                   	nop

c000a5fa <VAS::scanForEviction()>:
c000a5fa:	57                   	push   edi
c000a5fb:	56                   	push   esi
c000a5fc:	31 f6                	xor    esi,esi
c000a5fe:	53                   	push   ebx
c000a5ff:	83 ec 10             	sub    esp,0x10
c000a602:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a606:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a609:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a60f:	75 0e                	jne    c000a61f <VAS::scanForEviction()+0x25>
c000a611:	89 da                	mov    edx,ebx
c000a613:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a616:	c1 ea 16             	shr    edx,0x16
c000a619:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a61d:	74 57                	je     c000a676 <VAS::scanForEviction()+0x7c>
c000a61f:	53                   	push   ebx
c000a620:	57                   	push   edi
c000a621:	e8 16 f3 ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c000a626:	5a                   	pop    edx
c000a627:	8b 10                	mov    edx,DWORD PTR [eax]
c000a629:	59                   	pop    ecx
c000a62a:	89 d1                	mov    ecx,edx
c000a62c:	c1 e9 0c             	shr    ecx,0xc
c000a62f:	74 10                	je     c000a641 <VAS::scanForEviction()+0x47>
c000a631:	89 d1                	mov    ecx,edx
c000a633:	81 e1 01 08 00 00    	and    ecx,0x801
c000a639:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a63f:	74 40                	je     c000a681 <VAS::scanForEviction()+0x87>
c000a641:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a647:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a64d:	76 2d                	jbe    c000a67c <VAS::scanForEviction()+0x82>
c000a64f:	83 c6 01             	add    esi,0x1
c000a652:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a659:	83 fe 03             	cmp    esi,0x3
c000a65c:	74 32                	je     c000a690 <VAS::scanForEviction()+0x96>
c000a65e:	31 db                	xor    ebx,ebx
c000a660:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a666:	75 b7                	jne    c000a61f <VAS::scanForEviction()+0x25>
c000a668:	89 da                	mov    edx,ebx
c000a66a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a66d:	c1 ea 16             	shr    edx,0x16
c000a670:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a674:	75 a9                	jne    c000a61f <VAS::scanForEviction()+0x25>
c000a676:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a67c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a67f:	eb 88                	jmp    c000a609 <VAS::scanForEviction()+0xf>
c000a681:	f6 c2 20             	test   dl,0x20
c000a684:	74 13                	je     c000a699 <VAS::scanForEviction()+0x9f>
c000a686:	83 e2 df             	and    edx,0xffffffdf
c000a689:	89 10                	mov    DWORD PTR [eax],edx
c000a68b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a68e:	eb b1                	jmp    c000a641 <VAS::scanForEviction()+0x47>
c000a690:	83 c4 10             	add    esp,0x10
c000a693:	31 c0                	xor    eax,eax
c000a695:	5b                   	pop    ebx
c000a696:	5e                   	pop    esi
c000a697:	5f                   	pop    edi
c000a698:	c3                   	ret    
c000a699:	83 ec 08             	sub    esp,0x8
c000a69c:	89 d0                	mov    eax,edx
c000a69e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a6a7:	53                   	push   ebx
c000a6a8:	68 81 14 02 c0       	push   0xc0021481
c000a6ad:	e8 c3 02 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a6b2:	58                   	pop    eax
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	5a                   	pop    edx
c000a6b7:	51                   	push   ecx
c000a6b8:	57                   	push   edi
c000a6b9:	e8 24 fc ff ff       	call   c000a2e2 <VAS::evict(unsigned long)>
c000a6be:	5b                   	pop    ebx
c000a6bf:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a6c2:	5e                   	pop    esi
c000a6c3:	50                   	push   eax
c000a6c4:	68 95 14 02 c0       	push   0xc0021495
c000a6c9:	e8 a7 02 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a6ce:	58                   	pop    eax
c000a6cf:	5a                   	pop    edx
c000a6d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6d4:	50                   	push   eax
c000a6d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6d9:	68 a8 14 02 c0       	push   0xc00214a8
c000a6de:	e8 92 02 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a6e3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6f3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6f6:	83 c4 10             	add    esp,0x10
c000a6f9:	5b                   	pop    ebx
c000a6fa:	5e                   	pop    esi
c000a6fb:	5f                   	pop    edi
c000a6fc:	c3                   	ret    

c000a6fd <mapVASFirstTime>:
c000a6fd:	55                   	push   ebp
c000a6fe:	57                   	push   edi
c000a6ff:	56                   	push   esi
c000a700:	53                   	push   ebx
c000a701:	83 ec 0c             	sub    esp,0xc
c000a704:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a709:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a70c:	83 fa 01             	cmp    edx,0x1
c000a70f:	0f 84 cb 00 00 00    	je     c000a7e0 <mapVASFirstTime+0xe3>
c000a715:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a718:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a71b:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a720:	c1 e5 15             	shl    ebp,0x15
c000a723:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a728:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a72e:	29 eb                	sub    ebx,ebp
c000a730:	29 ef                	sub    edi,ebp
c000a732:	e8 b8 d6 ff ff       	call   c0007def <Phys::allocatePage()>
c000a737:	83 ec 0c             	sub    esp,0xc
c000a73a:	68 03 04 00 00       	push   0x403
c000a73f:	6a 01                	push   0x1
c000a741:	53                   	push   ebx
c000a742:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a748:	50                   	push   eax
c000a749:	56                   	push   esi
c000a74a:	e8 fb f7 ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a74f:	83 c4 20             	add    esp,0x20
c000a752:	39 fb                	cmp    ebx,edi
c000a754:	75 dc                	jne    c000a732 <mapVASFirstTime+0x35>
c000a756:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a75b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a760:	29 eb                	sub    ebx,ebp
c000a762:	29 ef                	sub    edi,ebp
c000a764:	e8 86 d6 ff ff       	call   c0007def <Phys::allocatePage()>
c000a769:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a76d:	83 fa 01             	cmp    edx,0x1
c000a770:	19 d2                	sbb    edx,edx
c000a772:	83 ec 0c             	sub    esp,0xc
c000a775:	83 e2 04             	and    edx,0x4
c000a778:	81 c2 03 04 00 00    	add    edx,0x403
c000a77e:	52                   	push   edx
c000a77f:	6a 01                	push   0x1
c000a781:	53                   	push   ebx
c000a782:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a788:	50                   	push   eax
c000a789:	56                   	push   esi
c000a78a:	e8 bb f7 ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a78f:	83 c4 20             	add    esp,0x20
c000a792:	39 df                	cmp    edi,ebx
c000a794:	75 ce                	jne    c000a764 <mapVASFirstTime+0x67>
c000a796:	83 ec 0c             	sub    esp,0xc
c000a799:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a79e:	6a 04                	push   0x4
c000a7a0:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a7a6:	6a ff                	push   0xffffffff
c000a7a8:	c1 eb 0c             	shr    ebx,0xc
c000a7ab:	53                   	push   ebx
c000a7ac:	68 00 50 02 c0       	push   0xc0025000
c000a7b1:	56                   	push   esi
c000a7b2:	e8 1f f3 ff ff       	call   c0009ad6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7b7:	83 c4 14             	add    esp,0x14
c000a7ba:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a7bf:	6a 04                	push   0x4
c000a7c1:	6a ff                	push   0xffffffff
c000a7c3:	53                   	push   ebx
c000a7c4:	68 00 50 02 c0       	push   0xc0025000
c000a7c9:	50                   	push   eax
c000a7ca:	e8 07 f3 ff ff       	call   c0009ad6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7cf:	0f 20 d8             	mov    eax,cr3
c000a7d2:	0f 22 d8             	mov    cr3,eax
c000a7d5:	83 c4 20             	add    esp,0x20
c000a7d8:	83 c4 0c             	add    esp,0xc
c000a7db:	5b                   	pop    ebx
c000a7dc:	5e                   	pop    esi
c000a7dd:	5f                   	pop    edi
c000a7de:	5d                   	pop    ebp
c000a7df:	c3                   	ret    
c000a7e0:	83 ec 0c             	sub    esp,0xc
c000a7e3:	68 b5 14 02 c0       	push   0xc00214b5
c000a7e8:	e8 88 01 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a7ed:	83 c4 10             	add    esp,0x10
c000a7f0:	83 c4 0c             	add    esp,0xc
c000a7f3:	5b                   	pop    ebx
c000a7f4:	5e                   	pop    esi
c000a7f5:	5f                   	pop    edi
c000a7f6:	5d                   	pop    ebp
c000a7f7:	c3                   	ret    

c000a7f8 <__cxa_atexit>:
c000a7f8:	31 c0                	xor    eax,eax
c000a7fa:	c3                   	ret    

c000a7fb <__cxa_finalize>:
c000a7fb:	c3                   	ret    

c000a7fc <__stack_chk_fail>:
c000a7fc:	55                   	push   ebp
c000a7fd:	89 e5                	mov    ebp,esp
c000a7ff:	83 ec 10             	sub    esp,0x10
c000a802:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a805:	68 ce 14 02 c0       	push   0xc00214ce
c000a80a:	e8 66 01 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a80f:	58                   	pop    eax
c000a810:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a813:	5a                   	pop    edx
c000a814:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a817:	68 ce 14 02 c0       	push   0xc00214ce
c000a81c:	e8 54 01 00 00       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000a821:	c7 04 24 d6 14 02 c0 	mov    DWORD PTR [esp],0xc00214d6
c000a828:	e8 e6 6e 00 00       	call   c0011713 <KePanic(char const*)>
c000a82d:	83 c4 10             	add    esp,0x10
c000a830:	c9                   	leave  
c000a831:	c3                   	ret    

c000a832 <__cxa_pure_virtual>:
c000a832:	83 ec 18             	sub    esp,0x18
c000a835:	68 ee 14 02 c0       	push   0xc00214ee
c000a83a:	e8 d4 6e 00 00       	call   c0011713 <KePanic(char const*)>
c000a83f:	83 c4 1c             	add    esp,0x1c
c000a842:	c3                   	ret    

c000a843 <operator new[](unsigned long)>:
c000a843:	e9 9e d2 ff ff       	jmp    c0007ae6 <malloc>

c000a848 <operator delete(void*, unsigned long)>:
c000a848:	e9 b9 d2 ff ff       	jmp    c0007b06 <rfree>

c000a84d <operator delete[](void*)>:
c000a84d:	e9 b4 d2 ff ff       	jmp    c0007b06 <rfree>

c000a852 <operator delete[](void*, unsigned long)>:
c000a852:	e9 af d2 ff ff       	jmp    c0007b06 <rfree>

c000a857 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a857:	55                   	push   ebp
c000a858:	57                   	push   edi
c000a859:	56                   	push   esi
c000a85a:	be f7 0f 02 c0       	mov    esi,0xc0020ff7
c000a85f:	53                   	push   ebx
c000a860:	83 ec 20             	sub    esp,0x20
c000a863:	a0 f6 0f 02 c0       	mov    al,ds:0xc0020ff6
c000a868:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a86c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a870:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a874:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a878:	b8 10 00 00 00       	mov    eax,0x10
c000a87d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a883:	75 60                	jne    c000a8e5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a885:	89 c1                	mov    ecx,eax
c000a887:	c1 e9 02             	shr    ecx,0x2
c000a88a:	fc                   	cld    
c000a88b:	31 d2                	xor    edx,edx
c000a88d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a88f:	a8 02                	test   al,0x2
c000a891:	74 0b                	je     c000a89e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a893:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a896:	66 89 17             	mov    WORD PTR [edi],dx
c000a899:	ba 02 00 00 00       	mov    edx,0x2
c000a89e:	a8 01                	test   al,0x1
c000a8a0:	74 06                	je     c000a8a8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a8a2:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a8a5:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a8a8:	89 ee                	mov    esi,ebp
c000a8aa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a8ae:	eb 02                	jmp    c000a8b2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a8b0:	89 c6                	mov    esi,eax
c000a8b2:	31 d2                	xor    edx,edx
c000a8b4:	83 c1 01             	add    ecx,0x1
c000a8b7:	89 f0                	mov    eax,esi
c000a8b9:	f7 f3                	div    ebx
c000a8bb:	39 de                	cmp    esi,ebx
c000a8bd:	73 f1                	jae    c000a8b0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a8bf:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a8c2:	eb 02                	jmp    c000a8c6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a8c4:	89 c5                	mov    ebp,eax
c000a8c6:	31 d2                	xor    edx,edx
c000a8c8:	83 e9 01             	sub    ecx,0x1
c000a8cb:	89 e8                	mov    eax,ebp
c000a8cd:	f7 f3                	div    ebx
c000a8cf:	39 dd                	cmp    ebp,ebx
c000a8d1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8d5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8d7:	73 eb                	jae    c000a8c4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8d9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8dd:	83 c4 20             	add    esp,0x20
c000a8e0:	5b                   	pop    ebx
c000a8e1:	5e                   	pop    esi
c000a8e2:	5f                   	pop    edi
c000a8e3:	5d                   	pop    ebp
c000a8e4:	c3                   	ret    
c000a8e5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8e8:	83 c7 02             	add    edi,0x2
c000a8eb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8ef:	83 c6 02             	add    esi,0x2
c000a8f2:	83 e8 02             	sub    eax,0x2
c000a8f5:	eb 8e                	jmp    c000a885 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8f7 <Dbg::logc(char)>:
c000a8f7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8fb:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a902:	75 12                	jne    c000a916 <Dbg::logc(char)+0x1f>
c000a904:	ba fd 03 00 00       	mov    edx,0x3fd
c000a909:	ec                   	in     al,dx
c000a90a:	a8 20                	test   al,0x20
c000a90c:	74 fb                	je     c000a909 <Dbg::logc(char)+0x12>
c000a90e:	ba f8 03 00 00       	mov    edx,0x3f8
c000a913:	88 c8                	mov    al,cl
c000a915:	ee                   	out    dx,al
c000a916:	c3                   	ret    

c000a917 <Dbg::logs(char*)>:
c000a917:	53                   	push   ebx
c000a918:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a91c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a91f:	85 c0                	test   eax,eax
c000a921:	74 11                	je     c000a934 <Dbg::logs(char*)+0x1d>
c000a923:	83 c3 01             	add    ebx,0x1
c000a926:	50                   	push   eax
c000a927:	e8 cb ff ff ff       	call   c000a8f7 <Dbg::logc(char)>
c000a92c:	58                   	pop    eax
c000a92d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a930:	85 c0                	test   eax,eax
c000a932:	75 ef                	jne    c000a923 <Dbg::logs(char*)+0xc>
c000a934:	5b                   	pop    ebx
c000a935:	c3                   	ret    

c000a936 <Dbg::logWriteInt(unsigned int)>:
c000a936:	83 ec 10             	sub    esp,0x10
c000a939:	6a 0a                	push   0xa
c000a93b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a93f:	50                   	push   eax
c000a940:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a944:	50                   	push   eax
c000a945:	e8 0d ff ff ff       	call   c000a857 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a94a:	50                   	push   eax
c000a94b:	e8 c7 ff ff ff       	call   c000a917 <Dbg::logs(char*)>
c000a950:	83 c4 20             	add    esp,0x20
c000a953:	c3                   	ret    

c000a954 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a954:	83 ec 10             	sub    esp,0x10
c000a957:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a95b:	50                   	push   eax
c000a95c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a960:	50                   	push   eax
c000a961:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a965:	52                   	push   edx
c000a966:	e8 ec fe ff ff       	call   c000a857 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a96b:	50                   	push   eax
c000a96c:	e8 a6 ff ff ff       	call   c000a917 <Dbg::logs(char*)>
c000a971:	83 c4 20             	add    esp,0x20
c000a974:	c3                   	ret    

c000a975 <Dbg::kprintf(char const*, ...)>:
c000a975:	55                   	push   ebp
c000a976:	57                   	push   edi
c000a977:	56                   	push   esi
c000a978:	53                   	push   ebx
c000a979:	83 ec 0c             	sub    esp,0xc
c000a97c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a980:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a987:	74 08                	je     c000a991 <Dbg::kprintf(char const*, ...)+0x1c>
c000a989:	83 c4 0c             	add    esp,0xc
c000a98c:	5b                   	pop    ebx
c000a98d:	5e                   	pop    esi
c000a98e:	5f                   	pop    edi
c000a98f:	5d                   	pop    ebp
c000a990:	c3                   	ret    
c000a991:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a995:	31 ff                	xor    edi,edi
c000a997:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a99e:	85 c0                	test   eax,eax
c000a9a0:	74 e7                	je     c000a989 <Dbg::kprintf(char const*, ...)+0x14>
c000a9a2:	8d 77 01             	lea    esi,[edi+0x1]
c000a9a5:	83 f8 25             	cmp    eax,0x25
c000a9a8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9ab:	75 47                	jne    c000a9f4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a9ad:	83 c7 02             	add    edi,0x2
c000a9b0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a9b3:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a9b6:	83 e8 25             	sub    eax,0x25
c000a9b9:	0f b6 c0             	movzx  eax,al
c000a9bc:	83 f8 53             	cmp    eax,0x53
c000a9bf:	0f 87 ce 00 00 00    	ja     c000aa93 <Dbg::kprintf(char const*, ...)+0x11e>
c000a9c5:	ff 24 85 04 15 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeafc]
c000a9cc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d0:	89 c8                	mov    eax,ecx
c000a9d2:	83 c1 04             	add    ecx,0x4
c000a9d5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9d9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9db:	55                   	push   ebp
c000a9dc:	e8 55 ff ff ff       	call   c000a936 <Dbg::logWriteInt(unsigned int)>
c000a9e1:	58                   	pop    eax
c000a9e2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9e5:	85 c0                	test   eax,eax
c000a9e7:	74 a0                	je     c000a989 <Dbg::kprintf(char const*, ...)+0x14>
c000a9e9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9ec:	83 f8 25             	cmp    eax,0x25
c000a9ef:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9f2:	74 b9                	je     c000a9ad <Dbg::kprintf(char const*, ...)+0x38>
c000a9f4:	50                   	push   eax
c000a9f5:	89 f7                	mov    edi,esi
c000a9f7:	e8 fb fe ff ff       	call   c000a8f7 <Dbg::logc(char)>
c000a9fc:	89 ee                	mov    esi,ebp
c000a9fe:	58                   	pop    eax
c000a9ff:	eb e1                	jmp    c000a9e2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa05:	89 c8                	mov    eax,ecx
c000aa07:	83 c1 04             	add    ecx,0x4
c000aa0a:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa10:	50                   	push   eax
c000aa11:	e8 01 ff ff ff       	call   c000a917 <Dbg::logs(char*)>
c000aa16:	58                   	pop    eax
c000aa17:	eb c9                	jmp    c000a9e2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa19:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa1d:	89 d0                	mov    eax,edx
c000aa1f:	83 c2 04             	add    edx,0x4
c000aa22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa26:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa28:	50                   	push   eax
c000aa29:	e8 08 ff ff ff       	call   c000a936 <Dbg::logWriteInt(unsigned int)>
c000aa2e:	58                   	pop    eax
c000aa2f:	eb b1                	jmp    c000a9e2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa35:	89 d0                	mov    eax,edx
c000aa37:	83 c2 04             	add    edx,0x4
c000aa3a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa41:	50                   	push   eax
c000aa42:	e8 b0 fe ff ff       	call   c000a8f7 <Dbg::logc(char)>
c000aa47:	58                   	pop    eax
c000aa48:	eb 98                	jmp    c000a9e2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa4a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa4e:	89 c8                	mov    eax,ecx
c000aa50:	83 c1 04             	add    ecx,0x4
c000aa53:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa57:	6a 10                	push   0x10
c000aa59:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa5b:	51                   	push   ecx
c000aa5c:	e8 f3 fe ff ff       	call   c000a954 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa61:	5d                   	pop    ebp
c000aa62:	58                   	pop    eax
c000aa63:	e9 7a ff ff ff       	jmp    c000a9e2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa68:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa6c:	89 d0                	mov    eax,edx
c000aa6e:	83 c2 08             	add    edx,0x8
c000aa71:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa75:	6a 10                	push   0x10
c000aa77:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa79:	50                   	push   eax
c000aa7a:	e8 d5 fe ff ff       	call   c000a954 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa7f:	58                   	pop    eax
c000aa80:	5a                   	pop    edx
c000aa81:	e9 5c ff ff ff       	jmp    c000a9e2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa86:	6a 25                	push   0x25
c000aa88:	e8 6a fe ff ff       	call   c000a8f7 <Dbg::logc(char)>
c000aa8d:	5a                   	pop    edx
c000aa8e:	e9 4f ff ff ff       	jmp    c000a9e2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa93:	6a 25                	push   0x25
c000aa95:	e8 5d fe ff ff       	call   c000a8f7 <Dbg::logc(char)>
c000aa9a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa9e:	50                   	push   eax
c000aa9f:	e8 53 fe ff ff       	call   c000a8f7 <Dbg::logc(char)>
c000aaa4:	5a                   	pop    edx
c000aaa5:	59                   	pop    ecx
c000aaa6:	e9 37 ff ff ff       	jmp    c000a9e2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aaab:	90                   	nop

c000aaac <KiUbsanPrintDetails(char const*, void*)>:
c000aaac:	83 ec 1c             	sub    esp,0x1c
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aab6:	68 54 16 02 c0       	push   0xc0021654
c000aabb:	e8 b5 fe ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aacb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aacf:	8b 00                	mov    eax,DWORD PTR [eax]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 68 16 02 c0       	push   0xc0021668
c000aada:	e8 96 fe ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aae6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aae9:	83 ec 08             	sub    esp,0x8
c000aaec:	50                   	push   eax
c000aaed:	68 72 16 02 c0       	push   0xc0021672
c000aaf2:	e8 7e fe ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000aaf7:	83 c4 10             	add    esp,0x10
c000aafa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aafe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ab01:	83 ec 08             	sub    esp,0x8
c000ab04:	50                   	push   eax
c000ab05:	68 7c 16 02 c0       	push   0xc002167c
c000ab0a:	e8 66 fe ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ab0f:	83 c4 10             	add    esp,0x10
c000ab12:	90                   	nop
c000ab13:	83 c4 1c             	add    esp,0x1c
c000ab16:	c3                   	ret    
c000ab17:	90                   	nop

c000ab18 <__ubsan_handle_type_mismatch_v1>:
c000ab18:	83 ec 0c             	sub    esp,0xc
c000ab1b:	83 ec 08             	sub    esp,0x8
c000ab1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab22:	68 c0 17 02 c0       	push   0xc00217c0
c000ab27:	e8 80 ff ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ab2c:	83 c4 10             	add    esp,0x10
c000ab2f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab34:	75 16                	jne    c000ab4c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab36:	83 ec 0c             	sub    esp,0xc
c000ab39:	68 86 16 02 c0       	push   0xc0021686
c000ab3e:	e8 32 fe ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ab43:	83 c4 10             	add    esp,0x10
c000ab46:	e9 91 00 00 00       	jmp    c000abdc <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4b:	90                   	nop
c000ab4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab50:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab53:	85 c0                	test   eax,eax
c000ab55:	74 29                	je     c000ab80 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab5b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab5e:	83 e8 01             	sub    eax,0x1
c000ab61:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab65:	75 19                	jne    c000ab80 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab67:	83 ec 08             	sub    esp,0x8
c000ab6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab6e:	68 e0 17 02 c0       	push   0xc00217e0
c000ab73:	e8 fd fd ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	eb 5f                	jmp    c000abdc <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	68 9b 16 02 c0       	push   0xc002169b
c000ab88:	e8 e8 fd ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ab8d:	83 c4 10             	add    esp,0x10
c000ab90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab94:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab97:	0f b6 c0             	movzx  eax,al
c000ab9a:	83 ec 08             	sub    esp,0x8
c000ab9d:	50                   	push   eax
c000ab9e:	68 b5 16 02 c0       	push   0xc00216b5
c000aba3:	e8 cd fd ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000aba8:	83 c4 10             	add    esp,0x10
c000abab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abaf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abb2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000abb5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000abb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abbd:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000abc0:	0f b6 c0             	movzx  eax,al
c000abc3:	8b 04 85 40 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc6c0]
c000abca:	51                   	push   ecx
c000abcb:	52                   	push   edx
c000abcc:	50                   	push   eax
c000abcd:	68 08 18 02 c0       	push   0xc0021808
c000abd2:	e8 9e fd ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000abd7:	83 c4 10             	add    esp,0x10
c000abda:	66 90                	xchg   ax,ax
c000abdc:	83 ec 0c             	sub    esp,0xc
c000abdf:	68 c0 17 02 c0       	push   0xc00217c0
c000abe4:	e8 2a 6b 00 00       	call   c0011713 <KePanic(char const*)>
c000abe9:	83 c4 10             	add    esp,0x10
c000abec:	90                   	nop
c000abed:	83 c4 0c             	add    esp,0xc
c000abf0:	c3                   	ret    
c000abf1:	8d 76 00             	lea    esi,[esi+0x0]

c000abf4 <__ubsan_handle_pointer_overflow>:
c000abf4:	83 ec 0c             	sub    esp,0xc
c000abf7:	83 ec 08             	sub    esp,0x8
c000abfa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfe:	68 50 18 02 c0       	push   0xc0021850
c000ac03:	e8 a4 fe ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ac08:	83 c4 10             	add    esp,0x10
c000ac0b:	83 ec 0c             	sub    esp,0xc
c000ac0e:	68 50 18 02 c0       	push   0xc0021850
c000ac13:	e8 fb 6a 00 00       	call   c0011713 <KePanic(char const*)>
c000ac18:	83 c4 10             	add    esp,0x10
c000ac1b:	90                   	nop
c000ac1c:	83 c4 0c             	add    esp,0xc
c000ac1f:	c3                   	ret    

c000ac20 <__ubsan_handle_out_of_bounds>:
c000ac20:	83 ec 0c             	sub    esp,0xc
c000ac23:	83 ec 08             	sub    esp,0x8
c000ac26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac2a:	68 c0 16 02 c0       	push   0xc00216c0
c000ac2f:	e8 78 fe ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ac34:	83 c4 10             	add    esp,0x10
c000ac37:	83 ec 0c             	sub    esp,0xc
c000ac3a:	68 c0 16 02 c0       	push   0xc00216c0
c000ac3f:	e8 cf 6a 00 00       	call   c0011713 <KePanic(char const*)>
c000ac44:	83 c4 10             	add    esp,0x10
c000ac47:	90                   	nop
c000ac48:	83 c4 0c             	add    esp,0xc
c000ac4b:	c3                   	ret    

c000ac4c <__ubsan_handle_add_overflow>:
c000ac4c:	83 ec 0c             	sub    esp,0xc
c000ac4f:	83 ec 08             	sub    esp,0x8
c000ac52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac56:	68 dd 16 02 c0       	push   0xc00216dd
c000ac5b:	e8 4c fe ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	83 ec 0c             	sub    esp,0xc
c000ac66:	68 dd 16 02 c0       	push   0xc00216dd
c000ac6b:	e8 a3 6a 00 00       	call   c0011713 <KePanic(char const*)>
c000ac70:	83 c4 10             	add    esp,0x10
c000ac73:	90                   	nop
c000ac74:	83 c4 0c             	add    esp,0xc
c000ac77:	c3                   	ret    

c000ac78 <__ubsan_handle_load_invalid_value>:
c000ac78:	83 ec 0c             	sub    esp,0xc
c000ac7b:	83 ec 08             	sub    esp,0x8
c000ac7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac82:	68 70 18 02 c0       	push   0xc0021870
c000ac87:	e8 20 fe ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ac8c:	83 c4 10             	add    esp,0x10
c000ac8f:	83 ec 0c             	sub    esp,0xc
c000ac92:	68 70 18 02 c0       	push   0xc0021870
c000ac97:	e8 77 6a 00 00       	call   c0011713 <KePanic(char const*)>
c000ac9c:	83 c4 10             	add    esp,0x10
c000ac9f:	90                   	nop
c000aca0:	83 c4 0c             	add    esp,0xc
c000aca3:	c3                   	ret    

c000aca4 <__ubsan_handle_divrem_overflow>:
c000aca4:	83 ec 0c             	sub    esp,0xc
c000aca7:	83 ec 08             	sub    esp,0x8
c000acaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acae:	68 94 18 02 c0       	push   0xc0021894
c000acb3:	e8 f4 fd ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000acb8:	83 c4 10             	add    esp,0x10
c000acbb:	83 ec 0c             	sub    esp,0xc
c000acbe:	68 94 18 02 c0       	push   0xc0021894
c000acc3:	e8 4b 6a 00 00       	call   c0011713 <KePanic(char const*)>
c000acc8:	83 c4 10             	add    esp,0x10
c000accb:	90                   	nop
c000accc:	83 c4 0c             	add    esp,0xc
c000accf:	c3                   	ret    

c000acd0 <__ubsan_handle_mul_overflow>:
c000acd0:	83 ec 0c             	sub    esp,0xc
c000acd3:	83 ec 08             	sub    esp,0x8
c000acd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acda:	68 f9 16 02 c0       	push   0xc00216f9
c000acdf:	e8 c8 fd ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ace4:	83 c4 10             	add    esp,0x10
c000ace7:	83 ec 0c             	sub    esp,0xc
c000acea:	68 f9 16 02 c0       	push   0xc00216f9
c000acef:	e8 1f 6a 00 00       	call   c0011713 <KePanic(char const*)>
c000acf4:	83 c4 10             	add    esp,0x10
c000acf7:	90                   	nop
c000acf8:	83 c4 0c             	add    esp,0xc
c000acfb:	c3                   	ret    

c000acfc <__ubsan_handle_sub_overflow>:
c000acfc:	83 ec 0c             	sub    esp,0xc
c000acff:	83 ec 08             	sub    esp,0x8
c000ad02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad06:	68 15 17 02 c0       	push   0xc0021715
c000ad0b:	e8 9c fd ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ad10:	83 c4 10             	add    esp,0x10
c000ad13:	83 ec 0c             	sub    esp,0xc
c000ad16:	68 15 17 02 c0       	push   0xc0021715
c000ad1b:	e8 f3 69 00 00       	call   c0011713 <KePanic(char const*)>
c000ad20:	83 c4 10             	add    esp,0x10
c000ad23:	90                   	nop
c000ad24:	83 c4 0c             	add    esp,0xc
c000ad27:	c3                   	ret    

c000ad28 <__ubsan_handle_shift_out_of_bounds>:
c000ad28:	83 ec 0c             	sub    esp,0xc
c000ad2b:	83 ec 08             	sub    esp,0x8
c000ad2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad32:	68 b4 18 02 c0       	push   0xc00218b4
c000ad37:	e8 70 fd ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ad3c:	83 c4 10             	add    esp,0x10
c000ad3f:	83 ec 0c             	sub    esp,0xc
c000ad42:	68 b4 18 02 c0       	push   0xc00218b4
c000ad47:	e8 c7 69 00 00       	call   c0011713 <KePanic(char const*)>
c000ad4c:	83 c4 10             	add    esp,0x10
c000ad4f:	90                   	nop
c000ad50:	83 c4 0c             	add    esp,0xc
c000ad53:	c3                   	ret    

c000ad54 <__ubsan_handle_negate_overflow>:
c000ad54:	83 ec 0c             	sub    esp,0xc
c000ad57:	83 ec 08             	sub    esp,0x8
c000ad5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad5e:	68 d8 18 02 c0       	push   0xc00218d8
c000ad63:	e8 44 fd ff ff       	call   c000aaac <KiUbsanPrintDetails(char const*, void*)>
c000ad68:	83 c4 10             	add    esp,0x10
c000ad6b:	83 ec 0c             	sub    esp,0xc
c000ad6e:	68 d8 18 02 c0       	push   0xc00218d8
c000ad73:	e8 9b 69 00 00       	call   c0011713 <KePanic(char const*)>
c000ad78:	83 c4 10             	add    esp,0x10
c000ad7b:	90                   	nop
c000ad7c:	83 c4 0c             	add    esp,0xc
c000ad7f:	c3                   	ret    

c000ad80 <KiIsHashInTable(unsigned short)>:
c000ad80:	0f b7 d0             	movzx  edx,ax
c000ad83:	83 e0 07             	and    eax,0x7
c000ad86:	c1 fa 03             	sar    edx,0x3
c000ad89:	88 c1                	mov    cl,al
c000ad8b:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad92:	d3 fa                	sar    edx,cl
c000ad94:	89 d0                	mov    eax,edx
c000ad96:	83 e0 01             	and    eax,0x1
c000ad99:	c3                   	ret    

c000ad9a <KiSetHashInTable(unsigned short, bool)>:
c000ad9a:	56                   	push   esi
c000ad9b:	53                   	push   ebx
c000ad9c:	0f b7 d8             	movzx  ebx,ax
c000ad9f:	83 e0 07             	and    eax,0x7
c000ada2:	c1 fb 03             	sar    ebx,0x3
c000ada5:	89 c1                	mov    ecx,eax
c000ada7:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000adae:	b8 01 00 00 00       	mov    eax,0x1
c000adb3:	d3 e0                	shl    eax,cl
c000adb5:	84 d2                	test   dl,dl
c000adb7:	74 04                	je     c000adbd <KiSetHashInTable(unsigned short, bool)+0x23>
c000adb9:	09 f0                	or     eax,esi
c000adbb:	eb 04                	jmp    c000adc1 <KiSetHashInTable(unsigned short, bool)+0x27>
c000adbd:	f7 d0                	not    eax
c000adbf:	21 f0                	and    eax,esi
c000adc1:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000adc7:	5b                   	pop    ebx
c000adc8:	5e                   	pop    esi
c000adc9:	c3                   	ret    

c000adca <KiFlushSymlinkChanges()>:
c000adca:	57                   	push   edi
c000adcb:	56                   	push   esi
c000adcc:	53                   	push   ebx
c000adcd:	83 ec 1c             	sub    esp,0x1c
c000add0:	68 14 01 00 00       	push   0x114
c000add5:	e8 0c cd ff ff       	call   c0007ae6 <malloc>
c000adda:	83 c4 0c             	add    esp,0xc
c000addd:	89 c3                	mov    ebx,eax
c000addf:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000ade5:	68 f7 18 02 c0       	push   0xc00218f7
c000adea:	50                   	push   eax
c000adeb:	e8 8c 0d 00 00       	call   c000bb7c <File::File(char const*, Process*)>
c000adf0:	83 c4 10             	add    esp,0x10
c000adf3:	85 db                	test   ebx,ebx
c000adf5:	75 10                	jne    c000ae07 <KiFlushSymlinkChanges()+0x3d>
c000adf7:	83 ec 0c             	sub    esp,0xc
c000adfa:	68 15 19 02 c0       	push   0xc0021915
c000adff:	e8 0f 69 00 00       	call   c0011713 <KePanic(char const*)>
c000ae04:	83 c4 10             	add    esp,0x10
c000ae07:	50                   	push   eax
c000ae08:	50                   	push   eax
c000ae09:	6a 06                	push   0x6
c000ae0b:	53                   	push   ebx
c000ae0c:	e8 89 0d 00 00       	call   c000bb9a <File::open(FileOpenMode)>
c000ae11:	83 c4 10             	add    esp,0x10
c000ae14:	85 c0                	test   eax,eax
c000ae16:	74 10                	je     c000ae28 <KiFlushSymlinkChanges()+0x5e>
c000ae18:	83 ec 0c             	sub    esp,0xc
c000ae1b:	68 2f 19 02 c0       	push   0xc002192f
c000ae20:	e8 ee 68 00 00       	call   c0011713 <KePanic(char const*)>
c000ae25:	83 c4 10             	add    esp,0x10
c000ae28:	31 f6                	xor    esi,esi
c000ae2a:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ae30:	7e 70                	jle    c000aea2 <KiFlushSymlinkChanges()+0xd8>
c000ae32:	83 ec 0c             	sub    esp,0xc
c000ae35:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae37:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae3b:	89 f0                	mov    eax,esi
c000ae3d:	57                   	push   edi
c000ae3e:	c1 e0 08             	shl    eax,0x8
c000ae41:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae46:	50                   	push   eax
c000ae47:	6a 00                	push   0x0
c000ae49:	68 00 01 00 00       	push   0x100
c000ae4e:	53                   	push   ebx
c000ae4f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae52:	83 c4 20             	add    esp,0x20
c000ae55:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae5d:	74 10                	je     c000ae6f <KiFlushSymlinkChanges()+0xa5>
c000ae5f:	83 ec 0c             	sub    esp,0xc
c000ae62:	68 49 19 02 c0       	push   0xc0021949
c000ae67:	e8 a7 68 00 00       	call   c0011713 <KePanic(char const*)>
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	83 ec 0c             	sub    esp,0xc
c000ae72:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae74:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae7b:	57                   	push   edi
c000ae7c:	52                   	push   edx
c000ae7d:	6a 00                	push   0x0
c000ae7f:	6a 08                	push   0x8
c000ae81:	53                   	push   ebx
c000ae82:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae85:	83 c4 20             	add    esp,0x20
c000ae88:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae8d:	74 10                	je     c000ae9f <KiFlushSymlinkChanges()+0xd5>
c000ae8f:	83 ec 0c             	sub    esp,0xc
c000ae92:	68 63 19 02 c0       	push   0xc0021963
c000ae97:	e8 77 68 00 00       	call   c0011713 <KePanic(char const*)>
c000ae9c:	83 c4 10             	add    esp,0x10
c000ae9f:	46                   	inc    esi
c000aea0:	eb 88                	jmp    c000ae2a <KiFlushSymlinkChanges()+0x60>
c000aea2:	83 ec 0c             	sub    esp,0xc
c000aea5:	53                   	push   ebx
c000aea6:	e8 4d 0d 00 00       	call   c000bbf8 <File::close()>
c000aeab:	83 c4 10             	add    esp,0x10
c000aeae:	85 db                	test   ebx,ebx
c000aeb0:	74 0c                	je     c000aebe <KiFlushSymlinkChanges()+0xf4>
c000aeb2:	83 ec 0c             	sub    esp,0xc
c000aeb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aeb7:	53                   	push   ebx
c000aeb8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000aec8:	83 c4 10             	add    esp,0x10
c000aecb:	5b                   	pop    ebx
c000aecc:	5e                   	pop    esi
c000aecd:	5f                   	pop    edi
c000aece:	c3                   	ret    

c000aecf <KiDeinitialiseSymlinks(void*)>:
c000aecf:	e9 f6 fe ff ff       	jmp    c000adca <KiFlushSymlinkChanges()>

c000aed4 <KiGetSymlinkHash(char const*)>:
c000aed4:	53                   	push   ebx
c000aed5:	89 c3                	mov    ebx,eax
c000aed7:	83 ec 14             	sub    esp,0x14
c000aeda:	50                   	push   eax
c000aedb:	e8 90 56 ff ff       	call   c0000570 <strlen>
c000aee0:	5a                   	pop    edx
c000aee1:	59                   	pop    ecx
c000aee2:	50                   	push   eax
c000aee3:	53                   	push   ebx
c000aee4:	e8 ac 61 00 00       	call   c0011095 <KeCalculateCRC32(unsigned char*, int)>
c000aee9:	83 c4 18             	add    esp,0x18
c000aeec:	89 c2                	mov    edx,eax
c000aeee:	5b                   	pop    ebx
c000aeef:	c1 ea 10             	shr    edx,0x10
c000aef2:	31 d0                	xor    eax,edx
c000aef4:	c3                   	ret    

c000aef5 <KiCreateSymlinkID()>:
c000aef5:	55                   	push   ebp
c000aef6:	57                   	push   edi
c000aef7:	56                   	push   esi
c000aef8:	53                   	push   ebx
c000aef9:	31 db                	xor    ebx,ebx
c000aefb:	83 ec 1c             	sub    esp,0x1c
c000aefe:	e8 5e 69 00 00       	call   c0011861 <KeRand()>
c000af03:	43                   	inc    ebx
c000af04:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000af0a:	31 d2                	xor    edx,edx
c000af0c:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000af0f:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000af13:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000af19:	c1 e0 1f             	shl    eax,0x1f
c000af1c:	89 d7                	mov    edi,edx
c000af1e:	89 c6                	mov    esi,eax
c000af20:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000af24:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000af2c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af32:	75 10                	jne    c000af44 <KiCreateSymlinkID()+0x4f>
c000af34:	83 ec 0c             	sub    esp,0xc
c000af37:	68 7d 19 02 c0       	push   0xc002197d
c000af3c:	e8 d2 67 00 00       	call   c0011713 <KePanic(char const*)>
c000af41:	83 c4 10             	add    esp,0x10
c000af44:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000af48:	75 04                	jne    c000af4e <KiCreateSymlinkID()+0x59>
c000af4a:	39 f5                	cmp    ebp,esi
c000af4c:	74 b0                	je     c000aefe <KiCreateSymlinkID()+0x9>
c000af4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af56:	31 f0                	xor    eax,esi
c000af58:	83 c4 1c             	add    esp,0x1c
c000af5b:	31 fa                	xor    edx,edi
c000af5d:	5b                   	pop    ebx
c000af5e:	5e                   	pop    esi
c000af5f:	5f                   	pop    edi
c000af60:	5d                   	pop    ebp
c000af61:	c3                   	ret    

c000af62 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af62:	53                   	push   ebx
c000af63:	83 ec 0c             	sub    esp,0xc
c000af66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af6a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af6e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af72:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af77:	68 00 01 00 00       	push   0x100
c000af7c:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af83:	6a 00                	push   0x0
c000af85:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af8c:	c1 e0 08             	shl    eax,0x8
c000af8f:	05 00 70 02 c0       	add    eax,0xc0027000
c000af94:	50                   	push   eax
c000af95:	e8 56 55 ff ff       	call   c00004f0 <memset>
c000af9a:	58                   	pop    eax
c000af9b:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afa0:	5a                   	pop    edx
c000afa1:	c1 e0 08             	shl    eax,0x8
c000afa4:	53                   	push   ebx
c000afa5:	05 00 70 02 c0       	add    eax,0xc0027000
c000afaa:	50                   	push   eax
c000afab:	e8 90 56 ff ff       	call   c0000640 <strcpy>
c000afb0:	89 d8                	mov    eax,ebx
c000afb2:	e8 1d ff ff ff       	call   c000aed4 <KiGetSymlinkHash(char const*)>
c000afb7:	59                   	pop    ecx
c000afb8:	0f b7 d8             	movzx  ebx,ax
c000afbb:	58                   	pop    eax
c000afbc:	53                   	push   ebx
c000afbd:	68 86 19 02 c0       	push   0xc0021986
c000afc2:	e8 ae f9 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000afc7:	89 d8                	mov    eax,ebx
c000afc9:	ba 01 00 00 00       	mov    edx,0x1
c000afce:	e8 c7 fd ff ff       	call   c000ad9a <KiSetHashInTable(unsigned short, bool)>
c000afd3:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afd8:	83 c4 10             	add    esp,0x10
c000afdb:	40                   	inc    eax
c000afdc:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afe1:	83 f8 03             	cmp    eax,0x3
c000afe4:	7e 09                	jle    c000afef <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c000afe6:	83 c4 08             	add    esp,0x8
c000afe9:	5b                   	pop    ebx
c000afea:	e9 db fd ff ff       	jmp    c000adca <KiFlushSymlinkChanges()>
c000afef:	83 c4 08             	add    esp,0x8
c000aff2:	5b                   	pop    ebx
c000aff3:	c3                   	ret    

c000aff4 <KeInitialiseSymlinks()>:
c000aff4:	57                   	push   edi
c000aff5:	56                   	push   esi
c000aff6:	53                   	push   ebx
c000aff7:	81 ec 14 01 00 00    	sub    esp,0x114
c000affd:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000b007:	68 00 20 00 00       	push   0x2000
c000b00c:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b016:	6a 00                	push   0x0
c000b018:	68 00 74 02 c0       	push   0xc0027400
c000b01d:	e8 ce 54 ff ff       	call   c00004f0 <memset>
c000b022:	59                   	pop    ecx
c000b023:	5b                   	pop    ebx
c000b024:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000b02a:	68 9a 19 02 c0       	push   0xc002199a
c000b02f:	e8 41 f9 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000b034:	5e                   	pop    esi
c000b035:	5f                   	pop    edi
c000b036:	6a 00                	push   0x0
c000b038:	68 cf ae 00 c0       	push   0xc000aecf
c000b03d:	e8 be 5e 00 00       	call   c0010f00 <KeRegisterAtexit(void (*)(void*), void*)>
c000b042:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b049:	e8 98 ca ff ff       	call   c0007ae6 <malloc>
c000b04e:	83 c4 0c             	add    esp,0xc
c000b051:	89 c3                	mov    ebx,eax
c000b053:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b059:	68 f7 18 02 c0       	push   0xc00218f7
c000b05e:	50                   	push   eax
c000b05f:	e8 18 0b 00 00       	call   c000bb7c <File::File(char const*, Process*)>
c000b064:	83 c4 10             	add    esp,0x10
c000b067:	85 db                	test   ebx,ebx
c000b069:	75 10                	jne    c000b07b <KeInitialiseSymlinks()+0x87>
c000b06b:	83 ec 0c             	sub    esp,0xc
c000b06e:	68 b7 19 02 c0       	push   0xc00219b7
c000b073:	e8 9b 66 00 00       	call   c0011713 <KePanic(char const*)>
c000b078:	83 c4 10             	add    esp,0x10
c000b07b:	83 ec 0c             	sub    esp,0xc
c000b07e:	53                   	push   ebx
c000b07f:	e8 da 0d 00 00       	call   c000be5e <File::exists()>
c000b084:	83 c4 10             	add    esp,0x10
c000b087:	84 c0                	test   al,al
c000b089:	75 3a                	jne    c000b0c5 <KeInitialiseSymlinks()+0xd1>
c000b08b:	52                   	push   edx
c000b08c:	52                   	push   edx
c000b08d:	6a 12                	push   0x12
c000b08f:	53                   	push   ebx
c000b090:	e8 05 0b 00 00       	call   c000bb9a <File::open(FileOpenMode)>
c000b095:	83 c4 10             	add    esp,0x10
c000b098:	85 c0                	test   eax,eax
c000b09a:	74 10                	je     c000b0ac <KeInitialiseSymlinks()+0xb8>
c000b09c:	83 ec 0c             	sub    esp,0xc
c000b09f:	68 d4 19 02 c0       	push   0xc00219d4
c000b0a4:	e8 6a 66 00 00       	call   c0011713 <KePanic(char const*)>
c000b0a9:	83 c4 10             	add    esp,0x10
c000b0ac:	83 ec 0c             	sub    esp,0xc
c000b0af:	53                   	push   ebx
c000b0b0:	e8 43 0b 00 00       	call   c000bbf8 <File::close()>
c000b0b5:	83 c4 10             	add    esp,0x10
c000b0b8:	85 db                	test   ebx,ebx
c000b0ba:	0f 84 9e 00 00 00    	je     c000b15e <KeInitialiseSymlinks()+0x16a>
c000b0c0:	e9 8d 00 00 00       	jmp    c000b152 <KeInitialiseSymlinks()+0x15e>
c000b0c5:	50                   	push   eax
c000b0c6:	50                   	push   eax
c000b0c7:	6a 01                	push   0x1
c000b0c9:	53                   	push   ebx
c000b0ca:	e8 cb 0a 00 00       	call   c000bb9a <File::open(FileOpenMode)>
c000b0cf:	83 c4 10             	add    esp,0x10
c000b0d2:	85 c0                	test   eax,eax
c000b0d4:	74 10                	je     c000b0e6 <KeInitialiseSymlinks()+0xf2>
c000b0d6:	83 ec 0c             	sub    esp,0xc
c000b0d9:	68 f1 19 02 c0       	push   0xc00219f1
c000b0de:	e8 30 66 00 00       	call   c0011713 <KePanic(char const*)>
c000b0e3:	83 c4 10             	add    esp,0x10
c000b0e6:	83 ec 0c             	sub    esp,0xc
c000b0e9:	ff 05 00 94 02 c0    	inc    DWORD PTR ds:0xc0029400
c000b0ef:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b0f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0f5:	57                   	push   edi
c000b0f6:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b0fa:	56                   	push   esi
c000b0fb:	6a 00                	push   0x0
c000b0fd:	68 00 01 00 00       	push   0x100
c000b102:	53                   	push   ebx
c000b103:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b106:	83 c4 20             	add    esp,0x20
c000b109:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b111:	75 33                	jne    c000b146 <KeInitialiseSymlinks()+0x152>
c000b113:	83 ec 0c             	sub    esp,0xc
c000b116:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b118:	57                   	push   edi
c000b119:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b11d:	52                   	push   edx
c000b11e:	6a 00                	push   0x0
c000b120:	6a 08                	push   0x8
c000b122:	53                   	push   ebx
c000b123:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b126:	83 c4 20             	add    esp,0x20
c000b129:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b12e:	75 16                	jne    c000b146 <KeInitialiseSymlinks()+0x152>
c000b130:	89 f0                	mov    eax,esi
c000b132:	e8 9d fd ff ff       	call   c000aed4 <KiGetSymlinkHash(char const*)>
c000b137:	ba 01 00 00 00       	mov    edx,0x1
c000b13c:	0f b7 c0             	movzx  eax,ax
c000b13f:	e8 56 fc ff ff       	call   c000ad9a <KiSetHashInTable(unsigned short, bool)>
c000b144:	eb a0                	jmp    c000b0e6 <KeInitialiseSymlinks()+0xf2>
c000b146:	83 ec 0c             	sub    esp,0xc
c000b149:	53                   	push   ebx
c000b14a:	e8 a9 0a 00 00       	call   c000bbf8 <File::close()>
c000b14f:	83 c4 10             	add    esp,0x10
c000b152:	83 ec 0c             	sub    esp,0xc
c000b155:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b157:	53                   	push   ebx
c000b158:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b15b:	83 c4 10             	add    esp,0x10
c000b15e:	81 c4 10 01 00 00    	add    esp,0x110
c000b164:	5b                   	pop    ebx
c000b165:	5e                   	pop    esi
c000b166:	5f                   	pop    edi
c000b167:	c3                   	ret    

c000b168 <KiIsSymlinkRegistered(char const*)>:
c000b168:	55                   	push   ebp
c000b169:	57                   	push   edi
c000b16a:	56                   	push   esi
c000b16b:	53                   	push   ebx
c000b16c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000b172:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b179:	89 f0                	mov    eax,esi
c000b17b:	e8 54 fd ff ff       	call   c000aed4 <KiGetSymlinkHash(char const*)>
c000b180:	0f b7 c0             	movzx  eax,ax
c000b183:	53                   	push   ebx
c000b184:	56                   	push   esi
c000b185:	50                   	push   eax
c000b186:	68 0c 1a 02 c0       	push   0xc0021a0c
c000b18b:	e8 e5 f7 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000b190:	89 f0                	mov    eax,esi
c000b192:	e8 3d fd ff ff       	call   c000aed4 <KiGetSymlinkHash(char const*)>
c000b197:	0f b7 c0             	movzx  eax,ax
c000b19a:	e8 e1 fb ff ff       	call   c000ad80 <KiIsHashInTable(unsigned short)>
c000b19f:	83 c4 10             	add    esp,0x10
c000b1a2:	88 c1                	mov    cl,al
c000b1a4:	31 d2                	xor    edx,edx
c000b1a6:	31 c0                	xor    eax,eax
c000b1a8:	84 c9                	test   cl,cl
c000b1aa:	0f 84 31 01 00 00    	je     c000b2e1 <KiIsSymlinkRegistered(char const*)+0x179>
c000b1b0:	31 db                	xor    ebx,ebx
c000b1b2:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b1b8:	7e 30                	jle    c000b1ea <KiIsSymlinkRegistered(char const*)+0x82>
c000b1ba:	89 d8                	mov    eax,ebx
c000b1bc:	51                   	push   ecx
c000b1bd:	c1 e0 08             	shl    eax,0x8
c000b1c0:	51                   	push   ecx
c000b1c1:	05 00 70 02 c0       	add    eax,0xc0027000
c000b1c6:	50                   	push   eax
c000b1c7:	56                   	push   esi
c000b1c8:	e8 83 55 ff ff       	call   c0000750 <strcmp>
c000b1cd:	83 c4 10             	add    esp,0x10
c000b1d0:	85 c0                	test   eax,eax
c000b1d2:	75 13                	jne    c000b1e7 <KiIsSymlinkRegistered(char const*)+0x7f>
c000b1d4:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b1db:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b1e2:	e9 fa 00 00 00       	jmp    c000b2e1 <KiIsSymlinkRegistered(char const*)+0x179>
c000b1e7:	43                   	inc    ebx
c000b1e8:	eb c8                	jmp    c000b1b2 <KiIsSymlinkRegistered(char const*)+0x4a>
c000b1ea:	83 ec 0c             	sub    esp,0xc
c000b1ed:	68 14 01 00 00       	push   0x114
c000b1f2:	e8 ef c8 ff ff       	call   c0007ae6 <malloc>
c000b1f7:	83 c4 0c             	add    esp,0xc
c000b1fa:	89 c3                	mov    ebx,eax
c000b1fc:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b202:	68 f7 18 02 c0       	push   0xc00218f7
c000b207:	50                   	push   eax
c000b208:	e8 6f 09 00 00       	call   c000bb7c <File::File(char const*, Process*)>
c000b20d:	83 c4 10             	add    esp,0x10
c000b210:	85 db                	test   ebx,ebx
c000b212:	75 12                	jne    c000b226 <KiIsSymlinkRegistered(char const*)+0xbe>
c000b214:	83 ec 0c             	sub    esp,0xc
c000b217:	68 21 1a 02 c0       	push   0xc0021a21
c000b21c:	e8 f2 64 00 00       	call   c0011713 <KePanic(char const*)>
c000b221:	83 c4 10             	add    esp,0x10
c000b224:	eb 10                	jmp    c000b236 <KiIsSymlinkRegistered(char const*)+0xce>
c000b226:	83 ec 0c             	sub    esp,0xc
c000b229:	53                   	push   ebx
c000b22a:	e8 2f 0c 00 00       	call   c000be5e <File::exists()>
c000b22f:	83 c4 10             	add    esp,0x10
c000b232:	84 c0                	test   al,al
c000b234:	74 de                	je     c000b214 <KiIsSymlinkRegistered(char const*)+0xac>
c000b236:	52                   	push   edx
c000b237:	52                   	push   edx
c000b238:	6a 01                	push   0x1
c000b23a:	53                   	push   ebx
c000b23b:	e8 5a 09 00 00       	call   c000bb9a <File::open(FileOpenMode)>
c000b240:	83 c4 10             	add    esp,0x10
c000b243:	85 c0                	test   eax,eax
c000b245:	74 10                	je     c000b257 <KiIsSymlinkRegistered(char const*)+0xef>
c000b247:	83 ec 0c             	sub    esp,0xc
c000b24a:	68 3c 1a 02 c0       	push   0xc0021a3c
c000b24f:	e8 bf 64 00 00       	call   c0011713 <KePanic(char const*)>
c000b254:	83 c4 10             	add    esp,0x10
c000b257:	83 ec 0c             	sub    esp,0xc
c000b25a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b25c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b260:	55                   	push   ebp
c000b261:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b265:	57                   	push   edi
c000b266:	6a 00                	push   0x0
c000b268:	68 00 01 00 00       	push   0x100
c000b26d:	53                   	push   ebx
c000b26e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b271:	83 c4 20             	add    esp,0x20
c000b274:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b27c:	75 4b                	jne    c000b2c9 <KiIsSymlinkRegistered(char const*)+0x161>
c000b27e:	83 ec 0c             	sub    esp,0xc
c000b281:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b283:	55                   	push   ebp
c000b284:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b288:	52                   	push   edx
c000b289:	6a 00                	push   0x0
c000b28b:	6a 08                	push   0x8
c000b28d:	53                   	push   ebx
c000b28e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b291:	83 c4 20             	add    esp,0x20
c000b294:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b299:	75 2e                	jne    c000b2c9 <KiIsSymlinkRegistered(char const*)+0x161>
c000b29b:	50                   	push   eax
c000b29c:	50                   	push   eax
c000b29d:	57                   	push   edi
c000b29e:	56                   	push   esi
c000b29f:	e8 ac 54 ff ff       	call   c0000750 <strcmp>
c000b2a4:	83 c4 10             	add    esp,0x10
c000b2a7:	85 c0                	test   eax,eax
c000b2a9:	75 ac                	jne    c000b257 <KiIsSymlinkRegistered(char const*)+0xef>
c000b2ab:	83 ec 0c             	sub    esp,0xc
c000b2ae:	53                   	push   ebx
c000b2af:	e8 44 09 00 00       	call   c000bbf8 <File::close()>
c000b2b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b2c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b2c4:	83 c4 10             	add    esp,0x10
c000b2c7:	eb 18                	jmp    c000b2e1 <KiIsSymlinkRegistered(char const*)+0x179>
c000b2c9:	83 ec 0c             	sub    esp,0xc
c000b2cc:	53                   	push   ebx
c000b2cd:	e8 26 09 00 00       	call   c000bbf8 <File::close()>
c000b2d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2da:	83 c4 10             	add    esp,0x10
c000b2dd:	31 c0                	xor    eax,eax
c000b2df:	31 d2                	xor    edx,edx
c000b2e1:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b2e7:	5b                   	pop    ebx
c000b2e8:	5e                   	pop    esi
c000b2e9:	5f                   	pop    edi
c000b2ea:	5d                   	pop    ebp
c000b2eb:	c3                   	ret    

c000b2ec <KeDereferenceSymlink(char const*, char*)>:
c000b2ec:	55                   	push   ebp
c000b2ed:	57                   	push   edi
c000b2ee:	56                   	push   esi
c000b2ef:	53                   	push   ebx
c000b2f0:	83 ec 48             	sub    esp,0x48
c000b2f3:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b2f7:	56                   	push   esi
c000b2f8:	e8 6b fe ff ff       	call   c000b168 <KiIsSymlinkRegistered(char const*)>
c000b2fd:	83 c4 10             	add    esp,0x10
c000b300:	89 c7                	mov    edi,eax
c000b302:	89 d0                	mov    eax,edx
c000b304:	09 f8                	or     eax,edi
c000b306:	75 07                	jne    c000b30f <KeDereferenceSymlink(char const*, char*)+0x23>
c000b308:	31 c0                	xor    eax,eax
c000b30a:	e9 7c 01 00 00       	jmp    c000b48b <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b30f:	83 ec 0c             	sub    esp,0xc
c000b312:	89 d5                	mov    ebp,edx
c000b314:	68 14 01 00 00       	push   0x114
c000b319:	e8 c8 c7 ff ff       	call   c0007ae6 <malloc>
c000b31e:	83 c4 0c             	add    esp,0xc
c000b321:	89 c3                	mov    ebx,eax
c000b323:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b329:	56                   	push   esi
c000b32a:	50                   	push   eax
c000b32b:	e8 4c 08 00 00       	call   c000bb7c <File::File(char const*, Process*)>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	85 db                	test   ebx,ebx
c000b335:	0f 84 32 01 00 00    	je     c000b46d <KeDereferenceSymlink(char const*, char*)+0x181>
c000b33b:	56                   	push   esi
c000b33c:	56                   	push   esi
c000b33d:	6a 01                	push   0x1
c000b33f:	53                   	push   ebx
c000b340:	e8 55 08 00 00       	call   c000bb9a <File::open(FileOpenMode)>
c000b345:	83 c4 10             	add    esp,0x10
c000b348:	85 c0                	test   eax,eax
c000b34a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b34c:	74 09                	je     c000b357 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b34e:	83 ec 0c             	sub    esp,0xc
c000b351:	53                   	push   ebx
c000b352:	e9 10 01 00 00       	jmp    c000b467 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b357:	83 ec 0c             	sub    esp,0xc
c000b35a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b35e:	56                   	push   esi
c000b35f:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b363:	52                   	push   edx
c000b364:	6a 00                	push   0x0
c000b366:	6a 08                	push   0x8
c000b368:	53                   	push   ebx
c000b369:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b36c:	83 c4 20             	add    esp,0x20
c000b36f:	85 c0                	test   eax,eax
c000b371:	0f 85 e2 00 00 00    	jne    c000b459 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b377:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b37c:	0f 85 d7 00 00 00    	jne    c000b459 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b382:	83 ec 0c             	sub    esp,0xc
c000b385:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b387:	56                   	push   esi
c000b388:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b38c:	52                   	push   edx
c000b38d:	6a 00                	push   0x0
c000b38f:	6a 08                	push   0x8
c000b391:	53                   	push   ebx
c000b392:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b395:	83 c4 20             	add    esp,0x20
c000b398:	85 c0                	test   eax,eax
c000b39a:	0f 85 b9 00 00 00    	jne    c000b459 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3a0:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b3a5:	0f 85 ae 00 00 00    	jne    c000b459 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3ab:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b3af:	0f 85 53 ff ff ff    	jne    c000b308 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b3b5:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b3b9:	0f 85 49 ff ff ff    	jne    c000b308 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b3bf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b3c7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b3cf:	51                   	push   ecx
c000b3d0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b3d4:	50                   	push   eax
c000b3d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b3d9:	50                   	push   eax
c000b3da:	53                   	push   ebx
c000b3db:	e8 bc 0a 00 00       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b3e8:	75 6f                	jne    c000b459 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3ea:	31 c9                	xor    ecx,ecx
c000b3ec:	bf 0f 00 00 00       	mov    edi,0xf
c000b3f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b3f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b3f9:	39 c7                	cmp    edi,eax
c000b3fb:	89 cf                	mov    edi,ecx
c000b3fd:	19 d7                	sbb    edi,edx
c000b3ff:	73 58                	jae    c000b459 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b401:	83 c0 f0             	add    eax,0xfffffff0
c000b404:	bf ff 00 00 00       	mov    edi,0xff
c000b409:	83 d2 ff             	adc    edx,0xffffffff
c000b40c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b410:	39 c7                	cmp    edi,eax
c000b412:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b416:	19 d1                	sbb    ecx,edx
c000b418:	72 53                	jb     c000b46d <KeDereferenceSymlink(char const*, char*)+0x181>
c000b41a:	40                   	inc    eax
c000b41b:	52                   	push   edx
c000b41c:	50                   	push   eax
c000b41d:	6a 00                	push   0x0
c000b41f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b423:	e8 c8 50 ff ff       	call   c00004f0 <memset>
c000b428:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b42a:	89 34 24             	mov    DWORD PTR [esp],esi
c000b42d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b431:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b435:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b439:	53                   	push   ebx
c000b43a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b43d:	83 c4 20             	add    esp,0x20
c000b440:	85 c0                	test   eax,eax
c000b442:	75 15                	jne    c000b459 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b444:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b448:	89 c7                	mov    edi,eax
c000b44a:	c1 ff 1f             	sar    edi,0x1f
c000b44d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b451:	75 06                	jne    c000b459 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b453:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b457:	74 19                	je     c000b472 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b459:	83 ec 0c             	sub    esp,0xc
c000b45c:	53                   	push   ebx
c000b45d:	e8 96 07 00 00       	call   c000bbf8 <File::close()>
c000b462:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b464:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b467:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b46a:	83 c4 10             	add    esp,0x10
c000b46d:	83 c8 ff             	or     eax,0xffffffff
c000b470:	eb 19                	jmp    c000b48b <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b472:	83 ec 0c             	sub    esp,0xc
c000b475:	53                   	push   ebx
c000b476:	e8 7d 07 00 00       	call   c000bbf8 <File::close()>
c000b47b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b47d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b480:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b483:	83 c4 10             	add    esp,0x10
c000b486:	b8 01 00 00 00       	mov    eax,0x1
c000b48b:	83 c4 3c             	add    esp,0x3c
c000b48e:	5b                   	pop    ebx
c000b48f:	5e                   	pop    esi
c000b490:	5f                   	pop    edi
c000b491:	5d                   	pop    ebp
c000b492:	c3                   	ret    

c000b493 <KeCreateSymlink(char const*, char const*)>:
c000b493:	55                   	push   ebp
c000b494:	57                   	push   edi
c000b495:	56                   	push   esi
c000b496:	53                   	push   ebx
c000b497:	83 ec 38             	sub    esp,0x38
c000b49a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b49e:	68 14 01 00 00       	push   0x114
c000b4a3:	e8 3e c6 ff ff       	call   c0007ae6 <malloc>
c000b4a8:	6a 00                	push   0x0
c000b4aa:	89 c3                	mov    ebx,eax
c000b4ac:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b4b2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b4b6:	50                   	push   eax
c000b4b7:	e8 e2 05 00 00       	call   c000ba9e <File::File(char const*, Process*, bool)>
c000b4bc:	83 c4 20             	add    esp,0x20
c000b4bf:	b8 01 00 00 00       	mov    eax,0x1
c000b4c4:	85 db                	test   ebx,ebx
c000b4c6:	0f 84 19 01 00 00    	je     c000b5e5 <KeCreateSymlink(char const*, char const*)+0x152>
c000b4cc:	52                   	push   edx
c000b4cd:	52                   	push   edx
c000b4ce:	6a 12                	push   0x12
c000b4d0:	53                   	push   ebx
c000b4d1:	e8 c4 06 00 00       	call   c000bb9a <File::open(FileOpenMode)>
c000b4d6:	83 c4 10             	add    esp,0x10
c000b4d9:	85 c0                	test   eax,eax
c000b4db:	74 0b                	je     c000b4e8 <KeCreateSymlink(char const*, char const*)+0x55>
c000b4dd:	83 ec 0c             	sub    esp,0xc
c000b4e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4e2:	53                   	push   ebx
c000b4e3:	e9 f2 00 00 00       	jmp    c000b5da <KeCreateSymlink(char const*, char const*)+0x147>
c000b4e8:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b4ec:	be 89 1a 02 c0       	mov    esi,0xc0021a89
c000b4f1:	b9 09 00 00 00       	mov    ecx,0x9
c000b4f6:	fc                   	cld    
c000b4f7:	83 ec 0c             	sub    esp,0xc
c000b4fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b4fc:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b500:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b502:	56                   	push   esi
c000b503:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b507:	52                   	push   edx
c000b508:	6a 00                	push   0x0
c000b50a:	6a 08                	push   0x8
c000b50c:	53                   	push   ebx
c000b50d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b510:	83 c4 20             	add    esp,0x20
c000b513:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b518:	0f 85 ae 00 00 00    	jne    c000b5cc <KeCreateSymlink(char const*, char const*)+0x139>
c000b51e:	85 c0                	test   eax,eax
c000b520:	0f 85 a6 00 00 00    	jne    c000b5cc <KeCreateSymlink(char const*, char const*)+0x139>
c000b526:	e8 ca f9 ff ff       	call   c000aef5 <KiCreateSymlinkID()>
c000b52b:	83 ec 0c             	sub    esp,0xc
c000b52e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b532:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b536:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b538:	56                   	push   esi
c000b539:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b53d:	52                   	push   edx
c000b53e:	6a 00                	push   0x0
c000b540:	6a 08                	push   0x8
c000b542:	53                   	push   ebx
c000b543:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b546:	83 c4 20             	add    esp,0x20
c000b549:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b54e:	75 7c                	jne    c000b5cc <KeCreateSymlink(char const*, char const*)+0x139>
c000b550:	85 c0                	test   eax,eax
c000b552:	75 78                	jne    c000b5cc <KeCreateSymlink(char const*, char const*)+0x139>
c000b554:	83 ec 0c             	sub    esp,0xc
c000b557:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b559:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b55c:	55                   	push   ebp
c000b55d:	e8 0e 50 ff ff       	call   c0000570 <strlen>
c000b562:	89 34 24             	mov    DWORD PTR [esp],esi
c000b565:	31 d2                	xor    edx,edx
c000b567:	55                   	push   ebp
c000b568:	52                   	push   edx
c000b569:	50                   	push   eax
c000b56a:	53                   	push   ebx
c000b56b:	ff d7                	call   edi
c000b56d:	83 c4 14             	add    esp,0x14
c000b570:	89 c6                	mov    esi,eax
c000b572:	55                   	push   ebp
c000b573:	e8 f8 4f ff ff       	call   c0000570 <strlen>
c000b578:	83 c4 10             	add    esp,0x10
c000b57b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b57f:	75 4b                	jne    c000b5cc <KeCreateSymlink(char const*, char const*)+0x139>
c000b581:	85 f6                	test   esi,esi
c000b583:	75 47                	jne    c000b5cc <KeCreateSymlink(char const*, char const*)+0x139>
c000b585:	50                   	push   eax
c000b586:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b58a:	55                   	push   ebp
c000b58b:	68 57 1a 02 c0       	push   0xc0021a57
c000b590:	e8 e0 f3 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000b595:	83 c4 0c             	add    esp,0xc
c000b598:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b59c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b5a0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b5a4:	e8 b9 f9 ff ff       	call   c000af62 <KeRegisterSymlink(char const*, unsigned long long)>
c000b5a9:	c7 04 24 7c 1a 02 c0 	mov    DWORD PTR [esp],0xc0021a7c
c000b5b0:	e8 c0 f3 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000b5b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5b8:	e8 3b 06 00 00       	call   c000bbf8 <File::close()>
c000b5bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5c5:	83 c4 10             	add    esp,0x10
c000b5c8:	31 c0                	xor    eax,eax
c000b5ca:	eb 19                	jmp    c000b5e5 <KeCreateSymlink(char const*, char const*)+0x152>
c000b5cc:	83 ec 0c             	sub    esp,0xc
c000b5cf:	53                   	push   ebx
c000b5d0:	e8 23 06 00 00       	call   c000bbf8 <File::close()>
c000b5d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5dd:	83 c4 10             	add    esp,0x10
c000b5e0:	b8 01 00 00 00       	mov    eax,0x1
c000b5e5:	83 c4 2c             	add    esp,0x2c
c000b5e8:	5b                   	pop    ebx
c000b5e9:	5e                   	pop    esi
c000b5ea:	5f                   	pop    edi
c000b5eb:	5d                   	pop    ebp
c000b5ec:	c3                   	ret    
c000b5ed:	90                   	nop

c000b5ee <File::read(unsigned long long, void*, int*)>:
c000b5ee:	53                   	push   ebx
c000b5ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5f7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5fe:	83 f8 19             	cmp    eax,0x19
c000b601:	77 35                	ja     c000b638 <File::read(unsigned long long, void*, int*)+0x4a>
c000b603:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b60a:	85 c0                	test   eax,eax
c000b60c:	74 2a                	je     c000b638 <File::read(unsigned long long, void*, int*)+0x4a>
c000b60e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b614:	85 c0                	test   eax,eax
c000b616:	74 20                	je     c000b638 <File::read(unsigned long long, void*, int*)+0x4a>
c000b618:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b61c:	74 21                	je     c000b63f <File::read(unsigned long long, void*, int*)+0x51>
c000b61e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b620:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b624:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b62a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b62e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b632:	5b                   	pop    ebx
c000b633:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b636:	ff e0                	jmp    eax
c000b638:	b8 0b 00 00 00       	mov    eax,0xb
c000b63d:	eb 05                	jmp    c000b644 <File::read(unsigned long long, void*, int*)+0x56>
c000b63f:	b8 05 00 00 00       	mov    eax,0x5
c000b644:	5b                   	pop    ebx
c000b645:	c3                   	ret    

c000b646 <File::write(unsigned long long, void*, int*)>:
c000b646:	53                   	push   ebx
c000b647:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b64b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b64f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b656:	83 f8 19             	cmp    eax,0x19
c000b659:	77 35                	ja     c000b690 <File::write(unsigned long long, void*, int*)+0x4a>
c000b65b:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b662:	85 c0                	test   eax,eax
c000b664:	74 2a                	je     c000b690 <File::write(unsigned long long, void*, int*)+0x4a>
c000b666:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b66c:	85 c0                	test   eax,eax
c000b66e:	74 20                	je     c000b690 <File::write(unsigned long long, void*, int*)+0x4a>
c000b670:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b674:	74 21                	je     c000b697 <File::write(unsigned long long, void*, int*)+0x51>
c000b676:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b678:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b67c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b682:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b686:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b68a:	5b                   	pop    ebx
c000b68b:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b68e:	ff e0                	jmp    eax
c000b690:	b8 0b 00 00 00       	mov    eax,0xb
c000b695:	eb 05                	jmp    c000b69c <File::write(unsigned long long, void*, int*)+0x56>
c000b697:	b8 05 00 00 00       	mov    eax,0x5
c000b69c:	5b                   	pop    ebx
c000b69d:	c3                   	ret    

c000b69e <Directory::read(unsigned long long, void*, int*)>:
c000b69e:	53                   	push   ebx
c000b69f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b6a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b6a7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b6ae:	83 f8 19             	cmp    eax,0x19
c000b6b1:	77 35                	ja     c000b6e8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6b3:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b6ba:	85 c0                	test   eax,eax
c000b6bc:	74 2a                	je     c000b6e8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6be:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b6c4:	85 c0                	test   eax,eax
c000b6c6:	74 20                	je     c000b6e8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6cc:	74 21                	je     c000b6ef <Directory::read(unsigned long long, void*, int*)+0x51>
c000b6ce:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6d0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b6d4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6e2:	5b                   	pop    ebx
c000b6e3:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b6e6:	ff e0                	jmp    eax
c000b6e8:	b8 0b 00 00 00       	mov    eax,0xb
c000b6ed:	eb 05                	jmp    c000b6f4 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b6ef:	b8 05 00 00 00       	mov    eax,0x5
c000b6f4:	5b                   	pop    ebx
c000b6f5:	c3                   	ret    

c000b6f6 <Directory::write(unsigned long long, void*, int*)>:
c000b6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6fa:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b701:	b8 0b 00 00 00       	mov    eax,0xb
c000b706:	83 fa 19             	cmp    edx,0x19
c000b709:	77 18                	ja     c000b723 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b70b:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b712:	85 d2                	test   edx,edx
c000b714:	74 0d                	je     c000b723 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b716:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b71d:	19 c0                	sbb    eax,eax
c000b71f:	83 e0 0a             	and    eax,0xa
c000b722:	40                   	inc    eax
c000b723:	c3                   	ret    

c000b724 <File::isAtty()>:
c000b724:	31 c0                	xor    eax,eax
c000b726:	c3                   	ret    
c000b727:	90                   	nop

c000b728 <Directory::isAtty()>:
c000b728:	31 c0                	xor    eax,eax
c000b72a:	c3                   	ret    
c000b72b:	90                   	nop

c000b72c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b72c:	b8 0a 00 00 00       	mov    eax,0xa
c000b731:	c3                   	ret    

c000b732 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b732:	b8 0a 00 00 00       	mov    eax,0xa
c000b737:	c3                   	ret    

c000b738 <Filesystem::allocateSwapfile(char const*, int)>:
c000b738:	31 c0                	xor    eax,eax
c000b73a:	31 d2                	xor    edx,edx
c000b73c:	c3                   	ret    
c000b73d:	90                   	nop

c000b73e <File::~File()>:
c000b73e:	83 ec 0c             	sub    esp,0xc
c000b741:	ba 48 1b 02 c0       	mov    edx,0xc0021b48
c000b746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b74a:	89 10                	mov    DWORD PTR [eax],edx
c000b74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b750:	83 ec 0c             	sub    esp,0xc
c000b753:	50                   	push   eax
c000b754:	e8 7b dc ff ff       	call   c00093d4 <UnixFile::~UnixFile()>
c000b759:	83 c4 10             	add    esp,0x10
c000b75c:	90                   	nop
c000b75d:	83 c4 0c             	add    esp,0xc
c000b760:	c3                   	ret    
c000b761:	90                   	nop

c000b762 <File::~File()>:
c000b762:	83 ec 0c             	sub    esp,0xc
c000b765:	83 ec 0c             	sub    esp,0xc
c000b768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b76c:	e8 cd ff ff ff       	call   c000b73e <File::~File()>
c000b771:	83 c4 10             	add    esp,0x10
c000b774:	83 ec 08             	sub    esp,0x8
c000b777:	68 14 01 00 00       	push   0x114
c000b77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b780:	e8 c3 f0 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000b785:	83 c4 10             	add    esp,0x10
c000b788:	83 c4 0c             	add    esp,0xc
c000b78b:	c3                   	ret    

c000b78c <Directory::~Directory()>:
c000b78c:	83 ec 0c             	sub    esp,0xc
c000b78f:	ba 64 1b 02 c0       	mov    edx,0xc0021b64
c000b794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b798:	89 10                	mov    DWORD PTR [eax],edx
c000b79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b79e:	83 ec 0c             	sub    esp,0xc
c000b7a1:	50                   	push   eax
c000b7a2:	e8 2d dc ff ff       	call   c00093d4 <UnixFile::~UnixFile()>
c000b7a7:	83 c4 10             	add    esp,0x10
c000b7aa:	90                   	nop
c000b7ab:	83 c4 0c             	add    esp,0xc
c000b7ae:	c3                   	ret    
c000b7af:	90                   	nop

c000b7b0 <Directory::~Directory()>:
c000b7b0:	83 ec 0c             	sub    esp,0xc
c000b7b3:	83 ec 0c             	sub    esp,0xc
c000b7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7ba:	e8 cd ff ff ff       	call   c000b78c <Directory::~Directory()>
c000b7bf:	83 c4 10             	add    esp,0x10
c000b7c2:	83 ec 08             	sub    esp,0x8
c000b7c5:	68 14 01 00 00       	push   0x114
c000b7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7ce:	e8 75 f0 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000b7d3:	83 c4 10             	add    esp,0x10
c000b7d6:	83 c4 0c             	add    esp,0xc
c000b7d9:	c3                   	ret    

c000b7da <Filesystem::Filesystem()>:
c000b7da:	ba dc 1a 02 c0       	mov    edx,0xc0021adc
c000b7df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7e3:	89 10                	mov    DWORD PTR [eax],edx
c000b7e5:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b7eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b7f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f6:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b7fb:	90                   	nop
c000b7fc:	c3                   	ret    
c000b7fd:	90                   	nop

c000b7fe <Filesystem::~Filesystem()>:
c000b7fe:	ba dc 1a 02 c0       	mov    edx,0xc0021adc
c000b803:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b807:	89 10                	mov    DWORD PTR [eax],edx
c000b809:	90                   	nop
c000b80a:	c3                   	ret    
c000b80b:	90                   	nop

c000b80c <Filesystem::~Filesystem()>:
c000b80c:	83 ec 0c             	sub    esp,0xc
c000b80f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b813:	e8 e6 ff ff ff       	call   c000b7fe <Filesystem::~Filesystem()>
c000b818:	83 c4 04             	add    esp,0x4
c000b81b:	83 ec 08             	sub    esp,0x8
c000b81e:	6a 08                	push   0x8
c000b820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b824:	e8 1f f0 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000b829:	83 c4 10             	add    esp,0x10
c000b82c:	83 c4 0c             	add    esp,0xc
c000b82f:	c3                   	ret    

c000b830 <Fs::getcwd(Process*, char*, int)>:
c000b830:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b834:	31 c0                	xor    eax,eax
c000b836:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b839:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b83d:	7d 15                	jge    c000b854 <Fs::getcwd(Process*, char*, int)+0x24>
c000b83f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b843:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b84a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b84d:	84 c9                	test   cl,cl
c000b84f:	74 06                	je     c000b857 <Fs::getcwd(Process*, char*, int)+0x27>
c000b851:	40                   	inc    eax
c000b852:	eb e2                	jmp    c000b836 <Fs::getcwd(Process*, char*, int)+0x6>
c000b854:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b857:	31 c0                	xor    eax,eax
c000b859:	c3                   	ret    

c000b85a <Fs::initVFS()>:
c000b85a:	83 ec 18             	sub    esp,0x18
c000b85d:	6a 08                	push   0x8
c000b85f:	e8 82 c2 ff ff       	call   c0007ae6 <malloc>
c000b864:	89 04 24             	mov    DWORD PTR [esp],eax
c000b867:	e8 f8 e4 00 00       	call   c0019d64 <FAT::FAT()>
c000b86c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b873:	e8 6e c2 ff ff       	call   c0007ae6 <malloc>
c000b878:	89 04 24             	mov    DWORD PTR [esp],eax
c000b87b:	e8 10 f4 00 00       	call   c001ac90 <ISO9660::ISO9660()>
c000b880:	83 c4 1c             	add    esp,0x1c
c000b883:	c3                   	ret    

c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b884:	55                   	push   ebp
c000b885:	57                   	push   edi
c000b886:	56                   	push   esi
c000b887:	53                   	push   ebx
c000b888:	81 ec 10 04 00 00    	sub    esp,0x410
c000b88e:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b895:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b89c:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b8a4:	68 00 04 00 00       	push   0x400
c000b8a9:	6a 00                	push   0x0
c000b8ab:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b8af:	57                   	push   edi
c000b8b0:	e8 3b 4c ff ff       	call   c00004f0 <memset>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b8bc:	75 0b                	jne    c000b8c9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b8be:	50                   	push   eax
c000b8bf:	50                   	push   eax
c000b8c0:	55                   	push   ebp
c000b8c1:	57                   	push   edi
c000b8c2:	e8 79 4d ff ff       	call   c0000640 <strcpy>
c000b8c7:	eb 51                	jmp    c000b91a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b8c9:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b8cd:	83 f8 5c             	cmp    eax,0x5c
c000b8d0:	74 05                	je     c000b8d7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b8d2:	83 f8 2f             	cmp    eax,0x2f
c000b8d5:	75 1e                	jne    c000b8f5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b8d7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b8de:	8a 00                	mov    al,BYTE PTR [eax]
c000b8e0:	3c 60                	cmp    al,0x60
c000b8e2:	7e 03                	jle    c000b8e7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b8e4:	83 e8 20             	sub    eax,0x20
c000b8e7:	88 04 24             	mov    BYTE PTR [esp],al
c000b8ea:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b8f1:	50                   	push   eax
c000b8f2:	50                   	push   eax
c000b8f3:	eb 1e                	jmp    c000b913 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b8f5:	50                   	push   eax
c000b8f6:	50                   	push   eax
c000b8f7:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b8fe:	57                   	push   edi
c000b8ff:	e8 3c 4d ff ff       	call   c0000640 <strcpy>
c000b904:	58                   	pop    eax
c000b905:	5a                   	pop    edx
c000b906:	68 8f 2b 02 c0       	push   0xc0022b8f
c000b90b:	57                   	push   edi
c000b90c:	e8 2f 4f ff ff       	call   c0000840 <strcat>
c000b911:	59                   	pop    ecx
c000b912:	58                   	pop    eax
c000b913:	55                   	push   ebp
c000b914:	57                   	push   edi
c000b915:	e8 26 4f ff ff       	call   c0000840 <strcat>
c000b91a:	83 c4 10             	add    esp,0x10
c000b91d:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b920:	3c 60                	cmp    al,0x60
c000b922:	7e 03                	jle    c000b927 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b924:	83 e8 20             	sub    eax,0x20
c000b927:	88 04 24             	mov    BYTE PTR [esp],al
c000b92a:	88 06                	mov    BYTE PTR [esi],al
c000b92c:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b933:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b939:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b93d:	bf 03 00 00 00       	mov    edi,0x3
c000b942:	b8 03 00 00 00       	mov    eax,0x3
c000b947:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b94b:	89 e9                	mov    ecx,ebp
c000b94d:	85 ed                	test   ebp,ebp
c000b94f:	0f 84 97 00 00 00    	je     c000b9ec <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b955:	8d 57 01             	lea    edx,[edi+0x1]
c000b958:	83 fd 5c             	cmp    ebp,0x5c
c000b95b:	74 05                	je     c000b962 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b95d:	83 fd 2f             	cmp    ebp,0x2f
c000b960:	75 12                	jne    c000b974 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b962:	89 c5                	mov    ebp,eax
c000b964:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b969:	74 09                	je     c000b974 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b96b:	40                   	inc    eax
c000b96c:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b970:	89 d7                	mov    edi,edx
c000b972:	eb d3                	jmp    c000b947 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b974:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b979:	0f be e9             	movsx  ebp,cl
c000b97c:	75 5e                	jne    c000b9dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b97e:	83 fd 2e             	cmp    ebp,0x2e
c000b981:	75 59                	jne    c000b9dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b983:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b987:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b98c:	74 18                	je     c000b9a6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b98e:	83 fd 2e             	cmp    ebp,0x2e
c000b991:	74 53                	je     c000b9e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b993:	89 fa                	mov    edx,edi
c000b995:	42                   	inc    edx
c000b996:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b99a:	83 f9 2f             	cmp    ecx,0x2f
c000b99d:	74 f6                	je     c000b995 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b99f:	83 f9 5c             	cmp    ecx,0x5c
c000b9a2:	74 f1                	je     c000b995 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b9a4:	eb ca                	jmp    c000b970 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9a6:	83 fd 2e             	cmp    ebp,0x2e
c000b9a9:	74 3b                	je     c000b9e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b9ab:	83 f8 03             	cmp    eax,0x3
c000b9ae:	74 c0                	je     c000b970 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9b0:	42                   	inc    edx
c000b9b1:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b9b5:	83 f9 5c             	cmp    ecx,0x5c
c000b9b8:	74 f6                	je     c000b9b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b9ba:	83 f9 2f             	cmp    ecx,0x2f
c000b9bd:	74 f1                	je     c000b9b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b9bf:	48                   	dec    eax
c000b9c0:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b9c4:	75 06                	jne    c000b9cc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b9c6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9ca:	eb f3                	jmp    c000b9bf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b9cc:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b9d0:	74 07                	je     c000b9d9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b9d2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9d6:	48                   	dec    eax
c000b9d7:	eb f3                	jmp    c000b9cc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b9d9:	40                   	inc    eax
c000b9da:	eb 94                	jmp    c000b970 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9dc:	83 fd 5c             	cmp    ebp,0x5c
c000b9df:	74 8f                	je     c000b970 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9e1:	83 fd 2f             	cmp    ebp,0x2f
c000b9e4:	74 8a                	je     c000b970 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9e6:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b9e9:	40                   	inc    eax
c000b9ea:	eb 84                	jmp    c000b970 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9ec:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9f0:	83 ec 0c             	sub    esp,0xc
c000b9f3:	56                   	push   esi
c000b9f4:	e8 77 4b ff ff       	call   c0000570 <strlen>
c000b9f9:	83 c4 10             	add    esp,0x10
c000b9fc:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000ba01:	74 17                	je     c000ba1a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000ba03:	83 ec 0c             	sub    esp,0xc
c000ba06:	56                   	push   esi
c000ba07:	e8 64 4b ff ff       	call   c0000570 <strlen>
c000ba0c:	83 c4 10             	add    esp,0x10
c000ba0f:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000ba14:	74 04                	je     c000ba1a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000ba16:	31 ff                	xor    edi,edi
c000ba18:	eb 5c                	jmp    c000ba76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000ba1a:	83 ec 0c             	sub    esp,0xc
c000ba1d:	56                   	push   esi
c000ba1e:	e8 4d 4b ff ff       	call   c0000570 <strlen>
c000ba23:	83 c4 10             	add    esp,0x10
c000ba26:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000ba2b:	74 e9                	je     c000ba16 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000ba2d:	83 ec 0c             	sub    esp,0xc
c000ba30:	56                   	push   esi
c000ba31:	e8 3a 4b ff ff       	call   c0000570 <strlen>
c000ba36:	83 c4 10             	add    esp,0x10
c000ba39:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000ba3e:	eb b0                	jmp    c000b9f0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000ba40:	52                   	push   edx
c000ba41:	52                   	push   edx
c000ba42:	56                   	push   esi
c000ba43:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000ba47:	55                   	push   ebp
c000ba48:	e8 f3 4b ff ff       	call   c0000640 <strcpy>
c000ba4d:	59                   	pop    ecx
c000ba4e:	58                   	pop    eax
c000ba4f:	56                   	push   esi
c000ba50:	55                   	push   ebp
c000ba51:	e8 96 f8 ff ff       	call   c000b2ec <KeDereferenceSymlink(char const*, char*)>
c000ba56:	83 c4 10             	add    esp,0x10
c000ba59:	48                   	dec    eax
c000ba5a:	75 37                	jne    c000ba93 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000ba5c:	50                   	push   eax
c000ba5d:	56                   	push   esi
c000ba5e:	55                   	push   ebp
c000ba5f:	68 92 1a 02 c0       	push   0xc0021a92
c000ba64:	e8 0c ef ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ba69:	83 c4 10             	add    esp,0x10
c000ba6c:	8d 47 01             	lea    eax,[edi+0x1]
c000ba6f:	83 ff 14             	cmp    edi,0x14
c000ba72:	74 08                	je     c000ba7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000ba74:	89 c7                	mov    edi,eax
c000ba76:	85 db                	test   ebx,ebx
c000ba78:	75 c6                	jne    c000ba40 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000ba7a:	eb 17                	jmp    c000ba93 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000ba7c:	83 ec 0c             	sub    esp,0xc
c000ba7f:	bf 15 00 00 00       	mov    edi,0x15
c000ba84:	68 ad 1a 02 c0       	push   0xc0021aad
c000ba89:	e8 85 5c 00 00       	call   c0011713 <KePanic(char const*)>
c000ba8e:	83 c4 10             	add    esp,0x10
c000ba91:	eb e3                	jmp    c000ba76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000ba93:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ba99:	5b                   	pop    ebx
c000ba9a:	5e                   	pop    esi
c000ba9b:	5f                   	pop    edi
c000ba9c:	5d                   	pop    ebp
c000ba9d:	c3                   	ret    

c000ba9e <File::File(char const*, Process*, bool)>:
c000ba9e:	83 ec 1c             	sub    esp,0x1c
c000baa1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baa5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000baa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baad:	83 ec 08             	sub    esp,0x8
c000bab0:	6a 00                	push   0x0
c000bab2:	50                   	push   eax
c000bab3:	e8 36 d7 ff ff       	call   c00091ee <UnixFile::UnixFile(int)>
c000bab8:	83 c4 10             	add    esp,0x10
c000babb:	ba 48 1b 02 c0       	mov    edx,0xc0021b48
c000bac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac4:	89 10                	mov    DWORD PTR [eax],edx
c000bac6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000bacb:	85 c0                	test   eax,eax
c000bacd:	74 0f                	je     c000bade <File::File(char const*, Process*, bool)+0x40>
c000bacf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000bad4:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000bad8:	74 04                	je     c000bade <File::File(char const*, Process*, bool)+0x40>
c000bada:	b0 01                	mov    al,0x1
c000badc:	eb 02                	jmp    c000bae0 <File::File(char const*, Process*, bool)+0x42>
c000bade:	b0 00                	mov    al,0x0
c000bae0:	0f b6 c0             	movzx  eax,al
c000bae3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bae7:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000baed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000baf1:	83 c2 0d             	add    edx,0xd
c000baf4:	50                   	push   eax
c000baf5:	51                   	push   ecx
c000baf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bafa:	52                   	push   edx
c000bafb:	e8 84 fd ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bb00:	83 c4 10             	add    esp,0x10
c000bb03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb07:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bb0a:	83 e8 41             	sub    eax,0x41
c000bb0d:	88 c2                	mov    dl,al
c000bb0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb13:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bb19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb1d:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bb21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb25:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb2b:	0f b6 c0             	movzx  eax,al
c000bb2e:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb35:	85 c0                	test   eax,eax
c000bb37:	74 3e                	je     c000bb77 <File::File(char const*, Process*, bool)+0xd9>
c000bb39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb3d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb43:	0f b6 c0             	movzx  eax,al
c000bb46:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb4d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb53:	85 c0                	test   eax,eax
c000bb55:	75 20                	jne    c000bb77 <File::File(char const*, Process*, bool)+0xd9>
c000bb57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb5b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb61:	0f b6 c0             	movzx  eax,al
c000bb64:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb6b:	83 ec 0c             	sub    esp,0xc
c000bb6e:	50                   	push   eax
c000bb6f:	e8 de 21 00 00       	call   c000dd52 <LogicalDisk::mount()>
c000bb74:	83 c4 10             	add    esp,0x10
c000bb77:	90                   	nop
c000bb78:	83 c4 1c             	add    esp,0x1c
c000bb7b:	c3                   	ret    

c000bb7c <File::File(char const*, Process*)>:
c000bb7c:	83 ec 0c             	sub    esp,0xc
c000bb7f:	6a 01                	push   0x1
c000bb81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb8d:	e8 0c ff ff ff       	call   c000ba9e <File::File(char const*, Process*, bool)>
c000bb92:	83 c4 10             	add    esp,0x10
c000bb95:	90                   	nop
c000bb96:	83 c4 0c             	add    esp,0xc
c000bb99:	c3                   	ret    

c000bb9a <File::open(FileOpenMode)>:
c000bb9a:	53                   	push   ebx
c000bb9b:	b8 0b 00 00 00       	mov    eax,0xb
c000bba0:	83 ec 08             	sub    esp,0x8
c000bba3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bba7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bbae:	83 fa 19             	cmp    edx,0x19
c000bbb1:	77 40                	ja     c000bbf3 <File::open(FileOpenMode)+0x59>
c000bbb3:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bbba:	85 d2                	test   edx,edx
c000bbbc:	74 35                	je     c000bbf3 <File::open(FileOpenMode)+0x59>
c000bbbe:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bbc4:	85 d2                	test   edx,edx
c000bbc6:	74 2b                	je     c000bbf3 <File::open(FileOpenMode)+0x59>
c000bbc8:	b8 06 00 00 00       	mov    eax,0x6
c000bbcd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bbd1:	75 20                	jne    c000bbf3 <File::open(FileOpenMode)+0x59>
c000bbd3:	8b 02                	mov    eax,DWORD PTR [edx]
c000bbd5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bbdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbdf:	51                   	push   ecx
c000bbe0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bbe3:	51                   	push   ecx
c000bbe4:	52                   	push   edx
c000bbe5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bbe8:	83 c4 10             	add    esp,0x10
c000bbeb:	85 c0                	test   eax,eax
c000bbed:	75 04                	jne    c000bbf3 <File::open(FileOpenMode)+0x59>
c000bbef:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bbf3:	83 c4 08             	add    esp,0x8
c000bbf6:	5b                   	pop    ebx
c000bbf7:	c3                   	ret    

c000bbf8 <File::close()>:
c000bbf8:	53                   	push   ebx
c000bbf9:	b8 0b 00 00 00       	mov    eax,0xb
c000bbfe:	83 ec 08             	sub    esp,0x8
c000bc01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc05:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc0c:	83 f9 19             	cmp    ecx,0x19
c000bc0f:	77 41                	ja     c000bc52 <File::close()+0x5a>
c000bc11:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bc18:	85 db                	test   ebx,ebx
c000bc1a:	74 36                	je     c000bc52 <File::close()+0x5a>
c000bc1c:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bc23:	74 2d                	je     c000bc52 <File::close()+0x5a>
c000bc25:	b8 05 00 00 00       	mov    eax,0x5
c000bc2a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc2e:	74 22                	je     c000bc52 <File::close()+0x5a>
c000bc30:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc34:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc3b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc41:	53                   	push   ebx
c000bc42:	53                   	push   ebx
c000bc43:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc45:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc4b:	50                   	push   eax
c000bc4c:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc4f:	83 c4 10             	add    esp,0x10
c000bc52:	83 c4 08             	add    esp,0x8
c000bc55:	5b                   	pop    ebx
c000bc56:	c3                   	ret    
c000bc57:	90                   	nop

c000bc58 <File::seek(unsigned long long)>:
c000bc58:	56                   	push   esi
c000bc59:	53                   	push   ebx
c000bc5a:	b8 0b 00 00 00       	mov    eax,0xb
c000bc5f:	51                   	push   ecx
c000bc60:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc64:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc68:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc6f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc73:	83 fa 19             	cmp    edx,0x19
c000bc76:	77 31                	ja     c000bca9 <File::seek(unsigned long long)+0x51>
c000bc78:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc7f:	85 d2                	test   edx,edx
c000bc81:	74 26                	je     c000bca9 <File::seek(unsigned long long)+0x51>
c000bc83:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc89:	85 d2                	test   edx,edx
c000bc8b:	74 1c                	je     c000bca9 <File::seek(unsigned long long)+0x51>
c000bc8d:	b8 05 00 00 00       	mov    eax,0x5
c000bc92:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc96:	74 11                	je     c000bca9 <File::seek(unsigned long long)+0x51>
c000bc98:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc9a:	53                   	push   ebx
c000bc9b:	51                   	push   ecx
c000bc9c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bca2:	52                   	push   edx
c000bca3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bca6:	83 c4 10             	add    esp,0x10
c000bca9:	5a                   	pop    edx
c000bcaa:	5b                   	pop    ebx
c000bcab:	5e                   	pop    esi
c000bcac:	c3                   	ret    
c000bcad:	90                   	nop

c000bcae <File::truncate(unsigned long long)>:
c000bcae:	56                   	push   esi
c000bcaf:	53                   	push   ebx
c000bcb0:	b8 0b 00 00 00       	mov    eax,0xb
c000bcb5:	51                   	push   ecx
c000bcb6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bcba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bcbe:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bcc5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bcc9:	83 fa 19             	cmp    edx,0x19
c000bccc:	77 31                	ja     c000bcff <File::truncate(unsigned long long)+0x51>
c000bcce:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcd5:	85 d2                	test   edx,edx
c000bcd7:	74 26                	je     c000bcff <File::truncate(unsigned long long)+0x51>
c000bcd9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcdf:	85 d2                	test   edx,edx
c000bce1:	74 1c                	je     c000bcff <File::truncate(unsigned long long)+0x51>
c000bce3:	b8 05 00 00 00       	mov    eax,0x5
c000bce8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcec:	74 11                	je     c000bcff <File::truncate(unsigned long long)+0x51>
c000bcee:	8b 02                	mov    eax,DWORD PTR [edx]
c000bcf0:	53                   	push   ebx
c000bcf1:	51                   	push   ecx
c000bcf2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bcf8:	52                   	push   edx
c000bcf9:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bcfc:	83 c4 10             	add    esp,0x10
c000bcff:	5a                   	pop    edx
c000bd00:	5b                   	pop    ebx
c000bd01:	5e                   	pop    esi
c000bd02:	c3                   	ret    
c000bd03:	90                   	nop

c000bd04 <File::tell(unsigned long long*)>:
c000bd04:	83 ec 0c             	sub    esp,0xc
c000bd07:	b8 0b 00 00 00       	mov    eax,0xb
c000bd0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd10:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bd17:	83 fa 19             	cmp    edx,0x19
c000bd1a:	77 34                	ja     c000bd50 <File::tell(unsigned long long*)+0x4c>
c000bd1c:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd23:	85 d2                	test   edx,edx
c000bd25:	74 29                	je     c000bd50 <File::tell(unsigned long long*)+0x4c>
c000bd27:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd2d:	85 d2                	test   edx,edx
c000bd2f:	74 1f                	je     c000bd50 <File::tell(unsigned long long*)+0x4c>
c000bd31:	b8 05 00 00 00       	mov    eax,0x5
c000bd36:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd3a:	74 14                	je     c000bd50 <File::tell(unsigned long long*)+0x4c>
c000bd3c:	50                   	push   eax
c000bd3d:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd43:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd49:	52                   	push   edx
c000bd4a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd4d:	83 c4 10             	add    esp,0x10
c000bd50:	83 c4 0c             	add    esp,0xc
c000bd53:	c3                   	ret    

c000bd54 <File::rewind()>:
c000bd54:	83 ec 10             	sub    esp,0x10
c000bd57:	6a 00                	push   0x0
c000bd59:	6a 00                	push   0x0
c000bd5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd5f:	e8 f4 fe ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c000bd64:	83 c4 1c             	add    esp,0x1c
c000bd67:	c3                   	ret    

c000bd68 <File::unlink()>:
c000bd68:	83 ec 0c             	sub    esp,0xc
c000bd6b:	b8 0b 00 00 00       	mov    eax,0xb
c000bd70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd74:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd7b:	83 f9 19             	cmp    ecx,0x19
c000bd7e:	77 2f                	ja     c000bdaf <File::unlink()+0x47>
c000bd80:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd87:	85 c9                	test   ecx,ecx
c000bd89:	74 24                	je     c000bdaf <File::unlink()+0x47>
c000bd8b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd91:	85 c9                	test   ecx,ecx
c000bd93:	74 1a                	je     c000bdaf <File::unlink()+0x47>
c000bd95:	b8 06 00 00 00       	mov    eax,0x6
c000bd9a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd9e:	75 0f                	jne    c000bdaf <File::unlink()+0x47>
c000bda0:	83 c2 0d             	add    edx,0xd
c000bda3:	50                   	push   eax
c000bda4:	50                   	push   eax
c000bda5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bda7:	52                   	push   edx
c000bda8:	51                   	push   ecx
c000bda9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bdac:	83 c4 10             	add    esp,0x10
c000bdaf:	83 c4 0c             	add    esp,0xc
c000bdb2:	c3                   	ret    
c000bdb3:	90                   	nop

c000bdb4 <File::rename(char const*)>:
c000bdb4:	83 ec 0c             	sub    esp,0xc
c000bdb7:	b8 0b 00 00 00       	mov    eax,0xb
c000bdbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdc0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdc7:	83 f9 19             	cmp    ecx,0x19
c000bdca:	77 32                	ja     c000bdfe <File::rename(char const*)+0x4a>
c000bdcc:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdd3:	85 c9                	test   ecx,ecx
c000bdd5:	74 27                	je     c000bdfe <File::rename(char const*)+0x4a>
c000bdd7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bddd:	85 c9                	test   ecx,ecx
c000bddf:	74 1d                	je     c000bdfe <File::rename(char const*)+0x4a>
c000bde1:	b8 06 00 00 00       	mov    eax,0x6
c000bde6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdea:	75 12                	jne    c000bdfe <File::rename(char const*)+0x4a>
c000bdec:	83 c2 0d             	add    edx,0xd
c000bdef:	50                   	push   eax
c000bdf0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdf6:	52                   	push   edx
c000bdf7:	51                   	push   ecx
c000bdf8:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bdfb:	83 c4 10             	add    esp,0x10
c000bdfe:	83 c4 0c             	add    esp,0xc
c000be01:	c3                   	ret    

c000be02 <File::chfatattr(unsigned char, unsigned char)>:
c000be02:	57                   	push   edi
c000be03:	b8 0b 00 00 00       	mov    eax,0xb
c000be08:	56                   	push   esi
c000be09:	53                   	push   ebx
c000be0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be0e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be12:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be19:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be1d:	83 f9 19             	cmp    ecx,0x19
c000be20:	77 37                	ja     c000be59 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be22:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be29:	85 c9                	test   ecx,ecx
c000be2b:	74 2c                	je     c000be59 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be2d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be33:	85 c9                	test   ecx,ecx
c000be35:	74 22                	je     c000be59 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be37:	b8 06 00 00 00       	mov    eax,0x6
c000be3c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be40:	75 17                	jne    c000be59 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be42:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be44:	89 f0                	mov    eax,esi
c000be46:	83 c2 0d             	add    edx,0xd
c000be49:	0f b6 f0             	movzx  esi,al
c000be4c:	0f b6 db             	movzx  ebx,bl
c000be4f:	56                   	push   esi
c000be50:	53                   	push   ebx
c000be51:	52                   	push   edx
c000be52:	51                   	push   ecx
c000be53:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be56:	83 c4 10             	add    esp,0x10
c000be59:	5b                   	pop    ebx
c000be5a:	5e                   	pop    esi
c000be5b:	5f                   	pop    edi
c000be5c:	c3                   	ret    
c000be5d:	90                   	nop

c000be5e <File::exists()>:
c000be5e:	83 ec 0c             	sub    esp,0xc
c000be61:	31 c0                	xor    eax,eax
c000be63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be67:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be6e:	83 f9 19             	cmp    ecx,0x19
c000be71:	77 24                	ja     c000be97 <File::exists()+0x39>
c000be73:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be7a:	85 c9                	test   ecx,ecx
c000be7c:	74 19                	je     c000be97 <File::exists()+0x39>
c000be7e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be84:	85 c9                	test   ecx,ecx
c000be86:	74 0f                	je     c000be97 <File::exists()+0x39>
c000be88:	83 c2 0d             	add    edx,0xd
c000be8b:	50                   	push   eax
c000be8c:	50                   	push   eax
c000be8d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be8f:	52                   	push   edx
c000be90:	51                   	push   ecx
c000be91:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be94:	83 c4 10             	add    esp,0x10
c000be97:	83 c4 0c             	add    esp,0xc
c000be9a:	c3                   	ret    
c000be9b:	90                   	nop

c000be9c <File::stat(unsigned long long*, bool*)>:
c000be9c:	56                   	push   esi
c000be9d:	53                   	push   ebx
c000be9e:	50                   	push   eax
c000be9f:	b8 0b 00 00 00       	mov    eax,0xb
c000bea4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bea8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000beac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000beb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000beb7:	83 f9 19             	cmp    ecx,0x19
c000beba:	77 3d                	ja     c000bef9 <File::stat(unsigned long long*, bool*)+0x5d>
c000bebc:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bec3:	85 c9                	test   ecx,ecx
c000bec5:	74 32                	je     c000bef9 <File::stat(unsigned long long*, bool*)+0x5d>
c000bec7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000becd:	85 c9                	test   ecx,ecx
c000becf:	74 28                	je     c000bef9 <File::stat(unsigned long long*, bool*)+0x5d>
c000bed1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bed3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bed7:	74 13                	je     c000beec <File::stat(unsigned long long*, bool*)+0x50>
c000bed9:	83 ec 04             	sub    esp,0x4
c000bedc:	56                   	push   esi
c000bedd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bee3:	51                   	push   ecx
c000bee4:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bee7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000beea:	eb 0a                	jmp    c000bef6 <File::stat(unsigned long long*, bool*)+0x5a>
c000beec:	53                   	push   ebx
c000beed:	83 c2 0d             	add    edx,0xd
c000bef0:	56                   	push   esi
c000bef1:	52                   	push   edx
c000bef2:	51                   	push   ecx
c000bef3:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bef6:	83 c4 10             	add    esp,0x10
c000bef9:	5a                   	pop    edx
c000befa:	5b                   	pop    ebx
c000befb:	5e                   	pop    esi
c000befc:	c3                   	ret    

c000befd <Fs::setcwd(Process*, char*)>:
c000befd:	55                   	push   ebp
c000befe:	57                   	push   edi
c000beff:	56                   	push   esi
c000bf00:	53                   	push   ebx
c000bf01:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bf07:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bf0e:	6a 00                	push   0x0
c000bf10:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bf16:	57                   	push   edi
c000bf17:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bf1e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bf22:	56                   	push   esi
c000bf23:	e8 5c f9 ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bf28:	89 34 24             	mov    DWORD PTR [esp],esi
c000bf2b:	e8 40 46 ff ff       	call   c0000570 <strlen>
c000bf30:	83 c4 10             	add    esp,0x10
c000bf33:	83 f8 02             	cmp    eax,0x2
c000bf36:	77 15                	ja     c000bf4d <Fs::setcwd(Process*, char*)+0x50>
c000bf38:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf3d:	83 eb 41             	sub    ebx,0x41
c000bf40:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf47:	85 c0                	test   eax,eax
c000bf49:	75 1c                	jne    c000bf67 <Fs::setcwd(Process*, char*)+0x6a>
c000bf4b:	eb 2f                	jmp    c000bf7c <Fs::setcwd(Process*, char*)+0x7f>
c000bf4d:	83 ec 0c             	sub    esp,0xc
c000bf50:	56                   	push   esi
c000bf51:	e8 1a 46 ff ff       	call   c0000570 <strlen>
c000bf56:	83 c4 10             	add    esp,0x10
c000bf59:	83 f8 03             	cmp    eax,0x3
c000bf5c:	75 57                	jne    c000bfb5 <Fs::setcwd(Process*, char*)+0xb8>
c000bf5e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf63:	75 50                	jne    c000bfb5 <Fs::setcwd(Process*, char*)+0xb8>
c000bf65:	eb d1                	jmp    c000bf38 <Fs::setcwd(Process*, char*)+0x3b>
c000bf67:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf6e:	75 0c                	jne    c000bf7c <Fs::setcwd(Process*, char*)+0x7f>
c000bf70:	83 ec 0c             	sub    esp,0xc
c000bf73:	50                   	push   eax
c000bf74:	e8 d9 1d 00 00       	call   c000dd52 <LogicalDisk::mount()>
c000bf79:	83 c4 10             	add    esp,0x10
c000bf7c:	b8 03 00 00 00       	mov    eax,0x3
c000bf81:	83 fb 19             	cmp    ebx,0x19
c000bf84:	0f 87 c6 00 00 00    	ja     c000c050 <Fs::setcwd(Process*, char*)+0x153>
c000bf8a:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf91:	b8 05 00 00 00       	mov    eax,0x5
c000bf96:	85 d2                	test   edx,edx
c000bf98:	0f 84 b2 00 00 00    	je     c000c050 <Fs::setcwd(Process*, char*)+0x153>
c000bf9e:	b8 06 00 00 00       	mov    eax,0x6
c000bfa3:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bfaa:	0f 85 92 00 00 00    	jne    c000c042 <Fs::setcwd(Process*, char*)+0x145>
c000bfb0:	e9 9b 00 00 00       	jmp    c000c050 <Fs::setcwd(Process*, char*)+0x153>
c000bfb5:	83 ec 0c             	sub    esp,0xc
c000bfb8:	68 14 01 00 00       	push   0x114
c000bfbd:	e8 24 bb ff ff       	call   c0007ae6 <malloc>
c000bfc2:	83 c4 0c             	add    esp,0xc
c000bfc5:	89 c3                	mov    ebx,eax
c000bfc7:	55                   	push   ebp
c000bfc8:	56                   	push   esi
c000bfc9:	50                   	push   eax
c000bfca:	e8 ad fb ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c000bfcf:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bfd4:	83 c4 0c             	add    esp,0xc
c000bfd7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bfdb:	50                   	push   eax
c000bfdc:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bfe0:	50                   	push   eax
c000bfe1:	53                   	push   ebx
c000bfe2:	e8 b5 fe ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c000bfe7:	83 c4 10             	add    esp,0x10
c000bfea:	83 f8 02             	cmp    eax,0x2
c000bfed:	74 27                	je     c000c016 <Fs::setcwd(Process*, char*)+0x119>
c000bfef:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bff4:	75 1c                	jne    c000c012 <Fs::setcwd(Process*, char*)+0x115>
c000bff6:	b8 02 00 00 00       	mov    eax,0x2
c000bffb:	85 db                	test   ebx,ebx
c000bffd:	74 51                	je     c000c050 <Fs::setcwd(Process*, char*)+0x153>
c000bfff:	83 ec 0c             	sub    esp,0xc
c000c002:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c004:	53                   	push   ebx
c000c005:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c008:	83 c4 10             	add    esp,0x10
c000c00b:	b8 02 00 00 00       	mov    eax,0x2
c000c010:	eb 3e                	jmp    c000c050 <Fs::setcwd(Process*, char*)+0x153>
c000c012:	85 c0                	test   eax,eax
c000c014:	74 1c                	je     c000c032 <Fs::setcwd(Process*, char*)+0x135>
c000c016:	b8 01 00 00 00       	mov    eax,0x1
c000c01b:	85 db                	test   ebx,ebx
c000c01d:	74 31                	je     c000c050 <Fs::setcwd(Process*, char*)+0x153>
c000c01f:	83 ec 0c             	sub    esp,0xc
c000c022:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c024:	53                   	push   ebx
c000c025:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c028:	83 c4 10             	add    esp,0x10
c000c02b:	b8 01 00 00 00       	mov    eax,0x1
c000c030:	eb 1e                	jmp    c000c050 <Fs::setcwd(Process*, char*)+0x153>
c000c032:	85 db                	test   ebx,ebx
c000c034:	74 0c                	je     c000c042 <Fs::setcwd(Process*, char*)+0x145>
c000c036:	83 ec 0c             	sub    esp,0xc
c000c039:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c03b:	53                   	push   ebx
c000c03c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c03f:	83 c4 10             	add    esp,0x10
c000c042:	50                   	push   eax
c000c043:	50                   	push   eax
c000c044:	56                   	push   esi
c000c045:	57                   	push   edi
c000c046:	e8 f5 45 ff ff       	call   c0000640 <strcpy>
c000c04b:	83 c4 10             	add    esp,0x10
c000c04e:	31 c0                	xor    eax,eax
c000c050:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c056:	5b                   	pop    ebx
c000c057:	5e                   	pop    esi
c000c058:	5f                   	pop    edi
c000c059:	5d                   	pop    ebp
c000c05a:	c3                   	ret    
c000c05b:	90                   	nop

c000c05c <Directory::Directory(char const*, Process*)>:
c000c05c:	83 ec 0c             	sub    esp,0xc
c000c05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c063:	83 ec 08             	sub    esp,0x8
c000c066:	6a 00                	push   0x0
c000c068:	50                   	push   eax
c000c069:	e8 80 d1 ff ff       	call   c00091ee <UnixFile::UnixFile(int)>
c000c06e:	83 c4 10             	add    esp,0x10
c000c071:	ba 64 1b 02 c0       	mov    edx,0xc0021b64
c000c076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c07a:	89 10                	mov    DWORD PTR [eax],edx
c000c07c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c081:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c085:	0f 95 c0             	setne  al
c000c088:	0f b6 c0             	movzx  eax,al
c000c08b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c08f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c095:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c099:	83 c2 0d             	add    edx,0xd
c000c09c:	50                   	push   eax
c000c09d:	51                   	push   ecx
c000c09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a2:	52                   	push   edx
c000c0a3:	e8 dc f7 ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c0a8:	83 c4 10             	add    esp,0x10
c000c0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0af:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c0b2:	83 e8 41             	sub    eax,0x41
c000c0b5:	88 c2                	mov    dl,al
c000c0b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0bb:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c0c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c5:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c0c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0cd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0d3:	0f b6 c0             	movzx  eax,al
c000c0d6:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0dd:	85 c0                	test   eax,eax
c000c0df:	74 3e                	je     c000c11f <Directory::Directory(char const*, Process*)+0xc3>
c000c0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0eb:	0f b6 c0             	movzx  eax,al
c000c0ee:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0f5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c0fb:	85 c0                	test   eax,eax
c000c0fd:	75 20                	jne    c000c11f <Directory::Directory(char const*, Process*)+0xc3>
c000c0ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c103:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c109:	0f b6 c0             	movzx  eax,al
c000c10c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c113:	83 ec 0c             	sub    esp,0xc
c000c116:	50                   	push   eax
c000c117:	e8 36 1c 00 00       	call   c000dd52 <LogicalDisk::mount()>
c000c11c:	83 c4 10             	add    esp,0x10
c000c11f:	90                   	nop
c000c120:	83 c4 0c             	add    esp,0xc
c000c123:	c3                   	ret    

c000c124 <Directory::open()>:
c000c124:	53                   	push   ebx
c000c125:	b8 0b 00 00 00       	mov    eax,0xb
c000c12a:	83 ec 08             	sub    esp,0x8
c000c12d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c131:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c138:	83 fa 19             	cmp    edx,0x19
c000c13b:	77 3d                	ja     c000c17a <Directory::open()+0x56>
c000c13d:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c144:	85 d2                	test   edx,edx
c000c146:	74 32                	je     c000c17a <Directory::open()+0x56>
c000c148:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c14e:	85 d2                	test   edx,edx
c000c150:	74 28                	je     c000c17a <Directory::open()+0x56>
c000c152:	b8 06 00 00 00       	mov    eax,0x6
c000c157:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c15b:	75 1d                	jne    c000c17a <Directory::open()+0x56>
c000c15d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c163:	50                   	push   eax
c000c164:	8b 02                	mov    eax,DWORD PTR [edx]
c000c166:	51                   	push   ecx
c000c167:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c16a:	51                   	push   ecx
c000c16b:	52                   	push   edx
c000c16c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c16f:	83 c4 10             	add    esp,0x10
c000c172:	85 c0                	test   eax,eax
c000c174:	75 04                	jne    c000c17a <Directory::open()+0x56>
c000c176:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c17a:	83 c4 08             	add    esp,0x8
c000c17d:	5b                   	pop    ebx
c000c17e:	c3                   	ret    
c000c17f:	90                   	nop

c000c180 <Directory::close()>:
c000c180:	53                   	push   ebx
c000c181:	b8 0b 00 00 00       	mov    eax,0xb
c000c186:	83 ec 08             	sub    esp,0x8
c000c189:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c18d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c194:	83 f9 19             	cmp    ecx,0x19
c000c197:	77 41                	ja     c000c1da <Directory::close()+0x5a>
c000c199:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1a0:	85 db                	test   ebx,ebx
c000c1a2:	74 36                	je     c000c1da <Directory::close()+0x5a>
c000c1a4:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c1ab:	74 2d                	je     c000c1da <Directory::close()+0x5a>
c000c1ad:	b8 05 00 00 00       	mov    eax,0x5
c000c1b2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1b6:	74 22                	je     c000c1da <Directory::close()+0x5a>
c000c1b8:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c1bc:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c1c3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c1c9:	53                   	push   ebx
c000c1ca:	53                   	push   ebx
c000c1cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1cd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c1d3:	50                   	push   eax
c000c1d4:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	83 c4 08             	add    esp,0x8
c000c1dd:	5b                   	pop    ebx
c000c1de:	c3                   	ret    
c000c1df:	90                   	nop

c000c1e0 <Directory::unlink()>:
c000c1e0:	83 ec 0c             	sub    esp,0xc
c000c1e3:	b8 0b 00 00 00       	mov    eax,0xb
c000c1e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1f3:	83 f9 19             	cmp    ecx,0x19
c000c1f6:	77 2f                	ja     c000c227 <Directory::unlink()+0x47>
c000c1f8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1ff:	85 c9                	test   ecx,ecx
c000c201:	74 24                	je     c000c227 <Directory::unlink()+0x47>
c000c203:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c209:	85 c9                	test   ecx,ecx
c000c20b:	74 1a                	je     c000c227 <Directory::unlink()+0x47>
c000c20d:	b8 06 00 00 00       	mov    eax,0x6
c000c212:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c216:	75 0f                	jne    c000c227 <Directory::unlink()+0x47>
c000c218:	83 c2 0d             	add    edx,0xd
c000c21b:	50                   	push   eax
c000c21c:	50                   	push   eax
c000c21d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c21f:	52                   	push   edx
c000c220:	51                   	push   ecx
c000c221:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c224:	83 c4 10             	add    esp,0x10
c000c227:	83 c4 0c             	add    esp,0xc
c000c22a:	c3                   	ret    
c000c22b:	90                   	nop

c000c22c <Directory::rename(char const*)>:
c000c22c:	83 ec 0c             	sub    esp,0xc
c000c22f:	b8 0b 00 00 00       	mov    eax,0xb
c000c234:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c238:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c23f:	83 f9 19             	cmp    ecx,0x19
c000c242:	77 32                	ja     c000c276 <Directory::rename(char const*)+0x4a>
c000c244:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c24b:	85 c9                	test   ecx,ecx
c000c24d:	74 27                	je     c000c276 <Directory::rename(char const*)+0x4a>
c000c24f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c255:	85 c9                	test   ecx,ecx
c000c257:	74 1d                	je     c000c276 <Directory::rename(char const*)+0x4a>
c000c259:	b8 06 00 00 00       	mov    eax,0x6
c000c25e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c262:	75 12                	jne    c000c276 <Directory::rename(char const*)+0x4a>
c000c264:	83 c2 0d             	add    edx,0xd
c000c267:	50                   	push   eax
c000c268:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c26a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c26e:	52                   	push   edx
c000c26f:	51                   	push   ecx
c000c270:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c273:	83 c4 10             	add    esp,0x10
c000c276:	83 c4 0c             	add    esp,0xc
c000c279:	c3                   	ret    

c000c27a <Directory::exists()>:
c000c27a:	83 ec 0c             	sub    esp,0xc
c000c27d:	31 c0                	xor    eax,eax
c000c27f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c283:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c28a:	83 f9 19             	cmp    ecx,0x19
c000c28d:	77 24                	ja     c000c2b3 <Directory::exists()+0x39>
c000c28f:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c296:	85 c9                	test   ecx,ecx
c000c298:	74 19                	je     c000c2b3 <Directory::exists()+0x39>
c000c29a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2a0:	85 c9                	test   ecx,ecx
c000c2a2:	74 0f                	je     c000c2b3 <Directory::exists()+0x39>
c000c2a4:	83 c2 0d             	add    edx,0xd
c000c2a7:	50                   	push   eax
c000c2a8:	50                   	push   eax
c000c2a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2ab:	52                   	push   edx
c000c2ac:	51                   	push   ecx
c000c2ad:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c2b0:	83 c4 10             	add    esp,0x10
c000c2b3:	83 c4 0c             	add    esp,0xc
c000c2b6:	c3                   	ret    
c000c2b7:	90                   	nop

c000c2b8 <Directory::read(dirent*)>:
c000c2b8:	83 ec 1c             	sub    esp,0x1c
c000c2bb:	b8 0b 00 00 00       	mov    eax,0xb
c000c2c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c2c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2cb:	83 f9 19             	cmp    ecx,0x19
c000c2ce:	77 30                	ja     c000c300 <Directory::read(dirent*)+0x48>
c000c2d0:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2d7:	85 c9                	test   ecx,ecx
c000c2d9:	74 25                	je     c000c300 <Directory::read(dirent*)+0x48>
c000c2db:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c2e2:	74 1c                	je     c000c300 <Directory::read(dirent*)+0x48>
c000c2e4:	83 ec 0c             	sub    esp,0xc
c000c2e7:	8b 02                	mov    eax,DWORD PTR [edx]
c000c2e9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c2ed:	51                   	push   ecx
c000c2ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2f2:	6a 00                	push   0x0
c000c2f4:	68 10 01 00 00       	push   0x110
c000c2f9:	52                   	push   edx
c000c2fa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c2fd:	83 c4 20             	add    esp,0x20
c000c300:	83 c4 1c             	add    esp,0x1c
c000c303:	c3                   	ret    

c000c304 <Directory::create()>:
c000c304:	83 ec 0c             	sub    esp,0xc
c000c307:	b8 0b 00 00 00       	mov    eax,0xb
c000c30c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c310:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c317:	83 f9 19             	cmp    ecx,0x19
c000c31a:	77 2f                	ja     c000c34b <Directory::create()+0x47>
c000c31c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c323:	85 c9                	test   ecx,ecx
c000c325:	74 24                	je     c000c34b <Directory::create()+0x47>
c000c327:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c32d:	85 c9                	test   ecx,ecx
c000c32f:	74 1a                	je     c000c34b <Directory::create()+0x47>
c000c331:	b8 06 00 00 00       	mov    eax,0x6
c000c336:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c33a:	75 0f                	jne    c000c34b <Directory::create()+0x47>
c000c33c:	83 c2 0d             	add    edx,0xd
c000c33f:	50                   	push   eax
c000c340:	50                   	push   eax
c000c341:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c343:	52                   	push   edx
c000c344:	51                   	push   ecx
c000c345:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c348:	83 c4 10             	add    esp,0x10
c000c34b:	83 c4 0c             	add    esp,0xc
c000c34e:	c3                   	ret    
c000c34f:	90                   	nop

c000c350 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c350:	b8 0a 00 00 00       	mov    eax,0xa
c000c355:	c3                   	ret    
c000c356:	66 90                	xchg   ax,ax

c000c358 <Bus::Bus(char const*)>:
c000c358:	83 ec 0c             	sub    esp,0xc
c000c35b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c35f:	83 ec 08             	sub    esp,0x8
c000c362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c366:	50                   	push   eax
c000c367:	e8 5c 08 00 00       	call   c000cbc8 <Device::Device(char const*)>
c000c36c:	83 c4 10             	add    esp,0x10
c000c36f:	ba 80 1b 02 c0       	mov    edx,0xc0021b80
c000c374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c378:	89 10                	mov    DWORD PTR [eax],edx
c000c37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c37e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c388:	90                   	nop
c000c389:	83 c4 0c             	add    esp,0xc
c000c38c:	c3                   	ret    
c000c38d:	90                   	nop
c000c38e:	66 90                	xchg   ax,ax

c000c390 <Bus::~Bus()>:
c000c390:	83 ec 0c             	sub    esp,0xc
c000c393:	ba 80 1b 02 c0       	mov    edx,0xc0021b80
c000c398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c39c:	89 10                	mov    DWORD PTR [eax],edx
c000c39e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3a2:	83 ec 0c             	sub    esp,0xc
c000c3a5:	50                   	push   eax
c000c3a6:	e8 4d 05 00 00       	call   c000c8f8 <Device::~Device()>
c000c3ab:	83 c4 10             	add    esp,0x10
c000c3ae:	90                   	nop
c000c3af:	83 c4 0c             	add    esp,0xc
c000c3b2:	c3                   	ret    
c000c3b3:	90                   	nop

c000c3b4 <Bus::~Bus()>:
c000c3b4:	83 ec 0c             	sub    esp,0xc
c000c3b7:	83 ec 0c             	sub    esp,0xc
c000c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3be:	e8 cd ff ff ff       	call   c000c390 <Bus::~Bus()>
c000c3c3:	83 c4 10             	add    esp,0x10
c000c3c6:	83 ec 08             	sub    esp,0x8
c000c3c9:	68 58 01 00 00       	push   0x158
c000c3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3d2:	e8 71 e4 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000c3d7:	83 c4 10             	add    esp,0x10
c000c3da:	83 c4 0c             	add    esp,0xc
c000c3dd:	c3                   	ret    

c000c3de <beepThread(void*)>:
c000c3de:	83 ec 0c             	sub    esp,0xc
c000c3e1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c3e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3ea:	48                   	dec    eax
c000c3eb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c3f0:	75 01                	jne    c000c3f3 <beepThread(void*)+0x15>
c000c3f2:	fb                   	sti    
c000c3f3:	83 ec 0c             	sub    esp,0xc
c000c3f6:	6b c2 0a             	imul   eax,edx,0xa
c000c3f9:	50                   	push   eax
c000c3fa:	e8 29 a1 00 00       	call   c0016528 <milliTenthSleep(unsigned int)>
c000c3ff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c406:	e8 78 c0 00 00       	call   c0018483 <HalMakeBeep(int)>
c000c40b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c413:	83 c4 1c             	add    esp,0x1c
c000c416:	e9 f1 9f 00 00       	jmp    c001640c <blockTask(TaskState)>

c000c41b <Krnl::beep(int, int, bool)>:
c000c41b:	56                   	push   esi
c000c41c:	53                   	push   ebx
c000c41d:	83 ec 10             	sub    esp,0x10
c000c420:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c424:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c42c:	e8 52 c0 00 00       	call   c0018483 <HalMakeBeep(int)>
c000c431:	83 c4 10             	add    esp,0x10
c000c434:	89 f0                	mov    eax,esi
c000c436:	84 c0                	test   al,al
c000c438:	74 1e                	je     c000c458 <Krnl::beep(int, int, bool)+0x3d>
c000c43a:	83 ec 0c             	sub    esp,0xc
c000c43d:	6b db 0a             	imul   ebx,ebx,0xa
c000c440:	53                   	push   ebx
c000c441:	e8 e2 a0 00 00       	call   c0016528 <milliTenthSleep(unsigned int)>
c000c446:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c44e:	83 c4 14             	add    esp,0x14
c000c451:	5b                   	pop    ebx
c000c452:	5e                   	pop    esi
c000c453:	e9 2b c0 00 00       	jmp    c0018483 <HalMakeBeep(int)>
c000c458:	68 e6 00 00 00       	push   0xe6
c000c45d:	53                   	push   ebx
c000c45e:	68 de c3 00 c0       	push   0xc000c3de
c000c463:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c469:	e8 3a 9b 00 00       	call   c0015fa8 <Process::createThread(void (*)(void*), void*, int)>
c000c46e:	83 c4 14             	add    esp,0x14
c000c471:	5b                   	pop    ebx
c000c472:	5e                   	pop    esi
c000c473:	c3                   	ret    

c000c474 <User::loadClockSettings(int)>:
c000c474:	53                   	push   ebx
c000c475:	83 ec 14             	sub    esp,0x14
c000c478:	68 14 01 00 00       	push   0x114
c000c47d:	e8 64 b6 ff ff       	call   c0007ae6 <malloc>
c000c482:	83 c4 0c             	add    esp,0xc
c000c485:	89 c3                	mov    ebx,eax
c000c487:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c48d:	68 a4 1b 02 c0       	push   0xc0021ba4
c000c492:	50                   	push   eax
c000c493:	e8 e4 f6 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c000c498:	58                   	pop    eax
c000c499:	5a                   	pop    edx
c000c49a:	6a 01                	push   0x1
c000c49c:	53                   	push   ebx
c000c49d:	e8 f8 f6 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c000c4a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c4a5:	e8 4e f7 ff ff       	call   c000bbf8 <File::close()>
c000c4aa:	83 c4 10             	add    esp,0x10
c000c4ad:	85 db                	test   ebx,ebx
c000c4af:	74 0f                	je     c000c4c0 <User::loadClockSettings(int)+0x4c>
c000c4b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c4b3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c4b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c4ba:	83 c4 08             	add    esp,0x8
c000c4bd:	5b                   	pop    ebx
c000c4be:	ff e0                	jmp    eax
c000c4c0:	83 c4 08             	add    esp,0x8
c000c4c3:	5b                   	pop    ebx
c000c4c4:	c3                   	ret    
c000c4c5:	90                   	nop

c000c4c6 <Clock::Clock(char const*)>:
c000c4c6:	83 ec 0c             	sub    esp,0xc
c000c4c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4cd:	83 ec 08             	sub    esp,0x8
c000c4d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4d4:	50                   	push   eax
c000c4d5:	e8 ee 06 00 00       	call   c000cbc8 <Device::Device(char const*)>
c000c4da:	83 c4 10             	add    esp,0x10
c000c4dd:	ba cc 1b 02 c0       	mov    edx,0xc0021bcc
c000c4e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4e6:	89 10                	mov    DWORD PTR [eax],edx
c000c4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ec:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c4f6:	90                   	nop
c000c4f7:	83 c4 0c             	add    esp,0xc
c000c4fa:	c3                   	ret    
c000c4fb:	90                   	nop

c000c4fc <Clock::~Clock()>:
c000c4fc:	83 ec 0c             	sub    esp,0xc
c000c4ff:	ba cc 1b 02 c0       	mov    edx,0xc0021bcc
c000c504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c508:	89 10                	mov    DWORD PTR [eax],edx
c000c50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c50e:	83 ec 0c             	sub    esp,0xc
c000c511:	50                   	push   eax
c000c512:	e8 e1 03 00 00       	call   c000c8f8 <Device::~Device()>
c000c517:	83 c4 10             	add    esp,0x10
c000c51a:	90                   	nop
c000c51b:	83 c4 0c             	add    esp,0xc
c000c51e:	c3                   	ret    
c000c51f:	90                   	nop

c000c520 <Clock::~Clock()>:
c000c520:	83 ec 0c             	sub    esp,0xc
c000c523:	83 ec 0c             	sub    esp,0xc
c000c526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c52a:	e8 cd ff ff ff       	call   c000c4fc <Clock::~Clock()>
c000c52f:	83 c4 10             	add    esp,0x10
c000c532:	83 ec 08             	sub    esp,0x8
c000c535:	68 58 01 00 00       	push   0x158
c000c53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53e:	e8 05 e3 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000c543:	83 c4 10             	add    esp,0x10
c000c546:	83 c4 0c             	add    esp,0xc
c000c549:	c3                   	ret    

c000c54a <Clock::timeInSecondsLocal()>:
c000c54a:	53                   	push   ebx
c000c54b:	83 ec 14             	sub    esp,0x14
c000c54e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c552:	8b 10                	mov    edx,DWORD PTR [eax]
c000c554:	50                   	push   eax
c000c555:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c558:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c55f:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c565:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c56b:	89 cb                	mov    ebx,ecx
c000c56d:	c1 fb 1f             	sar    ebx,0x1f
c000c570:	01 c8                	add    eax,ecx
c000c572:	11 da                	adc    edx,ebx
c000c574:	83 c4 10             	add    esp,0x10
c000c577:	31 c9                	xor    ecx,ecx
c000c579:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c580:	74 05                	je     c000c587 <Clock::timeInSecondsLocal()+0x3d>
c000c582:	b9 08 07 00 00       	mov    ecx,0x708
c000c587:	31 db                	xor    ebx,ebx
c000c589:	01 c8                	add    eax,ecx
c000c58b:	11 da                	adc    edx,ebx
c000c58d:	83 c4 08             	add    esp,0x8
c000c590:	5b                   	pop    ebx
c000c591:	c3                   	ret    

c000c592 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c592:	57                   	push   edi
c000c593:	56                   	push   esi
c000c594:	53                   	push   ebx
c000c595:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c599:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c59d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c59f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c5a3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c5a6:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c5ad:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c5b3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c5b9:	99                   	cdq    
c000c5ba:	29 c6                	sub    esi,eax
c000c5bc:	19 d7                	sbb    edi,edx
c000c5be:	89 f0                	mov    eax,esi
c000c5c0:	89 fa                	mov    edx,edi
c000c5c2:	31 f6                	xor    esi,esi
c000c5c4:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c5cb:	74 05                	je     c000c5d2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c5cd:	be 08 07 00 00       	mov    esi,0x708
c000c5d2:	31 ff                	xor    edi,edi
c000c5d4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c5d8:	29 f0                	sub    eax,esi
c000c5da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c5de:	19 fa                	sbb    edx,edi
c000c5e0:	89 d8                	mov    eax,ebx
c000c5e2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c5e6:	5b                   	pop    ebx
c000c5e7:	5e                   	pop    esi
c000c5e8:	5f                   	pop    edi
c000c5e9:	ff e0                	jmp    eax

c000c5eb <datetimeToSeconds(datetime_t)>:
c000c5eb:	55                   	push   ebp
c000c5ec:	57                   	push   edi
c000c5ed:	56                   	push   esi
c000c5ee:	53                   	push   ebx
c000c5ef:	83 ec 0c             	sub    esp,0xc
c000c5f2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c5f6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c5fa:	89 d6                	mov    esi,edx
c000c5fc:	0f b6 c7             	movzx  eax,bh
c000c5ff:	c1 ee 10             	shr    esi,0x10
c000c602:	6b e8 3c             	imul   ebp,eax,0x3c
c000c605:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c60b:	0f b6 ce             	movzx  ecx,dh
c000c60e:	89 df                	mov    edi,ebx
c000c610:	49                   	dec    ecx
c000c611:	c1 ef 10             	shr    edi,0x10
c000c614:	0f b6 db             	movzx  ebx,bl
c000c617:	89 f8                	mov    eax,edi
c000c619:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c61f:	0f b6 f8             	movzx  edi,al
c000c622:	0f b6 d2             	movzx  edx,dl
c000c625:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c629:	01 d8                	add    eax,ebx
c000c62b:	0f b7 de             	movzx  ebx,si
c000c62e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c631:	c1 f8 1f             	sar    eax,0x1f
c000c634:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c638:	0f b6 c1             	movzx  eax,cl
c000c63b:	8b 0c 85 00 1c 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde400]
c000c642:	83 f8 01             	cmp    eax,0x1
c000c645:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c649:	76 27                	jbe    c000c672 <datetimeToSeconds(datetime_t)+0x87>
c000c64b:	83 e6 03             	and    esi,0x3
c000c64e:	75 22                	jne    c000c672 <datetimeToSeconds(datetime_t)+0x87>
c000c650:	31 d2                	xor    edx,edx
c000c652:	be 64 00 00 00       	mov    esi,0x64
c000c657:	89 d8                	mov    eax,ebx
c000c659:	f7 f6                	div    esi
c000c65b:	85 d2                	test   edx,edx
c000c65d:	75 12                	jne    c000c671 <datetimeToSeconds(datetime_t)+0x86>
c000c65f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c665:	be 90 01 00 00       	mov    esi,0x190
c000c66a:	99                   	cdq    
c000c66b:	f7 fe                	idiv   esi
c000c66d:	85 d2                	test   edx,edx
c000c66f:	75 01                	jne    c000c672 <datetimeToSeconds(datetime_t)+0x87>
c000c671:	41                   	inc    ecx
c000c672:	83 fb 46             	cmp    ebx,0x46
c000c675:	76 48                	jbe    c000c6bf <datetimeToSeconds(datetime_t)+0xd4>
c000c677:	be 46 00 00 00       	mov    esi,0x46
c000c67c:	bf 64 00 00 00       	mov    edi,0x64
c000c681:	bd 90 01 00 00       	mov    ebp,0x190
c000c686:	b8 6d 01 00 00       	mov    eax,0x16d
c000c68b:	f7 c6 03 00 00 00    	test   esi,0x3
c000c691:	75 23                	jne    c000c6b6 <datetimeToSeconds(datetime_t)+0xcb>
c000c693:	89 f0                	mov    eax,esi
c000c695:	99                   	cdq    
c000c696:	f7 ff                	idiv   edi
c000c698:	b8 6e 01 00 00       	mov    eax,0x16e
c000c69d:	85 d2                	test   edx,edx
c000c69f:	75 15                	jne    c000c6b6 <datetimeToSeconds(datetime_t)+0xcb>
c000c6a1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c6a7:	99                   	cdq    
c000c6a8:	f7 fd                	idiv   ebp
c000c6aa:	83 fa 01             	cmp    edx,0x1
c000c6ad:	19 c0                	sbb    eax,eax
c000c6af:	f7 d0                	not    eax
c000c6b1:	05 6e 01 00 00       	add    eax,0x16e
c000c6b6:	01 c1                	add    ecx,eax
c000c6b8:	46                   	inc    esi
c000c6b9:	39 de                	cmp    esi,ebx
c000c6bb:	7c c9                	jl     c000c686 <datetimeToSeconds(datetime_t)+0x9b>
c000c6bd:	eb 34                	jmp    c000c6f3 <datetimeToSeconds(datetime_t)+0x108>
c000c6bf:	74 32                	je     c000c6f3 <datetimeToSeconds(datetime_t)+0x108>
c000c6c1:	b8 45 00 00 00       	mov    eax,0x45
c000c6c6:	89 c2                	mov    edx,eax
c000c6c8:	83 e2 03             	and    edx,0x3
c000c6cb:	39 d8                	cmp    eax,ebx
c000c6cd:	7e 0f                	jle    c000c6de <datetimeToSeconds(datetime_t)+0xf3>
c000c6cf:	83 fa 01             	cmp    edx,0x1
c000c6d2:	19 d2                	sbb    edx,edx
c000c6d4:	48                   	dec    eax
c000c6d5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c6dc:	eb e8                	jmp    c000c6c6 <datetimeToSeconds(datetime_t)+0xdb>
c000c6de:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6e3:	85 d2                	test   edx,edx
c000c6e5:	75 0a                	jne    c000c6f1 <datetimeToSeconds(datetime_t)+0x106>
c000c6e7:	83 fb 01             	cmp    ebx,0x1
c000c6ea:	19 c0                	sbb    eax,eax
c000c6ec:	05 6e 01 00 00       	add    eax,0x16e
c000c6f1:	29 c1                	sub    ecx,eax
c000c6f3:	b8 80 51 01 00       	mov    eax,0x15180
c000c6f8:	f7 e9                	imul   ecx
c000c6fa:	03 04 24             	add    eax,DWORD PTR [esp]
c000c6fd:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c701:	83 c4 0c             	add    esp,0xc
c000c704:	5b                   	pop    ebx
c000c705:	5e                   	pop    esi
c000c706:	5f                   	pop    edi
c000c707:	5d                   	pop    ebp
c000c708:	c3                   	ret    
c000c709:	90                   	nop

c000c70a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c70a:	57                   	push   edi
c000c70b:	56                   	push   esi
c000c70c:	53                   	push   ebx
c000c70d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c711:	8b 06                	mov    eax,DWORD PTR [esi]
c000c713:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c716:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c71a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c71e:	e8 c8 fe ff ff       	call   c000c5eb <datetimeToSeconds(datetime_t)>
c000c723:	59                   	pop    ecx
c000c724:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c72b:	5b                   	pop    ebx
c000c72c:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c732:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c738:	89 cb                	mov    ebx,ecx
c000c73a:	c1 fb 1f             	sar    ebx,0x1f
c000c73d:	29 c8                	sub    eax,ecx
c000c73f:	19 da                	sbb    edx,ebx
c000c741:	31 c9                	xor    ecx,ecx
c000c743:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c74a:	74 05                	je     c000c751 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c74c:	b9 08 07 00 00       	mov    ecx,0x708
c000c751:	31 db                	xor    ebx,ebx
c000c753:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c757:	29 c8                	sub    eax,ecx
c000c759:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c75d:	19 da                	sbb    edx,ebx
c000c75f:	89 f8                	mov    eax,edi
c000c761:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c765:	5b                   	pop    ebx
c000c766:	5e                   	pop    esi
c000c767:	5f                   	pop    edi
c000c768:	ff e0                	jmp    eax

c000c76a <secondsToDatetime(unsigned long long)>:
c000c76a:	55                   	push   ebp
c000c76b:	57                   	push   edi
c000c76c:	56                   	push   esi
c000c76d:	53                   	push   ebx
c000c76e:	83 ec 1c             	sub    esp,0x1c
c000c771:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c775:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c779:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c77d:	6a 00                	push   0x0
c000c77f:	68 80 51 01 00       	push   0x15180
c000c784:	55                   	push   ebp
c000c785:	57                   	push   edi
c000c786:	e8 e5 30 01 00       	call   c001f870 <__udivdi3>
c000c78b:	83 c4 10             	add    esp,0x10
c000c78e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c794:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c798:	6a 00                	push   0x0
c000c79a:	68 80 51 01 00       	push   0x15180
c000c79f:	55                   	push   ebp
c000c7a0:	57                   	push   edi
c000c7a1:	bf 10 0e 00 00       	mov    edi,0xe10
c000c7a6:	e8 c5 31 01 00       	call   c001f970 <__umoddi3>
c000c7ab:	83 c4 10             	add    esp,0x10
c000c7ae:	99                   	cdq    
c000c7af:	f7 ff                	idiv   edi
c000c7b1:	bf 3c 00 00 00       	mov    edi,0x3c
c000c7b6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c7b9:	89 d0                	mov    eax,edx
c000c7bb:	99                   	cdq    
c000c7bc:	f7 ff                	idiv   edi
c000c7be:	85 db                	test   ebx,ebx
c000c7c0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c7c3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c7c6:	79 11                	jns    c000c7d9 <secondsToDatetime(unsigned long long)+0x6f>
c000c7c8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c7cc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c7d2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7d7:	eb 07                	jmp    c000c7e0 <secondsToDatetime(unsigned long long)+0x76>
c000c7d9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7de:	89 d8                	mov    eax,ebx
c000c7e0:	bf b4 05 00 00       	mov    edi,0x5b4
c000c7e5:	99                   	cdq    
c000c7e6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c7eb:	f7 f9                	idiv   ecx
c000c7ed:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c7f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7f6:	31 d2                	xor    edx,edx
c000c7f8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c800:	01 c3                	add    ebx,eax
c000c802:	89 d8                	mov    eax,ebx
c000c804:	f7 f1                	div    ecx
c000c806:	31 d2                	xor    edx,edx
c000c808:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c80b:	89 d8                	mov    eax,ebx
c000c80d:	f7 f7                	div    edi
c000c80f:	31 d2                	xor    edx,edx
c000c811:	29 c1                	sub    ecx,eax
c000c813:	89 d8                	mov    eax,ebx
c000c815:	f7 f5                	div    ebp
c000c817:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c81c:	29 c1                	sub    ecx,eax
c000c81e:	31 d2                	xor    edx,edx
c000c820:	89 c8                	mov    eax,ecx
c000c822:	f7 f5                	div    ebp
c000c824:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c829:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c82d:	31 d2                	xor    edx,edx
c000c82f:	89 c8                	mov    eax,ecx
c000c831:	f7 f5                	div    ebp
c000c833:	31 d2                	xor    edx,edx
c000c835:	01 c3                	add    ebx,eax
c000c837:	89 c8                	mov    eax,ecx
c000c839:	f7 f7                	div    edi
c000c83b:	bf 99 00 00 00       	mov    edi,0x99
c000c840:	29 c3                	sub    ebx,eax
c000c842:	31 d2                	xor    edx,edx
c000c844:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c84c:	29 c3                	sub    ebx,eax
c000c84e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c851:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c854:	bb 05 00 00 00       	mov    ebx,0x5
c000c859:	83 c1 02             	add    ecx,0x2
c000c85c:	89 c8                	mov    eax,ecx
c000c85e:	f7 f7                	div    edi
c000c860:	31 d2                	xor    edx,edx
c000c862:	89 c7                	mov    edi,eax
c000c864:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c86a:	83 c0 02             	add    eax,0x2
c000c86d:	f7 f3                	div    ebx
c000c86f:	89 eb                	mov    ebx,ebp
c000c871:	29 c3                	sub    ebx,eax
c000c873:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c879:	88 1e                	mov    BYTE PTR [esi],bl
c000c87b:	19 c0                	sbb    eax,eax
c000c87d:	31 d2                	xor    edx,edx
c000c87f:	83 e0 0c             	and    eax,0xc
c000c882:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c886:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c88e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c892:	83 f9 01             	cmp    ecx,0x1
c000c895:	0f 96 c2             	setbe  dl
c000c898:	41                   	inc    ecx
c000c899:	01 d0                	add    eax,edx
c000c89b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c89e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c8a2:	83 c4 1c             	add    esp,0x1c
c000c8a5:	89 f0                	mov    eax,esi
c000c8a7:	5b                   	pop    ebx
c000c8a8:	5e                   	pop    esi
c000c8a9:	5f                   	pop    edi
c000c8aa:	5d                   	pop    ebp
c000c8ab:	c2 04 00             	ret    0x4

c000c8ae <Clock::timeInDatetimeLocal()>:
c000c8ae:	53                   	push   ebx
c000c8af:	83 ec 14             	sub    esp,0x14
c000c8b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c8b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c8ba:	e8 8b fc ff ff       	call   c000c54a <Clock::timeInSecondsLocal()>
c000c8bf:	83 c4 0c             	add    esp,0xc
c000c8c2:	52                   	push   edx
c000c8c3:	50                   	push   eax
c000c8c4:	53                   	push   ebx
c000c8c5:	e8 a0 fe ff ff       	call   c000c76a <secondsToDatetime(unsigned long long)>
c000c8ca:	89 d8                	mov    eax,ebx
c000c8cc:	83 c4 14             	add    esp,0x14
c000c8cf:	5b                   	pop    ebx
c000c8d0:	c2 04 00             	ret    0x4
c000c8d3:	90                   	nop

c000c8d4 <Device::hibernate()>:
c000c8d4:	c3                   	ret    
c000c8d5:	90                   	nop

c000c8d6 <Device::wake()>:
c000c8d6:	c3                   	ret    
c000c8d7:	90                   	nop

c000c8d8 <Device::detect()>:
c000c8d8:	c3                   	ret    
c000c8d9:	90                   	nop

c000c8da <Device::disableLegacy()>:
c000c8da:	c3                   	ret    
c000c8db:	90                   	nop

c000c8dc <Device::powerSaving(PowerSavingLevel)>:
c000c8dc:	c3                   	ret    
c000c8dd:	90                   	nop

c000c8de <DriverlessDevice::close(int, int, void*)>:
c000c8de:	31 c0                	xor    eax,eax
c000c8e0:	c3                   	ret    
c000c8e1:	90                   	nop

c000c8e2 <DriverlessDevice::detect()>:
c000c8e2:	c3                   	ret    
c000c8e3:	90                   	nop

c000c8e4 <DriverlessDevice::open(int, int, void*)>:
c000c8e4:	83 ec 18             	sub    esp,0x18
c000c8e7:	68 30 1c 02 c0       	push   0xc0021c30
c000c8ec:	e8 22 4e 00 00       	call   c0011713 <KePanic(char const*)>
c000c8f1:	83 c8 ff             	or     eax,0xffffffff
c000c8f4:	83 c4 1c             	add    esp,0x1c
c000c8f7:	c3                   	ret    

c000c8f8 <Device::~Device()>:
c000c8f8:	ba f4 1c 02 c0       	mov    edx,0xc0021cf4
c000c8fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c901:	89 10                	mov    DWORD PTR [eax],edx
c000c903:	90                   	nop
c000c904:	c3                   	ret    
c000c905:	90                   	nop

c000c906 <Device::~Device()>:
c000c906:	83 ec 0c             	sub    esp,0xc
c000c909:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c90d:	e8 e6 ff ff ff       	call   c000c8f8 <Device::~Device()>
c000c912:	83 c4 04             	add    esp,0x4
c000c915:	83 ec 08             	sub    esp,0x8
c000c918:	68 58 01 00 00       	push   0x158
c000c91d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c921:	e8 22 df ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000c926:	83 c4 10             	add    esp,0x10
c000c929:	83 c4 0c             	add    esp,0xc
c000c92c:	c3                   	ret    
c000c92d:	90                   	nop

c000c92e <Device::findAndLoadDriver()>:
c000c92e:	c7 44 24 04 4e 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c4e
c000c936:	e9 3a e0 ff ff       	jmp    c000a975 <Dbg::kprintf(char const*, ...)>
c000c93b:	90                   	nop

c000c93c <Device::preOpenPCI(PCIDeviceInfo)>:
c000c93c:	57                   	push   edi
c000c93d:	b9 09 00 00 00       	mov    ecx,0x9
c000c942:	56                   	push   esi
c000c943:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c947:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c94b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c955:	81 c7 18 01 00 00    	add    edi,0x118
c000c95b:	fc                   	cld    
c000c95c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c95e:	5e                   	pop    esi
c000c95f:	5f                   	pop    edi
c000c960:	c3                   	ret    
c000c961:	90                   	nop

c000c962 <Device::preOpenACPI(void*, char*, char*)>:
c000c962:	57                   	push   edi
c000c963:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c968:	56                   	push   esi
c000c969:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c96d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c971:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c97b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c981:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c987:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c98b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c98d:	b9 0e 00 00 00       	mov    ecx,0xe
c000c992:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c998:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c99c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c99e:	5e                   	pop    esi
c000c99f:	5f                   	pop    edi
c000c9a0:	c3                   	ret    
c000c9a1:	90                   	nop

c000c9a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c9a2:	53                   	push   ebx
c000c9a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c9b3:	0f b6 c0             	movzx  eax,al
c000c9b6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c9ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9c2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9c6:	5b                   	pop    ebx
c000c9c7:	e9 e4 05 00 00       	jmp    c000cfb0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c9cc <Device::getParent()>:
c000c9cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9d0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c9d6:	c3                   	ret    
c000c9d7:	90                   	nop

c000c9d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c9d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9e0:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c9e5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9f1:	e9 22 07 00 00       	jmp    c000d118 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c9f6 <Device::addChild(Device*)>:
c000c9f6:	53                   	push   ebx
c000c9f7:	83 ec 08             	sub    esp,0x8
c000c9fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca02:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ca08:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ca0e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ca10:	85 d2                	test   edx,edx
c000ca12:	74 04                	je     c000ca18 <Device::addChild(Device*)+0x22>
c000ca14:	89 d3                	mov    ebx,edx
c000ca16:	eb f6                	jmp    c000ca0e <Device::addChild(Device*)+0x18>
c000ca18:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ca1b:	83 ec 0c             	sub    esp,0xc
c000ca1e:	6a 08                	push   0x8
c000ca20:	e8 c1 b0 ff ff       	call   c0007ae6 <malloc>
c000ca25:	89 03                	mov    DWORD PTR [ebx],eax
c000ca27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca34:	83 c4 18             	add    esp,0x18
c000ca37:	5b                   	pop    ebx
c000ca38:	c3                   	ret    
c000ca39:	90                   	nop

c000ca3a <Device::removeAllChildren()>:
c000ca3a:	56                   	push   esi
c000ca3b:	53                   	push   ebx
c000ca3c:	52                   	push   edx
c000ca3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca41:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca47:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca4a:	74 17                	je     c000ca63 <Device::removeAllChildren()+0x29>
c000ca4c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca4f:	85 c0                	test   eax,eax
c000ca51:	74 0c                	je     c000ca5f <Device::removeAllChildren()+0x25>
c000ca53:	83 ec 0c             	sub    esp,0xc
c000ca56:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca58:	50                   	push   eax
c000ca59:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca5c:	83 c4 10             	add    esp,0x10
c000ca5f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca61:	eb e4                	jmp    c000ca47 <Device::removeAllChildren()+0xd>
c000ca63:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca7c:	58                   	pop    eax
c000ca7d:	5b                   	pop    ebx
c000ca7e:	5e                   	pop    esi
c000ca7f:	c3                   	ret    

c000ca80 <Device::hibernateAll()>:
c000ca80:	53                   	push   ebx
c000ca81:	83 ec 14             	sub    esp,0x14
c000ca84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca88:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca8a:	53                   	push   ebx
c000ca8b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca8e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca9a:	74 0f                	je     c000caab <Device::hibernateAll()+0x2b>
c000ca9c:	83 ec 0c             	sub    esp,0xc
c000ca9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000caa2:	e8 d9 ff ff ff       	call   c000ca80 <Device::hibernateAll()>
c000caa7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caa9:	eb e9                	jmp    c000ca94 <Device::hibernateAll()+0x14>
c000caab:	83 c4 08             	add    esp,0x8
c000caae:	5b                   	pop    ebx
c000caaf:	c3                   	ret    

c000cab0 <Device::wakeAll()>:
c000cab0:	53                   	push   ebx
c000cab1:	83 ec 14             	sub    esp,0x14
c000cab4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cab8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caba:	53                   	push   ebx
c000cabb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000cabe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cac4:	83 c4 10             	add    esp,0x10
c000cac7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000caca:	74 0f                	je     c000cadb <Device::wakeAll()+0x2b>
c000cacc:	83 ec 0c             	sub    esp,0xc
c000cacf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cad2:	e8 d9 ff ff ff       	call   c000cab0 <Device::wakeAll()>
c000cad7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cad9:	eb e9                	jmp    c000cac4 <Device::wakeAll()+0x14>
c000cadb:	83 c4 08             	add    esp,0x8
c000cade:	5b                   	pop    ebx
c000cadf:	c3                   	ret    

c000cae0 <Device::detectAll()>:
c000cae0:	53                   	push   ebx
c000cae1:	83 ec 14             	sub    esp,0x14
c000cae4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caea:	53                   	push   ebx
c000caeb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000caee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000caf4:	83 c4 10             	add    esp,0x10
c000caf7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cafa:	74 0f                	je     c000cb0b <Device::detectAll()+0x2b>
c000cafc:	83 ec 0c             	sub    esp,0xc
c000caff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb02:	e8 d9 ff ff ff       	call   c000cae0 <Device::detectAll()>
c000cb07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb09:	eb e9                	jmp    c000caf4 <Device::detectAll()+0x14>
c000cb0b:	83 c4 08             	add    esp,0x8
c000cb0e:	5b                   	pop    ebx
c000cb0f:	c3                   	ret    

c000cb10 <Device::disableLegacyAll()>:
c000cb10:	c3                   	ret    
c000cb11:	90                   	nop

c000cb12 <Device::loadDriversForAll()>:
c000cb12:	c3                   	ret    
c000cb13:	90                   	nop

c000cb14 <Device::closeAll()>:
c000cb14:	53                   	push   ebx
c000cb15:	83 ec 14             	sub    esp,0x14
c000cb18:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb1c:	68 88 1c 02 c0       	push   0xc0021c88
c000cb21:	e8 4f de ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000cb26:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb28:	6a 00                	push   0x0
c000cb2a:	6a 00                	push   0x0
c000cb2c:	6a 00                	push   0x0
c000cb2e:	53                   	push   ebx
c000cb2f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cb32:	83 c4 14             	add    esp,0x14
c000cb35:	68 9c 1c 02 c0       	push   0xc0021c9c
c000cb3a:	e8 36 de ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000cb3f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb45:	83 c4 10             	add    esp,0x10
c000cb48:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb4b:	74 26                	je     c000cb73 <Device::closeAll()+0x5f>
c000cb4d:	83 ec 0c             	sub    esp,0xc
c000cb50:	68 b0 1c 02 c0       	push   0xc0021cb0
c000cb55:	e8 1b de ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000cb5a:	59                   	pop    ecx
c000cb5b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb5e:	e8 b1 ff ff ff       	call   c000cb14 <Device::closeAll()>
c000cb63:	c7 04 24 c4 1c 02 c0 	mov    DWORD PTR [esp],0xc0021cc4
c000cb6a:	e8 06 de ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000cb6f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb71:	eb d2                	jmp    c000cb45 <Device::closeAll()+0x31>
c000cb73:	c7 44 24 10 d8 1c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021cd8
c000cb7b:	83 c4 08             	add    esp,0x8
c000cb7e:	5b                   	pop    ebx
c000cb7f:	e9 f1 dd ff ff       	jmp    c000a975 <Dbg::kprintf(char const*, ...)>

c000cb84 <Device::powerSavingAll(PowerSavingLevel)>:
c000cb84:	56                   	push   esi
c000cb85:	53                   	push   ebx
c000cb86:	83 ec 0c             	sub    esp,0xc
c000cb89:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb8d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb91:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb93:	56                   	push   esi
c000cb94:	53                   	push   ebx
c000cb95:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cb98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb9e:	83 c4 10             	add    esp,0x10
c000cba1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cba4:	74 0f                	je     c000cbb5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cba6:	52                   	push   edx
c000cba7:	52                   	push   edx
c000cba8:	56                   	push   esi
c000cba9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cbac:	e8 d3 ff ff ff       	call   c000cb84 <Device::powerSavingAll(PowerSavingLevel)>
c000cbb1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cbb3:	eb e9                	jmp    c000cb9e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cbb5:	58                   	pop    eax
c000cbb6:	5b                   	pop    ebx
c000cbb7:	5e                   	pop    esi
c000cbb8:	c3                   	ret    
c000cbb9:	90                   	nop

c000cbba <Device::setName(char const*)>:
c000cbba:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cbc2:	e9 79 3a ff ff       	jmp    c0000640 <strcpy>
c000cbc7:	90                   	nop

c000cbc8 <Device::Device(char const*)>:
c000cbc8:	83 ec 1c             	sub    esp,0x1c
c000cbcb:	ba f4 1c 02 c0       	mov    edx,0xc0021cf4
c000cbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbd4:	89 10                	mov    DWORD PTR [eax],edx
c000cbd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbda:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cbe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbe8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cbf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbf6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc04:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc0e:	83 ec 08             	sub    esp,0x8
c000cc11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc19:	e8 9c ff ff ff       	call   c000cbba <Device::setName(char const*)>
c000cc1e:	83 c4 10             	add    esp,0x10
c000cc21:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cc29:	83 ec 0c             	sub    esp,0xc
c000cc2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc30:	e8 b1 ae ff ff       	call   c0007ae6 <malloc>
c000cc35:	83 c4 10             	add    esp,0x10
c000cc38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc3e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc45:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cc49:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cc4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc53:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc59:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc63:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc74:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cc7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc7f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc8a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc98:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cca6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000ccb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccb4:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000ccbe:	90                   	nop
c000ccbf:	83 c4 1c             	add    esp,0x1c
c000ccc2:	c3                   	ret    
c000ccc3:	90                   	nop

c000ccc4 <Device::getName()>:
c000ccc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccc8:	05 d0 00 00 00       	add    eax,0xd0
c000cccd:	c3                   	ret    

c000ccce <DriverlessDevice::DriverlessDevice(char const*)>:
c000ccce:	83 ec 0c             	sub    esp,0xc
c000ccd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccd5:	83 ec 08             	sub    esp,0x8
c000ccd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdc:	50                   	push   eax
c000ccdd:	e8 e6 fe ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000cce2:	83 c4 10             	add    esp,0x10
c000cce5:	ba 20 1d 02 c0       	mov    edx,0xc0021d20
c000ccea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccee:	89 10                	mov    DWORD PTR [eax],edx
c000ccf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ccfe:	90                   	nop
c000ccff:	83 c4 0c             	add    esp,0xc
c000cd02:	c3                   	ret    
c000cd03:	90                   	nop

c000cd04 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cd04:	57                   	push   edi
c000cd05:	56                   	push   esi
c000cd06:	53                   	push   ebx
c000cd07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cd0f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cd13:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cd19:	75 0c                	jne    c000cd27 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cd1b:	52                   	push   edx
c000cd1c:	52                   	push   edx
c000cd1d:	53                   	push   ebx
c000cd1e:	56                   	push   esi
c000cd1f:	e8 fe 2f 01 00       	call   c001fd22 <LinkedList<Device>::addElement(Device*)>
c000cd24:	83 c4 10             	add    esp,0x10
c000cd27:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cd2d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cd30:	74 12                	je     c000cd44 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cd32:	50                   	push   eax
c000cd33:	57                   	push   edi
c000cd34:	56                   	push   esi
c000cd35:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cd38:	e8 c7 ff ff ff       	call   c000cd04 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd3d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cd3f:	83 c4 10             	add    esp,0x10
c000cd42:	eb e9                	jmp    c000cd2d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cd44:	5b                   	pop    ebx
c000cd45:	5e                   	pop    esi
c000cd46:	5f                   	pop    edi
c000cd47:	c3                   	ret    

c000cd48 <getDevicesOfType(DeviceType)>:
c000cd48:	53                   	push   ebx
c000cd49:	83 ec 14             	sub    esp,0x14
c000cd4c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd50:	53                   	push   ebx
c000cd51:	e8 a8 30 01 00       	call   c001fdfe <LinkedList<Device>::LinkedList()>
c000cd56:	83 c4 0c             	add    esp,0xc
c000cd59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd5d:	53                   	push   ebx
c000cd5e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cd64:	e8 9b ff ff ff       	call   c000cd04 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd69:	89 d8                	mov    eax,ebx
c000cd6b:	83 c4 18             	add    esp,0x18
c000cd6e:	5b                   	pop    ebx
c000cd6f:	c2 04 00             	ret    0x4
c000cd72:	66 90                	xchg   ax,ax

c000cd74 <HardDiskController::HardDiskController(char const*)>:
c000cd74:	83 ec 0c             	sub    esp,0xc
c000cd77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd7b:	83 ec 08             	sub    esp,0x8
c000cd7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd82:	50                   	push   eax
c000cd83:	e8 40 fe ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000cd88:	83 c4 10             	add    esp,0x10
c000cd8b:	ba 4c 1d 02 c0       	mov    edx,0xc0021d4c
c000cd90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd94:	89 10                	mov    DWORD PTR [eax],edx
c000cd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd9a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cda4:	90                   	nop
c000cda5:	83 c4 0c             	add    esp,0xc
c000cda8:	c3                   	ret    
c000cda9:	90                   	nop
c000cdaa:	66 90                	xchg   ax,ax

c000cdac <HardDiskController::~HardDiskController()>:
c000cdac:	83 ec 0c             	sub    esp,0xc
c000cdaf:	ba 4c 1d 02 c0       	mov    edx,0xc0021d4c
c000cdb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb8:	89 10                	mov    DWORD PTR [eax],edx
c000cdba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdbe:	83 ec 0c             	sub    esp,0xc
c000cdc1:	50                   	push   eax
c000cdc2:	e8 31 fb ff ff       	call   c000c8f8 <Device::~Device()>
c000cdc7:	83 c4 10             	add    esp,0x10
c000cdca:	90                   	nop
c000cdcb:	83 c4 0c             	add    esp,0xc
c000cdce:	c3                   	ret    
c000cdcf:	90                   	nop

c000cdd0 <HardDiskController::~HardDiskController()>:
c000cdd0:	83 ec 0c             	sub    esp,0xc
c000cdd3:	83 ec 0c             	sub    esp,0xc
c000cdd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdda:	e8 cd ff ff ff       	call   c000cdac <HardDiskController::~HardDiskController()>
c000cddf:	83 c4 10             	add    esp,0x10
c000cde2:	83 ec 08             	sub    esp,0x8
c000cde5:	68 58 01 00 00       	push   0x158
c000cdea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdee:	e8 55 da ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000cdf3:	83 c4 10             	add    esp,0x10
c000cdf6:	83 c4 0c             	add    esp,0xc
c000cdf9:	c3                   	ret    

c000cdfa <PhysicalDisk::eject()>:
c000cdfa:	83 c8 ff             	or     eax,0xffffffff
c000cdfd:	c3                   	ret    

c000cdfe <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cdfe:	83 ec 0c             	sub    esp,0xc
c000ce01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce05:	83 ec 08             	sub    esp,0x8
c000ce08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce0c:	50                   	push   eax
c000ce0d:	e8 b6 fd ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000ce12:	83 c4 10             	add    esp,0x10
c000ce15:	ba 78 1d 02 c0       	mov    edx,0xc0021d78
c000ce1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce1e:	89 10                	mov    DWORD PTR [eax],edx
c000ce20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce24:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ce2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce2f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ce36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce3a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ce44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce48:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce4c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ce52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce56:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ce60:	90                   	nop
c000ce61:	83 c4 0c             	add    esp,0xc
c000ce64:	c3                   	ret    
c000ce65:	90                   	nop

c000ce66 <PhysicalDisk::startCache()>:
c000ce66:	56                   	push   esi
c000ce67:	53                   	push   ebx
c000ce68:	83 ec 10             	sub    esp,0x10
c000ce6b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce6f:	6a 44                	push   0x44
c000ce71:	e8 70 ac ff ff       	call   c0007ae6 <malloc>
c000ce76:	89 c6                	mov    esi,eax
c000ce78:	58                   	pop    eax
c000ce79:	5a                   	pop    edx
c000ce7a:	53                   	push   ebx
c000ce7b:	56                   	push   esi
c000ce7c:	e8 7b 17 00 00       	call   c000e5fc <VCache::VCache(PhysicalDisk*)>
c000ce81:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce87:	83 c4 14             	add    esp,0x14
c000ce8a:	5b                   	pop    ebx
c000ce8b:	5e                   	pop    esi
c000ce8c:	c3                   	ret    
c000ce8d:	90                   	nop

c000ce8e <PhysicalDisk::~PhysicalDisk()>:
c000ce8e:	83 ec 0c             	sub    esp,0xc
c000ce91:	ba 78 1d 02 c0       	mov    edx,0xc0021d78
c000ce96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce9a:	89 10                	mov    DWORD PTR [eax],edx
c000ce9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cea0:	83 ec 0c             	sub    esp,0xc
c000cea3:	50                   	push   eax
c000cea4:	e8 4f fa ff ff       	call   c000c8f8 <Device::~Device()>
c000cea9:	83 c4 10             	add    esp,0x10
c000ceac:	90                   	nop
c000cead:	83 c4 0c             	add    esp,0xc
c000ceb0:	c3                   	ret    
c000ceb1:	90                   	nop

c000ceb2 <PhysicalDisk::~PhysicalDisk()>:
c000ceb2:	83 ec 0c             	sub    esp,0xc
c000ceb5:	83 ec 0c             	sub    esp,0xc
c000ceb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cebc:	e8 cd ff ff ff       	call   c000ce8e <PhysicalDisk::~PhysicalDisk()>
c000cec1:	83 c4 10             	add    esp,0x10
c000cec4:	83 ec 08             	sub    esp,0x8
c000cec7:	68 6c 01 00 00       	push   0x16c
c000cecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced0:	e8 73 d9 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000ced5:	83 c4 10             	add    esp,0x10
c000ced8:	83 c4 0c             	add    esp,0xc
c000cedb:	c3                   	ret    

c000cedc <int_handler>:
c000cedc:	55                   	push   ebp
c000cedd:	57                   	push   edi
c000cede:	56                   	push   esi
c000cedf:	53                   	push   ebx
c000cee0:	83 ec 0c             	sub    esp,0xc
c000cee3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cee7:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ceee:	74 0b                	je     c000cefb <int_handler+0x1f>
c000cef0:	fa                   	cli    
c000cef1:	f4                   	hlt    
c000cef2:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cef9:	75 f5                	jne    c000cef0 <int_handler+0x14>
c000cefb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cefe:	8d 46 e0             	lea    eax,[esi-0x20]
c000cf01:	83 f8 17             	cmp    eax,0x17
c000cf04:	76 40                	jbe    c000cf46 <int_handler+0x6a>
c000cf06:	c1 e6 04             	shl    esi,0x4
c000cf09:	31 db                	xor    ebx,ebx
c000cf0b:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000cf11:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000cf17:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cf1b:	85 c0                	test   eax,eax
c000cf1d:	74 13                	je     c000cf32 <int_handler+0x56>
c000cf1f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cf22:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cf26:	74 2c                	je     c000cf54 <int_handler+0x78>
c000cf28:	83 ec 08             	sub    esp,0x8
c000cf2b:	52                   	push   edx
c000cf2c:	57                   	push   edi
c000cf2d:	ff d0                	call   eax
c000cf2f:	83 c4 10             	add    esp,0x10
c000cf32:	83 c3 01             	add    ebx,0x1
c000cf35:	83 fb 04             	cmp    ebx,0x4
c000cf38:	75 dd                	jne    c000cf17 <int_handler+0x3b>
c000cf3a:	83 c4 0c             	add    esp,0xc
c000cf3d:	31 c0                	xor    eax,eax
c000cf3f:	5b                   	pop    ebx
c000cf40:	31 d2                	xor    edx,edx
c000cf42:	5e                   	pop    esi
c000cf43:	5f                   	pop    edi
c000cf44:	5d                   	pop    ebp
c000cf45:	c3                   	ret    
c000cf46:	83 ec 0c             	sub    esp,0xc
c000cf49:	50                   	push   eax
c000cf4a:	e8 71 b5 00 00       	call   c00184c0 <HalEndOfInterrupt(int)>
c000cf4f:	83 c4 10             	add    esp,0x10
c000cf52:	eb b2                	jmp    c000cf06 <int_handler+0x2a>
c000cf54:	83 ec 08             	sub    esp,0x8
c000cf57:	52                   	push   edx
c000cf58:	57                   	push   edi
c000cf59:	ff d0                	call   eax
c000cf5b:	83 c4 10             	add    esp,0x10
c000cf5e:	83 c4 0c             	add    esp,0xc
c000cf61:	5b                   	pop    ebx
c000cf62:	5e                   	pop    esi
c000cf63:	5f                   	pop    edi
c000cf64:	5d                   	pop    ebp
c000cf65:	c3                   	ret    

c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cf66:	56                   	push   esi
c000cf67:	31 c0                	xor    eax,eax
c000cf69:	53                   	push   ebx
c000cf6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf72:	89 ca                	mov    edx,ecx
c000cf74:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf78:	c1 e2 04             	shl    edx,0x4
c000cf7b:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf83:	74 17                	je     c000cf9c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf85:	83 c0 01             	add    eax,0x1
c000cf88:	83 f8 04             	cmp    eax,0x4
c000cf8b:	75 ee                	jne    c000cf7b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf8d:	c7 44 24 0c a8 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021da8
c000cf95:	5b                   	pop    ebx
c000cf96:	5e                   	pop    esi
c000cf97:	e9 77 47 00 00       	jmp    c0011713 <KePanic(char const*)>
c000cf9c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf9f:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cfa6:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cfad:	5b                   	pop    ebx
c000cfae:	5e                   	pop    esi
c000cfaf:	c3                   	ret    

c000cfb0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cfb0:	57                   	push   edi
c000cfb1:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cfb7:	56                   	push   esi
c000cfb8:	53                   	push   ebx
c000cfb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cfbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cfc1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cfc8:	74 54                	je     c000d01e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cfca:	89 c7                	mov    edi,eax
c000cfcc:	84 c0                	test   al,al
c000cfce:	74 1d                	je     c000cfed <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cfd0:	83 fe 0f             	cmp    esi,0xf
c000cfd3:	0f 8f d5 00 00 00    	jg     c000d0ae <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cfd9:	0f b6 b6 68 39 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc698]
c000cfe0:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cfe8:	d1 ef                	shr    edi,1
c000cfea:	83 e7 01             	and    edi,0x1
c000cfed:	83 ec 08             	sub    esp,0x8
c000cff0:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cff5:	31 db                	xor    ebx,ebx
c000cff7:	50                   	push   eax
c000cff8:	68 b5 1d 02 c0       	push   0xc0021db5
c000cffd:	e8 73 d9 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000d002:	83 c4 10             	add    esp,0x10
c000d005:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000d00a:	85 c0                	test   eax,eax
c000d00c:	7f 55                	jg     c000d063 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000d00e:	83 ec 0c             	sub    esp,0xc
c000d011:	68 cc 1d 02 c0       	push   0xc0021dcc
c000d016:	e8 f8 46 00 00       	call   c0011713 <KePanic(char const*)>
c000d01b:	83 c4 10             	add    esp,0x10
c000d01e:	8d 7e 20             	lea    edi,[esi+0x20]
c000d021:	89 f8                	mov    eax,edi
c000d023:	31 d2                	xor    edx,edx
c000d025:	c1 e0 04             	shl    eax,0x4
c000d028:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000d02f:	85 c9                	test   ecx,ecx
c000d031:	0f 84 8e 00 00 00    	je     c000d0c5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000d037:	83 c2 01             	add    edx,0x1
c000d03a:	83 fa 04             	cmp    edx,0x4
c000d03d:	75 e9                	jne    c000d028 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d03f:	83 ec 0c             	sub    esp,0xc
c000d042:	68 20 1e 02 c0       	push   0xc0021e20
c000d047:	e8 c7 46 00 00       	call   c0011713 <KePanic(char const*)>
c000d04c:	83 c4 10             	add    esp,0x10
c000d04f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d054:	5b                   	pop    ebx
c000d055:	5e                   	pop    esi
c000d056:	5f                   	pop    edi
c000d057:	c3                   	ret    
c000d058:	83 c3 01             	add    ebx,0x1
c000d05b:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000d061:	7e ab                	jle    c000d00e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000d063:	83 ec 08             	sub    esp,0x8
c000d066:	8b 04 9d e0 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f20]
c000d06d:	56                   	push   esi
c000d06e:	50                   	push   eax
c000d06f:	e8 d6 1b 01 00       	call   c001ec4a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d074:	83 c4 10             	add    esp,0x10
c000d077:	84 c0                	test   al,al
c000d079:	74 dd                	je     c000d058 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000d07b:	83 ec 04             	sub    esp,0x4
c000d07e:	89 f8                	mov    eax,edi
c000d080:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d087:	0f b6 f8             	movzx  edi,al
c000d08a:	57                   	push   edi
c000d08b:	8d 7e 20             	lea    edi,[esi+0x20]
c000d08e:	6a 00                	push   0x0
c000d090:	89 f8                	mov    eax,edi
c000d092:	0f b6 c0             	movzx  eax,al
c000d095:	50                   	push   eax
c000d096:	89 f0                	mov    eax,esi
c000d098:	6a 00                	push   0x0
c000d09a:	0f b6 c0             	movzx  eax,al
c000d09d:	6a 00                	push   0x0
c000d09f:	50                   	push   eax
c000d0a0:	53                   	push   ebx
c000d0a1:	e8 10 1d 01 00       	call   c001edb6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d0a6:	83 c4 20             	add    esp,0x20
c000d0a9:	e9 73 ff ff ff       	jmp    c000d021 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000d0ae:	83 ec 0c             	sub    esp,0xc
c000d0b1:	31 ff                	xor    edi,edi
c000d0b3:	68 e8 1d 02 c0       	push   0xc0021de8
c000d0b8:	e8 56 46 00 00       	call   c0011713 <KePanic(char const*)>
c000d0bd:	83 c4 10             	add    esp,0x10
c000d0c0:	e9 28 ff ff ff       	jmp    c000cfed <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000d0c5:	8d 04 ba             	lea    eax,[edx+edi*4]
c000d0c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d0cc:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d0d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d0d7:	5b                   	pop    ebx
c000d0d8:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d0df:	89 f0                	mov    eax,esi
c000d0e1:	5e                   	pop    esi
c000d0e2:	5f                   	pop    edi
c000d0e3:	c3                   	ret    

c000d0e4 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d0e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0ec:	c1 e0 04             	shl    eax,0x4
c000d0ef:	8d 50 10             	lea    edx,[eax+0x10]
c000d0f2:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d0f8:	74 08                	je     c000d102 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d0fa:	83 c0 04             	add    eax,0x4
c000d0fd:	39 d0                	cmp    eax,edx
c000d0ff:	75 f1                	jne    c000d0f2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d101:	c3                   	ret    
c000d102:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d10c:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d116:	eb e2                	jmp    c000d0fa <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d118 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d118:	53                   	push   ebx
c000d119:	83 ec 08             	sub    esp,0x8
c000d11c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d120:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d125:	74 0e                	je     c000d135 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d127:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d12c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d133:	75 37                	jne    c000d16c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000d135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d139:	83 c0 20             	add    eax,0x20
c000d13c:	c1 e0 04             	shl    eax,0x4
c000d13f:	8d 50 10             	lea    edx,[eax+0x10]
c000d142:	39 98 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ebx
c000d148:	74 0c                	je     c000d156 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000d14a:	83 c0 04             	add    eax,0x4
c000d14d:	39 d0                	cmp    eax,edx
c000d14f:	75 f1                	jne    c000d142 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000d151:	83 c4 08             	add    esp,0x8
c000d154:	5b                   	pop    ebx
c000d155:	c3                   	ret    
c000d156:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d160:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d16a:	eb de                	jmp    c000d14a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000d16c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000d171:	7f 11                	jg     c000d184 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000d173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d177:	0f b6 80 68 39 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc698]
c000d17e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d182:	eb b1                	jmp    c000d135 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d184:	83 ec 0c             	sub    esp,0xc
c000d187:	68 d9 1d 02 c0       	push   0xc0021dd9
c000d18c:	e8 82 45 00 00       	call   c0011713 <KePanic(char const*)>
c000d191:	83 c4 10             	add    esp,0x10
c000d194:	eb 9f                	jmp    c000d135 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000d196 <setupINTS()>:
c000d196:	31 c0                	xor    eax,eax
c000d198:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d1a2:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d1ac:	c7 80 24 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bdc],0x0
c000d1b6:	c7 80 24 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bdc],0x0
c000d1c0:	c7 80 28 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd8],0x0
c000d1ca:	c7 80 28 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd8],0x0
c000d1d4:	c7 80 2c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd4],0x0
c000d1de:	c7 80 2c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd4],0x0
c000d1e8:	83 c0 10             	add    eax,0x10
c000d1eb:	3d 00 10 00 00       	cmp    eax,0x1000
c000d1f0:	75 a6                	jne    c000d198 <setupINTS()+0x2>
c000d1f2:	c3                   	ret    

c000d1f3 <convertLegacyIRQNumber(int)>:
c000d1f3:	83 ec 0c             	sub    esp,0xc
c000d1f6:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d200:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d207:	74 0c                	je     c000d215 <convertLegacyIRQNumber(int)+0x22>
c000d209:	83 f8 0f             	cmp    eax,0xf
c000d20c:	7f 0b                	jg     c000d219 <convertLegacyIRQNumber(int)+0x26>
c000d20e:	0f b6 80 68 39 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc698]
c000d215:	83 c4 0c             	add    esp,0xc
c000d218:	c3                   	ret    
c000d219:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d21d:	83 ec 0c             	sub    esp,0xc
c000d220:	68 e8 1d 02 c0       	push   0xc0021de8
c000d225:	e8 e9 44 00 00       	call   c0011713 <KePanic(char const*)>
c000d22a:	83 c4 10             	add    esp,0x10
c000d22d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d231:	83 c4 0c             	add    esp,0xc
c000d234:	c3                   	ret    
c000d235:	90                   	nop

c000d236 <startGUI(void*)>:
c000d236:	55                   	push   ebp
c000d237:	89 e5                	mov    ebp,esp
c000d239:	53                   	push   ebx
c000d23a:	83 ec 04             	sub    esp,0x4
c000d23d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d242:	83 e8 01             	sub    eax,0x1
c000d245:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d24a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d24f:	85 c0                	test   eax,eax
c000d251:	75 01                	jne    c000d254 <startGUI(void*)+0x1e>
c000d253:	fb                   	sti    
c000d254:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d25a:	83 ec 08             	sub    esp,0x8
c000d25d:	6a 01                	push   0x1
c000d25f:	68 45 1e 02 c0       	push   0xc0021e45
c000d264:	e8 30 85 00 00       	call   c0015799 <Thr::loadDLL(char const*, bool)>
c000d269:	83 c4 10             	add    esp,0x10
c000d26c:	83 ec 08             	sub    esp,0x8
c000d26f:	53                   	push   ebx
c000d270:	50                   	push   eax
c000d271:	e8 54 87 00 00       	call   c00159ca <Thr::executeDLL(unsigned long, void*)>
c000d276:	83 c4 10             	add    esp,0x10
c000d279:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d27f:	83 ec 08             	sub    esp,0x8
c000d282:	6a 01                	push   0x1
c000d284:	68 5f 1e 02 c0       	push   0xc0021e5f
c000d289:	e8 0b 85 00 00       	call   c0015799 <Thr::loadDLL(char const*, bool)>
c000d28e:	83 c4 10             	add    esp,0x10
c000d291:	83 ec 08             	sub    esp,0x8
c000d294:	53                   	push   ebx
c000d295:	50                   	push   eax
c000d296:	e8 2f 87 00 00       	call   c00159ca <Thr::executeDLL(unsigned long, void*)>
c000d29b:	83 c4 10             	add    esp,0x10
c000d29e:	90                   	nop
c000d29f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2a2:	c9                   	leave  
c000d2a3:	c3                   	ret    

c000d2a4 <startGUIVESA(void*)>:
c000d2a4:	55                   	push   ebp
c000d2a5:	89 e5                	mov    ebp,esp
c000d2a7:	53                   	push   ebx
c000d2a8:	83 ec 04             	sub    esp,0x4
c000d2ab:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2b0:	83 e8 01             	sub    eax,0x1
c000d2b3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d2b8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2bd:	85 c0                	test   eax,eax
c000d2bf:	75 01                	jne    c000d2c2 <startGUIVESA(void*)+0x1e>
c000d2c1:	fb                   	sti    
c000d2c2:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2c8:	83 ec 08             	sub    esp,0x8
c000d2cb:	6a 01                	push   0x1
c000d2cd:	68 7d 1e 02 c0       	push   0xc0021e7d
c000d2d2:	e8 c2 84 00 00       	call   c0015799 <Thr::loadDLL(char const*, bool)>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	83 ec 08             	sub    esp,0x8
c000d2dd:	53                   	push   ebx
c000d2de:	50                   	push   eax
c000d2df:	e8 e6 86 00 00       	call   c00159ca <Thr::executeDLL(unsigned long, void*)>
c000d2e4:	83 c4 10             	add    esp,0x10
c000d2e7:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2ed:	83 ec 08             	sub    esp,0x8
c000d2f0:	6a 01                	push   0x1
c000d2f2:	68 5f 1e 02 c0       	push   0xc0021e5f
c000d2f7:	e8 9d 84 00 00       	call   c0015799 <Thr::loadDLL(char const*, bool)>
c000d2fc:	83 c4 10             	add    esp,0x10
c000d2ff:	83 ec 08             	sub    esp,0x8
c000d302:	53                   	push   ebx
c000d303:	50                   	push   eax
c000d304:	e8 c1 86 00 00       	call   c00159ca <Thr::executeDLL(unsigned long, void*)>
c000d309:	83 c4 10             	add    esp,0x10
c000d30c:	90                   	nop
c000d30d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d310:	c9                   	leave  
c000d311:	c3                   	ret    

c000d312 <sendKeyToTerminal(unsigned char)>:
c000d312:	55                   	push   ebp
c000d313:	89 e5                	mov    ebp,esp
c000d315:	83 ec 28             	sub    esp,0x28
c000d318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d31b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d31e:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d323:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d327:	83 ec 08             	sub    esp,0x8
c000d32a:	52                   	push   edx
c000d32b:	50                   	push   eax
c000d32c:	e8 b5 ba ff ff       	call   c0008de6 <VgaText::receiveKey(unsigned char)>
c000d331:	83 c4 10             	add    esp,0x10
c000d334:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d338:	83 f8 0a             	cmp    eax,0xa
c000d33b:	74 16                	je     c000d353 <sendKeyToTerminal(unsigned char)+0x41>
c000d33d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d341:	83 f8 03             	cmp    eax,0x3
c000d344:	74 0d                	je     c000d353 <sendKeyToTerminal(unsigned char)+0x41>
c000d346:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d34a:	83 f8 1c             	cmp    eax,0x1c
c000d34d:	0f 85 97 00 00 00    	jne    c000d3ea <sendKeyToTerminal(unsigned char)+0xd8>
c000d353:	fa                   	cli    
c000d354:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d359:	83 c0 01             	add    eax,0x1
c000d35c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d361:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d366:	83 c0 01             	add    eax,0x1
c000d369:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d36e:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d373:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d376:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d380:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d384:	74 1f                	je     c000d3a5 <sendKeyToTerminal(unsigned char)+0x93>
c000d386:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d389:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d38c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d38f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d392:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d395:	83 ec 0c             	sub    esp,0xc
c000d398:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d39b:	e8 70 93 00 00       	call   c0016710 <unblockTask(ThreadControlBlock*)>
c000d3a0:	83 c4 10             	add    esp,0x10
c000d3a3:	eb db                	jmp    c000d380 <sendKeyToTerminal(unsigned char)+0x6e>
c000d3a5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d3aa:	83 e8 01             	sub    eax,0x1
c000d3ad:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d3b2:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d3b7:	85 c0                	test   eax,eax
c000d3b9:	75 18                	jne    c000d3d3 <sendKeyToTerminal(unsigned char)+0xc1>
c000d3bb:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d3c0:	85 c0                	test   eax,eax
c000d3c2:	74 0f                	je     c000d3d3 <sendKeyToTerminal(unsigned char)+0xc1>
c000d3c4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d3ce:	e8 25 8e 00 00       	call   c00161f8 <schedule()>
c000d3d3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3d8:	83 e8 01             	sub    eax,0x1
c000d3db:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d3e0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3e5:	85 c0                	test   eax,eax
c000d3e7:	75 01                	jne    c000d3ea <sendKeyToTerminal(unsigned char)+0xd8>
c000d3e9:	fb                   	sti    
c000d3ea:	90                   	nop
c000d3eb:	c9                   	leave  
c000d3ec:	c3                   	ret    

c000d3ed <sendKeyboardToken(KeyboardToken)>:
c000d3ed:	55                   	push   ebp
c000d3ee:	89 e5                	mov    ebp,esp
c000d3f0:	83 ec 18             	sub    esp,0x18
c000d3f3:	e8 6b 43 00 00       	call   c0011763 <KeUserIOReceived()>
c000d3f8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d3fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3fe:	0f b7 c0             	movzx  eax,ax
c000d401:	83 f2 01             	xor    edx,0x1
c000d404:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d40a:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d40f:	85 c0                	test   eax,eax
c000d411:	74 24                	je     c000d437 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d413:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d419:	83 ec 04             	sub    esp,0x4
c000d41c:	68 40 b4 02 c0       	push   0xc002b440
c000d421:	83 ec 08             	sub    esp,0x8
c000d424:	89 e2                	mov    edx,esp
c000d426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d429:	89 02                	mov    DWORD PTR [edx],eax
c000d42b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d42e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d432:	ff d1                	call   ecx
c000d434:	83 c4 10             	add    esp,0x10
c000d437:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d43b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d43e:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d443:	0f b6 d2             	movzx  edx,dl
c000d446:	0f b6 c0             	movzx  eax,al
c000d449:	39 c2                	cmp    edx,eax
c000d44b:	74 1c                	je     c000d469 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d44d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d450:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d455:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d45a:	0f b6 c0             	movzx  eax,al
c000d45d:	83 ec 0c             	sub    esp,0xc
c000d460:	50                   	push   eax
c000d461:	e8 cc b0 ff ff       	call   c0008532 <setTerminalScrollLock(bool)>
c000d466:	83 c4 10             	add    esp,0x10
c000d469:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d46c:	0f b6 c0             	movzx  eax,al
c000d46f:	85 c0                	test   eax,eax
c000d471:	0f 84 da 00 00 00    	je     c000d551 <sendKeyboardToken(KeyboardToken)+0x164>
c000d477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d47a:	0f b7 c0             	movzx  eax,ax
c000d47d:	3d 18 03 00 00       	cmp    eax,0x318
c000d482:	75 06                	jne    c000d48a <sendKeyboardToken(KeyboardToken)+0x9d>
c000d484:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d48a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d48d:	0f b7 c0             	movzx  eax,ax
c000d490:	3d 19 03 00 00       	cmp    eax,0x319
c000d495:	75 06                	jne    c000d49d <sendKeyboardToken(KeyboardToken)+0xb0>
c000d497:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d49d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a0:	0f b7 c0             	movzx  eax,ax
c000d4a3:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d4a8:	75 06                	jne    c000d4b0 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d4aa:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d4b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b3:	0f b7 c0             	movzx  eax,ax
c000d4b6:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d4bb:	75 06                	jne    c000d4c3 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d4bd:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d4c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c6:	0f b7 c0             	movzx  eax,ax
c000d4c9:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d4ce:	75 06                	jne    c000d4d6 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d4d0:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d4d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4d9:	0f b7 c0             	movzx  eax,ax
c000d4dc:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d4e1:	75 06                	jne    c000d4e9 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d4e3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d4e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ec:	0f b7 c0             	movzx  eax,ax
c000d4ef:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d4f4:	75 06                	jne    c000d4fc <sendKeyboardToken(KeyboardToken)+0x10f>
c000d4f6:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d4fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ff:	0f b7 c0             	movzx  eax,ax
c000d502:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d507:	75 06                	jne    c000d50f <sendKeyboardToken(KeyboardToken)+0x122>
c000d509:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d50f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d512:	0f b7 c0             	movzx  eax,ax
c000d515:	3d 20 03 00 00       	cmp    eax,0x320
c000d51a:	75 06                	jne    c000d522 <sendKeyboardToken(KeyboardToken)+0x135>
c000d51c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d522:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d525:	0f b7 c0             	movzx  eax,ax
c000d528:	3d 21 03 00 00       	cmp    eax,0x321
c000d52d:	75 06                	jne    c000d535 <sendKeyboardToken(KeyboardToken)+0x148>
c000d52f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d538:	0f b7 c0             	movzx  eax,ax
c000d53b:	3d 22 03 00 00       	cmp    eax,0x322
c000d540:	0f 85 f1 00 00 00    	jne    c000d637 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d546:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d54c:	e9 e6 00 00 00       	jmp    c000d637 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d554:	0f b7 c0             	movzx  eax,ax
c000d557:	3d 18 03 00 00       	cmp    eax,0x318
c000d55c:	75 0a                	jne    c000d568 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d55e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d564:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d56b:	0f b7 c0             	movzx  eax,ax
c000d56e:	3d 19 03 00 00       	cmp    eax,0x319
c000d573:	75 0a                	jne    c000d57f <sendKeyboardToken(KeyboardToken)+0x192>
c000d575:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d57b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d57f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d582:	0f b7 c0             	movzx  eax,ax
c000d585:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d58a:	75 0a                	jne    c000d596 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d58c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d592:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d599:	0f b7 c0             	movzx  eax,ax
c000d59c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d5a1:	75 0a                	jne    c000d5ad <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d5a3:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d5a9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b0:	0f b7 c0             	movzx  eax,ax
c000d5b3:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d5b8:	75 0a                	jne    c000d5c4 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d5ba:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d5c0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5c7:	0f b7 c0             	movzx  eax,ax
c000d5ca:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d5cf:	75 0a                	jne    c000d5db <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d5d1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d5d7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5de:	0f b7 c0             	movzx  eax,ax
c000d5e1:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d5e6:	75 0a                	jne    c000d5f2 <sendKeyboardToken(KeyboardToken)+0x205>
c000d5e8:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d5ee:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5f5:	0f b7 c0             	movzx  eax,ax
c000d5f8:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d5fd:	75 0a                	jne    c000d609 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d5ff:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d605:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d60c:	0f b7 c0             	movzx  eax,ax
c000d60f:	3d 20 03 00 00       	cmp    eax,0x320
c000d614:	75 0a                	jne    c000d620 <sendKeyboardToken(KeyboardToken)+0x233>
c000d616:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d61c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d623:	0f b7 c0             	movzx  eax,ax
c000d626:	3d 21 03 00 00       	cmp    eax,0x321
c000d62b:	75 0a                	jne    c000d637 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d62d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d633:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d63a:	0f b7 c0             	movzx  eax,ax
c000d63d:	3d 00 02 00 00       	cmp    eax,0x200
c000d642:	75 2f                	jne    c000d673 <sendKeyboardToken(KeyboardToken)+0x286>
c000d644:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d649:	83 f0 01             	xor    eax,0x1
c000d64c:	0f b6 c0             	movzx  eax,al
c000d64f:	85 c0                	test   eax,eax
c000d651:	74 20                	je     c000d673 <sendKeyboardToken(KeyboardToken)+0x286>
c000d653:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d658:	6a 01                	push   0x1
c000d65a:	6a 00                	push   0x0
c000d65c:	68 36 d2 00 c0       	push   0xc000d236
c000d661:	50                   	push   eax
c000d662:	e8 41 89 00 00       	call   c0015fa8 <Process::createThread(void (*)(void*), void*, int)>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d671:	eb 3a                	jmp    c000d6ad <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d676:	0f b7 c0             	movzx  eax,ax
c000d679:	3d 01 02 00 00       	cmp    eax,0x201
c000d67e:	75 2d                	jne    c000d6ad <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d680:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d685:	83 f0 01             	xor    eax,0x1
c000d688:	0f b6 c0             	movzx  eax,al
c000d68b:	85 c0                	test   eax,eax
c000d68d:	74 1e                	je     c000d6ad <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d68f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d694:	6a 01                	push   0x1
c000d696:	6a 00                	push   0x0
c000d698:	68 a4 d2 00 c0       	push   0xc000d2a4
c000d69d:	50                   	push   eax
c000d69e:	e8 05 89 00 00       	call   c0015fa8 <Process::createThread(void (*)(void*), void*, int)>
c000d6a3:	83 c4 10             	add    esp,0x10
c000d6a6:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d6ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6b0:	0f b7 c0             	movzx  eax,ax
c000d6b3:	3d 25 03 00 00       	cmp    eax,0x325
c000d6b8:	75 06                	jne    c000d6c0 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d6ba:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d6c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c3:	0f b7 c0             	movzx  eax,ax
c000d6c6:	3d 24 03 00 00       	cmp    eax,0x324
c000d6cb:	75 06                	jne    c000d6d3 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d6cd:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d6d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d6:	0f b7 c0             	movzx  eax,ax
c000d6d9:	3d 23 03 00 00       	cmp    eax,0x323
c000d6de:	75 06                	jne    c000d6e6 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d6e0:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d6e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e9:	0f b7 c0             	movzx  eax,ax
c000d6ec:	3d 26 03 00 00       	cmp    eax,0x326
c000d6f1:	75 06                	jne    c000d6f9 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d6f3:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d6f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6fc:	0f b7 c0             	movzx  eax,ax
c000d6ff:	3d 27 03 00 00       	cmp    eax,0x327
c000d704:	75 06                	jne    c000d70c <sendKeyboardToken(KeyboardToken)+0x31f>
c000d706:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d70c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d70f:	0f b7 c0             	movzx  eax,ax
c000d712:	3d 22 03 00 00       	cmp    eax,0x322
c000d717:	75 06                	jne    c000d71f <sendKeyboardToken(KeyboardToken)+0x332>
c000d719:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d71f:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d723:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d726:	83 f0 01             	xor    eax,0x1
c000d729:	0f b6 c0             	movzx  eax,al
c000d72c:	85 c0                	test   eax,eax
c000d72e:	74 7c                	je     c000d7ac <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d730:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d735:	0f b6 c0             	movzx  eax,al
c000d738:	85 c0                	test   eax,eax
c000d73a:	74 43                	je     c000d77f <sendKeyboardToken(KeyboardToken)+0x392>
c000d73c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d740:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d744:	85 c0                	test   eax,eax
c000d746:	74 2b                	je     c000d773 <sendKeyboardToken(KeyboardToken)+0x386>
c000d748:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d74e:	89 d0                	mov    eax,edx
c000d750:	c1 e0 02             	shl    eax,0x2
c000d753:	01 d0                	add    eax,edx
c000d755:	01 c0                	add    eax,eax
c000d757:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d75c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d75f:	0f b7 c0             	movzx  eax,ax
c000d762:	8d 50 d0             	lea    edx,[eax-0x30]
c000d765:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d76a:	01 d0                	add    eax,edx
c000d76c:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d771:	eb 71                	jmp    c000d7e4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d773:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d77d:	eb 65                	jmp    c000d7e4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d77f:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d784:	85 c0                	test   eax,eax
c000d786:	74 18                	je     c000d7a0 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d788:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d78d:	0f b6 c0             	movzx  eax,al
c000d790:	83 ec 0c             	sub    esp,0xc
c000d793:	50                   	push   eax
c000d794:	e8 79 fb ff ff       	call   c000d312 <sendKeyToTerminal(unsigned char)>
c000d799:	83 c4 10             	add    esp,0x10
c000d79c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d7a0:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7aa:	eb 38                	jmp    c000d7e4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7af:	0f b7 c0             	movzx  eax,ax
c000d7b2:	3d 01 01 00 00       	cmp    eax,0x101
c000d7b7:	75 2b                	jne    c000d7e4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7b9:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7be:	85 c0                	test   eax,eax
c000d7c0:	74 18                	je     c000d7da <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d7c2:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7c7:	0f b6 c0             	movzx  eax,al
c000d7ca:	83 ec 0c             	sub    esp,0xc
c000d7cd:	50                   	push   eax
c000d7ce:	e8 3f fb ff ff       	call   c000d312 <sendKeyToTerminal(unsigned char)>
c000d7d3:	83 c4 10             	add    esp,0x10
c000d7d6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d7da:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7e4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7e7:	83 f0 01             	xor    eax,0x1
c000d7ea:	0f b6 c0             	movzx  eax,al
c000d7ed:	85 c0                	test   eax,eax
c000d7ef:	74 5a                	je     c000d84b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7f1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7f4:	83 f0 01             	xor    eax,0x1
c000d7f7:	0f b6 c0             	movzx  eax,al
c000d7fa:	85 c0                	test   eax,eax
c000d7fc:	74 4d                	je     c000d84b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7fe:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d803:	83 f0 01             	xor    eax,0x1
c000d806:	0f b6 c0             	movzx  eax,al
c000d809:	85 c0                	test   eax,eax
c000d80b:	74 3e                	je     c000d84b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d80d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d810:	0f b7 c0             	movzx  eax,ax
c000d813:	83 f8 1f             	cmp    eax,0x1f
c000d816:	76 0b                	jbe    c000d823 <sendKeyboardToken(KeyboardToken)+0x436>
c000d818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d81b:	0f b7 c0             	movzx  eax,ax
c000d81e:	83 f8 7e             	cmp    eax,0x7e
c000d821:	76 16                	jbe    c000d839 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d826:	0f b7 c0             	movzx  eax,ax
c000d829:	83 f8 0a             	cmp    eax,0xa
c000d82c:	74 0b                	je     c000d839 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d82e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d831:	0f b7 c0             	movzx  eax,ax
c000d834:	83 f8 08             	cmp    eax,0x8
c000d837:	75 12                	jne    c000d84b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d839:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d83c:	0f b6 c0             	movzx  eax,al
c000d83f:	83 ec 0c             	sub    esp,0xc
c000d842:	50                   	push   eax
c000d843:	e8 ca fa ff ff       	call   c000d312 <sendKeyToTerminal(unsigned char)>
c000d848:	83 c4 10             	add    esp,0x10
c000d84b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d84e:	83 f0 01             	xor    eax,0x1
c000d851:	0f b6 c0             	movzx  eax,al
c000d854:	85 c0                	test   eax,eax
c000d856:	74 5d                	je     c000d8b5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d858:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d85b:	83 f0 01             	xor    eax,0x1
c000d85e:	0f b6 c0             	movzx  eax,al
c000d861:	85 c0                	test   eax,eax
c000d863:	74 50                	je     c000d8b5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d865:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d86a:	0f b6 c0             	movzx  eax,al
c000d86d:	85 c0                	test   eax,eax
c000d86f:	74 44                	je     c000d8b5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d874:	0f b7 c0             	movzx  eax,ax
c000d877:	83 f8 3f             	cmp    eax,0x3f
c000d87a:	76 39                	jbe    c000d8b5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d87c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d87f:	0f b7 c0             	movzx  eax,ax
c000d882:	83 f8 7f             	cmp    eax,0x7f
c000d885:	77 2e                	ja     c000d8b5 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d887:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d88a:	88 c2                	mov    dl,al
c000d88c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d88f:	0f b7 c0             	movzx  eax,ax
c000d892:	83 f8 5f             	cmp    eax,0x5f
c000d895:	76 04                	jbe    c000d89b <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d897:	b0 20                	mov    al,0x20
c000d899:	eb 02                	jmp    c000d89d <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d89b:	b0 00                	mov    al,0x0
c000d89d:	89 d1                	mov    ecx,edx
c000d89f:	29 c1                	sub    ecx,eax
c000d8a1:	89 c8                	mov    eax,ecx
c000d8a3:	83 e8 40             	sub    eax,0x40
c000d8a6:	0f b6 c0             	movzx  eax,al
c000d8a9:	83 ec 0c             	sub    esp,0xc
c000d8ac:	50                   	push   eax
c000d8ad:	e8 60 fa ff ff       	call   c000d312 <sendKeyToTerminal(unsigned char)>
c000d8b2:	83 c4 10             	add    esp,0x10
c000d8b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8b8:	0f b7 c0             	movzx  eax,ax
c000d8bb:	3d 00 03 00 00       	cmp    eax,0x300
c000d8c0:	75 12                	jne    c000d8d4 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8c2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d8c5:	83 f0 01             	xor    eax,0x1
c000d8c8:	0f b6 c0             	movzx  eax,al
c000d8cb:	85 c0                	test   eax,eax
c000d8cd:	74 05                	je     c000d8d4 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8cf:	e8 5f ac ff ff       	call   c0008533 <doTerminalCycle()>
c000d8d4:	90                   	nop
c000d8d5:	c9                   	leave  
c000d8d6:	c3                   	ret    

c000d8d7 <clearInternalKeybuffer(VgaText*)>:
c000d8d7:	55                   	push   ebp
c000d8d8:	89 e5                	mov    ebp,esp
c000d8da:	83 ec 08             	sub    esp,0x8
c000d8dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8e0:	05 02 01 00 00       	add    eax,0x102
c000d8e5:	83 ec 0c             	sub    esp,0xc
c000d8e8:	50                   	push   eax
c000d8e9:	e8 82 2c ff ff       	call   c0000570 <strlen>
c000d8ee:	83 c4 10             	add    esp,0x10
c000d8f1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8f4:	81 c2 02 01 00 00    	add    edx,0x102
c000d8fa:	83 ec 04             	sub    esp,0x4
c000d8fd:	50                   	push   eax
c000d8fe:	6a 00                	push   0x0
c000d900:	52                   	push   edx
c000d901:	e8 ea 2b ff ff       	call   c00004f0 <memset>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	90                   	nop
c000d90a:	c9                   	leave  
c000d90b:	c3                   	ret    

c000d90c <readKeyboard(VgaText*, char*, unsigned long)>:
c000d90c:	55                   	push   ebp
c000d90d:	89 e5                	mov    ebp,esp
c000d90f:	83 ec 18             	sub    esp,0x18
c000d912:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d917:	85 c0                	test   eax,eax
c000d919:	74 2a                	je     c000d945 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d91b:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d921:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d927:	83 ec 04             	sub    esp,0x4
c000d92a:	68 40 b4 02 c0       	push   0xc002b440
c000d92f:	83 ec 08             	sub    esp,0x8
c000d932:	89 e2                	mov    edx,esp
c000d934:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d937:	89 02                	mov    DWORD PTR [edx],eax
c000d939:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d93c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d940:	ff d1                	call   ecx
c000d942:	83 c4 10             	add    esp,0x10
c000d945:	fb                   	sti    
c000d946:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d94d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d951:	0f 84 0d 01 00 00    	je     c000da64 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d95a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d960:	0f be c0             	movsx  eax,al
c000d963:	85 c0                	test   eax,eax
c000d965:	75 2c                	jne    c000d993 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d967:	fa                   	cli    
c000d968:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d96d:	83 c0 01             	add    eax,0x1
c000d970:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d975:	e8 7e 88 00 00       	call   c00161f8 <schedule()>
c000d97a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d97f:	83 e8 01             	sub    eax,0x1
c000d982:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d987:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d98c:	85 c0                	test   eax,eax
c000d98e:	75 c7                	jne    c000d957 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d990:	fb                   	sti    
c000d991:	eb c4                	jmp    c000d957 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d993:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d996:	8d 50 01             	lea    edx,[eax+0x1]
c000d999:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d99c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d99f:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d9a5:	88 10                	mov    BYTE PTR [eax],dl
c000d9a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9aa:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d9b0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d9b3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9b7:	83 f8 03             	cmp    eax,0x3
c000d9ba:	75 1e                	jne    c000d9da <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d9bc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d9c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9c6:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9cc:	83 ec 08             	sub    esp,0x8
c000d9cf:	6a 02                	push   0x2
c000d9d1:	50                   	push   eax
c000d9d2:	e8 df 41 00 00       	call   c0011bb6 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9d7:	83 c4 10             	add    esp,0x10
c000d9da:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9de:	83 f8 1c             	cmp    eax,0x1c
c000d9e1:	75 1e                	jne    c000da01 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d9e3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d9e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9ed:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9f3:	83 ec 08             	sub    esp,0x8
c000d9f6:	6a 09                	push   0x9
c000d9f8:	50                   	push   eax
c000d9f9:	e8 b8 41 00 00       	call   c0011bb6 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da04:	05 02 01 00 00       	add    eax,0x102
c000da09:	83 ec 0c             	sub    esp,0xc
c000da0c:	50                   	push   eax
c000da0d:	e8 5e 2b ff ff       	call   c0000570 <strlen>
c000da12:	83 c4 10             	add    esp,0x10
c000da15:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000da18:	81 c2 02 01 00 00    	add    edx,0x102
c000da1e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000da21:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000da24:	81 c2 02 01 00 00    	add    edx,0x102
c000da2a:	83 ec 04             	sub    esp,0x4
c000da2d:	50                   	push   eax
c000da2e:	51                   	push   ecx
c000da2f:	52                   	push   edx
c000da30:	e8 9b 29 ff ff       	call   c00003d0 <memmove>
c000da35:	83 c4 10             	add    esp,0x10
c000da38:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000da3c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000da40:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da44:	83 f8 0a             	cmp    eax,0xa
c000da47:	74 16                	je     c000da5f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da49:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da4d:	83 f8 03             	cmp    eax,0x3
c000da50:	74 0d                	je     c000da5f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da52:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da56:	83 f8 1c             	cmp    eax,0x1c
c000da59:	0f 85 ee fe ff ff    	jne    c000d94d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000da5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da62:	eb 03                	jmp    c000da67 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000da64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da67:	c9                   	leave  
c000da68:	c3                   	ret    
c000da69:	90                   	nop

c000da6a <Keyboard::Keyboard(char const*)>:
c000da6a:	83 ec 0c             	sub    esp,0xc
c000da6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da71:	83 ec 08             	sub    esp,0x8
c000da74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da78:	50                   	push   eax
c000da79:	e8 4a f1 ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000da7e:	83 c4 10             	add    esp,0x10
c000da81:	ba a0 1e 02 c0       	mov    edx,0xc0021ea0
c000da86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da8a:	89 10                	mov    DWORD PTR [eax],edx
c000da8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da90:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da9a:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000daa1:	90                   	nop
c000daa2:	83 c4 0c             	add    esp,0xc
c000daa5:	c3                   	ret    

c000daa6 <Keyboard::~Keyboard()>:
c000daa6:	83 ec 0c             	sub    esp,0xc
c000daa9:	ba a0 1e 02 c0       	mov    edx,0xc0021ea0
c000daae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab2:	89 10                	mov    DWORD PTR [eax],edx
c000dab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab8:	83 ec 0c             	sub    esp,0xc
c000dabb:	50                   	push   eax
c000dabc:	e8 37 ee ff ff       	call   c000c8f8 <Device::~Device()>
c000dac1:	83 c4 10             	add    esp,0x10
c000dac4:	90                   	nop
c000dac5:	83 c4 0c             	add    esp,0xc
c000dac8:	c3                   	ret    
c000dac9:	90                   	nop

c000daca <Keyboard::~Keyboard()>:
c000daca:	83 ec 0c             	sub    esp,0xc
c000dacd:	83 ec 0c             	sub    esp,0xc
c000dad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dad4:	e8 cd ff ff ff       	call   c000daa6 <Keyboard::~Keyboard()>
c000dad9:	83 c4 10             	add    esp,0x10
c000dadc:	83 ec 08             	sub    esp,0x8
c000dadf:	68 5c 01 00 00       	push   0x15c
c000dae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dae8:	e8 5b cd ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000daed:	83 c4 10             	add    esp,0x10
c000daf0:	83 c4 0c             	add    esp,0xc
c000daf3:	c3                   	ret    

c000daf4 <LogicalDisk::close(int, int, void*)>:
c000daf4:	83 c8 ff             	or     eax,0xffffffff
c000daf7:	c3                   	ret    

c000daf8 <LogicalDisk::~LogicalDisk()>:
c000daf8:	83 ec 0c             	sub    esp,0xc
c000dafb:	ba 18 1f 02 c0       	mov    edx,0xc0021f18
c000db00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db04:	89 10                	mov    DWORD PTR [eax],edx
c000db06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db0a:	83 ec 0c             	sub    esp,0xc
c000db0d:	50                   	push   eax
c000db0e:	e8 e5 ed ff ff       	call   c000c8f8 <Device::~Device()>
c000db13:	83 c4 10             	add    esp,0x10
c000db16:	90                   	nop
c000db17:	83 c4 0c             	add    esp,0xc
c000db1a:	c3                   	ret    
c000db1b:	90                   	nop

c000db1c <LogicalDisk::~LogicalDisk()>:
c000db1c:	83 ec 0c             	sub    esp,0xc
c000db1f:	83 ec 0c             	sub    esp,0xc
c000db22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db26:	e8 cd ff ff ff       	call   c000daf8 <LogicalDisk::~LogicalDisk()>
c000db2b:	83 c4 10             	add    esp,0x10
c000db2e:	83 ec 08             	sub    esp,0x8
c000db31:	68 78 01 00 00       	push   0x178
c000db36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db3a:	e8 09 cd ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000db3f:	83 c4 10             	add    esp,0x10
c000db42:	83 c4 0c             	add    esp,0xc
c000db45:	c3                   	ret    

c000db46 <LogicalDisk::open(int, int, void*)>:
c000db46:	83 ec 18             	sub    esp,0x18
c000db49:	68 cc 1e 02 c0       	push   0xc0021ecc
c000db4e:	e8 c0 3b 00 00       	call   c0011713 <KePanic(char const*)>
c000db53:	83 c8 ff             	or     eax,0xffffffff
c000db56:	83 c4 1c             	add    esp,0x1c
c000db59:	c3                   	ret    

c000db5a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000db5a:	53                   	push   ebx
c000db5b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000db5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db67:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db6d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db73:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db79:	77 10                	ja     c000db8b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db7b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db81:	89 d3                	mov    ebx,edx
c000db83:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db89:	72 05                	jb     c000db90 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db8b:	83 c8 ff             	or     eax,0xffffffff
c000db8e:	89 c2                	mov    edx,eax
c000db90:	5b                   	pop    ebx
c000db91:	c3                   	ret    

c000db92 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db92:	56                   	push   esi
c000db93:	83 c8 ff             	or     eax,0xffffffff
c000db96:	53                   	push   ebx
c000db97:	89 c2                	mov    edx,eax
c000db99:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db9d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dba1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dba5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dbab:	77 27                	ja     c000dbd4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dbad:	89 d8                	mov    eax,ebx
c000dbaf:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000dbb5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000dbbb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dbc0:	89 c2                	mov    edx,eax
c000dbc2:	73 10                	jae    c000dbd4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dbc4:	89 c8                	mov    eax,ecx
c000dbc6:	89 da                	mov    edx,ebx
c000dbc8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000dbce:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000dbd4:	5b                   	pop    ebx
c000dbd5:	5e                   	pop    esi
c000dbd6:	c3                   	ret    
c000dbd7:	90                   	nop

c000dbd8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dbd8:	83 ec 1c             	sub    esp,0x1c
c000dbdb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dbdf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dbe7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbeb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbef:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbf2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dbf6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dbfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbfe:	83 ec 08             	sub    esp,0x8
c000dc01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc05:	50                   	push   eax
c000dc06:	e8 bd ef ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000dc0b:	83 c4 10             	add    esp,0x10
c000dc0e:	ba 18 1f 02 c0       	mov    edx,0xc0021f18
c000dc13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc17:	89 10                	mov    DWORD PTR [eax],edx
c000dc19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc1d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc28:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dc2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc33:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc3e:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dc48:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc54:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dc5a:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dc60:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc64:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dc67:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc6b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc71:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc7b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc7f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc89:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc93:	90                   	nop
c000dc94:	83 c4 1c             	add    esp,0x1c
c000dc97:	c3                   	ret    

c000dc98 <LogicalDisk::assignDriveLetter()>:
c000dc98:	55                   	push   ebp
c000dc99:	57                   	push   edi
c000dc9a:	56                   	push   esi
c000dc9b:	53                   	push   ebx
c000dc9c:	83 ec 14             	sub    esp,0x14
c000dc9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dca3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dca9:	b0 41                	mov    al,0x41
c000dcab:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dcb1:	84 d2                	test   dl,dl
c000dcb3:	75 02                	jne    c000dcb7 <LogicalDisk::assignDriveLetter()+0x1f>
c000dcb5:	b0 43                	mov    al,0x43
c000dcb7:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dcbd:	0f b6 ca             	movzx  ecx,dl
c000dcc0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dcc4:	0f be e8             	movsx  ebp,al
c000dcc7:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dccd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dcd1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dcd5:	3c 43                	cmp    al,0x43
c000dcd7:	75 10                	jne    c000dce9 <LogicalDisk::assignDriveLetter()+0x51>
c000dcd9:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dce0:	75 5a                	jne    c000dd3c <LogicalDisk::assignDriveLetter()+0xa4>
c000dce2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dce7:	75 53                	jne    c000dd3c <LogicalDisk::assignDriveLetter()+0xa4>
c000dce9:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dcec:	ba 01 00 00 00       	mov    edx,0x1
c000dcf1:	89 34 24             	mov    DWORD PTR [esp],esi
c000dcf4:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dcf7:	d3 e2                	shl    edx,cl
c000dcf9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcfd:	89 d7                	mov    edi,edx
c000dcff:	89 d6                	mov    esi,edx
c000dd01:	c1 ff 1f             	sar    edi,0x1f
c000dd04:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dd08:	21 f9                	and    ecx,edi
c000dd0a:	09 d1                	or     ecx,edx
c000dd0c:	75 2e                	jne    c000dd3c <LogicalDisk::assignDriveLetter()+0xa4>
c000dd0e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dd12:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dd16:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dd1c:	09 f2                	or     edx,esi
c000dd1e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dd21:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dd27:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dd2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd32:	09 fa                	or     edx,edi
c000dd34:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dd3a:	eb 0d                	jmp    c000dd49 <LogicalDisk::assignDriveLetter()+0xb1>
c000dd3c:	8d 50 01             	lea    edx,[eax+0x1]
c000dd3f:	45                   	inc    ebp
c000dd40:	88 d0                	mov    al,dl
c000dd42:	80 fa 5b             	cmp    dl,0x5b
c000dd45:	75 8e                	jne    c000dcd5 <LogicalDisk::assignDriveLetter()+0x3d>
c000dd47:	31 c0                	xor    eax,eax
c000dd49:	83 c4 14             	add    esp,0x14
c000dd4c:	5b                   	pop    ebx
c000dd4d:	5e                   	pop    esi
c000dd4e:	5f                   	pop    edi
c000dd4f:	5d                   	pop    ebp
c000dd50:	c3                   	ret    
c000dd51:	90                   	nop

c000dd52 <LogicalDisk::mount()>:
c000dd52:	56                   	push   esi
c000dd53:	53                   	push   ebx
c000dd54:	53                   	push   ebx
c000dd55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd59:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dd5f:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dd69:	85 db                	test   ebx,ebx
c000dd6b:	74 27                	je     c000dd94 <LogicalDisk::mount()+0x42>
c000dd6d:	51                   	push   ecx
c000dd6e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd75:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd77:	83 e8 41             	sub    eax,0x41
c000dd7a:	50                   	push   eax
c000dd7b:	56                   	push   esi
c000dd7c:	53                   	push   ebx
c000dd7d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd80:	83 c4 10             	add    esp,0x10
c000dd83:	84 c0                	test   al,al
c000dd85:	74 08                	je     c000dd8f <LogicalDisk::mount()+0x3d>
c000dd87:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd8d:	eb 07                	jmp    c000dd96 <LogicalDisk::mount()+0x44>
c000dd8f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd92:	eb d5                	jmp    c000dd69 <LogicalDisk::mount()+0x17>
c000dd94:	31 c0                	xor    eax,eax
c000dd96:	5a                   	pop    edx
c000dd97:	5b                   	pop    ebx
c000dd98:	5e                   	pop    esi
c000dd99:	c3                   	ret    

c000dd9a <LogicalDisk::unmount()>:
c000dd9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd9e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dda8:	c3                   	ret    
c000dda9:	90                   	nop

c000ddaa <LogicalDisk::eject()>:
c000ddaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddae:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ddb4:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddb6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ddba:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ddbd:	90                   	nop

c000ddbe <LogicalDisk::unassignDriveLetter()>:
c000ddbe:	57                   	push   edi
c000ddbf:	56                   	push   esi
c000ddc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ddc4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000ddcb:	85 c9                	test   ecx,ecx
c000ddcd:	75 0f                	jne    c000ddde <LogicalDisk::unassignDriveLetter()+0x20>
c000ddcf:	c7 44 24 0c f0 1e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021ef0
c000ddd7:	5e                   	pop    esi
c000ddd8:	5f                   	pop    edi
c000ddd9:	e9 35 39 00 00       	jmp    c0011713 <KePanic(char const*)>
c000ddde:	83 e9 41             	sub    ecx,0x41
c000dde1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dde8:	b8 01 00 00 00       	mov    eax,0x1
c000dded:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000ddf8:	d3 e0                	shl    eax,cl
c000ddfa:	89 c7                	mov    edi,eax
c000ddfc:	f7 d0                	not    eax
c000ddfe:	c1 ff 1f             	sar    edi,0x1f
c000de01:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000de07:	89 fe                	mov    esi,edi
c000de09:	f7 d6                	not    esi
c000de0b:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000de11:	5e                   	pop    esi
c000de12:	5f                   	pop    edi
c000de13:	c3                   	ret    

c000de14 <LogicalDisk::read(unsigned long long, int, void*)>:
c000de14:	57                   	push   edi
c000de15:	56                   	push   esi
c000de16:	53                   	push   ebx
c000de17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de1f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de27:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de2d:	77 41                	ja     c000de70 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000de2f:	99                   	cdq    
c000de30:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de36:	01 c8                	add    eax,ecx
c000de38:	11 da                	adc    edx,ebx
c000de3a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de40:	19 d7                	sbb    edi,edx
c000de42:	72 33                	jb     c000de77 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000de44:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de4a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de50:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de54:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de58:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de5e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de68:	5b                   	pop    ebx
c000de69:	5e                   	pop    esi
c000de6a:	5f                   	pop    edi
c000de6b:	e9 c6 0a 00 00       	jmp    c000e936 <VCache::read(unsigned long long, int, void*)>
c000de70:	b8 05 00 00 00       	mov    eax,0x5
c000de75:	eb 05                	jmp    c000de7c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de77:	b8 07 00 00 00       	mov    eax,0x7
c000de7c:	5b                   	pop    ebx
c000de7d:	5e                   	pop    esi
c000de7e:	5f                   	pop    edi
c000de7f:	c3                   	ret    

c000de80 <LogicalDisk::write(unsigned long long, int, void*)>:
c000de80:	57                   	push   edi
c000de81:	56                   	push   esi
c000de82:	53                   	push   ebx
c000de83:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de8b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de93:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de99:	77 41                	ja     c000dedc <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de9b:	99                   	cdq    
c000de9c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dea2:	01 c8                	add    eax,ecx
c000dea4:	11 da                	adc    edx,ebx
c000dea6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000deac:	19 d7                	sbb    edi,edx
c000deae:	72 33                	jb     c000dee3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000deb0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000deb6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000debc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dec0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dec4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000deca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ded0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded4:	5b                   	pop    ebx
c000ded5:	5e                   	pop    esi
c000ded6:	5f                   	pop    edi
c000ded7:	e9 6c 09 00 00       	jmp    c000e848 <VCache::write(unsigned long long, int, void*)>
c000dedc:	b8 05 00 00 00       	mov    eax,0x5
c000dee1:	eb 05                	jmp    c000dee8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dee3:	b8 07 00 00 00       	mov    eax,0x7
c000dee8:	5b                   	pop    ebx
c000dee9:	5e                   	pop    esi
c000deea:	5f                   	pop    edi
c000deeb:	c3                   	ret    

c000deec <Mouse::Mouse(char const*)>:
c000deec:	83 ec 0c             	sub    esp,0xc
c000deef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def3:	83 ec 08             	sub    esp,0x8
c000def6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000defa:	50                   	push   eax
c000defb:	e8 c8 ec ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000df00:	83 c4 10             	add    esp,0x10
c000df03:	ba 44 1f 02 c0       	mov    edx,0xc0021f44
c000df08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df0c:	89 10                	mov    DWORD PTR [eax],edx
c000df0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df12:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000df1c:	90                   	nop
c000df1d:	83 c4 0c             	add    esp,0xc
c000df20:	c3                   	ret    
c000df21:	90                   	nop
c000df22:	66 90                	xchg   ax,ax

c000df24 <Mouse::~Mouse()>:
c000df24:	83 ec 0c             	sub    esp,0xc
c000df27:	ba 44 1f 02 c0       	mov    edx,0xc0021f44
c000df2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df30:	89 10                	mov    DWORD PTR [eax],edx
c000df32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df36:	83 ec 0c             	sub    esp,0xc
c000df39:	50                   	push   eax
c000df3a:	e8 b9 e9 ff ff       	call   c000c8f8 <Device::~Device()>
c000df3f:	83 c4 10             	add    esp,0x10
c000df42:	90                   	nop
c000df43:	83 c4 0c             	add    esp,0xc
c000df46:	c3                   	ret    
c000df47:	90                   	nop

c000df48 <Mouse::~Mouse()>:
c000df48:	83 ec 0c             	sub    esp,0xc
c000df4b:	83 ec 0c             	sub    esp,0xc
c000df4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df52:	e8 cd ff ff ff       	call   c000df24 <Mouse::~Mouse()>
c000df57:	83 c4 10             	add    esp,0x10
c000df5a:	83 ec 08             	sub    esp,0x8
c000df5d:	68 58 01 00 00       	push   0x158
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	e8 dd c8 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000df6b:	83 c4 10             	add    esp,0x10
c000df6e:	83 c4 0c             	add    esp,0xc
c000df71:	c3                   	ret    

c000df72 <NIC::getMAC()>:
c000df72:	31 c0                	xor    eax,eax
c000df74:	31 d2                	xor    edx,edx
c000df76:	c3                   	ret    
c000df77:	90                   	nop

c000df78 <NIC::write(int, unsigned char*, int*)>:
c000df78:	b8 01 00 00 00       	mov    eax,0x1
c000df7d:	c3                   	ret    

c000df7e <NIC::NIC(char const*)>:
c000df7e:	83 ec 0c             	sub    esp,0xc
c000df81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df85:	83 ec 08             	sub    esp,0x8
c000df88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df8c:	50                   	push   eax
c000df8d:	e8 36 ec ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000df92:	83 c4 10             	add    esp,0x10
c000df95:	ba 70 1f 02 c0       	mov    edx,0xc0021f70
c000df9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9e:	89 10                	mov    DWORD PTR [eax],edx
c000dfa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dfae:	90                   	nop
c000dfaf:	83 c4 0c             	add    esp,0xc
c000dfb2:	c3                   	ret    
c000dfb3:	90                   	nop

c000dfb4 <NIC::~NIC()>:
c000dfb4:	83 ec 0c             	sub    esp,0xc
c000dfb7:	ba 70 1f 02 c0       	mov    edx,0xc0021f70
c000dfbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc0:	89 10                	mov    DWORD PTR [eax],edx
c000dfc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc6:	83 ec 0c             	sub    esp,0xc
c000dfc9:	50                   	push   eax
c000dfca:	e8 29 e9 ff ff       	call   c000c8f8 <Device::~Device()>
c000dfcf:	83 c4 10             	add    esp,0x10
c000dfd2:	90                   	nop
c000dfd3:	83 c4 0c             	add    esp,0xc
c000dfd6:	c3                   	ret    
c000dfd7:	90                   	nop

c000dfd8 <NIC::~NIC()>:
c000dfd8:	83 ec 0c             	sub    esp,0xc
c000dfdb:	83 ec 0c             	sub    esp,0xc
c000dfde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe2:	e8 cd ff ff ff       	call   c000dfb4 <NIC::~NIC()>
c000dfe7:	83 c4 10             	add    esp,0x10
c000dfea:	83 ec 08             	sub    esp,0x8
c000dfed:	68 58 01 00 00       	push   0x158
c000dff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff6:	e8 4d c8 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	83 c4 0c             	add    esp,0xc
c000e001:	c3                   	ret    

c000e002 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000e002:	55                   	push   ebp
c000e003:	57                   	push   edi
c000e004:	56                   	push   esi
c000e005:	53                   	push   ebx
c000e006:	81 ec 28 01 00 00    	sub    esp,0x128
c000e00c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000e013:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000e01a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000e021:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000e028:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e02c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e030:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e037:	e8 88 ec ff ff       	call   c000ccc4 <Device::getName()>
c000e03c:	5a                   	pop    edx
c000e03d:	59                   	pop    ecx
c000e03e:	50                   	push   eax
c000e03f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e043:	55                   	push   ebp
c000e044:	e8 f7 25 ff ff       	call   c0000640 <strcpy>
c000e049:	5b                   	pop    ebx
c000e04a:	58                   	pop    eax
c000e04b:	68 9c 1f 02 c0       	push   0xc0021f9c
c000e050:	55                   	push   ebp
c000e051:	e8 ea 27 ff ff       	call   c0000840 <strcat>
c000e056:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000e05d:	e8 84 9a ff ff       	call   c0007ae6 <malloc>
c000e062:	83 c4 0c             	add    esp,0xc
c000e065:	89 c3                	mov    ebx,eax
c000e067:	57                   	push   edi
c000e068:	56                   	push   esi
c000e069:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e06d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e071:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e078:	55                   	push   ebp
c000e079:	50                   	push   eax
c000e07a:	e8 59 fb ff ff       	call   c000dbd8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e07f:	83 c4 14             	add    esp,0x14
c000e082:	53                   	push   ebx
c000e083:	e8 10 fc ff ff       	call   c000dc98 <LogicalDisk::assignDriveLetter()>
c000e088:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e08b:	e8 c2 fc ff ff       	call   c000dd52 <LogicalDisk::mount()>
c000e090:	58                   	pop    eax
c000e091:	5a                   	pop    edx
c000e092:	53                   	push   ebx
c000e093:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e09a:	e8 57 e9 ff ff       	call   c000c9f6 <Device::addChild(Device*)>
c000e09f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e0a5:	5b                   	pop    ebx
c000e0a6:	5e                   	pop    esi
c000e0a7:	5f                   	pop    edi
c000e0a8:	5d                   	pop    ebp
c000e0a9:	c3                   	ret    

c000e0aa <createPartitionsForDisk(PhysicalDisk*)>:
c000e0aa:	55                   	push   ebp
c000e0ab:	57                   	push   edi
c000e0ac:	56                   	push   esi
c000e0ad:	53                   	push   ebx
c000e0ae:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e0b4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e0bb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e0c1:	3d 00 02 00 00       	cmp    eax,0x200
c000e0c6:	74 27                	je     c000e0ef <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e0c8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e0ce:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e0d4:	83 ec 10             	sub    esp,0x10
c000e0d7:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e0db:	99                   	cdq    
c000e0dc:	c1 e6 0a             	shl    esi,0xa
c000e0df:	52                   	push   edx
c000e0e0:	89 fd                	mov    ebp,edi
c000e0e2:	50                   	push   eax
c000e0e3:	55                   	push   ebp
c000e0e4:	56                   	push   esi
c000e0e5:	e8 86 17 01 00       	call   c001f870 <__udivdi3>
c000e0ea:	e9 b9 00 00 00       	jmp    c000e1a8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0ef:	83 ec 0c             	sub    esp,0xc
c000e0f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0f4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e0f8:	56                   	push   esi
c000e0f9:	6a 01                	push   0x1
c000e0fb:	6a 00                	push   0x0
c000e0fd:	6a 00                	push   0x0
c000e0ff:	53                   	push   ebx
c000e100:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e103:	83 c4 20             	add    esp,0x20
c000e106:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e10e:	75 0a                	jne    c000e11a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e110:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e118:	74 2c                	je     c000e146 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e11a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e120:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e126:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e12c:	83 ec 10             	sub    esp,0x10
c000e12f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e133:	89 f7                	mov    edi,esi
c000e135:	c1 e0 0a             	shl    eax,0xa
c000e138:	c1 ff 1f             	sar    edi,0x1f
c000e13b:	57                   	push   edi
c000e13c:	56                   	push   esi
c000e13d:	52                   	push   edx
c000e13e:	50                   	push   eax
c000e13f:	e8 2c 17 01 00       	call   c001f870 <__udivdi3>
c000e144:	eb 62                	jmp    c000e1a8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e146:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e14d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e154:	89 cf                	mov    edi,ecx
c000e156:	83 e2 7f             	and    edx,0x7f
c000e159:	83 e7 7f             	and    edi,0x7f
c000e15c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e163:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e166:	83 e0 7f             	and    eax,0x7f
c000e169:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e16c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e173:	83 e0 7f             	and    eax,0x7f
c000e176:	01 d0                	add    eax,edx
c000e178:	89 c5                	mov    ebp,eax
c000e17a:	84 c0                	test   al,al
c000e17c:	74 41                	je     c000e1bf <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e17e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e184:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e18a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e190:	83 ec 10             	sub    esp,0x10
c000e193:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e197:	89 f7                	mov    edi,esi
c000e199:	c1 e0 0a             	shl    eax,0xa
c000e19c:	c1 ff 1f             	sar    edi,0x1f
c000e19f:	57                   	push   edi
c000e1a0:	56                   	push   esi
c000e1a1:	52                   	push   edx
c000e1a2:	50                   	push   eax
c000e1a3:	e8 c8 16 01 00       	call   c001f870 <__udivdi3>
c000e1a8:	83 c4 14             	add    esp,0x14
c000e1ab:	52                   	push   edx
c000e1ac:	50                   	push   eax
c000e1ad:	6a 00                	push   0x0
c000e1af:	6a 00                	push   0x0
c000e1b1:	53                   	push   ebx
c000e1b2:	e8 4b fe ff ff       	call   c000e002 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e1b7:	83 c4 20             	add    esp,0x20
c000e1ba:	e9 73 01 00 00       	jmp    c000e332 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e1bf:	89 f0                	mov    eax,esi
c000e1c1:	31 c9                	xor    ecx,ecx
c000e1c3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e1ca:	75 02                	jne    c000e1ce <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e1cc:	89 cd                	mov    ebp,ecx
c000e1ce:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e1d5:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000e1dc:	c1 e2 08             	shl    edx,0x8
c000e1df:	c1 e6 10             	shl    esi,0x10
c000e1e2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e1ea:	09 f2                	or     edx,esi
c000e1ec:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e1f4:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000e1fb:	83 c0 10             	add    eax,0x10
c000e1fe:	09 f2                	or     edx,esi
c000e200:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e207:	c1 e6 18             	shl    esi,0x18
c000e20a:	09 f2                	or     edx,esi
c000e20c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e213:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e217:	c1 e6 10             	shl    esi,0x10
c000e21a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e221:	c1 e2 08             	shl    edx,0x8
c000e224:	09 f2                	or     edx,esi
c000e226:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e22d:	09 f2                	or     edx,esi
c000e22f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e236:	c1 e6 18             	shl    esi,0x18
c000e239:	09 f2                	or     edx,esi
c000e23b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e23f:	41                   	inc    ecx
c000e240:	83 f9 04             	cmp    ecx,0x4
c000e243:	0f 85 7a ff ff ff    	jne    c000e1c3 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e24d:	83 f0 01             	xor    eax,0x1
c000e250:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e254:	75 4f                	jne    c000e2a5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e256:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e25a:	83 f0 01             	xor    eax,0x1
c000e25d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e261:	75 42                	jne    c000e2a5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e263:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e26b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e273:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e279:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e27f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e285:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e289:	89 f7                	mov    edi,esi
c000e28b:	c1 e0 0a             	shl    eax,0xa
c000e28e:	c1 ff 1f             	sar    edi,0x1f
c000e291:	57                   	push   edi
c000e292:	56                   	push   esi
c000e293:	52                   	push   edx
c000e294:	50                   	push   eax
c000e295:	e8 d6 15 01 00       	call   c001f870 <__udivdi3>
c000e29a:	83 c4 10             	add    esp,0x10
c000e29d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e2a1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e2a5:	89 e8                	mov    eax,ebp
c000e2a7:	0f b6 e8             	movzx  ebp,al
c000e2aa:	85 ed                	test   ebp,ebp
c000e2ac:	74 50                	je     c000e2fe <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e2ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e2b2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e2b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2ba:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e2be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e2c6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2ca:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2da:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e2de:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e2e2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2e6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e2ee:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e2f2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e2f6:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e2fa:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e2fe:	31 ed                	xor    ebp,ebp
c000e300:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e304:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e308:	89 f8                	mov    eax,edi
c000e30a:	09 f0                	or     eax,esi
c000e30c:	74 1e                	je     c000e32c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e30e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e312:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e316:	89 d1                	mov    ecx,edx
c000e318:	09 c1                	or     ecx,eax
c000e31a:	74 10                	je     c000e32c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e31c:	83 ec 0c             	sub    esp,0xc
c000e31f:	57                   	push   edi
c000e320:	56                   	push   esi
c000e321:	52                   	push   edx
c000e322:	50                   	push   eax
c000e323:	53                   	push   ebx
c000e324:	e8 d9 fc ff ff       	call   c000e002 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e329:	83 c4 20             	add    esp,0x20
c000e32c:	45                   	inc    ebp
c000e32d:	83 fd 04             	cmp    ebp,0x4
c000e330:	75 ce                	jne    c000e300 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e332:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e338:	5b                   	pop    ebx
c000e339:	5e                   	pop    esi
c000e33a:	5f                   	pop    edi
c000e33b:	5d                   	pop    ebp
c000e33c:	c3                   	ret    
c000e33d:	66 90                	xchg   ax,ax
c000e33f:	90                   	nop

c000e340 <Serial::Serial(char const*)>:
c000e340:	83 ec 0c             	sub    esp,0xc
c000e343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e347:	83 ec 08             	sub    esp,0x8
c000e34a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e34e:	50                   	push   eax
c000e34f:	e8 74 e8 ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000e354:	83 c4 10             	add    esp,0x10
c000e357:	ba b0 1f 02 c0       	mov    edx,0xc0021fb0
c000e35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e360:	89 10                	mov    DWORD PTR [eax],edx
c000e362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e366:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e370:	90                   	nop
c000e371:	83 c4 0c             	add    esp,0xc
c000e374:	c3                   	ret    
c000e375:	90                   	nop
c000e376:	66 90                	xchg   ax,ax

c000e378 <Serial::~Serial()>:
c000e378:	83 ec 0c             	sub    esp,0xc
c000e37b:	ba b0 1f 02 c0       	mov    edx,0xc0021fb0
c000e380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e384:	89 10                	mov    DWORD PTR [eax],edx
c000e386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e38a:	83 ec 0c             	sub    esp,0xc
c000e38d:	50                   	push   eax
c000e38e:	e8 65 e5 ff ff       	call   c000c8f8 <Device::~Device()>
c000e393:	83 c4 10             	add    esp,0x10
c000e396:	90                   	nop
c000e397:	83 c4 0c             	add    esp,0xc
c000e39a:	c3                   	ret    
c000e39b:	90                   	nop

c000e39c <Serial::~Serial()>:
c000e39c:	83 ec 0c             	sub    esp,0xc
c000e39f:	83 ec 0c             	sub    esp,0xc
c000e3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3a6:	e8 cd ff ff ff       	call   c000e378 <Serial::~Serial()>
c000e3ab:	83 c4 10             	add    esp,0x10
c000e3ae:	83 ec 08             	sub    esp,0x8
c000e3b1:	68 58 01 00 00       	push   0x158
c000e3b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ba:	e8 89 c4 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000e3bf:	83 c4 10             	add    esp,0x10
c000e3c2:	83 c4 0c             	add    esp,0xc
c000e3c5:	c3                   	ret    
c000e3c6:	66 90                	xchg   ax,ax

c000e3c8 <Timer::Timer(char const*)>:
c000e3c8:	83 ec 0c             	sub    esp,0xc
c000e3cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3cf:	83 ec 08             	sub    esp,0x8
c000e3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3d6:	50                   	push   eax
c000e3d7:	e8 ec e7 ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000e3dc:	83 c4 10             	add    esp,0x10
c000e3df:	ba f4 1f 02 c0       	mov    edx,0xc0021ff4
c000e3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e8:	89 10                	mov    DWORD PTR [eax],edx
c000e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ee:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3f8:	90                   	nop
c000e3f9:	83 c4 0c             	add    esp,0xc
c000e3fc:	c3                   	ret    
c000e3fd:	90                   	nop
c000e3fe:	66 90                	xchg   ax,ax

c000e400 <Timer::~Timer()>:
c000e400:	83 ec 0c             	sub    esp,0xc
c000e403:	ba f4 1f 02 c0       	mov    edx,0xc0021ff4
c000e408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40c:	89 10                	mov    DWORD PTR [eax],edx
c000e40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e412:	83 ec 0c             	sub    esp,0xc
c000e415:	50                   	push   eax
c000e416:	e8 dd e4 ff ff       	call   c000c8f8 <Device::~Device()>
c000e41b:	83 c4 10             	add    esp,0x10
c000e41e:	90                   	nop
c000e41f:	83 c4 0c             	add    esp,0xc
c000e422:	c3                   	ret    
c000e423:	90                   	nop

c000e424 <Timer::~Timer()>:
c000e424:	83 ec 0c             	sub    esp,0xc
c000e427:	83 ec 0c             	sub    esp,0xc
c000e42a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42e:	e8 cd ff ff ff       	call   c000e400 <Timer::~Timer()>
c000e433:	83 c4 10             	add    esp,0x10
c000e436:	83 ec 08             	sub    esp,0x8
c000e439:	68 5c 01 00 00       	push   0x15c
c000e43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e442:	e8 01 c4 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000e447:	83 c4 10             	add    esp,0x10
c000e44a:	83 c4 0c             	add    esp,0xc
c000e44d:	c3                   	ret    

c000e44e <Timer::read()>:
c000e44e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e452:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e458:	c3                   	ret    

c000e459 <setupTimer(int)>:
c000e459:	53                   	push   ebx
c000e45a:	83 ec 14             	sub    esp,0x14
c000e45d:	68 5c 01 00 00       	push   0x15c
c000e462:	e8 7f 96 ff ff       	call   c0007ae6 <malloc>
c000e467:	89 04 24             	mov    DWORD PTR [esp],eax
c000e46a:	89 c3                	mov    ebx,eax
c000e46c:	e8 63 0c 01 00       	call   c001f0d4 <PIT::PIT()>
c000e471:	58                   	pop    eax
c000e472:	5a                   	pop    edx
c000e473:	53                   	push   ebx
c000e474:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e47a:	e8 77 e5 ff ff       	call   c000c9f6 <Device::addChild(Device*)>
c000e47f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e481:	6a 00                	push   0x0
c000e483:	6a 00                	push   0x0
c000e485:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e489:	53                   	push   ebx
c000e48a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e48d:	89 d8                	mov    eax,ebx
c000e48f:	83 c4 28             	add    esp,0x28
c000e492:	5b                   	pop    ebx
c000e493:	c3                   	ret    

c000e494 <timerHandler(unsigned int)>:
c000e494:	56                   	push   esi
c000e495:	53                   	push   ebx
c000e496:	51                   	push   ecx
c000e497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e49b:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e4a1:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e4a8:	0f 84 4a 01 00 00    	je     c000e5f8 <timerHandler(unsigned int)+0x164>
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e4b5:	83 ec 0c             	sub    esp,0xc
c000e4b8:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e4be:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4c3:	e8 78 19 01 00       	call   c001fe40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	84 c0                	test   al,al
c000e4cd:	0f 85 a1 00 00 00    	jne    c000e574 <timerHandler(unsigned int)+0xe0>
c000e4d3:	83 ec 0c             	sub    esp,0xc
c000e4d6:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4db:	e8 7c 19 01 00       	call   c001fe5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4e0:	83 c4 10             	add    esp,0x10
c000e4e3:	89 c6                	mov    esi,eax
c000e4e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4e8:	83 ec 0c             	sub    esp,0xc
c000e4eb:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4f0:	e8 67 19 01 00       	call   c001fe5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4f5:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e4fc:	89 c3                	mov    ebx,eax
c000e4fe:	e8 61 19 01 00       	call   c001fe64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e503:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e506:	83 c4 10             	add    esp,0x10
c000e509:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e50f:	77 23                	ja     c000e534 <timerHandler(unsigned int)+0xa0>
c000e511:	83 ec 0c             	sub    esp,0xc
c000e514:	53                   	push   ebx
c000e515:	e8 f6 81 00 00       	call   c0016710 <unblockTask(ThreadControlBlock*)>
c000e51a:	83 c4 10             	add    esp,0x10
c000e51d:	39 de                	cmp    esi,ebx
c000e51f:	75 27                	jne    c000e548 <timerHandler(unsigned int)+0xb4>
c000e521:	83 ec 0c             	sub    esp,0xc
c000e524:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e529:	e8 2e 19 01 00       	call   c001fe5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e52e:	89 c6                	mov    esi,eax
c000e530:	eb 12                	jmp    c000e544 <timerHandler(unsigned int)+0xb0>
c000e532:	66 90                	xchg   ax,ax
c000e534:	52                   	push   edx
c000e535:	52                   	push   edx
c000e536:	53                   	push   ebx
c000e537:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e53c:	e8 df 19 01 00       	call   c001ff20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e541:	8d 76 00             	lea    esi,[esi+0x0]
c000e544:	83 c4 10             	add    esp,0x10
c000e547:	90                   	nop
c000e548:	83 ec 0c             	sub    esp,0xc
c000e54b:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e550:	e8 eb 18 01 00       	call   c001fe40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e555:	83 c4 10             	add    esp,0x10
c000e558:	84 c0                	test   al,al
c000e55a:	75 18                	jne    c000e574 <timerHandler(unsigned int)+0xe0>
c000e55c:	83 ec 0c             	sub    esp,0xc
c000e55f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e564:	e8 f3 18 01 00       	call   c001fe5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e569:	83 c4 10             	add    esp,0x10
c000e56c:	39 f0                	cmp    eax,esi
c000e56e:	0f 85 74 ff ff ff    	jne    c000e4e8 <timerHandler(unsigned int)+0x54>
c000e574:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e579:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e57d:	74 41                	je     c000e5c0 <timerHandler(unsigned int)+0x12c>
c000e57f:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e586:	74 38                	je     c000e5c0 <timerHandler(unsigned int)+0x12c>
c000e588:	fa                   	cli    
c000e589:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e58f:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e594:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e59a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e59d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e5a3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e5a6:	72 08                	jb     c000e5b0 <timerHandler(unsigned int)+0x11c>
c000e5a8:	e8 4b 7c 00 00       	call   c00161f8 <schedule()>
c000e5ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e5b0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5b5:	48                   	dec    eax
c000e5b6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5bb:	75 03                	jne    c000e5c0 <timerHandler(unsigned int)+0x12c>
c000e5bd:	fb                   	sti    
c000e5be:	66 90                	xchg   ax,ax
c000e5c0:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e5c5:	48                   	dec    eax
c000e5c6:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e5cb:	75 1b                	jne    c000e5e8 <timerHandler(unsigned int)+0x154>
c000e5cd:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e5d4:	74 12                	je     c000e5e8 <timerHandler(unsigned int)+0x154>
c000e5d6:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e5e0:	e8 13 7c 00 00       	call   c00161f8 <schedule()>
c000e5e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e5e8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5ed:	48                   	dec    eax
c000e5ee:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5f3:	75 03                	jne    c000e5f8 <timerHandler(unsigned int)+0x164>
c000e5f5:	fb                   	sti    
c000e5f6:	66 90                	xchg   ax,ax
c000e5f8:	58                   	pop    eax
c000e5f9:	5b                   	pop    ebx
c000e5fa:	5e                   	pop    esi
c000e5fb:	c3                   	ret    

c000e5fc <VCache::VCache(PhysicalDisk*)>:
c000e5fc:	53                   	push   ebx
c000e5fd:	83 ec 18             	sub    esp,0x18
c000e600:	ba 24 20 02 c0       	mov    edx,0xc0022024
c000e605:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e609:	89 10                	mov    DWORD PTR [eax],edx
c000e60b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e60f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e61a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e621:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e625:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e62c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e633:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e637:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e63e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e649:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e650:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e654:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e658:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e65c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e663:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e66a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e66e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e676:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e67a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e67e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e686:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e68d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e695:	83 ec 0c             	sub    esp,0xc
c000e698:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e69c:	e8 45 94 ff ff       	call   c0007ae6 <malloc>
c000e6a1:	83 c4 10             	add    esp,0x10
c000e6a4:	89 c3                	mov    ebx,eax
c000e6a6:	83 ec 0c             	sub    esp,0xc
c000e6a9:	53                   	push   ebx
c000e6aa:	e8 e5 78 00 00       	call   c0015f94 <Mutex::Mutex()>
c000e6af:	83 c4 10             	add    esp,0x10
c000e6b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6b6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e6b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6bd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6c1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e6c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6c8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e6cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6d3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6dd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e6e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6e4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e6ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e6f4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e6f7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e6fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6fe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e702:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e706:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e70c:	05 00 02 00 00       	add    eax,0x200
c000e711:	c1 e0 03             	shl    eax,0x3
c000e714:	83 ec 0c             	sub    esp,0xc
c000e717:	50                   	push   eax
c000e718:	e8 c9 93 ff ff       	call   c0007ae6 <malloc>
c000e71d:	83 c4 10             	add    esp,0x10
c000e720:	89 c2                	mov    edx,eax
c000e722:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e726:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e729:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e72d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e734:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e738:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e73c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e740:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e746:	89 d0                	mov    eax,edx
c000e748:	c1 e0 02             	shl    eax,0x2
c000e74b:	01 d0                	add    eax,edx
c000e74d:	c1 e0 04             	shl    eax,0x4
c000e750:	83 ec 0c             	sub    esp,0xc
c000e753:	50                   	push   eax
c000e754:	e8 8d 93 ff ff       	call   c0007ae6 <malloc>
c000e759:	83 c4 10             	add    esp,0x10
c000e75c:	89 c2                	mov    edx,eax
c000e75e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e762:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e765:	90                   	nop
c000e766:	83 c4 18             	add    esp,0x18
c000e769:	5b                   	pop    ebx
c000e76a:	c3                   	ret    
c000e76b:	90                   	nop

c000e76c <VCache::invalidateReadBuffer()>:
c000e76c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e770:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e776:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e77a:	c3                   	ret    
c000e77b:	90                   	nop

c000e77c <VCache::writeWriteBuffer()>:
c000e77c:	53                   	push   ebx
c000e77d:	83 ec 08             	sub    esp,0x8
c000e780:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e784:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e788:	74 1e                	je     c000e7a8 <VCache::writeWriteBuffer()+0x2c>
c000e78a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e78d:	83 ec 0c             	sub    esp,0xc
c000e790:	8b 10                	mov    edx,DWORD PTR [eax]
c000e792:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e795:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e798:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e79b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e79e:	50                   	push   eax
c000e79f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e7a2:	83 c4 20             	add    esp,0x20
c000e7a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e7a8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e7af:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e7b6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e7ba:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e7c1:	83 c4 08             	add    esp,0x8
c000e7c4:	5b                   	pop    ebx
c000e7c5:	c3                   	ret    
c000e7c6:	66 90                	xchg   ax,ax

c000e7c8 <VCache::~VCache()>:
c000e7c8:	83 ec 0c             	sub    esp,0xc
c000e7cb:	ba 24 20 02 c0       	mov    edx,0xc0022024
c000e7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d4:	89 10                	mov    DWORD PTR [eax],edx
c000e7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7da:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e7dd:	0f b6 c0             	movzx  eax,al
c000e7e0:	85 c0                	test   eax,eax
c000e7e2:	74 10                	je     c000e7f4 <VCache::~VCache()+0x2c>
c000e7e4:	83 ec 0c             	sub    esp,0xc
c000e7e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7eb:	e8 8c ff ff ff       	call   c000e77c <VCache::writeWriteBuffer()>
c000e7f0:	83 c4 10             	add    esp,0x10
c000e7f3:	90                   	nop
c000e7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e7fb:	83 ec 0c             	sub    esp,0xc
c000e7fe:	50                   	push   eax
c000e7ff:	e8 f2 92 ff ff       	call   c0007af6 <free>
c000e804:	83 c4 10             	add    esp,0x10
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e80e:	83 ec 0c             	sub    esp,0xc
c000e811:	50                   	push   eax
c000e812:	e8 df 92 ff ff       	call   c0007af6 <free>
c000e817:	83 c4 10             	add    esp,0x10
c000e81a:	90                   	nop
c000e81b:	83 c4 0c             	add    esp,0xc
c000e81e:	c3                   	ret    
c000e81f:	90                   	nop

c000e820 <VCache::~VCache()>:
c000e820:	83 ec 0c             	sub    esp,0xc
c000e823:	83 ec 0c             	sub    esp,0xc
c000e826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e82a:	e8 99 ff ff ff       	call   c000e7c8 <VCache::~VCache()>
c000e82f:	83 c4 10             	add    esp,0x10
c000e832:	83 ec 08             	sub    esp,0x8
c000e835:	6a 44                	push   0x44
c000e837:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e83b:	e8 08 c0 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000e840:	83 c4 10             	add    esp,0x10
c000e843:	83 c4 0c             	add    esp,0xc
c000e846:	c3                   	ret    
c000e847:	90                   	nop

c000e848 <VCache::write(unsigned long long, int, void*)>:
c000e848:	55                   	push   ebp
c000e849:	57                   	push   edi
c000e84a:	56                   	push   esi
c000e84b:	53                   	push   ebx
c000e84c:	83 ec 1c             	sub    esp,0x1c
c000e84f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e853:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e857:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e85b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e85f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e863:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e867:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e86b:	74 07                	je     c000e874 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e86d:	53                   	push   ebx
c000e86e:	e8 f9 fe ff ff       	call   c000e76c <VCache::invalidateReadBuffer()>
c000e873:	58                   	pop    eax
c000e874:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e878:	74 62                	je     c000e8dc <VCache::write(unsigned long long, int, void*)+0x94>
c000e87a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e87d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e881:	99                   	cdq    
c000e882:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e886:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e889:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e88c:	31 c1                	xor    ecx,eax
c000e88e:	89 d0                	mov    eax,edx
c000e890:	89 ca                	mov    edx,ecx
c000e892:	31 e8                	xor    eax,ebp
c000e894:	09 c2                	or     edx,eax
c000e896:	75 38                	jne    c000e8d0 <VCache::write(unsigned long long, int, void*)+0x88>
c000e898:	83 ff 01             	cmp    edi,0x1
c000e89b:	75 33                	jne    c000e8d0 <VCache::write(unsigned long long, int, void*)+0x88>
c000e89d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e8a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e8a4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e8aa:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e8ad:	0f af c8             	imul   ecx,eax
c000e8b0:	01 cf                	add    edi,ecx
c000e8b2:	89 c1                	mov    ecx,eax
c000e8b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e8b9:	40                   	inc    eax
c000e8ba:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e8bd:	83 f8 50             	cmp    eax,0x50
c000e8c0:	75 6a                	jne    c000e92c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e8c2:	83 ec 0c             	sub    esp,0xc
c000e8c5:	53                   	push   ebx
c000e8c6:	e8 b1 fe ff ff       	call   c000e77c <VCache::writeWriteBuffer()>
c000e8cb:	83 c4 10             	add    esp,0x10
c000e8ce:	eb 5c                	jmp    c000e92c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e8d0:	83 ec 0c             	sub    esp,0xc
c000e8d3:	53                   	push   ebx
c000e8d4:	e8 a3 fe ff ff       	call   c000e77c <VCache::writeWriteBuffer()>
c000e8d9:	83 c4 10             	add    esp,0x10
c000e8dc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e8df:	83 ff 4f             	cmp    edi,0x4f
c000e8e2:	7f 20                	jg     c000e904 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e8e4:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e8e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e8eb:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e8ee:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e8f1:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e8f5:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e8f8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e8fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e900:	eb 2a                	jmp    c000e92c <VCache::write(unsigned long long, int, void*)+0xe4>
c000e902:	66 90                	xchg   ax,ax
c000e904:	8b 10                	mov    edx,DWORD PTR [eax]
c000e906:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e90a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e90e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e912:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e916:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e91a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e91e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e921:	83 c4 1c             	add    esp,0x1c
c000e924:	5b                   	pop    ebx
c000e925:	5e                   	pop    esi
c000e926:	5f                   	pop    edi
c000e927:	5d                   	pop    ebp
c000e928:	ff e0                	jmp    eax
c000e92a:	66 90                	xchg   ax,ax
c000e92c:	83 c4 1c             	add    esp,0x1c
c000e92f:	31 c0                	xor    eax,eax
c000e931:	5b                   	pop    ebx
c000e932:	5e                   	pop    esi
c000e933:	5f                   	pop    edi
c000e934:	5d                   	pop    ebp
c000e935:	c3                   	ret    

c000e936 <VCache::read(unsigned long long, int, void*)>:
c000e936:	55                   	push   ebp
c000e937:	57                   	push   edi
c000e938:	56                   	push   esi
c000e939:	53                   	push   ebx
c000e93a:	83 ec 1c             	sub    esp,0x1c
c000e93d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e941:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e945:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e949:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e94d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e951:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e955:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e959:	74 0d                	je     c000e968 <VCache::read(unsigned long long, int, void*)+0x32>
c000e95b:	83 ec 0c             	sub    esp,0xc
c000e95e:	57                   	push   edi
c000e95f:	e8 18 fe ff ff       	call   c000e77c <VCache::writeWriteBuffer()>
c000e964:	83 c4 10             	add    esp,0x10
c000e967:	90                   	nop
c000e968:	83 fd 01             	cmp    ebp,0x1
c000e96b:	0f 85 93 00 00 00    	jne    c000ea04 <VCache::read(unsigned long long, int, void*)+0xce>
c000e971:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e974:	89 04 24             	mov    DWORD PTR [esp],eax
c000e977:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e97e:	0f 85 80 00 00 00    	jne    c000ea04 <VCache::read(unsigned long long, int, void*)+0xce>
c000e984:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e987:	89 e9                	mov    ecx,ebp
c000e989:	f7 d9                	neg    ecx
c000e98b:	89 c8                	mov    eax,ecx
c000e98d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e991:	c1 f8 1f             	sar    eax,0x1f
c000e994:	21 d9                	and    ecx,ebx
c000e996:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e99a:	89 c8                	mov    eax,ecx
c000e99c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e9a0:	21 f1                	and    ecx,esi
c000e9a2:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e9a6:	89 ca                	mov    edx,ecx
c000e9a8:	74 2e                	je     c000e9d8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9aa:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e9ad:	75 29                	jne    c000e9d8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9af:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e9b2:	75 24                	jne    c000e9d8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9b4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9b7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e9bd:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e9c0:	8d 70 ff             	lea    esi,[eax-0x1]
c000e9c3:	21 f3                	and    ebx,esi
c000e9c5:	0f af d9             	imul   ebx,ecx
c000e9c8:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e9cb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e9cf:	89 de                	mov    esi,ebx
c000e9d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e9d3:	31 c0                	xor    eax,eax
c000e9d5:	eb 61                	jmp    c000ea38 <VCache::read(unsigned long long, int, void*)+0x102>
c000e9d7:	90                   	nop
c000e9d8:	83 ec 0c             	sub    esp,0xc
c000e9db:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e9df:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e9e3:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e9e6:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e9e9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e9eb:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e9ee:	55                   	push   ebp
c000e9ef:	52                   	push   edx
c000e9f0:	50                   	push   eax
c000e9f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9f5:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e9f8:	83 c4 20             	add    esp,0x20
c000e9fb:	85 c0                	test   eax,eax
c000e9fd:	75 39                	jne    c000ea38 <VCache::read(unsigned long long, int, void*)+0x102>
c000e9ff:	eb b3                	jmp    c000e9b4 <VCache::read(unsigned long long, int, void*)+0x7e>
c000ea01:	8d 76 00             	lea    esi,[esi+0x0]
c000ea04:	83 ec 0c             	sub    esp,0xc
c000ea07:	57                   	push   edi
c000ea08:	e8 5f fd ff ff       	call   c000e76c <VCache::invalidateReadBuffer()>
c000ea0d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ea10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea14:	8b 10                	mov    edx,DWORD PTR [eax]
c000ea16:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000ea1a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000ea1e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000ea22:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ea26:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea2a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ea2d:	83 c4 2c             	add    esp,0x2c
c000ea30:	5b                   	pop    ebx
c000ea31:	5e                   	pop    esi
c000ea32:	5f                   	pop    edi
c000ea33:	5d                   	pop    ebp
c000ea34:	ff e0                	jmp    eax
c000ea36:	66 90                	xchg   ax,ax
c000ea38:	83 c4 1c             	add    esp,0x1c
c000ea3b:	5b                   	pop    ebx
c000ea3c:	5e                   	pop    esi
c000ea3d:	5f                   	pop    edi
c000ea3e:	5d                   	pop    ebp
c000ea3f:	c3                   	ret    

c000ea40 <Video::putrect(int, int, int, int, unsigned int)>:
c000ea40:	55                   	push   ebp
c000ea41:	57                   	push   edi
c000ea42:	56                   	push   esi
c000ea43:	53                   	push   ebx
c000ea44:	83 ec 1c             	sub    esp,0x1c
c000ea47:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ea4b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea4f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ea53:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ea57:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea5f:	01 df                	add    edi,ebx
c000ea61:	39 fb                	cmp    ebx,edi
c000ea63:	7d 1f                	jge    c000ea84 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea65:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea69:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea6d:	7d 12                	jge    c000ea81 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea6f:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea71:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea75:	53                   	push   ebx
c000ea76:	55                   	push   ebp
c000ea77:	45                   	inc    ebp
c000ea78:	56                   	push   esi
c000ea79:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea7c:	83 c4 10             	add    esp,0x10
c000ea7f:	eb e8                	jmp    c000ea69 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea81:	43                   	inc    ebx
c000ea82:	eb dd                	jmp    c000ea61 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea84:	83 c4 1c             	add    esp,0x1c
c000ea87:	5b                   	pop    ebx
c000ea88:	5e                   	pop    esi
c000ea89:	5f                   	pop    edi
c000ea8a:	5d                   	pop    ebp
c000ea8b:	c3                   	ret    

c000ea8c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea8c:	55                   	push   ebp
c000ea8d:	57                   	push   edi
c000ea8e:	31 ff                	xor    edi,edi
c000ea90:	56                   	push   esi
c000ea91:	53                   	push   ebx
c000ea92:	83 ec 1c             	sub    esp,0x1c
c000ea95:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea99:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea9d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000eaa4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000eaa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eaad:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000eab1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000eab5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000eab8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eabc:	01 f9                	add    ecx,edi
c000eabe:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000eac2:	7d 2f                	jge    c000eaf3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000eac4:	31 f6                	xor    esi,esi
c000eac6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eaca:	01 f2                	add    edx,esi
c000eacc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ead0:	7d 1a                	jge    c000eaec <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ead2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ead5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ead8:	46                   	inc    esi
c000ead9:	51                   	push   ecx
c000eada:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000eade:	52                   	push   edx
c000eadf:	55                   	push   ebp
c000eae0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eae3:	83 c4 10             	add    esp,0x10
c000eae6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eaea:	eb da                	jmp    c000eac6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000eaec:	47                   	inc    edi
c000eaed:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000eaf1:	eb c5                	jmp    c000eab8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000eaf3:	83 c4 1c             	add    esp,0x1c
c000eaf6:	5b                   	pop    ebx
c000eaf7:	5e                   	pop    esi
c000eaf8:	5f                   	pop    edi
c000eaf9:	5d                   	pop    ebp
c000eafa:	c3                   	ret    
c000eafb:	90                   	nop

c000eafc <Video::blit(unsigned int*, int, int, int, int)>:
c000eafc:	55                   	push   ebp
c000eafd:	57                   	push   edi
c000eafe:	56                   	push   esi
c000eaff:	53                   	push   ebx
c000eb00:	83 ec 1c             	sub    esp,0x1c
c000eb03:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb07:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eb0b:	85 c0                	test   eax,eax
c000eb0d:	79 02                	jns    c000eb11 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000eb0f:	31 c0                	xor    eax,eax
c000eb11:	c1 e0 02             	shl    eax,0x2
c000eb14:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000eb18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb1c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb20:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000eb24:	39 d8                	cmp    eax,ebx
c000eb26:	7e 49                	jle    c000eb71 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eb28:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb2e:	7c 41                	jl     c000eb71 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eb30:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eb34:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eb38:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb3c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000eb40:	39 f9                	cmp    ecx,edi
c000eb42:	7e 22                	jle    c000eb66 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000eb44:	83 c5 04             	add    ebp,0x4
c000eb47:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb4d:	7c 14                	jl     c000eb63 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000eb4f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eb51:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000eb54:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb58:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb5c:	56                   	push   esi
c000eb5d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb60:	83 c4 10             	add    esp,0x10
c000eb63:	47                   	inc    edi
c000eb64:	eb d2                	jmp    c000eb38 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000eb66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb6a:	43                   	inc    ebx
c000eb6b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000eb6f:	eb ab                	jmp    c000eb1c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000eb71:	83 c4 1c             	add    esp,0x1c
c000eb74:	5b                   	pop    ebx
c000eb75:	5e                   	pop    esi
c000eb76:	5f                   	pop    edi
c000eb77:	5d                   	pop    ebp
c000eb78:	c3                   	ret    
c000eb79:	90                   	nop

c000eb7a <Video::clearScreen(unsigned int)>:
c000eb7a:	57                   	push   edi
c000eb7b:	56                   	push   esi
c000eb7c:	53                   	push   ebx
c000eb7d:	31 db                	xor    ebx,ebx
c000eb7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb83:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb89:	7e 1f                	jle    c000ebaa <Video::clearScreen(unsigned int)+0x30>
c000eb8b:	31 ff                	xor    edi,edi
c000eb8d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb93:	7e 12                	jle    c000eba7 <Video::clearScreen(unsigned int)+0x2d>
c000eb95:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb9b:	53                   	push   ebx
c000eb9c:	57                   	push   edi
c000eb9d:	47                   	inc    edi
c000eb9e:	56                   	push   esi
c000eb9f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eba2:	83 c4 10             	add    esp,0x10
c000eba5:	eb e6                	jmp    c000eb8d <Video::clearScreen(unsigned int)+0x13>
c000eba7:	43                   	inc    ebx
c000eba8:	eb d9                	jmp    c000eb83 <Video::clearScreen(unsigned int)+0x9>
c000ebaa:	5b                   	pop    ebx
c000ebab:	5e                   	pop    esi
c000ebac:	5f                   	pop    edi
c000ebad:	c3                   	ret    

c000ebae <Video::putpixel(int, int, unsigned int)>:
c000ebae:	c7 44 24 04 2c 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc002202c
c000ebb6:	e9 58 2b 00 00       	jmp    c0011713 <KePanic(char const*)>
c000ebbb:	90                   	nop

c000ebbc <Video::readPixelApprox(int, int)>:
c000ebbc:	83 ec 18             	sub    esp,0x18
c000ebbf:	68 4d 20 02 c0       	push   0xc002204d
c000ebc4:	e8 4a 2b 00 00       	call   c0011713 <KePanic(char const*)>
c000ebc9:	31 c0                	xor    eax,eax
c000ebcb:	83 c4 1c             	add    esp,0x1c
c000ebce:	c3                   	ret    
c000ebcf:	90                   	nop

c000ebd0 <Video::Video(char const*)>:
c000ebd0:	83 ec 0c             	sub    esp,0xc
c000ebd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebd7:	83 ec 08             	sub    esp,0x8
c000ebda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebde:	50                   	push   eax
c000ebdf:	e8 e4 df ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000ebe4:	83 c4 10             	add    esp,0x10
c000ebe7:	ba c8 20 02 c0       	mov    edx,0xc00220c8
c000ebec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebf0:	89 10                	mov    DWORD PTR [eax],edx
c000ebf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebf6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ec00:	90                   	nop
c000ec01:	83 c4 0c             	add    esp,0xc
c000ec04:	c3                   	ret    
c000ec05:	90                   	nop

c000ec06 <Video::~Video()>:
c000ec06:	83 ec 0c             	sub    esp,0xc
c000ec09:	ba c8 20 02 c0       	mov    edx,0xc00220c8
c000ec0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec12:	89 10                	mov    DWORD PTR [eax],edx
c000ec14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec18:	83 ec 0c             	sub    esp,0xc
c000ec1b:	50                   	push   eax
c000ec1c:	e8 d7 dc ff ff       	call   c000c8f8 <Device::~Device()>
c000ec21:	83 c4 10             	add    esp,0x10
c000ec24:	90                   	nop
c000ec25:	83 c4 0c             	add    esp,0xc
c000ec28:	c3                   	ret    
c000ec29:	90                   	nop

c000ec2a <Video::~Video()>:
c000ec2a:	83 ec 0c             	sub    esp,0xc
c000ec2d:	83 ec 0c             	sub    esp,0xc
c000ec30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec34:	e8 cd ff ff ff       	call   c000ec06 <Video::~Video()>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	83 ec 08             	sub    esp,0x8
c000ec3f:	68 64 01 00 00       	push   0x164
c000ec44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec48:	e8 fb bb ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c000ec4d:	83 c4 10             	add    esp,0x10
c000ec50:	83 c4 0c             	add    esp,0xc
c000ec53:	c3                   	ret    

c000ec54 <Video::isMonochrome()>:
c000ec54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec58:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec5e:	c3                   	ret    
c000ec5f:	90                   	nop

c000ec60 <Video::getWidth()>:
c000ec60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec64:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec6a:	c3                   	ret    
c000ec6b:	90                   	nop

c000ec6c <Video::getHeight()>:
c000ec6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec70:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec76:	c3                   	ret    
c000ec77:	90                   	nop

c000ec78 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec78:	55                   	push   ebp
c000ec79:	57                   	push   edi
c000ec7a:	56                   	push   esi
c000ec7b:	53                   	push   ebx
c000ec7c:	83 ec 2c             	sub    esp,0x2c
c000ec7f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec83:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ec87:	83 f8 01             	cmp    eax,0x1
c000ec8a:	19 c9                	sbb    ecx,ecx
c000ec8c:	31 db                	xor    ebx,ebx
c000ec8e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec92:	89 cd                	mov    ebp,ecx
c000ec94:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ec9c:	f7 d5                	not    ebp
c000ec9e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000eca4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000eca8:	01 d8                	add    eax,ebx
c000ecaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecae:	56                   	push   esi
c000ecaf:	e8 b8 ff ff ff       	call   c000ec6c <Video::getHeight()>
c000ecb4:	59                   	pop    ecx
c000ecb5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ecb9:	7e 70                	jle    c000ed2b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ecbb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ecbf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ecc3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ecc6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ecca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ecce:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ecd5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ecd9:	89 f8                	mov    eax,edi
c000ecdb:	83 c0 20             	add    eax,0x20
c000ecde:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ece2:	56                   	push   esi
c000ece3:	e8 78 ff ff ff       	call   c000ec60 <Video::getWidth()>
c000ece8:	5a                   	pop    edx
c000ece9:	39 c7                	cmp    edi,eax
c000eceb:	7d 34                	jge    c000ed21 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000eced:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ecf2:	74 05                	je     c000ecf9 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ecf4:	8b 06                	mov    eax,DWORD PTR [esi]
c000ecf6:	55                   	push   ebp
c000ecf7:	eb 0d                	jmp    c000ed06 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ecf9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ecfe:	74 12                	je     c000ed12 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ed00:	8b 06                	mov    eax,DWORD PTR [esi]
c000ed02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed06:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed0a:	57                   	push   edi
c000ed0b:	56                   	push   esi
c000ed0c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ed0f:	83 c4 10             	add    esp,0x10
c000ed12:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ed16:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ed1a:	47                   	inc    edi
c000ed1b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ed1f:	75 c1                	jne    c000ece2 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ed21:	43                   	inc    ebx
c000ed22:	83 fb 20             	cmp    ebx,0x20
c000ed25:	0f 85 79 ff ff ff    	jne    c000eca4 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ed2b:	83 c4 2c             	add    esp,0x2c
c000ed2e:	5b                   	pop    ebx
c000ed2f:	5e                   	pop    esi
c000ed30:	5f                   	pop    edi
c000ed31:	5d                   	pop    ebp
c000ed32:	c3                   	ret    
c000ed33:	90                   	nop

c000ed34 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ed34:	55                   	push   ebp
c000ed35:	57                   	push   edi
c000ed36:	56                   	push   esi
c000ed37:	53                   	push   ebx
c000ed38:	83 ec 28             	sub    esp,0x28
c000ed3b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ed3f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ed43:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ed47:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ed4b:	c1 e6 08             	shl    esi,0x8
c000ed4e:	01 c6                	add    esi,eax
c000ed50:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ed54:	c1 e0 08             	shl    eax,0x8
c000ed57:	01 d0                	add    eax,edx
c000ed59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed61:	0f af c6             	imul   eax,esi
c000ed64:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed6b:	50                   	push   eax
c000ed6c:	e8 75 8d ff ff       	call   c0007ae6 <malloc>
c000ed71:	83 c4 10             	add    esp,0x10
c000ed74:	89 c7                	mov    edi,eax
c000ed76:	85 c0                	test   eax,eax
c000ed78:	75 10                	jne    c000ed8a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed7a:	83 ec 0c             	sub    esp,0xc
c000ed7d:	68 78 20 02 c0       	push   0xc0022078
c000ed82:	e8 8c 29 00 00       	call   c0011713 <KePanic(char const*)>
c000ed87:	83 c4 10             	add    esp,0x10
c000ed8a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed8e:	ba 12 00 00 00       	mov    edx,0x12
c000ed93:	85 c0                	test   eax,eax
c000ed95:	74 11                	je     c000eda8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed97:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ed9b:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ed9f:	c1 fa 03             	sar    edx,0x3
c000eda2:	0f af d1             	imul   edx,ecx
c000eda5:	83 c2 12             	add    edx,0x12
c000eda8:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000edac:	74 04                	je     c000edb2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000edae:	85 f6                	test   esi,esi
c000edb0:	75 12                	jne    c000edc4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000edb2:	83 ec 0c             	sub    esp,0xc
c000edb5:	68 88 20 02 c0       	push   0xc0022088
c000edba:	e8 b6 bb ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000edbf:	e9 b8 00 00 00       	jmp    c000ee7c <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000edc4:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000edc8:	83 f9 02             	cmp    ecx,0x2
c000edcb:	0f 85 96 00 00 00    	jne    c000ee67 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000edd1:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000edd6:	75 0e                	jne    c000ede6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000edd8:	85 c0                	test   eax,eax
c000edda:	75 0a                	jne    c000ede6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eddc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eddf:	83 e8 18             	sub    eax,0x18
c000ede2:	a8 f7                	test   al,0xf7
c000ede4:	74 0a                	je     c000edf0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ede6:	83 ec 0c             	sub    esp,0xc
c000ede9:	68 9d 20 02 c0       	push   0xc002209d
c000edee:	eb 7f                	jmp    c000ee6f <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000edf0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000edf8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ee00:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000ee04:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ee0c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ee10:	75 0c                	jne    c000ee1e <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ee12:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000ee17:	c1 e0 18             	shl    eax,0x18
c000ee1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ee1e:	45                   	inc    ebp
c000ee1f:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ee24:	c1 e1 10             	shl    ecx,0x10
c000ee27:	89 c8                	mov    eax,ecx
c000ee29:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ee2e:	c1 e1 08             	shl    ecx,0x8
c000ee31:	09 c1                	or     ecx,eax
c000ee33:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ee37:	09 c1                	or     ecx,eax
c000ee39:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ee3d:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ee41:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ee45:	c1 f8 03             	sar    eax,0x3
c000ee48:	01 c2                	add    edx,eax
c000ee4a:	89 e8                	mov    eax,ebp
c000ee4c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ee50:	39 c6                	cmp    esi,eax
c000ee52:	7f b0                	jg     c000ee04 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee54:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee5c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee5f:	7e 22                	jle    c000ee83 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee61:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ee65:	eb 99                	jmp    c000ee00 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee67:	50                   	push   eax
c000ee68:	50                   	push   eax
c000ee69:	51                   	push   ecx
c000ee6a:	68 ab 20 02 c0       	push   0xc00220ab
c000ee6f:	e8 01 bb ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ee74:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ee77:	e8 7a 8c ff ff       	call   c0007af6 <free>
c000ee7c:	83 c4 10             	add    esp,0x10
c000ee7f:	31 ff                	xor    edi,edi
c000ee81:	eb 0f                	jmp    c000ee92 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee87:	89 30                	mov    DWORD PTR [eax],esi
c000ee89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee8d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ee90:	89 30                	mov    DWORD PTR [eax],esi
c000ee92:	83 c4 1c             	add    esp,0x1c
c000ee95:	89 f8                	mov    eax,edi
c000ee97:	5b                   	pop    ebx
c000ee98:	5e                   	pop    esi
c000ee99:	5f                   	pop    edi
c000ee9a:	5d                   	pop    ebp
c000ee9b:	c3                   	ret    

c000ee9c <Video::putTGA(int, int, unsigned char*, int)>:
c000ee9c:	55                   	push   ebp
c000ee9d:	57                   	push   edi
c000ee9e:	56                   	push   esi
c000ee9f:	53                   	push   ebx
c000eea0:	83 ec 28             	sub    esp,0x28
c000eea3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000eea7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eeab:	50                   	push   eax
c000eeac:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eeb0:	50                   	push   eax
c000eeb1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eeb5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eeb9:	56                   	push   esi
c000eeba:	e8 75 fe ff ff       	call   c000ed34 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eebf:	83 c4 20             	add    esp,0x20
c000eec2:	85 c0                	test   eax,eax
c000eec4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eec8:	74 35                	je     c000eeff <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eeca:	89 c7                	mov    edi,eax
c000eecc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eed0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eed4:	39 d8                	cmp    eax,ebx
c000eed6:	7e 27                	jle    c000eeff <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eed8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eedc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eee0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000eee4:	39 e8                	cmp    eax,ebp
c000eee6:	7e 14                	jle    c000eefc <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eee8:	8b 06                	mov    eax,DWORD PTR [esi]
c000eeea:	83 c7 04             	add    edi,0x4
c000eeed:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000eef0:	53                   	push   ebx
c000eef1:	55                   	push   ebp
c000eef2:	45                   	inc    ebp
c000eef3:	56                   	push   esi
c000eef4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eef7:	83 c4 10             	add    esp,0x10
c000eefa:	eb e0                	jmp    c000eedc <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eefc:	43                   	inc    ebx
c000eefd:	eb cd                	jmp    c000eecc <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eeff:	83 c4 1c             	add    esp,0x1c
c000ef02:	5b                   	pop    ebx
c000ef03:	5e                   	pop    esi
c000ef04:	5f                   	pop    edi
c000ef05:	5d                   	pop    ebp
c000ef06:	c3                   	ret    
c000ef07:	90                   	nop

c000ef08 <ACPI::close(int, int, void*)>:
c000ef08:	83 ec 1c             	sub    esp,0x1c
c000ef0b:	83 ec 0c             	sub    esp,0xc
c000ef0e:	68 0c 21 02 c0       	push   0xc002210c
c000ef13:	e8 5d ba ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ef18:	83 c4 10             	add    esp,0x10
c000ef1b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ef23:	74 1b                	je     c000ef40 <ACPI::close(int, int, void*)+0x38>
c000ef25:	83 ec 0c             	sub    esp,0xc
c000ef28:	68 1b 21 02 c0       	push   0xc002211b
c000ef2d:	e8 43 ba ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ef32:	83 c4 10             	add    esp,0x10
c000ef35:	b8 00 00 00 00       	mov    eax,0x0
c000ef3a:	e9 01 01 00 00       	jmp    c000f040 <ACPI::close(int, int, void*)+0x138>
c000ef3f:	90                   	nop
c000ef40:	83 ec 0c             	sub    esp,0xc
c000ef43:	68 2c 21 02 c0       	push   0xc002212c
c000ef48:	e8 28 ba ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ef4d:	83 c4 10             	add    esp,0x10
c000ef50:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ef55:	75 45                	jne    c000ef9c <ACPI::close(int, int, void*)+0x94>
c000ef57:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef5c:	83 ec 08             	sub    esp,0x8
c000ef5f:	50                   	push   eax
c000ef60:	68 3b 21 02 c0       	push   0xc002213b
c000ef65:	e8 0b ba ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000ef6a:	83 c4 10             	add    esp,0x10
c000ef6d:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef72:	85 c0                	test   eax,eax
c000ef74:	74 0a                	je     c000ef80 <ACPI::close(int, int, void*)+0x78>
c000ef76:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef7b:	ff d0                	call   eax
c000ef7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef80:	83 ec 0c             	sub    esp,0xc
c000ef83:	68 0c 23 02 c0       	push   0xc002230c
c000ef88:	e8 86 27 00 00       	call   c0011713 <KePanic(char const*)>
c000ef8d:	83 c4 10             	add    esp,0x10
c000ef90:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef95:	e9 a6 00 00 00       	jmp    c000f040 <ACPI::close(int, int, void*)+0x138>
c000ef9a:	66 90                	xchg   ax,ax
c000ef9c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000efa1:	0f 85 81 00 00 00    	jne    c000f028 <ACPI::close(int, int, void*)+0x120>
c000efa7:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000efac:	83 ec 08             	sub    esp,0x8
c000efaf:	50                   	push   eax
c000efb0:	68 59 21 02 c0       	push   0xc0022159
c000efb5:	e8 bb b9 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000efba:	83 c4 10             	add    esp,0x10
c000efbd:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000efc2:	85 c0                	test   eax,eax
c000efc4:	74 0a                	je     c000efd0 <ACPI::close(int, int, void*)+0xc8>
c000efc6:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000efcb:	ff d0                	call   eax
c000efcd:	8d 76 00             	lea    esi,[esi+0x0]
c000efd0:	83 ec 0c             	sub    esp,0xc
c000efd3:	68 74 21 02 c0       	push   0xc0022174
c000efd8:	e8 98 b9 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000efdd:	83 c4 10             	add    esp,0x10
c000efe0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000efe5:	8d 76 00             	lea    esi,[esi+0x0]
c000efe8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000efed:	83 e0 02             	and    eax,0x2
c000eff0:	74 1e                	je     c000f010 <ACPI::close(int, int, void*)+0x108>
c000eff2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eff9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000effd:	89 c2                	mov    edx,eax
c000efff:	ec                   	in     al,dx
c000f000:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000f004:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000f008:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f00c:	eb da                	jmp    c000efe8 <ACPI::close(int, int, void*)+0xe0>
c000f00e:	66 90                	xchg   ax,ax
c000f010:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000f017:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000f01c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f020:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f024:	ee                   	out    dx,al
c000f025:	8d 76 00             	lea    esi,[esi+0x0]
c000f028:	83 ec 0c             	sub    esp,0xc
c000f02b:	68 86 21 02 c0       	push   0xc0022186
c000f030:	e8 40 b9 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c000f035:	83 c4 10             	add    esp,0x10
c000f038:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f03d:	8d 76 00             	lea    esi,[esi+0x0]
c000f040:	83 c4 1c             	add    esp,0x1c
c000f043:	c3                   	ret    

c000f044 <findRSDP()>:
c000f044:	83 ec 1c             	sub    esp,0x1c
c000f047:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f04c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f052:	83 e0 04             	and    eax,0x4
c000f055:	0f b6 c0             	movzx  eax,al
c000f058:	85 c0                	test   eax,eax
c000f05a:	75 08                	jne    c000f064 <findRSDP()+0x20>
c000f05c:	b8 00 00 00 00       	mov    eax,0x0
c000f061:	eb 75                	jmp    c000f0d8 <findRSDP()+0x94>
c000f063:	90                   	nop
c000f064:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000f069:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f06e:	7f 1c                	jg     c000f08c <findRSDP()+0x48>
c000f070:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f075:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f07b:	83 e2 fb             	and    edx,0xfffffffb
c000f07e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f084:	b8 00 00 00 00       	mov    eax,0x0
c000f089:	eb 4d                	jmp    c000f0d8 <findRSDP()+0x94>
c000f08b:	90                   	nop
c000f08c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000f094:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000f09c:	77 32                	ja     c000f0d0 <findRSDP()+0x8c>
c000f09e:	83 ec 04             	sub    esp,0x4
c000f0a1:	6a 08                	push   0x8
c000f0a3:	68 95 21 02 c0       	push   0xc0022195
c000f0a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0ac:	e8 cf 12 ff ff       	call   c0000380 <memcmp>
c000f0b1:	83 c4 10             	add    esp,0x10
c000f0b4:	85 c0                	test   eax,eax
c000f0b6:	0f 94 c0             	sete   al
c000f0b9:	0f b6 c0             	movzx  eax,al
c000f0bc:	85 c0                	test   eax,eax
c000f0be:	74 08                	je     c000f0c8 <findRSDP()+0x84>
c000f0c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0c4:	eb 12                	jmp    c000f0d8 <findRSDP()+0x94>
c000f0c6:	66 90                	xchg   ax,ax
c000f0c8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f0cd:	eb c5                	jmp    c000f094 <findRSDP()+0x50>
c000f0cf:	90                   	nop
c000f0d0:	b8 00 00 00 00       	mov    eax,0x0
c000f0d5:	8d 76 00             	lea    esi,[esi+0x0]
c000f0d8:	83 c4 1c             	add    esp,0x1c
c000f0db:	c3                   	ret    

c000f0dc <loadACPITables(unsigned char*)>:
c000f0dc:	57                   	push   edi
c000f0dd:	56                   	push   esi
c000f0de:	53                   	push   ebx
c000f0df:	83 ec 60             	sub    esp,0x60
c000f0e2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f0e7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0ed:	83 e0 04             	and    eax,0x4
c000f0f0:	0f b6 c0             	movzx  eax,al
c000f0f3:	85 c0                	test   eax,eax
c000f0f5:	0f 84 41 02 00 00    	je     c000f33c <loadACPITables(unsigned char*)+0x260>
c000f0fb:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f100:	0f b6 c0             	movzx  eax,al
c000f103:	85 c0                	test   eax,eax
c000f105:	74 79                	je     c000f180 <loadACPITables(unsigned char*)+0xa4>
c000f107:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f10b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f10f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f113:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f116:	83 e8 24             	sub    eax,0x24
c000f119:	c1 e8 03             	shr    eax,0x3
c000f11c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f120:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f128:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f12c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f130:	0f 8d ba 00 00 00    	jge    c000f1f0 <loadACPITables(unsigned char*)+0x114>
c000f136:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f13a:	83 c0 24             	add    eax,0x24
c000f13d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f141:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f145:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f149:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f14d:	c1 e0 03             	shl    eax,0x3
c000f150:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f154:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f158:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f15b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f15d:	89 c1                	mov    ecx,eax
c000f15f:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f164:	8d 50 01             	lea    edx,[eax+0x1]
c000f167:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f16d:	89 ca                	mov    edx,ecx
c000f16f:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f176:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f17b:	eb ab                	jmp    c000f128 <loadACPITables(unsigned char*)+0x4c>
c000f17d:	8d 76 00             	lea    esi,[esi+0x0]
c000f180:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f184:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f188:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f18c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f18f:	83 e8 24             	sub    eax,0x24
c000f192:	c1 e8 02             	shr    eax,0x2
c000f195:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f199:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f1a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f1a4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f1a8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f1ac:	7d 42                	jge    c000f1f0 <loadACPITables(unsigned char*)+0x114>
c000f1ae:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f1b2:	83 c0 24             	add    eax,0x24
c000f1b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f1b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f1bd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f1c1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f1c5:	c1 e0 02             	shl    eax,0x2
c000f1c8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f1cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f1d0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f1d2:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f1d7:	8d 50 01             	lea    edx,[eax+0x1]
c000f1da:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f1e0:	89 ca                	mov    edx,ecx
c000f1e2:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f1e9:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f1ee:	eb b4                	jmp    c000f1a4 <loadACPITables(unsigned char*)+0xc8>
c000f1f0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f1f8:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f1fd:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f201:	0f 8d 39 01 00 00    	jge    c000f340 <loadACPITables(unsigned char*)+0x264>
c000f207:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f20b:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f212:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f216:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f21a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f21e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f222:	25 ff 0f 00 00       	and    eax,0xfff
c000f227:	89 c6                	mov    esi,eax
c000f229:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f22f:	83 ec 0c             	sub    esp,0xc
c000f232:	6a 01                	push   0x1
c000f234:	e8 04 a4 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c000f239:	83 c4 10             	add    esp,0x10
c000f23c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f240:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f246:	83 ec 0c             	sub    esp,0xc
c000f249:	6a 01                	push   0x1
c000f24b:	6a 01                	push   0x1
c000f24d:	50                   	push   eax
c000f24e:	52                   	push   edx
c000f24f:	53                   	push   ebx
c000f250:	e8 f5 ac ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f255:	83 c4 20             	add    esp,0x20
c000f258:	09 f0                	or     eax,esi
c000f25a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f25e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f262:	c1 e0 03             	shl    eax,0x3
c000f265:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f26a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f26e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f272:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f276:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f27e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f286:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f28a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f28e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f292:	89 c6                	mov    esi,eax
c000f294:	89 d7                	mov    edi,edx
c000f296:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f298:	89 c8                	mov    eax,ecx
c000f29a:	89 fa                	mov    edx,edi
c000f29c:	89 f3                	mov    ebx,esi
c000f29e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f2a2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f2a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f2aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f2b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f2b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2b9:	05 00 10 00 00       	add    eax,0x1000
c000f2be:	c1 e8 0c             	shr    eax,0xc
c000f2c1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f2cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2d1:	25 ff 0f 00 00       	and    eax,0xfff
c000f2d6:	89 c6                	mov    esi,eax
c000f2d8:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2de:	83 ec 0c             	sub    esp,0xc
c000f2e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f2e5:	e8 53 a3 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c000f2ea:	83 c4 10             	add    esp,0x10
c000f2ed:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f2f1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2f7:	83 ec 0c             	sub    esp,0xc
c000f2fa:	6a 01                	push   0x1
c000f2fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f300:	50                   	push   eax
c000f301:	52                   	push   edx
c000f302:	53                   	push   ebx
c000f303:	e8 42 ac ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f308:	83 c4 20             	add    esp,0x20
c000f30b:	09 f0                	or     eax,esi
c000f30d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f311:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f315:	83 ec 0c             	sub    esp,0xc
c000f318:	50                   	push   eax
c000f319:	e8 3d a6 ff ff       	call   c000995b <Virt::freeKernelVirtualPages(unsigned long)>
c000f31e:	83 c4 10             	add    esp,0x10
c000f321:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f325:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f329:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f330:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f335:	e9 be fe ff ff       	jmp    c000f1f8 <loadACPITables(unsigned char*)+0x11c>
c000f33a:	66 90                	xchg   ax,ax
c000f33c:	90                   	nop
c000f33d:	8d 76 00             	lea    esi,[esi+0x0]
c000f340:	83 c4 60             	add    esp,0x60
c000f343:	5b                   	pop    ebx
c000f344:	5e                   	pop    esi
c000f345:	5f                   	pop    edi
c000f346:	c3                   	ret    
c000f347:	90                   	nop

c000f348 <findRSDT(unsigned char*)>:
c000f348:	57                   	push   edi
c000f349:	56                   	push   esi
c000f34a:	53                   	push   ebx
c000f34b:	83 ec 50             	sub    esp,0x50
c000f34e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f353:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f359:	83 e0 04             	and    eax,0x4
c000f35c:	0f b6 c0             	movzx  eax,al
c000f35f:	85 c0                	test   eax,eax
c000f361:	75 0d                	jne    c000f370 <findRSDT(unsigned char*)+0x28>
c000f363:	b8 00 00 00 00       	mov    eax,0x0
c000f368:	e9 2b 01 00 00       	jmp    c000f498 <findRSDT(unsigned char*)+0x150>
c000f36d:	8d 76 00             	lea    esi,[esi+0x0]
c000f370:	89 e0                	mov    eax,esp
c000f372:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f376:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f37a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f37e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f386:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f38a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f38e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f392:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f396:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f39a:	89 c6                	mov    esi,eax
c000f39c:	89 d7                	mov    edi,edx
c000f39e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3a0:	89 c8                	mov    eax,ecx
c000f3a2:	89 fa                	mov    edx,edi
c000f3a4:	89 f3                	mov    ebx,esi
c000f3a6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f3aa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f3ae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f3b2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f3b6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f3ba:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f3c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3ca:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f3d6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f3da:	25 ff 0f 00 00       	and    eax,0xfff
c000f3df:	89 c6                	mov    esi,eax
c000f3e1:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f3e7:	83 ec 0c             	sub    esp,0xc
c000f3ea:	6a 02                	push   0x2
c000f3ec:	e8 4c a2 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c000f3f1:	83 c4 10             	add    esp,0x10
c000f3f4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f3f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3fe:	83 ec 0c             	sub    esp,0xc
c000f401:	6a 01                	push   0x1
c000f403:	6a 02                	push   0x2
c000f405:	50                   	push   eax
c000f406:	52                   	push   edx
c000f407:	53                   	push   ebx
c000f408:	e8 3d ab ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f40d:	83 c4 20             	add    esp,0x20
c000f410:	09 f0                	or     eax,esi
c000f412:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f416:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f41a:	25 ff 0f 00 00       	and    eax,0xfff
c000f41f:	89 c6                	mov    esi,eax
c000f421:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f427:	83 ec 0c             	sub    esp,0xc
c000f42a:	6a 02                	push   0x2
c000f42c:	e8 0c a2 ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c000f431:	83 c4 10             	add    esp,0x10
c000f434:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f438:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f43e:	83 ec 0c             	sub    esp,0xc
c000f441:	6a 01                	push   0x1
c000f443:	6a 02                	push   0x2
c000f445:	50                   	push   eax
c000f446:	52                   	push   edx
c000f447:	53                   	push   ebx
c000f448:	e8 fd aa ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f44d:	83 c4 20             	add    esp,0x20
c000f450:	09 f0                	or     eax,esi
c000f452:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f456:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f45b:	85 c0                	test   eax,eax
c000f45d:	75 11                	jne    c000f470 <findRSDT(unsigned char*)+0x128>
c000f45f:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f466:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f46a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f46e:	eb 24                	jmp    c000f494 <findRSDT(unsigned char*)+0x14c>
c000f470:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f475:	83 f8 02             	cmp    eax,0x2
c000f478:	75 12                	jne    c000f48c <findRSDT(unsigned char*)+0x144>
c000f47a:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f481:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f485:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f489:	eb 09                	jmp    c000f494 <findRSDT(unsigned char*)+0x14c>
c000f48b:	90                   	nop
c000f48c:	b8 00 00 00 00       	mov    eax,0x0
c000f491:	eb 05                	jmp    c000f498 <findRSDT(unsigned char*)+0x150>
c000f493:	90                   	nop
c000f494:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f498:	83 c4 50             	add    esp,0x50
c000f49b:	5b                   	pop    ebx
c000f49c:	5e                   	pop    esi
c000f49d:	5f                   	pop    edi
c000f49e:	c3                   	ret    
c000f49f:	90                   	nop

c000f4a0 <findDataTable(unsigned char*, char*)>:
c000f4a0:	83 ec 1c             	sub    esp,0x1c
c000f4a3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4a8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4ae:	83 e0 04             	and    eax,0x4
c000f4b1:	0f b6 c0             	movzx  eax,al
c000f4b4:	85 c0                	test   eax,eax
c000f4b6:	75 08                	jne    c000f4c0 <findDataTable(unsigned char*, char*)+0x20>
c000f4b8:	b8 00 00 00 00       	mov    eax,0x0
c000f4bd:	eb 5d                	jmp    c000f51c <findDataTable(unsigned char*, char*)+0x7c>
c000f4bf:	90                   	nop
c000f4c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f4c8:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f4cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f4d1:	7d 41                	jge    c000f514 <findDataTable(unsigned char*, char*)+0x74>
c000f4d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4d7:	c1 e0 03             	shl    eax,0x3
c000f4da:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f4df:	83 ec 04             	sub    esp,0x4
c000f4e2:	6a 04                	push   0x4
c000f4e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4e8:	50                   	push   eax
c000f4e9:	e8 92 0e ff ff       	call   c0000380 <memcmp>
c000f4ee:	83 c4 10             	add    esp,0x10
c000f4f1:	85 c0                	test   eax,eax
c000f4f3:	0f 94 c0             	sete   al
c000f4f6:	0f b6 c0             	movzx  eax,al
c000f4f9:	85 c0                	test   eax,eax
c000f4fb:	74 0f                	je     c000f50c <findDataTable(unsigned char*, char*)+0x6c>
c000f4fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f501:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f508:	eb 12                	jmp    c000f51c <findDataTable(unsigned char*, char*)+0x7c>
c000f50a:	66 90                	xchg   ax,ax
c000f50c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f511:	eb b5                	jmp    c000f4c8 <findDataTable(unsigned char*, char*)+0x28>
c000f513:	90                   	nop
c000f514:	b8 00 00 00 00       	mov    eax,0x0
c000f519:	8d 76 00             	lea    esi,[esi+0x0]
c000f51c:	83 c4 1c             	add    esp,0x1c
c000f51f:	c3                   	ret    

c000f520 <scanMADT()>:
c000f520:	53                   	push   ebx
c000f521:	83 ec 38             	sub    esp,0x38
c000f524:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f529:	25 00 04 00 00       	and    eax,0x400
c000f52e:	74 14                	je     c000f544 <scanMADT()+0x24>
c000f530:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f535:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f53b:	83 e2 fb             	and    edx,0xfffffffb
c000f53e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f544:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f549:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f54f:	83 e0 04             	and    eax,0x4
c000f552:	0f b6 c0             	movzx  eax,al
c000f555:	85 c0                	test   eax,eax
c000f557:	0f 84 6b 04 00 00    	je     c000f9c8 <scanMADT()+0x4a8>
c000f55d:	e8 e2 fa ff ff       	call   c000f044 <findRSDP()>
c000f562:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f567:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f56c:	85 c0                	test   eax,eax
c000f56e:	75 1c                	jne    c000f58c <scanMADT()+0x6c>
c000f570:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f575:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f57b:	83 e2 fb             	and    edx,0xfffffffb
c000f57e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f584:	e9 47 04 00 00       	jmp    c000f9d0 <scanMADT()+0x4b0>
c000f589:	8d 76 00             	lea    esi,[esi+0x0]
c000f58c:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f591:	83 ec 0c             	sub    esp,0xc
c000f594:	50                   	push   eax
c000f595:	e8 ae fd ff ff       	call   c000f348 <findRSDT(unsigned char*)>
c000f59a:	83 c4 10             	add    esp,0x10
c000f59d:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f5a2:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f5a7:	85 c0                	test   eax,eax
c000f5a9:	75 19                	jne    c000f5c4 <scanMADT()+0xa4>
c000f5ab:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f5b0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f5b6:	83 e2 fb             	and    edx,0xfffffffb
c000f5b9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f5bf:	e9 0c 04 00 00       	jmp    c000f9d0 <scanMADT()+0x4b0>
c000f5c4:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f5c9:	83 ec 0c             	sub    esp,0xc
c000f5cc:	50                   	push   eax
c000f5cd:	e8 0a fb ff ff       	call   c000f0dc <loadACPITables(unsigned char*)>
c000f5d2:	83 c4 10             	add    esp,0x10
c000f5d5:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f5da:	83 ec 08             	sub    esp,0x8
c000f5dd:	68 9e 21 02 c0       	push   0xc002219e
c000f5e2:	50                   	push   eax
c000f5e3:	e8 b8 fe ff ff       	call   c000f4a0 <findDataTable(unsigned char*, char*)>
c000f5e8:	83 c4 10             	add    esp,0x10
c000f5eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f5ef:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f5f4:	75 1a                	jne    c000f610 <scanMADT()+0xf0>
c000f5f6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f5fb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f601:	83 e2 fe             	and    edx,0xfffffffe
c000f604:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f60a:	e9 c1 03 00 00       	jmp    c000f9d0 <scanMADT()+0x4b0>
c000f60f:	90                   	nop
c000f610:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f618:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f61c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f61f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f623:	0f 87 a7 03 00 00    	ja     c000f9d0 <scanMADT()+0x4b0>
c000f629:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f631:	0f 87 99 03 00 00    	ja     c000f9d0 <scanMADT()+0x4b0>
c000f637:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f63b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f63f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f643:	8d 50 01             	lea    edx,[eax+0x1]
c000f646:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f64a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f64e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f652:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f656:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f65a:	8d 50 01             	lea    edx,[eax+0x1]
c000f65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f661:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f665:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f669:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f66d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f672:	83 f8 02             	cmp    eax,0x2
c000f675:	0f 86 51 03 00 00    	jbe    c000f9cc <scanMADT()+0x4ac>
c000f67b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f680:	85 c0                	test   eax,eax
c000f682:	75 58                	jne    c000f6dc <scanMADT()+0x1bc>
c000f684:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f688:	8d 50 01             	lea    edx,[eax+0x1]
c000f68b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f68f:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f695:	0f b6 d2             	movzx  edx,dl
c000f698:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f69c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f6a0:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f6a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6aa:	8d 50 01             	lea    edx,[eax+0x1]
c000f6ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6b1:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f6b7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f6ba:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f6c0:	0f b6 d2             	movzx  edx,dl
c000f6c3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f6c7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f6cb:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f6d1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f6d6:	e9 d9 02 00 00       	jmp    c000f9b4 <scanMADT()+0x494>
c000f6db:	90                   	nop
c000f6dc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f6e1:	83 f8 01             	cmp    eax,0x1
c000f6e4:	0f 85 1a 01 00 00    	jne    c000f804 <scanMADT()+0x2e4>
c000f6ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6ee:	8d 50 01             	lea    edx,[eax+0x1]
c000f6f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6f5:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f6fb:	0f b6 d2             	movzx  edx,dl
c000f6fe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f702:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f706:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f70c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f711:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f715:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f719:	01 d0                	add    eax,edx
c000f71b:	83 c0 2c             	add    eax,0x2c
c000f71e:	8a 00                	mov    al,BYTE PTR [eax]
c000f720:	0f b6 d0             	movzx  edx,al
c000f723:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f727:	8d 48 01             	lea    ecx,[eax+0x1]
c000f72a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f72e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f732:	0f b6 c0             	movzx  eax,al
c000f735:	c1 e0 08             	shl    eax,0x8
c000f738:	89 d1                	mov    ecx,edx
c000f73a:	09 c1                	or     ecx,eax
c000f73c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f740:	8d 50 02             	lea    edx,[eax+0x2]
c000f743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f747:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f74b:	0f b6 c0             	movzx  eax,al
c000f74e:	c1 e0 10             	shl    eax,0x10
c000f751:	09 c1                	or     ecx,eax
c000f753:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f757:	8d 50 03             	lea    edx,[eax+0x3]
c000f75a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f75e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f762:	0f b6 c0             	movzx  eax,al
c000f765:	c1 e0 18             	shl    eax,0x18
c000f768:	09 c1                	or     ecx,eax
c000f76a:	89 ca                	mov    edx,ecx
c000f76c:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f771:	0f b6 c0             	movzx  eax,al
c000f774:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f77b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f780:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f784:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f788:	01 d0                	add    eax,edx
c000f78a:	83 c0 2c             	add    eax,0x2c
c000f78d:	8a 00                	mov    al,BYTE PTR [eax]
c000f78f:	0f b6 d0             	movzx  edx,al
c000f792:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f796:	8d 48 01             	lea    ecx,[eax+0x1]
c000f799:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f79d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f7a1:	0f b6 c0             	movzx  eax,al
c000f7a4:	c1 e0 08             	shl    eax,0x8
c000f7a7:	89 d1                	mov    ecx,edx
c000f7a9:	09 c1                	or     ecx,eax
c000f7ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7af:	8d 50 02             	lea    edx,[eax+0x2]
c000f7b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7b6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7ba:	0f b6 c0             	movzx  eax,al
c000f7bd:	c1 e0 10             	shl    eax,0x10
c000f7c0:	09 c1                	or     ecx,eax
c000f7c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7c6:	8d 50 03             	lea    edx,[eax+0x3]
c000f7c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7cd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7d1:	0f b6 c0             	movzx  eax,al
c000f7d4:	c1 e0 18             	shl    eax,0x18
c000f7d7:	09 c1                	or     ecx,eax
c000f7d9:	89 ca                	mov    edx,ecx
c000f7db:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f7e0:	0f b6 c0             	movzx  eax,al
c000f7e3:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f7ea:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f7ef:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f7f4:	83 c0 01             	add    eax,0x1
c000f7f7:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f7fc:	e9 b3 01 00 00       	jmp    c000f9b4 <scanMADT()+0x494>
c000f801:	8d 76 00             	lea    esi,[esi+0x0]
c000f804:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f809:	83 f8 02             	cmp    eax,0x2
c000f80c:	0f 85 ea 00 00 00    	jne    c000f8fc <scanMADT()+0x3dc>
c000f812:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f816:	8d 50 01             	lea    edx,[eax+0x1]
c000f819:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f81d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f821:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f825:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f829:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f82d:	8d 50 01             	lea    edx,[eax+0x1]
c000f830:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f834:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f838:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f83c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f840:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f844:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f848:	01 d0                	add    eax,edx
c000f84a:	83 c0 2c             	add    eax,0x2c
c000f84d:	8a 00                	mov    al,BYTE PTR [eax]
c000f84f:	0f b6 d0             	movzx  edx,al
c000f852:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f856:	8d 48 01             	lea    ecx,[eax+0x1]
c000f859:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f85d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f861:	0f b6 c0             	movzx  eax,al
c000f864:	c1 e0 08             	shl    eax,0x8
c000f867:	89 d1                	mov    ecx,edx
c000f869:	09 c1                	or     ecx,eax
c000f86b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f86f:	8d 50 02             	lea    edx,[eax+0x2]
c000f872:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f876:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f87a:	0f b6 c0             	movzx  eax,al
c000f87d:	c1 e0 10             	shl    eax,0x10
c000f880:	09 c1                	or     ecx,eax
c000f882:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f886:	8d 50 03             	lea    edx,[eax+0x3]
c000f889:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f88d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f891:	0f b6 c0             	movzx  eax,al
c000f894:	c1 e0 18             	shl    eax,0x18
c000f897:	09 c8                	or     eax,ecx
c000f899:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f89d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f8a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8aa:	01 d0                	add    eax,edx
c000f8ac:	83 c0 2c             	add    eax,0x2c
c000f8af:	8a 00                	mov    al,BYTE PTR [eax]
c000f8b1:	0f b6 c0             	movzx  eax,al
c000f8b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f8b8:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f8bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8bf:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f8c3:	0f b6 d2             	movzx  edx,dl
c000f8c6:	c1 e2 08             	shl    edx,0x8
c000f8c9:	09 d0                	or     eax,edx
c000f8cb:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f8d0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f8d5:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f8da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f8de:	88 90 68 39 02 c0    	mov    BYTE PTR [eax-0x3ffdc698],dl
c000f8e4:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f8e9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f8ee:	66 89 84 12 c0 bb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4440],ax
c000f8f6:	e9 b9 00 00 00       	jmp    c000f9b4 <scanMADT()+0x494>
c000f8fb:	90                   	nop
c000f8fc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f901:	83 f8 04             	cmp    eax,0x4
c000f904:	0f 85 9a 00 00 00    	jne    c000f9a4 <scanMADT()+0x484>
c000f90a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f90e:	8d 50 01             	lea    edx,[eax+0x1]
c000f911:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f915:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f919:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f91d:	0f b6 c0             	movzx  eax,al
c000f920:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f924:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f928:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f92c:	01 d0                	add    eax,edx
c000f92e:	83 c0 2c             	add    eax,0x2c
c000f931:	8a 00                	mov    al,BYTE PTR [eax]
c000f933:	0f b6 d0             	movzx  edx,al
c000f936:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f93a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f93d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f941:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f945:	0f b6 c0             	movzx  eax,al
c000f948:	c1 e0 08             	shl    eax,0x8
c000f94b:	09 d0                	or     eax,edx
c000f94d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f951:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f956:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f95a:	8d 50 01             	lea    edx,[eax+0x1]
c000f95d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f961:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f965:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f969:	0f b6 c0             	movzx  eax,al
c000f96c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f974:	c1 e0 08             	shl    eax,0x8
c000f977:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f97b:	89 c1                	mov    ecx,eax
c000f97d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f981:	c1 e0 18             	shl    eax,0x18
c000f984:	89 c3                	mov    ebx,eax
c000f986:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f98b:	8d 50 01             	lea    edx,[eax+0x1]
c000f98e:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f994:	09 d9                	or     ecx,ebx
c000f996:	89 ca                	mov    edx,ecx
c000f998:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f99f:	eb 13                	jmp    c000f9b4 <scanMADT()+0x494>
c000f9a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f9a4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f9a9:	83 f8 05             	cmp    eax,0x5
c000f9ac:	75 06                	jne    c000f9b4 <scanMADT()+0x494>
c000f9ae:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f9b3:	90                   	nop
c000f9b4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f9b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f9bd:	01 d0                	add    eax,edx
c000f9bf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f9c3:	e9 50 fc ff ff       	jmp    c000f618 <scanMADT()+0xf8>
c000f9c8:	90                   	nop
c000f9c9:	eb 05                	jmp    c000f9d0 <scanMADT()+0x4b0>
c000f9cb:	90                   	nop
c000f9cc:	90                   	nop
c000f9cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f9d0:	83 c4 38             	add    esp,0x38
c000f9d3:	5b                   	pop    ebx
c000f9d4:	c3                   	ret    
c000f9d5:	90                   	nop
c000f9d6:	66 90                	xchg   ax,ax

c000f9d8 <ACPI::ACPI()>:
c000f9d8:	83 ec 0c             	sub    esp,0xc
c000f9db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9df:	83 ec 08             	sub    esp,0x8
c000f9e2:	68 a3 21 02 c0       	push   0xc00221a3
c000f9e7:	50                   	push   eax
c000f9e8:	e8 db d1 ff ff       	call   c000cbc8 <Device::Device(char const*)>
c000f9ed:	83 c4 10             	add    esp,0x10
c000f9f0:	ba b0 23 02 c0       	mov    edx,0xc00223b0
c000f9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9f9:	89 10                	mov    DWORD PTR [eax],edx
c000f9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9ff:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000fa06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa0a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000fa14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa18:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000fa22:	e8 f9 fa ff ff       	call   c000f520 <scanMADT()>
c000fa27:	90                   	nop
c000fa28:	83 c4 0c             	add    esp,0xc
c000fa2b:	c3                   	ret    

c000fa2c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000fa2c:	83 ec 2c             	sub    esp,0x2c
c000fa2f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000fa33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fa37:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fa3b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000fa3f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000fa44:	88 d0                	mov    al,dl
c000fa46:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fa4a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fa4f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000fa57:	90                   	nop
c000fa58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa5c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa62:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fa66:	0f 8d b0 00 00 00    	jge    c000fb1c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000fa6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa74:	83 c2 2a             	add    edx,0x2a
c000fa77:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000fa7b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000fa80:	0f b7 c0             	movzx  eax,ax
c000fa83:	39 c2                	cmp    edx,eax
c000fa85:	0f 85 85 00 00 00    	jne    c000fb10 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa93:	83 c2 2a             	add    edx,0x2a
c000fa96:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000fa9a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000fa9f:	0f b6 c0             	movzx  eax,al
c000faa2:	39 c2                	cmp    edx,eax
c000faa4:	75 6a                	jne    c000fb10 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000faa6:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000faab:	85 c0                	test   eax,eax
c000faad:	74 3d                	je     c000faec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000faaf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fab3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fab7:	83 c2 2a             	add    edx,0x2a
c000faba:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000fabe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fac2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fac5:	39 c2                	cmp    edx,eax
c000fac7:	74 13                	je     c000fadc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000fac9:	83 ec 0c             	sub    esp,0xc
c000facc:	68 30 23 02 c0       	push   0xc0022330
c000fad1:	e8 3d 1c 00 00       	call   c0011713 <KePanic(char const*)>
c000fad6:	83 c4 10             	add    esp,0x10
c000fad9:	8d 76 00             	lea    esi,[esi+0x0]
c000fadc:	83 ec 0c             	sub    esp,0xc
c000fadf:	68 a8 21 02 c0       	push   0xc00221a8
c000fae4:	e8 2a 1c 00 00       	call   c0011713 <KePanic(char const*)>
c000fae9:	83 c4 10             	add    esp,0x10
c000faec:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000faf4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000faf8:	83 c2 2a             	add    edx,0x2a
c000fafb:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000faff:	8b 02                	mov    eax,DWORD PTR [edx]
c000fb01:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fb04:	89 01                	mov    DWORD PTR [ecx],eax
c000fb06:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fb09:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb0e:	66 90                	xchg   ax,ax
c000fb10:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fb15:	e9 3e ff ff ff       	jmp    c000fa58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fb1a:	66 90                	xchg   ax,ax
c000fb1c:	90                   	nop
c000fb1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fb21:	83 c4 2c             	add    esp,0x2c
c000fb24:	c2 04 00             	ret    0x4
c000fb27:	90                   	nop

c000fb28 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fb28:	83 ec 1c             	sub    esp,0x1c
c000fb2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb2f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fb33:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fb37:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fb3c:	88 c8                	mov    al,cl
c000fb3e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fb42:	88 d0                	mov    al,dl
c000fb44:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fb48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb4c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb56:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb59:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000fb5d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000fb61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb65:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fb6f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000fb72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb76:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000fb7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb7f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb85:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fb89:	83 c0 01             	add    eax,0x1
c000fb8c:	88 c1                	mov    cl,al
c000fb8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb92:	83 c2 2a             	add    edx,0x2a
c000fb95:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fb99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb9d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fba3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fba7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fbaa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fbae:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fbb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbb6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fbbc:	8d 50 01             	lea    edx,[eax+0x1]
c000fbbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbc3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fbc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbcd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fbd3:	3d 00 02 00 00       	cmp    eax,0x200
c000fbd8:	75 12                	jne    c000fbec <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fbda:	83 ec 0c             	sub    esp,0xc
c000fbdd:	68 b7 21 02 c0       	push   0xc00221b7
c000fbe2:	e8 2c 1b 00 00       	call   c0011713 <KePanic(char const*)>
c000fbe7:	83 c4 10             	add    esp,0x10
c000fbea:	66 90                	xchg   ax,ax
c000fbec:	90                   	nop
c000fbed:	83 c4 1c             	add    esp,0x1c
c000fbf0:	c3                   	ret    
c000fbf1:	90                   	nop
c000fbf2:	66 90                	xchg   ax,ax

c000fbf4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fbf4:	b8 00 00 00 00       	mov    eax,0x0
c000fbf9:	c3                   	ret    
c000fbfa:	66 90                	xchg   ax,ax

c000fbfc <ACPI::detectPCI()>:
c000fbfc:	53                   	push   ebx
c000fbfd:	83 ec 28             	sub    esp,0x28
c000fc00:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fc05:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fc0a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fc0f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fc15:	83 e0 04             	and    eax,0x4
c000fc18:	0f b6 c0             	movzx  eax,al
c000fc1b:	85 c0                	test   eax,eax
c000fc1d:	74 2d                	je     c000fc4c <ACPI::detectPCI()+0x50>
c000fc1f:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fc24:	83 ec 08             	sub    esp,0x8
c000fc27:	68 d4 21 02 c0       	push   0xc00221d4
c000fc2c:	50                   	push   eax
c000fc2d:	e8 6e f8 ff ff       	call   c000f4a0 <findDataTable(unsigned char*, char*)>
c000fc32:	83 c4 10             	add    esp,0x10
c000fc35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc39:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fc3e:	74 0c                	je     c000fc4c <ACPI::detectPCI()+0x50>
c000fc40:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc45:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc4a:	66 90                	xchg   ax,ax
c000fc4c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fc54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc58:	8a 00                	mov    al,BYTE PTR [eax]
c000fc5a:	0f b6 c0             	movzx  eax,al
c000fc5d:	83 f8 01             	cmp    eax,0x1
c000fc60:	75 0e                	jne    c000fc70 <ACPI::detectPCI()+0x74>
c000fc62:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc67:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc6c:	eb 2e                	jmp    c000fc9c <ACPI::detectPCI()+0xa0>
c000fc6e:	66 90                	xchg   ax,ax
c000fc70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc74:	8a 00                	mov    al,BYTE PTR [eax]
c000fc76:	0f b6 c0             	movzx  eax,al
c000fc79:	83 f8 02             	cmp    eax,0x2
c000fc7c:	75 1e                	jne    c000fc9c <ACPI::detectPCI()+0xa0>
c000fc7e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc83:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc88:	85 c0                	test   eax,eax
c000fc8a:	74 10                	je     c000fc9c <ACPI::detectPCI()+0xa0>
c000fc8c:	83 ec 0c             	sub    esp,0xc
c000fc8f:	68 60 23 02 c0       	push   0xc0022360
c000fc94:	e8 7a 1a 00 00       	call   c0011713 <KePanic(char const*)>
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fca0:	83 f0 01             	xor    eax,0x1
c000fca3:	0f b6 c0             	movzx  eax,al
c000fca6:	85 c0                	test   eax,eax
c000fca8:	74 46                	je     c000fcf0 <ACPI::detectPCI()+0xf4>
c000fcaa:	e8 81 04 ff ff       	call   c0000130 <manualPCIProbe>
c000fcaf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fcb3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fcb8:	75 0e                	jne    c000fcc8 <ACPI::detectPCI()+0xcc>
c000fcba:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fcbf:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fcc4:	eb 2a                	jmp    c000fcf0 <ACPI::detectPCI()+0xf4>
c000fcc6:	66 90                	xchg   ax,ax
c000fcc8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fccd:	75 21                	jne    c000fcf0 <ACPI::detectPCI()+0xf4>
c000fccf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fcd4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fcd9:	85 c0                	test   eax,eax
c000fcdb:	74 13                	je     c000fcf0 <ACPI::detectPCI()+0xf4>
c000fcdd:	83 ec 0c             	sub    esp,0xc
c000fce0:	68 60 23 02 c0       	push   0xc0022360
c000fce5:	e8 29 1a 00 00       	call   c0011713 <KePanic(char const*)>
c000fcea:	83 c4 10             	add    esp,0x10
c000fced:	8d 76 00             	lea    esi,[esi+0x0]
c000fcf0:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fcf5:	85 c0                	test   eax,eax
c000fcf7:	0f 84 87 00 00 00    	je     c000fd84 <ACPI::detectPCI()+0x188>
c000fcfd:	83 ec 0c             	sub    esp,0xc
c000fd00:	68 d9 21 02 c0       	push   0xc00221d9
c000fd05:	e8 09 13 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c000fd0a:	83 c4 10             	add    esp,0x10
c000fd0d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fd15:	83 ec 0c             	sub    esp,0xc
c000fd18:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd1c:	e8 c5 7d ff ff       	call   c0007ae6 <malloc>
c000fd21:	83 c4 10             	add    esp,0x10
c000fd24:	89 c3                	mov    ebx,eax
c000fd26:	83 ec 0c             	sub    esp,0xc
c000fd29:	53                   	push   ebx
c000fd2a:	e8 a1 b5 00 00       	call   c001b2d0 <PCI::PCI()>
c000fd2f:	83 c4 10             	add    esp,0x10
c000fd32:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fd36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd3a:	83 ec 08             	sub    esp,0x8
c000fd3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd41:	50                   	push   eax
c000fd42:	e8 af cc ff ff       	call   c000c9f6 <Device::addChild(Device*)>
c000fd47:	83 c4 10             	add    esp,0x10
c000fd4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd4e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd50:	83 c0 08             	add    eax,0x8
c000fd53:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd55:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fd5a:	85 d2                	test   edx,edx
c000fd5c:	74 0a                	je     c000fd68 <ACPI::detectPCI()+0x16c>
c000fd5e:	ba 01 00 00 00       	mov    edx,0x1
c000fd63:	eb 0b                	jmp    c000fd70 <ACPI::detectPCI()+0x174>
c000fd65:	8d 76 00             	lea    esi,[esi+0x0]
c000fd68:	ba 02 00 00 00       	mov    edx,0x2
c000fd6d:	8d 76 00             	lea    esi,[esi+0x0]
c000fd70:	6a 00                	push   0x0
c000fd72:	6a 00                	push   0x0
c000fd74:	52                   	push   edx
c000fd75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd79:	ff d0                	call   eax
c000fd7b:	83 c4 10             	add    esp,0x10
c000fd7e:	e9 91 00 00 00       	jmp    c000fe14 <ACPI::detectPCI()+0x218>
c000fd83:	90                   	nop
c000fd84:	83 ec 0c             	sub    esp,0xc
c000fd87:	68 f1 21 02 c0       	push   0xc00221f1
c000fd8c:	e8 82 12 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c000fd91:	83 c4 10             	add    esp,0x10
c000fd94:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fd9b:	83 ec 0c             	sub    esp,0xc
c000fd9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fda2:	e8 3f 7d ff ff       	call   c0007ae6 <malloc>
c000fda7:	83 c4 10             	add    esp,0x10
c000fdaa:	89 c3                	mov    ebx,eax
c000fdac:	83 ec 0c             	sub    esp,0xc
c000fdaf:	53                   	push   ebx
c000fdb0:	e8 b5 c0 00 00       	call   c001be6a <IDE::IDE()>
c000fdb5:	83 c4 10             	add    esp,0x10
c000fdb8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fdbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fdc0:	83 ec 08             	sub    esp,0x8
c000fdc3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fdc7:	50                   	push   eax
c000fdc8:	e8 29 cc ff ff       	call   c000c9f6 <Device::addChild(Device*)>
c000fdcd:	83 c4 10             	add    esp,0x10
c000fdd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdd4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fdde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fde2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fdeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdef:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fdf8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdfc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdfe:	83 c0 08             	add    eax,0x8
c000fe01:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe03:	6a 00                	push   0x0
c000fe05:	6a 00                	push   0x0
c000fe07:	6a 00                	push   0x0
c000fe09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fe0d:	ff d0                	call   eax
c000fe0f:	83 c4 10             	add    esp,0x10
c000fe12:	66 90                	xchg   ax,ax
c000fe14:	90                   	nop
c000fe15:	83 c4 28             	add    esp,0x28
c000fe18:	5b                   	pop    ebx
c000fe19:	c3                   	ret    
c000fe1a:	66 90                	xchg   ax,ax

c000fe1c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fe1c:	83 ec 1c             	sub    esp,0x1c
c000fe1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe23:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fe26:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fe2a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fe2f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fe34:	83 ec 08             	sub    esp,0x8
c000fe37:	52                   	push   edx
c000fe38:	50                   	push   eax
c000fe39:	e8 6a 73 ff ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c000fe3e:	83 c4 10             	add    esp,0x10
c000fe41:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fe45:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fe4a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fe4f:	83 ec 04             	sub    esp,0x4
c000fe52:	6a 01                	push   0x1
c000fe54:	52                   	push   edx
c000fe55:	50                   	push   eax
c000fe56:	e8 67 74 ff ff       	call   c00072c2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fe5b:	83 c4 10             	add    esp,0x10
c000fe5e:	90                   	nop
c000fe5f:	83 c4 1c             	add    esp,0x1c
c000fe62:	c3                   	ret    
c000fe63:	90                   	nop

c000fe64 <ACPI::sleep()>:
c000fe64:	83 ec 0c             	sub    esp,0xc
c000fe67:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe6c:	85 c0                	test   eax,eax
c000fe6e:	74 08                	je     c000fe78 <ACPI::sleep()+0x14>
c000fe70:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe75:	ff d0                	call   eax
c000fe77:	90                   	nop
c000fe78:	90                   	nop
c000fe79:	83 c4 0c             	add    esp,0xc
c000fe7c:	c3                   	ret    
c000fe7d:	90                   	nop
c000fe7e:	66 90                	xchg   ax,ax

c000fe80 <ACPI::open(int, int, void*)>:
c000fe80:	57                   	push   edi
c000fe81:	56                   	push   esi
c000fe82:	53                   	push   ebx
c000fe83:	81 ec 70 01 00 00    	sub    esp,0x170
c000fe89:	83 ec 0c             	sub    esp,0xc
c000fe8c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fe93:	e8 64 fd ff ff       	call   c000fbfc <ACPI::detectPCI()>
c000fe98:	83 c4 10             	add    esp,0x10
c000fe9b:	83 ec 0c             	sub    esp,0xc
c000fe9e:	68 88 23 02 c0       	push   0xc0022388
c000fea3:	e8 6b 11 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c000fea8:	83 c4 10             	add    esp,0x10
c000feab:	b8 4c 05 00 00       	mov    eax,0x54c
c000feb0:	8a 00                	mov    al,BYTE PTR [eax]
c000feb2:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000feb9:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fec1:	83 f8 01             	cmp    eax,0x1
c000fec4:	75 12                	jne    c000fed8 <ACPI::open(int, int, void*)+0x58>
c000fec6:	83 ec 0c             	sub    esp,0xc
c000fec9:	68 06 22 02 c0       	push   0xc0022206
c000fece:	e8 4c 4e 00 00       	call   c0014d1f <Thr::loadKernelSymbolTable(char const*)>
c000fed3:	83 c4 10             	add    esp,0x10
c000fed6:	eb 34                	jmp    c000ff0c <ACPI::open(int, int, void*)+0x8c>
c000fed8:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fee0:	3d bb 00 00 00       	cmp    eax,0xbb
c000fee5:	75 15                	jne    c000fefc <ACPI::open(int, int, void*)+0x7c>
c000fee7:	83 ec 0c             	sub    esp,0xc
c000feea:	68 24 22 02 c0       	push   0xc0022224
c000feef:	e8 2b 4e 00 00       	call   c0014d1f <Thr::loadKernelSymbolTable(char const*)>
c000fef4:	83 c4 10             	add    esp,0x10
c000fef7:	eb 13                	jmp    c000ff0c <ACPI::open(int, int, void*)+0x8c>
c000fef9:	8d 76 00             	lea    esi,[esi+0x0]
c000fefc:	83 ec 0c             	sub    esp,0xc
c000feff:	68 42 22 02 c0       	push   0xc0022242
c000ff04:	e8 0a 18 00 00       	call   c0011713 <KePanic(char const*)>
c000ff09:	83 c4 10             	add    esp,0x10
c000ff0c:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ff14:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ff1f:	83 ec 0c             	sub    esp,0xc
c000ff22:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ff29:	e8 b8 7b ff ff       	call   c0007ae6 <malloc>
c000ff2e:	83 c4 10             	add    esp,0x10
c000ff31:	89 c3                	mov    ebx,eax
c000ff33:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ff38:	83 ec 04             	sub    esp,0x4
c000ff3b:	50                   	push   eax
c000ff3c:	68 5c 22 02 c0       	push   0xc002225c
c000ff41:	53                   	push   ebx
c000ff42:	e8 35 bc ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c000ff47:	83 c4 10             	add    esp,0x10
c000ff4a:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ff51:	83 ec 08             	sub    esp,0x8
c000ff54:	6a 01                	push   0x1
c000ff56:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff5d:	e8 38 bc ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c000ff62:	83 c4 10             	add    esp,0x10
c000ff65:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ff6c:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ff74:	75 16                	jne    c000ff8c <ACPI::open(int, int, void*)+0x10c>
c000ff76:	83 ec 0c             	sub    esp,0xc
c000ff79:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff80:	e8 73 bc ff ff       	call   c000bbf8 <File::close()>
c000ff85:	83 c4 10             	add    esp,0x10
c000ff88:	eb 0a                	jmp    c000ff94 <ACPI::open(int, int, void*)+0x114>
c000ff8a:	66 90                	xchg   ax,ax
c000ff8c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ff94:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ff9c:	74 1e                	je     c000ffbc <ACPI::open(int, int, void*)+0x13c>
c000ff9e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ffa5:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffa7:	83 c0 08             	add    eax,0x8
c000ffaa:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffac:	83 ec 0c             	sub    esp,0xc
c000ffaf:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ffb6:	ff d0                	call   eax
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	90                   	nop
c000ffbc:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ffc3:	83 f0 01             	xor    eax,0x1
c000ffc6:	0f b6 c0             	movzx  eax,al
c000ffc9:	85 c0                	test   eax,eax
c000ffcb:	74 43                	je     c0010010 <ACPI::open(int, int, void*)+0x190>
c000ffcd:	83 ec 0c             	sub    esp,0xc
c000ffd0:	68 7a 22 02 c0       	push   0xc002227a
c000ffd5:	e8 39 10 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c000ffda:	83 c4 10             	add    esp,0x10
c000ffdd:	83 ec 04             	sub    esp,0x4
c000ffe0:	6a 0c                	push   0xc
c000ffe2:	68 95 22 02 c0       	push   0xc0022295
c000ffe7:	68 a6 22 02 c0       	push   0xc00222a6
c000ffec:	e8 6b 3f 00 00       	call   c0013f5c <Reg::readIntWithDefault(char*, char*, int)>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fffb:	83 ec 0c             	sub    esp,0xc
c000fffe:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0010005:	e8 62 98 ff ff       	call   c000986c <Virt::setupPageSwapping(int)>
c001000a:	83 c4 10             	add    esp,0x10
c001000d:	8d 76 00             	lea    esi,[esi+0x0]
c0010010:	83 ec 0c             	sub    esp,0xc
c0010013:	68 95 0c 02 c0       	push   0xc0020c95
c0010018:	e8 f6 0f 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c001001d:	83 c4 10             	add    esp,0x10
c0010020:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0010027:	83 ec 08             	sub    esp,0x8
c001002a:	6a 13                	push   0x13
c001002c:	50                   	push   eax
c001002d:	e8 16 cd ff ff       	call   c000cd48 <getDevicesOfType(DeviceType)>
c0010032:	83 c4 0c             	add    esp,0xc
c0010035:	8d 76 00             	lea    esi,[esi+0x0]
c0010038:	83 ec 0c             	sub    esp,0xc
c001003b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010042:	50                   	push   eax
c0010043:	e8 08 00 01 00       	call   c0020050 <LinkedList<Device>::isEmpty()>
c0010048:	83 c4 10             	add    esp,0x10
c001004b:	83 f0 01             	xor    eax,0x1
c001004e:	0f b6 c0             	movzx  eax,al
c0010051:	85 c0                	test   eax,eax
c0010053:	0f 84 47 01 00 00    	je     c00101a0 <ACPI::open(int, int, void*)+0x320>
c0010059:	83 ec 0c             	sub    esp,0xc
c001005c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010063:	50                   	push   eax
c0010064:	e8 03 00 01 00       	call   c002006c <LinkedList<Device>::getFirstElement()>
c0010069:	83 c4 10             	add    esp,0x10
c001006c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0010073:	83 ec 0c             	sub    esp,0xc
c0010076:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001007d:	50                   	push   eax
c001007e:	e8 f1 ff 00 00       	call   c0020074 <LinkedList<Device>::removeFirst()>
c0010083:	83 c4 10             	add    esp,0x10
c0010086:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001008d:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0010094:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001009b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001009f:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00100a5:	ba 09 00 00 00       	mov    edx,0x9
c00100aa:	fc                   	cld    
c00100ab:	89 c7                	mov    edi,eax
c00100ad:	89 de                	mov    esi,ebx
c00100af:	89 d1                	mov    ecx,edx
c00100b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00100b3:	83 ec 08             	sub    esp,0x8
c00100b6:	8d 44 24 38          	lea    eax,[esp+0x38]
c00100ba:	50                   	push   eax
c00100bb:	83 ec 24             	sub    esp,0x24
c00100be:	89 e0                	mov    eax,esp
c00100c0:	89 c3                	mov    ebx,eax
c00100c2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00100c6:	ba 09 00 00 00       	mov    edx,0x9
c00100cb:	89 df                	mov    edi,ebx
c00100cd:	89 c6                	mov    esi,eax
c00100cf:	89 d1                	mov    ecx,edx
c00100d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00100d3:	e8 e2 b6 00 00       	call   c001b7ba <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00100d8:	83 c4 30             	add    esp,0x30
c00100db:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00100e2:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c00100ea:	0f 84 48 ff ff ff    	je     c0010038 <ACPI::open(int, int, void*)+0x1b8>
c00100f0:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00100fb:	83 ec 0c             	sub    esp,0xc
c00100fe:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010105:	e8 dc 79 ff ff       	call   c0007ae6 <malloc>
c001010a:	83 c4 10             	add    esp,0x10
c001010d:	89 c3                	mov    ebx,eax
c001010f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010114:	83 ec 04             	sub    esp,0x4
c0010117:	50                   	push   eax
c0010118:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001011f:	53                   	push   ebx
c0010120:	e8 57 ba ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0010125:	83 c4 10             	add    esp,0x10
c0010128:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001012f:	83 ec 0c             	sub    esp,0xc
c0010132:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010139:	e8 20 bd ff ff       	call   c000be5e <File::exists()>
c001013e:	83 c4 10             	add    esp,0x10
c0010141:	0f b6 c0             	movzx  eax,al
c0010144:	85 c0                	test   eax,eax
c0010146:	74 28                	je     c0010170 <ACPI::open(int, int, void*)+0x2f0>
c0010148:	83 ec 08             	sub    esp,0x8
c001014b:	6a 01                	push   0x1
c001014d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010154:	e8 40 56 00 00       	call   c0015799 <Thr::loadDLL(char const*, bool)>
c0010159:	83 c4 10             	add    esp,0x10
c001015c:	83 ec 08             	sub    esp,0x8
c001015f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010166:	50                   	push   eax
c0010167:	e8 5e 58 00 00       	call   c00159ca <Thr::executeDLL(unsigned long, void*)>
c001016c:	83 c4 10             	add    esp,0x10
c001016f:	90                   	nop
c0010170:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0010178:	0f 84 ba fe ff ff    	je     c0010038 <ACPI::open(int, int, void*)+0x1b8>
c001017e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0010185:	8b 00                	mov    eax,DWORD PTR [eax]
c0010187:	83 c0 08             	add    eax,0x8
c001018a:	8b 00                	mov    eax,DWORD PTR [eax]
c001018c:	83 ec 0c             	sub    esp,0xc
c001018f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010196:	ff d0                	call   eax
c0010198:	83 c4 10             	add    esp,0x10
c001019b:	e9 98 fe ff ff       	jmp    c0010038 <ACPI::open(int, int, void*)+0x1b8>
c00101a0:	83 ec 0c             	sub    esp,0xc
c00101a3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00101aa:	50                   	push   eax
c00101ab:	e8 9c fe 00 00       	call   c002004c <LinkedList<Device>::~LinkedList()>
c00101b0:	83 c4 10             	add    esp,0x10
c00101b3:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c00101b9:	83 ec 08             	sub    esp,0x8
c00101bc:	6a 01                	push   0x1
c00101be:	68 ad 22 02 c0       	push   0xc00222ad
c00101c3:	e8 d1 55 00 00       	call   c0015799 <Thr::loadDLL(char const*, bool)>
c00101c8:	83 c4 10             	add    esp,0x10
c00101cb:	83 ec 08             	sub    esp,0x8
c00101ce:	53                   	push   ebx
c00101cf:	50                   	push   eax
c00101d0:	e8 f5 57 00 00       	call   c00159ca <Thr::executeDLL(unsigned long, void*)>
c00101d5:	83 c4 10             	add    esp,0x10
c00101d8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00101dd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00101e3:	83 e0 04             	and    eax,0x4
c00101e6:	0f b6 c0             	movzx  eax,al
c00101e9:	85 c0                	test   eax,eax
c00101eb:	0f 84 1b 01 00 00    	je     c001030c <ACPI::open(int, int, void*)+0x48c>
c00101f1:	83 ec 0c             	sub    esp,0xc
c00101f4:	68 ca 22 02 c0       	push   0xc00222ca
c00101f9:	e8 15 0e 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c00101fe:	83 c4 10             	add    esp,0x10
c0010201:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001020c:	83 ec 0c             	sub    esp,0xc
c001020f:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0010216:	e8 cb 78 ff ff       	call   c0007ae6 <malloc>
c001021b:	83 c4 10             	add    esp,0x10
c001021e:	89 c3                	mov    ebx,eax
c0010220:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010225:	83 ec 04             	sub    esp,0x4
c0010228:	50                   	push   eax
c0010229:	68 e7 22 02 c0       	push   0xc00222e7
c001022e:	53                   	push   ebx
c001022f:	e8 48 b9 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0010234:	83 c4 10             	add    esp,0x10
c0010237:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001023e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010246:	74 20                	je     c0010268 <ACPI::open(int, int, void*)+0x3e8>
c0010248:	83 ec 0c             	sub    esp,0xc
c001024b:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010252:	e8 07 bc ff ff       	call   c000be5e <File::exists()>
c0010257:	83 c4 10             	add    esp,0x10
c001025a:	0f b6 c0             	movzx  eax,al
c001025d:	85 c0                	test   eax,eax
c001025f:	74 07                	je     c0010268 <ACPI::open(int, int, void*)+0x3e8>
c0010261:	b0 01                	mov    al,0x1
c0010263:	eb 07                	jmp    c001026c <ACPI::open(int, int, void*)+0x3ec>
c0010265:	8d 76 00             	lea    esi,[esi+0x0]
c0010268:	b0 00                	mov    al,0x0
c001026a:	66 90                	xchg   ax,ax
c001026c:	0f b6 c0             	movzx  eax,al
c001026f:	85 c0                	test   eax,eax
c0010271:	74 25                	je     c0010298 <ACPI::open(int, int, void*)+0x418>
c0010273:	83 ec 08             	sub    esp,0x8
c0010276:	6a 01                	push   0x1
c0010278:	68 e7 22 02 c0       	push   0xc00222e7
c001027d:	e8 17 55 00 00       	call   c0015799 <Thr::loadDLL(char const*, bool)>
c0010282:	83 c4 10             	add    esp,0x10
c0010285:	83 ec 08             	sub    esp,0x8
c0010288:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001028f:	50                   	push   eax
c0010290:	e8 35 57 00 00       	call   c00159ca <Thr::executeDLL(unsigned long, void*)>
c0010295:	83 c4 10             	add    esp,0x10
c0010298:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00102a0:	74 2a                	je     c00102cc <ACPI::open(int, int, void*)+0x44c>
c00102a2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00102aa:	74 20                	je     c00102cc <ACPI::open(int, int, void*)+0x44c>
c00102ac:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00102b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00102b5:	83 c0 08             	add    eax,0x8
c00102b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00102ba:	83 ec 0c             	sub    esp,0xc
c00102bd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00102c4:	ff d0                	call   eax
c00102c6:	83 c4 10             	add    esp,0x10
c00102c9:	8d 76 00             	lea    esi,[esi+0x0]
c00102cc:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c00102d1:	83 ec 08             	sub    esp,0x8
c00102d4:	68 04 23 02 c0       	push   0xc0022304
c00102d9:	50                   	push   eax
c00102da:	e8 c1 f1 ff ff       	call   c000f4a0 <findDataTable(unsigned char*, char*)>
c00102df:	83 c4 10             	add    esp,0x10
c00102e2:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00102e9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00102f1:	74 19                	je     c001030c <ACPI::open(int, int, void*)+0x48c>
c00102f3:	83 ec 08             	sub    esp,0x8
c00102f6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00102fd:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0010304:	e8 13 fb ff ff       	call   c000fe1c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0010309:	83 c4 10             	add    esp,0x10
c001030c:	b8 00 00 00 00       	mov    eax,0x0
c0010311:	81 c4 70 01 00 00    	add    esp,0x170
c0010317:	5b                   	pop    ebx
c0010318:	5e                   	pop    esi
c0010319:	5f                   	pop    edi
c001031a:	c3                   	ret    
c001031b:	90                   	nop

c001031c <CPU::close(int, int, void*)>:
c001031c:	31 c0                	xor    eax,eax
c001031e:	c3                   	ret    
c001031f:	90                   	nop

c0010320 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0010320:	60                   	pusha  
c0010321:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010325:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010329:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001032d:	9c                   	pushf  
c001032e:	fa                   	cli    
c001032f:	0f 09                	wbinvd 
c0010331:	0f 30                	wrmsr  
c0010333:	9d                   	popf   
c0010334:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010338:	89 02                	mov    DWORD PTR [edx],eax
c001033a:	61                   	popa   
c001033b:	c3                   	ret    

c001033c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001033c:	60                   	pusha  
c001033d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010341:	9c                   	pushf  
c0010342:	fa                   	cli    
c0010343:	0f 09                	wbinvd 
c0010345:	31 c0                	xor    eax,eax
c0010347:	31 d2                	xor    edx,edx
c0010349:	0f 32                	rdmsr  
c001034b:	9d                   	popf   
c001034c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010350:	89 02                	mov    DWORD PTR [edx],eax
c0010352:	61                   	popa   
c0010353:	c3                   	ret    

c0010354 <CPU::AMD_K6_writeback(int, int, int)>:
c0010354:	56                   	push   esi
c0010355:	53                   	push   ebx
c0010356:	83 ec 10             	sub    esp,0x10
c0010359:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001035d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0010362:	75 5d                	jne    c00103c1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010364:	83 f8 08             	cmp    eax,0x8
c0010367:	75 09                	jne    c0010372 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010369:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001036e:	7e 13                	jle    c0010383 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010370:	eb 30                	jmp    c00103a2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010372:	83 f8 06             	cmp    eax,0x6
c0010375:	7c 4a                	jl     c00103c1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010377:	83 f8 07             	cmp    eax,0x7
c001037a:	7e 07                	jle    c0010383 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001037c:	83 f8 09             	cmp    eax,0x9
c001037f:	74 21                	je     c00103a2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010381:	eb 3e                	jmp    c00103c1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010383:	89 e6                	mov    esi,esp
c0010385:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c001038b:	56                   	push   esi
c001038c:	c1 eb 15             	shr    ebx,0x15
c001038f:	68 82 00 00 c0       	push   0xc0000082
c0010394:	83 e3 7e             	and    ebx,0x7e
c0010397:	e8 a0 ff ff ff       	call   c001033c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001039c:	56                   	push   esi
c001039d:	6a 00                	push   0x0
c001039f:	53                   	push   ebx
c00103a0:	eb 12                	jmp    c00103b4 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00103a2:	89 e3                	mov    ebx,esp
c00103a4:	53                   	push   ebx
c00103a5:	68 82 00 00 c0       	push   0xc0000082
c00103aa:	e8 8d ff ff ff       	call   c001033c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00103af:	53                   	push   ebx
c00103b0:	6a 00                	push   0x0
c00103b2:	6a 00                	push   0x0
c00103b4:	68 82 00 00 c0       	push   0xc0000082
c00103b9:	e8 62 ff ff ff       	call   c0010320 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00103be:	83 c4 18             	add    esp,0x18
c00103c1:	83 c4 10             	add    esp,0x10
c00103c4:	5b                   	pop    ebx
c00103c5:	5e                   	pop    esi
c00103c6:	c3                   	ret    
c00103c7:	90                   	nop

c00103c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00103c8:	55                   	push   ebp
c00103c9:	57                   	push   edi
c00103ca:	56                   	push   esi
c00103cb:	53                   	push   ebx
c00103cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00103d4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00103d8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00103dc:	39 05 78 39 02 c0    	cmp    DWORD PTR ds:0xc0023978,eax
c00103e2:	75 23                	jne    c0010407 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00103e4:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00103e9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00103ed:	89 06                	mov    DWORD PTR [esi],eax
c00103ef:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00103f4:	89 07                	mov    DWORD PTR [edi],eax
c00103f6:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c00103fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00103fe:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c0010403:	89 02                	mov    DWORD PTR [edx],eax
c0010405:	eb 3f                	jmp    c0010446 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0010407:	31 c9                	xor    ecx,ecx
c0010409:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001040d:	0f a2                	cpuid  
c001040f:	89 06                	mov    DWORD PTR [esi],eax
c0010411:	89 1f                	mov    DWORD PTR [edi],ebx
c0010413:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010417:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001041a:	89 10                	mov    DWORD PTR [eax],edx
c001041c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010420:	a3 78 39 02 c0       	mov    ds:0xc0023978,eax
c0010425:	8b 06                	mov    eax,DWORD PTR [esi]
c0010427:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c001042c:	8b 07                	mov    eax,DWORD PTR [edi]
c001042e:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c0010433:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010436:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c001043b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001043f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010441:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c0010446:	5b                   	pop    ebx
c0010447:	5e                   	pop    esi
c0010448:	5f                   	pop    edi
c0010449:	5d                   	pop    ebp
c001044a:	c3                   	ret    
c001044b:	90                   	nop

c001044c <CPU::cpuidCheckEDX(unsigned int)>:
c001044c:	83 ec 10             	sub    esp,0x10
c001044f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010453:	50                   	push   eax
c0010454:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010458:	50                   	push   eax
c0010459:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001045d:	50                   	push   eax
c001045e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010462:	50                   	push   eax
c0010463:	6a 01                	push   0x1
c0010465:	e8 5e ff ff ff       	call   c00103c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001046a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001046e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010472:	0f 95 c0             	setne  al
c0010475:	83 c4 24             	add    esp,0x24
c0010478:	c3                   	ret    
c0010479:	90                   	nop

c001047a <CPU::cpuidCheckECX(unsigned int)>:
c001047a:	83 ec 10             	sub    esp,0x10
c001047d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010481:	50                   	push   eax
c0010482:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010486:	50                   	push   eax
c0010487:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001048b:	50                   	push   eax
c001048c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010490:	50                   	push   eax
c0010491:	6a 01                	push   0x1
c0010493:	e8 30 ff ff ff       	call   c00103c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010498:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001049c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00104a0:	0f 95 c0             	setne  al
c00104a3:	83 c4 24             	add    esp,0x24
c00104a6:	c3                   	ret    
c00104a7:	90                   	nop

c00104a8 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00104a8:	83 ec 10             	sub    esp,0x10
c00104ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104af:	50                   	push   eax
c00104b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104b4:	50                   	push   eax
c00104b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104b9:	50                   	push   eax
c00104ba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104be:	50                   	push   eax
c00104bf:	6a 07                	push   0x7
c00104c1:	e8 02 ff ff ff       	call   c00103c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00104c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00104ca:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00104ce:	0f 95 c0             	setne  al
c00104d1:	83 c4 24             	add    esp,0x24
c00104d4:	c3                   	ret    
c00104d5:	90                   	nop

c00104d6 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00104d6:	83 ec 10             	sub    esp,0x10
c00104d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104dd:	50                   	push   eax
c00104de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104e2:	50                   	push   eax
c00104e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104e7:	50                   	push   eax
c00104e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00104ec:	50                   	push   eax
c00104ed:	6a 07                	push   0x7
c00104ef:	e8 d4 fe ff ff       	call   c00103c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00104f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00104f8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00104fc:	0f 95 c0             	setne  al
c00104ff:	83 c4 24             	add    esp,0x24
c0010502:	c3                   	ret    
c0010503:	90                   	nop

c0010504 <CPU::CPU()>:
c0010504:	83 ec 0c             	sub    esp,0xc
c0010507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050b:	83 ec 08             	sub    esp,0x8
c001050e:	68 c5 24 02 c0       	push   0xc00224c5
c0010513:	50                   	push   eax
c0010514:	e8 af c6 ff ff       	call   c000cbc8 <Device::Device(char const*)>
c0010519:	83 c4 10             	add    esp,0x10
c001051c:	ba 58 25 02 c0       	mov    edx,0xc0022558
c0010521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010525:	89 10                	mov    DWORD PTR [eax],edx
c0010527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0010535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010539:	05 78 01 00 00       	add    eax,0x178
c001053e:	83 ec 0c             	sub    esp,0xc
c0010541:	50                   	push   eax
c0010542:	e8 45 6e ff ff       	call   c000738c <GDT::GDT()>
c0010547:	83 c4 10             	add    esp,0x10
c001054a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054e:	05 7c 09 00 00       	add    eax,0x97c
c0010553:	83 ec 0c             	sub    esp,0xc
c0010556:	50                   	push   eax
c0010557:	e8 80 70 ff ff       	call   c00075dc <IDT::IDT()>
c001055c:	83 c4 10             	add    esp,0x10
c001055f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010563:	05 7c 11 00 00       	add    eax,0x117c
c0010568:	83 ec 0c             	sub    esp,0xc
c001056b:	50                   	push   eax
c001056c:	e8 03 8a ff ff       	call   c0008f74 <TSS::TSS()>
c0010571:	83 c4 10             	add    esp,0x10
c0010574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010578:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001057f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010583:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001058d:	90                   	nop
c001058e:	83 c4 0c             	add    esp,0xc
c0010591:	c3                   	ret    

c0010592 <CPU::displayFeatures()>:
c0010592:	c3                   	ret    
c0010593:	90                   	nop

c0010594 <CPU::detectFeatures()>:
c0010594:	55                   	push   ebp
c0010595:	57                   	push   edi
c0010596:	56                   	push   esi
c0010597:	53                   	push   ebx
c0010598:	83 ec 30             	sub    esp,0x30
c001059b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001059f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00105a9:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00105b0:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00105b6:	6a 0d                	push   0xd
c00105b8:	6a 00                	push   0x0
c00105ba:	55                   	push   ebp
c00105bb:	e8 30 ff fe ff       	call   c00004f0 <memset>
c00105c0:	83 c4 10             	add    esp,0x10
c00105c3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00105c8:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00105cf:	0f 84 db 05 00 00    	je     c0010bb0 <CPU::detectFeatures()+0x61c>
c00105d5:	83 ec 0c             	sub    esp,0xc
c00105d8:	89 ef                	mov    edi,ebp
c00105da:	6a 10                	push   0x10
c00105dc:	e8 6b fe ff ff       	call   c001044c <CPU::cpuidCheckEDX(unsigned int)>
c00105e1:	83 e0 01             	and    eax,0x1
c00105e4:	8d 14 00             	lea    edx,[eax+eax*1]
c00105e7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105ed:	83 e0 fd             	and    eax,0xfffffffd
c00105f0:	09 d0                	or     eax,edx
c00105f2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105f8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00105ff:	e8 48 fe ff ff       	call   c001044c <CPU::cpuidCheckEDX(unsigned int)>
c0010604:	83 e0 01             	and    eax,0x1
c0010607:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001060e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010614:	83 e0 fb             	and    eax,0xfffffffb
c0010617:	09 d0                	or     eax,edx
c0010619:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001061f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0010626:	e8 21 fe ff ff       	call   c001044c <CPU::cpuidCheckEDX(unsigned int)>
c001062b:	83 e0 01             	and    eax,0x1
c001062e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010635:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001063b:	83 e0 f7             	and    eax,0xfffffff7
c001063e:	09 d0                	or     eax,edx
c0010640:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010646:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001064d:	e8 fa fd ff ff       	call   c001044c <CPU::cpuidCheckEDX(unsigned int)>
c0010652:	83 e0 01             	and    eax,0x1
c0010655:	c1 e0 04             	shl    eax,0x4
c0010658:	89 c2                	mov    edx,eax
c001065a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010660:	83 e0 ef             	and    eax,0xffffffef
c0010663:	09 d0                	or     eax,edx
c0010665:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001066b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010672:	e8 d5 fd ff ff       	call   c001044c <CPU::cpuidCheckEDX(unsigned int)>
c0010677:	83 e0 01             	and    eax,0x1
c001067a:	c1 e0 05             	shl    eax,0x5
c001067d:	89 c2                	mov    edx,eax
c001067f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010685:	83 e0 df             	and    eax,0xffffffdf
c0010688:	09 d0                	or     eax,edx
c001068a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010690:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010697:	e8 b0 fd ff ff       	call   c001044c <CPU::cpuidCheckEDX(unsigned int)>
c001069c:	83 e0 01             	and    eax,0x1
c001069f:	8d 14 00             	lea    edx,[eax+eax*1]
c00106a2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106a8:	83 e0 fd             	and    eax,0xfffffffd
c00106ab:	09 d0                	or     eax,edx
c00106ad:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00106b3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00106ba:	e8 8d fd ff ff       	call   c001044c <CPU::cpuidCheckEDX(unsigned int)>
c00106bf:	83 e0 01             	and    eax,0x1
c00106c2:	c1 e0 06             	shl    eax,0x6
c00106c5:	89 c2                	mov    edx,eax
c00106c7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00106cd:	83 e0 bf             	and    eax,0xffffffbf
c00106d0:	09 d0                	or     eax,edx
c00106d2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00106d8:	58                   	pop    eax
c00106d9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106dd:	50                   	push   eax
c00106de:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106e2:	50                   	push   eax
c00106e3:	8d 74 24 28          	lea    esi,[esp+0x28]
c00106e7:	56                   	push   esi
c00106e8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106ec:	50                   	push   eax
c00106ed:	6a 00                	push   0x0
c00106ef:	e8 d4 fc ff ff       	call   c00103c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106f4:	b8 04 00 00 00       	mov    eax,0x4
c00106f9:	89 c1                	mov    ecx,eax
c00106fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106fd:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010703:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0010707:	89 c1                	mov    ecx,eax
c0010709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001070b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010711:	8d 74 24 38          	lea    esi,[esp+0x38]
c0010715:	89 c1                	mov    ecx,eax
c0010717:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010719:	83 c4 18             	add    esp,0x18
c001071c:	68 d4 23 02 c0       	push   0xc00223d4
c0010721:	55                   	push   ebp
c0010722:	e8 29 00 ff ff       	call   c0000750 <strcmp>
c0010727:	83 c4 10             	add    esp,0x10
c001072a:	85 c0                	test   eax,eax
c001072c:	75 0f                	jne    c001073d <CPU::detectFeatures()+0x1a9>
c001072e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010738:	e9 22 02 00 00       	jmp    c001095f <CPU::detectFeatures()+0x3cb>
c001073d:	50                   	push   eax
c001073e:	50                   	push   eax
c001073f:	68 e1 23 02 c0       	push   0xc00223e1
c0010744:	55                   	push   ebp
c0010745:	e8 06 00 ff ff       	call   c0000750 <strcmp>
c001074a:	83 c4 10             	add    esp,0x10
c001074d:	85 c0                	test   eax,eax
c001074f:	74 dd                	je     c001072e <CPU::detectFeatures()+0x19a>
c0010751:	50                   	push   eax
c0010752:	50                   	push   eax
c0010753:	68 ee 23 02 c0       	push   0xc00223ee
c0010758:	55                   	push   ebp
c0010759:	e8 f2 ff fe ff       	call   c0000750 <strcmp>
c001075e:	83 c4 10             	add    esp,0x10
c0010761:	85 c0                	test   eax,eax
c0010763:	74 2a                	je     c001078f <CPU::detectFeatures()+0x1fb>
c0010765:	50                   	push   eax
c0010766:	50                   	push   eax
c0010767:	68 fb 23 02 c0       	push   0xc00223fb
c001076c:	55                   	push   ebp
c001076d:	e8 de ff fe ff       	call   c0000750 <strcmp>
c0010772:	83 c4 10             	add    esp,0x10
c0010775:	85 c0                	test   eax,eax
c0010777:	74 16                	je     c001078f <CPU::detectFeatures()+0x1fb>
c0010779:	50                   	push   eax
c001077a:	50                   	push   eax
c001077b:	68 08 24 02 c0       	push   0xc0022408
c0010780:	55                   	push   ebp
c0010781:	e8 ca ff fe ff       	call   c0000750 <strcmp>
c0010786:	83 c4 10             	add    esp,0x10
c0010789:	85 c0                	test   eax,eax
c001078b:	74 48                	je     c00107d5 <CPU::detectFeatures()+0x241>
c001078d:	eb 0f                	jmp    c001079e <CPU::detectFeatures()+0x20a>
c001078f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010799:	e9 c1 01 00 00       	jmp    c001095f <CPU::detectFeatures()+0x3cb>
c001079e:	50                   	push   eax
c001079f:	50                   	push   eax
c00107a0:	68 15 24 02 c0       	push   0xc0022415
c00107a5:	55                   	push   ebp
c00107a6:	e8 a5 ff fe ff       	call   c0000750 <strcmp>
c00107ab:	83 c4 10             	add    esp,0x10
c00107ae:	85 c0                	test   eax,eax
c00107b0:	74 23                	je     c00107d5 <CPU::detectFeatures()+0x241>
c00107b2:	57                   	push   edi
c00107b3:	57                   	push   edi
c00107b4:	68 22 24 02 c0       	push   0xc0022422
c00107b9:	55                   	push   ebp
c00107ba:	e8 91 ff fe ff       	call   c0000750 <strcmp>
c00107bf:	83 c4 10             	add    esp,0x10
c00107c2:	85 c0                	test   eax,eax
c00107c4:	75 1e                	jne    c00107e4 <CPU::detectFeatures()+0x250>
c00107c6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00107d0:	e9 8a 01 00 00       	jmp    c001095f <CPU::detectFeatures()+0x3cb>
c00107d5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00107df:	e9 7b 01 00 00       	jmp    c001095f <CPU::detectFeatures()+0x3cb>
c00107e4:	56                   	push   esi
c00107e5:	56                   	push   esi
c00107e6:	68 2f 24 02 c0       	push   0xc002242f
c00107eb:	55                   	push   ebp
c00107ec:	e8 5f ff fe ff       	call   c0000750 <strcmp>
c00107f1:	83 c4 10             	add    esp,0x10
c00107f4:	85 c0                	test   eax,eax
c00107f6:	75 0f                	jne    c0010807 <CPU::detectFeatures()+0x273>
c00107f8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010802:	e9 58 01 00 00       	jmp    c001095f <CPU::detectFeatures()+0x3cb>
c0010807:	51                   	push   ecx
c0010808:	51                   	push   ecx
c0010809:	68 ee 23 02 c0       	push   0xc00223ee
c001080e:	55                   	push   ebp
c001080f:	e8 3c ff fe ff       	call   c0000750 <strcmp>
c0010814:	83 c4 10             	add    esp,0x10
c0010817:	85 c0                	test   eax,eax
c0010819:	75 0f                	jne    c001082a <CPU::detectFeatures()+0x296>
c001081b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0010825:	e9 35 01 00 00       	jmp    c001095f <CPU::detectFeatures()+0x3cb>
c001082a:	52                   	push   edx
c001082b:	52                   	push   edx
c001082c:	68 3c 24 02 c0       	push   0xc002243c
c0010831:	55                   	push   ebp
c0010832:	e8 19 ff fe ff       	call   c0000750 <strcmp>
c0010837:	83 c4 10             	add    esp,0x10
c001083a:	85 c0                	test   eax,eax
c001083c:	75 0f                	jne    c001084d <CPU::detectFeatures()+0x2b9>
c001083e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010848:	e9 12 01 00 00       	jmp    c001095f <CPU::detectFeatures()+0x3cb>
c001084d:	50                   	push   eax
c001084e:	50                   	push   eax
c001084f:	68 49 24 02 c0       	push   0xc0022449
c0010854:	55                   	push   ebp
c0010855:	e8 f6 fe fe ff       	call   c0000750 <strcmp>
c001085a:	83 c4 10             	add    esp,0x10
c001085d:	85 c0                	test   eax,eax
c001085f:	75 0f                	jne    c0010870 <CPU::detectFeatures()+0x2dc>
c0010861:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001086b:	e9 ef 00 00 00       	jmp    c001095f <CPU::detectFeatures()+0x3cb>
c0010870:	50                   	push   eax
c0010871:	50                   	push   eax
c0010872:	68 56 24 02 c0       	push   0xc0022456
c0010877:	55                   	push   ebp
c0010878:	e8 d3 fe fe ff       	call   c0000750 <strcmp>
c001087d:	83 c4 10             	add    esp,0x10
c0010880:	85 c0                	test   eax,eax
c0010882:	75 0f                	jne    c0010893 <CPU::detectFeatures()+0x2ff>
c0010884:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001088e:	e9 cc 00 00 00       	jmp    c001095f <CPU::detectFeatures()+0x3cb>
c0010893:	50                   	push   eax
c0010894:	50                   	push   eax
c0010895:	68 63 24 02 c0       	push   0xc0022463
c001089a:	55                   	push   ebp
c001089b:	e8 b0 fe fe ff       	call   c0000750 <strcmp>
c00108a0:	83 c4 10             	add    esp,0x10
c00108a3:	85 c0                	test   eax,eax
c00108a5:	75 0f                	jne    c00108b6 <CPU::detectFeatures()+0x322>
c00108a7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00108b1:	e9 a9 00 00 00       	jmp    c001095f <CPU::detectFeatures()+0x3cb>
c00108b6:	50                   	push   eax
c00108b7:	50                   	push   eax
c00108b8:	68 70 24 02 c0       	push   0xc0022470
c00108bd:	55                   	push   ebp
c00108be:	e8 8d fe fe ff       	call   c0000750 <strcmp>
c00108c3:	83 c4 10             	add    esp,0x10
c00108c6:	85 c0                	test   eax,eax
c00108c8:	75 0f                	jne    c00108d9 <CPU::detectFeatures()+0x345>
c00108ca:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00108d4:	e9 86 00 00 00       	jmp    c001095f <CPU::detectFeatures()+0x3cb>
c00108d9:	50                   	push   eax
c00108da:	50                   	push   eax
c00108db:	68 7d 24 02 c0       	push   0xc002247d
c00108e0:	55                   	push   ebp
c00108e1:	e8 6a fe fe ff       	call   c0000750 <strcmp>
c00108e6:	83 c4 10             	add    esp,0x10
c00108e9:	85 c0                	test   eax,eax
c00108eb:	75 0c                	jne    c00108f9 <CPU::detectFeatures()+0x365>
c00108ed:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00108f7:	eb 66                	jmp    c001095f <CPU::detectFeatures()+0x3cb>
c00108f9:	50                   	push   eax
c00108fa:	50                   	push   eax
c00108fb:	68 8a 24 02 c0       	push   0xc002248a
c0010900:	55                   	push   ebp
c0010901:	e8 4a fe fe ff       	call   c0000750 <strcmp>
c0010906:	83 c4 10             	add    esp,0x10
c0010909:	85 c0                	test   eax,eax
c001090b:	75 0c                	jne    c0010919 <CPU::detectFeatures()+0x385>
c001090d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0010917:	eb 46                	jmp    c001095f <CPU::detectFeatures()+0x3cb>
c0010919:	57                   	push   edi
c001091a:	57                   	push   edi
c001091b:	68 97 24 02 c0       	push   0xc0022497
c0010920:	55                   	push   ebp
c0010921:	e8 2a fe fe ff       	call   c0000750 <strcmp>
c0010926:	83 c4 10             	add    esp,0x10
c0010929:	85 c0                	test   eax,eax
c001092b:	74 e0                	je     c001090d <CPU::detectFeatures()+0x379>
c001092d:	56                   	push   esi
c001092e:	56                   	push   esi
c001092f:	68 a4 24 02 c0       	push   0xc00224a4
c0010934:	55                   	push   ebp
c0010935:	e8 16 fe fe ff       	call   c0000750 <strcmp>
c001093a:	83 c4 10             	add    esp,0x10
c001093d:	85 c0                	test   eax,eax
c001093f:	74 cc                	je     c001090d <CPU::detectFeatures()+0x379>
c0010941:	51                   	push   ecx
c0010942:	51                   	push   ecx
c0010943:	68 b1 24 02 c0       	push   0xc00224b1
c0010948:	55                   	push   ebp
c0010949:	e8 02 fe fe ff       	call   c0000750 <strcmp>
c001094e:	83 c4 10             	add    esp,0x10
c0010951:	85 c0                	test   eax,eax
c0010953:	74 b8                	je     c001090d <CPU::detectFeatures()+0x379>
c0010955:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001095f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010964:	0f 86 be 00 00 00    	jbe    c0010a28 <CPU::detectFeatures()+0x494>
c001096a:	83 ec 0c             	sub    esp,0xc
c001096d:	68 80 00 00 00       	push   0x80
c0010972:	e8 31 fb ff ff       	call   c00104a8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010977:	83 e0 01             	and    eax,0x1
c001097a:	c1 e0 06             	shl    eax,0x6
c001097d:	89 c2                	mov    edx,eax
c001097f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010985:	83 e0 bf             	and    eax,0xffffffbf
c0010988:	09 d0                	or     eax,edx
c001098a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010990:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010997:	e8 0c fb ff ff       	call   c00104a8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001099c:	83 e0 01             	and    eax,0x1
c001099f:	c1 e0 04             	shl    eax,0x4
c00109a2:	89 c2                	mov    edx,eax
c00109a4:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00109aa:	83 e0 ef             	and    eax,0xffffffef
c00109ad:	09 d0                	or     eax,edx
c00109af:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00109b5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00109bc:	e8 e7 fa ff ff       	call   c00104a8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00109c1:	89 c2                	mov    edx,eax
c00109c3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00109c9:	c1 e2 07             	shl    edx,0x7
c00109cc:	83 e0 7f             	and    eax,0x7f
c00109cf:	09 d0                	or     eax,edx
c00109d1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00109d7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00109de:	e8 f3 fa ff ff       	call   c00104d6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00109e3:	83 e0 01             	and    eax,0x1
c00109e6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00109ed:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00109f3:	83 e0 f7             	and    eax,0xfffffff7
c00109f6:	09 d0                	or     eax,edx
c00109f8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00109fe:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0010a05:	e8 cc fa ff ff       	call   c00104d6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010a0a:	83 c4 10             	add    esp,0x10
c0010a0d:	83 e0 01             	and    eax,0x1
c0010a10:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010a17:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010a1d:	83 e0 fb             	and    eax,0xfffffffb
c0010a20:	09 d0                	or     eax,edx
c0010a22:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010a28:	83 ec 0c             	sub    esp,0xc
c0010a2b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a2f:	50                   	push   eax
c0010a30:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a34:	50                   	push   eax
c0010a35:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010a39:	57                   	push   edi
c0010a3a:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010a3e:	56                   	push   esi
c0010a3f:	6a 01                	push   0x1
c0010a41:	e8 82 f9 ff ff       	call   c00103c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010a4a:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010a50:	89 c1                	mov    ecx,eax
c0010a52:	83 e2 f0             	and    edx,0xfffffff0
c0010a55:	83 e1 0f             	and    ecx,0xf
c0010a58:	09 ca                	or     edx,ecx
c0010a5a:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010a60:	89 c2                	mov    edx,eax
c0010a62:	c1 ea 04             	shr    edx,0x4
c0010a65:	83 e2 0f             	and    edx,0xf
c0010a68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010a6c:	89 d1                	mov    ecx,edx
c0010a6e:	83 c4 20             	add    esp,0x20
c0010a71:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010a77:	c1 e1 06             	shl    ecx,0x6
c0010a7a:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010a80:	09 ca                	or     edx,ecx
c0010a82:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010a89:	89 c2                	mov    edx,eax
c0010a8b:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010a91:	c1 ea 08             	shr    edx,0x8
c0010a94:	83 e1 3f             	and    ecx,0x3f
c0010a97:	83 e2 0f             	and    edx,0xf
c0010a9a:	89 d5                	mov    ebp,edx
c0010a9c:	83 e5 03             	and    ebp,0x3
c0010a9f:	c1 e5 06             	shl    ebp,0x6
c0010aa2:	09 e9                	or     ecx,ebp
c0010aa4:	89 d5                	mov    ebp,edx
c0010aa6:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010aac:	c1 ed 02             	shr    ebp,0x2
c0010aaf:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010ab5:	83 e1 c0             	and    ecx,0xffffffc0
c0010ab8:	09 e9                	or     ecx,ebp
c0010aba:	89 c5                	mov    ebp,eax
c0010abc:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010ac2:	c1 ed 08             	shr    ebp,0x8
c0010ac5:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010acb:	83 e5 30             	and    ebp,0x30
c0010ace:	83 e1 cf             	and    ecx,0xffffffcf
c0010ad1:	09 e9                	or     ecx,ebp
c0010ad3:	83 fa 06             	cmp    edx,0x6
c0010ad6:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010adc:	74 05                	je     c0010ae3 <CPU::detectFeatures()+0x54f>
c0010ade:	83 fa 0f             	cmp    edx,0xf
c0010ae1:	75 64                	jne    c0010b47 <CPU::detectFeatures()+0x5b3>
c0010ae3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010ae9:	89 c1                	mov    ecx,eax
c0010aeb:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010af1:	c1 e9 10             	shr    ecx,0x10
c0010af4:	c1 e1 04             	shl    ecx,0x4
c0010af7:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010afb:	0f b6 c9             	movzx  ecx,cl
c0010afe:	c1 e1 06             	shl    ecx,0x6
c0010b01:	09 e9                	or     ecx,ebp
c0010b03:	83 fa 0f             	cmp    edx,0xf
c0010b06:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010b0d:	75 38                	jne    c0010b47 <CPU::detectFeatures()+0x5b3>
c0010b0f:	c1 e8 14             	shr    eax,0x14
c0010b12:	83 c0 0f             	add    eax,0xf
c0010b15:	0f b6 c0             	movzx  eax,al
c0010b18:	89 c2                	mov    edx,eax
c0010b1a:	c1 e8 02             	shr    eax,0x2
c0010b1d:	83 e2 03             	and    edx,0x3
c0010b20:	89 d1                	mov    ecx,edx
c0010b22:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010b28:	c1 e1 06             	shl    ecx,0x6
c0010b2b:	83 e2 3f             	and    edx,0x3f
c0010b2e:	09 ca                	or     edx,ecx
c0010b30:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010b36:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010b3c:	83 e2 c0             	and    edx,0xffffffc0
c0010b3f:	09 d0                	or     eax,edx
c0010b41:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010b47:	83 ec 0c             	sub    esp,0xc
c0010b4a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010b50:	83 c8 07             	or     eax,0x7
c0010b53:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010b59:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010b5d:	50                   	push   eax
c0010b5e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010b62:	55                   	push   ebp
c0010b63:	57                   	push   edi
c0010b64:	56                   	push   esi
c0010b65:	68 00 00 00 80       	push   0x80000000
c0010b6a:	e8 59 f8 ff ff       	call   c00103c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010b6f:	83 c4 20             	add    esp,0x20
c0010b72:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010b7a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010b7e:	76 1e                	jbe    c0010b9e <CPU::detectFeatures()+0x60a>
c0010b80:	83 ec 0c             	sub    esp,0xc
c0010b83:	50                   	push   eax
c0010b84:	55                   	push   ebp
c0010b85:	57                   	push   edi
c0010b86:	56                   	push   esi
c0010b87:	68 01 00 00 80       	push   0x80000001
c0010b8c:	e8 37 f8 ff ff       	call   c00103c8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010b91:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010b9b:	83 c4 20             	add    esp,0x20
c0010b9e:	52                   	push   edx
c0010b9f:	52                   	push   edx
c0010ba0:	68 bd 24 02 c0       	push   0xc00224bd
c0010ba5:	53                   	push   ebx
c0010ba6:	e8 0f c0 ff ff       	call   c000cbba <Device::setName(char const*)>
c0010bab:	83 c4 10             	add    esp,0x10
c0010bae:	eb 69                	jmp    c0010c19 <CPU::detectFeatures()+0x685>
c0010bb0:	50                   	push   eax
c0010bb1:	50                   	push   eax
c0010bb2:	68 22 24 02 c0       	push   0xc0022422
c0010bb7:	55                   	push   ebp
c0010bb8:	e8 83 fa fe ff       	call   c0000640 <strcpy>
c0010bbd:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010bc7:	e8 f7 f5 fe ff       	call   c00001c3 <is486>
c0010bcc:	83 c4 10             	add    esp,0x10
c0010bcf:	85 c0                	test   eax,eax
c0010bd1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010bd7:	74 1f                	je     c0010bf8 <CPU::detectFeatures()+0x664>
c0010bd9:	83 c8 07             	or     eax,0x7
c0010bdc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010be2:	0f 20 c0             	mov    eax,cr0
c0010be5:	83 e0 14             	and    eax,0x14
c0010be8:	83 f8 04             	cmp    eax,0x4
c0010beb:	75 10                	jne    c0010bfd <CPU::detectFeatures()+0x669>
c0010bed:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010bf3:	83 e0 fd             	and    eax,0xfffffffd
c0010bf6:	eb 1b                	jmp    c0010c13 <CPU::detectFeatures()+0x67f>
c0010bf8:	83 e0 f8             	and    eax,0xfffffff8
c0010bfb:	eb df                	jmp    c0010bdc <CPU::detectFeatures()+0x648>
c0010bfd:	e8 9c f5 fe ff       	call   c000019e <hasLegacyFPU>
c0010c02:	83 e0 01             	and    eax,0x1
c0010c05:	8d 14 00             	lea    edx,[eax+eax*1]
c0010c08:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010c0e:	83 e0 fd             	and    eax,0xfffffffd
c0010c11:	09 d0                	or     eax,edx
c0010c13:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010c19:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010c20:	74 17                	je     c0010c39 <CPU::detectFeatures()+0x6a5>
c0010c22:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010c28:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010c2e:	83 c8 10             	or     eax,0x10
c0010c31:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010c37:	eb 20                	jmp    c0010c59 <CPU::detectFeatures()+0x6c5>
c0010c39:	e8 60 f5 fe ff       	call   c000019e <hasLegacyFPU>
c0010c3e:	83 e0 01             	and    eax,0x1
c0010c41:	8d 14 00             	lea    edx,[eax+eax*1]
c0010c44:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010c4a:	83 e0 fd             	and    eax,0xfffffffd
c0010c4d:	09 d0                	or     eax,edx
c0010c4f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010c55:	a8 02                	test   al,0x2
c0010c57:	75 c9                	jne    c0010c22 <CPU::detectFeatures()+0x68e>
c0010c59:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010c60:	83 c4 2c             	add    esp,0x2c
c0010c63:	5b                   	pop    ebx
c0010c64:	5e                   	pop    esi
c0010c65:	5f                   	pop    edi
c0010c66:	5d                   	pop    ebp
c0010c67:	c3                   	ret    

c0010c68 <CPU::setupSMEP()>:
c0010c68:	0f 20 e0             	mov    eax,cr4
c0010c6b:	0d 00 00 10 00       	or     eax,0x100000
c0010c70:	0f 22 e0             	mov    cr4,eax
c0010c73:	c3                   	ret    

c0010c74 <CPU::setupUMIP()>:
c0010c74:	0f 20 e0             	mov    eax,cr4
c0010c77:	80 cc 08             	or     ah,0x8
c0010c7a:	0f 22 e0             	mov    cr4,eax
c0010c7d:	c3                   	ret    

c0010c7e <CPU::setupTSC()>:
c0010c7e:	0f 20 e0             	mov    eax,cr4
c0010c81:	83 c8 04             	or     eax,0x4
c0010c84:	0f 22 e0             	mov    cr4,eax
c0010c87:	c3                   	ret    

c0010c88 <CPU::setupLargePages()>:
c0010c88:	0f 20 e0             	mov    eax,cr4
c0010c8b:	83 c8 10             	or     eax,0x10
c0010c8e:	0f 22 e0             	mov    cr4,eax
c0010c91:	c3                   	ret    

c0010c92 <CPU::setupPAT()>:
c0010c92:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010c97:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010c9e:	74 2c                	je     c0010ccc <CPU::setupPAT()+0x3a>
c0010ca0:	53                   	push   ebx
c0010ca1:	83 ec 10             	sub    esp,0x10
c0010ca4:	68 77 02 00 00       	push   0x277
c0010ca9:	50                   	push   eax
c0010caa:	e8 41 64 ff ff       	call   c00070f0 <Computer::rdmsr(unsigned int)>
c0010caf:	83 e2 f8             	and    edx,0xfffffff8
c0010cb2:	83 ca 01             	or     edx,0x1
c0010cb5:	52                   	push   edx
c0010cb6:	50                   	push   eax
c0010cb7:	68 77 02 00 00       	push   0x277
c0010cbc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010cc2:	e8 55 64 ff ff       	call   c000711c <Computer::wrmsr(unsigned int, unsigned long long)>
c0010cc7:	83 c4 28             	add    esp,0x28
c0010cca:	5b                   	pop    ebx
c0010ccb:	c3                   	ret    
c0010ccc:	c3                   	ret    
c0010ccd:	90                   	nop

c0010cce <CPU::setupMTRR()>:
c0010cce:	c3                   	ret    
c0010ccf:	90                   	nop

c0010cd0 <CPU::setupGlobalPages()>:
c0010cd0:	0f 20 e0             	mov    eax,cr4
c0010cd3:	0c 80                	or     al,0x80
c0010cd5:	0f 22 e0             	mov    cr4,eax
c0010cd8:	c3                   	ret    
c0010cd9:	90                   	nop

c0010cda <CPU::allowUsermodeDataAccess()>:
c0010cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cde:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010ce5:	74 03                	je     c0010cea <CPU::allowUsermodeDataAccess()+0x10>
c0010ce7:	0f 01 cb             	stac   
c0010cea:	c3                   	ret    
c0010ceb:	90                   	nop

c0010cec <CPU::prohibitUsermodeDataAccess()>:
c0010cec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cf0:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010cf7:	74 03                	je     c0010cfc <CPU::prohibitUsermodeDataAccess()+0x10>
c0010cf9:	0f 01 ca             	clac   
c0010cfc:	c3                   	ret    
c0010cfd:	90                   	nop

c0010cfe <CPU::setupSMAP()>:
c0010cfe:	0f 20 e0             	mov    eax,cr4
c0010d01:	0d 00 00 20 00       	or     eax,0x200000
c0010d06:	0f 22 e0             	mov    cr4,eax
c0010d09:	eb e1                	jmp    c0010cec <CPU::prohibitUsermodeDataAccess()>
c0010d0b:	90                   	nop

c0010d0c <CPU::setupFeatures()>:
c0010d0c:	53                   	push   ebx
c0010d0d:	83 ec 08             	sub    esp,0x8
c0010d10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d14:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010d1b:	74 18                	je     c0010d35 <CPU::setupFeatures()+0x29>
c0010d1d:	83 ec 0c             	sub    esp,0xc
c0010d20:	68 c9 24 02 c0       	push   0xc00224c9
c0010d25:	e8 4b 9c ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0010d2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d2d:	e8 42 ff ff ff       	call   c0010c74 <CPU::setupUMIP()>
c0010d32:	83 c4 10             	add    esp,0x10
c0010d35:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010d3c:	74 18                	je     c0010d56 <CPU::setupFeatures()+0x4a>
c0010d3e:	83 ec 0c             	sub    esp,0xc
c0010d41:	68 d3 24 02 c0       	push   0xc00224d3
c0010d46:	e8 2a 9c ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0010d4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d4e:	e8 2b ff ff ff       	call   c0010c7e <CPU::setupTSC()>
c0010d53:	83 c4 10             	add    esp,0x10
c0010d56:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010d5d:	74 18                	je     c0010d77 <CPU::setupFeatures()+0x6b>
c0010d5f:	83 ec 0c             	sub    esp,0xc
c0010d62:	68 dc 24 02 c0       	push   0xc00224dc
c0010d67:	e8 09 9c ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0010d6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d6f:	e8 14 ff ff ff       	call   c0010c88 <CPU::setupLargePages()>
c0010d74:	83 c4 10             	add    esp,0x10
c0010d77:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010d7e:	74 18                	je     c0010d98 <CPU::setupFeatures()+0x8c>
c0010d80:	83 ec 0c             	sub    esp,0xc
c0010d83:	68 e5 24 02 c0       	push   0xc00224e5
c0010d88:	e8 e8 9b ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0010d8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d90:	e8 3b ff ff ff       	call   c0010cd0 <CPU::setupGlobalPages()>
c0010d95:	83 c4 10             	add    esp,0x10
c0010d98:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010d9f:	74 18                	je     c0010db9 <CPU::setupFeatures()+0xad>
c0010da1:	83 ec 0c             	sub    esp,0xc
c0010da4:	68 f7 24 02 c0       	push   0xc00224f7
c0010da9:	e8 c7 9b ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0010dae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010db1:	e8 dc fe ff ff       	call   c0010c92 <CPU::setupPAT()>
c0010db6:	83 c4 10             	add    esp,0x10
c0010db9:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010dc0:	74 11                	je     c0010dd3 <CPU::setupFeatures()+0xc7>
c0010dc2:	c7 44 24 10 00 25 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022500
c0010dca:	83 c4 08             	add    esp,0x8
c0010dcd:	5b                   	pop    ebx
c0010dce:	e9 a2 9b ff ff       	jmp    c000a975 <Dbg::kprintf(char const*, ...)>
c0010dd3:	83 c4 08             	add    esp,0x8
c0010dd6:	5b                   	pop    ebx
c0010dd7:	c3                   	ret    

c0010dd8 <CPU::open(int, int, void*)>:
c0010dd8:	55                   	push   ebp
c0010dd9:	57                   	push   edi
c0010dda:	56                   	push   esi
c0010ddb:	53                   	push   ebx
c0010ddc:	83 ec 18             	sub    esp,0x18
c0010ddf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010de3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010de7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010deb:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010df1:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010df7:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010dfd:	50                   	push   eax
c0010dfe:	e8 eb 65 ff ff       	call   c00073ee <GDT::setup()>
c0010e03:	83 c4 0c             	add    esp,0xc
c0010e06:	6a 00                	push   0x0
c0010e08:	68 ef be ad de       	push   0xdeadbeef
c0010e0d:	55                   	push   ebp
c0010e0e:	e8 a5 81 ff ff       	call   c0008fb8 <TSS::setup(unsigned long, unsigned long)>
c0010e13:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010e16:	e8 7d 81 ff ff       	call   c0008f98 <TSS::flush()>
c0010e1b:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010e21:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e24:	e8 29 68 ff ff       	call   c0007652 <IDT::setup()>
c0010e29:	b8 00 04 00 00       	mov    eax,0x400
c0010e2e:	0f 23 f8             	mov    db7,eax
c0010e31:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010e3b:	e8 af 6f ff ff       	call   c0007def <Phys::allocatePage()>
c0010e40:	83 c4 10             	add    esp,0x10
c0010e43:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010e49:	85 f6                	test   esi,esi
c0010e4b:	89 38                	mov    DWORD PTR [eax],edi
c0010e4d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010e53:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010e56:	74 10                	je     c0010e68 <CPU::open(int, int, void*)+0x90>
c0010e58:	50                   	push   eax
c0010e59:	50                   	push   eax
c0010e5a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010e60:	56                   	push   esi
c0010e61:	e8 78 8a ff ff       	call   c00098de <VAS::setCPUSpecific(unsigned long)>
c0010e66:	eb 0d                	jmp    c0010e75 <CPU::open(int, int, void*)+0x9d>
c0010e68:	83 ec 0c             	sub    esp,0xc
c0010e6b:	68 0a 25 02 c0       	push   0xc002250a
c0010e70:	e8 9e 08 00 00       	call   c0011713 <KePanic(char const*)>
c0010e75:	83 c4 10             	add    esp,0x10
c0010e78:	83 ec 0c             	sub    esp,0xc
c0010e7b:	68 18 25 02 c0       	push   0xc0022518
c0010e80:	e8 8e 01 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c0010e85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e88:	e8 07 f7 ff ff       	call   c0010594 <CPU::detectFeatures()>
c0010e8d:	c7 04 24 3b 25 02 c0 	mov    DWORD PTR [esp],0xc002253b
c0010e94:	e8 7a 01 00 00       	call   c0011013 <KeSetBootMessage(char const*)>
c0010e99:	e8 2f 74 00 00       	call   c00182cd <HalInitialise()>
c0010e9e:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010ea3:	83 e0 10             	and    eax,0x10
c0010ea6:	83 f8 01             	cmp    eax,0x1
c0010ea9:	19 c0                	sbb    eax,eax
c0010eab:	83 e0 46             	and    eax,0x46
c0010eae:	83 c0 1e             	add    eax,0x1e
c0010eb1:	89 04 24             	mov    DWORD PTR [esp],eax
c0010eb4:	e8 a0 d5 ff ff       	call   c000e459 <setupTimer(int)>
c0010eb9:	83 c4 10             	add    esp,0x10
c0010ebc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010ec2:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010ec9:	74 0c                	je     c0010ed7 <CPU::open(int, int, void*)+0xff>
c0010ecb:	83 ec 0c             	sub    esp,0xc
c0010ece:	53                   	push   ebx
c0010ecf:	e8 38 fe ff ff       	call   c0010d0c <CPU::setupFeatures()>
c0010ed4:	83 c4 10             	add    esp,0x10
c0010ed7:	83 c4 0c             	add    esp,0xc
c0010eda:	31 c0                	xor    eax,eax
c0010edc:	5b                   	pop    ebx
c0010edd:	5e                   	pop    esi
c0010ede:	5f                   	pop    edi
c0010edf:	5d                   	pop    ebp
c0010ee0:	c3                   	ret    

c0010ee1 <KeInitialiseAtexit()>:
c0010ee1:	83 ec 10             	sub    esp,0x10
c0010ee4:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010eee:	6a 60                	push   0x60
c0010ef0:	6a 00                	push   0x0
c0010ef2:	68 20 be 02 c0       	push   0xc002be20
c0010ef7:	e8 f4 f5 fe ff       	call   c00004f0 <memset>
c0010efc:	83 c4 1c             	add    esp,0x1c
c0010eff:	c3                   	ret    

c0010f00 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010f00:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010f05:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010f09:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010f10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f14:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010f1b:	40                   	inc    eax
c0010f1c:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010f21:	83 f8 17             	cmp    eax,0x17
c0010f24:	7e 0d                	jle    c0010f33 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010f26:	c7 44 24 04 7c 25 02 c0 	mov    DWORD PTR [esp+0x4],0xc002257c
c0010f2e:	e9 e0 07 00 00       	jmp    c0011713 <KePanic(char const*)>
c0010f33:	c3                   	ret    

c0010f34 <KeExecuteAtexit()>:
c0010f34:	53                   	push   ebx
c0010f35:	31 db                	xor    ebx,ebx
c0010f37:	83 ec 08             	sub    esp,0x8
c0010f3a:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010f40:	7e 50                	jle    c0010f92 <KeExecuteAtexit()+0x5e>
c0010f42:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010f49:	85 c0                	test   eax,eax
c0010f4b:	74 42                	je     c0010f8f <KeExecuteAtexit()+0x5b>
c0010f4d:	51                   	push   ecx
c0010f4e:	50                   	push   eax
c0010f4f:	53                   	push   ebx
c0010f50:	68 95 25 02 c0       	push   0xc0022595
c0010f55:	e8 1b 9a ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0010f5a:	58                   	pop    eax
c0010f5b:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010f62:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010f69:	c7 04 24 b7 25 02 c0 	mov    DWORD PTR [esp],0xc00225b7
c0010f70:	e8 00 9a ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0010f75:	c7 04 24 17 37 02 c0 	mov    DWORD PTR [esp],0xc0023717
c0010f7c:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010f87:	e8 e9 99 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0010f8c:	83 c4 10             	add    esp,0x10
c0010f8f:	43                   	inc    ebx
c0010f90:	eb a8                	jmp    c0010f3a <KeExecuteAtexit()+0x6>
c0010f92:	83 c4 08             	add    esp,0x8
c0010f95:	5b                   	pop    ebx
c0010f96:	c3                   	ret    

c0010f97 <KeDisplaySplashScreen()>:
c0010f97:	55                   	push   ebp
c0010f98:	bd 05 00 00 00       	mov    ebp,0x5
c0010f9d:	57                   	push   edi
c0010f9e:	bf 0a 00 00 00       	mov    edi,0xa
c0010fa3:	56                   	push   esi
c0010fa4:	31 f6                	xor    esi,esi
c0010fa6:	53                   	push   ebx
c0010fa7:	31 db                	xor    ebx,ebx
c0010fa9:	83 ec 0c             	sub    esp,0xc
c0010fac:	0f b6 96 80 39 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc680]
c0010fb3:	89 d0                	mov    eax,edx
c0010fb5:	85 d2                	test   edx,edx
c0010fb7:	74 52                	je     c001100b <KeDisplaySplashScreen()+0x74>
c0010fb9:	80 bb b6 39 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc64a],0xdb
c0010fc0:	75 13                	jne    c0010fd5 <KeDisplaySplashScreen()+0x3e>
c0010fc2:	0f b6 8b b5 39 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc64b]
c0010fc9:	83 e1 fe             	and    ecx,0xfffffffe
c0010fcc:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010fd2:	75 01                	jne    c0010fd5 <KeDisplaySplashScreen()+0x3e>
c0010fd4:	47                   	inc    edi
c0010fd5:	83 fa 0d             	cmp    edx,0xd
c0010fd8:	74 28                	je     c0011002 <KeDisplaySplashScreen()+0x6b>
c0010fda:	83 fa 0a             	cmp    edx,0xa
c0010fdd:	75 0a                	jne    c0010fe9 <KeDisplaySplashScreen()+0x52>
c0010fdf:	45                   	inc    ebp
c0010fe0:	bf 0a 00 00 00       	mov    edi,0xa
c0010fe5:	31 db                	xor    ebx,ebx
c0010fe7:	eb 19                	jmp    c0011002 <KeDisplaySplashScreen()+0x6b>
c0010fe9:	83 ec 0c             	sub    esp,0xc
c0010fec:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010fef:	55                   	push   ebp
c0010ff0:	0f be c0             	movsx  eax,al
c0010ff3:	52                   	push   edx
c0010ff4:	43                   	inc    ebx
c0010ff5:	6a 00                	push   0x0
c0010ff7:	6a 0e                	push   0xe
c0010ff9:	50                   	push   eax
c0010ffa:	e8 4d 7f 00 00       	call   c0018f4c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010fff:	83 c4 20             	add    esp,0x20
c0011002:	46                   	inc    esi
c0011003:	81 fe 42 01 00 00    	cmp    esi,0x142
c0011009:	75 a1                	jne    c0010fac <KeDisplaySplashScreen()+0x15>
c001100b:	83 c4 0c             	add    esp,0xc
c001100e:	5b                   	pop    ebx
c001100f:	5e                   	pop    esi
c0011010:	5f                   	pop    edi
c0011011:	5d                   	pop    ebp
c0011012:	c3                   	ret    

c0011013 <KeSetBootMessage(char const*)>:
c0011013:	57                   	push   edi
c0011014:	56                   	push   esi
c0011015:	53                   	push   ebx
c0011016:	81 ec a4 00 00 00    	sub    esp,0xa4
c001101c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0011023:	68 9e 00 00 00       	push   0x9e
c0011028:	6a 00                	push   0x0
c001102a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001102e:	56                   	push   esi
c001102f:	e8 bc f4 fe ff       	call   c00004f0 <memset>
c0011034:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011037:	e8 34 f5 fe ff       	call   c0000570 <strlen>
c001103c:	ba 50 00 00 00       	mov    edx,0x50
c0011041:	83 c4 10             	add    esp,0x10
c0011044:	29 c2                	sub    edx,eax
c0011046:	31 c9                	xor    ecx,ecx
c0011048:	83 e2 fe             	and    edx,0xfffffffe
c001104b:	01 f2                	add    edx,esi
c001104d:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0011052:	84 c0                	test   al,al
c0011054:	74 0a                	je     c0011060 <KeSetBootMessage(char const*)+0x4d>
c0011056:	80 cc 0f             	or     ah,0xf
c0011059:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001105d:	41                   	inc    ecx
c001105e:	eb ed                	jmp    c001104d <KeSetBootMessage(char const*)+0x3a>
c0011060:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0011065:	b9 9e 00 00 00       	mov    ecx,0x9e
c001106a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001106c:	81 c4 a0 00 00 00    	add    esp,0xa0
c0011072:	5b                   	pop    ebx
c0011073:	5e                   	pop    esi
c0011074:	5f                   	pop    edi
c0011075:	c3                   	ret    
c0011076:	66 90                	xchg   ax,ax

c0011078 <Krnl::handlePowerButton()>:
c0011078:	83 ec 0c             	sub    esp,0xc
c001107b:	e8 ee 06 00 00       	call   c001176e <KeHandlePowerButton()>
c0011080:	90                   	nop
c0011081:	83 c4 0c             	add    esp,0xc
c0011084:	c3                   	ret    
c0011085:	8d 76 00             	lea    esi,[esi+0x0]

c0011088 <Krnl::handleSleepButton()>:
c0011088:	83 ec 0c             	sub    esp,0xc
c001108b:	e8 13 07 00 00       	call   c00117a3 <KeHandleSleepButton()>
c0011090:	90                   	nop
c0011091:	83 c4 0c             	add    esp,0xc
c0011094:	c3                   	ret    

c0011095 <KeCalculateCRC32(unsigned char*, int)>:
c0011095:	53                   	push   ebx
c0011096:	83 c8 ff             	or     eax,0xffffffff
c0011099:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001109d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00110a1:	01 cb                	add    ebx,ecx
c00110a3:	39 d9                	cmp    ecx,ebx
c00110a5:	74 15                	je     c00110bc <KeCalculateCRC32(unsigned char*, int)+0x27>
c00110a7:	41                   	inc    ecx
c00110a8:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c00110ab:	31 c2                	xor    edx,eax
c00110ad:	c1 e8 08             	shr    eax,0x8
c00110b0:	0f b6 d2             	movzx  edx,dl
c00110b3:	33 04 95 e0 3a 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc520]
c00110ba:	eb e7                	jmp    c00110a3 <KeCalculateCRC32(unsigned char*, int)+0xe>
c00110bc:	f7 d0                	not    eax
c00110be:	5b                   	pop    ebx
c00110bf:	c3                   	ret    

c00110c0 <EnvVarContainer::getEnv(char const*)>:
c00110c0:	57                   	push   edi
c00110c1:	56                   	push   esi
c00110c2:	53                   	push   ebx
c00110c3:	31 db                	xor    ebx,ebx
c00110c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00110c9:	39 1e                	cmp    DWORD PTR [esi],ebx
c00110cb:	7e 2b                	jle    c00110f8 <EnvVarContainer::getEnv(char const*)+0x38>
c00110cd:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00110d4:	50                   	push   eax
c00110d5:	50                   	push   eax
c00110d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00110d9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00110dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00110e0:	e8 6b f6 fe ff       	call   c0000750 <strcmp>
c00110e5:	83 c4 10             	add    esp,0x10
c00110e8:	85 c0                	test   eax,eax
c00110ea:	75 09                	jne    c00110f5 <EnvVarContainer::getEnv(char const*)+0x35>
c00110ec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00110ef:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00110f3:	eb 05                	jmp    c00110fa <EnvVarContainer::getEnv(char const*)+0x3a>
c00110f5:	43                   	inc    ebx
c00110f6:	eb d1                	jmp    c00110c9 <EnvVarContainer::getEnv(char const*)+0x9>
c00110f8:	31 c0                	xor    eax,eax
c00110fa:	5b                   	pop    ebx
c00110fb:	5e                   	pop    esi
c00110fc:	5f                   	pop    edi
c00110fd:	c3                   	ret    

c00110fe <EnvVarContainer::setEnv(char const*, char const*)>:
c00110fe:	55                   	push   ebp
c00110ff:	57                   	push   edi
c0011100:	56                   	push   esi
c0011101:	53                   	push   ebx
c0011102:	83 ec 28             	sub    esp,0x28
c0011105:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011109:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001110d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011111:	56                   	push   esi
c0011112:	e8 59 f4 fe ff       	call   c0000570 <strlen>
c0011117:	40                   	inc    eax
c0011118:	89 04 24             	mov    DWORD PTR [esp],eax
c001111b:	e8 c6 69 ff ff       	call   c0007ae6 <malloc>
c0011120:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011123:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011127:	e8 44 f4 fe ff       	call   c0000570 <strlen>
c001112c:	40                   	inc    eax
c001112d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011130:	e8 b1 69 ff ff       	call   c0007ae6 <malloc>
c0011135:	89 34 24             	mov    DWORD PTR [esp],esi
c0011138:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001113c:	e8 2f f4 fe ff       	call   c0000570 <strlen>
c0011141:	83 c4 0c             	add    esp,0xc
c0011144:	40                   	inc    eax
c0011145:	50                   	push   eax
c0011146:	6a 00                	push   0x0
c0011148:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001114c:	e8 9f f3 fe ff       	call   c00004f0 <memset>
c0011151:	89 34 24             	mov    DWORD PTR [esp],esi
c0011154:	e8 17 f4 fe ff       	call   c0000570 <strlen>
c0011159:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001115d:	8d 48 01             	lea    ecx,[eax+0x1]
c0011160:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011162:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011165:	89 de                	mov    esi,ebx
c0011167:	e8 04 f4 fe ff       	call   c0000570 <strlen>
c001116c:	83 c4 0c             	add    esp,0xc
c001116f:	40                   	inc    eax
c0011170:	50                   	push   eax
c0011171:	6a 00                	push   0x0
c0011173:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011177:	e8 74 f3 fe ff       	call   c00004f0 <memset>
c001117c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001117f:	e8 ec f3 fe ff       	call   c0000570 <strlen>
c0011184:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011188:	8d 48 01             	lea    ecx,[eax+0x1]
c001118b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001118d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011190:	40                   	inc    eax
c0011191:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011194:	c1 e0 03             	shl    eax,0x3
c0011197:	5a                   	pop    edx
c0011198:	59                   	pop    ecx
c0011199:	50                   	push   eax
c001119a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001119d:	e8 30 69 ff ff       	call   c0007ad2 <realloc>
c00111a2:	8d 74 24 18          	lea    esi,[esp+0x18]
c00111a6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00111a9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00111ac:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00111b0:	b9 08 00 00 00       	mov    ecx,0x8
c00111b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111b7:	83 c4 2c             	add    esp,0x2c
c00111ba:	5b                   	pop    ebx
c00111bb:	5e                   	pop    esi
c00111bc:	5f                   	pop    edi
c00111bd:	5d                   	pop    ebp
c00111be:	c3                   	ret    
c00111bf:	90                   	nop

c00111c0 <EnvVarContainer::deleteEnv(char const*)>:
c00111c0:	c3                   	ret    
c00111c1:	90                   	nop

c00111c2 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00111c2:	55                   	push   ebp
c00111c3:	57                   	push   edi
c00111c4:	56                   	push   esi
c00111c5:	53                   	push   ebx
c00111c6:	81 ec 38 01 00 00    	sub    esp,0x138
c00111cc:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00111d3:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00111da:	68 14 01 00 00       	push   0x114
c00111df:	e8 02 69 ff ff       	call   c0007ae6 <malloc>
c00111e4:	83 c4 0c             	add    esp,0xc
c00111e7:	89 c3                	mov    ebx,eax
c00111e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00111ec:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00111f3:	50                   	push   eax
c00111f4:	e8 83 a9 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c00111f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111fc:	e8 5d ac ff ff       	call   c000be5e <File::exists()>
c0011201:	83 c4 10             	add    esp,0x10
c0011204:	84 c0                	test   al,al
c0011206:	75 31                	jne    c0011239 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0011208:	50                   	push   eax
c0011209:	50                   	push   eax
c001120a:	6a 12                	push   0x12
c001120c:	53                   	push   ebx
c001120d:	e8 88 a9 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0011212:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011214:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0011217:	89 34 24             	mov    DWORD PTR [esp],esi
c001121a:	e8 51 f3 fe ff       	call   c0000570 <strlen>
c001121f:	5a                   	pop    edx
c0011220:	31 d2                	xor    edx,edx
c0011222:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0011226:	51                   	push   ecx
c0011227:	56                   	push   esi
c0011228:	52                   	push   edx
c0011229:	50                   	push   eax
c001122a:	53                   	push   ebx
c001122b:	ff d7                	call   edi
c001122d:	83 c4 14             	add    esp,0x14
c0011230:	53                   	push   ebx
c0011231:	e8 c2 a9 ff ff       	call   c000bbf8 <File::close()>
c0011236:	83 c4 10             	add    esp,0x10
c0011239:	56                   	push   esi
c001123a:	31 f6                	xor    esi,esi
c001123c:	68 00 01 00 00       	push   0x100
c0011241:	6a 00                	push   0x0
c0011243:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011247:	50                   	push   eax
c0011248:	e8 a3 f2 fe ff       	call   c00004f0 <memset>
c001124d:	5f                   	pop    edi
c001124e:	58                   	pop    eax
c001124f:	6a 01                	push   0x1
c0011251:	53                   	push   ebx
c0011252:	e8 43 a9 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0011257:	83 c4 10             	add    esp,0x10
c001125a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011262:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001126a:	83 ec 0c             	sub    esp,0xc
c001126d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001126f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0011273:	51                   	push   ecx
c0011274:	8d 54 24 23          	lea    edx,[esp+0x23]
c0011278:	52                   	push   edx
c0011279:	6a 00                	push   0x0
c001127b:	6a 01                	push   0x1
c001127d:	53                   	push   ebx
c001127e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011281:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0011286:	83 c4 20             	add    esp,0x20
c0011289:	89 c2                	mov    edx,eax
c001128b:	85 c0                	test   eax,eax
c001128d:	0f 84 36 01 00 00    	je     c00113c9 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0011293:	83 f8 0d             	cmp    eax,0xd
c0011296:	0f 84 22 01 00 00    	je     c00113be <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001129c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00112a1:	0f 84 f0 00 00 00    	je     c0011397 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c00112a7:	83 f8 0a             	cmp    eax,0xa
c00112aa:	74 13                	je     c00112bf <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00112ac:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00112b1:	74 0c                	je     c00112bf <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00112b3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00112b9:	0f 8e f6 00 00 00    	jle    c00113b5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00112bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00112c3:	83 ec 0c             	sub    esp,0xc
c00112c6:	8d 78 01             	lea    edi,[eax+0x1]
c00112c9:	57                   	push   edi
c00112ca:	e8 17 68 ff ff       	call   c0007ae6 <malloc>
c00112cf:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00112d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00112d7:	8d 56 04             	lea    edx,[esi+0x4]
c00112da:	89 14 24             	mov    DWORD PTR [esp],edx
c00112dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00112e1:	e8 00 68 ff ff       	call   c0007ae6 <malloc>
c00112e6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00112ea:	83 c4 0c             	add    esp,0xc
c00112ed:	57                   	push   edi
c00112ee:	6a 00                	push   0x0
c00112f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00112f4:	e8 f7 f1 fe ff       	call   c00004f0 <memset>
c00112f9:	8d 74 24 30          	lea    esi,[esp+0x30]
c00112fd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011301:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011305:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011307:	83 c4 0c             	add    esp,0xc
c001130a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001130e:	52                   	push   edx
c001130f:	6a 00                	push   0x0
c0011311:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011315:	e8 d6 f1 fe ff       	call   c00004f0 <memset>
c001131a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001131e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0011322:	89 34 24             	mov    DWORD PTR [esp],esi
c0011325:	e8 46 f2 fe ff       	call   c0000570 <strlen>
c001132a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001132e:	89 c1                	mov    ecx,eax
c0011330:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011332:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011335:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0011338:	40                   	inc    eax
c0011339:	83 c4 10             	add    esp,0x10
c001133c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001133f:	85 d2                	test   edx,edx
c0011341:	75 0c                	jne    c001134f <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0011343:	83 ec 0c             	sub    esp,0xc
c0011346:	6a 08                	push   0x8
c0011348:	e8 99 67 ff ff       	call   c0007ae6 <malloc>
c001134d:	eb 0c                	jmp    c001135b <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001134f:	c1 e0 03             	shl    eax,0x3
c0011352:	51                   	push   ecx
c0011353:	51                   	push   ecx
c0011354:	50                   	push   eax
c0011355:	52                   	push   edx
c0011356:	e8 77 67 ff ff       	call   c0007ad2 <realloc>
c001135b:	83 c4 10             	add    esp,0x10
c001135e:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011361:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011364:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0011367:	8d 74 24 18          	lea    esi,[esp+0x18]
c001136b:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001136f:	b9 08 00 00 00       	mov    ecx,0x8
c0011374:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011376:	31 f6                	xor    esi,esi
c0011378:	50                   	push   eax
c0011379:	68 00 01 00 00       	push   0x100
c001137e:	6a 00                	push   0x0
c0011380:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011384:	50                   	push   eax
c0011385:	e8 66 f1 fe ff       	call   c00004f0 <memset>
c001138a:	83 c4 10             	add    esp,0x10
c001138d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011395:	eb 27                	jmp    c00113be <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011397:	83 f8 3d             	cmp    eax,0x3d
c001139a:	74 1e                	je     c00113ba <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c001139c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00113a2:	7f 07                	jg     c00113ab <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c00113a4:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c00113a8:	46                   	inc    esi
c00113a9:	eb 13                	jmp    c00113be <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00113ab:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00113b3:	eb 09                	jmp    c00113be <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00113b5:	83 f8 3d             	cmp    eax,0x3d
c00113b8:	75 ea                	jne    c00113a4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00113ba:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00113be:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00113c3:	0f 85 99 fe ff ff    	jne    c0011262 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00113c9:	83 ec 0c             	sub    esp,0xc
c00113cc:	53                   	push   ebx
c00113cd:	e8 26 a8 ff ff       	call   c000bbf8 <File::close()>
c00113d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00113d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00113d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00113da:	81 c4 3c 01 00 00    	add    esp,0x13c
c00113e0:	5b                   	pop    ebx
c00113e1:	5e                   	pop    esi
c00113e2:	5f                   	pop    edi
c00113e3:	5d                   	pop    ebp
c00113e4:	c3                   	ret    
c00113e5:	90                   	nop

c00113e6 <EnvVarContainer::__loadSystem()>:
c00113e6:	83 ec 10             	sub    esp,0x10
c00113e9:	68 e0 3e 02 c0       	push   0xc0023ee0
c00113ee:	68 bc 25 02 c0       	push   0xc00225bc
c00113f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113f7:	e8 c6 fd ff ff       	call   c00111c2 <EnvVarContainer::loadFrom(char const*, char const*)>
c00113fc:	83 c4 1c             	add    esp,0x1c
c00113ff:	c3                   	ret    

c0011400 <EnvVarContainer::__loadUser()>:
c0011400:	c3                   	ret    
c0011401:	90                   	nop

c0011402 <EnvVarContainer::EnvVarContainer(Process*)>:
c0011402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011406:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011410:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011414:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011417:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001141b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011422:	90                   	nop
c0011423:	c3                   	ret    

c0011424 <EnvVarContainer::~EnvVarContainer()>:
c0011424:	83 ec 0c             	sub    esp,0xc
c0011427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001142b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001142e:	85 c0                	test   eax,eax
c0011430:	74 1d                	je     c001144f <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011436:	8b 00                	mov    eax,DWORD PTR [eax]
c0011438:	85 c0                	test   eax,eax
c001143a:	74 13                	je     c001144f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001143c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011440:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011443:	83 ec 0c             	sub    esp,0xc
c0011446:	50                   	push   eax
c0011447:	e8 aa 66 ff ff       	call   c0007af6 <free>
c001144c:	83 c4 10             	add    esp,0x10
c001144f:	90                   	nop
c0011450:	83 c4 0c             	add    esp,0xc
c0011453:	c3                   	ret    

c0011454 <KeGetEnv(Process*, char const*)>:
c0011454:	53                   	push   ebx
c0011455:	83 ec 08             	sub    esp,0x8
c0011458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001145c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011460:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c0011466:	74 04                	je     c001146c <KeGetEnv(Process*, char const*)+0x18>
c0011468:	85 c0                	test   eax,eax
c001146a:	75 0b                	jne    c0011477 <KeGetEnv(Process*, char const*)+0x23>
c001146c:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011471:	85 c0                	test   eax,eax
c0011473:	75 19                	jne    c001148e <KeGetEnv(Process*, char const*)+0x3a>
c0011475:	eb 27                	jmp    c001149e <KeGetEnv(Process*, char const*)+0x4a>
c0011477:	52                   	push   edx
c0011478:	52                   	push   edx
c0011479:	53                   	push   ebx
c001147a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011480:	e8 3b fc ff ff       	call   c00110c0 <EnvVarContainer::getEnv(char const*)>
c0011485:	83 c4 10             	add    esp,0x10
c0011488:	85 c0                	test   eax,eax
c001148a:	75 28                	jne    c00114b4 <KeGetEnv(Process*, char const*)+0x60>
c001148c:	eb de                	jmp    c001146c <KeGetEnv(Process*, char const*)+0x18>
c001148e:	52                   	push   edx
c001148f:	52                   	push   edx
c0011490:	53                   	push   ebx
c0011491:	50                   	push   eax
c0011492:	e8 29 fc ff ff       	call   c00110c0 <EnvVarContainer::getEnv(char const*)>
c0011497:	83 c4 10             	add    esp,0x10
c001149a:	85 c0                	test   eax,eax
c001149c:	75 16                	jne    c00114b4 <KeGetEnv(Process*, char const*)+0x60>
c001149e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00114a2:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00114a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00114ab:	83 c4 08             	add    esp,0x8
c00114ae:	5b                   	pop    ebx
c00114af:	e9 0c fc ff ff       	jmp    c00110c0 <EnvVarContainer::getEnv(char const*)>
c00114b4:	83 c4 08             	add    esp,0x8
c00114b7:	5b                   	pop    ebx
c00114b8:	c3                   	ret    

c00114b9 <KeSetEnvSystem(char const*, char const*)>:
c00114b9:	83 ec 10             	sub    esp,0x10
c00114bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00114c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00114c4:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c00114ca:	e8 2f fc ff ff       	call   c00110fe <EnvVarContainer::setEnv(char const*, char const*)>
c00114cf:	83 c4 1c             	add    esp,0x1c
c00114d2:	c3                   	ret    

c00114d3 <KeSetEnvUser(char const*, char const*)>:
c00114d3:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00114d8:	85 c0                	test   eax,eax
c00114da:	74 15                	je     c00114f1 <KeSetEnvUser(char const*, char const*)+0x1e>
c00114dc:	83 ec 10             	sub    esp,0x10
c00114df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00114e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00114e7:	50                   	push   eax
c00114e8:	e8 11 fc ff ff       	call   c00110fe <EnvVarContainer::setEnv(char const*, char const*)>
c00114ed:	83 c4 1c             	add    esp,0x1c
c00114f0:	c3                   	ret    
c00114f1:	c3                   	ret    

c00114f2 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00114f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114f6:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00114fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011500:	e9 f9 fb ff ff       	jmp    c00110fe <EnvVarContainer::setEnv(char const*, char const*)>

c0011505 <KeDeleteEnvSystem(char const*)>:
c0011505:	c3                   	ret    

c0011506 <KeDeleteEnvUser(char const*)>:
c0011506:	c3                   	ret    

c0011507 <KeDeleteEnvProcess(Process*, char const*)>:
c0011507:	c3                   	ret    

c0011508 <KeNewProcessEnv(Process*)>:
c0011508:	83 ec 28             	sub    esp,0x28
c001150b:	6a 0c                	push   0xc
c001150d:	e8 d4 65 ff ff       	call   c0007ae6 <malloc>
c0011512:	5a                   	pop    edx
c0011513:	59                   	pop    ecx
c0011514:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011518:	50                   	push   eax
c0011519:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001151d:	e8 e0 fe ff ff       	call   c0011402 <EnvVarContainer::EnvVarContainer(Process*)>
c0011522:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011526:	83 c4 2c             	add    esp,0x2c
c0011529:	c3                   	ret    

c001152a <KeCopyProcessEnv(Process*, Process*)>:
c001152a:	57                   	push   edi
c001152b:	56                   	push   esi
c001152c:	53                   	push   ebx
c001152d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011531:	83 ec 0c             	sub    esp,0xc
c0011534:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001153a:	6a 0c                	push   0xc
c001153c:	e8 a5 65 ff ff       	call   c0007ae6 <malloc>
c0011541:	89 c3                	mov    ebx,eax
c0011543:	58                   	pop    eax
c0011544:	5a                   	pop    edx
c0011545:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011549:	53                   	push   ebx
c001154a:	e8 b3 fe ff ff       	call   c0011402 <EnvVarContainer::EnvVarContainer(Process*)>
c001154f:	8b 07                	mov    eax,DWORD PTR [edi]
c0011551:	89 03                	mov    DWORD PTR [ebx],eax
c0011553:	c1 e0 03             	shl    eax,0x3
c0011556:	89 04 24             	mov    DWORD PTR [esp],eax
c0011559:	e8 88 65 ff ff       	call   c0007ae6 <malloc>
c001155e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011561:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011563:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011566:	c1 e1 03             	shl    ecx,0x3
c0011569:	89 c7                	mov    edi,eax
c001156b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001156d:	83 c4 10             	add    esp,0x10
c0011570:	89 d8                	mov    eax,ebx
c0011572:	5b                   	pop    ebx
c0011573:	5e                   	pop    esi
c0011574:	5f                   	pop    edi
c0011575:	c3                   	ret    

c0011576 <KeLoadSystemEnv()>:
c0011576:	53                   	push   ebx
c0011577:	83 ec 14             	sub    esp,0x14
c001157a:	6a 0c                	push   0xc
c001157c:	e8 65 65 ff ff       	call   c0007ae6 <malloc>
c0011581:	89 c3                	mov    ebx,eax
c0011583:	58                   	pop    eax
c0011584:	5a                   	pop    edx
c0011585:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001158b:	53                   	push   ebx
c001158c:	e8 71 fe ff ff       	call   c0011402 <EnvVarContainer::EnvVarContainer(Process*)>
c0011591:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011594:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c001159a:	e8 47 fe ff ff       	call   c00113e6 <EnvVarContainer::__loadSystem()>
c001159f:	83 c4 18             	add    esp,0x18
c00115a2:	5b                   	pop    ebx
c00115a3:	c3                   	ret    

c00115a4 <KeLoadUserEnv()>:
c00115a4:	53                   	push   ebx
c00115a5:	83 ec 14             	sub    esp,0x14
c00115a8:	6a 0c                	push   0xc
c00115aa:	e8 37 65 ff ff       	call   c0007ae6 <malloc>
c00115af:	89 c3                	mov    ebx,eax
c00115b1:	58                   	pop    eax
c00115b2:	5a                   	pop    edx
c00115b3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00115b9:	53                   	push   ebx
c00115ba:	e8 43 fe ff ff       	call   c0011402 <EnvVarContainer::EnvVarContainer(Process*)>
c00115bf:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c00115c5:	83 c4 18             	add    esp,0x18
c00115c8:	5b                   	pop    ebx
c00115c9:	c3                   	ret    

c00115ca <KeFlushEnv()>:
c00115ca:	c3                   	ret    

c00115cb <KeGetProcessTotalEnvCount(Process*)>:
c00115cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115cf:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c00115d5:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00115db:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00115e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00115e2:	03 01                	add    eax,DWORD PTR [ecx]
c00115e4:	85 d2                	test   edx,edx
c00115e6:	74 02                	je     c00115ea <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00115e8:	03 02                	add    eax,DWORD PTR [edx]
c00115ea:	c3                   	ret    

c00115eb <KeGetProcessEnvPair(Process*, int)>:
c00115eb:	57                   	push   edi
c00115ec:	56                   	push   esi
c00115ed:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c00115f3:	53                   	push   ebx
c00115f4:	85 f6                	test   esi,esi
c00115f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00115fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115fe:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011604:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011608:	8b 01                	mov    eax,DWORD PTR [ecx]
c001160a:	75 16                	jne    c0011622 <KeGetProcessEnvPair(Process*, int)+0x37>
c001160c:	39 c2                	cmp    edx,eax
c001160e:	7c 16                	jl     c0011626 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011610:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c0011616:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011618:	01 c6                	add    esi,eax
c001161a:	39 d6                	cmp    esi,edx
c001161c:	7e 3c                	jle    c001165a <KeGetProcessEnvPair(Process*, int)+0x6f>
c001161e:	29 c2                	sub    edx,eax
c0011620:	eb 04                	jmp    c0011626 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011622:	39 c2                	cmp    edx,eax
c0011624:	7d 05                	jge    c001162b <KeGetProcessEnvPair(Process*, int)+0x40>
c0011626:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011629:	eb 20                	jmp    c001164b <KeGetProcessEnvPair(Process*, int)+0x60>
c001162b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001162d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011630:	39 d1                	cmp    ecx,edx
c0011632:	7e 04                	jle    c0011638 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011634:	29 c2                	sub    edx,eax
c0011636:	eb 10                	jmp    c0011648 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011638:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c001163e:	03 0e                	add    ecx,DWORD PTR [esi]
c0011640:	39 d1                	cmp    ecx,edx
c0011642:	7e 16                	jle    c001165a <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011644:	29 c2                	sub    edx,eax
c0011646:	29 fa                	sub    edx,edi
c0011648:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001164b:	8d 14 d0             	lea    edx,[eax+edx*8]
c001164e:	8b 02                	mov    eax,DWORD PTR [edx]
c0011650:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011653:	89 03                	mov    DWORD PTR [ebx],eax
c0011655:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011658:	eb 1d                	jmp    c0011677 <KeGetProcessEnvPair(Process*, int)+0x8c>
c001165a:	83 ec 0c             	sub    esp,0xc
c001165d:	68 de 25 02 c0       	push   0xc00225de
c0011662:	e8 ac 00 00 00       	call   c0011713 <KePanic(char const*)>
c0011667:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001166d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011674:	83 c4 10             	add    esp,0x10
c0011677:	89 d8                	mov    eax,ebx
c0011679:	5b                   	pop    ebx
c001167a:	5e                   	pop    esi
c001167b:	5f                   	pop    edi
c001167c:	c2 04 00             	ret    0x4

c001167f <CPU::current()>:
c001167f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011684:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001168a:	c3                   	ret    

c001168b <operator new(unsigned long)>:
c001168b:	e9 56 64 ff ff       	jmp    c0007ae6 <malloc>

c0011690 <operator delete(void*)>:
c0011690:	e9 71 64 ff ff       	jmp    c0007b06 <rfree>

c0011695 <disableIRQs()>:
c0011695:	fa                   	cli    
c0011696:	c3                   	ret    

c0011697 <enableIRQs()>:
c0011697:	fb                   	sti    
c0011698:	c3                   	ret    

c0011699 <lockScheduler()>:
c0011699:	fa                   	cli    
c001169a:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00116a0:	c3                   	ret    

c00116a1 <unlockScheduler()>:
c00116a1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00116a6:	48                   	dec    eax
c00116a7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00116ac:	75 01                	jne    c00116af <unlockScheduler()+0xe>
c00116ae:	fb                   	sti    
c00116af:	c3                   	ret    

c00116b0 <lockStuff()>:
c00116b0:	fa                   	cli    
c00116b1:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00116b7:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c00116bd:	c3                   	ret    

c00116be <unlockStuff()>:
c00116be:	83 ec 0c             	sub    esp,0xc
c00116c1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00116c6:	48                   	dec    eax
c00116c7:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00116cc:	75 18                	jne    c00116e6 <unlockStuff()+0x28>
c00116ce:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c00116d5:	74 0f                	je     c00116e6 <unlockStuff()+0x28>
c00116d7:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00116e1:	e8 12 4b 00 00       	call   c00161f8 <schedule()>
c00116e6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00116eb:	48                   	dec    eax
c00116ec:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00116f1:	75 01                	jne    c00116f4 <unlockStuff()+0x36>
c00116f3:	fb                   	sti    
c00116f4:	83 c4 0c             	add    esp,0xc
c00116f7:	c3                   	ret    

c00116f8 <Virt::getAKernelVAS()>:
c00116f8:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c00116fd:	c3                   	ret    

c00116fe <__not_memcpy>:
c00116fe:	57                   	push   edi
c00116ff:	56                   	push   esi
c0011700:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011704:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011708:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001170c:	89 c7                	mov    edi,eax
c001170e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011710:	5e                   	pop    esi
c0011711:	5f                   	pop    edi
c0011712:	c3                   	ret    

c0011713 <KePanic(char const*)>:
c0011713:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c001171a:	e9 7f 6a 00 00       	jmp    c001819e <HalPanic(char const*)>

c001171f <KePowerThread(void*)>:
c001171f:	83 ec 0c             	sub    esp,0xc
c0011722:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011727:	48                   	dec    eax
c0011728:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001172d:	75 01                	jne    c0011730 <KePowerThread(void*)+0x11>
c001172f:	fb                   	sti    
c0011730:	83 ec 0c             	sub    esp,0xc
c0011733:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c001173a:	6a 0a                	push   0xa
c001173c:	e8 fb 4d 00 00       	call   c001653c <sleep(unsigned int)>
c0011741:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c0011748:	83 c4 10             	add    esp,0x10
c001174b:	eb e3                	jmp    c0011730 <KePowerThread(void*)+0x11>

c001174d <KeChangePowerSettings(PowerSettings)>:
c001174d:	57                   	push   edi
c001174e:	b9 09 00 00 00       	mov    ecx,0x9
c0011753:	56                   	push   esi
c0011754:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c0011759:	fc                   	cld    
c001175a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001175e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011760:	5e                   	pop    esi
c0011761:	5f                   	pop    edi
c0011762:	c3                   	ret    

c0011763 <KeUserIOReceived()>:
c0011763:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c001176d:	c3                   	ret    

c001176e <KeHandlePowerButton()>:
c001176e:	83 ec 0c             	sub    esp,0xc
c0011771:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c0011776:	83 f8 02             	cmp    eax,0x2
c0011779:	75 10                	jne    c001178b <KeHandlePowerButton()+0x1d>
c001177b:	83 ec 0c             	sub    esp,0xc
c001177e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011784:	e8 cf 59 ff ff       	call   c0007158 <Computer::shutdown()>
c0011789:	eb 11                	jmp    c001179c <KeHandlePowerButton()+0x2e>
c001178b:	48                   	dec    eax
c001178c:	75 11                	jne    c001179f <KeHandlePowerButton()+0x31>
c001178e:	83 ec 0c             	sub    esp,0xc
c0011791:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011797:	e8 ec 59 ff ff       	call   c0007188 <Computer::sleep()>
c001179c:	83 c4 10             	add    esp,0x10
c001179f:	83 c4 0c             	add    esp,0xc
c00117a2:	c3                   	ret    

c00117a3 <KeHandleSleepButton()>:
c00117a3:	83 ec 0c             	sub    esp,0xc
c00117a6:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c00117ab:	83 f8 02             	cmp    eax,0x2
c00117ae:	75 10                	jne    c00117c0 <KeHandleSleepButton()+0x1d>
c00117b0:	83 ec 0c             	sub    esp,0xc
c00117b3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00117b9:	e8 9a 59 ff ff       	call   c0007158 <Computer::shutdown()>
c00117be:	eb 11                	jmp    c00117d1 <KeHandleSleepButton()+0x2e>
c00117c0:	48                   	dec    eax
c00117c1:	75 11                	jne    c00117d4 <KeHandleSleepButton()+0x31>
c00117c3:	83 ec 0c             	sub    esp,0xc
c00117c6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00117cc:	e8 b7 59 ff ff       	call   c0007188 <Computer::sleep()>
c00117d1:	83 c4 10             	add    esp,0x10
c00117d4:	83 c4 0c             	add    esp,0xc
c00117d7:	c3                   	ret    

c00117d8 <KeSetupPowerManager()>:
c00117d8:	83 ec 0c             	sub    esp,0xc
c00117db:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00117e5:	68 f0 00 00 00       	push   0xf0
c00117ea:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00117f1:	6a 00                	push   0x0
c00117f3:	68 1f 17 01 c0       	push   0xc001171f
c00117f8:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00117fe:	e8 a5 47 00 00       	call   c0015fa8 <Process::createThread(void (*)(void*), void*, int)>
c0011803:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c001180d:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c0011817:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c0011821:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c001182b:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c0011835:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c001183f:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c0011849:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c0011853:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c001185d:	83 c4 1c             	add    esp,0x1c
c0011860:	c3                   	ret    

c0011861 <KeRand()>:
c0011861:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c001186b:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c0011875:	53                   	push   ebx
c0011876:	01 c1                	add    ecx,eax
c0011878:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001187d:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c0011883:	01 ca                	add    edx,ecx
c0011885:	05 ef 04 b5 00       	add    eax,0xb504ef
c001188a:	83 d2 00             	adc    edx,0x0
c001188d:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011892:	0f b7 da             	movzx  ebx,dx
c0011895:	89 da                	mov    edx,ebx
c0011897:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c001189d:	0f ac d0 0e          	shrd   eax,edx,0xe
c00118a1:	5b                   	pop    ebx
c00118a2:	c3                   	ret    

c00118a3 <KeSeedRand(unsigned int)>:
c00118a3:	53                   	push   ebx
c00118a4:	83 ec 08             	sub    esp,0x8
c00118a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118ab:	e8 0d 6c 00 00       	call   c00184bd <HalGetRand()>
c00118b0:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c00118ba:	31 d8                	xor    eax,ebx
c00118bc:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00118c1:	e8 9b ff ff ff       	call   c0011861 <KeRand()>
c00118c6:	83 c4 08             	add    esp,0x8
c00118c9:	5b                   	pop    ebx
c00118ca:	eb 95                	jmp    c0011861 <KeRand()>

c00118cc <KeInitRand()>:
c00118cc:	83 ec 0c             	sub    esp,0xc
c00118cf:	e8 de 69 00 00       	call   c00182b2 <HalQueryPerformanceCounter()>
c00118d4:	0f 20 da             	mov    edx,cr3
c00118d7:	0f 22 da             	mov    cr3,edx
c00118da:	0f 20 da             	mov    edx,cr3
c00118dd:	0f 22 da             	mov    cr3,edx
c00118e0:	0f 20 da             	mov    edx,cr3
c00118e3:	0f 22 da             	mov    cr3,edx
c00118e6:	0f 20 da             	mov    edx,cr3
c00118e9:	0f 22 da             	mov    cr3,edx
c00118ec:	83 ec 0c             	sub    esp,0xc
c00118ef:	35 03 8a 95 38       	xor    eax,0x38958a03
c00118f4:	50                   	push   eax
c00118f5:	e8 a9 ff ff ff       	call   c00118a3 <KeSeedRand(unsigned int)>
c00118fa:	83 c4 1c             	add    esp,0x1c
c00118fd:	c3                   	ret    
c00118fe:	66 90                	xchg   ax,ax

c0011900 <KeResolveCompatibilitySymbol(char*)>:
c0011900:	83 ec 0c             	sub    esp,0xc
c0011903:	83 ec 08             	sub    esp,0x8
c0011906:	68 f8 25 02 c0       	push   0xc00225f8
c001190b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001190f:	e8 3c ee fe ff       	call   c0000750 <strcmp>
c0011914:	83 c4 10             	add    esp,0x10
c0011917:	85 c0                	test   eax,eax
c0011919:	0f 94 c0             	sete   al
c001191c:	0f b6 c0             	movzx  eax,al
c001191f:	85 c0                	test   eax,eax
c0011921:	74 0d                	je     c0011930 <KeResolveCompatibilitySymbol(char*)+0x30>
c0011923:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c0011928:	e9 8b 01 00 00       	jmp    c0011ab8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001192d:	8d 76 00             	lea    esi,[esi+0x0]
c0011930:	83 ec 08             	sub    esp,0x8
c0011933:	68 01 26 02 c0       	push   0xc0022601
c0011938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001193c:	e8 0f ee fe ff       	call   c0000750 <strcmp>
c0011941:	83 c4 10             	add    esp,0x10
c0011944:	85 c0                	test   eax,eax
c0011946:	0f 94 c0             	sete   al
c0011949:	0f b6 c0             	movzx  eax,al
c001194c:	85 c0                	test   eax,eax
c001194e:	74 0c                	je     c001195c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011950:	b8 70 f8 01 c0       	mov    eax,0xc001f870
c0011955:	e9 5e 01 00 00       	jmp    c0011ab8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001195a:	66 90                	xchg   ax,ax
c001195c:	83 ec 08             	sub    esp,0x8
c001195f:	68 0b 26 02 c0       	push   0xc002260b
c0011964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011968:	e8 e3 ed fe ff       	call   c0000750 <strcmp>
c001196d:	83 c4 10             	add    esp,0x10
c0011970:	85 c0                	test   eax,eax
c0011972:	0f 94 c0             	sete   al
c0011975:	0f b6 c0             	movzx  eax,al
c0011978:	85 c0                	test   eax,eax
c001197a:	74 0c                	je     c0011988 <KeResolveCompatibilitySymbol(char*)+0x88>
c001197c:	b8 a4 f5 01 c0       	mov    eax,0xc001f5a4
c0011981:	e9 32 01 00 00       	jmp    c0011ab8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011986:	66 90                	xchg   ax,ax
c0011988:	83 ec 08             	sub    esp,0x8
c001198b:	68 14 26 02 c0       	push   0xc0022614
c0011990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011994:	e8 b7 ed fe ff       	call   c0000750 <strcmp>
c0011999:	83 c4 10             	add    esp,0x10
c001199c:	85 c0                	test   eax,eax
c001199e:	0f 94 c0             	sete   al
c00119a1:	0f b6 c0             	movzx  eax,al
c00119a4:	85 c0                	test   eax,eax
c00119a6:	74 0c                	je     c00119b4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00119a8:	b8 13 17 01 c0       	mov    eax,0xc0011713
c00119ad:	e9 06 01 00 00       	jmp    c0011ab8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119b2:	66 90                	xchg   ax,ax
c00119b4:	83 ec 08             	sub    esp,0x8
c00119b7:	68 27 26 02 c0       	push   0xc0022627
c00119bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c0:	e8 8b ed fe ff       	call   c0000750 <strcmp>
c00119c5:	83 c4 10             	add    esp,0x10
c00119c8:	85 c0                	test   eax,eax
c00119ca:	0f 94 c0             	sete   al
c00119cd:	0f b6 c0             	movzx  eax,al
c00119d0:	85 c0                	test   eax,eax
c00119d2:	74 0c                	je     c00119e0 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00119d4:	b8 13 10 01 c0       	mov    eax,0xc0011013
c00119d9:	e9 da 00 00 00       	jmp    c0011ab8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119de:	66 90                	xchg   ax,ax
c00119e0:	83 ec 08             	sub    esp,0x8
c00119e3:	68 44 26 02 c0       	push   0xc0022644
c00119e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119ec:	e8 5f ed fe ff       	call   c0000750 <strcmp>
c00119f1:	83 c4 10             	add    esp,0x10
c00119f4:	85 c0                	test   eax,eax
c00119f6:	0f 94 c0             	sete   al
c00119f9:	0f b6 c0             	movzx  eax,al
c00119fc:	85 c0                	test   eax,eax
c00119fe:	74 0c                	je     c0011a0c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011a00:	b8 70 f9 01 c0       	mov    eax,0xc001f970
c0011a05:	e9 ae 00 00 00       	jmp    c0011ab8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a0a:	66 90                	xchg   ax,ax
c0011a0c:	83 ec 08             	sub    esp,0x8
c0011a0f:	68 4e 26 02 c0       	push   0xc002264e
c0011a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a18:	e8 33 ed fe ff       	call   c0000750 <strcmp>
c0011a1d:	83 c4 10             	add    esp,0x10
c0011a20:	85 c0                	test   eax,eax
c0011a22:	0f 94 c0             	sete   al
c0011a25:	0f b6 c0             	movzx  eax,al
c0011a28:	85 c0                	test   eax,eax
c0011a2a:	74 0c                	je     c0011a38 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011a2c:	b8 f0 f6 01 c0       	mov    eax,0xc001f6f0
c0011a31:	e9 82 00 00 00       	jmp    c0011ab8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a36:	66 90                	xchg   ax,ax
c0011a38:	83 ec 08             	sub    esp,0x8
c0011a3b:	68 57 26 02 c0       	push   0xc0022657
c0011a40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a44:	e8 07 ed fe ff       	call   c0000750 <strcmp>
c0011a49:	83 c4 10             	add    esp,0x10
c0011a4c:	85 c0                	test   eax,eax
c0011a4e:	0f 94 c0             	sete   al
c0011a51:	0f b6 c0             	movzx  eax,al
c0011a54:	85 c0                	test   eax,eax
c0011a56:	74 08                	je     c0011a60 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011a58:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011a5d:	eb 59                	jmp    c0011ab8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a5f:	90                   	nop
c0011a60:	83 ec 08             	sub    esp,0x8
c0011a63:	68 6f 26 02 c0       	push   0xc002266f
c0011a68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a6c:	e8 df ec fe ff       	call   c0000750 <strcmp>
c0011a71:	83 c4 10             	add    esp,0x10
c0011a74:	85 c0                	test   eax,eax
c0011a76:	0f 94 c0             	sete   al
c0011a79:	0f b6 c0             	movzx  eax,al
c0011a7c:	85 c0                	test   eax,eax
c0011a7e:	74 08                	je     c0011a88 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011a80:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011a85:	eb 31                	jmp    c0011ab8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a87:	90                   	nop
c0011a88:	83 ec 08             	sub    esp,0x8
c0011a8b:	68 7c 26 02 c0       	push   0xc002267c
c0011a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a94:	e8 b7 ec fe ff       	call   c0000750 <strcmp>
c0011a99:	83 c4 10             	add    esp,0x10
c0011a9c:	85 c0                	test   eax,eax
c0011a9e:	0f 94 c0             	sete   al
c0011aa1:	0f b6 c0             	movzx  eax,al
c0011aa4:	85 c0                	test   eax,eax
c0011aa6:	74 08                	je     c0011ab0 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011aa8:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c0011aad:	eb 09                	jmp    c0011ab8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011aaf:	90                   	nop
c0011ab0:	b8 00 00 00 00       	mov    eax,0x0
c0011ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0011ab8:	83 c4 0c             	add    esp,0xc
c0011abb:	c3                   	ret    

c0011abc <KiSigKill(int)>:
c0011abc:	83 ec 0c             	sub    esp,0xc
c0011abf:	6a 00                	push   0x0
c0011ac1:	6a 00                	push   0x0
c0011ac3:	6a ff                	push   0xffffffff
c0011ac5:	6a 01                	push   0x1
c0011ac7:	e8 86 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011acc:	83 c4 1c             	add    esp,0x1c
c0011acf:	c3                   	ret    

c0011ad0 <KiDefaultSignalHandlerIgnore(int)>:
c0011ad0:	c3                   	ret    

c0011ad1 <KiDefaultSignalHandlerPause(int)>:
c0011ad1:	57                   	push   edi
c0011ad2:	b9 07 00 00 00       	mov    ecx,0x7
c0011ad7:	56                   	push   esi
c0011ad8:	be c5 26 02 c0       	mov    esi,0xc00226c5
c0011add:	83 ec 24             	sub    esp,0x24
c0011ae0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011ae4:	fc                   	cld    
c0011ae5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011ae7:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011aeb:	50                   	push   eax
c0011aec:	6a 00                	push   0x0
c0011aee:	6a 00                	push   0x0
c0011af0:	6a 27                	push   0x27
c0011af2:	e8 5b 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011af7:	83 c4 34             	add    esp,0x34
c0011afa:	5e                   	pop    esi
c0011afb:	5f                   	pop    edi
c0011afc:	c3                   	ret    

c0011afd <KiDefaultSignalHandlerResume(int)>:
c0011afd:	57                   	push   edi
c0011afe:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011b03:	56                   	push   esi
c0011b04:	be e1 26 02 c0       	mov    esi,0xc00226e1
c0011b09:	83 ec 24             	sub    esp,0x24
c0011b0c:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011b10:	fc                   	cld    
c0011b11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b13:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011b17:	50                   	push   eax
c0011b18:	6a 00                	push   0x0
c0011b1a:	6a 00                	push   0x0
c0011b1c:	6a 27                	push   0x27
c0011b1e:	e8 2f 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011b23:	83 c4 34             	add    esp,0x34
c0011b26:	5e                   	pop    esi
c0011b27:	5f                   	pop    edi
c0011b28:	c3                   	ret    

c0011b29 <KeDeinitSignals(SigHandlerBlock*)>:
c0011b29:	e9 c8 5f ff ff       	jmp    c0007af6 <free>

c0011b2e <KeInitSignals()>:
c0011b2e:	53                   	push   ebx
c0011b2f:	83 ec 14             	sub    esp,0x14
c0011b32:	68 c8 00 00 00       	push   0xc8
c0011b37:	e8 aa 5f ff ff       	call   c0007ae6 <malloc>
c0011b3c:	83 c4 0c             	add    esp,0xc
c0011b3f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011b49:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011b53:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011b5a:	89 c3                	mov    ebx,eax
c0011b5c:	6a 20                	push   0x20
c0011b5e:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011b64:	6a 00                	push   0x0
c0011b66:	50                   	push   eax
c0011b67:	e8 84 e9 fe ff       	call   c00004f0 <memset>
c0011b6c:	83 c4 0c             	add    esp,0xc
c0011b6f:	6a 44                	push   0x44
c0011b71:	6a 00                	push   0x0
c0011b73:	53                   	push   ebx
c0011b74:	e8 77 e9 fe ff       	call   c00004f0 <memset>
c0011b79:	89 d8                	mov    eax,ebx
c0011b7b:	83 c4 18             	add    esp,0x18
c0011b7e:	5b                   	pop    ebx
c0011b7f:	c3                   	ret    

c0011b80 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011b80:	53                   	push   ebx
c0011b81:	b8 01 00 00 00       	mov    eax,0x1
c0011b86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011b8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b8e:	83 f9 10             	cmp    ecx,0x10
c0011b91:	7f 21                	jg     c0011bb4 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011b93:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b9a:	89 03                	mov    DWORD PTR [ebx],eax
c0011b9c:	b8 01 00 00 00       	mov    eax,0x1
c0011ba1:	d3 e0                	shl    eax,cl
c0011ba3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011ba7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011baa:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011bb2:	31 c0                	xor    eax,eax
c0011bb4:	5b                   	pop    ebx
c0011bb5:	c3                   	ret    

c0011bb6 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011bb6:	55                   	push   ebp
c0011bb7:	57                   	push   edi
c0011bb8:	bf 08 00 00 00       	mov    edi,0x8
c0011bbd:	56                   	push   esi
c0011bbe:	53                   	push   ebx
c0011bbf:	83 ec 18             	sub    esp,0x18
c0011bc2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011bc6:	68 fe 26 02 c0       	push   0xc00226fe
c0011bcb:	e8 a5 8d ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0011bd0:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011bd7:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011bdd:	83 c4 10             	add    esp,0x10
c0011be0:	31 c9                	xor    ecx,ecx
c0011be2:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011be6:	99                   	cdq    
c0011be7:	f7 ff                	idiv   edi
c0011be9:	8d 42 24             	lea    eax,[edx+0x24]
c0011bec:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011bf0:	85 f6                	test   esi,esi
c0011bf2:	75 1a                	jne    c0011c0e <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011bf4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011bf8:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011bfc:	50                   	push   eax
c0011bfd:	50                   	push   eax
c0011bfe:	52                   	push   edx
c0011bff:	68 0f 27 02 c0       	push   0xc002270f
c0011c04:	e8 6c 8d ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0011c09:	83 c4 10             	add    esp,0x10
c0011c0c:	eb 1b                	jmp    c0011c29 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011c0e:	41                   	inc    ecx
c0011c0f:	83 f9 08             	cmp    ecx,0x8
c0011c12:	75 ce                	jne    c0011be2 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011c14:	83 ec 0c             	sub    esp,0xc
c0011c17:	be 01 00 00 00       	mov    esi,0x1
c0011c1c:	68 30 27 02 c0       	push   0xc0022730
c0011c21:	e8 4f 8d ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0011c26:	83 c4 10             	add    esp,0x10
c0011c29:	83 c4 0c             	add    esp,0xc
c0011c2c:	89 f0                	mov    eax,esi
c0011c2e:	5b                   	pop    ebx
c0011c2f:	5e                   	pop    esi
c0011c30:	5f                   	pop    edi
c0011c31:	5d                   	pop    ebp
c0011c32:	c3                   	ret    

c0011c33 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011c33:	55                   	push   ebp
c0011c34:	57                   	push   edi
c0011c35:	56                   	push   esi
c0011c36:	53                   	push   ebx
c0011c37:	51                   	push   ecx
c0011c38:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c3c:	85 db                	test   ebx,ebx
c0011c3e:	0f 84 bc 00 00 00    	je     c0011d00 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c44:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011c4b:	0f 84 af 00 00 00    	je     c0011d00 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c51:	31 c9                	xor    ecx,ecx
c0011c53:	bf 08 00 00 00       	mov    edi,0x8
c0011c58:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011c5e:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011c61:	99                   	cdq    
c0011c62:	f7 ff                	idiv   edi
c0011c64:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011c6b:	85 ed                	test   ebp,ebp
c0011c6d:	0f 84 9e 00 00 00    	je     c0011d11 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011c73:	89 e9                	mov    ecx,ebp
c0011c75:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011c7b:	bf 01 00 00 00       	mov    edi,0x1
c0011c80:	89 04 24             	mov    DWORD PTR [esp],eax
c0011c83:	d3 e7                	shl    edi,cl
c0011c85:	31 c9                	xor    ecx,ecx
c0011c87:	b8 01 00 00 00       	mov    eax,0x1
c0011c8c:	d3 e0                	shl    eax,cl
c0011c8e:	85 04 24             	test   DWORD PTR [esp],eax
c0011c91:	74 06                	je     c0011c99 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011c93:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011c97:	75 67                	jne    c0011d00 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c99:	41                   	inc    ecx
c0011c9a:	83 f9 11             	cmp    ecx,0x11
c0011c9d:	75 e8                	jne    c0011c87 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011c9f:	46                   	inc    esi
c0011ca0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011ca3:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011ca9:	09 f8                	or     eax,edi
c0011cab:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011cb6:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011cbc:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011cc3:	31 c0                	xor    eax,eax
c0011cc5:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011ccd:	74 09                	je     c0011cd8 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011ccf:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011cd6:	eb 06                	jmp    c0011cde <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011cd8:	40                   	inc    eax
c0011cd9:	83 f8 08             	cmp    eax,0x8
c0011cdc:	75 e7                	jne    c0011cc5 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011cde:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011ce1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ce5:	83 fd 09             	cmp    ebp,0x9
c0011ce8:	89 2a                	mov    DWORD PTR [edx],ebp
c0011cea:	75 07                	jne    c0011cf3 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011cec:	b8 bc 1a 01 c0       	mov    eax,0xc0011abc
c0011cf1:	eb 31                	jmp    c0011d24 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011cf3:	83 f8 01             	cmp    eax,0x1
c0011cf6:	75 0c                	jne    c0011d04 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011cf8:	f7 d7                	not    edi
c0011cfa:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011d00:	31 c0                	xor    eax,eax
c0011d02:	eb 20                	jmp    c0011d24 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011d04:	85 c0                	test   eax,eax
c0011d06:	75 1c                	jne    c0011d24 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011d08:	8b 04 ad 40 3f 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc0c0]
c0011d0f:	eb 13                	jmp    c0011d24 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011d11:	46                   	inc    esi
c0011d12:	41                   	inc    ecx
c0011d13:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011d19:	83 f9 08             	cmp    ecx,0x8
c0011d1c:	0f 85 36 ff ff ff    	jne    c0011c58 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011d22:	eb dc                	jmp    c0011d00 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011d24:	5a                   	pop    edx
c0011d25:	5b                   	pop    ebx
c0011d26:	5e                   	pop    esi
c0011d27:	5f                   	pop    edi
c0011d28:	5d                   	pop    ebp
c0011d29:	c3                   	ret    

c0011d2a <KiCheckSignalZ>:
c0011d2a:	83 ec 10             	sub    esp,0x10
c0011d2d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011d31:	50                   	push   eax
c0011d32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d37:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d3a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011d40:	e8 ee fe ff ff       	call   c0011c33 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011d45:	5a                   	pop    edx
c0011d46:	31 d2                	xor    edx,edx
c0011d48:	59                   	pop    ecx
c0011d49:	85 c0                	test   eax,eax
c0011d4b:	74 19                	je     c0011d66 <KiCheckSignalZ+0x3c>
c0011d4d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011d53:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011d56:	89 02                	mov    DWORD PTR [edx],eax
c0011d58:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011d5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d63:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011d66:	89 d0                	mov    eax,edx
c0011d68:	83 c4 10             	add    esp,0x10
c0011d6b:	c3                   	ret    

c0011d6c <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011d6c:	56                   	push   esi
c0011d6d:	53                   	push   ebx
c0011d6e:	bb 01 00 00 00       	mov    ebx,0x1
c0011d73:	52                   	push   edx
c0011d74:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011d78:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d7c:	d3 e3                	shl    ebx,cl
c0011d7e:	83 f9 10             	cmp    ecx,0x10
c0011d81:	7f 08                	jg     c0011d8b <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011d83:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011d89:	75 10                	jne    c0011d9b <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011d8b:	83 ec 0c             	sub    esp,0xc
c0011d8e:	68 41 27 02 c0       	push   0xc0022741
c0011d93:	e8 7b f9 ff ff       	call   c0011713 <KePanic(char const*)>
c0011d98:	83 c4 10             	add    esp,0x10
c0011d9b:	f7 d3                	not    ebx
c0011d9d:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011da3:	58                   	pop    eax
c0011da4:	5b                   	pop    ebx
c0011da5:	5e                   	pop    esi
c0011da6:	c3                   	ret    

c0011da7 <KiFinishSignalZ>:
c0011da7:	53                   	push   ebx
c0011da8:	83 ec 10             	sub    esp,0x10
c0011dab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011daf:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011db2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011db7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dba:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011dc0:	e8 a7 ff ff ff       	call   c0011d6c <KeCompleteSignal(SigHandlerBlock*, int)>
c0011dc5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011dcb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011dd2:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011dd9:	83 c4 18             	add    esp,0x18
c0011ddc:	5b                   	pop    ebx
c0011ddd:	c3                   	ret    

c0011dde <SysSeekDir(regs*)>:
c0011dde:	31 c0                	xor    eax,eax
c0011de0:	31 d2                	xor    edx,edx
c0011de2:	c3                   	ret    

c0011de3 <SysTellDir(regs*)>:
c0011de3:	31 c0                	xor    eax,eax
c0011de5:	31 d2                	xor    edx,edx
c0011de7:	c3                   	ret    

c0011de8 <SysVerify(regs*)>:
c0011de8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dec:	31 d2                	xor    edx,edx
c0011dee:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011df1:	c3                   	ret    

c0011df2 <SysGetArgc(regs*)>:
c0011df2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011df7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dfa:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011e00:	89 c2                	mov    edx,eax
c0011e02:	c1 fa 1f             	sar    edx,0x1f
c0011e05:	c3                   	ret    

c0011e06 <SysTTYName(regs*)>:
c0011e06:	b8 01 00 00 00       	mov    eax,0x1
c0011e0b:	31 d2                	xor    edx,edx
c0011e0d:	c3                   	ret    

c0011e0e <SysFormatDisk(regs*)>:
c0011e0e:	56                   	push   esi
c0011e0f:	53                   	push   ebx
c0011e10:	83 ec 04             	sub    esp,0x4
c0011e13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011e17:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011e1d:	eb 28                	jmp    c0011e47 <SysFormatDisk(regs*)+0x39>
c0011e1f:	83 ec 0c             	sub    esp,0xc
c0011e22:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011e25:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011e28:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011e2a:	51                   	push   ecx
c0011e2b:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011e2e:	51                   	push   ecx
c0011e2f:	50                   	push   eax
c0011e30:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011e37:	50                   	push   eax
c0011e38:	53                   	push   ebx
c0011e39:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011e3c:	83 c4 20             	add    esp,0x20
c0011e3f:	83 f8 08             	cmp    eax,0x8
c0011e42:	75 14                	jne    c0011e58 <SysFormatDisk(regs*)+0x4a>
c0011e44:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011e47:	85 db                	test   ebx,ebx
c0011e49:	75 d4                	jne    c0011e1f <SysFormatDisk(regs*)+0x11>
c0011e4b:	83 c4 04             	add    esp,0x4
c0011e4e:	b8 03 00 00 00       	mov    eax,0x3
c0011e53:	31 d2                	xor    edx,edx
c0011e55:	5b                   	pop    ebx
c0011e56:	5e                   	pop    esi
c0011e57:	c3                   	ret    
c0011e58:	85 c0                	test   eax,eax
c0011e5a:	74 1f                	je     c0011e7b <SysFormatDisk(regs*)+0x6d>
c0011e5c:	83 f8 09             	cmp    eax,0x9
c0011e5f:	74 0d                	je     c0011e6e <SysFormatDisk(regs*)+0x60>
c0011e61:	83 c4 04             	add    esp,0x4
c0011e64:	b8 02 00 00 00       	mov    eax,0x2
c0011e69:	31 d2                	xor    edx,edx
c0011e6b:	5b                   	pop    ebx
c0011e6c:	5e                   	pop    esi
c0011e6d:	c3                   	ret    
c0011e6e:	83 c4 04             	add    esp,0x4
c0011e71:	b8 01 00 00 00       	mov    eax,0x1
c0011e76:	31 d2                	xor    edx,edx
c0011e78:	5b                   	pop    ebx
c0011e79:	5e                   	pop    esi
c0011e7a:	c3                   	ret    
c0011e7b:	83 c4 04             	add    esp,0x4
c0011e7e:	31 c0                	xor    eax,eax
c0011e80:	31 d2                	xor    edx,edx
c0011e82:	5b                   	pop    ebx
c0011e83:	5e                   	pop    esi
c0011e84:	c3                   	ret    

c0011e85 <SysSetDiskVolumeLabel(regs*)>:
c0011e85:	56                   	push   esi
c0011e86:	53                   	push   ebx
c0011e87:	83 ec 04             	sub    esp,0x4
c0011e8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011e8e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011e91:	83 f8 19             	cmp    eax,0x19
c0011e94:	77 33                	ja     c0011ec9 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e96:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011e9d:	85 c9                	test   ecx,ecx
c0011e9f:	74 28                	je     c0011ec9 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011ea1:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011ea4:	85 db                	test   ebx,ebx
c0011ea6:	74 21                	je     c0011ec9 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011ea8:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011eae:	85 d2                	test   edx,edx
c0011eb0:	74 17                	je     c0011ec9 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011eb2:	8b 32                	mov    esi,DWORD PTR [edx]
c0011eb4:	53                   	push   ebx
c0011eb5:	50                   	push   eax
c0011eb6:	51                   	push   ecx
c0011eb7:	52                   	push   edx
c0011eb8:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011ebb:	83 c4 10             	add    esp,0x10
c0011ebe:	89 c2                	mov    edx,eax
c0011ec0:	83 c4 04             	add    esp,0x4
c0011ec3:	c1 fa 1f             	sar    edx,0x1f
c0011ec6:	5b                   	pop    ebx
c0011ec7:	5e                   	pop    esi
c0011ec8:	c3                   	ret    
c0011ec9:	83 c4 04             	add    esp,0x4
c0011ecc:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011ed1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ed6:	5b                   	pop    ebx
c0011ed7:	5e                   	pop    esi
c0011ed8:	c3                   	ret    

c0011ed9 <SysGetDiskVolumeLabel(regs*)>:
c0011ed9:	57                   	push   edi
c0011eda:	56                   	push   esi
c0011edb:	53                   	push   ebx
c0011edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ee0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011ee3:	83 fa 19             	cmp    edx,0x19
c0011ee6:	77 3c                	ja     c0011f24 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ee8:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011eef:	85 c9                	test   ecx,ecx
c0011ef1:	74 31                	je     c0011f24 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ef3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011ef6:	85 db                	test   ebx,ebx
c0011ef8:	74 2a                	je     c0011f24 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011efa:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011efd:	85 f6                	test   esi,esi
c0011eff:	74 23                	je     c0011f24 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011f01:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011f07:	85 c0                	test   eax,eax
c0011f09:	74 19                	je     c0011f24 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011f0b:	83 ec 0c             	sub    esp,0xc
c0011f0e:	8b 38                	mov    edi,DWORD PTR [eax]
c0011f10:	56                   	push   esi
c0011f11:	53                   	push   ebx
c0011f12:	52                   	push   edx
c0011f13:	51                   	push   ecx
c0011f14:	50                   	push   eax
c0011f15:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011f18:	83 c4 20             	add    esp,0x20
c0011f1b:	89 c2                	mov    edx,eax
c0011f1d:	5b                   	pop    ebx
c0011f1e:	c1 fa 1f             	sar    edx,0x1f
c0011f21:	5e                   	pop    esi
c0011f22:	5f                   	pop    edi
c0011f23:	c3                   	ret    
c0011f24:	5b                   	pop    ebx
c0011f25:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011f2a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f2f:	5e                   	pop    esi
c0011f30:	5f                   	pop    edi
c0011f31:	c3                   	ret    

c0011f32 <SysShutdown(regs*)>:
c0011f32:	83 ec 0c             	sub    esp,0xc
c0011f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f39:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f3c:	85 c0                	test   eax,eax
c0011f3e:	74 18                	je     c0011f58 <SysShutdown(regs*)+0x26>
c0011f40:	83 f8 01             	cmp    eax,0x1
c0011f43:	74 38                	je     c0011f7d <SysShutdown(regs*)+0x4b>
c0011f45:	83 f8 02             	cmp    eax,0x2
c0011f48:	74 24                	je     c0011f6e <SysShutdown(regs*)+0x3c>
c0011f4a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f4f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f54:	83 c4 0c             	add    esp,0xc
c0011f57:	c3                   	ret    
c0011f58:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011f5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f5f:	6a 00                	push   0x0
c0011f61:	6a 00                	push   0x0
c0011f63:	6a 00                	push   0x0
c0011f65:	50                   	push   eax
c0011f66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f69:	83 c4 10             	add    esp,0x10
c0011f6c:	eb dc                	jmp    c0011f4a <SysShutdown(regs*)+0x18>
c0011f6e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011f73:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f75:	6a 00                	push   0x0
c0011f77:	6a 00                	push   0x0
c0011f79:	6a 01                	push   0x1
c0011f7b:	eb e8                	jmp    c0011f65 <SysShutdown(regs*)+0x33>
c0011f7d:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011f82:	85 c0                	test   eax,eax
c0011f84:	74 02                	je     c0011f88 <SysShutdown(regs*)+0x56>
c0011f86:	ff d0                	call   eax
c0011f88:	31 c0                	xor    eax,eax
c0011f8a:	31 d2                	xor    edx,edx
c0011f8c:	83 c4 0c             	add    esp,0xc
c0011f8f:	c3                   	ret    

c0011f90 <SysRealpath(regs*)>:
c0011f90:	83 ec 0c             	sub    esp,0xc
c0011f93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f97:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f9a:	85 d2                	test   edx,edx
c0011f9c:	74 07                	je     c0011fa5 <SysRealpath(regs*)+0x15>
c0011f9e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011fa1:	85 c0                	test   eax,eax
c0011fa3:	75 0b                	jne    c0011fb0 <SysRealpath(regs*)+0x20>
c0011fa5:	b8 01 00 00 00       	mov    eax,0x1
c0011faa:	31 d2                	xor    edx,edx
c0011fac:	83 c4 0c             	add    esp,0xc
c0011faf:	c3                   	ret    
c0011fb0:	6a 00                	push   0x0
c0011fb2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011fb8:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011fbb:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011fc1:	51                   	push   ecx
c0011fc2:	52                   	push   edx
c0011fc3:	50                   	push   eax
c0011fc4:	e8 bb 98 ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011fc9:	83 c4 10             	add    esp,0x10
c0011fcc:	31 c0                	xor    eax,eax
c0011fce:	31 d2                	xor    edx,edx
c0011fd0:	83 c4 0c             	add    esp,0xc
c0011fd3:	c3                   	ret    

c0011fd4 <SysReadDir(regs*)>:
c0011fd4:	53                   	push   ebx
c0011fd5:	83 ec 18             	sub    esp,0x18
c0011fd8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fdc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011fdf:	83 f8 02             	cmp    eax,0x2
c0011fe2:	76 61                	jbe    c0012045 <SysReadDir(regs*)+0x71>
c0011fe4:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011feb:	77 49                	ja     c0012036 <SysReadDir(regs*)+0x62>
c0011fed:	83 ec 0c             	sub    esp,0xc
c0011ff0:	50                   	push   eax
c0011ff1:	e8 ed 74 ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c0011ff6:	83 c4 10             	add    esp,0x10
c0011ff9:	85 c0                	test   eax,eax
c0011ffb:	74 39                	je     c0012036 <SysReadDir(regs*)+0x62>
c0011ffd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012005:	83 ec 0c             	sub    esp,0xc
c0012008:	8b 10                	mov    edx,DWORD PTR [eax]
c001200a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001200e:	51                   	push   ecx
c001200f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012012:	51                   	push   ecx
c0012013:	6a 00                	push   0x0
c0012015:	68 10 01 00 00       	push   0x110
c001201a:	50                   	push   eax
c001201b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001201e:	83 c4 20             	add    esp,0x20
c0012021:	85 c0                	test   eax,eax
c0012023:	74 29                	je     c001204e <SysReadDir(regs*)+0x7a>
c0012025:	83 f8 07             	cmp    eax,0x7
c0012028:	74 1b                	je     c0012045 <SysReadDir(regs*)+0x71>
c001202a:	b8 02 00 00 00       	mov    eax,0x2
c001202f:	31 d2                	xor    edx,edx
c0012031:	83 c4 18             	add    esp,0x18
c0012034:	5b                   	pop    ebx
c0012035:	c3                   	ret    
c0012036:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001203b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012040:	83 c4 18             	add    esp,0x18
c0012043:	5b                   	pop    ebx
c0012044:	c3                   	ret    
c0012045:	b8 01 00 00 00       	mov    eax,0x1
c001204a:	31 d2                	xor    edx,edx
c001204c:	eb e3                	jmp    c0012031 <SysReadDir(regs*)+0x5d>
c001204e:	31 c0                	xor    eax,eax
c0012050:	31 d2                	xor    edx,edx
c0012052:	eb dd                	jmp    c0012031 <SysReadDir(regs*)+0x5d>

c0012054 <SysIsATTY(regs*)>:
c0012054:	83 ec 0c             	sub    esp,0xc
c0012057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001205b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001205e:	83 f8 02             	cmp    eax,0x2
c0012061:	76 07                	jbe    c001206a <SysIsATTY(regs*)+0x16>
c0012063:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012068:	75 26                	jne    c0012090 <SysIsATTY(regs*)+0x3c>
c001206a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001206f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012072:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012078:	85 c0                	test   eax,eax
c001207a:	74 24                	je     c00120a0 <SysIsATTY(regs*)+0x4c>
c001207c:	83 ec 0c             	sub    esp,0xc
c001207f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012081:	50                   	push   eax
c0012082:	ff 12                	call   DWORD PTR [edx]
c0012084:	31 d2                	xor    edx,edx
c0012086:	0f b6 c0             	movzx  eax,al
c0012089:	83 c4 10             	add    esp,0x10
c001208c:	83 c4 0c             	add    esp,0xc
c001208f:	c3                   	ret    
c0012090:	83 ec 0c             	sub    esp,0xc
c0012093:	50                   	push   eax
c0012094:	e8 4a 74 ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c0012099:	83 c4 10             	add    esp,0x10
c001209c:	85 c0                	test   eax,eax
c001209e:	75 dc                	jne    c001207c <SysIsATTY(regs*)+0x28>
c00120a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120a5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120aa:	83 c4 0c             	add    esp,0xc
c00120ad:	c3                   	ret    

c00120ae <SysSeek(regs*)>:
c00120ae:	53                   	push   ebx
c00120af:	83 ec 08             	sub    esp,0x8
c00120b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120b6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120b9:	8d 50 fd             	lea    edx,[eax-0x3]
c00120bc:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00120c2:	77 32                	ja     c00120f6 <SysSeek(regs*)+0x48>
c00120c4:	83 ec 0c             	sub    esp,0xc
c00120c7:	50                   	push   eax
c00120c8:	e8 16 74 ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c00120cd:	83 c4 0c             	add    esp,0xc
c00120d0:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00120d3:	31 db                	xor    ebx,ebx
c00120d5:	53                   	push   ebx
c00120d6:	51                   	push   ecx
c00120d7:	50                   	push   eax
c00120d8:	e8 7b 9b ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c00120dd:	83 c4 10             	add    esp,0x10
c00120e0:	85 c0                	test   eax,eax
c00120e2:	0f 95 c0             	setne  al
c00120e5:	31 d2                	xor    edx,edx
c00120e7:	0f b6 c0             	movzx  eax,al
c00120ea:	f7 d8                	neg    eax
c00120ec:	83 d2 00             	adc    edx,0x0
c00120ef:	83 c4 08             	add    esp,0x8
c00120f2:	f7 da                	neg    edx
c00120f4:	5b                   	pop    ebx
c00120f5:	c3                   	ret    
c00120f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120fb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012100:	83 c4 08             	add    esp,0x8
c0012103:	5b                   	pop    ebx
c0012104:	c3                   	ret    

c0012105 <SysTell(regs*)>:
c0012105:	53                   	push   ebx
c0012106:	83 ec 08             	sub    esp,0x8
c0012109:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001210d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012110:	83 f8 02             	cmp    eax,0x2
c0012113:	76 4e                	jbe    c0012163 <SysTell(regs*)+0x5e>
c0012115:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001211a:	76 19                	jbe    c0012135 <SysTell(regs*)+0x30>
c001211c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001211f:	31 d2                	xor    edx,edx
c0012121:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012127:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001212e:	31 c0                	xor    eax,eax
c0012130:	83 c4 08             	add    esp,0x8
c0012133:	5b                   	pop    ebx
c0012134:	c3                   	ret    
c0012135:	83 ec 0c             	sub    esp,0xc
c0012138:	50                   	push   eax
c0012139:	e8 a5 73 ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c001213e:	5a                   	pop    edx
c001213f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012142:	59                   	pop    ecx
c0012143:	53                   	push   ebx
c0012144:	50                   	push   eax
c0012145:	e8 ba 9b ff ff       	call   c000bd04 <File::tell(unsigned long long*)>
c001214a:	83 c4 10             	add    esp,0x10
c001214d:	85 c0                	test   eax,eax
c001214f:	0f 95 c0             	setne  al
c0012152:	31 d2                	xor    edx,edx
c0012154:	0f b6 c0             	movzx  eax,al
c0012157:	f7 d8                	neg    eax
c0012159:	83 d2 00             	adc    edx,0x0
c001215c:	83 c4 08             	add    esp,0x8
c001215f:	f7 da                	neg    edx
c0012161:	5b                   	pop    ebx
c0012162:	c3                   	ret    
c0012163:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012168:	ba ff ff ff ff       	mov    edx,0xffffffff
c001216d:	83 c4 08             	add    esp,0x8
c0012170:	5b                   	pop    ebx
c0012171:	c3                   	ret    

c0012172 <SysSize(regs*)>:
c0012172:	53                   	push   ebx
c0012173:	83 ec 18             	sub    esp,0x18
c0012176:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001217a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001217d:	83 f8 02             	cmp    eax,0x2
c0012180:	76 54                	jbe    c00121d6 <SysSize(regs*)+0x64>
c0012182:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012187:	76 19                	jbe    c00121a2 <SysSize(regs*)+0x30>
c0012189:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001218c:	31 d2                	xor    edx,edx
c001218e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012194:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001219b:	31 c0                	xor    eax,eax
c001219d:	83 c4 18             	add    esp,0x18
c00121a0:	5b                   	pop    ebx
c00121a1:	c3                   	ret    
c00121a2:	83 ec 0c             	sub    esp,0xc
c00121a5:	50                   	push   eax
c00121a6:	e8 38 73 ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c00121ab:	83 c4 0c             	add    esp,0xc
c00121ae:	8d 54 24 13          	lea    edx,[esp+0x13]
c00121b2:	52                   	push   edx
c00121b3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00121b6:	52                   	push   edx
c00121b7:	50                   	push   eax
c00121b8:	e8 df 9c ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c00121bd:	83 c4 10             	add    esp,0x10
c00121c0:	85 c0                	test   eax,eax
c00121c2:	0f 95 c0             	setne  al
c00121c5:	31 d2                	xor    edx,edx
c00121c7:	0f b6 c0             	movzx  eax,al
c00121ca:	f7 d8                	neg    eax
c00121cc:	83 d2 00             	adc    edx,0x0
c00121cf:	83 c4 18             	add    esp,0x18
c00121d2:	f7 da                	neg    edx
c00121d4:	5b                   	pop    ebx
c00121d5:	c3                   	ret    
c00121d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121db:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121e0:	83 c4 18             	add    esp,0x18
c00121e3:	5b                   	pop    ebx
c00121e4:	c3                   	ret    

c00121e5 <SysSizeFromFilename(regs*)>:
c00121e5:	55                   	push   ebp
c00121e6:	57                   	push   edi
c00121e7:	56                   	push   esi
c00121e8:	53                   	push   ebx
c00121e9:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00121ef:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00121f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121f9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00121fc:	85 f6                	test   esi,esi
c00121fe:	74 34                	je     c0012234 <SysSizeFromFilename(regs*)+0x4f>
c0012200:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012206:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012209:	83 f8 02             	cmp    eax,0x2
c001220c:	76 2d                	jbe    c001223b <SysSizeFromFilename(regs*)+0x56>
c001220e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012213:	76 3b                	jbe    c0012250 <SysSizeFromFilename(regs*)+0x6b>
c0012215:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012218:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001221e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012225:	81 c4 5c 02 00 00    	add    esp,0x25c
c001222b:	31 c0                	xor    eax,eax
c001222d:	5b                   	pop    ebx
c001222e:	31 d2                	xor    edx,edx
c0012230:	5e                   	pop    esi
c0012231:	5f                   	pop    edi
c0012232:	5d                   	pop    ebp
c0012233:	c3                   	ret    
c0012234:	89 f8                	mov    eax,edi
c0012236:	83 f8 02             	cmp    eax,0x2
c0012239:	77 d3                	ja     c001220e <SysSizeFromFilename(regs*)+0x29>
c001223b:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012241:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012246:	5b                   	pop    ebx
c0012247:	ba ff ff ff ff       	mov    edx,0xffffffff
c001224c:	5e                   	pop    esi
c001224d:	5f                   	pop    edi
c001224e:	5d                   	pop    ebp
c001224f:	c3                   	ret    
c0012250:	83 ec 0c             	sub    esp,0xc
c0012253:	68 14 01 00 00       	push   0x114
c0012258:	e8 89 58 ff ff       	call   c0007ae6 <malloc>
c001225d:	6a 01                	push   0x1
c001225f:	89 c5                	mov    ebp,eax
c0012261:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012266:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012269:	51                   	push   ecx
c001226a:	57                   	push   edi
c001226b:	55                   	push   ebp
c001226c:	e8 2d 98 ff ff       	call   c000ba9e <File::File(char const*, Process*, bool)>
c0012271:	83 c4 1c             	add    esp,0x1c
c0012274:	8d 44 24 23          	lea    eax,[esp+0x23]
c0012278:	50                   	push   eax
c0012279:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001227c:	53                   	push   ebx
c001227d:	55                   	push   ebp
c001227e:	e8 19 9c ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c0012283:	83 c4 10             	add    esp,0x10
c0012286:	85 ed                	test   ebp,ebp
c0012288:	74 15                	je     c001229f <SysSizeFromFilename(regs*)+0xba>
c001228a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001228e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012291:	83 ec 0c             	sub    esp,0xc
c0012294:	55                   	push   ebp
c0012295:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012298:	83 c4 10             	add    esp,0x10
c001229b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001229f:	85 c0                	test   eax,eax
c00122a1:	75 98                	jne    c001223b <SysSizeFromFilename(regs*)+0x56>
c00122a3:	6a 00                	push   0x0
c00122a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122ad:	05 0c 01 00 00       	add    eax,0x10c
c00122b2:	50                   	push   eax
c00122b3:	57                   	push   edi
c00122b4:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c00122bb:	53                   	push   ebx
c00122bc:	e8 c3 95 ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00122c1:	58                   	pop    eax
c00122c2:	5a                   	pop    edx
c00122c3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00122c7:	50                   	push   eax
c00122c8:	53                   	push   ebx
c00122c9:	e8 1e 90 ff ff       	call   c000b2ec <KeDereferenceSymlink(char const*, char*)>
c00122ce:	83 c4 10             	add    esp,0x10
c00122d1:	83 f8 01             	cmp    eax,0x1
c00122d4:	74 1a                	je     c00122f0 <SysSizeFromFilename(regs*)+0x10b>
c00122d6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00122db:	74 26                	je     c0012303 <SysSizeFromFilename(regs*)+0x11e>
c00122dd:	85 f6                	test   esi,esi
c00122df:	0f 84 40 ff ff ff    	je     c0012225 <SysSizeFromFilename(regs*)+0x40>
c00122e5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00122eb:	e9 35 ff ff ff       	jmp    c0012225 <SysSizeFromFilename(regs*)+0x40>
c00122f0:	85 f6                	test   esi,esi
c00122f2:	0f 84 2d ff ff ff    	je     c0012225 <SysSizeFromFilename(regs*)+0x40>
c00122f8:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00122fe:	e9 22 ff ff ff       	jmp    c0012225 <SysSizeFromFilename(regs*)+0x40>
c0012303:	85 f6                	test   esi,esi
c0012305:	0f 84 1a ff ff ff    	je     c0012225 <SysSizeFromFilename(regs*)+0x40>
c001230b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012311:	e9 0f ff ff ff       	jmp    c0012225 <SysSizeFromFilename(regs*)+0x40>

c0012316 <SysSizeFromFilenameNoSymlink(regs*)>:
c0012316:	55                   	push   ebp
c0012317:	57                   	push   edi
c0012318:	56                   	push   esi
c0012319:	53                   	push   ebx
c001231a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012320:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012327:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001232a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001232d:	85 f6                	test   esi,esi
c001232f:	74 34                	je     c0012365 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0012331:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012337:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001233a:	83 f8 02             	cmp    eax,0x2
c001233d:	76 2d                	jbe    c001236c <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001233f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012344:	76 3b                	jbe    c0012381 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0012346:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012349:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001234f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012356:	81 c4 5c 02 00 00    	add    esp,0x25c
c001235c:	31 c0                	xor    eax,eax
c001235e:	5b                   	pop    ebx
c001235f:	31 d2                	xor    edx,edx
c0012361:	5e                   	pop    esi
c0012362:	5f                   	pop    edi
c0012363:	5d                   	pop    ebp
c0012364:	c3                   	ret    
c0012365:	89 f8                	mov    eax,edi
c0012367:	83 f8 02             	cmp    eax,0x2
c001236a:	77 d3                	ja     c001233f <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c001236c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012372:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012377:	5b                   	pop    ebx
c0012378:	ba ff ff ff ff       	mov    edx,0xffffffff
c001237d:	5e                   	pop    esi
c001237e:	5f                   	pop    edi
c001237f:	5d                   	pop    ebp
c0012380:	c3                   	ret    
c0012381:	83 ec 0c             	sub    esp,0xc
c0012384:	68 14 01 00 00       	push   0x114
c0012389:	e8 58 57 ff ff       	call   c0007ae6 <malloc>
c001238e:	6a 00                	push   0x0
c0012390:	89 c5                	mov    ebp,eax
c0012392:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012397:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001239a:	51                   	push   ecx
c001239b:	57                   	push   edi
c001239c:	55                   	push   ebp
c001239d:	e8 fc 96 ff ff       	call   c000ba9e <File::File(char const*, Process*, bool)>
c00123a2:	83 c4 1c             	add    esp,0x1c
c00123a5:	8d 44 24 23          	lea    eax,[esp+0x23]
c00123a9:	50                   	push   eax
c00123aa:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00123ad:	53                   	push   ebx
c00123ae:	55                   	push   ebp
c00123af:	e8 e8 9a ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c00123b4:	83 c4 10             	add    esp,0x10
c00123b7:	85 ed                	test   ebp,ebp
c00123b9:	74 15                	je     c00123d0 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c00123bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123bf:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00123c2:	83 ec 0c             	sub    esp,0xc
c00123c5:	55                   	push   ebp
c00123c6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00123c9:	83 c4 10             	add    esp,0x10
c00123cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123d0:	85 c0                	test   eax,eax
c00123d2:	75 98                	jne    c001236c <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00123d4:	6a 00                	push   0x0
c00123d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123de:	05 0c 01 00 00       	add    eax,0x10c
c00123e3:	50                   	push   eax
c00123e4:	57                   	push   edi
c00123e5:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c00123ec:	53                   	push   ebx
c00123ed:	e8 92 94 ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00123f2:	58                   	pop    eax
c00123f3:	5a                   	pop    edx
c00123f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00123f8:	50                   	push   eax
c00123f9:	53                   	push   ebx
c00123fa:	e8 ed 8e ff ff       	call   c000b2ec <KeDereferenceSymlink(char const*, char*)>
c00123ff:	83 c4 10             	add    esp,0x10
c0012402:	83 f8 01             	cmp    eax,0x1
c0012405:	74 1a                	je     c0012421 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c0012407:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001240c:	74 26                	je     c0012434 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c001240e:	85 f6                	test   esi,esi
c0012410:	0f 84 40 ff ff ff    	je     c0012356 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012416:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001241c:	e9 35 ff ff ff       	jmp    c0012356 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012421:	85 f6                	test   esi,esi
c0012423:	0f 84 2d ff ff ff    	je     c0012356 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012429:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001242f:	e9 22 ff ff ff       	jmp    c0012356 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012434:	85 f6                	test   esi,esi
c0012436:	0f 84 1a ff ff ff    	je     c0012356 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001243c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012442:	e9 0f ff ff ff       	jmp    c0012356 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0012447 <SysClose(regs*)>:
c0012447:	53                   	push   ebx
c0012448:	83 ec 08             	sub    esp,0x8
c001244b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001244f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012452:	83 f8 02             	cmp    eax,0x2
c0012455:	76 41                	jbe    c0012498 <SysClose(regs*)+0x51>
c0012457:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001245d:	83 fa 01             	cmp    edx,0x1
c0012460:	76 2d                	jbe    c001248f <SysClose(regs*)+0x48>
c0012462:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012467:	77 2f                	ja     c0012498 <SysClose(regs*)+0x51>
c0012469:	83 ec 0c             	sub    esp,0xc
c001246c:	50                   	push   eax
c001246d:	e8 71 70 ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c0012472:	89 c3                	mov    ebx,eax
c0012474:	89 04 24             	mov    DWORD PTR [esp],eax
c0012477:	e8 7c 97 ff ff       	call   c000bbf8 <File::close()>
c001247c:	83 c4 10             	add    esp,0x10
c001247f:	85 db                	test   ebx,ebx
c0012481:	74 0c                	je     c001248f <SysClose(regs*)+0x48>
c0012483:	83 ec 0c             	sub    esp,0xc
c0012486:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012488:	53                   	push   ebx
c0012489:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001248c:	83 c4 10             	add    esp,0x10
c001248f:	31 c0                	xor    eax,eax
c0012491:	31 d2                	xor    edx,edx
c0012493:	83 c4 08             	add    esp,0x8
c0012496:	5b                   	pop    ebx
c0012497:	c3                   	ret    
c0012498:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001249d:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124a2:	83 c4 08             	add    esp,0x8
c00124a5:	5b                   	pop    ebx
c00124a6:	c3                   	ret    

c00124a7 <SysOpenDir(regs*)>:
c00124a7:	56                   	push   esi
c00124a8:	53                   	push   ebx
c00124a9:	83 ec 04             	sub    esp,0x4
c00124ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124b0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00124b3:	85 c9                	test   ecx,ecx
c00124b5:	74 5d                	je     c0012514 <SysOpenDir(regs*)+0x6d>
c00124b7:	83 ec 0c             	sub    esp,0xc
c00124ba:	68 14 01 00 00       	push   0x114
c00124bf:	e8 22 56 ff ff       	call   c0007ae6 <malloc>
c00124c4:	83 c4 0c             	add    esp,0xc
c00124c7:	89 c6                	mov    esi,eax
c00124c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124d1:	50                   	push   eax
c00124d2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00124d5:	52                   	push   edx
c00124d6:	56                   	push   esi
c00124d7:	e8 80 9b ff ff       	call   c000c05c <Directory::Directory(char const*, Process*)>
c00124dc:	83 c4 10             	add    esp,0x10
c00124df:	85 f6                	test   esi,esi
c00124e1:	74 31                	je     c0012514 <SysOpenDir(regs*)+0x6d>
c00124e3:	83 ec 0c             	sub    esp,0xc
c00124e6:	56                   	push   esi
c00124e7:	e8 38 9c ff ff       	call   c000c124 <Directory::open()>
c00124ec:	83 c4 10             	add    esp,0x10
c00124ef:	85 c0                	test   eax,eax
c00124f1:	75 21                	jne    c0012514 <SysOpenDir(regs*)+0x6d>
c00124f3:	83 ec 0c             	sub    esp,0xc
c00124f6:	56                   	push   esi
c00124f7:	e8 ea 6c ff ff       	call   c00091e6 <UnixFile::getFileDescriptor()>
c00124fc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00124ff:	83 c4 10             	add    esp,0x10
c0012502:	89 02                	mov    DWORD PTR [edx],eax
c0012504:	c1 f8 1f             	sar    eax,0x1f
c0012507:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001250a:	83 c4 04             	add    esp,0x4
c001250d:	31 c0                	xor    eax,eax
c001250f:	31 d2                	xor    edx,edx
c0012511:	5b                   	pop    ebx
c0012512:	5e                   	pop    esi
c0012513:	c3                   	ret    
c0012514:	83 c4 04             	add    esp,0x4
c0012517:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001251c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012521:	5b                   	pop    ebx
c0012522:	5e                   	pop    esi
c0012523:	c3                   	ret    

c0012524 <SysMakeDir(regs*)>:
c0012524:	56                   	push   esi
c0012525:	53                   	push   ebx
c0012526:	83 ec 10             	sub    esp,0x10
c0012529:	68 14 01 00 00       	push   0x114
c001252e:	e8 b3 55 ff ff       	call   c0007ae6 <malloc>
c0012533:	83 c4 0c             	add    esp,0xc
c0012536:	89 c3                	mov    ebx,eax
c0012538:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001253d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012540:	50                   	push   eax
c0012541:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012545:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012548:	52                   	push   edx
c0012549:	53                   	push   ebx
c001254a:	e8 0d 9b ff ff       	call   c000c05c <Directory::Directory(char const*, Process*)>
c001254f:	83 c4 10             	add    esp,0x10
c0012552:	85 db                	test   ebx,ebx
c0012554:	74 2c                	je     c0012582 <SysMakeDir(regs*)+0x5e>
c0012556:	83 ec 0c             	sub    esp,0xc
c0012559:	53                   	push   ebx
c001255a:	e8 a5 9d ff ff       	call   c000c304 <Directory::create()>
c001255f:	89 c6                	mov    esi,eax
c0012561:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012563:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012566:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012569:	83 c4 10             	add    esp,0x10
c001256c:	31 c0                	xor    eax,eax
c001256e:	85 f6                	test   esi,esi
c0012570:	0f 95 c0             	setne  al
c0012573:	31 d2                	xor    edx,edx
c0012575:	f7 d8                	neg    eax
c0012577:	83 d2 00             	adc    edx,0x0
c001257a:	83 c4 04             	add    esp,0x4
c001257d:	f7 da                	neg    edx
c001257f:	5b                   	pop    ebx
c0012580:	5e                   	pop    esi
c0012581:	c3                   	ret    
c0012582:	83 c4 04             	add    esp,0x4
c0012585:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001258a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001258f:	5b                   	pop    ebx
c0012590:	5e                   	pop    esi
c0012591:	c3                   	ret    

c0012592 <SysCloseDir(regs*)>:
c0012592:	53                   	push   ebx
c0012593:	83 ec 08             	sub    esp,0x8
c0012596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001259a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001259d:	8d 50 fd             	lea    edx,[eax-0x3]
c00125a0:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00125a6:	77 2f                	ja     c00125d7 <SysCloseDir(regs*)+0x45>
c00125a8:	83 ec 0c             	sub    esp,0xc
c00125ab:	50                   	push   eax
c00125ac:	e8 32 6f ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c00125b1:	89 c3                	mov    ebx,eax
c00125b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00125b6:	e8 c5 9b ff ff       	call   c000c180 <Directory::close()>
c00125bb:	83 c4 10             	add    esp,0x10
c00125be:	85 db                	test   ebx,ebx
c00125c0:	74 0c                	je     c00125ce <SysCloseDir(regs*)+0x3c>
c00125c2:	83 ec 0c             	sub    esp,0xc
c00125c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125c7:	53                   	push   ebx
c00125c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00125cb:	83 c4 10             	add    esp,0x10
c00125ce:	31 c0                	xor    eax,eax
c00125d0:	31 d2                	xor    edx,edx
c00125d2:	83 c4 08             	add    esp,0x8
c00125d5:	5b                   	pop    ebx
c00125d6:	c3                   	ret    
c00125d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00125dc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00125e1:	83 c4 08             	add    esp,0x8
c00125e4:	5b                   	pop    ebx
c00125e5:	c3                   	ret    

c00125e6 <SysWait(regs*)>:
c00125e6:	83 ec 10             	sub    esp,0x10
c00125e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125ed:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00125f0:	52                   	push   edx
c00125f1:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00125f4:	51                   	push   ecx
c00125f5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00125f8:	50                   	push   eax
c00125f9:	e8 46 3e 00 00       	call   c0016444 <waitTask(int, int*, int)>
c00125fe:	83 c4 1c             	add    esp,0x1c
c0012601:	89 c2                	mov    edx,eax
c0012603:	c1 fa 1f             	sar    edx,0x1f
c0012606:	c3                   	ret    

c0012607 <SysNotImpl(regs*)>:
c0012607:	83 ec 18             	sub    esp,0x18
c001260a:	68 52 27 02 c0       	push   0xc0022752
c001260f:	e8 ff f0 ff ff       	call   c0011713 <KePanic(char const*)>
c0012614:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012619:	ba ff ff ff ff       	mov    edx,0xffffffff
c001261e:	83 c4 1c             	add    esp,0x1c
c0012621:	c3                   	ret    

c0012622 <SysPanic(regs*)>:
c0012622:	83 ec 18             	sub    esp,0x18
c0012625:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012629:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001262c:	50                   	push   eax
c001262d:	e8 e1 f0 ff ff       	call   c0011713 <KePanic(char const*)>
c0012632:	b8 01 00 00 00       	mov    eax,0x1
c0012637:	31 d2                	xor    edx,edx
c0012639:	83 c4 1c             	add    esp,0x1c
c001263c:	c3                   	ret    

c001263d <SysRmdir(regs*)>:
c001263d:	56                   	push   esi
c001263e:	53                   	push   ebx
c001263f:	83 ec 20             	sub    esp,0x20
c0012642:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012646:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012649:	68 14 01 00 00       	push   0x114
c001264e:	e8 93 54 ff ff       	call   c0007ae6 <malloc>
c0012653:	6a 00                	push   0x0
c0012655:	89 c3                	mov    ebx,eax
c0012657:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001265c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001265f:	50                   	push   eax
c0012660:	56                   	push   esi
c0012661:	53                   	push   ebx
c0012662:	e8 37 94 ff ff       	call   c000ba9e <File::File(char const*, Process*, bool)>
c0012667:	83 c4 14             	add    esp,0x14
c001266a:	53                   	push   ebx
c001266b:	e8 f8 96 ff ff       	call   c000bd68 <File::unlink()>
c0012670:	83 c4 10             	add    esp,0x10
c0012673:	85 db                	test   ebx,ebx
c0012675:	74 14                	je     c001268b <SysRmdir(regs*)+0x4e>
c0012677:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001267b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001267d:	83 ec 0c             	sub    esp,0xc
c0012680:	53                   	push   ebx
c0012681:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012684:	83 c4 10             	add    esp,0x10
c0012687:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001268b:	85 c0                	test   eax,eax
c001268d:	0f 95 c0             	setne  al
c0012690:	31 d2                	xor    edx,edx
c0012692:	0f b6 c0             	movzx  eax,al
c0012695:	f7 d8                	neg    eax
c0012697:	83 d2 00             	adc    edx,0x0
c001269a:	83 c4 14             	add    esp,0x14
c001269d:	f7 da                	neg    edx
c001269f:	5b                   	pop    ebx
c00126a0:	5e                   	pop    esi
c00126a1:	c3                   	ret    

c00126a2 <SysUnlink(regs*)>:
c00126a2:	56                   	push   esi
c00126a3:	53                   	push   ebx
c00126a4:	83 ec 20             	sub    esp,0x20
c00126a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00126ab:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00126ae:	68 14 01 00 00       	push   0x114
c00126b3:	e8 2e 54 ff ff       	call   c0007ae6 <malloc>
c00126b8:	6a 00                	push   0x0
c00126ba:	89 c3                	mov    ebx,eax
c00126bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126c4:	50                   	push   eax
c00126c5:	56                   	push   esi
c00126c6:	53                   	push   ebx
c00126c7:	e8 d2 93 ff ff       	call   c000ba9e <File::File(char const*, Process*, bool)>
c00126cc:	83 c4 14             	add    esp,0x14
c00126cf:	53                   	push   ebx
c00126d0:	e8 93 96 ff ff       	call   c000bd68 <File::unlink()>
c00126d5:	83 c4 10             	add    esp,0x10
c00126d8:	85 db                	test   ebx,ebx
c00126da:	74 14                	je     c00126f0 <SysUnlink(regs*)+0x4e>
c00126dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126e0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00126e2:	83 ec 0c             	sub    esp,0xc
c00126e5:	53                   	push   ebx
c00126e6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00126e9:	83 c4 10             	add    esp,0x10
c00126ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00126f0:	85 c0                	test   eax,eax
c00126f2:	0f 95 c0             	setne  al
c00126f5:	31 d2                	xor    edx,edx
c00126f7:	0f b6 c0             	movzx  eax,al
c00126fa:	f7 d8                	neg    eax
c00126fc:	83 d2 00             	adc    edx,0x0
c00126ff:	83 c4 14             	add    esp,0x14
c0012702:	f7 da                	neg    edx
c0012704:	5b                   	pop    ebx
c0012705:	5e                   	pop    esi
c0012706:	c3                   	ret    

c0012707 <SysGetArgv(regs*)>:
c0012707:	83 ec 0c             	sub    esp,0xc
c001270a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001270e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012711:	85 c0                	test   eax,eax
c0012713:	78 2c                	js     c0012741 <SysGetArgv(regs*)+0x3a>
c0012715:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001271b:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001271e:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012724:	7d 1b                	jge    c0012741 <SysGetArgv(regs*)+0x3a>
c0012726:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001272d:	85 c0                	test   eax,eax
c001272f:	74 18                	je     c0012749 <SysGetArgv(regs*)+0x42>
c0012731:	83 ec 08             	sub    esp,0x8
c0012734:	50                   	push   eax
c0012735:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012738:	50                   	push   eax
c0012739:	e8 02 df fe ff       	call   c0000640 <strcpy>
c001273e:	83 c4 10             	add    esp,0x10
c0012741:	31 c0                	xor    eax,eax
c0012743:	31 d2                	xor    edx,edx
c0012745:	83 c4 0c             	add    esp,0xc
c0012748:	c3                   	ret    
c0012749:	b8 01 00 00 00       	mov    eax,0x1
c001274e:	31 d2                	xor    edx,edx
c0012750:	83 c4 0c             	add    esp,0xc
c0012753:	c3                   	ret    

c0012754 <SysUSleep(regs*)>:
c0012754:	83 ec 1c             	sub    esp,0x1c
c0012757:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001275b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001275e:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012761:	6a 00                	push   0x0
c0012763:	6a 64                	push   0x64
c0012765:	52                   	push   edx
c0012766:	50                   	push   eax
c0012767:	e8 04 d1 00 00       	call   c001f870 <__udivdi3>
c001276c:	83 c4 14             	add    esp,0x14
c001276f:	50                   	push   eax
c0012770:	e8 b3 3d 00 00       	call   c0016528 <milliTenthSleep(unsigned int)>
c0012775:	31 c0                	xor    eax,eax
c0012777:	31 d2                	xor    edx,edx
c0012779:	83 c4 1c             	add    esp,0x1c
c001277c:	c3                   	ret    

c001277d <SysSpawn(regs*)>:
c001277d:	56                   	push   esi
c001277e:	53                   	push   ebx
c001277f:	83 ec 04             	sub    esp,0x4
c0012782:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012786:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012789:	85 f6                	test   esi,esi
c001278b:	75 0a                	jne    c0012797 <SysSpawn(regs*)+0x1a>
c001278d:	83 c4 04             	add    esp,0x4
c0012790:	31 c0                	xor    eax,eax
c0012792:	31 d2                	xor    edx,edx
c0012794:	5b                   	pop    ebx
c0012795:	5e                   	pop    esi
c0012796:	c3                   	ret    
c0012797:	83 ec 0c             	sub    esp,0xc
c001279a:	68 24 07 00 00       	push   0x724
c001279f:	e8 42 53 ff ff       	call   c0007ae6 <malloc>
c00127a4:	83 c4 10             	add    esp,0x10
c00127a7:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00127aa:	89 c6                	mov    esi,eax
c00127ac:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00127af:	85 c9                	test   ecx,ecx
c00127b1:	75 39                	jne    c00127ec <SysSpawn(regs*)+0x6f>
c00127b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00127bb:	52                   	push   edx
c00127bc:	50                   	push   eax
c00127bd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00127c0:	50                   	push   eax
c00127c1:	56                   	push   esi
c00127c2:	e8 b1 33 00 00       	call   c0015b78 <Process::Process(char const*, Process*, char**)>
c00127c7:	83 c4 10             	add    esp,0x10
c00127ca:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00127d1:	75 ba                	jne    c001278d <SysSpawn(regs*)+0x10>
c00127d3:	83 ec 0c             	sub    esp,0xc
c00127d6:	56                   	push   esi
c00127d7:	e8 d8 38 00 00       	call   c00160b4 <Process::createUserThread()>
c00127dc:	8b 06                	mov    eax,DWORD PTR [esi]
c00127de:	83 c4 10             	add    esp,0x10
c00127e1:	89 c2                	mov    edx,eax
c00127e3:	83 c4 04             	add    esp,0x4
c00127e6:	c1 fa 1f             	sar    edx,0x1f
c00127e9:	5b                   	pop    ebx
c00127ea:	5e                   	pop    esi
c00127eb:	c3                   	ret    
c00127ec:	31 c0                	xor    eax,eax
c00127ee:	eb cb                	jmp    c00127bb <SysSpawn(regs*)+0x3e>

c00127f0 <SysGetEnv(regs*)>:
c00127f0:	57                   	push   edi
c00127f1:	56                   	push   esi
c00127f2:	53                   	push   ebx
c00127f3:	83 ec 1c             	sub    esp,0x1c
c00127f6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00127fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127ff:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012802:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012805:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012808:	51                   	push   ecx
c0012809:	e8 bd ed ff ff       	call   c00115cb <KeGetProcessTotalEnvCount(Process*)>
c001280e:	83 c4 10             	add    esp,0x10
c0012811:	39 c7                	cmp    edi,eax
c0012813:	7c 14                	jl     c0012829 <SysGetEnv(regs*)+0x39>
c0012815:	85 f6                	test   esi,esi
c0012817:	75 0b                	jne    c0012824 <SysGetEnv(regs*)+0x34>
c0012819:	83 c4 10             	add    esp,0x10
c001281c:	31 c0                	xor    eax,eax
c001281e:	5b                   	pop    ebx
c001281f:	31 d2                	xor    edx,edx
c0012821:	5e                   	pop    esi
c0012822:	5f                   	pop    edi
c0012823:	c3                   	ret    
c0012824:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012827:	eb f0                	jmp    c0012819 <SysGetEnv(regs*)+0x29>
c0012829:	8d 44 24 08          	lea    eax,[esp+0x8]
c001282d:	83 ec 04             	sub    esp,0x4
c0012830:	57                   	push   edi
c0012831:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012837:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001283a:	57                   	push   edi
c001283b:	50                   	push   eax
c001283c:	e8 aa ed ff ff       	call   c00115eb <KeGetProcessEnvPair(Process*, int)>
c0012841:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012844:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012848:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001284c:	83 c4 0c             	add    esp,0xc
c001284f:	85 d2                	test   edx,edx
c0012851:	75 23                	jne    c0012876 <SysGetEnv(regs*)+0x86>
c0012853:	83 ec 0c             	sub    esp,0xc
c0012856:	50                   	push   eax
c0012857:	e8 14 dd fe ff       	call   c0000570 <strlen>
c001285c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001285f:	89 c3                	mov    ebx,eax
c0012861:	e8 0a dd fe ff       	call   c0000570 <strlen>
c0012866:	83 c4 10             	add    esp,0x10
c0012869:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001286d:	83 c4 10             	add    esp,0x10
c0012870:	31 d2                	xor    edx,edx
c0012872:	5b                   	pop    ebx
c0012873:	5e                   	pop    esi
c0012874:	5f                   	pop    edi
c0012875:	c3                   	ret    
c0012876:	83 ec 08             	sub    esp,0x8
c0012879:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001287c:	50                   	push   eax
c001287d:	56                   	push   esi
c001287e:	e8 bd dd fe ff       	call   c0000640 <strcpy>
c0012883:	58                   	pop    eax
c0012884:	5a                   	pop    edx
c0012885:	68 6c 27 02 c0       	push   0xc002276c
c001288a:	56                   	push   esi
c001288b:	e8 b0 df fe ff       	call   c0000840 <strcat>
c0012890:	59                   	pop    ecx
c0012891:	5b                   	pop    ebx
c0012892:	57                   	push   edi
c0012893:	56                   	push   esi
c0012894:	e8 a7 df fe ff       	call   c0000840 <strcat>
c0012899:	83 c4 10             	add    esp,0x10
c001289c:	e9 78 ff ff ff       	jmp    c0012819 <SysGetEnv(regs*)+0x29>

c00128a1 <SysSetFatAttrib(regs*)>:
c00128a1:	57                   	push   edi
c00128a2:	56                   	push   esi
c00128a3:	53                   	push   ebx
c00128a4:	83 ec 1c             	sub    esp,0x1c
c00128a7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00128ab:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00128ae:	68 14 01 00 00       	push   0x114
c00128b3:	e8 2e 52 ff ff       	call   c0007ae6 <malloc>
c00128b8:	83 c4 0c             	add    esp,0xc
c00128bb:	89 c3                	mov    ebx,eax
c00128bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00128c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00128c5:	50                   	push   eax
c00128c6:	57                   	push   edi
c00128c7:	53                   	push   ebx
c00128c8:	e8 af 92 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c00128cd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00128d0:	83 c4 0c             	add    esp,0xc
c00128d3:	0f b6 d4             	movzx  edx,ah
c00128d6:	0f b6 c0             	movzx  eax,al
c00128d9:	52                   	push   edx
c00128da:	50                   	push   eax
c00128db:	53                   	push   ebx
c00128dc:	e8 21 95 ff ff       	call   c000be02 <File::chfatattr(unsigned char, unsigned char)>
c00128e1:	83 c4 10             	add    esp,0x10
c00128e4:	85 db                	test   ebx,ebx
c00128e6:	74 14                	je     c00128fc <SysSetFatAttrib(regs*)+0x5b>
c00128e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128ec:	8b 13                	mov    edx,DWORD PTR [ebx]
c00128ee:	83 ec 0c             	sub    esp,0xc
c00128f1:	53                   	push   ebx
c00128f2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00128f5:	83 c4 10             	add    esp,0x10
c00128f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128fc:	85 c0                	test   eax,eax
c00128fe:	0f 95 c0             	setne  al
c0012901:	31 d2                	xor    edx,edx
c0012903:	0f b6 c0             	movzx  eax,al
c0012906:	f7 d8                	neg    eax
c0012908:	83 d2 00             	adc    edx,0x0
c001290b:	83 c4 10             	add    esp,0x10
c001290e:	f7 da                	neg    edx
c0012910:	5b                   	pop    ebx
c0012911:	5e                   	pop    esi
c0012912:	5f                   	pop    edi
c0012913:	c3                   	ret    

c0012914 <SysPipe(regs*)>:
c0012914:	57                   	push   edi
c0012915:	56                   	push   esi
c0012916:	53                   	push   ebx
c0012917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001291b:	83 ec 0c             	sub    esp,0xc
c001291e:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012921:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012924:	6a 20                	push   0x20
c0012926:	e8 bb 51 ff ff       	call   c0007ae6 <malloc>
c001292b:	89 c3                	mov    ebx,eax
c001292d:	58                   	pop    eax
c001292e:	5a                   	pop    edx
c001292f:	68 00 50 00 00       	push   0x5000
c0012934:	53                   	push   ebx
c0012935:	e8 1e 5b ff ff       	call   c0008458 <Pipe::Pipe(int)>
c001293a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001293d:	e8 a4 68 ff ff       	call   c00091e6 <UnixFile::getFileDescriptor()>
c0012942:	89 07                	mov    DWORD PTR [edi],eax
c0012944:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012947:	e8 9a 68 ff ff       	call   c00091e6 <UnixFile::getFileDescriptor()>
c001294c:	83 c4 10             	add    esp,0x10
c001294f:	89 06                	mov    DWORD PTR [esi],eax
c0012951:	31 d2                	xor    edx,edx
c0012953:	5b                   	pop    ebx
c0012954:	31 c0                	xor    eax,eax
c0012956:	5e                   	pop    esi
c0012957:	5f                   	pop    edi
c0012958:	c3                   	ret    

c0012959 <SysGetUnixTime(regs*)>:
c0012959:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001295e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012964:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012968:	e9 dd 9b ff ff       	jmp    c000c54a <Clock::timeInSecondsLocal()>

c001296d <string_ends_with(char const*, char const*)>:
c001296d:	57                   	push   edi
c001296e:	56                   	push   esi
c001296f:	53                   	push   ebx
c0012970:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012974:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012978:	83 ec 0c             	sub    esp,0xc
c001297b:	53                   	push   ebx
c001297c:	e8 ef db fe ff       	call   c0000570 <strlen>
c0012981:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012984:	89 c6                	mov    esi,eax
c0012986:	e8 e5 db fe ff       	call   c0000570 <strlen>
c001298b:	83 c4 10             	add    esp,0x10
c001298e:	39 c6                	cmp    esi,eax
c0012990:	7d 06                	jge    c0012998 <string_ends_with(char const*, char const*)+0x2b>
c0012992:	5b                   	pop    ebx
c0012993:	31 c0                	xor    eax,eax
c0012995:	5e                   	pop    esi
c0012996:	5f                   	pop    edi
c0012997:	c3                   	ret    
c0012998:	83 ec 08             	sub    esp,0x8
c001299b:	29 c6                	sub    esi,eax
c001299d:	57                   	push   edi
c001299e:	01 f3                	add    ebx,esi
c00129a0:	53                   	push   ebx
c00129a1:	e8 aa dd fe ff       	call   c0000750 <strcmp>
c00129a6:	83 c4 10             	add    esp,0x10
c00129a9:	85 c0                	test   eax,eax
c00129ab:	5b                   	pop    ebx
c00129ac:	0f 94 c0             	sete   al
c00129af:	5e                   	pop    esi
c00129b0:	0f b6 c0             	movzx  eax,al
c00129b3:	5f                   	pop    edi
c00129b4:	c3                   	ret    

c00129b5 <SysOpen(regs*)>:
c00129b5:	56                   	push   esi
c00129b6:	53                   	push   ebx
c00129b7:	81 ec 04 01 00 00    	sub    esp,0x104
c00129bd:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00129c4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00129c7:	85 c0                	test   eax,eax
c00129c9:	0f 84 bc 01 00 00    	je     c0012b8b <SysOpen(regs*)+0x1d6>
c00129cf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129d2:	85 c0                	test   eax,eax
c00129d4:	0f 84 b1 01 00 00    	je     c0012b8b <SysOpen(regs*)+0x1d6>
c00129da:	6a 00                	push   0x0
c00129dc:	68 6e 27 02 c0       	push   0xc002276e
c00129e1:	50                   	push   eax
c00129e2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00129e6:	56                   	push   esi
c00129e7:	e8 98 8e ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00129ec:	89 34 24             	mov    DWORD PTR [esp],esi
c00129ef:	e8 7c db fe ff       	call   c0000570 <strlen>
c00129f4:	83 c4 10             	add    esp,0x10
c00129f7:	83 e8 01             	sub    eax,0x1
c00129fa:	74 21                	je     c0012a1d <SysOpen(regs*)+0x68>
c00129fc:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012a00:	eb 12                	jmp    c0012a14 <SysOpen(regs*)+0x5f>
c0012a02:	83 fa 3a             	cmp    edx,0x3a
c0012a05:	74 12                	je     c0012a19 <SysOpen(regs*)+0x64>
c0012a07:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012a0b:	83 e8 01             	sub    eax,0x1
c0012a0e:	74 0d                	je     c0012a1d <SysOpen(regs*)+0x68>
c0012a10:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012a14:	83 fa 2e             	cmp    edx,0x2e
c0012a17:	75 e9                	jne    c0012a02 <SysOpen(regs*)+0x4d>
c0012a19:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012a1d:	83 ec 08             	sub    esp,0x8
c0012a20:	68 72 27 02 c0       	push   0xc0022772
c0012a25:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a28:	50                   	push   eax
c0012a29:	e8 3f ff ff ff       	call   c001296d <string_ends_with(char const*, char const*)>
c0012a2e:	83 c4 10             	add    esp,0x10
c0012a31:	85 c0                	test   eax,eax
c0012a33:	74 1d                	je     c0012a52 <SysOpen(regs*)+0x9d>
c0012a35:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a38:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012a3e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012a45:	81 c4 04 01 00 00    	add    esp,0x104
c0012a4b:	31 c0                	xor    eax,eax
c0012a4d:	31 d2                	xor    edx,edx
c0012a4f:	5b                   	pop    ebx
c0012a50:	5e                   	pop    esi
c0012a51:	c3                   	ret    
c0012a52:	83 ec 08             	sub    esp,0x8
c0012a55:	68 77 27 02 c0       	push   0xc0022777
c0012a5a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a5d:	50                   	push   eax
c0012a5e:	e8 0a ff ff ff       	call   c001296d <string_ends_with(char const*, char const*)>
c0012a63:	83 c4 10             	add    esp,0x10
c0012a66:	85 c0                	test   eax,eax
c0012a68:	75 cb                	jne    c0012a35 <SysOpen(regs*)+0x80>
c0012a6a:	83 ec 08             	sub    esp,0x8
c0012a6d:	68 73 27 02 c0       	push   0xc0022773
c0012a72:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a75:	50                   	push   eax
c0012a76:	e8 d5 dc fe ff       	call   c0000750 <strcmp>
c0012a7b:	83 c4 10             	add    esp,0x10
c0012a7e:	85 c0                	test   eax,eax
c0012a80:	74 b3                	je     c0012a35 <SysOpen(regs*)+0x80>
c0012a82:	83 ec 08             	sub    esp,0x8
c0012a85:	68 72 27 02 c0       	push   0xc0022772
c0012a8a:	56                   	push   esi
c0012a8b:	e8 dd fe ff ff       	call   c001296d <string_ends_with(char const*, char const*)>
c0012a90:	83 c4 10             	add    esp,0x10
c0012a93:	85 c0                	test   eax,eax
c0012a95:	75 9e                	jne    c0012a35 <SysOpen(regs*)+0x80>
c0012a97:	83 ec 08             	sub    esp,0x8
c0012a9a:	68 7c 27 02 c0       	push   0xc002277c
c0012a9f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012aa2:	50                   	push   eax
c0012aa3:	e8 c5 fe ff ff       	call   c001296d <string_ends_with(char const*, char const*)>
c0012aa8:	83 c4 10             	add    esp,0x10
c0012aab:	85 c0                	test   eax,eax
c0012aad:	0f 85 eb 00 00 00    	jne    c0012b9e <SysOpen(regs*)+0x1e9>
c0012ab3:	83 ec 08             	sub    esp,0x8
c0012ab6:	68 81 27 02 c0       	push   0xc0022781
c0012abb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012abe:	50                   	push   eax
c0012abf:	e8 a9 fe ff ff       	call   c001296d <string_ends_with(char const*, char const*)>
c0012ac4:	83 c4 10             	add    esp,0x10
c0012ac7:	85 c0                	test   eax,eax
c0012ac9:	0f 85 cf 00 00 00    	jne    c0012b9e <SysOpen(regs*)+0x1e9>
c0012acf:	83 ec 08             	sub    esp,0x8
c0012ad2:	68 7d 27 02 c0       	push   0xc002277d
c0012ad7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012ada:	51                   	push   ecx
c0012adb:	e8 70 dc fe ff       	call   c0000750 <strcmp>
c0012ae0:	83 c4 10             	add    esp,0x10
c0012ae3:	85 c0                	test   eax,eax
c0012ae5:	0f 84 b3 00 00 00    	je     c0012b9e <SysOpen(regs*)+0x1e9>
c0012aeb:	83 ec 08             	sub    esp,0x8
c0012aee:	68 7c 27 02 c0       	push   0xc002277c
c0012af3:	56                   	push   esi
c0012af4:	e8 74 fe ff ff       	call   c001296d <string_ends_with(char const*, char const*)>
c0012af9:	83 c4 10             	add    esp,0x10
c0012afc:	85 c0                	test   eax,eax
c0012afe:	0f 85 9a 00 00 00    	jne    c0012b9e <SysOpen(regs*)+0x1e9>
c0012b04:	83 ec 0c             	sub    esp,0xc
c0012b07:	68 14 01 00 00       	push   0x114
c0012b0c:	e8 d5 4f ff ff       	call   c0007ae6 <malloc>
c0012b11:	83 c4 0c             	add    esp,0xc
c0012b14:	89 c6                	mov    esi,eax
c0012b16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b1b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012b1e:	50                   	push   eax
c0012b1f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012b22:	52                   	push   edx
c0012b23:	56                   	push   esi
c0012b24:	e8 53 90 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0012b29:	83 c4 10             	add    esp,0x10
c0012b2c:	85 f6                	test   esi,esi
c0012b2e:	74 5b                	je     c0012b8b <SysOpen(regs*)+0x1d6>
c0012b30:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012b33:	0f b6 c2             	movzx  eax,dl
c0012b36:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012b39:	89 d0                	mov    eax,edx
c0012b3b:	83 e0 01             	and    eax,0x1
c0012b3e:	f6 c2 02             	test   dl,0x2
c0012b41:	74 03                	je     c0012b46 <SysOpen(regs*)+0x191>
c0012b43:	83 c8 02             	or     eax,0x2
c0012b46:	f6 c2 04             	test   dl,0x4
c0012b49:	74 03                	je     c0012b4e <SysOpen(regs*)+0x199>
c0012b4b:	83 c8 04             	or     eax,0x4
c0012b4e:	f6 c2 08             	test   dl,0x8
c0012b51:	74 03                	je     c0012b56 <SysOpen(regs*)+0x1a1>
c0012b53:	83 c8 0a             	or     eax,0xa
c0012b56:	80 e2 10             	and    dl,0x10
c0012b59:	74 03                	je     c0012b5e <SysOpen(regs*)+0x1a9>
c0012b5b:	83 c8 12             	or     eax,0x12
c0012b5e:	83 ec 08             	sub    esp,0x8
c0012b61:	50                   	push   eax
c0012b62:	56                   	push   esi
c0012b63:	e8 32 90 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0012b68:	83 c4 10             	add    esp,0x10
c0012b6b:	85 c0                	test   eax,eax
c0012b6d:	75 1c                	jne    c0012b8b <SysOpen(regs*)+0x1d6>
c0012b6f:	83 ec 0c             	sub    esp,0xc
c0012b72:	56                   	push   esi
c0012b73:	e8 6e 66 ff ff       	call   c00091e6 <UnixFile::getFileDescriptor()>
c0012b78:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012b7b:	83 c4 10             	add    esp,0x10
c0012b7e:	89 02                	mov    DWORD PTR [edx],eax
c0012b80:	c1 f8 1f             	sar    eax,0x1f
c0012b83:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012b86:	e9 ba fe ff ff       	jmp    c0012a45 <SysOpen(regs*)+0x90>
c0012b8b:	81 c4 04 01 00 00    	add    esp,0x104
c0012b91:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012b96:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012b9b:	5b                   	pop    ebx
c0012b9c:	5e                   	pop    esi
c0012b9d:	c3                   	ret    
c0012b9e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012ba1:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012ba7:	e9 92 fe ff ff       	jmp    c0012a3e <SysOpen(regs*)+0x89>

c0012bac <KeSystemCall(regs*, void*)>:
c0012bac:	53                   	push   ebx
c0012bad:	83 ec 08             	sub    esp,0x8
c0012bb0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012bb4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012bb7:	83 f8 3e             	cmp    eax,0x3e
c0012bba:	77 16                	ja     c0012bd2 <KeSystemCall(regs*, void*)+0x26>
c0012bbc:	8b 14 85 a0 3f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc060]
c0012bc3:	85 d2                	test   edx,edx
c0012bc5:	74 0b                	je     c0012bd2 <KeSystemCall(regs*, void*)+0x26>
c0012bc7:	83 ec 0c             	sub    esp,0xc
c0012bca:	53                   	push   ebx
c0012bcb:	ff d2                	call   edx
c0012bcd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012bd0:	eb 0d                	jmp    c0012bdf <KeSystemCall(regs*, void*)+0x33>
c0012bd2:	52                   	push   edx
c0012bd3:	52                   	push   edx
c0012bd4:	50                   	push   eax
c0012bd5:	68 86 27 02 c0       	push   0xc0022786
c0012bda:	e8 96 7d ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0012bdf:	83 c4 10             	add    esp,0x10
c0012be2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012be7:	31 d2                	xor    edx,edx
c0012be9:	83 c4 08             	add    esp,0x8
c0012bec:	5b                   	pop    ebx
c0012bed:	c3                   	ret    
c0012bee:	66 90                	xchg   ax,ax

c0012bf0 <KeSwitchEndian16(unsigned short)>:
c0012bf0:	83 ec 04             	sub    esp,0x4
c0012bf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012bf7:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012bfb:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012bff:	c1 f8 08             	sar    eax,0x8
c0012c02:	89 c2                	mov    edx,eax
c0012c04:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012c08:	c1 e0 08             	shl    eax,0x8
c0012c0b:	09 d0                	or     eax,edx
c0012c0d:	83 c4 04             	add    esp,0x4
c0012c10:	c3                   	ret    
c0012c11:	8d 76 00             	lea    esi,[esi+0x0]

c0012c14 <KeSwitchEndian32(unsigned int)>:
c0012c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c18:	c1 e8 18             	shr    eax,0x18
c0012c1b:	89 c2                	mov    edx,eax
c0012c1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c21:	c1 e0 08             	shl    eax,0x8
c0012c24:	25 00 00 ff 00       	and    eax,0xff0000
c0012c29:	09 c2                	or     edx,eax
c0012c2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c2f:	c1 e8 08             	shr    eax,0x8
c0012c32:	25 00 ff 00 00       	and    eax,0xff00
c0012c37:	09 c2                	or     edx,eax
c0012c39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c3d:	c1 e0 18             	shl    eax,0x18
c0012c40:	09 d0                	or     eax,edx
c0012c42:	c3                   	ret    
c0012c43:	90                   	nop

c0012c44 <EthernetCRC32(unsigned char*, int)>:
c0012c44:	83 ec 10             	sub    esp,0x10
c0012c47:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012c4c:	75 0a                	jne    c0012c58 <EthernetCRC32(unsigned char*, int)+0x14>
c0012c4e:	b8 00 00 00 00       	mov    eax,0x0
c0012c53:	e9 8c 00 00 00       	jmp    c0012ce4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012c58:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012c5d:	7f 09                	jg     c0012c68 <EthernetCRC32(unsigned char*, int)+0x24>
c0012c5f:	b8 00 00 00 00       	mov    eax,0x0
c0012c64:	eb 7e                	jmp    c0012ce4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012c66:	66 90                	xchg   ax,ax
c0012c68:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012c70:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012c78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c7c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012c80:	7d 5a                	jge    c0012cdc <EthernetCRC32(unsigned char*, int)+0x98>
c0012c82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c8a:	01 d0                	add    eax,edx
c0012c8c:	8a 00                	mov    al,BYTE PTR [eax]
c0012c8e:	0f b6 c0             	movzx  eax,al
c0012c91:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012c95:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0012ca0:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012ca5:	7f 2d                	jg     c0012cd4 <EthernetCRC32(unsigned char*, int)+0x90>
c0012ca7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cab:	83 e0 01             	and    eax,0x1
c0012cae:	74 10                	je     c0012cc0 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012cb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cb4:	d1 e8                	shr    eax,1
c0012cb6:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012cbb:	eb 0b                	jmp    c0012cc8 <EthernetCRC32(unsigned char*, int)+0x84>
c0012cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0012cc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cc4:	d1 e8                	shr    eax,1
c0012cc6:	66 90                	xchg   ax,ax
c0012cc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ccc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012cd1:	eb cd                	jmp    c0012ca0 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012cd3:	90                   	nop
c0012cd4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012cd9:	eb 9d                	jmp    c0012c78 <EthernetCRC32(unsigned char*, int)+0x34>
c0012cdb:	90                   	nop
c0012cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ce0:	f7 d0                	not    eax
c0012ce2:	66 90                	xchg   ax,ax
c0012ce4:	83 c4 10             	add    esp,0x10
c0012ce7:	c3                   	ret    

c0012ce8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012ce8:	83 ec 2c             	sub    esp,0x2c
c0012ceb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012cef:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012cf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cf8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012cfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012d03:	0f b7 c0             	movzx  eax,ax
c0012d06:	3d 06 08 00 00       	cmp    eax,0x806
c0012d0b:	75 13                	jne    c0012d20 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012d0d:	83 ec 0c             	sub    esp,0xc
c0012d10:	68 9a 27 02 c0       	push   0xc002279a
c0012d15:	e8 5b 7c ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0012d1a:	83 c4 10             	add    esp,0x10
c0012d1d:	eb 25                	jmp    c0012d44 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012d1f:	90                   	nop
c0012d20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012d27:	0f b7 c0             	movzx  eax,ax
c0012d2a:	3d 00 08 00 00       	cmp    eax,0x800
c0012d2f:	75 13                	jne    c0012d44 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012d31:	83 ec 0c             	sub    esp,0xc
c0012d34:	68 b0 27 02 c0       	push   0xc00227b0
c0012d39:	e8 37 7c ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0012d3e:	83 c4 10             	add    esp,0x10
c0012d41:	8d 76 00             	lea    esi,[esi+0x0]
c0012d44:	90                   	nop
c0012d45:	83 c4 2c             	add    esp,0x2c
c0012d48:	c3                   	ret    

c0012d49 <CmOpen(char const*)>:
c0012d49:	57                   	push   edi
c0012d4a:	56                   	push   esi
c0012d4b:	53                   	push   ebx
c0012d4c:	83 ec 1c             	sub    esp,0x1c
c0012d4f:	6a 30                	push   0x30
c0012d51:	e8 90 4d ff ff       	call   c0007ae6 <malloc>
c0012d56:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012d5d:	89 c3                	mov    ebx,eax
c0012d5f:	e8 82 4d ff ff       	call   c0007ae6 <malloc>
c0012d64:	83 c4 0c             	add    esp,0xc
c0012d67:	89 c6                	mov    esi,eax
c0012d69:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012d6f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012d73:	50                   	push   eax
c0012d74:	e8 03 8e ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0012d79:	83 c4 0c             	add    esp,0xc
c0012d7c:	89 33                	mov    DWORD PTR [ebx],esi
c0012d7e:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012d82:	50                   	push   eax
c0012d83:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012d87:	50                   	push   eax
c0012d88:	56                   	push   esi
c0012d89:	e8 0e 91 ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c0012d8e:	5a                   	pop    edx
c0012d8f:	59                   	pop    ecx
c0012d90:	6a 01                	push   0x1
c0012d92:	ff 33                	push   DWORD PTR [ebx]
c0012d94:	e8 01 8e ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0012d99:	5e                   	pop    esi
c0012d9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d9e:	e8 43 4d ff ff       	call   c0007ae6 <malloc>
c0012da3:	5a                   	pop    edx
c0012da4:	89 c7                	mov    edi,eax
c0012da6:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012daa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012dac:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dae:	56                   	push   esi
c0012daf:	57                   	push   edi
c0012db0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012db4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012db8:	50                   	push   eax
c0012db9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012dbc:	83 c4 14             	add    esp,0x14
c0012dbf:	ff 33                	push   DWORD PTR [ebx]
c0012dc1:	e8 32 8e ff ff       	call   c000bbf8 <File::close()>
c0012dc6:	59                   	pop    ecx
c0012dc7:	58                   	pop    eax
c0012dc8:	6a 13                	push   0x13
c0012dca:	ff 33                	push   DWORD PTR [ebx]
c0012dcc:	e8 c9 8d ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0012dd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012dd3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dd5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012dd8:	57                   	push   edi
c0012dd9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ddd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012de1:	50                   	push   eax
c0012de2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012de5:	83 c4 14             	add    esp,0x14
c0012de8:	57                   	push   edi
c0012de9:	e8 08 4d ff ff       	call   c0007af6 <free>
c0012dee:	83 c4 10             	add    esp,0x10
c0012df1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012df4:	75 10                	jne    c0012e06 <CmOpen(char const*)+0xbd>
c0012df6:	83 ec 0c             	sub    esp,0xc
c0012df9:	68 c5 27 02 c0       	push   0xc00227c5
c0012dfe:	e8 10 e9 ff ff       	call   c0011713 <KePanic(char const*)>
c0012e03:	83 c4 10             	add    esp,0x10
c0012e06:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012e09:	50                   	push   eax
c0012e0a:	6a 00                	push   0x0
c0012e0c:	6a 00                	push   0x0
c0012e0e:	ff 33                	push   DWORD PTR [ebx]
c0012e10:	e8 43 8e ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0012e15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e17:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e19:	89 34 24             	mov    DWORD PTR [esp],esi
c0012e1c:	57                   	push   edi
c0012e1d:	6a 00                	push   0x0
c0012e1f:	6a 2b                	push   0x2b
c0012e21:	50                   	push   eax
c0012e22:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012e25:	83 c4 1c             	add    esp,0x1c
c0012e28:	6a 00                	push   0x0
c0012e2a:	6a 00                	push   0x0
c0012e2c:	ff 33                	push   DWORD PTR [ebx]
c0012e2e:	e8 25 8e ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0012e33:	83 c4 0c             	add    esp,0xc
c0012e36:	6a 08                	push   0x8
c0012e38:	68 d6 27 02 c0       	push   0xc00227d6
c0012e3d:	57                   	push   edi
c0012e3e:	e8 3d d5 fe ff       	call   c0000380 <memcmp>
c0012e43:	83 c4 10             	add    esp,0x10
c0012e46:	85 c0                	test   eax,eax
c0012e48:	74 10                	je     c0012e5a <CmOpen(char const*)+0x111>
c0012e4a:	83 ec 0c             	sub    esp,0xc
c0012e4d:	68 df 27 02 c0       	push   0xc00227df
c0012e52:	e8 bc e8 ff ff       	call   c0011713 <KePanic(char const*)>
c0012e57:	83 c4 10             	add    esp,0x10
c0012e5a:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012e5e:	89 d8                	mov    eax,ebx
c0012e60:	83 c4 10             	add    esp,0x10
c0012e63:	5b                   	pop    ebx
c0012e64:	5e                   	pop    esi
c0012e65:	5f                   	pop    edi
c0012e66:	c3                   	ret    

c0012e67 <CmClose(Reghive_Tag*)>:
c0012e67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e6b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012e6f:	74 0b                	je     c0012e7c <CmClose(Reghive_Tag*)+0x15>
c0012e71:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e77:	e9 7c 8d ff ff       	jmp    c000bbf8 <File::close()>
c0012e7c:	c3                   	ret    

c0012e7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012e7d:	53                   	push   ebx
c0012e7e:	83 ec 18             	sub    esp,0x18
c0012e81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012e85:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e89:	74 29                	je     c0012eb4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012e8b:	50                   	push   eax
c0012e8c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012e91:	99                   	cdq    
c0012e92:	52                   	push   edx
c0012e93:	50                   	push   eax
c0012e94:	ff 33                	push   DWORD PTR [ebx]
c0012e96:	e8 bd 8d ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0012e9b:	5a                   	pop    edx
c0012e9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e9e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012ea2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ea4:	51                   	push   ecx
c0012ea5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012ea9:	6a 00                	push   0x0
c0012eab:	6a 2b                	push   0x2b
c0012ead:	50                   	push   eax
c0012eae:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012eb1:	83 c4 20             	add    esp,0x20
c0012eb4:	83 c4 18             	add    esp,0x18
c0012eb7:	5b                   	pop    ebx
c0012eb8:	c3                   	ret    

c0012eb9 <CmGetString(Reghive_Tag*, int, char*)>:
c0012eb9:	55                   	push   ebp
c0012eba:	57                   	push   edi
c0012ebb:	56                   	push   esi
c0012ebc:	53                   	push   ebx
c0012ebd:	31 db                	xor    ebx,ebx
c0012ebf:	83 ec 70             	sub    esp,0x70
c0012ec2:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012ec9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012ecd:	50                   	push   eax
c0012ece:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012ed5:	55                   	push   ebp
c0012ed6:	e8 a2 ff ff ff       	call   c0012e7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012edb:	83 c4 10             	add    esp,0x10
c0012ede:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012ee3:	c1 e0 08             	shl    eax,0x8
c0012ee6:	89 c2                	mov    edx,eax
c0012ee8:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012eed:	09 d0                	or     eax,edx
c0012eef:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012ef4:	c1 e0 08             	shl    eax,0x8
c0012ef7:	09 d0                	or     eax,edx
c0012ef9:	74 25                	je     c0012f20 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012efb:	6b fb 0d             	imul   edi,ebx,0xd
c0012efe:	52                   	push   edx
c0012eff:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012f03:	52                   	push   edx
c0012f04:	50                   	push   eax
c0012f05:	55                   	push   ebp
c0012f06:	e8 72 ff ff ff       	call   c0012e7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f0b:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012f0f:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012f16:	b9 27 00 00 00       	mov    ecx,0x27
c0012f1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f1d:	83 c4 10             	add    esp,0x10
c0012f20:	83 c3 03             	add    ebx,0x3
c0012f23:	83 fb 15             	cmp    ebx,0x15
c0012f26:	75 b6                	jne    c0012ede <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012f28:	83 c4 6c             	add    esp,0x6c
c0012f2b:	5b                   	pop    ebx
c0012f2c:	5e                   	pop    esi
c0012f2d:	5f                   	pop    edi
c0012f2e:	5d                   	pop    ebp
c0012f2f:	c3                   	ret    

c0012f30 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012f30:	83 ec 40             	sub    esp,0x40
c0012f33:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012f37:	50                   	push   eax
c0012f38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f40:	e8 38 ff ff ff       	call   c0012e7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f45:	83 c4 10             	add    esp,0x10
c0012f48:	83 c8 ff             	or     eax,0xffffffff
c0012f4b:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012f50:	75 19                	jne    c0012f6b <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012f52:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012f57:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012f5c:	c1 e0 08             	shl    eax,0x8
c0012f5f:	09 c2                	or     edx,eax
c0012f61:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012f66:	c1 e0 10             	shl    eax,0x10
c0012f69:	09 d0                	or     eax,edx
c0012f6b:	83 c4 3c             	add    esp,0x3c
c0012f6e:	c3                   	ret    

c0012f6f <CmGetNext(Reghive_Tag*, int)>:
c0012f6f:	83 ec 40             	sub    esp,0x40
c0012f72:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012f76:	50                   	push   eax
c0012f77:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f7f:	e8 f9 fe ff ff       	call   c0012e7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f84:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012f89:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012f8e:	c1 e0 08             	shl    eax,0x8
c0012f91:	09 c2                	or     edx,eax
c0012f93:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012f98:	83 c4 4c             	add    esp,0x4c
c0012f9b:	c1 e0 10             	shl    eax,0x10
c0012f9e:	09 d0                	or     eax,edx
c0012fa0:	c3                   	ret    

c0012fa1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012fa1:	53                   	push   ebx
c0012fa2:	83 ec 18             	sub    esp,0x18
c0012fa5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012fa9:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012fad:	74 29                	je     c0012fd8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012faf:	50                   	push   eax
c0012fb0:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012fb5:	99                   	cdq    
c0012fb6:	52                   	push   edx
c0012fb7:	50                   	push   eax
c0012fb8:	ff 33                	push   DWORD PTR [ebx]
c0012fba:	e8 99 8c ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0012fbf:	5a                   	pop    edx
c0012fc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fc2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012fc6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fc8:	51                   	push   ecx
c0012fc9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012fcd:	6a 00                	push   0x0
c0012fcf:	6a 2b                	push   0x2b
c0012fd1:	50                   	push   eax
c0012fd2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012fd5:	83 c4 20             	add    esp,0x20
c0012fd8:	83 c4 18             	add    esp,0x18
c0012fdb:	5b                   	pop    ebx
c0012fdc:	c3                   	ret    

c0012fdd <CmFreeExtent(Reghive_Tag*, int)>:
c0012fdd:	53                   	push   ebx
c0012fde:	83 ec 3c             	sub    esp,0x3c
c0012fe1:	6a 2b                	push   0x2b
c0012fe3:	6a 00                	push   0x0
c0012fe5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012fe9:	53                   	push   ebx
c0012fea:	e8 01 d5 fe ff       	call   c00004f0 <memset>
c0012fef:	83 c4 0c             	add    esp,0xc
c0012ff2:	53                   	push   ebx
c0012ff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ffb:	e8 a1 ff ff ff       	call   c0012fa1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013000:	83 c4 48             	add    esp,0x48
c0013003:	5b                   	pop    ebx
c0013004:	c3                   	ret    

c0013005 <CmUpdateHeader(Reghive_Tag*)>:
c0013005:	83 ec 0c             	sub    esp,0xc
c0013008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001300c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0013010:	74 10                	je     c0013022 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0013012:	52                   	push   edx
c0013013:	8d 50 05             	lea    edx,[eax+0x5]
c0013016:	52                   	push   edx
c0013017:	6a 00                	push   0x0
c0013019:	50                   	push   eax
c001301a:	e8 82 ff ff ff       	call   c0012fa1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001301f:	83 c4 10             	add    esp,0x10
c0013022:	83 c4 0c             	add    esp,0xc
c0013025:	c3                   	ret    

c0013026 <CmExpand(Reghive_Tag*, int)>:
c0013026:	57                   	push   edi
c0013027:	56                   	push   esi
c0013028:	83 ce ff             	or     esi,0xffffffff
c001302b:	53                   	push   ebx
c001302c:	83 ec 30             	sub    esp,0x30
c001302f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013033:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0013037:	74 5f                	je     c0013098 <CmExpand(Reghive_Tag*, int)+0x72>
c0013039:	31 d2                	xor    edx,edx
c001303b:	31 f6                	xor    esi,esi
c001303d:	50                   	push   eax
c001303e:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0013042:	52                   	push   edx
c0013043:	50                   	push   eax
c0013044:	ff 33                	push   DWORD PTR [ebx]
c0013046:	e8 0d 8c ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c001304b:	83 c4 0c             	add    esp,0xc
c001304e:	6a 2b                	push   0x2b
c0013050:	6a 00                	push   0x0
c0013052:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0013056:	57                   	push   edi
c0013057:	e8 94 d4 fe ff       	call   c00004f0 <memset>
c001305c:	83 c4 10             	add    esp,0x10
c001305f:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0013063:	7d 1b                	jge    c0013080 <CmExpand(Reghive_Tag*, int)+0x5a>
c0013065:	83 ec 0c             	sub    esp,0xc
c0013068:	8b 03                	mov    eax,DWORD PTR [ebx]
c001306a:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c001306e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013070:	46                   	inc    esi
c0013071:	51                   	push   ecx
c0013072:	57                   	push   edi
c0013073:	6a 00                	push   0x0
c0013075:	6a 2b                	push   0x2b
c0013077:	50                   	push   eax
c0013078:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001307b:	83 c4 20             	add    esp,0x20
c001307e:	eb df                	jmp    c001305f <CmExpand(Reghive_Tag*, int)+0x39>
c0013080:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013084:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0013087:	83 ec 0c             	sub    esp,0xc
c001308a:	01 f2                	add    edx,esi
c001308c:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c001308f:	53                   	push   ebx
c0013090:	e8 70 ff ff ff       	call   c0013005 <CmUpdateHeader(Reghive_Tag*)>
c0013095:	83 c4 10             	add    esp,0x10
c0013098:	83 c4 30             	add    esp,0x30
c001309b:	89 f0                	mov    eax,esi
c001309d:	5b                   	pop    ebx
c001309e:	5e                   	pop    esi
c001309f:	5f                   	pop    edi
c00130a0:	c3                   	ret    

c00130a1 <CmFindUnusedExtent(Reghive_Tag*)>:
c00130a1:	55                   	push   ebp
c00130a2:	57                   	push   edi
c00130a3:	56                   	push   esi
c00130a4:	53                   	push   ebx
c00130a5:	83 cb ff             	or     ebx,0xffffffff
c00130a8:	83 ec 1c             	sub    esp,0x1c
c00130ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00130af:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00130b3:	74 68                	je     c001311d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00130b5:	be 2b 00 00 00       	mov    esi,0x2b
c00130ba:	51                   	push   ecx
c00130bb:	31 ff                	xor    edi,edi
c00130bd:	6a 00                	push   0x0
c00130bf:	31 db                	xor    ebx,ebx
c00130c1:	6a 00                	push   0x0
c00130c3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00130c6:	e8 8d 8b ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c00130cb:	83 c4 10             	add    esp,0x10
c00130ce:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c00130d1:	76 3b                	jbe    c001310e <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c00130d3:	83 ec 0c             	sub    esp,0xc
c00130d6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00130d9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00130dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00130df:	51                   	push   ecx
c00130e0:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c00130e4:	51                   	push   ecx
c00130e5:	6a 00                	push   0x0
c00130e7:	6a 01                	push   0x1
c00130e9:	50                   	push   eax
c00130ea:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00130ed:	83 c4 20             	add    esp,0x20
c00130f0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00130f5:	74 26                	je     c001311d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00130f7:	43                   	inc    ebx
c00130f8:	52                   	push   edx
c00130f9:	57                   	push   edi
c00130fa:	56                   	push   esi
c00130fb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00130fe:	e8 55 8b ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0013103:	83 c6 2b             	add    esi,0x2b
c0013106:	83 d7 00             	adc    edi,0x0
c0013109:	83 c4 10             	add    esp,0x10
c001310c:	eb c0                	jmp    c00130ce <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c001310e:	50                   	push   eax
c001310f:	50                   	push   eax
c0013110:	6a 40                	push   0x40
c0013112:	55                   	push   ebp
c0013113:	e8 0e ff ff ff       	call   c0013026 <CmExpand(Reghive_Tag*, int)>
c0013118:	83 c4 10             	add    esp,0x10
c001311b:	89 c3                	mov    ebx,eax
c001311d:	83 c4 1c             	add    esp,0x1c
c0013120:	89 d8                	mov    eax,ebx
c0013122:	5b                   	pop    ebx
c0013123:	5e                   	pop    esi
c0013124:	5f                   	pop    edi
c0013125:	5d                   	pop    ebp
c0013126:	c3                   	ret    

c0013127 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0013127:	55                   	push   ebp
c0013128:	57                   	push   edi
c0013129:	56                   	push   esi
c001312a:	53                   	push   ebx
c001312b:	81 ec 88 00 00 00    	sub    esp,0x88
c0013131:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0013138:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001313f:	e8 5d ff ff ff       	call   c00130a1 <CmFindUnusedExtent(Reghive_Tag*)>
c0013144:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013148:	83 c4 0c             	add    esp,0xc
c001314b:	6a 2b                	push   0x2b
c001314d:	6a 00                	push   0x0
c001314f:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0013153:	55                   	push   ebp
c0013154:	e8 97 d3 fe ff       	call   c00004f0 <memset>
c0013159:	83 c4 10             	add    esp,0x10
c001315c:	85 db                	test   ebx,ebx
c001315e:	74 12                	je     c0013172 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0013160:	51                   	push   ecx
c0013161:	55                   	push   ebp
c0013162:	53                   	push   ebx
c0013163:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001316a:	e8 0e fd ff ff       	call   c0012e7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001316f:	83 c4 10             	add    esp,0x10
c0013172:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0013176:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c001317d:	b9 2b 00 00 00       	mov    ecx,0x2b
c0013182:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013184:	85 db                	test   ebx,ebx
c0013186:	74 49                	je     c00131d1 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0013188:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c001318d:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0013192:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013196:	c1 e0 08             	shl    eax,0x8
c0013199:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001319f:	09 c8                	or     eax,ecx
c00131a1:	74 11                	je     c00131b4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00131a3:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00131a7:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00131ab:	c1 e8 10             	shr    eax,0x10
c00131ae:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00131b2:	eb 0f                	jmp    c00131c3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00131b4:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00131b9:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00131be:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00131c3:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00131c7:	c1 ea 08             	shr    edx,0x8
c00131ca:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00131cf:	eb 0f                	jmp    c00131e0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00131d1:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00131d6:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00131db:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00131e0:	52                   	push   edx
c00131e1:	8d 44 24 49          	lea    eax,[esp+0x49]
c00131e5:	50                   	push   eax
c00131e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00131ea:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00131f1:	e8 ab fd ff ff       	call   c0012fa1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131f6:	83 c4 10             	add    esp,0x10
c00131f9:	85 db                	test   ebx,ebx
c00131fb:	74 12                	je     c001320f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00131fd:	50                   	push   eax
c00131fe:	55                   	push   ebp
c00131ff:	53                   	push   ebx
c0013200:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013207:	e8 95 fd ff ff       	call   c0012fa1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001320c:	83 c4 10             	add    esp,0x10
c001320f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013213:	83 c4 7c             	add    esp,0x7c
c0013216:	5b                   	pop    ebx
c0013217:	5e                   	pop    esi
c0013218:	5f                   	pop    edi
c0013219:	5d                   	pop    ebp
c001321a:	c3                   	ret    

c001321b <CmSetString(Reghive_Tag*, int, char const*)>:
c001321b:	55                   	push   ebp
c001321c:	57                   	push   edi
c001321d:	56                   	push   esi
c001321e:	53                   	push   ebx
c001321f:	bb 27 00 00 00       	mov    ebx,0x27
c0013224:	81 ec 88 00 00 00    	sub    esp,0x88
c001322a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013231:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0013238:	e8 33 d3 fe ff       	call   c0000570 <strlen>
c001323d:	8d 48 26             	lea    ecx,[eax+0x26]
c0013240:	89 c8                	mov    eax,ecx
c0013242:	99                   	cdq    
c0013243:	f7 fb                	idiv   ebx
c0013245:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013249:	83 c4 10             	add    esp,0x10
c001324c:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0013252:	7e 10                	jle    c0013264 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013254:	83 ec 0c             	sub    esp,0xc
c0013257:	68 f0 27 02 c0       	push   0xc00227f0
c001325c:	e8 b2 e4 ff ff       	call   c0011713 <KePanic(char const*)>
c0013261:	83 c4 10             	add    esp,0x10
c0013264:	31 ff                	xor    edi,edi
c0013266:	50                   	push   eax
c0013267:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001326b:	53                   	push   ebx
c001326c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013273:	56                   	push   esi
c0013274:	e8 04 fc ff ff       	call   c0012e7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013279:	83 c4 10             	add    esp,0x10
c001327c:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0013280:	89 d0                	mov    eax,edx
c0013282:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0013286:	c1 e0 08             	shl    eax,0x8
c0013289:	09 c2                	or     edx,eax
c001328b:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001328f:	c1 e2 08             	shl    edx,0x8
c0013292:	09 c2                	or     edx,eax
c0013294:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0013298:	7e 76                	jle    c0013310 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c001329a:	85 d2                	test   edx,edx
c001329c:	75 25                	jne    c00132c3 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001329e:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00132a3:	8d 44 24 45          	lea    eax,[esp+0x45]
c00132a7:	50                   	push   eax
c00132a8:	6a 00                	push   0x0
c00132aa:	6a 00                	push   0x0
c00132ac:	56                   	push   esi
c00132ad:	e8 75 fe ff ff       	call   c0013127 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00132b2:	83 c4 10             	add    esp,0x10
c00132b5:	89 c2                	mov    edx,eax
c00132b7:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00132ba:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00132bd:	c1 f8 10             	sar    eax,0x10
c00132c0:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00132c3:	55                   	push   ebp
c00132c4:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c00132c8:	55                   	push   ebp
c00132c9:	52                   	push   edx
c00132ca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00132ce:	56                   	push   esi
c00132cf:	e8 a9 fb ff ff       	call   c0012e7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00132d4:	83 c4 0c             	add    esp,0xc
c00132d7:	6a 27                	push   0x27
c00132d9:	6a 00                	push   0x0
c00132db:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00132df:	51                   	push   ecx
c00132e0:	e8 0b d2 fe ff       	call   c00004f0 <memset>
c00132e5:	83 c4 0c             	add    esp,0xc
c00132e8:	6b c7 27             	imul   eax,edi,0x27
c00132eb:	6a 27                	push   0x27
c00132ed:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00132f4:	50                   	push   eax
c00132f5:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00132f9:	51                   	push   ecx
c00132fa:	e8 81 d3 fe ff       	call   c0000680 <strncpy>
c00132ff:	83 c4 0c             	add    esp,0xc
c0013302:	55                   	push   ebp
c0013303:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013307:	52                   	push   edx
c0013308:	56                   	push   esi
c0013309:	e8 93 fc ff ff       	call   c0012fa1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001330e:	eb 19                	jmp    c0013329 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0013310:	85 d2                	test   edx,edx
c0013312:	74 18                	je     c001332c <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0013314:	51                   	push   ecx
c0013315:	51                   	push   ecx
c0013316:	52                   	push   edx
c0013317:	56                   	push   esi
c0013318:	e8 c0 fc ff ff       	call   c0012fdd <CmFreeExtent(Reghive_Tag*, int)>
c001331d:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0013321:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013325:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0013329:	83 c4 10             	add    esp,0x10
c001332c:	47                   	inc    edi
c001332d:	83 c3 03             	add    ebx,0x3
c0013330:	83 ff 07             	cmp    edi,0x7
c0013333:	0f 85 43 ff ff ff    	jne    c001327c <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0013339:	50                   	push   eax
c001333a:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001333e:	50                   	push   eax
c001333f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013346:	56                   	push   esi
c0013347:	e8 55 fc ff ff       	call   c0012fa1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001334c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0013352:	5b                   	pop    ebx
c0013353:	5e                   	pop    esi
c0013354:	5f                   	pop    edi
c0013355:	5d                   	pop    ebp
c0013356:	c3                   	ret    

c0013357 <CmGetMatch(char*, char*, bool, bool*)>:
c0013357:	56                   	push   esi
c0013358:	53                   	push   ebx
c0013359:	50                   	push   eax
c001335a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001335e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013363:	74 25                	je     c001338a <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013365:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013368:	31 db                	xor    ebx,ebx
c001336a:	50                   	push   eax
c001336b:	50                   	push   eax
c001336c:	8d 04 9d a0 40 02 c0 	lea    eax,[ebx*4-0x3ffdbf60]
c0013373:	50                   	push   eax
c0013374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013378:	e8 d3 d3 fe ff       	call   c0000750 <strcmp>
c001337d:	83 c4 10             	add    esp,0x10
c0013380:	85 c0                	test   eax,eax
c0013382:	74 2e                	je     c00133b2 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013384:	43                   	inc    ebx
c0013385:	83 fb 3f             	cmp    ebx,0x3f
c0013388:	75 e0                	jne    c001336a <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001338a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001338d:	31 db                	xor    ebx,ebx
c001338f:	8d 04 9d a0 40 02 c0 	lea    eax,[ebx*4-0x3ffdbf60]
c0013396:	51                   	push   ecx
c0013397:	51                   	push   ecx
c0013398:	50                   	push   eax
c0013399:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001339d:	e8 ae d3 fe ff       	call   c0000750 <strcmp>
c00133a2:	83 c4 10             	add    esp,0x10
c00133a5:	85 c0                	test   eax,eax
c00133a7:	74 09                	je     c00133b2 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00133a9:	43                   	inc    ebx
c00133aa:	83 fb 3f             	cmp    ebx,0x3f
c00133ad:	75 e0                	jne    c001338f <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00133af:	83 cb ff             	or     ebx,0xffffffff
c00133b2:	89 d8                	mov    eax,ebx
c00133b4:	5a                   	pop    edx
c00133b5:	5b                   	pop    ebx
c00133b6:	5e                   	pop    esi
c00133b7:	c3                   	ret    

c00133b8 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00133b8:	55                   	push   ebp
c00133b9:	31 c0                	xor    eax,eax
c00133bb:	57                   	push   edi
c00133bc:	56                   	push   esi
c00133bd:	53                   	push   ebx
c00133be:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133c2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00133c6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00133c8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00133cc:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00133cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00133d3:	83 fd 1f             	cmp    ebp,0x1f
c00133d6:	7f 0b                	jg     c00133e3 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00133d8:	0f b6 c2             	movzx  eax,dl
c00133db:	d3 e0                	shl    eax,cl
c00133dd:	09 07                	or     DWORD PTR [edi],eax
c00133df:	b0 01                	mov    al,0x1
c00133e1:	01 33                	add    DWORD PTR [ebx],esi
c00133e3:	5b                   	pop    ebx
c00133e4:	5e                   	pop    esi
c00133e5:	5f                   	pop    edi
c00133e6:	5d                   	pop    ebp
c00133e7:	c3                   	ret    

c00133e8 <CmGetShift(unsigned int*, int*, int, bool*)>:
c00133e8:	57                   	push   edi
c00133e9:	56                   	push   esi
c00133ea:	53                   	push   ebx
c00133eb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00133ef:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00133f3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00133f7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00133fb:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00133fd:	7c 17                	jl     c0013416 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00133ff:	8b 17                	mov    edx,DWORD PTR [edi]
c0013401:	b8 01 00 00 00       	mov    eax,0x1
c0013406:	d3 e0                	shl    eax,cl
c0013408:	48                   	dec    eax
c0013409:	21 d0                	and    eax,edx
c001340b:	d3 ea                	shr    edx,cl
c001340d:	89 17                	mov    DWORD PTR [edi],edx
c001340f:	29 0b                	sub    DWORD PTR [ebx],ecx
c0013411:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013414:	eb 05                	jmp    c001341b <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0013416:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013419:	31 c0                	xor    eax,eax
c001341b:	5b                   	pop    ebx
c001341c:	5e                   	pop    esi
c001341d:	5f                   	pop    edi
c001341e:	c3                   	ret    

c001341f <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001341f:	83 ec 40             	sub    esp,0x40
c0013422:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013426:	50                   	push   eax
c0013427:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001342b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001342f:	e8 49 fa ff ff       	call   c0012e7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013434:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0013438:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c001343c:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0013440:	89 10                	mov    DWORD PTR [eax],edx
c0013442:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013445:	83 c4 4c             	add    esp,0x4c
c0013448:	c3                   	ret    

c0013449 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0013449:	55                   	push   ebp
c001344a:	57                   	push   edi
c001344b:	56                   	push   esi
c001344c:	53                   	push   ebx
c001344d:	83 ec 40             	sub    esp,0x40
c0013450:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013454:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0013458:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c001345c:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0013460:	53                   	push   ebx
c0013461:	56                   	push   esi
c0013462:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013466:	e8 12 fa ff ff       	call   c0012e7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001346b:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001346f:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0013473:	83 c4 0c             	add    esp,0xc
c0013476:	53                   	push   ebx
c0013477:	56                   	push   esi
c0013478:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001347c:	e8 20 fb ff ff       	call   c0012fa1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013481:	83 c4 4c             	add    esp,0x4c
c0013484:	5b                   	pop    ebx
c0013485:	5e                   	pop    esi
c0013486:	5f                   	pop    edi
c0013487:	5d                   	pop    ebp
c0013488:	c3                   	ret    

c0013489 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0013489:	55                   	push   ebp
c001348a:	57                   	push   edi
c001348b:	56                   	push   esi
c001348c:	31 f6                	xor    esi,esi
c001348e:	53                   	push   ebx
c001348f:	31 db                	xor    ebx,ebx
c0013491:	83 ec 40             	sub    esp,0x40
c0013494:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001349c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00134a4:	6a 12                	push   0x12
c00134a6:	68 ee 00 00 00       	push   0xee
c00134ab:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00134af:	e8 3c d0 fe ff       	call   c00004f0 <memset>
c00134b4:	83 c4 10             	add    esp,0x10
c00134b7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00134bb:	6a 08                	push   0x8
c00134bd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00134c1:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00134c5:	50                   	push   eax
c00134c6:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00134ca:	55                   	push   ebp
c00134cb:	57                   	push   edi
c00134cc:	e8 e7 fe ff ff       	call   c00133b8 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00134d1:	83 c4 10             	add    esp,0x10
c00134d4:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00134d8:	50                   	push   eax
c00134d9:	6a 06                	push   0x6
c00134db:	55                   	push   ebp
c00134dc:	57                   	push   edi
c00134dd:	e8 06 ff ff ff       	call   c00133e8 <CmGetShift(unsigned int*, int*, int, bool*)>
c00134e2:	83 c4 10             	add    esp,0x10
c00134e5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00134ea:	74 07                	je     c00134f3 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00134ec:	46                   	inc    esi
c00134ed:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00134f1:	eb e1                	jmp    c00134d4 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00134f3:	43                   	inc    ebx
c00134f4:	83 fb 12             	cmp    ebx,0x12
c00134f7:	75 c2                	jne    c00134bb <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00134f9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00134fd:	31 db                	xor    ebx,ebx
c00134ff:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013502:	50                   	push   eax
c0013503:	50                   	push   eax
c0013504:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0013509:	43                   	inc    ebx
c001350a:	8d 04 85 a0 40 02 c0 	lea    eax,[eax*4-0x3ffdbf60]
c0013511:	50                   	push   eax
c0013512:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013516:	e8 25 d3 fe ff       	call   c0000840 <strcat>
c001351b:	83 c4 10             	add    esp,0x10
c001351e:	83 fb 18             	cmp    ebx,0x18
c0013521:	75 df                	jne    c0013502 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0013523:	83 c4 3c             	add    esp,0x3c
c0013526:	31 c0                	xor    eax,eax
c0013528:	5b                   	pop    ebx
c0013529:	5e                   	pop    esi
c001352a:	5f                   	pop    edi
c001352b:	5d                   	pop    ebp
c001352c:	c3                   	ret    

c001352d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c001352d:	83 ec 40             	sub    esp,0x40
c0013530:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013534:	50                   	push   eax
c0013535:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013539:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001353d:	e8 3b f9 ff ff       	call   c0012e7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013542:	58                   	pop    eax
c0013543:	5a                   	pop    edx
c0013544:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013548:	8d 44 24 15          	lea    eax,[esp+0x15]
c001354c:	50                   	push   eax
c001354d:	e8 37 ff ff ff       	call   c0013489 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0013552:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013557:	83 c4 4c             	add    esp,0x4c
c001355a:	c3                   	ret    

c001355b <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001355b:	55                   	push   ebp
c001355c:	57                   	push   edi
c001355d:	56                   	push   esi
c001355e:	53                   	push   ebx
c001355f:	31 db                	xor    ebx,ebx
c0013561:	83 ec 70             	sub    esp,0x70
c0013564:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001356b:	6a 30                	push   0x30
c001356d:	6a 00                	push   0x0
c001356f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013573:	56                   	push   esi
c0013574:	e8 77 cf fe ff       	call   c00004f0 <memset>
c0013579:	83 c4 10             	add    esp,0x10
c001357c:	83 ec 0c             	sub    esp,0xc
c001357f:	57                   	push   edi
c0013580:	e8 eb cf fe ff       	call   c0000570 <strlen>
c0013585:	83 c4 10             	add    esp,0x10
c0013588:	39 d8                	cmp    eax,ebx
c001358a:	76 16                	jbe    c00135a2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c001358c:	83 ec 0c             	sub    esp,0xc
c001358f:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0013593:	50                   	push   eax
c0013594:	e8 97 d3 fe ff       	call   c0000930 <toupper>
c0013599:	83 c4 10             	add    esp,0x10
c001359c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001359f:	43                   	inc    ebx
c00135a0:	eb da                	jmp    c001357c <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00135a2:	31 f6                	xor    esi,esi
c00135a4:	52                   	push   edx
c00135a5:	31 ff                	xor    edi,edi
c00135a7:	6a 18                	push   0x18
c00135a9:	6a 3f                	push   0x3f
c00135ab:	8d 44 24 24          	lea    eax,[esp+0x24]
c00135af:	50                   	push   eax
c00135b0:	e8 3b cf fe ff       	call   c00004f0 <memset>
c00135b5:	83 c4 10             	add    esp,0x10
c00135b8:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c00135bc:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c00135c0:	84 c0                	test   al,al
c00135c2:	0f 84 b0 00 00 00    	je     c0013678 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00135c8:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00135cc:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00135d1:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00135d5:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00135da:	8d 6e 01             	lea    ebp,[esi+0x1]
c00135dd:	83 ec 0c             	sub    esp,0xc
c00135e0:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00135e4:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00135e8:	53                   	push   ebx
c00135e9:	e8 82 cf fe ff       	call   c0000570 <strlen>
c00135ee:	83 c4 10             	add    esp,0x10
c00135f1:	85 c0                	test   eax,eax
c00135f3:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00135f7:	74 0b                	je     c0013604 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00135f9:	50                   	push   eax
c00135fa:	6a 01                	push   0x1
c00135fc:	53                   	push   ebx
c00135fd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013601:	50                   	push   eax
c0013602:	eb 0a                	jmp    c001360e <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013604:	50                   	push   eax
c0013605:	6a 00                	push   0x0
c0013607:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001360b:	50                   	push   eax
c001360c:	6a 00                	push   0x0
c001360e:	e8 44 fd ff ff       	call   c0013357 <CmGetMatch(char*, char*, bool, bool*)>
c0013613:	83 c4 10             	add    esp,0x10
c0013616:	83 f8 ff             	cmp    eax,0xffffffff
c0013619:	75 1a                	jne    c0013635 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c001361b:	83 ec 0c             	sub    esp,0xc
c001361e:	68 05 28 02 c0       	push   0xc0022805
c0013623:	e8 eb e0 ff ff       	call   c0011713 <KePanic(char const*)>
c0013628:	83 c4 10             	add    esp,0x10
c001362b:	b8 02 00 00 00       	mov    eax,0x2
c0013630:	e9 bc 00 00 00       	jmp    c00136f1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013635:	83 ff 18             	cmp    edi,0x18
c0013638:	75 1a                	jne    c0013654 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001363a:	83 ec 0c             	sub    esp,0xc
c001363d:	68 1a 28 02 c0       	push   0xc002281a
c0013642:	e8 cc e0 ff ff       	call   c0011713 <KePanic(char const*)>
c0013647:	83 c4 10             	add    esp,0x10
c001364a:	b8 01 00 00 00       	mov    eax,0x1
c001364f:	e9 9d 00 00 00       	jmp    c00136f1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013654:	47                   	inc    edi
c0013655:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001365a:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001365e:	74 02                	je     c0013662 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0013660:	89 ee                	mov    esi,ebp
c0013662:	83 ec 0c             	sub    esp,0xc
c0013665:	53                   	push   ebx
c0013666:	e8 05 cf fe ff       	call   c0000570 <strlen>
c001366b:	83 c4 10             	add    esp,0x10
c001366e:	85 c0                	test   eax,eax
c0013670:	74 06                	je     c0013678 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0013672:	46                   	inc    esi
c0013673:	e9 40 ff ff ff       	jmp    c00135b8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013678:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013680:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013688:	31 f6                	xor    esi,esi
c001368a:	50                   	push   eax
c001368b:	31 ff                	xor    edi,edi
c001368d:	6a 12                	push   0x12
c001368f:	68 ee 00 00 00       	push   0xee
c0013694:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001369b:	e8 50 ce fe ff       	call   c00004f0 <memset>
c00136a0:	83 c4 10             	add    esp,0x10
c00136a3:	83 fe 17             	cmp    esi,0x17
c00136a6:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00136aa:	7e 26                	jle    c00136d2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00136ac:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00136b0:	50                   	push   eax
c00136b1:	6a 08                	push   0x8
c00136b3:	55                   	push   ebp
c00136b4:	53                   	push   ebx
c00136b5:	e8 2e fd ff ff       	call   c00133e8 <CmGetShift(unsigned int*, int*, int, bool*)>
c00136ba:	83 c4 10             	add    esp,0x10
c00136bd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00136c2:	74 26                	je     c00136ea <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00136c4:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00136cb:	4e                   	dec    esi
c00136cc:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00136cf:	47                   	inc    edi
c00136d0:	eb 1c                	jmp    c00136ee <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00136d2:	6a 06                	push   0x6
c00136d4:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00136d9:	50                   	push   eax
c00136da:	55                   	push   ebp
c00136db:	53                   	push   ebx
c00136dc:	e8 d7 fc ff ff       	call   c00133b8 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00136e1:	83 c4 10             	add    esp,0x10
c00136e4:	84 c0                	test   al,al
c00136e6:	75 06                	jne    c00136ee <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00136e8:	eb c2                	jmp    c00136ac <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c00136ea:	31 c0                	xor    eax,eax
c00136ec:	eb 03                	jmp    c00136f1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00136ee:	46                   	inc    esi
c00136ef:	eb b2                	jmp    c00136a3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00136f1:	83 c4 6c             	add    esp,0x6c
c00136f4:	5b                   	pop    ebx
c00136f5:	5e                   	pop    esi
c00136f6:	5f                   	pop    edi
c00136f7:	5d                   	pop    ebp
c00136f8:	c3                   	ret    

c00136f9 <CmCreateString(Reghive_Tag*, int, char const*)>:
c00136f9:	53                   	push   ebx
c00136fa:	83 ec 3c             	sub    esp,0x3c
c00136fd:	6a 2b                	push   0x2b
c00136ff:	6a 00                	push   0x0
c0013701:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013705:	53                   	push   ebx
c0013706:	e8 e5 cd fe ff       	call   c00004f0 <memset>
c001370b:	58                   	pop    eax
c001370c:	5a                   	pop    edx
c001370d:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013711:	50                   	push   eax
c0013712:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013716:	e8 40 fe ff ff       	call   c001355b <CmConvertToInternalFilename(char const*, unsigned char*)>
c001371b:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0013720:	83 c4 0c             	add    esp,0xc
c0013723:	6a 15                	push   0x15
c0013725:	6a 00                	push   0x0
c0013727:	8d 44 24 27          	lea    eax,[esp+0x27]
c001372b:	50                   	push   eax
c001372c:	e8 bf cd fe ff       	call   c00004f0 <memset>
c0013731:	53                   	push   ebx
c0013732:	6a 00                	push   0x0
c0013734:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013738:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001373c:	e8 e6 f9 ff ff       	call   c0013127 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013741:	83 c4 58             	add    esp,0x58
c0013744:	5b                   	pop    ebx
c0013745:	c3                   	ret    

c0013746 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013746:	56                   	push   esi
c0013747:	53                   	push   ebx
c0013748:	83 ec 48             	sub    esp,0x48
c001374b:	6a 12                	push   0x12
c001374d:	68 ff 00 00 00       	push   0xff
c0013752:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013756:	56                   	push   esi
c0013757:	e8 94 cd fe ff       	call   c00004f0 <memset>
c001375c:	5a                   	pop    edx
c001375d:	59                   	pop    ecx
c001375e:	56                   	push   esi
c001375f:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013763:	e8 f3 fd ff ff       	call   c001355b <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013768:	83 c4 10             	add    esp,0x10
c001376b:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001376f:	85 db                	test   ebx,ebx
c0013771:	74 42                	je     c00137b5 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0013773:	50                   	push   eax
c0013774:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013778:	50                   	push   eax
c0013779:	53                   	push   ebx
c001377a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001377e:	e8 fa f6 ff ff       	call   c0012e7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013783:	83 c4 0c             	add    esp,0xc
c0013786:	6a 12                	push   0x12
c0013788:	8d 44 24 21          	lea    eax,[esp+0x21]
c001378c:	50                   	push   eax
c001378d:	56                   	push   esi
c001378e:	e8 ed cb fe ff       	call   c0000380 <memcmp>
c0013793:	83 c4 10             	add    esp,0x10
c0013796:	85 c0                	test   eax,eax
c0013798:	74 1e                	je     c00137b8 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001379a:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001379f:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00137a4:	c1 e3 08             	shl    ebx,0x8
c00137a7:	09 d8                	or     eax,ebx
c00137a9:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00137ae:	c1 e3 10             	shl    ebx,0x10
c00137b1:	09 c3                	or     ebx,eax
c00137b3:	eb ba                	jmp    c001376f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00137b5:	83 cb ff             	or     ebx,0xffffffff
c00137b8:	89 d8                	mov    eax,ebx
c00137ba:	83 c4 44             	add    esp,0x44
c00137bd:	5b                   	pop    ebx
c00137be:	5e                   	pop    esi
c00137bf:	c3                   	ret    

c00137c0 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00137c0:	57                   	push   edi
c00137c1:	56                   	push   esi
c00137c2:	53                   	push   ebx
c00137c3:	83 ec 34             	sub    esp,0x34
c00137c6:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00137ca:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00137ce:	6a 2b                	push   0x2b
c00137d0:	6a 00                	push   0x0
c00137d2:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00137d6:	53                   	push   ebx
c00137d7:	e8 14 cd fe ff       	call   c00004f0 <memset>
c00137dc:	58                   	pop    eax
c00137dd:	5a                   	pop    edx
c00137de:	8d 44 24 11          	lea    eax,[esp+0x11]
c00137e2:	50                   	push   eax
c00137e3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00137e7:	e8 6f fd ff ff       	call   c001355b <CmConvertToInternalFilename(char const*, unsigned char*)>
c00137ec:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00137f0:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00137f4:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00137f8:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00137fc:	53                   	push   ebx
c00137fd:	6a 00                	push   0x0
c00137ff:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013803:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013807:	e8 1b f9 ff ff       	call   c0013127 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001380c:	83 c4 50             	add    esp,0x50
c001380f:	5b                   	pop    ebx
c0013810:	5e                   	pop    esi
c0013811:	5f                   	pop    edi
c0013812:	c3                   	ret    

c0013813 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0013813:	55                   	push   ebp
c0013814:	57                   	push   edi
c0013815:	56                   	push   esi
c0013816:	53                   	push   ebx
c0013817:	83 ec 40             	sub    esp,0x40
c001381a:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c001381e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013822:	6a 2b                	push   0x2b
c0013824:	6a 00                	push   0x0
c0013826:	8d 74 24 11          	lea    esi,[esp+0x11]
c001382a:	56                   	push   esi
c001382b:	e8 c0 cc fe ff       	call   c00004f0 <memset>
c0013830:	5f                   	pop    edi
c0013831:	89 ef                	mov    edi,ebp
c0013833:	58                   	pop    eax
c0013834:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013838:	50                   	push   eax
c0013839:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001383d:	e8 19 fd ff ff       	call   c001355b <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013842:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013847:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c001384c:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013851:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013856:	83 c4 10             	add    esp,0x10
c0013859:	85 ed                	test   ebp,ebp
c001385b:	74 14                	je     c0013871 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001385d:	51                   	push   ecx
c001385e:	51                   	push   ecx
c001385f:	57                   	push   edi
c0013860:	53                   	push   ebx
c0013861:	e8 09 f7 ff ff       	call   c0012f6f <CmGetNext(Reghive_Tag*, int)>
c0013866:	83 c4 10             	add    esp,0x10
c0013869:	85 c0                	test   eax,eax
c001386b:	74 04                	je     c0013871 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001386d:	89 c7                	mov    edi,eax
c001386f:	eb e8                	jmp    c0013859 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013871:	56                   	push   esi
c0013872:	6a 00                	push   0x0
c0013874:	57                   	push   edi
c0013875:	53                   	push   ebx
c0013876:	e8 ac f8 ff ff       	call   c0013127 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001387b:	83 c4 0c             	add    esp,0xc
c001387e:	89 c7                	mov    edi,eax
c0013880:	56                   	push   esi
c0013881:	50                   	push   eax
c0013882:	53                   	push   ebx
c0013883:	e8 f5 f5 ff ff       	call   c0012e7d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013888:	58                   	pop    eax
c0013889:	5a                   	pop    edx
c001388a:	6a 6c                	push   0x6c
c001388c:	6a 00                	push   0x0
c001388e:	6a 00                	push   0x0
c0013890:	68 2b 28 02 c0       	push   0xc002282b
c0013895:	57                   	push   edi
c0013896:	53                   	push   ebx
c0013897:	e8 24 ff ff ff       	call   c00137c0 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c001389c:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00138a0:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00138a4:	c1 e8 10             	shr    eax,0x10
c00138a7:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00138ab:	83 c4 1c             	add    esp,0x1c
c00138ae:	56                   	push   esi
c00138af:	57                   	push   edi
c00138b0:	53                   	push   ebx
c00138b1:	e8 eb f6 ff ff       	call   c0012fa1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00138b6:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00138bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00138c0:	c1 e0 08             	shl    eax,0x8
c00138c3:	09 c2                	or     edx,eax
c00138c5:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00138ca:	83 c4 4c             	add    esp,0x4c
c00138cd:	c1 e0 10             	shl    eax,0x10
c00138d0:	5b                   	pop    ebx
c00138d1:	09 d0                	or     eax,edx
c00138d3:	5e                   	pop    esi
c00138d4:	5f                   	pop    edi
c00138d5:	5d                   	pop    ebp
c00138d6:	c3                   	ret    

c00138d7 <zStrtok(char*, char const*)>:
c00138d7:	55                   	push   ebp
c00138d8:	57                   	push   edi
c00138d9:	56                   	push   esi
c00138da:	53                   	push   ebx
c00138db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00138df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00138e3:	85 db                	test   ebx,ebx
c00138e5:	74 2f                	je     c0013916 <zStrtok(char*, char const*)+0x3f>
c00138e7:	85 c0                	test   eax,eax
c00138e9:	75 09                	jne    c00138f4 <zStrtok(char*, char const*)+0x1d>
c00138eb:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c00138f0:	85 c0                	test   eax,eax
c00138f2:	74 50                	je     c0013944 <zStrtok(char*, char const*)+0x6d>
c00138f4:	31 c9                	xor    ecx,ecx
c00138f6:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00138fa:	74 03                	je     c00138ff <zStrtok(char*, char const*)+0x28>
c00138fc:	41                   	inc    ecx
c00138fd:	eb f7                	jmp    c00138f6 <zStrtok(char*, char const*)+0x1f>
c00138ff:	31 d2                	xor    edx,edx
c0013901:	39 ca                	cmp    edx,ecx
c0013903:	74 15                	je     c001391a <zStrtok(char*, char const*)+0x43>
c0013905:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013909:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c001390c:	8d 3c 10             	lea    edi,[eax+edx*1]
c001390f:	39 ee                	cmp    esi,ebp
c0013911:	74 13                	je     c0013926 <zStrtok(char*, char const*)+0x4f>
c0013913:	42                   	inc    edx
c0013914:	eb eb                	jmp    c0013901 <zStrtok(char*, char const*)+0x2a>
c0013916:	31 c0                	xor    eax,eax
c0013918:	eb 2a                	jmp    c0013944 <zStrtok(char*, char const*)+0x6d>
c001391a:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c0013924:	eb 1e                	jmp    c0013944 <zStrtok(char*, char const*)+0x6d>
c0013926:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013929:	39 ce                	cmp    esi,ecx
c001392b:	75 0a                	jne    c0013937 <zStrtok(char*, char const*)+0x60>
c001392d:	40                   	inc    eax
c001392e:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c0013933:	89 d8                	mov    eax,ebx
c0013935:	eb 0d                	jmp    c0013944 <zStrtok(char*, char const*)+0x6d>
c0013937:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c001393b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001393e:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c0013944:	5b                   	pop    ebx
c0013945:	5e                   	pop    esi
c0013946:	5f                   	pop    edi
c0013947:	5d                   	pop    ebp
c0013948:	c3                   	ret    

c0013949 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013949:	57                   	push   edi
c001394a:	56                   	push   esi
c001394b:	53                   	push   ebx
c001394c:	81 ec 08 01 00 00    	sub    esp,0x108
c0013952:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013959:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013960:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013964:	53                   	push   ebx
c0013965:	e8 d6 cc fe ff       	call   c0000640 <strcpy>
c001396a:	59                   	pop    ecx
c001396b:	5e                   	pop    esi
c001396c:	68 8f 2b 02 c0       	push   0xc0022b8f
c0013971:	53                   	push   ebx
c0013972:	bb 01 00 00 00       	mov    ebx,0x1
c0013977:	e8 5b ff ff ff       	call   c00138d7 <zStrtok(char*, char const*)>
c001397c:	83 c4 10             	add    esp,0x10
c001397f:	85 c0                	test   eax,eax
c0013981:	74 3b                	je     c00139be <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013983:	52                   	push   edx
c0013984:	50                   	push   eax
c0013985:	6a 01                	push   0x1
c0013987:	57                   	push   edi
c0013988:	e8 b9 fd ff ff       	call   c0013746 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c001398d:	59                   	pop    ecx
c001398e:	89 c3                	mov    ebx,eax
c0013990:	5e                   	pop    esi
c0013991:	68 8f 2b 02 c0       	push   0xc0022b8f
c0013996:	6a 00                	push   0x0
c0013998:	e8 3a ff ff ff       	call   c00138d7 <zStrtok(char*, char const*)>
c001399d:	83 c4 10             	add    esp,0x10
c00139a0:	89 c6                	mov    esi,eax
c00139a2:	85 c0                	test   eax,eax
c00139a4:	74 18                	je     c00139be <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00139a6:	52                   	push   edx
c00139a7:	52                   	push   edx
c00139a8:	53                   	push   ebx
c00139a9:	57                   	push   edi
c00139aa:	e8 81 f5 ff ff       	call   c0012f30 <CmEnterDirectory(Reghive_Tag*, int)>
c00139af:	83 c4 10             	add    esp,0x10
c00139b2:	89 c3                	mov    ebx,eax
c00139b4:	83 f8 ff             	cmp    eax,0xffffffff
c00139b7:	74 05                	je     c00139be <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00139b9:	50                   	push   eax
c00139ba:	56                   	push   esi
c00139bb:	53                   	push   ebx
c00139bc:	eb c9                	jmp    c0013987 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00139be:	81 c4 00 01 00 00    	add    esp,0x100
c00139c4:	89 d8                	mov    eax,ebx
c00139c6:	5b                   	pop    ebx
c00139c7:	5e                   	pop    esi
c00139c8:	5f                   	pop    edi
c00139c9:	c3                   	ret    

c00139ca <CmDisplayTree(Reghive_Tag*, int, int)>:
c00139ca:	55                   	push   ebp
c00139cb:	57                   	push   edi
c00139cc:	56                   	push   esi
c00139cd:	53                   	push   ebx
c00139ce:	83 ec 5c             	sub    esp,0x5c
c00139d1:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00139d5:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00139d9:	85 db                	test   ebx,ebx
c00139db:	0f 8e 84 00 00 00    	jle    c0013a65 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00139e1:	31 ed                	xor    ebp,ebp
c00139e3:	57                   	push   edi
c00139e4:	6a 32                	push   0x32
c00139e6:	6a 00                	push   0x0
c00139e8:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00139ec:	57                   	push   edi
c00139ed:	e8 fe ca fe ff       	call   c00004f0 <memset>
c00139f2:	83 c4 0c             	add    esp,0xc
c00139f5:	57                   	push   edi
c00139f6:	53                   	push   ebx
c00139f7:	56                   	push   esi
c00139f8:	e8 30 fb ff ff       	call   c001352d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00139fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013a01:	83 c4 10             	add    esp,0x10
c0013a04:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013a08:	7d 13                	jge    c0013a1d <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013a0a:	83 ec 0c             	sub    esp,0xc
c0013a0d:	45                   	inc    ebp
c0013a0e:	68 33 2f 02 c0       	push   0xc0022f33
c0013a13:	e8 5d 6f ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0013a18:	83 c4 10             	add    esp,0x10
c0013a1b:	eb e7                	jmp    c0013a04 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013a1d:	51                   	push   ecx
c0013a1e:	57                   	push   edi
c0013a1f:	53                   	push   ebx
c0013a20:	68 31 28 02 c0       	push   0xc0022831
c0013a25:	e8 4b 6f ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0013a2a:	83 c4 10             	add    esp,0x10
c0013a2d:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013a32:	75 1e                	jne    c0013a52 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013a34:	52                   	push   edx
c0013a35:	52                   	push   edx
c0013a36:	53                   	push   ebx
c0013a37:	56                   	push   esi
c0013a38:	e8 f3 f4 ff ff       	call   c0012f30 <CmEnterDirectory(Reghive_Tag*, int)>
c0013a3d:	83 c4 0c             	add    esp,0xc
c0013a40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013a44:	8d 51 04             	lea    edx,[ecx+0x4]
c0013a47:	52                   	push   edx
c0013a48:	50                   	push   eax
c0013a49:	56                   	push   esi
c0013a4a:	e8 7b ff ff ff       	call   c00139ca <CmDisplayTree(Reghive_Tag*, int, int)>
c0013a4f:	83 c4 10             	add    esp,0x10
c0013a52:	50                   	push   eax
c0013a53:	50                   	push   eax
c0013a54:	53                   	push   ebx
c0013a55:	56                   	push   esi
c0013a56:	e8 14 f5 ff ff       	call   c0012f6f <CmGetNext(Reghive_Tag*, int)>
c0013a5b:	83 c4 10             	add    esp,0x10
c0013a5e:	89 c3                	mov    ebx,eax
c0013a60:	e9 74 ff ff ff       	jmp    c00139d9 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013a65:	83 c4 5c             	add    esp,0x5c
c0013a68:	5b                   	pop    ebx
c0013a69:	5e                   	pop    esi
c0013a6a:	5f                   	pop    edi
c0013a6b:	5d                   	pop    ebp
c0013a6c:	c3                   	ret    

c0013a6d <CmSplitFinalSlashInPlace(char*)>:
c0013a6d:	53                   	push   ebx
c0013a6e:	83 ec 14             	sub    esp,0x14
c0013a71:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a75:	53                   	push   ebx
c0013a76:	e8 f5 ca fe ff       	call   c0000570 <strlen>
c0013a7b:	83 c4 10             	add    esp,0x10
c0013a7e:	48                   	dec    eax
c0013a7f:	85 c0                	test   eax,eax
c0013a81:	74 15                	je     c0013a98 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013a83:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013a86:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013a8a:	75 09                	jne    c0013a95 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013a8c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013a8f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013a93:	eb 05                	jmp    c0013a9a <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013a95:	48                   	dec    eax
c0013a96:	eb e7                	jmp    c0013a7f <CmSplitFinalSlashInPlace(char*)+0x12>
c0013a98:	31 c0                	xor    eax,eax
c0013a9a:	83 c4 08             	add    esp,0x8
c0013a9d:	5b                   	pop    ebx
c0013a9e:	c3                   	ret    

c0013a9f <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013a9f:	55                   	push   ebp
c0013aa0:	57                   	push   edi
c0013aa1:	56                   	push   esi
c0013aa2:	53                   	push   ebx
c0013aa3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013aa9:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013ab0:	8a 13                	mov    dl,BYTE PTR [ebx]
c0013ab2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013ab5:	80 fa 40             	cmp    dl,0x40
c0013ab8:	75 1c                	jne    c0013ad6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0013aba:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013abd:	85 c9                	test   ecx,ecx
c0013abf:	0f 84 09 01 00 00    	je     c0013bce <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013ac5:	8d 43 01             	lea    eax,[ebx+0x1]
c0013ac8:	83 f9 3a             	cmp    ecx,0x3a
c0013acb:	74 04                	je     c0013ad1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0013acd:	89 c3                	mov    ebx,eax
c0013acf:	eb e9                	jmp    c0013aba <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0013ad1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013ad4:	89 c3                	mov    ebx,eax
c0013ad6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013ada:	50                   	push   eax
c0013adb:	6a 40                	push   0x40
c0013add:	6a 00                	push   0x0
c0013adf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013ae3:	50                   	push   eax
c0013ae4:	e8 07 ca fe ff       	call   c00004f0 <memset>
c0013ae9:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013af0:	31 c0                	xor    eax,eax
c0013af2:	83 c4 10             	add    esp,0x10
c0013af5:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013afa:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013afd:	89 d1                	mov    ecx,edx
c0013aff:	85 d2                	test   edx,edx
c0013b01:	0f 84 c7 00 00 00    	je     c0013bce <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013b07:	3d c7 00 00 00       	cmp    eax,0xc7
c0013b0c:	0f 8f bc 00 00 00    	jg     c0013bce <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013b12:	83 fa 0a             	cmp    edx,0xa
c0013b15:	0f 85 a4 00 00 00    	jne    c0013bbf <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013b1b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013b20:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013b25:	89 c8                	mov    eax,ecx
c0013b27:	a8 df                	test   al,0xdf
c0013b29:	0f 94 c2             	sete   dl
c0013b2c:	83 f9 23             	cmp    ecx,0x23
c0013b2f:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013b34:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013b38:	80 e2 01             	and    dl,0x1
c0013b3b:	75 4a                	jne    c0013b87 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b3d:	83 e8 09             	sub    eax,0x9
c0013b40:	3c 01                	cmp    al,0x1
c0013b42:	76 43                	jbe    c0013b87 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b44:	83 f9 5b             	cmp    ecx,0x5b
c0013b47:	75 42                	jne    c0013b8b <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013b49:	83 fe 40             	cmp    esi,0x40
c0013b4c:	75 39                	jne    c0013b87 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b4e:	83 ec 0c             	sub    esp,0xc
c0013b51:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013b55:	52                   	push   edx
c0013b56:	e8 15 ca fe ff       	call   c0000570 <strlen>
c0013b5b:	83 c4 10             	add    esp,0x10
c0013b5e:	83 f8 3f             	cmp    eax,0x3f
c0013b61:	77 6b                	ja     c0013bce <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013b63:	50                   	push   eax
c0013b64:	50                   	push   eax
c0013b65:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013b69:	52                   	push   edx
c0013b6a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013b6e:	52                   	push   edx
c0013b6f:	e8 cc ca fe ff       	call   c0000640 <strcpy>
c0013b74:	58                   	pop    eax
c0013b75:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013b79:	52                   	push   edx
c0013b7a:	e8 f1 c9 fe ff       	call   c0000570 <strlen>
c0013b7f:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013b84:	83 c4 10             	add    esp,0x10
c0013b87:	31 d2                	xor    edx,edx
c0013b89:	eb 3b                	jmp    c0013bc6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013b8b:	83 fe 40             	cmp    esi,0x40
c0013b8e:	74 06                	je     c0013b96 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013b90:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013b94:	eb 20                	jmp    c0013bb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013b96:	50                   	push   eax
c0013b97:	50                   	push   eax
c0013b98:	55                   	push   ebp
c0013b99:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013b9d:	50                   	push   eax
c0013b9e:	e8 ad cb fe ff       	call   c0000750 <strcmp>
c0013ba3:	83 c4 10             	add    esp,0x10
c0013ba6:	85 c0                	test   eax,eax
c0013ba8:	75 dd                	jne    c0013b87 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013baa:	eb e4                	jmp    c0013b90 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013bac:	8d 50 01             	lea    edx,[eax+0x1]
c0013baf:	83 f9 3d             	cmp    ecx,0x3d
c0013bb2:	74 1e                	je     c0013bd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013bb4:	89 d0                	mov    eax,edx
c0013bb6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013bb9:	85 c9                	test   ecx,ecx
c0013bbb:	75 ef                	jne    c0013bac <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013bbd:	eb 0f                	jmp    c0013bce <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013bbf:	8d 50 01             	lea    edx,[eax+0x1]
c0013bc2:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013bc6:	47                   	inc    edi
c0013bc7:	89 d0                	mov    eax,edx
c0013bc9:	e9 2c ff ff ff       	jmp    c0013afa <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013bce:	31 c0                	xor    eax,eax
c0013bd0:	eb 33                	jmp    c0013c05 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013bd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013bd6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013bd9:	50                   	push   eax
c0013bda:	50                   	push   eax
c0013bdb:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013bdf:	50                   	push   eax
c0013be0:	53                   	push   ebx
c0013be1:	e8 6a cb fe ff       	call   c0000750 <strcmp>
c0013be6:	83 c4 10             	add    esp,0x10
c0013be9:	85 c0                	test   eax,eax
c0013beb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013bef:	75 96                	jne    c0013b87 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013bf1:	51                   	push   ecx
c0013bf2:	51                   	push   ecx
c0013bf3:	52                   	push   edx
c0013bf4:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013bfb:	e8 40 ca fe ff       	call   c0000640 <strcpy>
c0013c00:	83 c4 10             	add    esp,0x10
c0013c03:	b0 01                	mov    al,0x1
c0013c05:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013c0b:	5b                   	pop    ebx
c0013c0c:	5e                   	pop    esi
c0013c0d:	5f                   	pop    edi
c0013c0e:	5d                   	pop    ebp
c0013c0f:	c3                   	ret    

c0013c10 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013c10:	57                   	push   edi
c0013c11:	56                   	push   esi
c0013c12:	53                   	push   ebx
c0013c13:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013c19:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013c20:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013c27:	53                   	push   ebx
c0013c28:	e8 43 c9 fe ff       	call   c0000570 <strlen>
c0013c2d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c30:	89 c7                	mov    edi,eax
c0013c32:	e8 39 c9 fe ff       	call   c0000570 <strlen>
c0013c37:	83 c4 10             	add    esp,0x10
c0013c3a:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013c3e:	3d ff 00 00 00       	cmp    eax,0xff
c0013c43:	0f 87 d3 00 00 00    	ja     c0013d1c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013c49:	57                   	push   edi
c0013c4a:	57                   	push   edi
c0013c4b:	56                   	push   esi
c0013c4c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013c50:	56                   	push   esi
c0013c51:	e8 ea c9 fe ff       	call   c0000640 <strcpy>
c0013c56:	58                   	pop    eax
c0013c57:	5a                   	pop    edx
c0013c58:	68 8f 2b 02 c0       	push   0xc0022b8f
c0013c5d:	56                   	push   esi
c0013c5e:	e8 dd cb fe ff       	call   c0000840 <strcat>
c0013c63:	59                   	pop    ecx
c0013c64:	5f                   	pop    edi
c0013c65:	53                   	push   ebx
c0013c66:	56                   	push   esi
c0013c67:	e8 d4 cb fe ff       	call   c0000840 <strcat>
c0013c6c:	58                   	pop    eax
c0013c6d:	5a                   	pop    edx
c0013c6e:	68 3b 28 02 c0       	push   0xc002283b
c0013c73:	56                   	push   esi
c0013c74:	e8 c7 cb fe ff       	call   c0000840 <strcat>
c0013c79:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013c80:	e8 61 3e ff ff       	call   c0007ae6 <malloc>
c0013c85:	83 c4 0c             	add    esp,0xc
c0013c88:	89 c3                	mov    ebx,eax
c0013c8a:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013c90:	56                   	push   esi
c0013c91:	50                   	push   eax
c0013c92:	e8 e5 7e ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0013c97:	83 c4 10             	add    esp,0x10
c0013c9a:	85 db                	test   ebx,ebx
c0013c9c:	74 7e                	je     c0013d1c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013c9e:	51                   	push   ecx
c0013c9f:	51                   	push   ecx
c0013ca0:	6a 01                	push   0x1
c0013ca2:	53                   	push   ebx
c0013ca3:	e8 f2 7e ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0013ca8:	83 c4 10             	add    esp,0x10
c0013cab:	85 c0                	test   eax,eax
c0013cad:	74 08                	je     c0013cb7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013caf:	83 ec 0c             	sub    esp,0xc
c0013cb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cb4:	53                   	push   ebx
c0013cb5:	eb 5f                	jmp    c0013d16 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013cb7:	52                   	push   edx
c0013cb8:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013cbc:	50                   	push   eax
c0013cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013cc1:	50                   	push   eax
c0013cc2:	53                   	push   ebx
c0013cc3:	e8 d4 81 ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c0013cc8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013ccc:	83 c4 10             	add    esp,0x10
c0013ccf:	89 c1                	mov    ecx,eax
c0013cd1:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013cd5:	74 31                	je     c0013d08 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013cd7:	83 ec 0c             	sub    esp,0xc
c0013cda:	50                   	push   eax
c0013cdb:	e8 06 3e ff ff       	call   c0007ae6 <malloc>
c0013ce0:	89 c6                	mov    esi,eax
c0013ce2:	58                   	pop    eax
c0013ce3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ce5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013ce9:	52                   	push   edx
c0013cea:	56                   	push   esi
c0013ceb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013cef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013cf3:	53                   	push   ebx
c0013cf4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cf7:	83 c4 20             	add    esp,0x20
c0013cfa:	85 c0                	test   eax,eax
c0013cfc:	75 0a                	jne    c0013d08 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013cfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d02:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013d06:	74 18                	je     c0013d20 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013d08:	83 ec 0c             	sub    esp,0xc
c0013d0b:	53                   	push   ebx
c0013d0c:	e8 e7 7e ff ff       	call   c000bbf8 <File::close()>
c0013d11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013d19:	83 c4 10             	add    esp,0x10
c0013d1c:	31 c0                	xor    eax,eax
c0013d1e:	eb 3b                	jmp    c0013d5b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013d20:	83 ec 0c             	sub    esp,0xc
c0013d23:	53                   	push   ebx
c0013d24:	e8 cf 7e ff ff       	call   c000bbf8 <File::close()>
c0013d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d2e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013d31:	83 c4 0c             	add    esp,0xc
c0013d34:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013d3b:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013d42:	56                   	push   esi
c0013d43:	e8 57 fd ff ff       	call   c0013a9f <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013d48:	89 34 24             	mov    DWORD PTR [esp],esi
c0013d4b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013d4f:	e8 a2 3d ff ff       	call   c0007af6 <free>
c0013d54:	83 c4 10             	add    esp,0x10
c0013d57:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013d5b:	81 c4 20 01 00 00    	add    esp,0x120
c0013d61:	5b                   	pop    ebx
c0013d62:	5e                   	pop    esi
c0013d63:	5f                   	pop    edi
c0013d64:	c3                   	ret    

c0013d65 <Reg::getLine(char*, char*, char*)>:
c0013d65:	57                   	push   edi
c0013d66:	56                   	push   esi
c0013d67:	53                   	push   ebx
c0013d68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d6c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d70:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d74:	57                   	push   edi
c0013d75:	56                   	push   esi
c0013d76:	53                   	push   ebx
c0013d77:	68 40 28 02 c0       	push   0xc0022840
c0013d7c:	e8 8f fe ff ff       	call   c0013c10 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013d81:	83 c4 10             	add    esp,0x10
c0013d84:	84 c0                	test   al,al
c0013d86:	75 10                	jne    c0013d98 <Reg::getLine(char*, char*, char*)+0x33>
c0013d88:	57                   	push   edi
c0013d89:	56                   	push   esi
c0013d8a:	53                   	push   ebx
c0013d8b:	68 65 28 02 c0       	push   0xc0022865
c0013d90:	e8 7b fe ff ff       	call   c0013c10 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013d95:	83 c4 10             	add    esp,0x10
c0013d98:	5b                   	pop    ebx
c0013d99:	5e                   	pop    esi
c0013d9a:	5f                   	pop    edi
c0013d9b:	c3                   	ret    

c0013d9c <Reg::readInt(char*, char*, int*)>:
c0013d9c:	55                   	push   ebp
c0013d9d:	57                   	push   edi
c0013d9e:	56                   	push   esi
c0013d9f:	53                   	push   ebx
c0013da0:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013da6:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013daa:	55                   	push   ebp
c0013dab:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013db2:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013db9:	e8 a7 ff ff ff       	call   c0013d65 <Reg::getLine(char*, char*, char*)>
c0013dbe:	83 c4 10             	add    esp,0x10
c0013dc1:	84 c0                	test   al,al
c0013dc3:	0f 84 b6 00 00 00    	je     c0013e7f <Reg::readInt(char*, char*, int*)+0xe3>
c0013dc9:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013dce:	83 fa 2b             	cmp    edx,0x2b
c0013dd1:	74 0c                	je     c0013ddf <Reg::readInt(char*, char*, int*)+0x43>
c0013dd3:	83 fa 2d             	cmp    edx,0x2d
c0013dd6:	75 0e                	jne    c0013de6 <Reg::readInt(char*, char*, int*)+0x4a>
c0013dd8:	ba 01 00 00 00       	mov    edx,0x1
c0013ddd:	eb 0b                	jmp    c0013dea <Reg::readInt(char*, char*, int*)+0x4e>
c0013ddf:	ba 01 00 00 00       	mov    edx,0x1
c0013de4:	eb 02                	jmp    c0013de8 <Reg::readInt(char*, char*, int*)+0x4c>
c0013de6:	31 d2                	xor    edx,edx
c0013de8:	31 c0                	xor    eax,eax
c0013dea:	be 0a 00 00 00       	mov    esi,0xa
c0013def:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013df4:	75 21                	jne    c0013e17 <Reg::readInt(char*, char*, int*)+0x7b>
c0013df6:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013dfb:	83 f9 78             	cmp    ecx,0x78
c0013dfe:	75 0a                	jne    c0013e0a <Reg::readInt(char*, char*, int*)+0x6e>
c0013e00:	83 c2 02             	add    edx,0x2
c0013e03:	be 10 00 00 00       	mov    esi,0x10
c0013e08:	eb 0d                	jmp    c0013e17 <Reg::readInt(char*, char*, int*)+0x7b>
c0013e0a:	83 f9 62             	cmp    ecx,0x62
c0013e0d:	75 08                	jne    c0013e17 <Reg::readInt(char*, char*, int*)+0x7b>
c0013e0f:	83 c2 02             	add    edx,0x2
c0013e12:	be 02 00 00 00       	mov    esi,0x2
c0013e17:	01 d5                	add    ebp,edx
c0013e19:	31 d2                	xor    edx,edx
c0013e1b:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013e1f:	83 f9 0d             	cmp    ecx,0xd
c0013e22:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013e26:	0f 94 c3             	sete   bl
c0013e29:	85 c9                	test   ecx,ecx
c0013e2b:	89 df                	mov    edi,ebx
c0013e2d:	0f 94 c3             	sete   bl
c0013e30:	09 df                	or     edi,ebx
c0013e32:	89 fb                	mov    ebx,edi
c0013e34:	83 e7 01             	and    edi,0x1
c0013e37:	75 35                	jne    c0013e6e <Reg::readInt(char*, char*, int*)+0xd2>
c0013e39:	0f af d6             	imul   edx,esi
c0013e3c:	83 fe 10             	cmp    esi,0x10
c0013e3f:	75 26                	jne    c0013e67 <Reg::readInt(char*, char*, int*)+0xcb>
c0013e41:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013e45:	83 ef 41             	sub    edi,0x41
c0013e48:	89 fb                	mov    ebx,edi
c0013e4a:	80 fb 05             	cmp    bl,0x5
c0013e4d:	77 06                	ja     c0013e55 <Reg::readInt(char*, char*, int*)+0xb9>
c0013e4f:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013e53:	eb 16                	jmp    c0013e6b <Reg::readInt(char*, char*, int*)+0xcf>
c0013e55:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e59:	83 eb 61             	sub    ebx,0x61
c0013e5c:	80 fb 05             	cmp    bl,0x5
c0013e5f:	77 06                	ja     c0013e67 <Reg::readInt(char*, char*, int*)+0xcb>
c0013e61:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013e65:	eb 04                	jmp    c0013e6b <Reg::readInt(char*, char*, int*)+0xcf>
c0013e67:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013e6b:	45                   	inc    ebp
c0013e6c:	eb ad                	jmp    c0013e1b <Reg::readInt(char*, char*, int*)+0x7f>
c0013e6e:	84 c0                	test   al,al
c0013e70:	74 02                	je     c0013e74 <Reg::readInt(char*, char*, int*)+0xd8>
c0013e72:	f7 da                	neg    edx
c0013e74:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013e7b:	89 10                	mov    DWORD PTR [eax],edx
c0013e7d:	88 d8                	mov    al,bl
c0013e7f:	81 c4 ec 00 00 00    	add    esp,0xec
c0013e85:	5b                   	pop    ebx
c0013e86:	5e                   	pop    esi
c0013e87:	5f                   	pop    edi
c0013e88:	5d                   	pop    ebp
c0013e89:	c3                   	ret    

c0013e8a <Reg::readString(char*, char*, char*, int)>:
c0013e8a:	57                   	push   edi
c0013e8b:	56                   	push   esi
c0013e8c:	53                   	push   ebx
c0013e8d:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013e93:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013e9a:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013e9e:	57                   	push   edi
c0013e9f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013ea6:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013ead:	e8 b3 fe ff ff       	call   c0013d65 <Reg::getLine(char*, char*, char*)>
c0013eb2:	83 c4 10             	add    esp,0x10
c0013eb5:	89 c6                	mov    esi,eax
c0013eb7:	84 c0                	test   al,al
c0013eb9:	74 44                	je     c0013eff <Reg::readString(char*, char*, char*, int)+0x75>
c0013ebb:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013ec2:	31 c0                	xor    eax,eax
c0013ec4:	4a                   	dec    edx
c0013ec5:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013ec8:	84 c9                	test   cl,cl
c0013eca:	74 0f                	je     c0013edb <Reg::readString(char*, char*, char*, int)+0x51>
c0013ecc:	39 c2                	cmp    edx,eax
c0013ece:	7e 0b                	jle    c0013edb <Reg::readString(char*, char*, char*, int)+0x51>
c0013ed0:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013ed3:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013ed8:	40                   	inc    eax
c0013ed9:	eb ea                	jmp    c0013ec5 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013edb:	83 ec 0c             	sub    esp,0xc
c0013ede:	53                   	push   ebx
c0013edf:	e8 8c c6 fe ff       	call   c0000570 <strlen>
c0013ee4:	83 c4 10             	add    esp,0x10
c0013ee7:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013eec:	75 11                	jne    c0013eff <Reg::readString(char*, char*, char*, int)+0x75>
c0013eee:	83 ec 0c             	sub    esp,0xc
c0013ef1:	53                   	push   ebx
c0013ef2:	e8 79 c6 fe ff       	call   c0000570 <strlen>
c0013ef7:	83 c4 10             	add    esp,0x10
c0013efa:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013eff:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013f05:	89 f0                	mov    eax,esi
c0013f07:	5b                   	pop    ebx
c0013f08:	5e                   	pop    esi
c0013f09:	5f                   	pop    edi
c0013f0a:	c3                   	ret    

c0013f0b <Reg::readBool(char*, char*, bool*)>:
c0013f0b:	83 ec 20             	sub    esp,0x20
c0013f0e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013f12:	50                   	push   eax
c0013f13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f1b:	e8 7c fe ff ff       	call   c0013d9c <Reg::readInt(char*, char*, int*)>
c0013f20:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013f25:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013f29:	0f 95 02             	setne  BYTE PTR [edx]
c0013f2c:	83 c4 2c             	add    esp,0x2c
c0013f2f:	c3                   	ret    

c0013f30 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013f30:	53                   	push   ebx
c0013f31:	83 ec 1c             	sub    esp,0x1c
c0013f34:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013f38:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013f3c:	50                   	push   eax
c0013f3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f45:	e8 c1 ff ff ff       	call   c0013f0b <Reg::readBool(char*, char*, bool*)>
c0013f4a:	83 c4 10             	add    esp,0x10
c0013f4d:	84 c0                	test   al,al
c0013f4f:	74 04                	je     c0013f55 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013f51:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013f55:	88 d8                	mov    al,bl
c0013f57:	83 c4 18             	add    esp,0x18
c0013f5a:	5b                   	pop    ebx
c0013f5b:	c3                   	ret    

c0013f5c <Reg::readIntWithDefault(char*, char*, int)>:
c0013f5c:	53                   	push   ebx
c0013f5d:	83 ec 1c             	sub    esp,0x1c
c0013f60:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f64:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013f68:	50                   	push   eax
c0013f69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f71:	e8 26 fe ff ff       	call   c0013d9c <Reg::readInt(char*, char*, int*)>
c0013f76:	83 c4 10             	add    esp,0x10
c0013f79:	84 c0                	test   al,al
c0013f7b:	74 04                	je     c0013f81 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013f7d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013f81:	89 d8                	mov    eax,ebx
c0013f83:	83 c4 18             	add    esp,0x18
c0013f86:	5b                   	pop    ebx
c0013f87:	c3                   	ret    

c0013f88 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013f88:	57                   	push   edi
c0013f89:	56                   	push   esi
c0013f8a:	56                   	push   esi
c0013f8b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f8f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013f93:	56                   	push   esi
c0013f94:	57                   	push   edi
c0013f95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f9d:	e8 e8 fe ff ff       	call   c0013e8a <Reg::readString(char*, char*, char*, int)>
c0013fa2:	83 c4 10             	add    esp,0x10
c0013fa5:	84 c0                	test   al,al
c0013fa7:	75 1a                	jne    c0013fc3 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013fa9:	51                   	push   ecx
c0013faa:	56                   	push   esi
c0013fab:	6a 00                	push   0x0
c0013fad:	57                   	push   edi
c0013fae:	e8 3d c5 fe ff       	call   c00004f0 <memset>
c0013fb3:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013fb6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013fba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fbc:	83 c4 10             	add    esp,0x10
c0013fbf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013fc3:	89 f8                	mov    eax,edi
c0013fc5:	5a                   	pop    edx
c0013fc6:	5e                   	pop    esi
c0013fc7:	5f                   	pop    edi
c0013fc8:	c3                   	ret    

c0013fc9 <SysEject(regs*)>:
c0013fc9:	83 ec 0c             	sub    esp,0xc
c0013fcc:	83 ca ff             	or     edx,0xffffffff
c0013fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd3:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013fd6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013fdb:	83 e9 41             	sub    ecx,0x41
c0013fde:	83 f9 19             	cmp    ecx,0x19
c0013fe1:	77 18                	ja     c0013ffb <SysEject(regs*)+0x32>
c0013fe3:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013fea:	85 c9                	test   ecx,ecx
c0013fec:	74 0d                	je     c0013ffb <SysEject(regs*)+0x32>
c0013fee:	83 ec 0c             	sub    esp,0xc
c0013ff1:	51                   	push   ecx
c0013ff2:	e8 b3 9d ff ff       	call   c000ddaa <LogicalDisk::eject()>
c0013ff7:	83 c4 10             	add    esp,0x10
c0013ffa:	99                   	cdq    
c0013ffb:	83 c4 0c             	add    esp,0xc
c0013ffe:	c3                   	ret    

c0013fff <SysExit(regs*)>:
c0013fff:	83 ec 18             	sub    esp,0x18
c0014002:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014006:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014009:	e8 8a 2b 00 00       	call   c0016b98 <terminateTask(int)>
c001400e:	83 c8 ff             	or     eax,0xffffffff
c0014011:	83 c4 1c             	add    esp,0x1c
c0014014:	89 c2                	mov    edx,eax
c0014016:	c3                   	ret    

c0014017 <SysGetCwd(regs*)>:
c0014017:	83 ec 10             	sub    esp,0x10
c001401a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001401e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014021:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014024:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014029:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001402c:	e8 ff 77 ff ff       	call   c000b830 <Fs::getcwd(Process*, char*, int)>
c0014031:	83 c4 1c             	add    esp,0x1c
c0014034:	99                   	cdq    
c0014035:	c3                   	ret    

c0014036 <SysGetPID(regs*)>:
c0014036:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001403b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001403e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014040:	99                   	cdq    
c0014041:	c3                   	ret    

c0014042 <SysGetRAMData(regs*)>:
c0014042:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0014048:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0014052:	99                   	cdq    
c0014053:	f7 f9                	idiv   ecx
c0014055:	c1 e0 18             	shl    eax,0x18
c0014058:	09 c8                	or     eax,ecx
c001405a:	99                   	cdq    
c001405b:	c3                   	ret    

c001405c <SysGetVGAPtr(regs*)>:
c001405c:	55                   	push   ebp
c001405d:	57                   	push   edi
c001405e:	56                   	push   esi
c001405f:	53                   	push   ebx
c0014060:	83 ec 18             	sub    esp,0x18
c0014063:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0014067:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001406a:	e8 f5 25 00 00       	call   c0016664 <Thr::processFromPID(int)>
c001406f:	83 c4 10             	add    esp,0x10
c0014072:	89 c1                	mov    ecx,eax
c0014074:	b8 01 00 00 00       	mov    eax,0x1
c0014079:	85 c9                	test   ecx,ecx
c001407b:	74 57                	je     c00140d4 <SysGetVGAPtr(regs*)+0x78>
c001407d:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0014083:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014087:	74 0c                	je     c0014095 <SysGetVGAPtr(regs*)+0x39>
c0014089:	83 ec 0c             	sub    esp,0xc
c001408c:	55                   	push   ebp
c001408d:	e8 f7 46 ff ff       	call   c0008789 <setActiveTerminal(VgaText*)>
c0014092:	83 c4 10             	add    esp,0x10
c0014095:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014098:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001409b:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00140a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00140a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00140a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00140a8:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00140ae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00140b1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00140b4:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00140ba:	50                   	push   eax
c00140bb:	50                   	push   eax
c00140bc:	68 80 28 02 c0       	push   0xc0022880
c00140c1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00140c4:	05 a8 0f 00 00       	add    eax,0xfa8
c00140c9:	50                   	push   eax
c00140ca:	e8 71 c5 fe ff       	call   c0000640 <strcpy>
c00140cf:	83 c4 10             	add    esp,0x10
c00140d2:	31 c0                	xor    eax,eax
c00140d4:	83 c4 0c             	add    esp,0xc
c00140d7:	31 d2                	xor    edx,edx
c00140d9:	5b                   	pop    ebx
c00140da:	5e                   	pop    esi
c00140db:	5f                   	pop    edi
c00140dc:	5d                   	pop    ebp
c00140dd:	c3                   	ret    
c00140de:	66 90                	xchg   ax,ax

c00140e0 <SysKill(regs*)>:
c00140e0:	53                   	push   ebx
c00140e1:	83 ec 08             	sub    esp,0x8
c00140e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00140e8:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00140ec:	75 16                	jne    c0014104 <SysKill(regs*)+0x24>
c00140ee:	83 ec 0c             	sub    esp,0xc
c00140f1:	68 8a 28 02 c0       	push   0xc002288a
c00140f6:	e8 18 d6 ff ff       	call   c0011713 <KePanic(char const*)>
c00140fb:	83 c4 10             	add    esp,0x10
c00140fe:	e9 89 00 00 00       	jmp    c001418c <SysKill(regs*)+0xac>
c0014103:	90                   	nop
c0014104:	83 ec 0c             	sub    esp,0xc
c0014107:	68 e4 c6 02 c0       	push   0xc002c6e4
c001410c:	e8 4b bd 00 00       	call   c001fe5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014111:	8d 76 00             	lea    esi,[esi+0x0]
c0014114:	83 c4 10             	add    esp,0x10
c0014117:	85 c0                	test   eax,eax
c0014119:	74 19                	je     c0014134 <SysKill(regs*)+0x54>
c001411b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001411e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014121:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014123:	74 33                	je     c0014158 <SysKill(regs*)+0x78>
c0014125:	52                   	push   edx
c0014126:	52                   	push   edx
c0014127:	50                   	push   eax
c0014128:	68 e4 c6 02 c0       	push   0xc002c6e4
c001412d:	e8 4a c0 00 00       	call   c002017c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014132:	eb e0                	jmp    c0014114 <SysKill(regs*)+0x34>
c0014134:	83 ec 0c             	sub    esp,0xc
c0014137:	68 d8 c6 02 c0       	push   0xc002c6d8
c001413c:	e8 1b bd 00 00       	call   c001fe5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014141:	8d 76 00             	lea    esi,[esi+0x0]
c0014144:	83 c4 10             	add    esp,0x10
c0014147:	85 c0                	test   eax,eax
c0014149:	74 41                	je     c001418c <SysKill(regs*)+0xac>
c001414b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001414e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014151:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014153:	75 27                	jne    c001417c <SysKill(regs*)+0x9c>
c0014155:	8d 76 00             	lea    esi,[esi+0x0]
c0014158:	51                   	push   ecx
c0014159:	51                   	push   ecx
c001415a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001415d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014162:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014165:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001416b:	e8 46 da ff ff       	call   c0011bb6 <KeRaiseSignal(SigHandlerBlock*, int)>
c0014170:	83 c4 10             	add    esp,0x10
c0014173:	31 c0                	xor    eax,eax
c0014175:	31 d2                	xor    edx,edx
c0014177:	eb 1b                	jmp    c0014194 <SysKill(regs*)+0xb4>
c0014179:	8d 76 00             	lea    esi,[esi+0x0]
c001417c:	52                   	push   edx
c001417d:	52                   	push   edx
c001417e:	50                   	push   eax
c001417f:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014184:	e8 f3 bf 00 00       	call   c002017c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014189:	eb b9                	jmp    c0014144 <SysKill(regs*)+0x64>
c001418b:	90                   	nop
c001418c:	83 c8 ff             	or     eax,0xffffffff
c001418f:	89 c2                	mov    edx,eax
c0014191:	8d 76 00             	lea    esi,[esi+0x0]
c0014194:	83 c4 08             	add    esp,0x8
c0014197:	5b                   	pop    ebx
c0014198:	c3                   	ret    

c0014199 <SysLoadDLL(regs*)>:
c0014199:	56                   	push   esi
c001419a:	53                   	push   ebx
c001419b:	31 d2                	xor    edx,edx
c001419d:	51                   	push   ecx
c001419e:	b8 01 00 00 00       	mov    eax,0x1
c00141a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00141a7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00141ab:	0f 84 8c 00 00 00    	je     c001423d <SysLoadDLL(regs*)+0xa4>
c00141b1:	83 ec 0c             	sub    esp,0xc
c00141b4:	68 14 01 00 00       	push   0x114
c00141b9:	e8 28 39 ff ff       	call   c0007ae6 <malloc>
c00141be:	83 c4 0c             	add    esp,0xc
c00141c1:	89 c3                	mov    ebx,eax
c00141c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141c8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00141cb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00141ce:	53                   	push   ebx
c00141cf:	e8 a8 79 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c00141d4:	83 c4 10             	add    esp,0x10
c00141d7:	31 d2                	xor    edx,edx
c00141d9:	b8 02 00 00 00       	mov    eax,0x2
c00141de:	85 db                	test   ebx,ebx
c00141e0:	74 5b                	je     c001423d <SysLoadDLL(regs*)+0xa4>
c00141e2:	83 ec 0c             	sub    esp,0xc
c00141e5:	53                   	push   ebx
c00141e6:	e8 73 7c ff ff       	call   c000be5e <File::exists()>
c00141eb:	83 c4 10             	add    esp,0x10
c00141ee:	84 c0                	test   al,al
c00141f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00141f2:	75 11                	jne    c0014205 <SysLoadDLL(regs*)+0x6c>
c00141f4:	83 ec 0c             	sub    esp,0xc
c00141f7:	53                   	push   ebx
c00141f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141fb:	83 c4 10             	add    esp,0x10
c00141fe:	b8 03 00 00 00       	mov    eax,0x3
c0014203:	eb 36                	jmp    c001423b <SysLoadDLL(regs*)+0xa2>
c0014205:	83 ec 0c             	sub    esp,0xc
c0014208:	53                   	push   ebx
c0014209:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001420c:	58                   	pop    eax
c001420d:	5a                   	pop    edx
c001420e:	6a 00                	push   0x0
c0014210:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014213:	e8 81 15 00 00       	call   c0015799 <Thr::loadDLL(char const*, bool)>
c0014218:	83 c4 10             	add    esp,0x10
c001421b:	89 c1                	mov    ecx,eax
c001421d:	31 d2                	xor    edx,edx
c001421f:	b8 04 00 00 00       	mov    eax,0x4
c0014224:	85 c9                	test   ecx,ecx
c0014226:	74 15                	je     c001423d <SysLoadDLL(regs*)+0xa4>
c0014228:	53                   	push   ebx
c0014229:	53                   	push   ebx
c001422a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0014230:	51                   	push   ecx
c0014231:	e8 94 17 00 00       	call   c00159ca <Thr::executeDLL(unsigned long, void*)>
c0014236:	83 c4 10             	add    esp,0x10
c0014239:	31 c0                	xor    eax,eax
c001423b:	31 d2                	xor    edx,edx
c001423d:	59                   	pop    ecx
c001423e:	5b                   	pop    ebx
c001423f:	5e                   	pop    esi
c0014240:	c3                   	ret    

c0014241 <SysRead(regs*)>:
c0014241:	57                   	push   edi
c0014242:	56                   	push   esi
c0014243:	53                   	push   ebx
c0014244:	83 ec 10             	sub    esp,0x10
c0014247:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001424b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001424e:	83 f8 02             	cmp    eax,0x2
c0014251:	77 10                	ja     c0014263 <SysRead(regs*)+0x22>
c0014253:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014258:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001425b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014261:	eb 0e                	jmp    c0014271 <SysRead(regs*)+0x30>
c0014263:	83 ec 0c             	sub    esp,0xc
c0014266:	50                   	push   eax
c0014267:	e8 77 52 ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c001426c:	83 c4 10             	add    esp,0x10
c001426f:	89 c1                	mov    ecx,eax
c0014271:	83 c8 ff             	or     eax,0xffffffff
c0014274:	85 c9                	test   ecx,ecx
c0014276:	89 c2                	mov    edx,eax
c0014278:	74 28                	je     c00142a2 <SysRead(regs*)+0x61>
c001427a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014282:	31 ff                	xor    edi,edi
c0014284:	83 ec 0c             	sub    esp,0xc
c0014287:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014289:	8d 54 24 18          	lea    edx,[esp+0x18]
c001428d:	52                   	push   edx
c001428e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014291:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014294:	57                   	push   edi
c0014295:	56                   	push   esi
c0014296:	51                   	push   ecx
c0014297:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001429a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001429e:	83 c4 20             	add    esp,0x20
c00142a1:	99                   	cdq    
c00142a2:	83 c4 10             	add    esp,0x10
c00142a5:	5b                   	pop    ebx
c00142a6:	5e                   	pop    esi
c00142a7:	5f                   	pop    edi
c00142a8:	c3                   	ret    

c00142a9 <SysRegisterSignal(regs*)>:
c00142a9:	83 ec 18             	sub    esp,0x18
c00142ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142b0:	6a 00                	push   0x0
c00142b2:	6a 00                	push   0x0
c00142b4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00142b7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00142ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142c2:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00142c8:	e8 b3 d8 ff ff       	call   c0011b80 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00142cd:	83 c4 2c             	add    esp,0x2c
c00142d0:	99                   	cdq    
c00142d1:	c3                   	ret    

c00142d2 <SysRegistryGetTypeFromPath(regs*)>:
c00142d2:	57                   	push   edi
c00142d3:	56                   	push   esi
c00142d4:	53                   	push   ebx
c00142d5:	81 ec 38 01 00 00    	sub    esp,0x138
c00142db:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00142e2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142e5:	68 ab 28 02 c0       	push   0xc00228ab
c00142ea:	e8 86 66 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00142ef:	5a                   	pop    edx
c00142f0:	59                   	pop    ecx
c00142f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142f4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142f7:	e8 4d f6 ff ff       	call   c0013949 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00142fc:	5f                   	pop    edi
c00142fd:	89 c6                	mov    esi,eax
c00142ff:	5a                   	pop    edx
c0014300:	50                   	push   eax
c0014301:	68 cb 28 02 c0       	push   0xc00228cb
c0014306:	e8 6a 66 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001430b:	83 c4 10             	add    esp,0x10
c001430e:	85 f6                	test   esi,esi
c0014310:	74 28                	je     c001433a <SysRegistryGetTypeFromPath(regs*)+0x68>
c0014312:	50                   	push   eax
c0014313:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014317:	57                   	push   edi
c0014318:	56                   	push   esi
c0014319:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001431c:	e8 0c f2 ff ff       	call   c001352d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014321:	83 c4 0c             	add    esp,0xc
c0014324:	89 c3                	mov    ebx,eax
c0014326:	57                   	push   edi
c0014327:	50                   	push   eax
c0014328:	68 d3 28 02 c0       	push   0xc00228d3
c001432d:	e8 43 66 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0014332:	89 d8                	mov    eax,ebx
c0014334:	83 c4 10             	add    esp,0x10
c0014337:	99                   	cdq    
c0014338:	eb 05                	jmp    c001433f <SysRegistryGetTypeFromPath(regs*)+0x6d>
c001433a:	83 c8 ff             	or     eax,0xffffffff
c001433d:	89 c2                	mov    edx,eax
c001433f:	81 c4 30 01 00 00    	add    esp,0x130
c0014345:	5b                   	pop    ebx
c0014346:	5e                   	pop    esi
c0014347:	5f                   	pop    edi
c0014348:	c3                   	ret    

c0014349 <SysRegistryReadExtent(regs*)>:
c0014349:	83 ec 1c             	sub    esp,0x1c
c001434c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014350:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014353:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014356:	85 c0                	test   eax,eax
c0014358:	79 1f                	jns    c0014379 <SysRegistryReadExtent(regs*)+0x30>
c001435a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001435f:	52                   	push   edx
c0014360:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014364:	52                   	push   edx
c0014365:	50                   	push   eax
c0014366:	51                   	push   ecx
c0014367:	e8 b3 f0 ff ff       	call   c001341f <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001436c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014370:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014374:	83 c4 10             	add    esp,0x10
c0014377:	eb 14                	jmp    c001438d <SysRegistryReadExtent(regs*)+0x44>
c0014379:	83 ec 04             	sub    esp,0x4
c001437c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001437f:	50                   	push   eax
c0014380:	51                   	push   ecx
c0014381:	e8 33 eb ff ff       	call   c0012eb9 <CmGetString(Reghive_Tag*, int, char*)>
c0014386:	83 c4 10             	add    esp,0x10
c0014389:	31 c0                	xor    eax,eax
c001438b:	31 d2                	xor    edx,edx
c001438d:	83 c4 1c             	add    esp,0x1c
c0014390:	c3                   	ret    

c0014391 <SysRegistryPathToExtentLookup(regs*)>:
c0014391:	53                   	push   ebx
c0014392:	83 ec 10             	sub    esp,0x10
c0014395:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014399:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001439c:	68 e9 28 02 c0       	push   0xc00228e9
c00143a1:	e8 cf 65 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00143a6:	58                   	pop    eax
c00143a7:	5a                   	pop    edx
c00143a8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00143ab:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00143ae:	e8 96 f5 ff ff       	call   c0013949 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00143b3:	83 c4 18             	add    esp,0x18
c00143b6:	99                   	cdq    
c00143b7:	5b                   	pop    ebx
c00143b8:	c3                   	ret    

c00143b9 <SysRegistryEnterDirectory(regs*)>:
c00143b9:	53                   	push   ebx
c00143ba:	83 ec 10             	sub    esp,0x10
c00143bd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00143c1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00143c4:	68 0c 29 02 c0       	push   0xc002290c
c00143c9:	e8 a7 65 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00143ce:	58                   	pop    eax
c00143cf:	5a                   	pop    edx
c00143d0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00143d3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00143d6:	e8 55 eb ff ff       	call   c0012f30 <CmEnterDirectory(Reghive_Tag*, int)>
c00143db:	83 c4 18             	add    esp,0x18
c00143de:	99                   	cdq    
c00143df:	5b                   	pop    ebx
c00143e0:	c3                   	ret    

c00143e1 <SysRegistryGetNext(regs*)>:
c00143e1:	53                   	push   ebx
c00143e2:	83 ec 10             	sub    esp,0x10
c00143e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00143e9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00143ec:	68 2a 29 02 c0       	push   0xc002292a
c00143f1:	e8 7f 65 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00143f6:	58                   	pop    eax
c00143f7:	5a                   	pop    edx
c00143f8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00143fb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00143fe:	e8 6c eb ff ff       	call   c0012f6f <CmGetNext(Reghive_Tag*, int)>
c0014403:	83 c4 18             	add    esp,0x18
c0014406:	99                   	cdq    
c0014407:	5b                   	pop    ebx
c0014408:	c3                   	ret    

c0014409 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014409:	57                   	push   edi
c001440a:	56                   	push   esi
c001440b:	53                   	push   ebx
c001440c:	81 ec 34 01 00 00    	sub    esp,0x134
c0014412:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014419:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001441d:	57                   	push   edi
c001441e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014421:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014424:	e8 04 f1 ff ff       	call   c001352d <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014429:	89 c3                	mov    ebx,eax
c001442b:	58                   	pop    eax
c001442c:	5a                   	pop    edx
c001442d:	57                   	push   edi
c001442e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014431:	e8 0a c2 fe ff       	call   c0000640 <strcpy>
c0014436:	89 d8                	mov    eax,ebx
c0014438:	81 c4 40 01 00 00    	add    esp,0x140
c001443e:	99                   	cdq    
c001443f:	5b                   	pop    ebx
c0014440:	5e                   	pop    esi
c0014441:	5f                   	pop    edi
c0014442:	c3                   	ret    

c0014443 <SysRegistryOpen(regs*)>:
c0014443:	83 ec 18             	sub    esp,0x18
c0014446:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001444a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001444d:	e8 f7 e8 ff ff       	call   c0012d49 <CmOpen(char const*)>
c0014452:	83 c4 1c             	add    esp,0x1c
c0014455:	99                   	cdq    
c0014456:	c3                   	ret    

c0014457 <SysRegistryClose(regs*)>:
c0014457:	83 ec 18             	sub    esp,0x18
c001445a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001445e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014461:	e8 01 ea ff ff       	call   c0012e67 <CmClose(Reghive_Tag*)>
c0014466:	31 c0                	xor    eax,eax
c0014468:	31 d2                	xor    edx,edx
c001446a:	83 c4 1c             	add    esp,0x1c
c001446d:	c3                   	ret    

c001446e <SysSbrk(regs*)>:
c001446e:	56                   	push   esi
c001446f:	53                   	push   ebx
c0014470:	50                   	push   eax
c0014471:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014476:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001447a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001447d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014480:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0014486:	85 db                	test   ebx,ebx
c0014488:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001448b:	74 02                	je     c001448f <SysSbrk(regs*)+0x21>
c001448d:	79 06                	jns    c0014495 <SysSbrk(regs*)+0x27>
c001448f:	89 f0                	mov    eax,esi
c0014491:	31 d2                	xor    edx,edx
c0014493:	eb 2a                	jmp    c00144bf <SysSbrk(regs*)+0x51>
c0014495:	83 c8 ff             	or     eax,0xffffffff
c0014498:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001449e:	89 c2                	mov    edx,eax
c00144a0:	77 1d                	ja     c00144bf <SysSbrk(regs*)+0x51>
c00144a2:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00144a8:	50                   	push   eax
c00144a9:	c1 ea 0c             	shr    edx,0xc
c00144ac:	68 07 0c 00 00       	push   0xc07
c00144b1:	52                   	push   edx
c00144b2:	51                   	push   ecx
c00144b3:	e8 9c 59 ff ff       	call   c0009e54 <VAS::allocatePages(int, int)>
c00144b8:	89 f0                	mov    eax,esi
c00144ba:	31 d2                	xor    edx,edx
c00144bc:	83 c4 10             	add    esp,0x10
c00144bf:	59                   	pop    ecx
c00144c0:	5b                   	pop    ebx
c00144c1:	5e                   	pop    esi
c00144c2:	c3                   	ret    

c00144c3 <SysSetCwd(regs*)>:
c00144c3:	83 ec 14             	sub    esp,0x14
c00144c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144ca:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00144cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144d2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00144d5:	e8 23 7a ff ff       	call   c000befd <Fs::setcwd(Process*, char*)>
c00144da:	83 c4 1c             	add    esp,0x1c
c00144dd:	99                   	cdq    
c00144de:	c3                   	ret    

c00144df <SysSetTime(regs*)>:
c00144df:	55                   	push   ebp
c00144e0:	31 c9                	xor    ecx,ecx
c00144e2:	57                   	push   edi
c00144e3:	bd 0c 00 00 00       	mov    ebp,0xc
c00144e8:	56                   	push   esi
c00144e9:	53                   	push   ebx
c00144ea:	31 db                	xor    ebx,ebx
c00144ec:	83 ec 10             	sub    esp,0x10
c00144ef:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00144f3:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00144f6:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00144f9:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00144fc:	89 c2                	mov    edx,eax
c00144fe:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0014504:	83 e2 1f             	and    edx,0x1f
c0014507:	c1 e7 10             	shl    edi,0x10
c001450a:	42                   	inc    edx
c001450b:	c1 e8 05             	shr    eax,0x5
c001450e:	88 d1                	mov    cl,dl
c0014510:	31 d2                	xor    edx,edx
c0014512:	f7 f5                	div    ebp
c0014514:	89 dd                	mov    ebp,ebx
c0014516:	88 d5                	mov    ch,dl
c0014518:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001451e:	0f b7 c1             	movzx  eax,cx
c0014521:	31 d2                	xor    edx,edx
c0014523:	09 f8                	or     eax,edi
c0014525:	bf 3c 00 00 00       	mov    edi,0x3c
c001452a:	89 c1                	mov    ecx,eax
c001452c:	89 f0                	mov    eax,esi
c001452e:	f7 f7                	div    edi
c0014530:	c1 e2 10             	shl    edx,0x10
c0014533:	09 d5                	or     ebp,edx
c0014535:	31 d2                	xor    edx,edx
c0014537:	89 eb                	mov    ebx,ebp
c0014539:	f7 f7                	div    edi
c001453b:	bf 10 0e 00 00       	mov    edi,0xe10
c0014540:	88 d7                	mov    bh,dl
c0014542:	89 f0                	mov    eax,esi
c0014544:	31 d2                	xor    edx,edx
c0014546:	f7 f7                	div    edi
c0014548:	bf 18 00 00 00       	mov    edi,0x18
c001454d:	31 d2                	xor    edx,edx
c001454f:	f7 f7                	div    edi
c0014551:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0014556:	88 d3                	mov    bl,dl
c0014558:	53                   	push   ebx
c0014559:	51                   	push   ecx
c001455a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0014560:	e8 a5 81 ff ff       	call   c000c70a <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014565:	83 c4 1c             	add    esp,0x1c
c0014568:	83 f0 01             	xor    eax,0x1
c001456b:	5b                   	pop    ebx
c001456c:	0f b6 c0             	movzx  eax,al
c001456f:	5e                   	pop    esi
c0014570:	31 d2                	xor    edx,edx
c0014572:	5f                   	pop    edi
c0014573:	5d                   	pop    ebp
c0014574:	c3                   	ret    

c0014575 <SysSymlink(regs*)>:
c0014575:	56                   	push   esi
c0014576:	83 c8 ff             	or     eax,0xffffffff
c0014579:	53                   	push   ebx
c001457a:	89 c2                	mov    edx,eax
c001457c:	81 ec 34 02 00 00    	sub    esp,0x234
c0014582:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014589:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001458d:	74 50                	je     c00145df <SysSymlink(regs*)+0x6a>
c001458f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014592:	85 c9                	test   ecx,ecx
c0014594:	74 49                	je     c00145df <SysSymlink(regs*)+0x6a>
c0014596:	6a 01                	push   0x1
c0014598:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001459d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145a0:	05 0c 01 00 00       	add    eax,0x10c
c00145a5:	50                   	push   eax
c00145a6:	51                   	push   ecx
c00145a7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00145ab:	56                   	push   esi
c00145ac:	e8 d3 72 ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00145b1:	6a 01                	push   0x1
c00145b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145bb:	05 0c 01 00 00       	add    eax,0x10c
c00145c0:	50                   	push   eax
c00145c1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00145c4:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00145cb:	53                   	push   ebx
c00145cc:	e8 b3 72 ff ff       	call   c000b884 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00145d1:	83 c4 18             	add    esp,0x18
c00145d4:	56                   	push   esi
c00145d5:	53                   	push   ebx
c00145d6:	e8 b8 6e ff ff       	call   c000b493 <KeCreateSymlink(char const*, char const*)>
c00145db:	83 c4 10             	add    esp,0x10
c00145de:	99                   	cdq    
c00145df:	81 c4 34 02 00 00    	add    esp,0x234
c00145e5:	5b                   	pop    ebx
c00145e6:	5e                   	pop    esi
c00145e7:	c3                   	ret    

c00145e8 <SysTimezone(regs*)>:
c00145e8:	53                   	push   ebx
c00145e9:	83 ec 08             	sub    esp,0x8
c00145ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145f0:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00145f4:	75 17                	jne    c001460d <SysTimezone(regs*)+0x25>
c00145f6:	83 ec 0c             	sub    esp,0xc
c00145f9:	68 41 29 02 c0       	push   0xc0022941
c00145fe:	e8 72 63 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0014603:	83 c8 ff             	or     eax,0xffffffff
c0014606:	83 c4 10             	add    esp,0x10
c0014609:	89 c2                	mov    edx,eax
c001460b:	eb 20                	jmp    c001462d <SysTimezone(regs*)+0x45>
c001460d:	83 ec 0c             	sub    esp,0xc
c0014610:	68 56 29 02 c0       	push   0xc0022956
c0014615:	e8 5b 63 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001461a:	58                   	pop    eax
c001461b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001461e:	e8 51 7e ff ff       	call   c000c474 <User::loadClockSettings(int)>
c0014623:	83 c4 10             	add    esp,0x10
c0014626:	b8 01 00 00 00       	mov    eax,0x1
c001462b:	31 d2                	xor    edx,edx
c001462d:	83 c4 08             	add    esp,0x8
c0014630:	5b                   	pop    ebx
c0014631:	c3                   	ret    

c0014632 <SysTruncate(regs*)>:
c0014632:	55                   	push   ebp
c0014633:	57                   	push   edi
c0014634:	31 ff                	xor    edi,edi
c0014636:	56                   	push   esi
c0014637:	53                   	push   ebx
c0014638:	83 ec 0c             	sub    esp,0xc
c001463b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001463f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014642:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014645:	89 ce                	mov    esi,ecx
c0014647:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001464b:	0f 84 9a 00 00 00    	je     c00146eb <SysTruncate(regs*)+0xb9>
c0014651:	83 ec 0c             	sub    esp,0xc
c0014654:	68 14 01 00 00       	push   0x114
c0014659:	e8 88 34 ff ff       	call   c0007ae6 <malloc>
c001465e:	83 c4 0c             	add    esp,0xc
c0014661:	89 c3                	mov    ebx,eax
c0014663:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014668:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001466b:	55                   	push   ebp
c001466c:	53                   	push   ebx
c001466d:	e8 0a 75 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0014672:	83 c4 10             	add    esp,0x10
c0014675:	31 d2                	xor    edx,edx
c0014677:	b8 03 00 00 00       	mov    eax,0x3
c001467c:	85 db                	test   ebx,ebx
c001467e:	0f 84 a2 00 00 00    	je     c0014726 <SysTruncate(regs*)+0xf4>
c0014684:	51                   	push   ecx
c0014685:	51                   	push   ecx
c0014686:	6a 02                	push   0x2
c0014688:	53                   	push   ebx
c0014689:	e8 0c 75 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c001468e:	83 c4 10             	add    esp,0x10
c0014691:	85 c0                	test   eax,eax
c0014693:	74 13                	je     c00146a8 <SysTruncate(regs*)+0x76>
c0014695:	83 ec 0c             	sub    esp,0xc
c0014698:	8b 03                	mov    eax,DWORD PTR [ebx]
c001469a:	53                   	push   ebx
c001469b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001469e:	83 c4 10             	add    esp,0x10
c00146a1:	b8 04 00 00 00       	mov    eax,0x4
c00146a6:	eb 7c                	jmp    c0014724 <SysTruncate(regs*)+0xf2>
c00146a8:	52                   	push   edx
c00146a9:	57                   	push   edi
c00146aa:	56                   	push   esi
c00146ab:	53                   	push   ebx
c00146ac:	e8 fd 75 ff ff       	call   c000bcae <File::truncate(unsigned long long)>
c00146b1:	83 c4 10             	add    esp,0x10
c00146b4:	85 c0                	test   eax,eax
c00146b6:	74 1b                	je     c00146d3 <SysTruncate(regs*)+0xa1>
c00146b8:	83 ec 0c             	sub    esp,0xc
c00146bb:	53                   	push   ebx
c00146bc:	e8 37 75 ff ff       	call   c000bbf8 <File::close()>
c00146c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00146c9:	83 c4 10             	add    esp,0x10
c00146cc:	b8 05 00 00 00       	mov    eax,0x5
c00146d1:	eb 51                	jmp    c0014724 <SysTruncate(regs*)+0xf2>
c00146d3:	83 ec 0c             	sub    esp,0xc
c00146d6:	53                   	push   ebx
c00146d7:	e8 1c 75 ff ff       	call   c000bbf8 <File::close()>
c00146dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00146e4:	83 c4 10             	add    esp,0x10
c00146e7:	31 c0                	xor    eax,eax
c00146e9:	eb 39                	jmp    c0014724 <SysTruncate(regs*)+0xf2>
c00146eb:	31 d2                	xor    edx,edx
c00146ed:	b8 01 00 00 00       	mov    eax,0x1
c00146f2:	83 fd 02             	cmp    ebp,0x2
c00146f5:	7e 2f                	jle    c0014726 <SysTruncate(regs*)+0xf4>
c00146f7:	83 ec 0c             	sub    esp,0xc
c00146fa:	51                   	push   ecx
c00146fb:	e8 e3 4d ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c0014700:	83 c4 10             	add    esp,0x10
c0014703:	89 c1                	mov    ecx,eax
c0014705:	31 d2                	xor    edx,edx
c0014707:	b8 02 00 00 00       	mov    eax,0x2
c001470c:	85 c9                	test   ecx,ecx
c001470e:	74 16                	je     c0014726 <SysTruncate(regs*)+0xf4>
c0014710:	50                   	push   eax
c0014711:	57                   	push   edi
c0014712:	56                   	push   esi
c0014713:	51                   	push   ecx
c0014714:	e8 95 75 ff ff       	call   c000bcae <File::truncate(unsigned long long)>
c0014719:	83 c4 10             	add    esp,0x10
c001471c:	85 c0                	test   eax,eax
c001471e:	0f 95 c0             	setne  al
c0014721:	0f b6 c0             	movzx  eax,al
c0014724:	31 d2                	xor    edx,edx
c0014726:	83 c4 0c             	add    esp,0xc
c0014729:	5b                   	pop    ebx
c001472a:	5e                   	pop    esi
c001472b:	5f                   	pop    edi
c001472c:	5d                   	pop    ebp
c001472d:	c3                   	ret    

c001472e <SysWrite(regs*)>:
c001472e:	57                   	push   edi
c001472f:	56                   	push   esi
c0014730:	53                   	push   ebx
c0014731:	83 ec 10             	sub    esp,0x10
c0014734:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014738:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001473b:	83 f8 02             	cmp    eax,0x2
c001473e:	77 10                	ja     c0014750 <SysWrite(regs*)+0x22>
c0014740:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014745:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014748:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001474e:	eb 0e                	jmp    c001475e <SysWrite(regs*)+0x30>
c0014750:	83 ec 0c             	sub    esp,0xc
c0014753:	50                   	push   eax
c0014754:	e8 8a 4d ff ff       	call   c00094e3 <KeGetFileFromDescriptor(int)>
c0014759:	83 c4 10             	add    esp,0x10
c001475c:	89 c1                	mov    ecx,eax
c001475e:	83 c8 ff             	or     eax,0xffffffff
c0014761:	85 c9                	test   ecx,ecx
c0014763:	89 c2                	mov    edx,eax
c0014765:	74 28                	je     c001478f <SysWrite(regs*)+0x61>
c0014767:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001476f:	31 ff                	xor    edi,edi
c0014771:	83 ec 0c             	sub    esp,0xc
c0014774:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014776:	8d 54 24 18          	lea    edx,[esp+0x18]
c001477a:	52                   	push   edx
c001477b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001477e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014781:	57                   	push   edi
c0014782:	56                   	push   esi
c0014783:	51                   	push   ecx
c0014784:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014787:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001478b:	83 c4 20             	add    esp,0x20
c001478e:	99                   	cdq    
c001478f:	83 c4 10             	add    esp,0x10
c0014792:	5b                   	pop    ebx
c0014793:	5e                   	pop    esi
c0014794:	5f                   	pop    edi
c0014795:	c3                   	ret    

c0014796 <SysWsbe(regs*)>:
c0014796:	57                   	push   edi
c0014797:	b9 0b 00 00 00       	mov    ecx,0xb
c001479c:	56                   	push   esi
c001479d:	be 95 29 02 c0       	mov    esi,0xc0022995
c00147a2:	53                   	push   ebx
c00147a3:	83 ec 30             	sub    esp,0x30
c00147a6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00147aa:	fc                   	cld    
c00147ab:	83 ec 0c             	sub    esp,0xc
c00147ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00147b0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00147b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147bc:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00147c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00147c4:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00147c7:	57                   	push   edi
c00147c8:	e8 a3 bd fe ff       	call   c0000570 <strlen>
c00147cd:	5a                   	pop    edx
c00147ce:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00147d2:	52                   	push   edx
c00147d3:	31 d2                	xor    edx,edx
c00147d5:	57                   	push   edi
c00147d6:	52                   	push   edx
c00147d7:	50                   	push   eax
c00147d8:	56                   	push   esi
c00147d9:	ff d3                	call   ebx
c00147db:	83 c4 14             	add    esp,0x14
c00147de:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00147e2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00147e5:	e8 ae 23 00 00       	call   c0016b98 <terminateTask(int)>
c00147ea:	83 c4 40             	add    esp,0x40
c00147ed:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00147f2:	5b                   	pop    ebx
c00147f3:	31 d2                	xor    edx,edx
c00147f5:	5e                   	pop    esi
c00147f6:	5f                   	pop    edi
c00147f7:	c3                   	ret    

c00147f8 <SysYield(regs*)>:
c00147f8:	83 ec 0c             	sub    esp,0xc
c00147fb:	fa                   	cli    
c00147fc:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014802:	e8 f1 19 00 00       	call   c00161f8 <schedule()>
c0014807:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001480c:	48                   	dec    eax
c001480d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014812:	75 01                	jne    c0014815 <SysYield(regs*)+0x1d>
c0014814:	fb                   	sti    
c0014815:	31 c0                	xor    eax,eax
c0014817:	31 d2                	xor    edx,edx
c0014819:	83 c4 0c             	add    esp,0xc
c001481c:	c3                   	ret    

c001481d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001481d:	55                   	push   ebp
c001481e:	57                   	push   edi
c001481f:	56                   	push   esi
c0014820:	53                   	push   ebx
c0014821:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014827:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001482f:	0f 95 c0             	setne  al
c0014832:	31 d2                	xor    edx,edx
c0014834:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001483c:	0f 94 c2             	sete   dl
c001483f:	85 c2                	test   edx,eax
c0014841:	74 34                	je     c0014877 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014843:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001484e:	74 27                	je     c0014877 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014850:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014857:	05 00 10 00 00       	add    eax,0x1000
c001485c:	89 c1                	mov    ecx,eax
c001485e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014863:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0014869:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014870:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0014877:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001487e:	83 ec 0c             	sub    esp,0xc
c0014881:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014887:	6a 01                	push   0x1
c0014889:	e8 af 4d ff ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c001488e:	83 c4 10             	add    esp,0x10
c0014891:	89 c3                	mov    ebx,eax
c0014893:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014899:	0f 86 25 01 00 00    	jbe    c00149c4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c001489f:	c1 ee 0c             	shr    esi,0xc
c00148a2:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00148a9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00148ad:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00148b5:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00148bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00148c0:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00148c7:	29 ef                	sub    edi,ebp
c00148c9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00148cd:	0f 83 f8 00 00 00    	jae    c00149cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c00148d3:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00148d9:	76 05                	jbe    c00148e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00148db:	bf 00 10 00 00       	mov    edi,0x1000
c00148e0:	83 ec 0c             	sub    esp,0xc
c00148e3:	31 d2                	xor    edx,edx
c00148e5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00148ec:	8b 08                	mov    ecx,DWORD PTR [eax]
c00148ee:	8d 44 24 28          	lea    eax,[esp+0x28]
c00148f2:	50                   	push   eax
c00148f3:	8d 74 24 30          	lea    esi,[esp+0x30]
c00148f7:	56                   	push   esi
c00148f8:	52                   	push   edx
c00148f9:	57                   	push   edi
c00148fa:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014901:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014904:	83 c4 20             	add    esp,0x20
c0014907:	85 c0                	test   eax,eax
c0014909:	75 06                	jne    c0014911 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c001490b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001490f:	74 13                	je     c0014924 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0014911:	83 ec 0c             	sub    esp,0xc
c0014914:	53                   	push   ebx
c0014915:	e8 41 50 ff ff       	call   c000995b <Virt::freeKernelVirtualPages(unsigned long)>
c001491a:	83 c4 10             	add    esp,0x10
c001491d:	31 c0                	xor    eax,eax
c001491f:	e9 7c 01 00 00       	jmp    c0014aa0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0014924:	fa                   	cli    
c0014925:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001492b:	e8 bf 34 ff ff       	call   c0007def <Phys::allocatePage()>
c0014930:	6a 07                	push   0x7
c0014932:	89 c7                	mov    edi,eax
c0014934:	53                   	push   ebx
c0014935:	50                   	push   eax
c0014936:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001493b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001493e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014944:	e8 07 54 ff ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014949:	83 c4 0c             	add    esp,0xc
c001494c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014953:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014959:	6a 00                	push   0x0
c001495b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014960:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014963:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014969:	e8 48 52 ff ff       	call   c0009bb6 <VAS::mapOtherVASIn(bool, VAS*)>
c001496e:	58                   	pop    eax
c001496f:	5a                   	pop    edx
c0014970:	68 07 0c 00 00       	push   0xc07
c0014975:	55                   	push   ebp
c0014976:	57                   	push   edi
c0014977:	89 df                	mov    edi,ebx
c0014979:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014980:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014986:	6a 00                	push   0x0
c0014988:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001498d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014990:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014996:	e8 07 56 ff ff       	call   c0009fa2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001499b:	b9 00 10 00 00       	mov    ecx,0x1000
c00149a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00149a2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00149a7:	83 c4 20             	add    esp,0x20
c00149aa:	48                   	dec    eax
c00149ab:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00149b0:	85 c0                	test   eax,eax
c00149b2:	75 01                	jne    c00149b5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00149b4:	fb                   	sti    
c00149b5:	81 c5 00 10 00 00    	add    ebp,0x1000
c00149bb:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00149bf:	e9 f1 fe ff ff       	jmp    c00148b5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00149c4:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00149cb:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00149d2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00149d8:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00149de:	0f 86 ae 00 00 00    	jbe    c0014a92 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00149e4:	fa                   	cli    
c00149e5:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00149eb:	c1 ee 0c             	shr    esi,0xc
c00149ee:	51                   	push   ecx
c00149ef:	31 ff                	xor    edi,edi
c00149f1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00149f8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149fe:	6a 00                	push   0x0
c0014a00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a05:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a08:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014a0e:	e8 a3 51 ff ff       	call   c0009bb6 <VAS::mapOtherVASIn(bool, VAS*)>
c0014a13:	83 c4 10             	add    esp,0x10
c0014a16:	e8 d4 33 ff ff       	call   c0007def <Phys::allocatePage()>
c0014a1b:	47                   	inc    edi
c0014a1c:	6a 07                	push   0x7
c0014a1e:	53                   	push   ebx
c0014a1f:	50                   	push   eax
c0014a20:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a24:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a2a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014a2d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014a33:	e8 18 53 ff ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014a38:	58                   	pop    eax
c0014a39:	5a                   	pop    edx
c0014a3a:	68 07 0c 00 00       	push   0xc07
c0014a3f:	55                   	push   ebp
c0014a40:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014a46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a4a:	50                   	push   eax
c0014a4b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014a52:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014a58:	6a 00                	push   0x0
c0014a5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a5f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a62:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014a68:	e8 35 55 ff ff       	call   c0009fa2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014a6d:	83 c4 1c             	add    esp,0x1c
c0014a70:	68 00 10 00 00       	push   0x1000
c0014a75:	6a 00                	push   0x0
c0014a77:	53                   	push   ebx
c0014a78:	e8 73 ba fe ff       	call   c00004f0 <memset>
c0014a7d:	83 c4 10             	add    esp,0x10
c0014a80:	39 fe                	cmp    esi,edi
c0014a82:	77 92                	ja     c0014a16 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0014a84:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014a89:	48                   	dec    eax
c0014a8a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014a8f:	75 01                	jne    c0014a92 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014a91:	fb                   	sti    
c0014a92:	83 ec 0c             	sub    esp,0xc
c0014a95:	53                   	push   ebx
c0014a96:	e8 c0 4e ff ff       	call   c000995b <Virt::freeKernelVirtualPages(unsigned long)>
c0014a9b:	83 c4 10             	add    esp,0x10
c0014a9e:	b0 01                	mov    al,0x1
c0014aa0:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014aa6:	5b                   	pop    ebx
c0014aa7:	5e                   	pop    esi
c0014aa8:	5f                   	pop    edi
c0014aa9:	5d                   	pop    ebp
c0014aaa:	c3                   	ret    

c0014aab <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014aab:	55                   	push   ebp
c0014aac:	57                   	push   edi
c0014aad:	56                   	push   esi
c0014aae:	53                   	push   ebx
c0014aaf:	83 ec 48             	sub    esp,0x48
c0014ab2:	68 14 01 00 00       	push   0x114
c0014ab7:	e8 2a 30 ff ff       	call   c0007ae6 <malloc>
c0014abc:	83 c4 0c             	add    esp,0xc
c0014abf:	89 c6                	mov    esi,eax
c0014ac1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014ac5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014ac9:	50                   	push   eax
c0014aca:	e8 ad 70 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0014acf:	58                   	pop    eax
c0014ad0:	5a                   	pop    edx
c0014ad1:	6a 01                	push   0x1
c0014ad3:	56                   	push   esi
c0014ad4:	e8 c1 70 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0014ad9:	83 c4 10             	add    esp,0x10
c0014adc:	85 c0                	test   eax,eax
c0014ade:	0f 85 43 01 00 00    	jne    c0014c27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014ae4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014aec:	83 ec 0c             	sub    esp,0xc
c0014aef:	6a 34                	push   0x34
c0014af1:	e8 f0 2f ff ff       	call   c0007ae6 <malloc>
c0014af6:	89 c3                	mov    ebx,eax
c0014af8:	58                   	pop    eax
c0014af9:	8b 06                	mov    eax,DWORD PTR [esi]
c0014afb:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014aff:	57                   	push   edi
c0014b00:	53                   	push   ebx
c0014b01:	6a 00                	push   0x0
c0014b03:	6a 34                	push   0x34
c0014b05:	56                   	push   esi
c0014b06:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b09:	83 c4 20             	add    esp,0x20
c0014b0c:	85 c0                	test   eax,eax
c0014b0e:	0f 85 13 01 00 00    	jne    c0014c27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b14:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014b1a:	0f 85 07 01 00 00    	jne    c0014c27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b20:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014b23:	85 c0                	test   eax,eax
c0014b25:	0f 84 fc 00 00 00    	je     c0014c27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b2b:	31 d2                	xor    edx,edx
c0014b2d:	55                   	push   ebp
c0014b2e:	52                   	push   edx
c0014b2f:	50                   	push   eax
c0014b30:	56                   	push   esi
c0014b31:	e8 22 71 ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0014b36:	83 c4 10             	add    esp,0x10
c0014b39:	85 c0                	test   eax,eax
c0014b3b:	0f 85 e6 00 00 00    	jne    c0014c27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b41:	83 ec 0c             	sub    esp,0xc
c0014b44:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014b47:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014b4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014b4f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014b53:	0f af c2             	imul   eax,edx
c0014b56:	50                   	push   eax
c0014b57:	e8 8a 2f ff ff       	call   c0007ae6 <malloc>
c0014b5c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014b5e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014b62:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b65:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014b69:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014b6d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014b71:	0f af c2             	imul   eax,edx
c0014b74:	99                   	cdq    
c0014b75:	52                   	push   edx
c0014b76:	50                   	push   eax
c0014b77:	56                   	push   esi
c0014b78:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b7b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014b7e:	83 c4 20             	add    esp,0x20
c0014b81:	85 c0                	test   eax,eax
c0014b83:	0f 84 9e 00 00 00    	je     c0014c27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b89:	31 d2                	xor    edx,edx
c0014b8b:	51                   	push   ecx
c0014b8c:	52                   	push   edx
c0014b8d:	50                   	push   eax
c0014b8e:	56                   	push   esi
c0014b8f:	e8 c4 70 ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0014b94:	83 c4 10             	add    esp,0x10
c0014b97:	85 c0                	test   eax,eax
c0014b99:	0f 85 88 00 00 00    	jne    c0014c27 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b9f:	83 ec 0c             	sub    esp,0xc
c0014ba2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014ba6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014baa:	31 ed                	xor    ebp,ebp
c0014bac:	0f af c2             	imul   eax,edx
c0014baf:	50                   	push   eax
c0014bb0:	e8 31 2f ff ff       	call   c0007ae6 <malloc>
c0014bb5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014bb7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014bbb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014bbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bc2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014bc6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014bca:	0f af c2             	imul   eax,edx
c0014bcd:	99                   	cdq    
c0014bce:	52                   	push   edx
c0014bcf:	50                   	push   eax
c0014bd0:	56                   	push   esi
c0014bd1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014bd4:	83 c4 20             	add    esp,0x20
c0014bd7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014bdf:	0f b7 fd             	movzx  edi,bp
c0014be2:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014be6:	73 7d                	jae    c0014c65 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014be8:	c1 e7 05             	shl    edi,0x5
c0014beb:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014bef:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014bf2:	75 6b                	jne    c0014c5f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014bf4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014bf7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bfb:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014bfe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c02:	52                   	push   edx
c0014c03:	31 d2                	xor    edx,edx
c0014c05:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014c08:	52                   	push   edx
c0014c09:	50                   	push   eax
c0014c0a:	56                   	push   esi
c0014c0b:	e8 48 70 ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0014c10:	83 c4 10             	add    esp,0x10
c0014c13:	85 c0                	test   eax,eax
c0014c15:	74 17                	je     c0014c2e <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014c17:	83 ec 0c             	sub    esp,0xc
c0014c1a:	68 c1 29 02 c0       	push   0xc00229c1
c0014c1f:	e8 51 5d ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0014c24:	83 c4 10             	add    esp,0x10
c0014c27:	31 c0                	xor    eax,eax
c0014c29:	e9 87 00 00 00       	jmp    c0014cb5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014c2e:	83 ec 0c             	sub    esp,0xc
c0014c31:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014c34:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014c37:	50                   	push   eax
c0014c38:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014c3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c40:	56                   	push   esi
c0014c41:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014c45:	e8 d3 fb ff ff       	call   c001481d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014c4a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c4e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014c52:	83 c4 20             	add    esp,0x20
c0014c55:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014c59:	73 04                	jae    c0014c5f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014c5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014c5f:	45                   	inc    ebp
c0014c60:	e9 7a ff ff ff       	jmp    c0014bdf <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014c65:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014c69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014c71:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014c77:	83 ec 0c             	sub    esp,0xc
c0014c7a:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014c80:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014c85:	05 00 10 00 00       	add    eax,0x1000
c0014c8a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014c8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c91:	e8 60 2e ff ff       	call   c0007af6 <free>
c0014c96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c99:	e8 58 2e ff ff       	call   c0007af6 <free>
c0014c9e:	58                   	pop    eax
c0014c9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ca3:	e8 4e 2e ff ff       	call   c0007af6 <free>
c0014ca8:	89 34 24             	mov    DWORD PTR [esp],esi
c0014cab:	e8 48 6f ff ff       	call   c000bbf8 <File::close()>
c0014cb0:	83 c4 10             	add    esp,0x10
c0014cb3:	b0 01                	mov    al,0x1
c0014cb5:	83 c4 3c             	add    esp,0x3c
c0014cb8:	5b                   	pop    ebx
c0014cb9:	5e                   	pop    esi
c0014cba:	5f                   	pop    edi
c0014cbb:	5d                   	pop    ebp
c0014cbc:	c3                   	ret    

c0014cbd <Thr::runtimeReferenceHelper()>:
c0014cbd:	83 ec 18             	sub    esp,0x18
c0014cc0:	68 c9 29 02 c0       	push   0xc00229c9
c0014cc5:	e8 ab 5c ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0014cca:	fa                   	cli    
c0014ccb:	83 c4 10             	add    esp,0x10
c0014cce:	eb fe                	jmp    c0014cce <Thr::runtimeReferenceHelper()+0x11>

c0014cd0 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014cd0:	57                   	push   edi
c0014cd1:	56                   	push   esi
c0014cd2:	53                   	push   ebx
c0014cd3:	31 db                	xor    ebx,ebx
c0014cd5:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014cdb:	7e 3c                	jle    c0014d19 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014cdd:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014ce4:	31 ff                	xor    edi,edi
c0014ce6:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014ced:	7e 27                	jle    c0014d16 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014cef:	50                   	push   eax
c0014cf0:	50                   	push   eax
c0014cf1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014cf5:	8b 06                	mov    eax,DWORD PTR [esi]
c0014cf7:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014cfe:	50                   	push   eax
c0014cff:	e8 4c ba fe ff       	call   c0000750 <strcmp>
c0014d04:	83 c4 10             	add    esp,0x10
c0014d07:	85 c0                	test   eax,eax
c0014d09:	75 05                	jne    c0014d10 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014d0b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014d0e:	eb 0b                	jmp    c0014d1b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014d10:	83 c6 10             	add    esi,0x10
c0014d13:	47                   	inc    edi
c0014d14:	eb d0                	jmp    c0014ce6 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014d16:	43                   	inc    ebx
c0014d17:	eb bc                	jmp    c0014cd5 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014d19:	31 c0                	xor    eax,eax
c0014d1b:	5b                   	pop    ebx
c0014d1c:	5e                   	pop    esi
c0014d1d:	5f                   	pop    edi
c0014d1e:	c3                   	ret    

c0014d1f <Thr::loadKernelSymbolTable(char const*)>:
c0014d1f:	55                   	push   ebp
c0014d20:	57                   	push   edi
c0014d21:	56                   	push   esi
c0014d22:	53                   	push   ebx
c0014d23:	83 ec 68             	sub    esp,0x68
c0014d26:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014d2c:	68 14 01 00 00       	push   0x114
c0014d31:	e8 b0 2d ff ff       	call   c0007ae6 <malloc>
c0014d36:	83 c4 0c             	add    esp,0xc
c0014d39:	89 c3                	mov    ebx,eax
c0014d3b:	56                   	push   esi
c0014d3c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014d40:	50                   	push   eax
c0014d41:	e8 36 6e ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0014d46:	5e                   	pop    esi
c0014d47:	5f                   	pop    edi
c0014d48:	6a 01                	push   0x1
c0014d4a:	53                   	push   ebx
c0014d4b:	e8 4a 6e ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0014d50:	83 c4 10             	add    esp,0x10
c0014d53:	85 c0                	test   eax,eax
c0014d55:	74 0a                	je     c0014d61 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014d57:	83 ec 0c             	sub    esp,0xc
c0014d5a:	68 eb 29 02 c0       	push   0xc00229eb
c0014d5f:	eb 34                	jmp    c0014d95 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014d61:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014d69:	83 ec 0c             	sub    esp,0xc
c0014d6c:	6a 34                	push   0x34
c0014d6e:	e8 73 2d ff ff       	call   c0007ae6 <malloc>
c0014d73:	59                   	pop    ecx
c0014d74:	89 c7                	mov    edi,eax
c0014d76:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014d7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d7c:	56                   	push   esi
c0014d7d:	57                   	push   edi
c0014d7e:	6a 00                	push   0x0
c0014d80:	6a 34                	push   0x34
c0014d82:	53                   	push   ebx
c0014d83:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d86:	83 c4 20             	add    esp,0x20
c0014d89:	85 c0                	test   eax,eax
c0014d8b:	74 17                	je     c0014da4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014d8d:	83 ec 0c             	sub    esp,0xc
c0014d90:	68 02 2a 02 c0       	push   0xc0022a02
c0014d95:	e8 79 c9 ff ff       	call   c0011713 <KePanic(char const*)>
c0014d9a:	83 c4 10             	add    esp,0x10
c0014d9d:	31 c0                	xor    eax,eax
c0014d9f:	e9 31 02 00 00       	jmp    c0014fd5 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014da4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014daa:	75 e1                	jne    c0014d8d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014dac:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014daf:	85 c0                	test   eax,eax
c0014db1:	74 da                	je     c0014d8d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014db3:	52                   	push   edx
c0014db4:	31 d2                	xor    edx,edx
c0014db6:	52                   	push   edx
c0014db7:	50                   	push   eax
c0014db8:	53                   	push   ebx
c0014db9:	e8 9a 6e ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0014dbe:	83 c4 10             	add    esp,0x10
c0014dc1:	85 c0                	test   eax,eax
c0014dc3:	75 c8                	jne    c0014d8d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014dc5:	83 ec 0c             	sub    esp,0xc
c0014dc8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014dcc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014dd0:	31 ed                	xor    ebp,ebp
c0014dd2:	0f af c2             	imul   eax,edx
c0014dd5:	50                   	push   eax
c0014dd6:	e8 0b 2d ff ff       	call   c0007ae6 <malloc>
c0014ddb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014ddd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014de1:	89 34 24             	mov    DWORD PTR [esp],esi
c0014de4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014de8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014dec:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014df0:	0f af c2             	imul   eax,edx
c0014df3:	99                   	cdq    
c0014df4:	52                   	push   edx
c0014df5:	50                   	push   eax
c0014df6:	53                   	push   ebx
c0014df7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014dfa:	83 c4 20             	add    esp,0x20
c0014dfd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014e05:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014e0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014e15:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014e1d:	0f b7 f5             	movzx  esi,bp
c0014e20:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014e24:	0f 83 a7 00 00 00    	jae    c0014ed1 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014e2a:	6b f6 28             	imul   esi,esi,0x28
c0014e2d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014e31:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014e34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e38:	50                   	push   eax
c0014e39:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014e3d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014e41:	8b 16                	mov    edx,DWORD PTR [esi]
c0014e43:	6b c0 28             	imul   eax,eax,0x28
c0014e46:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014e4a:	89 d0                	mov    eax,edx
c0014e4c:	31 d2                	xor    edx,edx
c0014e4e:	52                   	push   edx
c0014e4f:	50                   	push   eax
c0014e50:	53                   	push   ebx
c0014e51:	e8 02 6e ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0014e56:	83 c4 0c             	add    esp,0xc
c0014e59:	6a 20                	push   0x20
c0014e5b:	6a 00                	push   0x0
c0014e5d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014e61:	52                   	push   edx
c0014e62:	e8 89 b6 fe ff       	call   c00004f0 <memset>
c0014e67:	58                   	pop    eax
c0014e68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e6a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014e6e:	51                   	push   ecx
c0014e6f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014e73:	52                   	push   edx
c0014e74:	6a 00                	push   0x0
c0014e76:	6a 1f                	push   0x1f
c0014e78:	53                   	push   ebx
c0014e79:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e7c:	83 c4 18             	add    esp,0x18
c0014e7f:	68 19 2a 02 c0       	push   0xc0022a19
c0014e84:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014e88:	52                   	push   edx
c0014e89:	e8 c2 b8 fe ff       	call   c0000750 <strcmp>
c0014e8e:	83 c4 10             	add    esp,0x10
c0014e91:	85 c0                	test   eax,eax
c0014e93:	75 0f                	jne    c0014ea4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014e95:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ea0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ea4:	50                   	push   eax
c0014ea5:	50                   	push   eax
c0014ea6:	68 21 2a 02 c0       	push   0xc0022a21
c0014eab:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014eaf:	50                   	push   eax
c0014eb0:	e8 9b b8 fe ff       	call   c0000750 <strcmp>
c0014eb5:	83 c4 10             	add    esp,0x10
c0014eb8:	85 c0                	test   eax,eax
c0014eba:	75 0f                	jne    c0014ecb <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014ebc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014ebf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ec3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ec7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ecb:	45                   	inc    ebp
c0014ecc:	e9 4c ff ff ff       	jmp    c0014e1d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014ed1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014ed6:	75 10                	jne    c0014ee8 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014ed8:	83 ec 0c             	sub    esp,0xc
c0014edb:	68 29 2a 02 c0       	push   0xc0022a29
c0014ee0:	e8 2e c8 ff ff       	call   c0011713 <KePanic(char const*)>
c0014ee5:	83 c4 10             	add    esp,0x10
c0014ee8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014eed:	75 10                	jne    c0014eff <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014eef:	83 ec 0c             	sub    esp,0xc
c0014ef2:	68 29 2a 02 c0       	push   0xc0022a29
c0014ef7:	e8 17 c8 ff ff       	call   c0011713 <KePanic(char const*)>
c0014efc:	83 c4 10             	add    esp,0x10
c0014eff:	31 d2                	xor    edx,edx
c0014f01:	50                   	push   eax
c0014f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f06:	52                   	push   edx
c0014f07:	50                   	push   eax
c0014f08:	53                   	push   ebx
c0014f09:	e8 4a 6d ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0014f0e:	5a                   	pop    edx
c0014f0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f13:	e8 ce 2b ff ff       	call   c0007ae6 <malloc>
c0014f18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f1c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014f20:	31 c9                	xor    ecx,ecx
c0014f22:	5e                   	pop    esi
c0014f23:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f25:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014f29:	55                   	push   ebp
c0014f2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f2e:	51                   	push   ecx
c0014f2f:	52                   	push   edx
c0014f30:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014f34:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014f38:	53                   	push   ebx
c0014f39:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f3c:	83 c4 14             	add    esp,0x14
c0014f3f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f43:	e8 9e 2b ff ff       	call   c0007ae6 <malloc>
c0014f48:	89 c6                	mov    esi,eax
c0014f4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f4c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f4f:	56                   	push   esi
c0014f50:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014f54:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014f58:	51                   	push   ecx
c0014f59:	52                   	push   edx
c0014f5a:	53                   	push   ebx
c0014f5b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f62:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014f68:	83 c4 1c             	add    esp,0x1c
c0014f6b:	c1 e8 04             	shr    eax,0x4
c0014f6e:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014f75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f79:	31 d2                	xor    edx,edx
c0014f7b:	52                   	push   edx
c0014f7c:	50                   	push   eax
c0014f7d:	53                   	push   ebx
c0014f7e:	e8 d5 6c ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0014f83:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f85:	31 d2                	xor    edx,edx
c0014f87:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f8a:	56                   	push   esi
c0014f8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014f8f:	52                   	push   edx
c0014f90:	50                   	push   eax
c0014f91:	53                   	push   ebx
c0014f92:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f95:	83 c4 14             	add    esp,0x14
c0014f98:	53                   	push   ebx
c0014f99:	e8 5a 6c ff ff       	call   c000bbf8 <File::close()>
c0014f9e:	5d                   	pop    ebp
c0014f9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014fa3:	e8 4e 2b ff ff       	call   c0007af6 <free>
c0014fa8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014fab:	e8 46 2b ff ff       	call   c0007af6 <free>
c0014fb0:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014fb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014fb9:	8d 50 01             	lea    edx,[eax+0x1]
c0014fbc:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014fc3:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014fca:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014fd0:	83 c4 10             	add    esp,0x10
c0014fd3:	b0 01                	mov    al,0x1
c0014fd5:	83 c4 5c             	add    esp,0x5c
c0014fd8:	5b                   	pop    ebx
c0014fd9:	5e                   	pop    esi
c0014fda:	5f                   	pop    edi
c0014fdb:	5d                   	pop    ebp
c0014fdc:	c3                   	ret    

c0014fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014fdd:	55                   	push   ebp
c0014fde:	57                   	push   edi
c0014fdf:	56                   	push   esi
c0014fe0:	53                   	push   ebx
c0014fe1:	81 ec 68 03 00 00    	sub    esp,0x368
c0014fe7:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014fee:	8b 1d f0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6f0
c0014ff4:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014ff8:	68 14 01 00 00       	push   0x114
c0014ffd:	e8 e4 2a ff ff       	call   c0007ae6 <malloc>
c0015002:	83 c4 0c             	add    esp,0xc
c0015005:	89 c5                	mov    ebp,eax
c0015007:	53                   	push   ebx
c0015008:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001500f:	50                   	push   eax
c0015010:	e8 67 6b ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c0015015:	5e                   	pop    esi
c0015016:	5f                   	pop    edi
c0015017:	6a 01                	push   0x1
c0015019:	55                   	push   ebp
c001501a:	e8 7b 6b ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c001501f:	83 c4 10             	add    esp,0x10
c0015022:	85 c0                	test   eax,eax
c0015024:	0f 85 aa 06 00 00    	jne    c00156d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001502a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0015032:	83 ec 0c             	sub    esp,0xc
c0015035:	6a 34                	push   0x34
c0015037:	e8 aa 2a ff ff       	call   c0007ae6 <malloc>
c001503c:	5b                   	pop    ebx
c001503d:	89 c7                	mov    edi,eax
c001503f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015043:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015046:	53                   	push   ebx
c0015047:	57                   	push   edi
c0015048:	6a 00                	push   0x0
c001504a:	6a 34                	push   0x34
c001504c:	55                   	push   ebp
c001504d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015050:	83 c4 20             	add    esp,0x20
c0015053:	85 c0                	test   eax,eax
c0015055:	0f 85 79 06 00 00    	jne    c00156d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001505b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015061:	0f 85 6d 06 00 00    	jne    c00156d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015067:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001506a:	85 c0                	test   eax,eax
c001506c:	0f 84 62 06 00 00    	je     c00156d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015072:	31 d2                	xor    edx,edx
c0015074:	51                   	push   ecx
c0015075:	52                   	push   edx
c0015076:	50                   	push   eax
c0015077:	55                   	push   ebp
c0015078:	e8 db 6b ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c001507d:	83 c4 10             	add    esp,0x10
c0015080:	85 c0                	test   eax,eax
c0015082:	0f 85 4c 06 00 00    	jne    c00156d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015088:	83 ec 0c             	sub    esp,0xc
c001508b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001508e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015092:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015096:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001509a:	0f af c2             	imul   eax,edx
c001509d:	50                   	push   eax
c001509e:	e8 43 2a ff ff       	call   c0007ae6 <malloc>
c00150a3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00150a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00150aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150b1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00150b5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00150b9:	0f af c2             	imul   eax,edx
c00150bc:	99                   	cdq    
c00150bd:	52                   	push   edx
c00150be:	50                   	push   eax
c00150bf:	55                   	push   ebp
c00150c0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00150c3:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00150c6:	83 c4 20             	add    esp,0x20
c00150c9:	85 c0                	test   eax,eax
c00150cb:	0f 84 03 06 00 00    	je     c00156d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00150d1:	52                   	push   edx
c00150d2:	31 d2                	xor    edx,edx
c00150d4:	52                   	push   edx
c00150d5:	50                   	push   eax
c00150d6:	55                   	push   ebp
c00150d7:	e8 7c 6b ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c00150dc:	83 c4 10             	add    esp,0x10
c00150df:	85 c0                	test   eax,eax
c00150e1:	0f 85 ed 05 00 00    	jne    c00156d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00150e7:	83 ec 0c             	sub    esp,0xc
c00150ea:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00150ee:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00150f2:	31 f6                	xor    esi,esi
c00150f4:	0f af c2             	imul   eax,edx
c00150f7:	50                   	push   eax
c00150f8:	e8 e9 29 ff ff       	call   c0007ae6 <malloc>
c00150fd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015100:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015104:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015107:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001510b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001510f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015113:	0f af c2             	imul   eax,edx
c0015116:	99                   	cdq    
c0015117:	52                   	push   edx
c0015118:	50                   	push   eax
c0015119:	55                   	push   ebp
c001511a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001511d:	83 c4 20             	add    esp,0x20
c0015120:	0f b7 de             	movzx  ebx,si
c0015123:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0015127:	0f 83 87 00 00 00    	jae    c00151b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001512d:	c1 e3 05             	shl    ebx,0x5
c0015130:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0015134:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0015137:	75 75                	jne    c00151ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0015139:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001513c:	31 d2                	xor    edx,edx
c001513e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015142:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015149:	50                   	push   eax
c001514a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001514d:	52                   	push   edx
c001514e:	50                   	push   eax
c001514f:	55                   	push   ebp
c0015150:	e8 03 6b ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0015155:	83 c4 10             	add    esp,0x10
c0015158:	85 c0                	test   eax,eax
c001515a:	0f 85 74 05 00 00    	jne    c00156d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015160:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015167:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001516a:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c001516e:	31 d2                	xor    edx,edx
c0015170:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0015174:	83 ec 0c             	sub    esp,0xc
c0015177:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001517b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015182:	50                   	push   eax
c0015183:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001518b:	52                   	push   edx
c001518c:	50                   	push   eax
c001518d:	55                   	push   ebp
c001518e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015191:	83 c4 1c             	add    esp,0x1c
c0015194:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015197:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001519a:	50                   	push   eax
c001519b:	6a 00                	push   0x0
c001519d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151a1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00151a5:	50                   	push   eax
c00151a6:	e8 45 b3 fe ff       	call   c00004f0 <memset>
c00151ab:	83 c4 10             	add    esp,0x10
c00151ae:	46                   	inc    esi
c00151af:	e9 6c ff ff ff       	jmp    c0015120 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00151b4:	53                   	push   ebx
c00151b5:	31 db                	xor    ebx,ebx
c00151b7:	68 00 01 00 00       	push   0x100
c00151bc:	6a 00                	push   0x0
c00151be:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00151c2:	50                   	push   eax
c00151c3:	e8 28 b3 fe ff       	call   c00004f0 <memset>
c00151c8:	83 c4 0c             	add    esp,0xc
c00151cb:	68 00 01 00 00       	push   0x100
c00151d0:	6a 00                	push   0x0
c00151d2:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00151d9:	50                   	push   eax
c00151da:	e8 11 b3 fe ff       	call   c00004f0 <memset>
c00151df:	83 c4 10             	add    esp,0x10
c00151e2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00151ea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00151f2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00151fa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015202:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001520a:	0f b7 f3             	movzx  esi,bx
c001520d:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0015211:	0f 83 2d 01 00 00    	jae    c0015344 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0015217:	6b f6 28             	imul   esi,esi,0x28
c001521a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001521e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015221:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015225:	52                   	push   edx
c0015226:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001522a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001522e:	8b 06                	mov    eax,DWORD PTR [esi]
c0015230:	6b d2 28             	imul   edx,edx,0x28
c0015233:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015237:	31 d2                	xor    edx,edx
c0015239:	52                   	push   edx
c001523a:	50                   	push   eax
c001523b:	55                   	push   ebp
c001523c:	e8 17 6a ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0015241:	83 c4 0c             	add    esp,0xc
c0015244:	6a 20                	push   0x20
c0015246:	6a 00                	push   0x0
c0015248:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001524f:	51                   	push   ecx
c0015250:	e8 9b b2 fe ff       	call   c00004f0 <memset>
c0015255:	59                   	pop    ecx
c0015256:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015259:	8d 54 24 58          	lea    edx,[esp+0x58]
c001525d:	52                   	push   edx
c001525e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015265:	51                   	push   ecx
c0015266:	6a 00                	push   0x0
c0015268:	6a 1f                	push   0x1f
c001526a:	55                   	push   ebp
c001526b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001526e:	83 c4 1c             	add    esp,0x1c
c0015271:	6a 09                	push   0x9
c0015273:	68 43 2a 02 c0       	push   0xc0022a43
c0015278:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001527f:	51                   	push   ecx
c0015280:	e8 fb b0 fe ff       	call   c0000380 <memcmp>
c0015285:	83 c4 10             	add    esp,0x10
c0015288:	85 c0                	test   eax,eax
c001528a:	75 21                	jne    c00152ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001528c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015290:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015294:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015298:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001529c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001529f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00152a6:	89 d0                	mov    eax,edx
c00152a8:	40                   	inc    eax
c00152a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152ad:	50                   	push   eax
c00152ae:	6a 09                	push   0x9
c00152b0:	68 4d 2a 02 c0       	push   0xc0022a4d
c00152b5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00152bc:	50                   	push   eax
c00152bd:	e8 be b0 fe ff       	call   c0000380 <memcmp>
c00152c2:	83 c4 10             	add    esp,0x10
c00152c5:	85 c0                	test   eax,eax
c00152c7:	75 21                	jne    c00152ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00152c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00152cd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00152d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00152d5:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c00152d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00152dc:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00152e3:	89 d0                	mov    eax,edx
c00152e5:	40                   	inc    eax
c00152e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152ea:	50                   	push   eax
c00152eb:	50                   	push   eax
c00152ec:	68 19 2a 02 c0       	push   0xc0022a19
c00152f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00152f8:	50                   	push   eax
c00152f9:	e8 52 b4 fe ff       	call   c0000750 <strcmp>
c00152fe:	83 c4 10             	add    esp,0x10
c0015301:	85 c0                	test   eax,eax
c0015303:	75 0f                	jne    c0015314 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0015305:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015308:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001530c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015310:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015314:	50                   	push   eax
c0015315:	50                   	push   eax
c0015316:	68 21 2a 02 c0       	push   0xc0022a21
c001531b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015322:	50                   	push   eax
c0015323:	e8 28 b4 fe ff       	call   c0000750 <strcmp>
c0015328:	83 c4 10             	add    esp,0x10
c001532b:	85 c0                	test   eax,eax
c001532d:	75 0f                	jne    c001533e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001532f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015332:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015336:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001533a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001533e:	43                   	inc    ebx
c001533f:	e9 c6 fe ff ff       	jmp    c001520a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0015344:	31 d2                	xor    edx,edx
c0015346:	50                   	push   eax
c0015347:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001534b:	52                   	push   edx
c001534c:	50                   	push   eax
c001534d:	55                   	push   ebp
c001534e:	e8 05 69 ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c0015353:	58                   	pop    eax
c0015354:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015358:	e8 89 27 ff ff       	call   c0007ae6 <malloc>
c001535d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015360:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015364:	31 d2                	xor    edx,edx
c0015366:	58                   	pop    eax
c0015367:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001536b:	53                   	push   ebx
c001536c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015370:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015374:	52                   	push   edx
c0015375:	50                   	push   eax
c0015376:	55                   	push   ebp
c0015377:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001537a:	83 c4 14             	add    esp,0x14
c001537d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015381:	e8 60 27 ff ff       	call   c0007ae6 <malloc>
c0015386:	31 d2                	xor    edx,edx
c0015388:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001538c:	83 c4 0c             	add    esp,0xc
c001538f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015393:	52                   	push   edx
c0015394:	50                   	push   eax
c0015395:	55                   	push   ebp
c0015396:	e8 bd 68 ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c001539b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001539e:	31 d2                	xor    edx,edx
c00153a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00153a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00153ab:	52                   	push   edx
c00153ac:	50                   	push   eax
c00153ad:	55                   	push   ebp
c00153ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00153b1:	83 c4 20             	add    esp,0x20
c00153b4:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c00153b9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00153c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00153c5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00153c9:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00153cd:	0f 84 05 03 00 00    	je     c00156d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c00153d3:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00153da:	31 d2                	xor    edx,edx
c00153dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00153e0:	c1 e8 03             	shr    eax,0x3
c00153e3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00153e7:	51                   	push   ecx
c00153e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153ec:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00153f0:	52                   	push   edx
c00153f1:	50                   	push   eax
c00153f2:	55                   	push   ebp
c00153f3:	e8 60 68 ff ff       	call   c000bc58 <File::seek(unsigned long long)>
c00153f8:	5b                   	pop    ebx
c00153f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153fd:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015404:	e8 dd 26 ff ff       	call   c0007ae6 <malloc>
c0015409:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001540c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015410:	31 d2                	xor    edx,edx
c0015412:	5e                   	pop    esi
c0015413:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015417:	50                   	push   eax
c0015418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001541c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015420:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015427:	52                   	push   edx
c0015428:	50                   	push   eax
c0015429:	55                   	push   ebp
c001542a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001542d:	83 c4 20             	add    esp,0x20
c0015430:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015438:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001543c:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0015440:	0f 8d 76 02 00 00    	jge    c00156bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0015446:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001544a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001544e:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0015453:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0015456:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001545a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001545e:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0015462:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015466:	c1 e8 08             	shr    eax,0x8
c0015469:	89 c6                	mov    esi,eax
c001546b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001546f:	c1 e6 04             	shl    esi,0x4
c0015472:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015476:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0015479:	85 db                	test   ebx,ebx
c001547b:	0f 85 b3 00 00 00    	jne    c0015534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015481:	83 ec 0c             	sub    esp,0xc
c0015484:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015488:	03 06                	add    eax,DWORD PTR [esi]
c001548a:	50                   	push   eax
c001548b:	e8 40 f8 ff ff       	call   c0014cd0 <Thr::getAddressOfKernelSymbol(char const*)>
c0015490:	83 c4 10             	add    esp,0x10
c0015493:	89 c3                	mov    ebx,eax
c0015495:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c001549a:	85 c0                	test   eax,eax
c001549c:	0f 85 92 00 00 00    	jne    c0015534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00154a2:	83 ec 0c             	sub    esp,0xc
c00154a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00154a9:	03 06                	add    eax,DWORD PTR [esi]
c00154ab:	50                   	push   eax
c00154ac:	e8 4f c4 ff ff       	call   c0011900 <KeResolveCompatibilitySymbol(char*)>
c00154b1:	83 c4 10             	add    esp,0x10
c00154b4:	89 c3                	mov    ebx,eax
c00154b6:	85 c0                	test   eax,eax
c00154b8:	75 7a                	jne    c0015534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00154ba:	51                   	push   ecx
c00154bb:	51                   	push   ecx
c00154bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00154c0:	03 06                	add    eax,DWORD PTR [esi]
c00154c2:	50                   	push   eax
c00154c3:	68 57 2a 02 c0       	push   0xc0022a57
c00154c8:	e8 a8 54 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00154cd:	58                   	pop    eax
c00154ce:	5a                   	pop    edx
c00154cf:	68 71 2a 02 c0       	push   0xc0022a71
c00154d4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154db:	50                   	push   eax
c00154dc:	e8 5f b1 fe ff       	call   c0000640 <strcpy>
c00154e1:	59                   	pop    ecx
c00154e2:	58                   	pop    eax
c00154e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00154e7:	03 06                	add    eax,DWORD PTR [esi]
c00154e9:	50                   	push   eax
c00154ea:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154f1:	50                   	push   eax
c00154f2:	e8 49 b3 fe ff       	call   c0000840 <strcat>
c00154f7:	58                   	pop    eax
c00154f8:	5a                   	pop    edx
c00154f9:	68 07 2b 02 c0       	push   0xc0022b07
c00154fe:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015505:	50                   	push   eax
c0015506:	e8 35 b3 fe ff       	call   c0000840 <strcat>
c001550b:	83 c4 10             	add    esp,0x10
c001550e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015513:	0f 84 5d 01 00 00    	je     c0015676 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015519:	83 ec 0c             	sub    esp,0xc
c001551c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015523:	50                   	push   eax
c0015524:	e8 ea c1 ff ff       	call   c0011713 <KePanic(char const*)>
c0015529:	83 c4 10             	add    esp,0x10
c001552c:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015530:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0015534:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0015539:	83 f8 01             	cmp    eax,0x1
c001553c:	0f 85 8f 00 00 00    	jne    c00155d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0015542:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0015549:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001554d:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015551:	01 ce                	add    esi,ecx
c0015553:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001555b:	0f 94 c0             	sete   al
c001555e:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015566:	0f 94 c2             	sete   dl
c0015569:	09 c2                	or     edx,eax
c001556b:	8b 06                	mov    eax,DWORD PTR [esi]
c001556d:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015572:	0f b6 d2             	movzx  edx,dl
c0015575:	74 41                	je     c00155b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0015577:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c001557a:	85 d2                	test   edx,edx
c001557c:	75 15                	jne    c0015593 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c001557e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015582:	66 83 f8 0c          	cmp    ax,0xc
c0015586:	76 05                	jbe    c001558d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0015588:	b8 0c 00 00 00       	mov    eax,0xc
c001558d:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015591:	76 37                	jbe    c00155ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015593:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015597:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001559c:	0f 84 d4 00 00 00    	je     c0015676 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00155a2:	83 ec 0c             	sub    esp,0xc
c00155a5:	68 88 2a 02 c0       	push   0xc0022a88
c00155aa:	e8 64 c1 ff ff       	call   c0011713 <KePanic(char const*)>
c00155af:	83 c4 10             	add    esp,0x10
c00155b2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00155b6:	eb 12                	jmp    c00155ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00155b8:	01 c1                	add    ecx,eax
c00155ba:	85 d2                	test   edx,edx
c00155bc:	75 0c                	jne    c00155ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00155be:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00155c2:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00155c6:	77 02                	ja     c00155ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00155c8:	01 d9                	add    ecx,ebx
c00155ca:	89 0e                	mov    DWORD PTR [esi],ecx
c00155cc:	e9 e2 00 00 00       	jmp    c00156b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00155d1:	83 f8 02             	cmp    eax,0x2
c00155d4:	75 77                	jne    c001564d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00155d6:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00155dd:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00155e1:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00155e5:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00155ed:	74 21                	je     c0015610 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00155ef:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00155f7:	74 17                	je     c0015610 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00155f9:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00155fd:	b8 0a 00 00 00       	mov    eax,0xa
c0015602:	83 fa 0e             	cmp    edx,0xe
c0015605:	77 03                	ja     c001560a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0015607:	8d 42 fc             	lea    eax,[edx-0x4]
c001560a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001560e:	76 17                	jbe    c0015627 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0015610:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015615:	74 5f                	je     c0015676 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015617:	83 ec 0c             	sub    esp,0xc
c001561a:	68 a4 2a 02 c0       	push   0xc0022aa4
c001561f:	e8 ef c0 ff ff       	call   c0011713 <KePanic(char const*)>
c0015624:	83 c4 10             	add    esp,0x10
c0015627:	8b 06                	mov    eax,DWORD PTR [esi]
c0015629:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001562e:	74 13                	je     c0015643 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0015630:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015634:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c001563b:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c001563f:	01 d0                	add    eax,edx
c0015641:	eb 04                	jmp    c0015647 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015643:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0015647:	01 c3                	add    ebx,eax
c0015649:	89 1e                	mov    DWORD PTR [esi],ebx
c001564b:	eb 66                	jmp    c00156b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001564d:	52                   	push   edx
c001564e:	52                   	push   edx
c001564f:	50                   	push   eax
c0015650:	68 c0 2a 02 c0       	push   0xc0022ac0
c0015655:	e8 1b 53 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001565a:	83 c4 10             	add    esp,0x10
c001565d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015662:	74 12                	je     c0015676 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015664:	83 ec 0c             	sub    esp,0xc
c0015667:	68 cb 2a 02 c0       	push   0xc0022acb
c001566c:	e8 a2 c0 ff ff       	call   c0011713 <KePanic(char const*)>
c0015671:	83 c4 10             	add    esp,0x10
c0015674:	eb 3d                	jmp    c00156b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015676:	83 ec 0c             	sub    esp,0xc
c0015679:	55                   	push   ebp
c001567a:	e8 79 65 ff ff       	call   c000bbf8 <File::close()>
c001567f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015682:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015685:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015688:	59                   	pop    ecx
c0015689:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001568d:	e8 64 24 ff ff       	call   c0007af6 <free>
c0015692:	5b                   	pop    ebx
c0015693:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015697:	e8 5a 24 ff ff       	call   c0007af6 <free>
c001569c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001569f:	e8 52 24 ff ff       	call   c0007af6 <free>
c00156a4:	5e                   	pop    esi
c00156a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00156a9:	e8 48 24 ff ff       	call   c0007af6 <free>
c00156ae:	83 c4 10             	add    esp,0x10
c00156b1:	eb 21                	jmp    c00156d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00156b3:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00156b7:	e9 7c fd ff ff       	jmp    c0015438 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00156bc:	83 ec 0c             	sub    esp,0xc
c00156bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00156c3:	e8 2e 24 ff ff       	call   c0007af6 <free>
c00156c8:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00156cc:	83 c4 10             	add    esp,0x10
c00156cf:	e9 f1 fc ff ff       	jmp    c00153c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00156d4:	31 c0                	xor    eax,eax
c00156d6:	eb 33                	jmp    c001570b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00156d8:	83 ec 0c             	sub    esp,0xc
c00156db:	55                   	push   ebp
c00156dc:	e8 17 65 ff ff       	call   c000bbf8 <File::close()>
c00156e1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00156e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00156e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156ea:	58                   	pop    eax
c00156eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00156ef:	e8 02 24 ff ff       	call   c0007af6 <free>
c00156f4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00156f7:	e8 fa 23 ff ff       	call   c0007af6 <free>
c00156fc:	5a                   	pop    edx
c00156fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015701:	e8 f0 23 ff ff       	call   c0007af6 <free>
c0015706:	83 c4 10             	add    esp,0x10
c0015709:	b0 01                	mov    al,0x1
c001570b:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015711:	5b                   	pop    ebx
c0015712:	5e                   	pop    esi
c0015713:	5f                   	pop    edi
c0015714:	5d                   	pop    ebp
c0015715:	c3                   	ret    

c0015716 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015716:	56                   	push   esi
c0015717:	31 d2                	xor    edx,edx
c0015719:	53                   	push   ebx
c001571a:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015720:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015724:	39 d3                	cmp    ebx,edx
c0015726:	7e 1b                	jle    c0015743 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015728:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c001572f:	39 c8                	cmp    eax,ecx
c0015731:	77 0d                	ja     c0015740 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015733:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c001573a:	01 c6                	add    esi,eax
c001573c:	39 ce                	cmp    esi,ecx
c001573e:	77 05                	ja     c0015745 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015740:	42                   	inc    edx
c0015741:	eb e1                	jmp    c0015724 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015743:	31 c0                	xor    eax,eax
c0015745:	5b                   	pop    ebx
c0015746:	5e                   	pop    esi
c0015747:	c3                   	ret    

c0015748 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015748:	53                   	push   ebx
c0015749:	31 c0                	xor    eax,eax
c001574b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001574f:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015755:	39 c3                	cmp    ebx,eax
c0015757:	7e 22                	jle    c001577b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015759:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c0015760:	39 ca                	cmp    edx,ecx
c0015762:	77 14                	ja     c0015778 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015764:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c001576b:	39 ca                	cmp    edx,ecx
c001576d:	76 09                	jbe    c0015778 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001576f:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c0015776:	eb 05                	jmp    c001577d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015778:	40                   	inc    eax
c0015779:	eb da                	jmp    c0015755 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001577b:	31 c0                	xor    eax,eax
c001577d:	5b                   	pop    ebx
c001577e:	c3                   	ret    

c001577f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001577f:	53                   	push   ebx
c0015780:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015784:	53                   	push   ebx
c0015785:	e8 8c ff ff ff       	call   c0015716 <Thr::getDriverBaseFromAddress(unsigned long)>
c001578a:	5a                   	pop    edx
c001578b:	31 d2                	xor    edx,edx
c001578d:	85 c0                	test   eax,eax
c001578f:	74 04                	je     c0015795 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015791:	89 da                	mov    edx,ebx
c0015793:	29 c2                	sub    edx,eax
c0015795:	89 d0                	mov    eax,edx
c0015797:	5b                   	pop    ebx
c0015798:	c3                   	ret    

c0015799 <Thr::loadDLL(char const*, bool)>:
c0015799:	55                   	push   ebp
c001579a:	57                   	push   edi
c001579b:	56                   	push   esi
c001579c:	53                   	push   ebx
c001579d:	81 ec 34 01 00 00    	sub    esp,0x134
c00157a3:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00157aa:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00157b1:	56                   	push   esi
c00157b2:	68 e3 2a 02 c0       	push   0xc0022ae3
c00157b7:	e8 b9 51 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00157bc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00157c3:	e8 1e 23 ff ff       	call   c0007ae6 <malloc>
c00157c8:	83 c4 0c             	add    esp,0xc
c00157cb:	89 c3                	mov    ebx,eax
c00157cd:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00157d3:	56                   	push   esi
c00157d4:	50                   	push   eax
c00157d5:	e8 a2 63 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c00157da:	83 c4 10             	add    esp,0x10
c00157dd:	85 db                	test   ebx,ebx
c00157df:	75 3c                	jne    c001581d <Thr::loadDLL(char const*, bool)+0x84>
c00157e1:	89 f8                	mov    eax,edi
c00157e3:	84 c0                	test   al,al
c00157e5:	0f 84 d2 01 00 00    	je     c00159bd <Thr::loadDLL(char const*, bool)+0x224>
c00157eb:	55                   	push   ebp
c00157ec:	55                   	push   ebp
c00157ed:	68 f4 2a 02 c0       	push   0xc0022af4
c00157f2:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00157f6:	55                   	push   ebp
c00157f7:	e8 44 ae fe ff       	call   c0000640 <strcpy>
c00157fc:	58                   	pop    eax
c00157fd:	5a                   	pop    edx
c00157fe:	56                   	push   esi
c00157ff:	55                   	push   ebp
c0015800:	e8 3b b0 fe ff       	call   c0000840 <strcat>
c0015805:	59                   	pop    ecx
c0015806:	58                   	pop    eax
c0015807:	68 07 2b 02 c0       	push   0xc0022b07
c001580c:	55                   	push   ebp
c001580d:	e8 2e b0 fe ff       	call   c0000840 <strcat>
c0015812:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015815:	e8 f9 be ff ff       	call   c0011713 <KePanic(char const*)>
c001581a:	83 c4 10             	add    esp,0x10
c001581d:	51                   	push   ecx
c001581e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015822:	50                   	push   eax
c0015823:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015827:	50                   	push   eax
c0015828:	53                   	push   ebx
c0015829:	e8 6e 66 ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c001582e:	83 c4 10             	add    esp,0x10
c0015831:	85 db                	test   ebx,ebx
c0015833:	74 0c                	je     c0015841 <Thr::loadDLL(char const*, bool)+0xa8>
c0015835:	83 ec 0c             	sub    esp,0xc
c0015838:	8b 03                	mov    eax,DWORD PTR [ebx]
c001583a:	53                   	push   ebx
c001583b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001583e:	83 c4 10             	add    esp,0x10
c0015841:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015846:	75 0a                	jne    c0015852 <Thr::loadDLL(char const*, bool)+0xb9>
c0015848:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001584c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015850:	75 3c                	jne    c001588e <Thr::loadDLL(char const*, bool)+0xf5>
c0015852:	89 f8                	mov    eax,edi
c0015854:	84 c0                	test   al,al
c0015856:	0f 84 49 01 00 00    	je     c00159a5 <Thr::loadDLL(char const*, bool)+0x20c>
c001585c:	51                   	push   ecx
c001585d:	51                   	push   ecx
c001585e:	68 f4 2a 02 c0       	push   0xc0022af4
c0015863:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015867:	53                   	push   ebx
c0015868:	e8 d3 ad fe ff       	call   c0000640 <strcpy>
c001586d:	5d                   	pop    ebp
c001586e:	58                   	pop    eax
c001586f:	56                   	push   esi
c0015870:	53                   	push   ebx
c0015871:	e8 ca af fe ff       	call   c0000840 <strcat>
c0015876:	58                   	pop    eax
c0015877:	5a                   	pop    edx
c0015878:	68 07 2b 02 c0       	push   0xc0022b07
c001587d:	53                   	push   ebx
c001587e:	e8 bd af fe ff       	call   c0000840 <strcat>
c0015883:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015886:	e8 88 be ff ff       	call   c0011713 <KePanic(char const*)>
c001588b:	83 c4 10             	add    esp,0x10
c001588e:	52                   	push   edx
c001588f:	6a 03                	push   0x3
c0015891:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015895:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015899:	05 ff 0f 00 00       	add    eax,0xfff
c001589e:	83 d2 00             	adc    edx,0x0
c00158a1:	0f ac d0 0c          	shrd   eax,edx,0xc
c00158a5:	50                   	push   eax
c00158a6:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00158ac:	e8 a3 45 ff ff       	call   c0009e54 <VAS::allocatePages(int, int)>
c00158b1:	59                   	pop    ecx
c00158b2:	89 c3                	mov    ebx,eax
c00158b4:	5d                   	pop    ebp
c00158b5:	50                   	push   eax
c00158b6:	68 5a 0f 02 c0       	push   0xc0020f5a
c00158bb:	e8 b5 50 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00158c0:	89 34 24             	mov    DWORD PTR [esp],esi
c00158c3:	e8 a8 ac fe ff       	call   c0000570 <strlen>
c00158c8:	8b 2d 00 bf 02 c0    	mov    ebp,DWORD PTR ds:0xc002bf00
c00158ce:	40                   	inc    eax
c00158cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00158d2:	e8 0f 22 ff ff       	call   c0007ae6 <malloc>
c00158d7:	89 04 ad 20 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3ce0],eax
c00158de:	58                   	pop    eax
c00158df:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00158e4:	5a                   	pop    edx
c00158e5:	56                   	push   esi
c00158e6:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c00158ed:	e8 4e ad fe ff       	call   c0000640 <strcpy>
c00158f2:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00158f7:	8d 50 01             	lea    edx,[eax+0x1]
c00158fa:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c0015901:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c0015907:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001590b:	83 c4 0c             	add    esp,0xc
c001590e:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c0015915:	6a 01                	push   0x1
c0015917:	53                   	push   ebx
c0015918:	56                   	push   esi
c0015919:	e8 bf f6 ff ff       	call   c0014fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001591e:	83 c4 10             	add    esp,0x10
c0015921:	0f b6 c0             	movzx  eax,al
c0015924:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015928:	85 c0                	test   eax,eax
c001592a:	0f 85 89 00 00 00    	jne    c00159b9 <Thr::loadDLL(char const*, bool)+0x220>
c0015930:	89 f8                	mov    eax,edi
c0015932:	84 c0                	test   al,al
c0015934:	74 73                	je     c00159a9 <Thr::loadDLL(char const*, bool)+0x210>
c0015936:	83 ec 0c             	sub    esp,0xc
c0015939:	68 09 2b 02 c0       	push   0xc0022b09
c001593e:	e8 d0 bd ff ff       	call   c0011713 <KePanic(char const*)>
c0015943:	83 c4 10             	add    esp,0x10
c0015946:	eb 61                	jmp    c00159a9 <Thr::loadDLL(char const*, bool)+0x210>
c0015948:	50                   	push   eax
c0015949:	50                   	push   eax
c001594a:	89 e8                	mov    eax,ebp
c001594c:	c1 e0 0c             	shl    eax,0xc
c001594f:	01 d8                	add    eax,ebx
c0015951:	50                   	push   eax
c0015952:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015958:	e8 df 3f ff ff       	call   c000993c <VAS::getPageTableEntry(unsigned long)>
c001595d:	83 c4 10             	add    esp,0x10
c0015960:	8b 00                	mov    eax,DWORD PTR [eax]
c0015962:	a8 60                	test   al,0x60
c0015964:	75 11                	jne    c0015977 <Thr::loadDLL(char const*, bool)+0x1de>
c0015966:	83 ec 0c             	sub    esp,0xc
c0015969:	25 00 f0 ff ff       	and    eax,0xfffff000
c001596e:	50                   	push   eax
c001596f:	e8 12 24 ff ff       	call   c0007d86 <Phys::freePage(unsigned long)>
c0015974:	83 c4 10             	add    esp,0x10
c0015977:	45                   	inc    ebp
c0015978:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001597c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015980:	05 ff 0f 00 00       	add    eax,0xfff
c0015985:	bf 00 00 00 00       	mov    edi,0x0
c001598a:	83 d2 00             	adc    edx,0x0
c001598d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015991:	c1 ea 0c             	shr    edx,0xc
c0015994:	39 c5                	cmp    ebp,eax
c0015996:	89 d1                	mov    ecx,edx
c0015998:	89 f8                	mov    eax,edi
c001599a:	19 c8                	sbb    eax,ecx
c001599c:	72 aa                	jb     c0015948 <Thr::loadDLL(char const*, bool)+0x1af>
c001599e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00159a3:	75 18                	jne    c00159bd <Thr::loadDLL(char const*, bool)+0x224>
c00159a5:	31 db                	xor    ebx,ebx
c00159a7:	eb 14                	jmp    c00159bd <Thr::loadDLL(char const*, bool)+0x224>
c00159a9:	83 ec 0c             	sub    esp,0xc
c00159ac:	68 28 2b 02 c0       	push   0xc0022b28
c00159b1:	e8 5d bd ff ff       	call   c0011713 <KePanic(char const*)>
c00159b6:	83 c4 10             	add    esp,0x10
c00159b9:	31 ed                	xor    ebp,ebp
c00159bb:	eb bb                	jmp    c0015978 <Thr::loadDLL(char const*, bool)+0x1df>
c00159bd:	81 c4 2c 01 00 00    	add    esp,0x12c
c00159c3:	89 d8                	mov    eax,ebx
c00159c5:	5b                   	pop    ebx
c00159c6:	5e                   	pop    esi
c00159c7:	5f                   	pop    edi
c00159c8:	5d                   	pop    ebp
c00159c9:	c3                   	ret    

c00159ca <Thr::executeDLL(unsigned long, void*)>:
c00159ca:	56                   	push   esi
c00159cb:	53                   	push   ebx
c00159cc:	52                   	push   edx
c00159cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00159d5:	85 db                	test   ebx,ebx
c00159d7:	75 10                	jne    c00159e9 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00159d9:	83 ec 0c             	sub    esp,0xc
c00159dc:	68 44 2b 02 c0       	push   0xc0022b44
c00159e1:	e8 2d bd ff ff       	call   c0011713 <KePanic(char const*)>
c00159e6:	83 c4 10             	add    esp,0x10
c00159e9:	50                   	push   eax
c00159ea:	50                   	push   eax
c00159eb:	53                   	push   ebx
c00159ec:	68 6e 2b 02 c0       	push   0xc0022b6e
c00159f1:	e8 7f 4f ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00159f6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00159fa:	89 d8                	mov    eax,ebx
c00159fc:	83 c4 14             	add    esp,0x14
c00159ff:	5b                   	pop    ebx
c0015a00:	5e                   	pop    esi
c0015a01:	ff e0                	jmp    eax
c0015a03:	90                   	nop

c0015a04 <userModeEntryPoint(void*)>:
c0015a04:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015a09:	83 e8 01             	sub    eax,0x1
c0015a0c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0015a11:	75 01                	jne    c0015a14 <userModeEntryPoint(void*)+0x10>
c0015a13:	fb                   	sti    
c0015a14:	fb                   	sti    
c0015a15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a1a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a1d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0015a23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a27:	e9 13 a8 fe ff       	jmp    c000023f <goToUsermode>

c0015a2c <changeTSS>:
c0015a2c:	83 ec 14             	sub    esp,0x14
c0015a2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a34:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015a37:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015a3c:	c1 e2 15             	shl    edx,0x15
c0015a3f:	29 d0                	sub    eax,edx
c0015a41:	50                   	push   eax
c0015a42:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0015a47:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015a4d:	05 7c 11 00 00       	add    eax,0x117c
c0015a52:	50                   	push   eax
c0015a53:	e8 2c 35 ff ff       	call   c0008f84 <TSS::setESP(unsigned long)>
c0015a58:	83 c4 1c             	add    esp,0x1c
c0015a5b:	c3                   	ret    

c0015a5c <switchToThread(ThreadControlBlock*)>:
c0015a5c:	57                   	push   edi
c0015a5d:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0015a63:	56                   	push   esi
c0015a64:	85 c9                	test   ecx,ecx
c0015a66:	53                   	push   ebx
c0015a67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a6b:	0f 85 8b 00 00 00    	jne    c0015afc <switchToThread(ThreadControlBlock*)+0xa0>
c0015a71:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015a75:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015a7b:	74 7b                	je     c0015af8 <switchToThread(ThreadControlBlock*)+0x9c>
c0015a7d:	b8 00 04 00 00       	mov    eax,0x400
c0015a82:	29 d0                	sub    eax,edx
c0015a84:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015a87:	d1 f8                	sar    eax,1
c0015a89:	01 d0                	add    eax,edx
c0015a8b:	90                   	nop
c0015a8c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015a8f:	e8 1e 28 00 00       	call   c00182b2 <HalQueryPerformanceCounter()>
c0015a94:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c0015a99:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c0015a9f:	89 c6                	mov    esi,eax
c0015aa1:	89 d7                	mov    edi,edx
c0015aa3:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c0015aa9:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c0015aae:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c0015ab4:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c0015aba:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015ac0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015ac6:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c0015acc:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015acf:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015ad2:	01 c6                	add    esi,eax
c0015ad4:	11 d7                	adc    edi,edx
c0015ad6:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015ad9:	83 ec 0c             	sub    esp,0xc
c0015adc:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015adf:	53                   	push   ebx
c0015ae0:	e8 92 a7 fe ff       	call   c0000277 <switchToThreadASM>
c0015ae5:	0f 20 c0             	mov    eax,cr0
c0015ae8:	83 c8 08             	or     eax,0x8
c0015aeb:	0f 22 c0             	mov    cr0,eax
c0015aee:	83 c4 10             	add    esp,0x10
c0015af1:	5b                   	pop    ebx
c0015af2:	5e                   	pop    esi
c0015af3:	5f                   	pop    edi
c0015af4:	c3                   	ret    
c0015af5:	8d 76 00             	lea    esi,[esi+0x0]
c0015af8:	31 c0                	xor    eax,eax
c0015afa:	eb 90                	jmp    c0015a8c <switchToThread(ThreadControlBlock*)+0x30>
c0015afc:	5b                   	pop    ebx
c0015afd:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015b07:	5e                   	pop    esi
c0015b08:	5f                   	pop    edi
c0015b09:	c3                   	ret    
c0015b0a:	66 90                	xchg   ax,ax

c0015b0c <Process::addArgs(char**)>:
c0015b0c:	57                   	push   edi
c0015b0d:	56                   	push   esi
c0015b0e:	53                   	push   ebx
c0015b0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b13:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015b17:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015b21:	85 ff                	test   edi,edi
c0015b23:	74 4f                	je     c0015b74 <Process::addArgs(char**)+0x68>
c0015b25:	8b 07                	mov    eax,DWORD PTR [edi]
c0015b27:	85 c0                	test   eax,eax
c0015b29:	74 49                	je     c0015b74 <Process::addArgs(char**)+0x68>
c0015b2b:	31 db                	xor    ebx,ebx
c0015b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b30:	83 ec 0c             	sub    esp,0xc
c0015b33:	50                   	push   eax
c0015b34:	e8 37 aa fe ff       	call   c0000570 <strlen>
c0015b39:	83 c0 01             	add    eax,0x1
c0015b3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b3f:	e8 a2 1f ff ff       	call   c0007ae6 <malloc>
c0015b44:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015b4b:	5a                   	pop    edx
c0015b4c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015b4f:	59                   	pop    ecx
c0015b50:	83 c3 01             	add    ebx,0x1
c0015b53:	52                   	push   edx
c0015b54:	50                   	push   eax
c0015b55:	e8 e6 aa fe ff       	call   c0000640 <strcpy>
c0015b5a:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015b60:	83 c4 10             	add    esp,0x10
c0015b63:	83 c1 01             	add    ecx,0x1
c0015b66:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015b6c:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015b6f:	85 c0                	test   eax,eax
c0015b71:	75 bd                	jne    c0015b30 <Process::addArgs(char**)+0x24>
c0015b73:	90                   	nop
c0015b74:	5b                   	pop    ebx
c0015b75:	5e                   	pop    esi
c0015b76:	5f                   	pop    edi
c0015b77:	c3                   	ret    

c0015b78 <Process::Process(char const*, Process*, char**)>:
c0015b78:	56                   	push   esi
c0015b79:	53                   	push   ebx
c0015b7a:	83 ec 14             	sub    esp,0x14
c0015b7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b81:	05 0c 02 00 00       	add    eax,0x20c
c0015b86:	bb 07 00 00 00       	mov    ebx,0x7
c0015b8b:	89 c6                	mov    esi,eax
c0015b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b90:	85 db                	test   ebx,ebx
c0015b92:	78 14                	js     c0015ba8 <Process::Process(char const*, Process*, char**)+0x30>
c0015b94:	83 ec 0c             	sub    esp,0xc
c0015b97:	56                   	push   esi
c0015b98:	e8 eb a5 00 00       	call   c0020188 <ThreadControlBlock::ThreadControlBlock()>
c0015b9d:	83 c4 10             	add    esp,0x10
c0015ba0:	83 c6 5f             	add    esi,0x5f
c0015ba3:	83 eb 01             	sub    ebx,0x1
c0015ba6:	eb e8                	jmp    c0015b90 <Process::Process(char const*, Process*, char**)+0x18>
c0015ba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bac:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015bb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bb7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015bbe:	83 ec 0c             	sub    esp,0xc
c0015bc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bc5:	e8 3e b9 ff ff       	call   c0011508 <KeNewProcessEnv(Process*)>
c0015bca:	83 c4 10             	add    esp,0x10
c0015bcd:	89 c2                	mov    edx,eax
c0015bcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bd3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015bd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bdd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015be6:	a1 a0 41 02 c0       	mov    eax,ds:0xc00241a0
c0015beb:	8d 50 01             	lea    edx,[eax+0x1]
c0015bee:	89 15 a0 41 02 c0    	mov    DWORD PTR ds:0xc00241a0,edx
c0015bf4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015bf8:	89 02                	mov    DWORD PTR [edx],eax
c0015bfa:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015c02:	83 ec 0c             	sub    esp,0xc
c0015c05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015c09:	e8 d8 1e ff ff       	call   c0007ae6 <malloc>
c0015c0e:	83 c4 10             	add    esp,0x10
c0015c11:	89 c3                	mov    ebx,eax
c0015c13:	83 ec 08             	sub    esp,0x8
c0015c16:	6a 00                	push   0x0
c0015c18:	53                   	push   ebx
c0015c19:	e8 7a 44 ff ff       	call   c000a098 <VAS::VAS(bool)>
c0015c1e:	83 c4 10             	add    esp,0x10
c0015c21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c25:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015c2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c2f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015c39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c3d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015c41:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015c47:	e8 e2 be ff ff       	call   c0011b2e <KeInitSignals()>
c0015c4c:	89 c2                	mov    edx,eax
c0015c4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c52:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015c58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c5c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c62:	85 c0                	test   eax,eax
c0015c64:	74 42                	je     c0015ca8 <Process::Process(char const*, Process*, char**)+0x130>
c0015c66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c6a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c70:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015c76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c7a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015c80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c84:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c8a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c94:	05 0c 01 00 00       	add    eax,0x10c
c0015c99:	83 ec 08             	sub    esp,0x8
c0015c9c:	52                   	push   edx
c0015c9d:	50                   	push   eax
c0015c9e:	e8 9d a9 fe ff       	call   c0000640 <strcpy>
c0015ca3:	83 c4 10             	add    esp,0x10
c0015ca6:	eb 64                	jmp    c0015d0c <Process::Process(char const*, Process*, char**)+0x194>
c0015ca8:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015cb0:	83 ec 0c             	sub    esp,0xc
c0015cb3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015cb7:	e8 2a 1e ff ff       	call   c0007ae6 <malloc>
c0015cbc:	83 c4 10             	add    esp,0x10
c0015cbf:	89 c3                	mov    ebx,eax
c0015cc1:	83 ec 08             	sub    esp,0x8
c0015cc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cc8:	53                   	push   ebx
c0015cc9:	e8 c8 2f ff ff       	call   c0008c96 <VgaText::VgaText(char const*)>
c0015cce:	83 c4 10             	add    esp,0x10
c0015cd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cd5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015cdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cdf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015ce5:	83 ec 0c             	sub    esp,0xc
c0015ce8:	50                   	push   eax
c0015ce9:	e8 46 28 ff ff       	call   c0008534 <addToTerminalCycle(VgaText*)>
c0015cee:	83 c4 10             	add    esp,0x10
c0015cf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cf5:	05 0c 01 00 00       	add    eax,0x10c
c0015cfa:	83 ec 08             	sub    esp,0x8
c0015cfd:	68 8d 2b 02 c0       	push   0xc0022b8d
c0015d02:	50                   	push   eax
c0015d03:	e8 38 a9 fe ff       	call   c0000640 <strcpy>
c0015d08:	83 c4 10             	add    esp,0x10
c0015d0b:	90                   	nop
c0015d0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d10:	83 c0 0c             	add    eax,0xc
c0015d13:	83 ec 08             	sub    esp,0x8
c0015d16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d1a:	50                   	push   eax
c0015d1b:	e8 20 a9 fe ff       	call   c0000640 <strcpy>
c0015d20:	83 c4 10             	add    esp,0x10
c0015d23:	83 ec 08             	sub    esp,0x8
c0015d26:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015d2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d2e:	e8 d9 fd ff ff       	call   c0015b0c <Process::addArgs(char**)>
c0015d33:	83 c4 10             	add    esp,0x10
c0015d36:	83 ec 08             	sub    esp,0x8
c0015d39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d41:	e8 65 ed ff ff       	call   c0014aab <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015d46:	83 c4 10             	add    esp,0x10
c0015d49:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015d4d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015d51:	83 f0 01             	xor    eax,0x1
c0015d54:	88 c2                	mov    dl,al
c0015d56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d5a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015d60:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015d65:	83 ec 04             	sub    esp,0x4
c0015d68:	50                   	push   eax
c0015d69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d6d:	68 e4 2b 02 c0       	push   0xc0022be4
c0015d72:	e8 fe 4b ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0015d77:	83 c4 10             	add    esp,0x10
c0015d7a:	90                   	nop
c0015d7b:	83 c4 14             	add    esp,0x14
c0015d7e:	5b                   	pop    ebx
c0015d7f:	5e                   	pop    esi
c0015d80:	c3                   	ret    
c0015d81:	90                   	nop
c0015d82:	66 90                	xchg   ax,ax

c0015d84 <Process::Process(bool, char const*, Process*, char**)>:
c0015d84:	56                   	push   esi
c0015d85:	53                   	push   ebx
c0015d86:	83 ec 24             	sub    esp,0x24
c0015d89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015d8d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015d91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d95:	05 0c 02 00 00       	add    eax,0x20c
c0015d9a:	bb 07 00 00 00       	mov    ebx,0x7
c0015d9f:	89 c6                	mov    esi,eax
c0015da1:	8d 76 00             	lea    esi,[esi+0x0]
c0015da4:	85 db                	test   ebx,ebx
c0015da6:	78 14                	js     c0015dbc <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015da8:	83 ec 0c             	sub    esp,0xc
c0015dab:	56                   	push   esi
c0015dac:	e8 d7 a3 00 00       	call   c0020188 <ThreadControlBlock::ThreadControlBlock()>
c0015db1:	83 c4 10             	add    esp,0x10
c0015db4:	83 c6 5f             	add    esi,0x5f
c0015db7:	83 eb 01             	sub    ebx,0x1
c0015dba:	eb e8                	jmp    c0015da4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015dbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dc0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015dc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dcb:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015dd2:	83 ec 0c             	sub    esp,0xc
c0015dd5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015dd9:	e8 2a b7 ff ff       	call   c0011508 <KeNewProcessEnv(Process*)>
c0015dde:	83 c4 10             	add    esp,0x10
c0015de1:	89 c2                	mov    edx,eax
c0015de3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015de7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015ded:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015df1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015dfa:	a1 a0 41 02 c0       	mov    eax,ds:0xc00241a0
c0015dff:	8d 50 01             	lea    edx,[eax+0x1]
c0015e02:	89 15 a0 41 02 c0    	mov    DWORD PTR ds:0xc00241a0,edx
c0015e08:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015e0c:	89 02                	mov    DWORD PTR [edx],eax
c0015e0e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015e16:	83 ec 0c             	sub    esp,0xc
c0015e19:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015e1d:	e8 c4 1c ff ff       	call   c0007ae6 <malloc>
c0015e22:	83 c4 10             	add    esp,0x10
c0015e25:	89 c3                	mov    ebx,eax
c0015e27:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015e2c:	83 ec 08             	sub    esp,0x8
c0015e2f:	50                   	push   eax
c0015e30:	53                   	push   ebx
c0015e31:	e8 62 42 ff ff       	call   c000a098 <VAS::VAS(bool)>
c0015e36:	83 c4 10             	add    esp,0x10
c0015e39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e3d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015e43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e47:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015e51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e55:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015e59:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015e5f:	e8 ca bc ff ff       	call   c0011b2e <KeInitSignals()>
c0015e64:	89 c2                	mov    edx,eax
c0015e66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e6a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015e70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e74:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e7a:	85 c0                	test   eax,eax
c0015e7c:	74 42                	je     c0015ec0 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015e7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e82:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e88:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015e8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e92:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015e98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e9c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ea2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015ea8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015eac:	05 0c 01 00 00       	add    eax,0x10c
c0015eb1:	83 ec 08             	sub    esp,0x8
c0015eb4:	52                   	push   edx
c0015eb5:	50                   	push   eax
c0015eb6:	e8 85 a7 fe ff       	call   c0000640 <strcpy>
c0015ebb:	83 c4 10             	add    esp,0x10
c0015ebe:	eb 64                	jmp    c0015f24 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015ec0:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015ec8:	83 ec 0c             	sub    esp,0xc
c0015ecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015ecf:	e8 12 1c ff ff       	call   c0007ae6 <malloc>
c0015ed4:	83 c4 10             	add    esp,0x10
c0015ed7:	89 c3                	mov    ebx,eax
c0015ed9:	83 ec 08             	sub    esp,0x8
c0015edc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015ee0:	53                   	push   ebx
c0015ee1:	e8 b0 2d ff ff       	call   c0008c96 <VgaText::VgaText(char const*)>
c0015ee6:	83 c4 10             	add    esp,0x10
c0015ee9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015eed:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015ef3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ef7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015efd:	83 ec 0c             	sub    esp,0xc
c0015f00:	50                   	push   eax
c0015f01:	e8 2e 26 ff ff       	call   c0008534 <addToTerminalCycle(VgaText*)>
c0015f06:	83 c4 10             	add    esp,0x10
c0015f09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f0d:	05 0c 01 00 00       	add    eax,0x10c
c0015f12:	83 ec 08             	sub    esp,0x8
c0015f15:	68 8d 2b 02 c0       	push   0xc0022b8d
c0015f1a:	50                   	push   eax
c0015f1b:	e8 20 a7 fe ff       	call   c0000640 <strcpy>
c0015f20:	83 c4 10             	add    esp,0x10
c0015f23:	90                   	nop
c0015f24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f28:	83 c0 0c             	add    eax,0xc
c0015f2b:	83 ec 08             	sub    esp,0x8
c0015f2e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015f32:	50                   	push   eax
c0015f33:	e8 08 a7 fe ff       	call   c0000640 <strcpy>
c0015f38:	83 c4 10             	add    esp,0x10
c0015f3b:	83 ec 08             	sub    esp,0x8
c0015f3e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015f42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015f46:	e8 c1 fb ff ff       	call   c0015b0c <Process::addArgs(char**)>
c0015f4b:	83 c4 10             	add    esp,0x10
c0015f4e:	90                   	nop
c0015f4f:	83 c4 24             	add    esp,0x24
c0015f52:	5b                   	pop    ebx
c0015f53:	5e                   	pop    esi
c0015f54:	c3                   	ret    
c0015f55:	8d 76 00             	lea    esi,[esi+0x0]

c0015f58 <taskStartupFunction>:
c0015f58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f5d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015f60:	c3                   	ret    
c0015f61:	90                   	nop
c0015f62:	66 90                	xchg   ax,ax

c0015f64 <Semaphore::Semaphore(int)>:
c0015f64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f6c:	89 10                	mov    DWORD PTR [eax],edx
c0015f6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f72:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f7d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015f84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f88:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015f8f:	90                   	nop
c0015f90:	c3                   	ret    
c0015f91:	90                   	nop
c0015f92:	66 90                	xchg   ax,ax

c0015f94 <Mutex::Mutex()>:
c0015f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f98:	6a 01                	push   0x1
c0015f9a:	50                   	push   eax
c0015f9b:	e8 c4 ff ff ff       	call   c0015f64 <Semaphore::Semaphore(int)>
c0015fa0:	83 c4 08             	add    esp,0x8
c0015fa3:	90                   	nop
c0015fa4:	c3                   	ret    
c0015fa5:	90                   	nop
c0015fa6:	66 90                	xchg   ax,ax

c0015fa8 <Process::createThread(void (*)(void*), void*, int)>:
c0015fa8:	57                   	push   edi
c0015fa9:	31 c9                	xor    ecx,ecx
c0015fab:	56                   	push   esi
c0015fac:	53                   	push   ebx
c0015fad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fb1:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015fb8:	89 f2                	mov    edx,esi
c0015fba:	66 90                	xchg   ax,ax
c0015fbc:	0f b7 c2             	movzx  eax,dx
c0015fbf:	80 e2 01             	and    dl,0x1
c0015fc2:	74 14                	je     c0015fd8 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015fc4:	d1 f8                	sar    eax,1
c0015fc6:	83 c1 01             	add    ecx,0x1
c0015fc9:	89 c2                	mov    edx,eax
c0015fcb:	83 f9 10             	cmp    ecx,0x10
c0015fce:	75 ec                	jne    c0015fbc <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015fd0:	31 db                	xor    ebx,ebx
c0015fd2:	89 d8                	mov    eax,ebx
c0015fd4:	5b                   	pop    ebx
c0015fd5:	5e                   	pop    esi
c0015fd6:	5f                   	pop    edi
c0015fd7:	c3                   	ret    
c0015fd8:	b8 01 00 00 00       	mov    eax,0x1
c0015fdd:	d3 e0                	shl    eax,cl
c0015fdf:	09 c6                	or     esi,eax
c0015fe1:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015fe4:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015feb:	01 c0                	add    eax,eax
c0015fed:	01 c8                	add    eax,ecx
c0015fef:	8d 04 80             	lea    eax,[eax+eax*4]
c0015ff2:	01 d8                	add    eax,ebx
c0015ff4:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015ffb:	75 0b                	jne    c0016008 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015ffd:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0016007:	90                   	nop
c0016008:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001600e:	83 ec 0c             	sub    esp,0xc
c0016011:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016014:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0016017:	01 c0                	add    eax,eax
c0016019:	01 c8                	add    eax,ecx
c001601b:	8d 3c 80             	lea    edi,[eax+eax*4]
c001601e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016021:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016027:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c001602d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016031:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0016037:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c001603d:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0016043:	89 ca                	mov    edx,ecx
c0016045:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c001604c:	f7 da                	neg    edx
c001604e:	c1 e2 15             	shl    edx,0x15
c0016051:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016057:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001605d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016061:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001606b:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0016071:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016075:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001607b:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016085:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001608f:	68 00 01 00 00       	push   0x100
c0016094:	e8 4d 1a ff ff       	call   c0007ae6 <malloc>
c0016099:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001609c:	58                   	pop    eax
c001609d:	5a                   	pop    edx
c001609e:	53                   	push   ebx
c001609f:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160a4:	e8 77 9e 00 00       	call   c001ff20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00160a9:	83 c4 10             	add    esp,0x10
c00160ac:	89 d8                	mov    eax,ebx
c00160ae:	5b                   	pop    ebx
c00160af:	5e                   	pop    esi
c00160b0:	5f                   	pop    edi
c00160b1:	c3                   	ret    
c00160b2:	66 90                	xchg   ax,ax

c00160b4 <Process::createUserThread()>:
c00160b4:	83 ec 0c             	sub    esp,0xc
c00160b7:	68 80 00 00 00       	push   0x80
c00160bc:	6a 00                	push   0x0
c00160be:	68 04 5a 01 c0       	push   0xc0015a04
c00160c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160c7:	50                   	push   eax
c00160c8:	e8 db fe ff ff       	call   c0015fa8 <Process::createThread(void (*)(void*), void*, int)>
c00160cd:	83 c4 1c             	add    esp,0x1c
c00160d0:	c3                   	ret    
c00160d1:	8d 76 00             	lea    esi,[esi+0x0]

c00160d4 <setupMultitasking(void (*)())>:
c00160d4:	56                   	push   esi
c00160d5:	53                   	push   ebx
c00160d6:	83 ec 04             	sub    esp,0x4
c00160d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160dd:	eb 11                	jmp    c00160f0 <setupMultitasking(void (*)())+0x1c>
c00160df:	90                   	nop
c00160e0:	83 ec 0c             	sub    esp,0xc
c00160e3:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160e8:	e8 77 9d 00 00       	call   c001fe64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00160ed:	83 c4 10             	add    esp,0x10
c00160f0:	83 ec 0c             	sub    esp,0xc
c00160f3:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160f8:	e8 43 9d 00 00       	call   c001fe40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00160fd:	83 c4 10             	add    esp,0x10
c0016100:	84 c0                	test   al,al
c0016102:	74 dc                	je     c00160e0 <setupMultitasking(void (*)())+0xc>
c0016104:	83 ec 0c             	sub    esp,0xc
c0016107:	68 24 07 00 00       	push   0x724
c001610c:	e8 d5 19 ff ff       	call   c0007ae6 <malloc>
c0016111:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016118:	89 c3                	mov    ebx,eax
c001611a:	6a 00                	push   0x0
c001611c:	68 91 2b 02 c0       	push   0xc0022b91
c0016121:	6a 01                	push   0x1
c0016123:	50                   	push   eax
c0016124:	e8 5b fc ff ff       	call   c0015d84 <Process::Process(bool, char const*, Process*, char**)>
c0016129:	83 c4 14             	add    esp,0x14
c001612c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0016132:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0016138:	50                   	push   eax
c0016139:	e8 4b 26 ff ff       	call   c0008789 <setActiveTerminal(VgaText*)>
c001613e:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0016145:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001614f:	83 c8 01             	or     eax,0x1
c0016152:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0016159:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001615f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016162:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001616c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016172:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0016178:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016182:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001618c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016196:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001619c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00161a6:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00161ac:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00161b6:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00161bd:	e8 24 19 ff ff       	call   c0007ae6 <malloc>
c00161c2:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00161c8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00161ce:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00161d4:	5a                   	pop    edx
c00161d5:	59                   	pop    ecx
c00161d6:	68 8d 2b 02 c0       	push   0xc0022b8d
c00161db:	50                   	push   eax
c00161dc:	e8 5f a4 fe ff       	call   c0000640 <strcpy>
c00161e1:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00161e8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00161ec:	83 c4 14             	add    esp,0x14
c00161ef:	5b                   	pop    ebx
c00161f0:	5e                   	pop    esi
c00161f1:	e9 73 a0 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00161f6:	66 90                	xchg   ax,ax

c00161f8 <schedule()>:
c00161f8:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c00161fe:	85 d2                	test   edx,edx
c0016200:	74 0e                	je     c0016210 <schedule()+0x18>
c0016202:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c001620c:	c3                   	ret    
c001620d:	8d 76 00             	lea    esi,[esi+0x0]
c0016210:	53                   	push   ebx
c0016211:	83 ec 14             	sub    esp,0x14
c0016214:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016219:	e8 22 9c 00 00       	call   c001fe40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001621e:	83 c4 10             	add    esp,0x10
c0016221:	84 c0                	test   al,al
c0016223:	75 3f                	jne    c0016264 <schedule()+0x6c>
c0016225:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001622a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001622d:	83 fa 01             	cmp    edx,0x1
c0016230:	74 3a                	je     c001626c <schedule()+0x74>
c0016232:	66 90                	xchg   ax,ax
c0016234:	83 ec 0c             	sub    esp,0xc
c0016237:	68 e4 c6 02 c0       	push   0xc002c6e4
c001623c:	e8 1b 9c 00 00       	call   c001fe5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016241:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016248:	89 c3                	mov    ebx,eax
c001624a:	e8 15 9c 00 00       	call   c001fe64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001624f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016256:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016259:	e8 fe f7 ff ff       	call   c0015a5c <switchToThread(ThreadControlBlock*)>
c001625e:	83 c4 10             	add    esp,0x10
c0016261:	8d 76 00             	lea    esi,[esi+0x0]
c0016264:	83 c4 08             	add    esp,0x8
c0016267:	5b                   	pop    ebx
c0016268:	c3                   	ret    
c0016269:	8d 76 00             	lea    esi,[esi+0x0]
c001626c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016273:	83 ec 08             	sub    esp,0x8
c0016276:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001627b:	50                   	push   eax
c001627c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016281:	e8 9a 9c 00 00       	call   c001ff20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016286:	83 c4 10             	add    esp,0x10
c0016289:	eb a9                	jmp    c0016234 <schedule()+0x3c>
c001628b:	90                   	nop

c001628c <Semaphore::tryAcquire()>:
c001628c:	53                   	push   ebx
c001628d:	83 ec 08             	sub    esp,0x8
c0016290:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016294:	fa                   	cli    
c0016295:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001629a:	8d 50 01             	lea    edx,[eax+0x1]
c001629d:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00162a3:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c00162a9:	8d 5a 01             	lea    ebx,[edx+0x1]
c00162ac:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c00162b2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00162b5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00162b7:	7c 33                	jl     c00162ec <Semaphore::tryAcquire()+0x60>
c00162b9:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c00162bf:	85 d2                	test   edx,edx
c00162c1:	75 0d                	jne    c00162d0 <Semaphore::tryAcquire()+0x44>
c00162c3:	8b 15 c0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c0
c00162c9:	85 d2                	test   edx,edx
c00162cb:	75 6f                	jne    c001633c <Semaphore::tryAcquire()+0xb0>
c00162cd:	8d 76 00             	lea    esi,[esi+0x0]
c00162d0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162d5:	85 c0                	test   eax,eax
c00162d7:	74 0b                	je     c00162e4 <Semaphore::tryAcquire()+0x58>
c00162d9:	8d 76 00             	lea    esi,[esi+0x0]
c00162dc:	31 c0                	xor    eax,eax
c00162de:	83 c4 08             	add    esp,0x8
c00162e1:	5b                   	pop    ebx
c00162e2:	c3                   	ret    
c00162e3:	90                   	nop
c00162e4:	fb                   	sti    
c00162e5:	83 c4 08             	add    esp,0x8
c00162e8:	5b                   	pop    ebx
c00162e9:	c3                   	ret    
c00162ea:	66 90                	xchg   ax,ax
c00162ec:	83 c3 01             	add    ebx,0x1
c00162ef:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c00162f5:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00162f8:	85 d2                	test   edx,edx
c00162fa:	75 24                	jne    c0016320 <Semaphore::tryAcquire()+0x94>
c00162fc:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c0016302:	85 c9                	test   ecx,ecx
c0016304:	74 1a                	je     c0016320 <Semaphore::tryAcquire()+0x94>
c0016306:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016310:	e8 e3 fe ff ff       	call   c00161f8 <schedule()>
c0016315:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001631a:	83 e8 01             	sub    eax,0x1
c001631d:	8d 76 00             	lea    esi,[esi+0x0]
c0016320:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016325:	85 c0                	test   eax,eax
c0016327:	75 0b                	jne    c0016334 <Semaphore::tryAcquire()+0xa8>
c0016329:	fb                   	sti    
c001632a:	b0 01                	mov    al,0x1
c001632c:	83 c4 08             	add    esp,0x8
c001632f:	5b                   	pop    ebx
c0016330:	c3                   	ret    
c0016331:	8d 76 00             	lea    esi,[esi+0x0]
c0016334:	b0 01                	mov    al,0x1
c0016336:	83 c4 08             	add    esp,0x8
c0016339:	5b                   	pop    ebx
c001633a:	c3                   	ret    
c001633b:	90                   	nop
c001633c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016346:	e8 ad fe ff ff       	call   c00161f8 <schedule()>
c001634b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016350:	83 e8 01             	sub    eax,0x1
c0016353:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016358:	85 c0                	test   eax,eax
c001635a:	75 80                	jne    c00162dc <Semaphore::tryAcquire()+0x50>
c001635c:	eb 86                	jmp    c00162e4 <Semaphore::tryAcquire()+0x58>
c001635e:	66 90                	xchg   ax,ax

c0016360 <Semaphore::assertLocked(char const*)>:
c0016360:	83 ec 0c             	sub    esp,0xc
c0016363:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016367:	fa                   	cli    
c0016368:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c001636e:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016373:	83 c1 01             	add    ecx,0x1
c0016376:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001637c:	8d 48 01             	lea    ecx,[eax+0x1]
c001637f:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016385:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0016387:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001638a:	7c 28                	jl     c00163b4 <Semaphore::assertLocked(char const*)+0x54>
c001638c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016391:	85 c0                	test   eax,eax
c0016393:	75 0b                	jne    c00163a0 <Semaphore::assertLocked(char const*)+0x40>
c0016395:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001639a:	85 c0                	test   eax,eax
c001639c:	75 32                	jne    c00163d0 <Semaphore::assertLocked(char const*)+0x70>
c001639e:	66 90                	xchg   ax,ax
c00163a0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163a5:	83 e8 01             	sub    eax,0x1
c00163a8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163ad:	75 01                	jne    c00163b0 <Semaphore::assertLocked(char const*)+0x50>
c00163af:	fb                   	sti    
c00163b0:	83 c4 0c             	add    esp,0xc
c00163b3:	c3                   	ret    
c00163b4:	83 ec 0c             	sub    esp,0xc
c00163b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00163bb:	52                   	push   edx
c00163bc:	e8 52 b3 ff ff       	call   c0011713 <KePanic(char const*)>
c00163c1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00163c6:	83 c4 10             	add    esp,0x10
c00163c9:	83 e8 01             	sub    eax,0x1
c00163cc:	eb be                	jmp    c001638c <Semaphore::assertLocked(char const*)+0x2c>
c00163ce:	66 90                	xchg   ax,ax
c00163d0:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00163da:	e8 19 fe ff ff       	call   c00161f8 <schedule()>
c00163df:	eb bf                	jmp    c00163a0 <Semaphore::assertLocked(char const*)+0x40>
c00163e1:	8d 76 00             	lea    esi,[esi+0x0]

c00163e4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00163e4:	83 ec 0c             	sub    esp,0xc
c00163e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163f0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00163f3:	e8 00 fe ff ff       	call   c00161f8 <schedule()>
c00163f8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163fd:	83 e8 01             	sub    eax,0x1
c0016400:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016405:	75 01                	jne    c0016408 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0016407:	fb                   	sti    
c0016408:	83 c4 0c             	add    esp,0xc
c001640b:	c3                   	ret    

c001640c <blockTask(TaskState)>:
c001640c:	83 ec 0c             	sub    esp,0xc
c001640f:	fa                   	cli    
c0016410:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016415:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016419:	83 c0 01             	add    eax,0x1
c001641c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016421:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016426:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016429:	e8 ca fd ff ff       	call   c00161f8 <schedule()>
c001642e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016433:	83 e8 01             	sub    eax,0x1
c0016436:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001643b:	75 03                	jne    c0016440 <blockTask(TaskState)+0x34>
c001643d:	fb                   	sti    
c001643e:	66 90                	xchg   ax,ax
c0016440:	83 c4 0c             	add    esp,0xc
c0016443:	c3                   	ret    

c0016444 <waitTask(int, int*, int)>:
c0016444:	83 ec 18             	sub    esp,0x18
c0016447:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001644c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016450:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016453:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016457:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001645c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001645f:	6a 07                	push   0x7
c0016461:	e8 a6 ff ff ff       	call   c001640c <blockTask(TaskState)>
c0016466:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001646b:	83 c4 10             	add    esp,0x10
c001646e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016471:	85 d2                	test   edx,edx
c0016473:	74 0b                	je     c0016480 <waitTask(int, int*, int)+0x3c>
c0016475:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016478:	89 02                	mov    DWORD PTR [edx],eax
c001647a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001647f:	90                   	nop
c0016480:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016483:	83 c4 0c             	add    esp,0xc
c0016486:	c3                   	ret    
c0016487:	90                   	nop

c0016488 <milliTenthSleepUntil(unsigned int)>:
c0016488:	83 ec 0c             	sub    esp,0xc
c001648b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001648f:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c0016495:	76 05                	jbe    c001649c <milliTenthSleepUntil(unsigned int)+0x14>
c0016497:	90                   	nop
c0016498:	83 c4 0c             	add    esp,0xc
c001649b:	c3                   	ret    
c001649c:	fa                   	cli    
c001649d:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c00164a3:	83 ec 08             	sub    esp,0x8
c00164a6:	83 c2 01             	add    edx,0x1
c00164a9:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00164af:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00164b5:	83 c1 01             	add    ecx,0x1
c00164b8:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00164be:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00164c4:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00164c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164cc:	50                   	push   eax
c00164cd:	68 d8 c6 02 c0       	push   0xc002c6d8
c00164d2:	e8 49 9a 00 00       	call   c001ff20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164d7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00164de:	e8 29 ff ff ff       	call   c001640c <blockTask(TaskState)>
c00164e3:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00164e8:	83 c4 10             	add    esp,0x10
c00164eb:	83 e8 01             	sub    eax,0x1
c00164ee:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00164f3:	85 c0                	test   eax,eax
c00164f5:	75 09                	jne    c0016500 <milliTenthSleepUntil(unsigned int)+0x78>
c00164f7:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00164fc:	85 c0                	test   eax,eax
c00164fe:	75 14                	jne    c0016514 <milliTenthSleepUntil(unsigned int)+0x8c>
c0016500:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016505:	83 e8 01             	sub    eax,0x1
c0016508:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001650d:	75 89                	jne    c0016498 <milliTenthSleepUntil(unsigned int)+0x10>
c001650f:	fb                   	sti    
c0016510:	83 c4 0c             	add    esp,0xc
c0016513:	c3                   	ret    
c0016514:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001651e:	e8 d5 fc ff ff       	call   c00161f8 <schedule()>
c0016523:	eb db                	jmp    c0016500 <milliTenthSleepUntil(unsigned int)+0x78>
c0016525:	8d 76 00             	lea    esi,[esi+0x0]

c0016528 <milliTenthSleep(unsigned int)>:
c0016528:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001652c:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c0016531:	01 c2                	add    edx,eax
c0016533:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016537:	e9 4c ff ff ff       	jmp    c0016488 <milliTenthSleepUntil(unsigned int)>

c001653c <sleep(unsigned int)>:
c001653c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016540:	8d 04 80             	lea    eax,[eax+eax*4]
c0016543:	8d 04 80             	lea    eax,[eax+eax*4]
c0016546:	8d 04 80             	lea    eax,[eax+eax*4]
c0016549:	8d 04 80             	lea    eax,[eax+eax*4]
c001654c:	c1 e0 04             	shl    eax,0x4
c001654f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016553:	eb d3                	jmp    c0016528 <milliTenthSleep(unsigned int)>
c0016555:	90                   	nop
c0016556:	66 90                	xchg   ax,ax

c0016558 <Semaphore::acquire()>:
c0016558:	83 ec 0c             	sub    esp,0xc
c001655b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001655f:	fa                   	cli    
c0016560:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016565:	83 c0 01             	add    eax,0x1
c0016568:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001656d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016572:	8d 48 01             	lea    ecx,[eax+0x1]
c0016575:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001657b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001657e:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016580:	7d 2e                	jge    c00165b0 <Semaphore::acquire()+0x58>
c0016582:	83 c1 01             	add    ecx,0x1
c0016585:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016588:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001658d:	85 c0                	test   eax,eax
c001658f:	75 0b                	jne    c001659c <Semaphore::acquire()+0x44>
c0016591:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016596:	85 c0                	test   eax,eax
c0016598:	75 66                	jne    c0016600 <Semaphore::acquire()+0xa8>
c001659a:	66 90                	xchg   ax,ax
c001659c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165a1:	83 e8 01             	sub    eax,0x1
c00165a4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165a9:	75 01                	jne    c00165ac <Semaphore::acquire()+0x54>
c00165ab:	fb                   	sti    
c00165ac:	83 c4 0c             	add    esp,0xc
c00165af:	c3                   	ret    
c00165b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165b5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00165bc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00165bf:	85 c9                	test   ecx,ecx
c00165c1:	74 51                	je     c0016614 <Semaphore::acquire()+0xbc>
c00165c3:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00165c6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00165cc:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00165cf:	90                   	nop
c00165d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165d5:	83 ec 0c             	sub    esp,0xc
c00165d8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00165db:	68 10 2c 02 c0       	push   0xc0022c10
c00165e0:	e8 90 43 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00165e5:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00165ec:	e8 1b fe ff ff       	call   c001640c <blockTask(TaskState)>
c00165f1:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00165f6:	83 c4 10             	add    esp,0x10
c00165f9:	83 e8 01             	sub    eax,0x1
c00165fc:	eb 8a                	jmp    c0016588 <Semaphore::acquire()+0x30>
c00165fe:	66 90                	xchg   ax,ax
c0016600:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001660a:	e8 e9 fb ff ff       	call   c00161f8 <schedule()>
c001660f:	eb 8b                	jmp    c001659c <Semaphore::acquire()+0x44>
c0016611:	8d 76 00             	lea    esi,[esi+0x0]
c0016614:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016619:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001661c:	eb b2                	jmp    c00165d0 <Semaphore::acquire()+0x78>
c001661e:	66 90                	xchg   ax,ax

c0016620 <taskReturned>:
c0016620:	83 ec 18             	sub    esp,0x18
c0016623:	68 30 2c 02 c0       	push   0xc0022c30
c0016628:	e8 e6 b0 ff ff       	call   c0011713 <KePanic(char const*)>
c001662d:	83 c4 10             	add    esp,0x10
c0016630:	83 ec 0c             	sub    esp,0xc
c0016633:	6a 02                	push   0x2
c0016635:	e8 d2 fd ff ff       	call   c001640c <blockTask(TaskState)>
c001663a:	fa                   	cli    
c001663b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016640:	83 c0 01             	add    eax,0x1
c0016643:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016648:	e8 ab fb ff ff       	call   c00161f8 <schedule()>
c001664d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016652:	83 c4 10             	add    esp,0x10
c0016655:	83 e8 01             	sub    eax,0x1
c0016658:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001665d:	85 c0                	test   eax,eax
c001665f:	75 cf                	jne    c0016630 <taskReturned+0x10>
c0016661:	fb                   	sti    
c0016662:	eb cc                	jmp    c0016630 <taskReturned+0x10>

c0016664 <Thr::processFromPID(int)>:
c0016664:	57                   	push   edi
c0016665:	56                   	push   esi
c0016666:	53                   	push   ebx
c0016667:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001666b:	fa                   	cli    
c001666c:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016672:	83 ec 0c             	sub    esp,0xc
c0016675:	83 c1 01             	add    ecx,0x1
c0016678:	68 e4 c6 02 c0       	push   0xc002c6e4
c001667d:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016683:	e8 d4 97 00 00       	call   c001fe5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016688:	83 c4 10             	add    esp,0x10
c001668b:	89 c7                	mov    edi,eax
c001668d:	eb 15                	jmp    c00166a4 <Thr::processFromPID(int)+0x40>
c001668f:	90                   	nop
c0016690:	83 ec 0c             	sub    esp,0xc
c0016693:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016698:	e8 bf 97 00 00       	call   c001fe5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001669d:	83 c4 10             	add    esp,0x10
c00166a0:	39 f8                	cmp    eax,edi
c00166a2:	74 50                	je     c00166f4 <Thr::processFromPID(int)+0x90>
c00166a4:	83 ec 0c             	sub    esp,0xc
c00166a7:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166ac:	e8 ab 97 00 00       	call   c001fe5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166b1:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00166b8:	89 c3                	mov    ebx,eax
c00166ba:	e8 a5 97 00 00       	call   c001fe64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00166bf:	58                   	pop    eax
c00166c0:	5a                   	pop    edx
c00166c1:	53                   	push   ebx
c00166c2:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166c7:	e8 54 98 00 00       	call   c001ff20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166cc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166cf:	83 c4 10             	add    esp,0x10
c00166d2:	39 30                	cmp    DWORD PTR [eax],esi
c00166d4:	75 ba                	jne    c0016690 <Thr::processFromPID(int)+0x2c>
c00166d6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00166db:	83 e8 01             	sub    eax,0x1
c00166de:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00166e3:	74 0b                	je     c00166f0 <Thr::processFromPID(int)+0x8c>
c00166e5:	8d 76 00             	lea    esi,[esi+0x0]
c00166e8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166eb:	5b                   	pop    ebx
c00166ec:	5e                   	pop    esi
c00166ed:	5f                   	pop    edi
c00166ee:	c3                   	ret    
c00166ef:	90                   	nop
c00166f0:	fb                   	sti    
c00166f1:	eb f5                	jmp    c00166e8 <Thr::processFromPID(int)+0x84>
c00166f3:	90                   	nop
c00166f4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00166f9:	83 e8 01             	sub    eax,0x1
c00166fc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016701:	75 05                	jne    c0016708 <Thr::processFromPID(int)+0xa4>
c0016703:	fb                   	sti    
c0016704:	5b                   	pop    ebx
c0016705:	5e                   	pop    esi
c0016706:	5f                   	pop    edi
c0016707:	c3                   	ret    
c0016708:	5b                   	pop    ebx
c0016709:	31 c0                	xor    eax,eax
c001670b:	5e                   	pop    esi
c001670c:	5f                   	pop    edi
c001670d:	c3                   	ret    
c001670e:	66 90                	xchg   ax,ax

c0016710 <unblockTask(ThreadControlBlock*)>:
c0016710:	53                   	push   ebx
c0016711:	83 ec 08             	sub    esp,0x8
c0016714:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016718:	fa                   	cli    
c0016719:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001671e:	83 c0 01             	add    eax,0x1
c0016721:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016726:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016729:	85 c0                	test   eax,eax
c001672b:	74 67                	je     c0016794 <unblockTask(ThreadControlBlock*)+0x84>
c001672d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016730:	83 f8 01             	cmp    eax,0x1
c0016733:	74 37                	je     c001676c <unblockTask(ThreadControlBlock*)+0x5c>
c0016735:	83 ec 0c             	sub    esp,0xc
c0016738:	68 e4 c6 02 c0       	push   0xc002c6e4
c001673d:	e8 1a 97 00 00       	call   c001fe5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016742:	83 c4 10             	add    esp,0x10
c0016745:	85 c0                	test   eax,eax
c0016747:	75 1b                	jne    c0016764 <unblockTask(ThreadControlBlock*)+0x54>
c0016749:	eb 5d                	jmp    c00167a8 <unblockTask(ThreadControlBlock*)+0x98>
c001674b:	90                   	nop
c001674c:	83 ec 08             	sub    esp,0x8
c001674f:	50                   	push   eax
c0016750:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016755:	e8 22 9a 00 00       	call   c002017c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001675a:	83 c4 10             	add    esp,0x10
c001675d:	85 c0                	test   eax,eax
c001675f:	74 47                	je     c00167a8 <unblockTask(ThreadControlBlock*)+0x98>
c0016761:	8d 76 00             	lea    esi,[esi+0x0]
c0016764:	39 c3                	cmp    ebx,eax
c0016766:	75 e4                	jne    c001674c <unblockTask(ThreadControlBlock*)+0x3c>
c0016768:	eb 12                	jmp    c001677c <unblockTask(ThreadControlBlock*)+0x6c>
c001676a:	66 90                	xchg   ax,ax
c001676c:	83 ec 0c             	sub    esp,0xc
c001676f:	68 af 2b 02 c0       	push   0xc0022baf
c0016774:	e8 fc 41 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0016779:	83 c4 10             	add    esp,0x10
c001677c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016781:	83 e8 01             	sub    eax,0x1
c0016784:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016789:	75 01                	jne    c001678c <unblockTask(ThreadControlBlock*)+0x7c>
c001678b:	fb                   	sti    
c001678c:	83 c4 08             	add    esp,0x8
c001678f:	5b                   	pop    ebx
c0016790:	c3                   	ret    
c0016791:	8d 76 00             	lea    esi,[esi+0x0]
c0016794:	83 ec 0c             	sub    esp,0xc
c0016797:	68 98 2b 02 c0       	push   0xc0022b98
c001679c:	e8 d4 41 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00167a1:	83 c4 10             	add    esp,0x10
c00167a4:	eb d6                	jmp    c001677c <unblockTask(ThreadControlBlock*)+0x6c>
c00167a6:	66 90                	xchg   ax,ax
c00167a8:	83 ec 08             	sub    esp,0x8
c00167ab:	53                   	push   ebx
c00167ac:	68 e4 c6 02 c0       	push   0xc002c6e4
c00167b1:	e8 6a 97 00 00       	call   c001ff20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00167b6:	83 c4 10             	add    esp,0x10
c00167b9:	eb c1                	jmp    c001677c <unblockTask(ThreadControlBlock*)+0x6c>
c00167bb:	90                   	nop

c00167bc <cleanupTerminatedTask(ThreadControlBlock*)>:
c00167bc:	55                   	push   ebp
c00167bd:	57                   	push   edi
c00167be:	56                   	push   esi
c00167bf:	53                   	push   ebx
c00167c0:	83 ec 1c             	sub    esp,0x1c
c00167c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00167c7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167ca:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00167d0:	85 ed                	test   ebp,ebp
c00167d2:	7e 28                	jle    c00167fc <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00167d4:	31 f6                	xor    esi,esi
c00167d6:	66 90                	xchg   ax,ax
c00167d8:	83 ec 0c             	sub    esp,0xc
c00167db:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00167e2:	83 c6 01             	add    esi,0x1
c00167e5:	57                   	push   edi
c00167e6:	e8 0b 13 ff ff       	call   c0007af6 <free>
c00167eb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167ee:	83 c4 10             	add    esp,0x10
c00167f1:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00167f7:	7f df                	jg     c00167d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00167f9:	8d 76 00             	lea    esi,[esi+0x0]
c00167fc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016806:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001680b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001680e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016811:	d3 c0                	rol    eax,cl
c0016813:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001681a:	21 c8                	and    eax,ecx
c001681c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0016823:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016826:	89 f7                	mov    edi,esi
c0016828:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016830:	0f 85 72 01 00 00    	jne    c00169a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016836:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001683c:	85 ed                	test   ebp,ebp
c001683e:	74 1c                	je     c001685c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016840:	83 ec 0c             	sub    esp,0xc
c0016843:	55                   	push   ebp
c0016844:	e8 db ab ff ff       	call   c0011424 <EnvVarContainer::~EnvVarContainer()>
c0016849:	59                   	pop    ecx
c001684a:	5e                   	pop    esi
c001684b:	6a 0c                	push   0xc
c001684d:	55                   	push   ebp
c001684e:	e8 f5 3f ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c0016853:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016856:	83 c4 10             	add    esp,0x10
c0016859:	89 f7                	mov    edi,esi
c001685b:	90                   	nop
c001685c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016862:	85 c0                	test   eax,eax
c0016864:	0f 84 b2 00 00 00    	je     c001691c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001686a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001686d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016871:	31 c9                	xor    ecx,ecx
c0016873:	eb 17                	jmp    c001688c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016875:	8d 76 00             	lea    esi,[esi+0x0]
c0016878:	83 c1 01             	add    ecx,0x1
c001687b:	83 f9 10             	cmp    ecx,0x10
c001687e:	0f 84 98 00 00 00    	je     c001691c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016884:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001688a:	66 90                	xchg   ax,ax
c001688c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016893:	d3 fa                	sar    edx,cl
c0016895:	80 e2 01             	and    dl,0x1
c0016898:	74 de                	je     c0016878 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001689a:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001689d:	01 d2                	add    edx,edx
c001689f:	01 ca                	add    edx,ecx
c00168a1:	8d 14 92             	lea    edx,[edx+edx*4]
c00168a4:	01 d0                	add    eax,edx
c00168a6:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00168ac:	83 fd 07             	cmp    ebp,0x7
c00168af:	75 c7                	jne    c0016878 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00168b1:	05 40 02 00 00       	add    eax,0x240
c00168b6:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00168b9:	83 fd ff             	cmp    ebp,0xffffffff
c00168bc:	0f 8c ee 00 00 00    	jl     c00169b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00168c2:	0f 84 ac 01 00 00    	je     c0016a74 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00168c8:	85 ed                	test   ebp,ebp
c00168ca:	0f 84 90 01 00 00    	je     c0016a60 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00168d0:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00168d2:	75 a4                	jne    c0016878 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00168d4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00168da:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168de:	01 d0                	add    eax,edx
c00168e0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00168e4:	83 ec 0c             	sub    esp,0xc
c00168e7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00168ed:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168f0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00168f6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00168fd:	50                   	push   eax
c00168fe:	e8 0d fe ff ff       	call   c0016710 <unblockTask(ThreadControlBlock*)>
c0016903:	83 c4 10             	add    esp,0x10
c0016906:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016909:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001690d:	89 f7                	mov    edi,esi
c001690f:	83 c1 01             	add    ecx,0x1
c0016912:	83 f9 10             	cmp    ecx,0x10
c0016915:	0f 85 69 ff ff ff    	jne    c0016884 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001691b:	90                   	nop
c001691c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0016922:	85 c0                	test   eax,eax
c0016924:	74 62                	je     c0016988 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016926:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001692c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016932:	74 54                	je     c0016988 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016934:	83 ec 0c             	sub    esp,0xc
c0016937:	68 e4 c6 02 c0       	push   0xc002c6e4
c001693c:	e8 1b 95 00 00       	call   c001fe5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016941:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016948:	89 c7                	mov    edi,eax
c001694a:	e8 f1 94 00 00       	call   c001fe40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001694f:	83 c4 10             	add    esp,0x10
c0016952:	84 c0                	test   al,al
c0016954:	0f 84 ce 00 00 00    	je     c0016a28 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001695a:	66 90                	xchg   ax,ax
c001695c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001695f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016965:	85 d2                	test   edx,edx
c0016967:	74 0f                	je     c0016978 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016969:	83 ec 0c             	sub    esp,0xc
c001696c:	8b 02                	mov    eax,DWORD PTR [edx]
c001696e:	52                   	push   edx
c001696f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016972:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016975:	83 c4 10             	add    esp,0x10
c0016978:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016982:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016985:	8d 76 00             	lea    esi,[esi+0x0]
c0016988:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001698e:	85 db                	test   ebx,ebx
c0016990:	74 16                	je     c00169a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016992:	83 ec 0c             	sub    esp,0xc
c0016995:	53                   	push   ebx
c0016996:	e8 47 32 ff ff       	call   c0009be2 <VAS::~VAS()>
c001699b:	58                   	pop    eax
c001699c:	5a                   	pop    edx
c001699d:	6a 14                	push   0x14
c001699f:	53                   	push   ebx
c00169a0:	e8 a3 3e ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c00169a5:	83 c4 10             	add    esp,0x10
c00169a8:	83 c4 1c             	add    esp,0x1c
c00169ab:	5b                   	pop    ebx
c00169ac:	5e                   	pop    esi
c00169ad:	5f                   	pop    edi
c00169ae:	5d                   	pop    ebp
c00169af:	c3                   	ret    
c00169b0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00169b4:	83 ec 0c             	sub    esp,0xc
c00169b7:	68 64 2c 02 c0       	push   0xc0022c64
c00169bc:	e8 52 ad ff ff       	call   c0011713 <KePanic(char const*)>
c00169c1:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00169c4:	83 c4 10             	add    esp,0x10
c00169c7:	89 f7                	mov    edi,esi
c00169c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00169cd:	e9 a6 fe ff ff       	jmp    c0016878 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00169d2:	66 90                	xchg   ax,ax
c00169d4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169da:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00169e0:	75 1e                	jne    c0016a00 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00169e2:	83 ec 0c             	sub    esp,0xc
c00169e5:	68 cc 2c 02 c0       	push   0xc0022ccc
c00169ea:	e8 86 3f ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00169ef:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00169f6:	e8 11 fa ff ff       	call   c001640c <blockTask(TaskState)>
c00169fb:	83 c4 10             	add    esp,0x10
c00169fe:	66 90                	xchg   ax,ax
c0016a00:	83 ec 08             	sub    esp,0x8
c0016a03:	56                   	push   esi
c0016a04:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016a09:	e8 12 95 00 00       	call   c001ff20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a0e:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016a15:	e8 42 94 00 00       	call   c001fe5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a1a:	83 c4 10             	add    esp,0x10
c0016a1d:	39 f8                	cmp    eax,edi
c0016a1f:	0f 84 37 ff ff ff    	je     c001695c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016a25:	8d 76 00             	lea    esi,[esi+0x0]
c0016a28:	83 ec 0c             	sub    esp,0xc
c0016a2b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016a30:	e8 27 94 00 00       	call   c001fe5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a35:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016a3c:	89 c6                	mov    esi,eax
c0016a3e:	e8 21 94 00 00       	call   c001fe64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a43:	83 c4 10             	add    esp,0x10
c0016a46:	39 f3                	cmp    ebx,esi
c0016a48:	74 b6                	je     c0016a00 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016a4a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016a4d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016a50:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016a56:	75 a8                	jne    c0016a00 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016a58:	e9 77 ff ff ff       	jmp    c00169d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016a64:	83 ec 0c             	sub    esp,0xc
c0016a67:	68 98 2c 02 c0       	push   0xc0022c98
c0016a6c:	e9 4b ff ff ff       	jmp    c00169bc <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016a71:	8d 76 00             	lea    esi,[esi+0x0]
c0016a74:	8b 36                	mov    esi,DWORD PTR [esi]
c0016a76:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016a7a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016a7d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016a80:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016a86:	01 d7                	add    edi,edx
c0016a88:	89 f8                	mov    eax,edi
c0016a8a:	e9 51 fe ff ff       	jmp    c00168e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016a8f:	90                   	nop

c0016a90 <cleanerTaskFunction(void*)>:
c0016a90:	53                   	push   ebx
c0016a91:	83 ec 08             	sub    esp,0x8
c0016a94:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a99:	83 e8 01             	sub    eax,0x1
c0016a9c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016aa1:	75 01                	jne    c0016aa4 <cleanerTaskFunction(void*)+0x14>
c0016aa3:	fb                   	sti    
c0016aa4:	fa                   	cli    
c0016aa5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016aaa:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016ab1:	8d 50 01             	lea    edx,[eax+0x1]
c0016ab4:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016aba:	0f 84 c4 00 00 00    	je     c0016b84 <cleanerTaskFunction(void*)+0xf4>
c0016ac0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ac5:	85 c0                	test   eax,eax
c0016ac7:	75 03                	jne    c0016acc <cleanerTaskFunction(void*)+0x3c>
c0016ac9:	fb                   	sti    
c0016aca:	66 90                	xchg   ax,ax
c0016acc:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c0016ad3:	fa                   	cli    
c0016ad4:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016ada:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016ae0:	83 c2 01             	add    edx,0x1
c0016ae3:	83 c1 01             	add    ecx,0x1
c0016ae6:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016aec:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016af2:	fa                   	cli    
c0016af3:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016af9:	83 c3 01             	add    ebx,0x1
c0016afc:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c0016b02:	eb 28                	jmp    c0016b2c <cleanerTaskFunction(void*)+0x9c>
c0016b04:	83 ec 0c             	sub    esp,0xc
c0016b07:	68 cc c6 02 c0       	push   0xc002c6cc
c0016b0c:	e8 4b 93 00 00       	call   c001fe5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016b11:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016b18:	89 c3                	mov    ebx,eax
c0016b1a:	e8 45 93 00 00       	call   c001fe64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016b1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b22:	e8 95 fc ff ff       	call   c00167bc <cleanupTerminatedTask(ThreadControlBlock*)>
c0016b27:	83 c4 10             	add    esp,0x10
c0016b2a:	66 90                	xchg   ax,ax
c0016b2c:	83 ec 0c             	sub    esp,0xc
c0016b2f:	68 cc c6 02 c0       	push   0xc002c6cc
c0016b34:	e8 07 93 00 00       	call   c001fe40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016b39:	83 c4 10             	add    esp,0x10
c0016b3c:	84 c0                	test   al,al
c0016b3e:	74 c4                	je     c0016b04 <cleanerTaskFunction(void*)+0x74>
c0016b40:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b45:	83 e8 01             	sub    eax,0x1
c0016b48:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b4d:	75 01                	jne    c0016b50 <cleanerTaskFunction(void*)+0xc0>
c0016b4f:	fb                   	sti    
c0016b50:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b55:	83 e8 01             	sub    eax,0x1
c0016b58:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b5d:	0f 85 31 ff ff ff    	jne    c0016a94 <cleanerTaskFunction(void*)+0x4>
c0016b63:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016b68:	85 c0                	test   eax,eax
c0016b6a:	0f 84 24 ff ff ff    	je     c0016a94 <cleanerTaskFunction(void*)+0x4>
c0016b70:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b7a:	e8 79 f6 ff ff       	call   c00161f8 <schedule()>
c0016b7f:	e9 10 ff ff ff       	jmp    c0016a94 <cleanerTaskFunction(void*)+0x4>
c0016b84:	83 ec 0c             	sub    esp,0xc
c0016b87:	6a 02                	push   0x2
c0016b89:	e8 56 f8 ff ff       	call   c00163e4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016b8e:	83 c4 10             	add    esp,0x10
c0016b91:	e9 36 ff ff ff       	jmp    c0016acc <cleanerTaskFunction(void*)+0x3c>
c0016b96:	66 90                	xchg   ax,ax

c0016b98 <terminateTask(int)>:
c0016b98:	83 ec 14             	sub    esp,0x14
c0016b9b:	fa                   	cli    
c0016b9c:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016ba2:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016ba8:	83 c2 01             	add    edx,0x1
c0016bab:	83 c1 01             	add    ecx,0x1
c0016bae:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016bb4:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016bba:	fa                   	cli    
c0016bbb:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bc0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016bc4:	83 c0 01             	add    eax,0x1
c0016bc7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bcc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bd1:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016bd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bd9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016bdc:	50                   	push   eax
c0016bdd:	68 cc c6 02 c0       	push   0xc002c6cc
c0016be2:	e8 39 93 00 00       	call   c001ff20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016be7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bec:	83 c4 10             	add    esp,0x10
c0016bef:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016bf6:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016bfb:	85 c0                	test   eax,eax
c0016bfd:	74 65                	je     c0016c64 <terminateTask(int)+0xcc>
c0016bff:	83 ec 0c             	sub    esp,0xc
c0016c02:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016c09:	50                   	push   eax
c0016c0a:	e8 01 fb ff ff       	call   c0016710 <unblockTask(ThreadControlBlock*)>
c0016c0f:	83 c4 10             	add    esp,0x10
c0016c12:	66 90                	xchg   ax,ax
c0016c14:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c19:	83 e8 01             	sub    eax,0x1
c0016c1c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c21:	75 01                	jne    c0016c24 <terminateTask(int)+0x8c>
c0016c23:	fb                   	sti    
c0016c24:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016c29:	83 e8 01             	sub    eax,0x1
c0016c2c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016c31:	75 09                	jne    c0016c3c <terminateTask(int)+0xa4>
c0016c33:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016c3a:	75 3c                	jne    c0016c78 <terminateTask(int)+0xe0>
c0016c3c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c41:	83 e8 01             	sub    eax,0x1
c0016c44:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c49:	75 01                	jne    c0016c4c <terminateTask(int)+0xb4>
c0016c4b:	fb                   	sti    
c0016c4c:	fa                   	cli    
c0016c4d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c52:	83 c0 01             	add    eax,0x1
c0016c55:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c5a:	66 90                	xchg   ax,ax
c0016c5c:	e8 97 f5 ff ff       	call   c00161f8 <schedule()>
c0016c61:	eb d9                	jmp    c0016c3c <terminateTask(int)+0xa4>
c0016c63:	90                   	nop
c0016c64:	83 ec 0c             	sub    esp,0xc
c0016c67:	68 c6 2b 02 c0       	push   0xc0022bc6
c0016c6c:	e8 04 3d ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0016c71:	83 c4 10             	add    esp,0x10
c0016c74:	eb 9e                	jmp    c0016c14 <terminateTask(int)+0x7c>
c0016c76:	66 90                	xchg   ax,ax
c0016c78:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016c82:	eb d8                	jmp    c0016c5c <terminateTask(int)+0xc4>

c0016c84 <Thr::terminateFromIRQ(int)>:
c0016c84:	83 ec 18             	sub    esp,0x18
c0016c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c8b:	50                   	push   eax
c0016c8c:	e8 07 ff ff ff       	call   c0016b98 <terminateTask(int)>
c0016c91:	90                   	nop
c0016c92:	66 90                	xchg   ax,ax

c0016c94 <Semaphore::release()>:
c0016c94:	83 ec 0c             	sub    esp,0xc
c0016c97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c9b:	fa                   	cli    
c0016c9c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ca1:	83 c0 01             	add    eax,0x1
c0016ca4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ca9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016cae:	8d 48 01             	lea    ecx,[eax+0x1]
c0016cb1:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016cb7:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016cba:	85 c9                	test   ecx,ecx
c0016cbc:	74 42                	je     c0016d00 <Semaphore::release()+0x6c>
c0016cbe:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016cc1:	83 ec 0c             	sub    esp,0xc
c0016cc4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016cc7:	51                   	push   ecx
c0016cc8:	e8 43 fa ff ff       	call   c0016710 <unblockTask(ThreadControlBlock*)>
c0016ccd:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016cd2:	83 c4 10             	add    esp,0x10
c0016cd5:	83 e8 01             	sub    eax,0x1
c0016cd8:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016cdd:	85 c0                	test   eax,eax
c0016cdf:	75 0b                	jne    c0016cec <Semaphore::release()+0x58>
c0016ce1:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016ce6:	85 c0                	test   eax,eax
c0016ce8:	75 22                	jne    c0016d0c <Semaphore::release()+0x78>
c0016cea:	66 90                	xchg   ax,ax
c0016cec:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016cf1:	83 e8 01             	sub    eax,0x1
c0016cf4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016cf9:	75 01                	jne    c0016cfc <Semaphore::release()+0x68>
c0016cfb:	fb                   	sti    
c0016cfc:	83 c4 0c             	add    esp,0xc
c0016cff:	c3                   	ret    
c0016d00:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016d03:	83 e9 01             	sub    ecx,0x1
c0016d06:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016d09:	eb cd                	jmp    c0016cd8 <Semaphore::release()+0x44>
c0016d0b:	90                   	nop
c0016d0c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016d16:	e8 dd f4 ff ff       	call   c00161f8 <schedule()>
c0016d1b:	eb cf                	jmp    c0016cec <Semaphore::release()+0x58>
c0016d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0016d20 <__static_initialization_and_destruction_0(int, int)>:
c0016d20:	83 ec 0c             	sub    esp,0xc
c0016d23:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016d28:	0f 85 8e 00 00 00    	jne    c0016dbc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016d2e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016d36:	0f 85 80 00 00 00    	jne    c0016dbc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016d3c:	83 ec 0c             	sub    esp,0xc
c0016d3f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016d44:	e8 8b 94 00 00       	call   c00201d4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016d49:	83 c4 10             	add    esp,0x10
c0016d4c:	83 ec 04             	sub    esp,0x4
c0016d4f:	68 9c 38 02 c0       	push   0xc002389c
c0016d54:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016d59:	68 84 01 02 c0       	push   0xc0020184
c0016d5e:	e8 95 3a ff ff       	call   c000a7f8 <__cxa_atexit>
c0016d63:	83 c4 10             	add    esp,0x10
c0016d66:	83 ec 0c             	sub    esp,0xc
c0016d69:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016d6e:	e8 61 94 00 00       	call   c00201d4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016d73:	83 c4 10             	add    esp,0x10
c0016d76:	83 ec 04             	sub    esp,0x4
c0016d79:	68 9c 38 02 c0       	push   0xc002389c
c0016d7e:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016d83:	68 84 01 02 c0       	push   0xc0020184
c0016d88:	e8 6b 3a ff ff       	call   c000a7f8 <__cxa_atexit>
c0016d8d:	83 c4 10             	add    esp,0x10
c0016d90:	83 ec 0c             	sub    esp,0xc
c0016d93:	68 cc c6 02 c0       	push   0xc002c6cc
c0016d98:	e8 37 94 00 00       	call   c00201d4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016d9d:	83 c4 10             	add    esp,0x10
c0016da0:	83 ec 04             	sub    esp,0x4
c0016da3:	68 9c 38 02 c0       	push   0xc002389c
c0016da8:	68 cc c6 02 c0       	push   0xc002c6cc
c0016dad:	68 84 01 02 c0       	push   0xc0020184
c0016db2:	e8 41 3a ff ff       	call   c000a7f8 <__cxa_atexit>
c0016db7:	83 c4 10             	add    esp,0x10
c0016dba:	66 90                	xchg   ax,ax
c0016dbc:	90                   	nop
c0016dbd:	83 c4 0c             	add    esp,0xc
c0016dc0:	c3                   	ret    
c0016dc1:	8d 76 00             	lea    esi,[esi+0x0]

c0016dc4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016dc4:	83 ec 0c             	sub    esp,0xc
c0016dc7:	83 ec 08             	sub    esp,0x8
c0016dca:	68 ff ff 00 00       	push   0xffff
c0016dcf:	6a 01                	push   0x1
c0016dd1:	e8 4a ff ff ff       	call   c0016d20 <__static_initialization_and_destruction_0(int, int)>
c0016dd6:	83 c4 10             	add    esp,0x10
c0016dd9:	83 c4 0c             	add    esp,0xc
c0016ddc:	c3                   	ret    

c0016ddd <Vm::inbv(unsigned short)>:
c0016ddd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016de1:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016de6:	75 06                	jne    c0016dee <Vm::inbv(unsigned short)+0x11>
c0016de8:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016ded:	c3                   	ret    
c0016dee:	ec                   	in     al,dx
c0016def:	c3                   	ret    

c0016df0 <Vm::outbv(unsigned short, unsigned char)>:
c0016df0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016df4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016df8:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016dfd:	75 25                	jne    c0016e24 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016dff:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016e05:	8d 51 01             	lea    edx,[ecx+0x1]
c0016e08:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016e0e:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016e14:	83 fa 20             	cmp    edx,0x20
c0016e17:	75 0c                	jne    c0016e25 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016e19:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016e23:	c3                   	ret    
c0016e24:	ee                   	out    dx,al
c0016e25:	c3                   	ret    

c0016e26 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016e26:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016e2b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016e30:	c1 e0 04             	shl    eax,0x4
c0016e33:	01 d0                	add    eax,edx
c0016e35:	c3                   	ret    

c0016e36 <Vm::getSegment(unsigned int)>:
c0016e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e3a:	c1 e8 10             	shr    eax,0x10
c0016e3d:	c3                   	ret    

c0016e3e <Vm::getOffset(unsigned int)>:
c0016e3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e42:	c3                   	ret    

c0016e43 <Vm::mainloop2()>:
c0016e43:	83 ec 18             	sub    esp,0x18
c0016e46:	fa                   	cli    
c0016e47:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e4d:	6a 02                	push   0x2
c0016e4f:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016e56:	e8 89 f5 ff ff       	call   c00163e4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016e5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e60:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016e64:	52                   	push   edx
c0016e65:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016e69:	52                   	push   edx
c0016e6a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016e6e:	52                   	push   edx
c0016e6f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016e73:	50                   	push   eax
c0016e74:	e8 96 93 fe ff       	call   c000020f <goToVM86>
c0016e79:	83 c4 2c             	add    esp,0x2c
c0016e7c:	c3                   	ret    

c0016e7d <Vm::mainVm8086Loop(void*)>:
c0016e7d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e82:	48                   	dec    eax
c0016e83:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e88:	75 01                	jne    c0016e8b <Vm::mainVm8086Loop(void*)+0xe>
c0016e8a:	fb                   	sti    
c0016e8b:	eb b6                	jmp    c0016e43 <Vm::mainloop2()>

c0016e8d <Vm::mainloop3(unsigned long)>:
c0016e8d:	83 ec 18             	sub    esp,0x18
c0016e90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016e94:	fa                   	cli    
c0016e95:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e9b:	6a 02                	push   0x2
c0016e9d:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016ea4:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016ea9:	e8 36 f5 ff ff       	call   c00163e4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016eae:	83 c4 1c             	add    esp,0x1c
c0016eb1:	eb 90                	jmp    c0016e43 <Vm::mainloop2()>

c0016eb3 <Vm::initialise8086()>:
c0016eb3:	83 ec 0c             	sub    esp,0xc
c0016eb6:	68 80 00 00 00       	push   0x80
c0016ebb:	6a 00                	push   0x0
c0016ebd:	68 7d 6e 01 c0       	push   0xc0016e7d
c0016ec2:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016ec8:	e8 db f0 ff ff       	call   c0015fa8 <Process::createThread(void (*)(void*), void*, int)>
c0016ecd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016ed4:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016ed9:	68 00 01 00 00       	push   0x100
c0016ede:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016ee3:	6a 00                	push   0x0
c0016ee5:	6a 00                	push   0x0
c0016ee7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016eed:	e8 58 30 ff ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016ef2:	83 c4 2c             	add    esp,0x2c
c0016ef5:	c3                   	ret    

c0016ef6 <Vm::finish8086()>:
c0016ef6:	53                   	push   ebx
c0016ef7:	83 ec 08             	sub    esp,0x8
c0016efa:	fa                   	cli    
c0016efb:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f01:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016f08:	75 15                	jne    c0016f1f <Vm::finish8086()+0x29>
c0016f0a:	e8 e9 f2 ff ff       	call   c00161f8 <schedule()>
c0016f0f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f14:	48                   	dec    eax
c0016f15:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f1a:	75 de                	jne    c0016efa <Vm::finish8086()+0x4>
c0016f1c:	fb                   	sti    
c0016f1d:	eb db                	jmp    c0016efa <Vm::finish8086()+0x4>
c0016f1f:	83 ec 0c             	sub    esp,0xc
c0016f22:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016f28:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016f2e:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016f35:	e8 d6 f7 ff ff       	call   c0016710 <unblockTask(ThreadControlBlock*)>
c0016f3a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f3f:	83 c4 10             	add    esp,0x10
c0016f42:	8d 50 ff             	lea    edx,[eax-0x1]
c0016f45:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016f4b:	85 d2                	test   edx,edx
c0016f4d:	75 01                	jne    c0016f50 <Vm::finish8086()+0x5a>
c0016f4f:	fb                   	sti    
c0016f50:	89 d8                	mov    eax,ebx
c0016f52:	83 c4 08             	add    esp,0x8
c0016f55:	5b                   	pop    ebx
c0016f56:	c3                   	ret    

c0016f57 <Vm::getOutput8086(unsigned char*)>:
c0016f57:	57                   	push   edi
c0016f58:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016f5e:	56                   	push   esi
c0016f5f:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016f64:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016f68:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f6a:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016f6f:	5e                   	pop    esi
c0016f70:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f7a:	5f                   	pop    edi
c0016f7b:	c3                   	ret    

c0016f7c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016f7c:	55                   	push   ebp
c0016f7d:	57                   	push   edi
c0016f7e:	56                   	push   esi
c0016f7f:	53                   	push   ebx
c0016f80:	83 ec 0c             	sub    esp,0xc
c0016f83:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016f87:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016f8b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016f8f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016f93:	fa                   	cli    
c0016f94:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f9a:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016fa1:	75 15                	jne    c0016fb8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016fa3:	e8 50 f2 ff ff       	call   c00161f8 <schedule()>
c0016fa8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fad:	48                   	dec    eax
c0016fae:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fb3:	75 de                	jne    c0016f93 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016fb5:	fb                   	sti    
c0016fb6:	eb db                	jmp    c0016f93 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016fb8:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016fbd:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016fc7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016fcb:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016fcf:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016fd3:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016fd7:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016fdb:	0f b7 ff             	movzx  edi,di
c0016fde:	0f b7 f6             	movzx  esi,si
c0016fe1:	50                   	push   eax
c0016fe2:	6a 20                	push   0x20
c0016fe4:	6a 00                	push   0x0
c0016fe6:	68 40 c7 02 c0       	push   0xc002c740
c0016feb:	e8 00 95 fe ff       	call   c00004f0 <memset>
c0016ff0:	5a                   	pop    edx
c0016ff1:	59                   	pop    ecx
c0016ff2:	57                   	push   edi
c0016ff3:	56                   	push   esi
c0016ff4:	e8 2d fe ff ff       	call   c0016e26 <Vm::realToLinear(unsigned short, unsigned short)>
c0016ff9:	83 c4 10             	add    esp,0x10
c0016ffc:	89 c7                	mov    edi,eax
c0016ffe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0017002:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017006:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017008:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001700d:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0017014:	48                   	dec    eax
c0017015:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001701a:	75 01                	jne    c001701d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c001701c:	fb                   	sti    
c001701d:	83 ec 0c             	sub    esp,0xc
c0017020:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0017026:	e8 e5 f6 ff ff       	call   c0016710 <unblockTask(ThreadControlBlock*)>
c001702b:	83 c4 1c             	add    esp,0x1c
c001702e:	b0 01                	mov    al,0x1
c0017030:	5b                   	pop    ebx
c0017031:	5e                   	pop    esi
c0017032:	5f                   	pop    edi
c0017033:	5d                   	pop    ebp
c0017034:	c3                   	ret    

c0017035 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017035:	55                   	push   ebp
c0017036:	57                   	push   edi
c0017037:	56                   	push   esi
c0017038:	53                   	push   ebx
c0017039:	83 ec 34             	sub    esp,0x34
c001703c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017040:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0017044:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0017048:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c001704c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017050:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017054:	68 f4 2c 02 c0       	push   0xc0022cf4
c0017059:	e8 17 39 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001705e:	83 c4 10             	add    esp,0x10
c0017061:	fa                   	cli    
c0017062:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0017068:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c001706e:	84 db                	test   bl,bl
c0017070:	75 15                	jne    c0017087 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0017072:	e8 81 f1 ff ff       	call   c00161f8 <schedule()>
c0017077:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001707c:	48                   	dec    eax
c001707d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017082:	75 dd                	jne    c0017061 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0017084:	fb                   	sti    
c0017085:	eb da                	jmp    c0017061 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0017087:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001708b:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0017090:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c001709a:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c001709e:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00170a2:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00170a6:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00170aa:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00170ae:	50                   	push   eax
c00170af:	6a 20                	push   0x20
c00170b1:	6a 00                	push   0x0
c00170b3:	68 40 c7 02 c0       	push   0xc002c740
c00170b8:	e8 33 94 fe ff       	call   c00004f0 <memset>
c00170bd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00170c4:	e8 1d 0a ff ff       	call   c0007ae6 <malloc>
c00170c9:	83 c4 0c             	add    esp,0xc
c00170cc:	89 c5                	mov    ebp,eax
c00170ce:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00170d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00170d8:	50                   	push   eax
c00170d9:	e8 9e 4a ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c00170de:	83 c4 10             	add    esp,0x10
c00170e1:	85 ed                	test   ebp,ebp
c00170e3:	75 0a                	jne    c00170ef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c00170e5:	83 ec 0c             	sub    esp,0xc
c00170e8:	68 16 2d 02 c0       	push   0xc0022d16
c00170ed:	eb 2b                	jmp    c001711a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c00170ef:	50                   	push   eax
c00170f0:	8d 44 24 17          	lea    eax,[esp+0x17]
c00170f4:	50                   	push   eax
c00170f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00170f9:	50                   	push   eax
c00170fa:	55                   	push   ebp
c00170fb:	e8 9c 4d ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c0017100:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017104:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017108:	83 c4 10             	add    esp,0x10
c001710b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0017110:	74 27                	je     c0017139 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0017112:	83 ec 0c             	sub    esp,0xc
c0017115:	68 2a 2d 02 c0       	push   0xc0022d2a
c001711a:	e8 f4 a5 ff ff       	call   c0011713 <KePanic(char const*)>
c001711f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017124:	83 c4 10             	add    esp,0x10
c0017127:	48                   	dec    eax
c0017128:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001712d:	85 c0                	test   eax,eax
c001712f:	75 01                	jne    c0017132 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0017131:	fb                   	sti    
c0017132:	31 db                	xor    ebx,ebx
c0017134:	e9 90 00 00 00       	jmp    c00171c9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017139:	51                   	push   ecx
c001713a:	51                   	push   ecx
c001713b:	6a 01                	push   0x1
c001713d:	55                   	push   ebp
c001713e:	e8 57 4a ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0017143:	83 c4 10             	add    esp,0x10
c0017146:	85 c0                	test   eax,eax
c0017148:	74 26                	je     c0017170 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c001714a:	83 ec 0c             	sub    esp,0xc
c001714d:	68 43 2d 02 c0       	push   0xc0022d43
c0017152:	e8 bc a5 ff ff       	call   c0011713 <KePanic(char const*)>
c0017157:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001715c:	83 c4 10             	add    esp,0x10
c001715f:	48                   	dec    eax
c0017160:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017165:	85 c0                	test   eax,eax
c0017167:	75 c9                	jne    c0017132 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0017169:	fb                   	sti    
c001716a:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c001716e:	eb 59                	jmp    c00171c9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017170:	0f b7 ff             	movzx  edi,di
c0017173:	50                   	push   eax
c0017174:	0f b7 f6             	movzx  esi,si
c0017177:	50                   	push   eax
c0017178:	57                   	push   edi
c0017179:	56                   	push   esi
c001717a:	e8 a7 fc ff ff       	call   c0016e26 <Vm::realToLinear(unsigned short, unsigned short)>
c001717f:	5a                   	pop    edx
c0017180:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0017183:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0017187:	51                   	push   ecx
c0017188:	50                   	push   eax
c0017189:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001718d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017191:	55                   	push   ebp
c0017192:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0017195:	83 c4 14             	add    esp,0x14
c0017198:	55                   	push   ebp
c0017199:	e8 5a 4a ff ff       	call   c000bbf8 <File::close()>
c001719e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00171a3:	83 c4 10             	add    esp,0x10
c00171a6:	48                   	dec    eax
c00171a7:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c00171ae:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00171b3:	85 c0                	test   eax,eax
c00171b5:	75 01                	jne    c00171b8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c00171b7:	fb                   	sti    
c00171b8:	83 ec 0c             	sub    esp,0xc
c00171bb:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c00171c1:	e8 4a f5 ff ff       	call   c0016710 <unblockTask(ThreadControlBlock*)>
c00171c6:	83 c4 10             	add    esp,0x10
c00171c9:	83 c4 2c             	add    esp,0x2c
c00171cc:	88 d8                	mov    al,bl
c00171ce:	5b                   	pop    ebx
c00171cf:	5e                   	pop    esi
c00171d0:	5f                   	pop    edi
c00171d1:	5d                   	pop    ebp
c00171d2:	c3                   	ret    

c00171d3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00171d3:	57                   	push   edi
c00171d4:	56                   	push   esi
c00171d5:	53                   	push   ebx
c00171d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00171da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171de:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00171e2:	83 e8 06             	sub    eax,0x6
c00171e5:	0f b7 c0             	movzx  eax,ax
c00171e8:	50                   	push   eax
c00171e9:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00171ee:	50                   	push   eax
c00171ef:	e8 32 fc ff ff       	call   c0016e26 <Vm::realToLinear(unsigned short, unsigned short)>
c00171f4:	5a                   	pop    edx
c00171f5:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00171f8:	59                   	pop    ecx
c00171f9:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00171fc:	8d 51 fa             	lea    edx,[ecx-0x6]
c00171ff:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017205:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017208:	8d 56 02             	lea    edx,[esi+0x2]
c001720b:	66 89 10             	mov    WORD PTR [eax],dx
c001720e:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0017212:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017216:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017219:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c001721d:	0f b6 f1             	movzx  esi,cl
c0017220:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017224:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001722a:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c001722e:	0f b6 d5             	movzx  edx,ch
c0017231:	74 0a                	je     c001723d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0017233:	c1 e2 08             	shl    edx,0x8
c0017236:	09 f2                	or     edx,esi
c0017238:	80 ce 02             	or     dh,0x2
c001723b:	eb 08                	jmp    c0017245 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c001723d:	c1 e2 08             	shl    edx,0x8
c0017240:	09 f2                	or     edx,esi
c0017242:	80 e6 fd             	and    dh,0xfd
c0017245:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017249:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001724e:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017252:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c001725a:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c001725d:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017265:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017268:	5b                   	pop    ebx
c0017269:	5e                   	pop    esi
c001726a:	5f                   	pop    edi
c001726b:	c3                   	ret    

c001726c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001726c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017271:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017276:	c1 e0 04             	shl    eax,0x4
c0017279:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001727c:	c3                   	ret    

c001727d <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001727d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017282:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017287:	c1 e0 04             	shl    eax,0x4
c001728a:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001728e:	c3                   	ret    

c001728f <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001728f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017294:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017299:	c1 e0 04             	shl    eax,0x4
c001729c:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001729f:	c3                   	ret    

c00172a0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00172a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00172a5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00172aa:	c1 e0 04             	shl    eax,0x4
c00172ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172b1:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00172b4:	c3                   	ret    

c00172b5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00172b5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00172ba:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00172bf:	c1 e0 04             	shl    eax,0x4
c00172c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172c6:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00172ca:	c3                   	ret    

c00172cb <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00172cb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00172d0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00172d5:	c1 e0 04             	shl    eax,0x4
c00172d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172dc:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00172df:	c3                   	ret    

c00172e0 <Vm::faultHandler(regs*)>:
c00172e0:	55                   	push   ebp
c00172e1:	57                   	push   edi
c00172e2:	56                   	push   esi
c00172e3:	53                   	push   ebx
c00172e4:	83 ec 2c             	sub    esp,0x2c
c00172e7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00172eb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00172ee:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00172f2:	0f b7 f8             	movzx  edi,ax
c00172f5:	52                   	push   edx
c00172f6:	0f b7 c0             	movzx  eax,ax
c00172f9:	50                   	push   eax
c00172fa:	e8 27 fb ff ff       	call   c0016e26 <Vm::realToLinear(unsigned short, unsigned short)>
c00172ff:	5a                   	pop    edx
c0017300:	59                   	pop    ecx
c0017301:	89 c1                	mov    ecx,eax
c0017303:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017306:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001730a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001730f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017313:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017316:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001731a:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001731f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017323:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017327:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001732b:	e8 f6 fa ff ff       	call   c0016e26 <Vm::realToLinear(unsigned short, unsigned short)>
c0017330:	5e                   	pop    esi
c0017331:	be 06 00 00 00       	mov    esi,0x6
c0017336:	5d                   	pop    ebp
c0017337:	31 ed                	xor    ebp,ebp
c0017339:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001733e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017341:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017347:	0f 84 74 02 00 00    	je     c00175c1 <Vm::faultHandler(regs*)+0x2e1>
c001734d:	0f 87 94 00 00 00    	ja     c00173e7 <Vm::faultHandler(regs*)+0x107>
c0017353:	83 fa 66             	cmp    edx,0x66
c0017356:	0f 84 e2 01 00 00    	je     c001753e <Vm::faultHandler(regs*)+0x25e>
c001735c:	77 47                	ja     c00173a5 <Vm::faultHandler(regs*)+0xc5>
c001735e:	83 fa 36             	cmp    edx,0x36
c0017361:	0f 84 ca 01 00 00    	je     c0017531 <Vm::faultHandler(regs*)+0x251>
c0017367:	77 1a                	ja     c0017383 <Vm::faultHandler(regs*)+0xa3>
c0017369:	83 fa 26             	cmp    edx,0x26
c001736c:	0f 84 98 01 00 00    	je     c001750a <Vm::faultHandler(regs*)+0x22a>
c0017372:	83 fa 2e             	cmp    edx,0x2e
c0017375:	0f 85 21 06 00 00    	jne    c001799c <Vm::faultHandler(regs*)+0x6bc>
c001737b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001737e:	31 f6                	xor    esi,esi
c0017380:	41                   	inc    ecx
c0017381:	eb bb                	jmp    c001733e <Vm::faultHandler(regs*)+0x5e>
c0017383:	83 fa 64             	cmp    edx,0x64
c0017386:	0f 84 8b 01 00 00    	je     c0017517 <Vm::faultHandler(regs*)+0x237>
c001738c:	0f 87 92 01 00 00    	ja     c0017524 <Vm::faultHandler(regs*)+0x244>
c0017392:	83 fa 3e             	cmp    edx,0x3e
c0017395:	0f 85 01 06 00 00    	jne    c001799c <Vm::faultHandler(regs*)+0x6bc>
c001739b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001739e:	be 01 00 00 00       	mov    esi,0x1
c00173a3:	eb db                	jmp    c0017380 <Vm::faultHandler(regs*)+0xa0>
c00173a5:	83 fa 6d             	cmp    edx,0x6d
c00173a8:	0f 84 34 03 00 00    	je     c00176e2 <Vm::faultHandler(regs*)+0x402>
c00173ae:	77 17                	ja     c00173c7 <Vm::faultHandler(regs*)+0xe7>
c00173b0:	83 fa 67             	cmp    edx,0x67
c00173b3:	0f 84 92 01 00 00    	je     c001754b <Vm::faultHandler(regs*)+0x26b>
c00173b9:	83 fa 6c             	cmp    edx,0x6c
c00173bc:	0f 84 b1 02 00 00    	je     c0017673 <Vm::faultHandler(regs*)+0x393>
c00173c2:	e9 d5 05 00 00       	jmp    c001799c <Vm::faultHandler(regs*)+0x6bc>
c00173c7:	83 fa 6f             	cmp    edx,0x6f
c00173ca:	0f 84 3d 04 00 00    	je     c001780d <Vm::faultHandler(regs*)+0x52d>
c00173d0:	0f 82 9f 03 00 00    	jb     c0017775 <Vm::faultHandler(regs*)+0x495>
c00173d6:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00173dc:	0f 84 76 01 00 00    	je     c0017558 <Vm::faultHandler(regs*)+0x278>
c00173e2:	e9 b5 05 00 00       	jmp    c001799c <Vm::faultHandler(regs*)+0x6bc>
c00173e7:	81 fa ec 00 00 00    	cmp    edx,0xec
c00173ed:	0f 84 51 05 00 00    	je     c0017944 <Vm::faultHandler(regs*)+0x664>
c00173f3:	0f 87 a9 00 00 00    	ja     c00174a2 <Vm::faultHandler(regs*)+0x1c2>
c00173f9:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00173ff:	0f 84 d0 04 00 00    	je     c00178d5 <Vm::faultHandler(regs*)+0x5f5>
c0017405:	77 78                	ja     c001747f <Vm::faultHandler(regs*)+0x19f>
c0017407:	81 fa cd 00 00 00    	cmp    edx,0xcd
c001740d:	0f 84 0e 02 00 00    	je     c0017621 <Vm::faultHandler(regs*)+0x341>
c0017413:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017419:	0f 85 7d 05 00 00    	jne    c001799c <Vm::faultHandler(regs*)+0x6bc>
c001741f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0017423:	89 d1                	mov    ecx,edx
c0017425:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017428:	c1 e1 08             	shl    ecx,0x8
c001742b:	09 ca                	or     edx,ecx
c001742d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017430:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017434:	89 d1                	mov    ecx,edx
c0017436:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001743a:	c1 e1 08             	shl    ecx,0x8
c001743d:	09 ca                	or     edx,ecx
c001743f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0017442:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017446:	89 d1                	mov    ecx,edx
c0017448:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c001744c:	c1 e1 08             	shl    ecx,0x8
c001744f:	09 ca                	or     edx,ecx
c0017451:	81 ca 00 02 02 00    	or     edx,0x20200
c0017457:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001745a:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001745e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017464:	d1 e8                	shr    eax,1
c0017466:	83 e0 01             	and    eax,0x1
c0017469:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001746c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001746f:	83 c0 06             	add    eax,0x6
c0017472:	25 ff ff 00 00       	and    eax,0xffff
c0017477:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001747a:	e9 19 05 00 00       	jmp    c0017998 <Vm::faultHandler(regs*)+0x6b8>
c001747f:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017485:	0f 84 8f 04 00 00    	je     c001791a <Vm::faultHandler(regs*)+0x63a>
c001748b:	0f 82 60 04 00 00    	jb     c00178f1 <Vm::faultHandler(regs*)+0x611>
c0017491:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0017497:	0f 84 94 04 00 00    	je     c0017931 <Vm::faultHandler(regs*)+0x651>
c001749d:	e9 fa 04 00 00       	jmp    c001799c <Vm::faultHandler(regs*)+0x6bc>
c00174a2:	81 fa ef 00 00 00    	cmp    edx,0xef
c00174a8:	0f 84 d7 04 00 00    	je     c0017985 <Vm::faultHandler(regs*)+0x6a5>
c00174ae:	77 2e                	ja     c00174de <Vm::faultHandler(regs*)+0x1fe>
c00174b0:	81 fa ed 00 00 00    	cmp    edx,0xed
c00174b6:	0f 84 a4 04 00 00    	je     c0017960 <Vm::faultHandler(regs*)+0x680>
c00174bc:	81 fa ee 00 00 00    	cmp    edx,0xee
c00174c2:	0f 85 d4 04 00 00    	jne    c001799c <Vm::faultHandler(regs*)+0x6bc>
c00174c8:	50                   	push   eax
c00174c9:	50                   	push   eax
c00174ca:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00174ce:	50                   	push   eax
c00174cf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00174d3:	50                   	push   eax
c00174d4:	e8 17 f9 ff ff       	call   c0016df0 <Vm::outbv(unsigned short, unsigned char)>
c00174d9:	e9 9f 04 00 00       	jmp    c001797d <Vm::faultHandler(regs*)+0x69d>
c00174de:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00174e4:	0f 84 6d 01 00 00    	je     c0017657 <Vm::faultHandler(regs*)+0x377>
c00174ea:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00174f0:	0f 84 6f 01 00 00    	je     c0017665 <Vm::faultHandler(regs*)+0x385>
c00174f6:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00174fc:	0f 85 9a 04 00 00    	jne    c001799c <Vm::faultHandler(regs*)+0x6bc>
c0017502:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017505:	e9 76 fe ff ff       	jmp    c0017380 <Vm::faultHandler(regs*)+0xa0>
c001750a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001750d:	be 02 00 00 00       	mov    esi,0x2
c0017512:	e9 69 fe ff ff       	jmp    c0017380 <Vm::faultHandler(regs*)+0xa0>
c0017517:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001751a:	be 03 00 00 00       	mov    esi,0x3
c001751f:	e9 5c fe ff ff       	jmp    c0017380 <Vm::faultHandler(regs*)+0xa0>
c0017524:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017527:	be 04 00 00 00       	mov    esi,0x4
c001752c:	e9 4f fe ff ff       	jmp    c0017380 <Vm::faultHandler(regs*)+0xa0>
c0017531:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017534:	be 05 00 00 00       	mov    esi,0x5
c0017539:	e9 42 fe ff ff       	jmp    c0017380 <Vm::faultHandler(regs*)+0xa0>
c001753e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017541:	bd 01 00 00 00       	mov    ebp,0x1
c0017546:	e9 35 fe ff ff       	jmp    c0017380 <Vm::faultHandler(regs*)+0xa0>
c001754b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001754e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017553:	e9 28 fe ff ff       	jmp    c0017380 <Vm::faultHandler(regs*)+0xa0>
c0017558:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001755b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001755f:	83 e5 01             	and    ebp,0x1
c0017562:	74 30                	je     c0017594 <Vm::faultHandler(regs*)+0x2b4>
c0017564:	83 e9 04             	sub    ecx,0x4
c0017567:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001756d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017573:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017576:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017579:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001757f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017583:	0f 84 0c 04 00 00    	je     c0017995 <Vm::faultHandler(regs*)+0x6b5>
c0017589:	80 ce 02             	or     dh,0x2
c001758c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001758f:	e9 01 04 00 00       	jmp    c0017995 <Vm::faultHandler(regs*)+0x6b5>
c0017594:	83 e9 02             	sub    ecx,0x2
c0017597:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001759d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00175a0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00175a4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00175aa:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00175ae:	74 05                	je     c00175b5 <Vm::faultHandler(regs*)+0x2d5>
c00175b0:	80 ce 02             	or     dh,0x2
c00175b3:	eb 03                	jmp    c00175b8 <Vm::faultHandler(regs*)+0x2d8>
c00175b5:	80 e6 fd             	and    dh,0xfd
c00175b8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00175bc:	e9 d4 03 00 00       	jmp    c0017995 <Vm::faultHandler(regs*)+0x6b5>
c00175c1:	83 e5 01             	and    ebp,0x1
c00175c4:	74 2a                	je     c00175f0 <Vm::faultHandler(regs*)+0x310>
c00175c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00175c8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00175ce:	81 ca 00 02 02 00    	or     edx,0x20200
c00175d4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00175d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00175d9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175df:	c1 e8 09             	shr    eax,0x9
c00175e2:	83 e0 01             	and    eax,0x1
c00175e5:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00175e8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00175eb:	83 c0 04             	add    eax,0x4
c00175ee:	eb 24                	jmp    c0017614 <Vm::faultHandler(regs*)+0x334>
c00175f0:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00175f3:	81 ca 00 02 02 00    	or     edx,0x20200
c00175f9:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00175fc:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00175ff:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017605:	c1 e8 09             	shr    eax,0x9
c0017608:	83 e0 01             	and    eax,0x1
c001760b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001760e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017611:	83 c0 02             	add    eax,0x2
c0017614:	25 ff ff 00 00       	and    eax,0xffff
c0017619:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001761c:	e9 74 03 00 00       	jmp    c0017995 <Vm::faultHandler(regs*)+0x6b5>
c0017621:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017625:	3d ee 00 00 00       	cmp    eax,0xee
c001762a:	75 10                	jne    c001763c <Vm::faultHandler(regs*)+0x35c>
c001762c:	83 ec 0c             	sub    esp,0xc
c001762f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0017632:	e8 56 f8 ff ff       	call   c0016e8d <Vm::mainloop3(unsigned long)>
c0017637:	e9 44 03 00 00       	jmp    c0017980 <Vm::faultHandler(regs*)+0x6a0>
c001763c:	83 ec 0c             	sub    esp,0xc
c001763f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017643:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017647:	51                   	push   ecx
c0017648:	50                   	push   eax
c0017649:	53                   	push   ebx
c001764a:	e8 84 fb ff ff       	call   c00171d3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001764f:	83 c4 20             	add    esp,0x20
c0017652:	e9 41 03 00 00       	jmp    c0017998 <Vm::faultHandler(regs*)+0x6b8>
c0017657:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001765c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017660:	e9 30 03 00 00       	jmp    c0017995 <Vm::faultHandler(regs*)+0x6b5>
c0017665:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001766a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001766e:	e9 22 03 00 00       	jmp    c0017995 <Vm::faultHandler(regs*)+0x6b5>
c0017673:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017676:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001767b:	74 2b                	je     c00176a8 <Vm::faultHandler(regs*)+0x3c8>
c001767d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017684:	76 22                	jbe    c00176a8 <Vm::faultHandler(regs*)+0x3c8>
c0017686:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001768a:	50                   	push   eax
c001768b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001768f:	50                   	push   eax
c0017690:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017694:	50                   	push   eax
c0017695:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017699:	50                   	push   eax
c001769a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001769e:	50                   	push   eax
c001769f:	6a 6c                	push   0x6c
c00176a1:	6a 6c                	push   0x6c
c00176a3:	e9 bd 01 00 00       	jmp    c0017865 <Vm::faultHandler(regs*)+0x585>
c00176a8:	83 ec 0c             	sub    esp,0xc
c00176ab:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00176af:	0f b7 f6             	movzx  esi,si
c00176b2:	50                   	push   eax
c00176b3:	e8 25 f7 ff ff       	call   c0016ddd <Vm::inbv(unsigned short)>
c00176b8:	83 c4 0c             	add    esp,0xc
c00176bb:	0f b6 c0             	movzx  eax,al
c00176be:	50                   	push   eax
c00176bf:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00176c3:	50                   	push   eax
c00176c4:	56                   	push   esi
c00176c5:	e8 d6 fb ff ff       	call   c00172a0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00176ca:	83 c4 10             	add    esp,0x10
c00176cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176d0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00176d4:	74 03                	je     c00176d9 <Vm::faultHandler(regs*)+0x3f9>
c00176d6:	48                   	dec    eax
c00176d7:	eb 01                	jmp    c00176da <Vm::faultHandler(regs*)+0x3fa>
c00176d9:	40                   	inc    eax
c00176da:	0f b7 c0             	movzx  eax,ax
c00176dd:	e9 8b 00 00 00       	jmp    c001776d <Vm::faultHandler(regs*)+0x48d>
c00176e2:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00176e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176e8:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00176ed:	74 29                	je     c0017718 <Vm::faultHandler(regs*)+0x438>
c00176ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00176f4:	76 22                	jbe    c0017718 <Vm::faultHandler(regs*)+0x438>
c00176f6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00176fa:	50                   	push   eax
c00176fb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00176ff:	50                   	push   eax
c0017700:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017704:	50                   	push   eax
c0017705:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017709:	50                   	push   eax
c001770a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001770e:	50                   	push   eax
c001770f:	6a 6d                	push   0x6d
c0017711:	6a 6d                	push   0x6d
c0017713:	e9 4d 01 00 00       	jmp    c0017865 <Vm::faultHandler(regs*)+0x585>
c0017718:	0f b7 c8             	movzx  ecx,ax
c001771b:	0f b7 f6             	movzx  esi,si
c001771e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017721:	83 e5 01             	and    ebp,0x1
c0017724:	74 20                	je     c0017746 <Vm::faultHandler(regs*)+0x466>
c0017726:	ed                   	in     eax,dx
c0017727:	55                   	push   ebp
c0017728:	50                   	push   eax
c0017729:	51                   	push   ecx
c001772a:	56                   	push   esi
c001772b:	e8 9b fb ff ff       	call   c00172cb <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017730:	83 c4 10             	add    esp,0x10
c0017733:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017736:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001773a:	74 05                	je     c0017741 <Vm::faultHandler(regs*)+0x461>
c001773c:	83 e8 04             	sub    eax,0x4
c001773f:	eb 27                	jmp    c0017768 <Vm::faultHandler(regs*)+0x488>
c0017741:	83 c0 04             	add    eax,0x4
c0017744:	eb 22                	jmp    c0017768 <Vm::faultHandler(regs*)+0x488>
c0017746:	66 ed                	in     ax,dx
c0017748:	0f b7 c0             	movzx  eax,ax
c001774b:	57                   	push   edi
c001774c:	50                   	push   eax
c001774d:	51                   	push   ecx
c001774e:	56                   	push   esi
c001774f:	e8 61 fb ff ff       	call   c00172b5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017754:	83 c4 10             	add    esp,0x10
c0017757:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001775a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001775e:	74 05                	je     c0017765 <Vm::faultHandler(regs*)+0x485>
c0017760:	83 e8 02             	sub    eax,0x2
c0017763:	eb 03                	jmp    c0017768 <Vm::faultHandler(regs*)+0x488>
c0017765:	83 c0 02             	add    eax,0x2
c0017768:	25 ff ff 00 00       	and    eax,0xffff
c001776d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017770:	e9 20 02 00 00       	jmp    c0017995 <Vm::faultHandler(regs*)+0x6b5>
c0017775:	8d 46 ff             	lea    eax,[esi-0x1]
c0017778:	0f b6 f0             	movzx  esi,al
c001777b:	83 fe 05             	cmp    esi,0x5
c001777e:	77 23                	ja     c00177a3 <Vm::faultHandler(regs*)+0x4c3>
c0017780:	ff 24 b5 b8 2d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd248]
c0017787:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001778c:	eb 15                	jmp    c00177a3 <Vm::faultHandler(regs*)+0x4c3>
c001778e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017792:	eb 0f                	jmp    c00177a3 <Vm::faultHandler(regs*)+0x4c3>
c0017794:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017798:	eb 09                	jmp    c00177a3 <Vm::faultHandler(regs*)+0x4c3>
c001779a:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001779e:	eb 03                	jmp    c00177a3 <Vm::faultHandler(regs*)+0x4c3>
c00177a0:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00177a3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00177a6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00177ab:	74 29                	je     c00177d6 <Vm::faultHandler(regs*)+0x4f6>
c00177ad:	3d ff ff 00 00       	cmp    eax,0xffff
c00177b2:	76 22                	jbe    c00177d6 <Vm::faultHandler(regs*)+0x4f6>
c00177b4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00177b8:	50                   	push   eax
c00177b9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00177bd:	50                   	push   eax
c00177be:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00177c2:	50                   	push   eax
c00177c3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00177c7:	50                   	push   eax
c00177c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177cc:	50                   	push   eax
c00177cd:	6a 6e                	push   0x6e
c00177cf:	6a 6e                	push   0x6e
c00177d1:	e9 8f 00 00 00       	jmp    c0017865 <Vm::faultHandler(regs*)+0x585>
c00177d6:	0f b7 c0             	movzx  eax,ax
c00177d9:	52                   	push   edx
c00177da:	52                   	push   edx
c00177db:	50                   	push   eax
c00177dc:	57                   	push   edi
c00177dd:	e8 8a fa ff ff       	call   c001726c <Vm::readByteFromReal(unsigned short, unsigned short)>
c00177e2:	59                   	pop    ecx
c00177e3:	0f b6 c0             	movzx  eax,al
c00177e6:	5e                   	pop    esi
c00177e7:	50                   	push   eax
c00177e8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00177ec:	50                   	push   eax
c00177ed:	e8 fe f5 ff ff       	call   c0016df0 <Vm::outbv(unsigned short, unsigned char)>
c00177f2:	83 c4 10             	add    esp,0x10
c00177f5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00177f8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00177fc:	74 03                	je     c0017801 <Vm::faultHandler(regs*)+0x521>
c00177fe:	48                   	dec    eax
c00177ff:	eb 01                	jmp    c0017802 <Vm::faultHandler(regs*)+0x522>
c0017801:	40                   	inc    eax
c0017802:	0f b7 c0             	movzx  eax,ax
c0017805:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017808:	e9 88 01 00 00       	jmp    c0017995 <Vm::faultHandler(regs*)+0x6b5>
c001780d:	8d 46 ff             	lea    eax,[esi-0x1]
c0017810:	0f b6 f0             	movzx  esi,al
c0017813:	83 fe 05             	cmp    esi,0x5
c0017816:	77 1e                	ja     c0017836 <Vm::faultHandler(regs*)+0x556>
c0017818:	ff 24 b5 d0 2d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd230]
c001781f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017823:	eb 11                	jmp    c0017836 <Vm::faultHandler(regs*)+0x556>
c0017825:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017828:	eb 0c                	jmp    c0017836 <Vm::faultHandler(regs*)+0x556>
c001782a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001782d:	eb 07                	jmp    c0017836 <Vm::faultHandler(regs*)+0x556>
c001782f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017832:	eb 02                	jmp    c0017836 <Vm::faultHandler(regs*)+0x556>
c0017834:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017836:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017839:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001783e:	74 37                	je     c0017877 <Vm::faultHandler(regs*)+0x597>
c0017840:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017846:	76 2f                	jbe    c0017877 <Vm::faultHandler(regs*)+0x597>
c0017848:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001784c:	50                   	push   eax
c001784d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017851:	50                   	push   eax
c0017852:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017856:	50                   	push   eax
c0017857:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001785b:	50                   	push   eax
c001785c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017860:	50                   	push   eax
c0017861:	6a 6f                	push   0x6f
c0017863:	6a 6f                	push   0x6f
c0017865:	68 5c 2d 02 c0       	push   0xc0022d5c
c001786a:	e8 06 31 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001786f:	83 c4 20             	add    esp,0x20
c0017872:	e9 83 01 00 00       	jmp    c00179fa <Vm::faultHandler(regs*)+0x71a>
c0017877:	0f b7 d7             	movzx  edx,di
c001787a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001787d:	0f b7 c6             	movzx  eax,si
c0017880:	81 e1 00 04 00 00    	and    ecx,0x400
c0017886:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017889:	83 e5 01             	and    ebp,0x1
c001788c:	74 1d                	je     c00178ab <Vm::faultHandler(regs*)+0x5cb>
c001788e:	55                   	push   ebp
c001788f:	55                   	push   ebp
c0017890:	50                   	push   eax
c0017891:	52                   	push   edx
c0017892:	e8 f8 f9 ff ff       	call   c001728f <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017897:	83 c4 10             	add    esp,0x10
c001789a:	89 fa                	mov    edx,edi
c001789c:	ef                   	out    dx,eax
c001789d:	85 c9                	test   ecx,ecx
c001789f:	74 05                	je     c00178a6 <Vm::faultHandler(regs*)+0x5c6>
c00178a1:	83 ee 04             	sub    esi,0x4
c00178a4:	eb 21                	jmp    c00178c7 <Vm::faultHandler(regs*)+0x5e7>
c00178a6:	83 c6 04             	add    esi,0x4
c00178a9:	eb 1c                	jmp    c00178c7 <Vm::faultHandler(regs*)+0x5e7>
c00178ab:	55                   	push   ebp
c00178ac:	55                   	push   ebp
c00178ad:	50                   	push   eax
c00178ae:	52                   	push   edx
c00178af:	e8 c9 f9 ff ff       	call   c001727d <Vm::readWordFromReal(unsigned short, unsigned short)>
c00178b4:	83 c4 10             	add    esp,0x10
c00178b7:	89 fa                	mov    edx,edi
c00178b9:	66 ef                	out    dx,ax
c00178bb:	85 c9                	test   ecx,ecx
c00178bd:	74 05                	je     c00178c4 <Vm::faultHandler(regs*)+0x5e4>
c00178bf:	83 ee 02             	sub    esi,0x2
c00178c2:	eb 03                	jmp    c00178c7 <Vm::faultHandler(regs*)+0x5e7>
c00178c4:	83 c6 02             	add    esi,0x2
c00178c7:	81 e6 ff ff 00 00    	and    esi,0xffff
c00178cd:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00178d0:	e9 c0 00 00 00       	jmp    c0017995 <Vm::faultHandler(regs*)+0x6b5>
c00178d5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00178dc:	83 ec 0c             	sub    esp,0xc
c00178df:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00178e3:	50                   	push   eax
c00178e4:	e8 f4 f4 ff ff       	call   c0016ddd <Vm::inbv(unsigned short)>
c00178e9:	0f b6 c0             	movzx  eax,al
c00178ec:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00178ef:	eb 3a                	jmp    c001792b <Vm::faultHandler(regs*)+0x64b>
c00178f1:	83 e5 01             	and    ebp,0x1
c00178f4:	74 07                	je     c00178fd <Vm::faultHandler(regs*)+0x61d>
c00178f6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00178fa:	ed                   	in     eax,dx
c00178fb:	eb 14                	jmp    c0017911 <Vm::faultHandler(regs*)+0x631>
c00178fd:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017900:	66 31 f6             	xor    si,si
c0017903:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017906:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001790a:	66 ed                	in     ax,dx
c001790c:	0f b7 c0             	movzx  eax,ax
c001790f:	09 f0                	or     eax,esi
c0017911:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017914:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017918:	eb 7e                	jmp    c0017998 <Vm::faultHandler(regs*)+0x6b8>
c001791a:	52                   	push   edx
c001791b:	52                   	push   edx
c001791c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017920:	50                   	push   eax
c0017921:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017925:	50                   	push   eax
c0017926:	e8 c5 f4 ff ff       	call   c0016df0 <Vm::outbv(unsigned short, unsigned char)>
c001792b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001792f:	eb 4f                	jmp    c0017980 <Vm::faultHandler(regs*)+0x6a0>
c0017931:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017934:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017938:	83 e5 01             	and    ebp,0x1
c001793b:	74 03                	je     c0017940 <Vm::faultHandler(regs*)+0x660>
c001793d:	ef                   	out    dx,eax
c001793e:	eb d4                	jmp    c0017914 <Vm::faultHandler(regs*)+0x634>
c0017940:	66 ef                	out    dx,ax
c0017942:	eb d0                	jmp    c0017914 <Vm::faultHandler(regs*)+0x634>
c0017944:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001794b:	83 ec 0c             	sub    esp,0xc
c001794e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017952:	50                   	push   eax
c0017953:	e8 85 f4 ff ff       	call   c0016ddd <Vm::inbv(unsigned short)>
c0017958:	0f b6 c0             	movzx  eax,al
c001795b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001795e:	eb 1d                	jmp    c001797d <Vm::faultHandler(regs*)+0x69d>
c0017960:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017963:	83 e5 01             	and    ebp,0x1
c0017966:	74 03                	je     c001796b <Vm::faultHandler(regs*)+0x68b>
c0017968:	ed                   	in     eax,dx
c0017969:	eb 0d                	jmp    c0017978 <Vm::faultHandler(regs*)+0x698>
c001796b:	66 ed                	in     ax,dx
c001796d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017970:	0f b7 c0             	movzx  eax,ax
c0017973:	66 31 d2             	xor    dx,dx
c0017976:	09 d0                	or     eax,edx
c0017978:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001797b:	eb 18                	jmp    c0017995 <Vm::faultHandler(regs*)+0x6b5>
c001797d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017980:	83 c4 10             	add    esp,0x10
c0017983:	eb 13                	jmp    c0017998 <Vm::faultHandler(regs*)+0x6b8>
c0017985:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017988:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001798b:	83 e5 01             	and    ebp,0x1
c001798e:	74 03                	je     c0017993 <Vm::faultHandler(regs*)+0x6b3>
c0017990:	ef                   	out    dx,eax
c0017991:	eb 02                	jmp    c0017995 <Vm::faultHandler(regs*)+0x6b5>
c0017993:	66 ef                	out    dx,ax
c0017995:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017998:	b0 01                	mov    al,0x1
c001799a:	eb 60                	jmp    c00179fc <Vm::faultHandler(regs*)+0x71c>
c001799c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00179a0:	50                   	push   eax
c00179a1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00179a5:	50                   	push   eax
c00179a6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00179aa:	50                   	push   eax
c00179ab:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00179af:	50                   	push   eax
c00179b0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00179b4:	50                   	push   eax
c00179b5:	52                   	push   edx
c00179b6:	52                   	push   edx
c00179b7:	68 89 2d 02 c0       	push   0xc0022d89
c00179bc:	e8 b4 2f ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00179c1:	83 c4 20             	add    esp,0x20
c00179c4:	83 ec 0c             	sub    esp,0xc
c00179c7:	6a 60                	push   0x60
c00179c9:	e8 0f f4 ff ff       	call   c0016ddd <Vm::inbv(unsigned short)>
c00179ce:	83 c4 10             	add    esp,0x10
c00179d1:	0f b6 d0             	movzx  edx,al
c00179d4:	83 fa 1c             	cmp    edx,0x1c
c00179d7:	74 05                	je     c00179de <Vm::faultHandler(regs*)+0x6fe>
c00179d9:	83 fa 5a             	cmp    edx,0x5a
c00179dc:	75 e6                	jne    c00179c4 <Vm::faultHandler(regs*)+0x6e4>
c00179de:	0f b6 c0             	movzx  eax,al
c00179e1:	83 f8 1c             	cmp    eax,0x1c
c00179e4:	74 05                	je     c00179eb <Vm::faultHandler(regs*)+0x70b>
c00179e6:	83 f8 5a             	cmp    eax,0x5a
c00179e9:	75 0f                	jne    c00179fa <Vm::faultHandler(regs*)+0x71a>
c00179eb:	83 ec 0c             	sub    esp,0xc
c00179ee:	6a 60                	push   0x60
c00179f0:	e8 e8 f3 ff ff       	call   c0016ddd <Vm::inbv(unsigned short)>
c00179f5:	83 c4 10             	add    esp,0x10
c00179f8:	eb e4                	jmp    c00179de <Vm::faultHandler(regs*)+0x6fe>
c00179fa:	31 c0                	xor    eax,eax
c00179fc:	83 c4 2c             	add    esp,0x2c
c00179ff:	5b                   	pop    ebx
c0017a00:	5e                   	pop    esi
c0017a01:	5f                   	pop    edi
c0017a02:	5d                   	pop    ebp
c0017a03:	c3                   	ret    

c0017a04 <noCopro(unsigned long)>:
c0017a04:	c3                   	ret    

c0017a05 <nmiHandler(regs*, void*)>:
c0017a05:	83 ec 0c             	sub    esp,0xc
c0017a08:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017a0d:	83 ec 0c             	sub    esp,0xc
c0017a10:	50                   	push   eax
c0017a11:	e8 d0 f8 fe ff       	call   c00072e6 <Computer::handleNMI()>
c0017a16:	83 c4 10             	add    esp,0x10
c0017a19:	90                   	nop
c0017a1a:	83 c4 0c             	add    esp,0xc
c0017a1d:	c3                   	ret    

c0017a1e <doubleFault(regs*, void*)>:
c0017a1e:	55                   	push   ebp
c0017a1f:	89 e5                	mov    ebp,esp
c0017a21:	83 ec 08             	sub    esp,0x8
c0017a24:	83 ec 0c             	sub    esp,0xc
c0017a27:	68 e8 2d 02 c0       	push   0xc0022de8
c0017a2c:	e8 e2 9c ff ff       	call   c0011713 <KePanic(char const*)>
c0017a31:	83 c4 10             	add    esp,0x10
c0017a34:	90                   	nop
c0017a35:	c9                   	leave  
c0017a36:	c3                   	ret    

c0017a37 <displayDebugInfo(regs*)>:
c0017a37:	83 ec 1c             	sub    esp,0x1c
c0017a3a:	0f 20 c0             	mov    eax,cr0
c0017a3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a41:	0f 20 d0             	mov    eax,cr2
c0017a44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a48:	0f 20 d8             	mov    eax,cr3
c0017a4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a4f:	0f 20 e0             	mov    eax,cr4
c0017a52:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a59:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017a5c:	83 ec 08             	sub    esp,0x8
c0017a5f:	50                   	push   eax
c0017a60:	68 04 2e 02 c0       	push   0xc0022e04
c0017a65:	e8 0b 2f ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017a6a:	83 c4 10             	add    esp,0x10
c0017a6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a71:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017a74:	83 ec 08             	sub    esp,0x8
c0017a77:	50                   	push   eax
c0017a78:	68 f5 2d 02 c0       	push   0xc0022df5
c0017a7d:	e8 f3 2e ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017a82:	83 c4 10             	add    esp,0x10
c0017a85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a89:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017a8c:	83 ec 08             	sub    esp,0x8
c0017a8f:	50                   	push   eax
c0017a90:	68 00 2e 02 c0       	push   0xc0022e00
c0017a95:	e8 db 2e ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017a9a:	83 c4 10             	add    esp,0x10
c0017a9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aa1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017aa4:	83 ec 08             	sub    esp,0x8
c0017aa7:	50                   	push   eax
c0017aa8:	68 0f 2e 02 c0       	push   0xc0022e0f
c0017aad:	e8 c3 2e ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017ab2:	83 c4 10             	add    esp,0x10
c0017ab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ab9:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017abc:	83 ec 08             	sub    esp,0x8
c0017abf:	50                   	push   eax
c0017ac0:	68 1a 2e 02 c0       	push   0xc0022e1a
c0017ac5:	e8 ab 2e ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017aca:	83 c4 10             	add    esp,0x10
c0017acd:	83 ec 08             	sub    esp,0x8
c0017ad0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ad4:	68 25 2e 02 c0       	push   0xc0022e25
c0017ad9:	e8 97 2e ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017ade:	83 c4 10             	add    esp,0x10
c0017ae1:	83 ec 08             	sub    esp,0x8
c0017ae4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017ae8:	68 30 2e 02 c0       	push   0xc0022e30
c0017aed:	e8 83 2e ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017af2:	83 c4 10             	add    esp,0x10
c0017af5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017af9:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017afc:	c1 e0 05             	shl    eax,0x5
c0017aff:	8d 90 c0 41 02 c0    	lea    edx,[eax-0x3ffdbe40]
c0017b05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b09:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017b0c:	83 ec 04             	sub    esp,0x4
c0017b0f:	52                   	push   edx
c0017b10:	50                   	push   eax
c0017b11:	68 3b 2e 02 c0       	push   0xc0022e3b
c0017b16:	e8 5a 2e ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017b1b:	83 c4 10             	add    esp,0x10
c0017b1e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b23:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b29:	83 ec 0c             	sub    esp,0xc
c0017b2c:	50                   	push   eax
c0017b2d:	e8 57 0c ff ff       	call   c0008789 <setActiveTerminal(VgaText*)>
c0017b32:	83 c4 10             	add    esp,0x10
c0017b35:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b40:	83 ec 08             	sub    esp,0x8
c0017b43:	68 4a 2e 02 c0       	push   0xc0022e4a
c0017b48:	50                   	push   eax
c0017b49:	e8 88 0f ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017b4e:	83 c4 10             	add    esp,0x10
c0017b51:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b56:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b5c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b60:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017b63:	83 ec 08             	sub    esp,0x8
c0017b66:	52                   	push   edx
c0017b67:	50                   	push   eax
c0017b68:	e8 23 0f ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017b6d:	83 c4 10             	add    esp,0x10
c0017b70:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b7b:	83 ec 08             	sub    esp,0x8
c0017b7e:	68 58 2e 02 c0       	push   0xc0022e58
c0017b83:	50                   	push   eax
c0017b84:	e8 4d 0f ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017b89:	83 c4 10             	add    esp,0x10
c0017b8c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b91:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b97:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017b9c:	8b 12                	mov    edx,DWORD PTR [edx]
c0017b9e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017ba1:	83 c2 0c             	add    edx,0xc
c0017ba4:	83 ec 08             	sub    esp,0x8
c0017ba7:	52                   	push   edx
c0017ba8:	50                   	push   eax
c0017ba9:	e8 28 0f ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017bae:	83 c4 10             	add    esp,0x10
c0017bb1:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bb6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bbc:	83 ec 08             	sub    esp,0x8
c0017bbf:	68 61 2e 02 c0       	push   0xc0022e61
c0017bc4:	50                   	push   eax
c0017bc5:	e8 0c 0f ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017bca:	83 c4 10             	add    esp,0x10
c0017bcd:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bd2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bd8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bdc:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017bdf:	83 ec 08             	sub    esp,0x8
c0017be2:	52                   	push   edx
c0017be3:	50                   	push   eax
c0017be4:	e8 a7 0e ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017be9:	83 c4 10             	add    esp,0x10
c0017bec:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bf1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bf7:	83 ec 08             	sub    esp,0x8
c0017bfa:	68 69 2e 02 c0       	push   0xc0022e69
c0017bff:	50                   	push   eax
c0017c00:	e8 d1 0e ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017c05:	83 c4 10             	add    esp,0x10
c0017c08:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c0d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c13:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c17:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017c1a:	83 ec 08             	sub    esp,0x8
c0017c1d:	52                   	push   edx
c0017c1e:	50                   	push   eax
c0017c1f:	e8 6c 0e ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017c24:	83 c4 10             	add    esp,0x10
c0017c27:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c2c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c32:	83 ec 08             	sub    esp,0x8
c0017c35:	68 71 2e 02 c0       	push   0xc0022e71
c0017c3a:	50                   	push   eax
c0017c3b:	e8 96 0e ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017c40:	83 c4 10             	add    esp,0x10
c0017c43:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c48:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c4e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c52:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017c55:	83 ec 08             	sub    esp,0x8
c0017c58:	52                   	push   edx
c0017c59:	50                   	push   eax
c0017c5a:	e8 31 0e ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017c5f:	83 c4 10             	add    esp,0x10
c0017c62:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c67:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c6d:	83 ec 08             	sub    esp,0x8
c0017c70:	68 79 2e 02 c0       	push   0xc0022e79
c0017c75:	50                   	push   eax
c0017c76:	e8 5b 0e ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017c7b:	83 c4 10             	add    esp,0x10
c0017c7e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c83:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c89:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c8d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017c90:	83 ec 08             	sub    esp,0x8
c0017c93:	52                   	push   edx
c0017c94:	50                   	push   eax
c0017c95:	e8 f6 0d ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017c9a:	83 c4 10             	add    esp,0x10
c0017c9d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ca2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ca8:	83 ec 08             	sub    esp,0x8
c0017cab:	68 81 2e 02 c0       	push   0xc0022e81
c0017cb0:	50                   	push   eax
c0017cb1:	e8 20 0e ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017cb6:	83 c4 10             	add    esp,0x10
c0017cb9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cbe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cc4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017cc8:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017ccb:	83 ec 08             	sub    esp,0x8
c0017cce:	52                   	push   edx
c0017ccf:	50                   	push   eax
c0017cd0:	e8 bb 0d ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017cd5:	83 c4 10             	add    esp,0x10
c0017cd8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cdd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ce3:	83 ec 08             	sub    esp,0x8
c0017ce6:	68 89 2e 02 c0       	push   0xc0022e89
c0017ceb:	50                   	push   eax
c0017cec:	e8 e5 0d ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017cf1:	83 c4 10             	add    esp,0x10
c0017cf4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cf9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d03:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017d06:	83 ec 08             	sub    esp,0x8
c0017d09:	52                   	push   edx
c0017d0a:	50                   	push   eax
c0017d0b:	e8 80 0d ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017d10:	83 c4 10             	add    esp,0x10
c0017d13:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d18:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d1e:	83 ec 08             	sub    esp,0x8
c0017d21:	68 91 2e 02 c0       	push   0xc0022e91
c0017d26:	50                   	push   eax
c0017d27:	e8 aa 0d ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017d2c:	83 c4 10             	add    esp,0x10
c0017d2f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d34:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d3a:	83 ec 08             	sub    esp,0x8
c0017d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d41:	50                   	push   eax
c0017d42:	e8 49 0d ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017d47:	83 c4 10             	add    esp,0x10
c0017d4a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d4f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d55:	83 ec 08             	sub    esp,0x8
c0017d58:	68 9a 2e 02 c0       	push   0xc0022e9a
c0017d5d:	50                   	push   eax
c0017d5e:	e8 73 0d ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017d63:	83 c4 10             	add    esp,0x10
c0017d66:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d6b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d71:	83 ec 08             	sub    esp,0x8
c0017d74:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d78:	50                   	push   eax
c0017d79:	e8 12 0d ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017d7e:	83 c4 10             	add    esp,0x10
c0017d81:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d86:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d8c:	83 ec 08             	sub    esp,0x8
c0017d8f:	68 a2 2e 02 c0       	push   0xc0022ea2
c0017d94:	50                   	push   eax
c0017d95:	e8 3c 0d ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0017d9a:	83 c4 10             	add    esp,0x10
c0017d9d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017da2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017da8:	83 ec 08             	sub    esp,0x8
c0017dab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017daf:	50                   	push   eax
c0017db0:	e8 db 0c ff ff       	call   c0008a90 <VgaText::putx(unsigned int)>
c0017db5:	83 c4 10             	add    esp,0x10
c0017db8:	fa                   	cli    
c0017db9:	f4                   	hlt    
c0017dba:	eb fe                	jmp    c0017dba <displayDebugInfo(regs*)+0x383>

c0017dbc <HalSystemIdle()>:
c0017dbc:	56                   	push   esi
c0017dbd:	53                   	push   ebx
c0017dbe:	83 ec 14             	sub    esp,0x14
c0017dc1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017dc6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017dcc:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017dd2:	83 e0 04             	and    eax,0x4
c0017dd5:	0f b6 c0             	movzx  eax,al
c0017dd8:	85 c0                	test   eax,eax
c0017dda:	0f 95 c0             	setne  al
c0017ddd:	0f b6 c0             	movzx  eax,al
c0017de0:	85 c0                	test   eax,eax
c0017de2:	74 4c                	je     c0017e30 <HalSystemIdle()+0x74>
c0017de4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017de9:	83 ec 08             	sub    esp,0x8
c0017dec:	68 e1 00 00 00       	push   0xe1
c0017df1:	50                   	push   eax
c0017df2:	e8 f9 f2 fe ff       	call   c00070f0 <Computer::rdmsr(unsigned int)>
c0017df7:	83 c4 10             	add    esp,0x10
c0017dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017dfe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017e02:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017e07:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017e0b:	83 e2 02             	and    edx,0x2
c0017e0e:	89 d3                	mov    ebx,edx
c0017e10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e14:	83 e2 00             	and    edx,0x0
c0017e17:	89 d6                	mov    esi,edx
c0017e19:	56                   	push   esi
c0017e1a:	53                   	push   ebx
c0017e1b:	68 e1 00 00 00       	push   0xe1
c0017e20:	50                   	push   eax
c0017e21:	e8 f6 f2 fe ff       	call   c000711c <Computer::wrmsr(unsigned int, unsigned long long)>
c0017e26:	83 c4 10             	add    esp,0x10
c0017e29:	e8 66 83 fe ff       	call   c0000194 <doTPAUSE>
c0017e2e:	eb 01                	jmp    c0017e31 <HalSystemIdle()+0x75>
c0017e30:	f4                   	hlt    
c0017e31:	90                   	nop
c0017e32:	83 c4 14             	add    esp,0x14
c0017e35:	5b                   	pop    ebx
c0017e36:	5e                   	pop    esi
c0017e37:	c3                   	ret    

c0017e38 <displayProgramFault(char const*)>:
c0017e38:	83 ec 0c             	sub    esp,0xc
c0017e3b:	83 ec 0c             	sub    esp,0xc
c0017e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e42:	e8 2e 2b ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017e47:	83 c4 10             	add    esp,0x10
c0017e4a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e51:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e54:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e5a:	85 c0                	test   eax,eax
c0017e5c:	74 21                	je     c0017e7f <displayProgramFault(char const*)+0x47>
c0017e5e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e63:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e65:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e68:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e6e:	6a 04                	push   0x4
c0017e70:	6a 0f                	push   0xf
c0017e72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e76:	50                   	push   eax
c0017e77:	e8 cc 0c ff ff       	call   c0008b48 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017e7c:	83 c4 10             	add    esp,0x10
c0017e7f:	90                   	nop
c0017e80:	83 c4 0c             	add    esp,0xc
c0017e83:	c3                   	ret    

c0017e84 <gpFault(regs*, void*)>:
c0017e84:	83 ec 1c             	sub    esp,0x1c
c0017e87:	c7 05 74 c7 02 c0 e0 72 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc00172e0
c0017e91:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017e96:	85 c0                	test   eax,eax
c0017e98:	74 1e                	je     c0017eb8 <gpFault(regs*, void*)+0x34>
c0017e9a:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017e9f:	83 ec 0c             	sub    esp,0xc
c0017ea2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ea6:	ff d0                	call   eax
c0017ea8:	83 c4 10             	add    esp,0x10
c0017eab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017eaf:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017eb4:	85 c0                	test   eax,eax
c0017eb6:	75 2e                	jne    c0017ee6 <gpFault(regs*, void*)+0x62>
c0017eb8:	83 ec 0c             	sub    esp,0xc
c0017ebb:	68 aa 2e 02 c0       	push   0xc0022eaa
c0017ec0:	e8 73 ff ff ff       	call   c0017e38 <displayProgramFault(char const*)>
c0017ec5:	83 c4 10             	add    esp,0x10
c0017ec8:	83 ec 0c             	sub    esp,0xc
c0017ecb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ecf:	e8 63 fb ff ff       	call   c0017a37 <displayDebugInfo(regs*)>
c0017ed4:	83 c4 10             	add    esp,0x10
c0017ed7:	83 ec 0c             	sub    esp,0xc
c0017eda:	6a 00                	push   0x0
c0017edc:	e8 a3 ed ff ff       	call   c0016c84 <Thr::terminateFromIRQ(int)>
c0017ee1:	83 c4 10             	add    esp,0x10
c0017ee4:	eb 01                	jmp    c0017ee7 <gpFault(regs*, void*)+0x63>
c0017ee6:	90                   	nop
c0017ee7:	83 c4 1c             	add    esp,0x1c
c0017eea:	c3                   	ret    

c0017eeb <pgFault(regs*, void*)>:
c0017eeb:	83 ec 1c             	sub    esp,0x1c
c0017eee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017ef5:	0f 20 d0             	mov    eax,cr2
c0017ef8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017efc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f00:	83 ec 04             	sub    esp,0x4
c0017f03:	52                   	push   edx
c0017f04:	50                   	push   eax
c0017f05:	68 88 2f 02 c0       	push   0xc0022f88
c0017f0a:	e8 66 2a ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017f0f:	83 c4 10             	add    esp,0x10
c0017f12:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017f17:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f19:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017f1c:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017f22:	0f 20 d2             	mov    edx,cr2
c0017f25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017f29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f2d:	83 ec 08             	sub    esp,0x8
c0017f30:	52                   	push   edx
c0017f31:	50                   	push   eax
c0017f32:	e8 89 24 ff ff       	call   c000a3c0 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017f37:	83 c4 10             	add    esp,0x10
c0017f3a:	0f b6 c0             	movzx  eax,al
c0017f3d:	85 c0                	test   eax,eax
c0017f3f:	75 2e                	jne    c0017f6f <pgFault(regs*, void*)+0x84>
c0017f41:	83 ec 0c             	sub    esp,0xc
c0017f44:	68 c3 2e 02 c0       	push   0xc0022ec3
c0017f49:	e8 ea fe ff ff       	call   c0017e38 <displayProgramFault(char const*)>
c0017f4e:	83 c4 10             	add    esp,0x10
c0017f51:	83 ec 0c             	sub    esp,0xc
c0017f54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f58:	e8 da fa ff ff       	call   c0017a37 <displayDebugInfo(regs*)>
c0017f5d:	83 c4 10             	add    esp,0x10
c0017f60:	83 ec 0c             	sub    esp,0xc
c0017f63:	6a 00                	push   0x0
c0017f65:	e8 1a ed ff ff       	call   c0016c84 <Thr::terminateFromIRQ(int)>
c0017f6a:	83 c4 10             	add    esp,0x10
c0017f6d:	eb 01                	jmp    c0017f70 <pgFault(regs*, void*)+0x85>
c0017f6f:	90                   	nop
c0017f70:	83 c4 1c             	add    esp,0x1c
c0017f73:	c3                   	ret    

c0017f74 <otherISRHandler(regs*, void*)>:
c0017f74:	83 ec 0c             	sub    esp,0xc
c0017f77:	83 ec 0c             	sub    esp,0xc
c0017f7a:	68 b0 2f 02 c0       	push   0xc0022fb0
c0017f7f:	e8 b4 fe ff ff       	call   c0017e38 <displayProgramFault(char const*)>
c0017f84:	83 c4 10             	add    esp,0x10
c0017f87:	83 ec 0c             	sub    esp,0xc
c0017f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f8e:	e8 a4 fa ff ff       	call   c0017a37 <displayDebugInfo(regs*)>
c0017f93:	83 c4 10             	add    esp,0x10
c0017f96:	83 ec 0c             	sub    esp,0xc
c0017f99:	6a 00                	push   0x0
c0017f9b:	e8 e4 ec ff ff       	call   c0016c84 <Thr::terminateFromIRQ(int)>
c0017fa0:	83 c4 10             	add    esp,0x10
c0017fa3:	90                   	nop
c0017fa4:	83 c4 0c             	add    esp,0xc
c0017fa7:	c3                   	ret    

c0017fa8 <opcodeFault(regs*, void*)>:
c0017fa8:	55                   	push   ebp
c0017fa9:	89 e5                	mov    ebp,esp
c0017fab:	83 ec 08             	sub    esp,0x8
c0017fae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fb1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017fb4:	83 ec 08             	sub    esp,0x8
c0017fb7:	50                   	push   eax
c0017fb8:	68 ce 2e 02 c0       	push   0xc0022ece
c0017fbd:	e8 b3 29 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017fc2:	83 c4 10             	add    esp,0x10
c0017fc5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017fca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017fd0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017fd6:	0f b6 c0             	movzx  eax,al
c0017fd9:	85 c0                	test   eax,eax
c0017fdb:	74 21                	je     c0017ffe <opcodeFault(regs*, void*)+0x56>
c0017fdd:	83 ec 0c             	sub    esp,0xc
c0017fe0:	68 d8 2f 02 c0       	push   0xc0022fd8
c0017fe5:	e8 8b 29 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c0017fea:	83 c4 10             	add    esp,0x10
c0017fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ff0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017ff3:	8d 50 19             	lea    edx,[eax+0x19]
c0017ff6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ff9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017ffc:	eb 2b                	jmp    c0018029 <opcodeFault(regs*, void*)+0x81>
c0017ffe:	83 ec 0c             	sub    esp,0xc
c0018001:	68 dc 2e 02 c0       	push   0xc0022edc
c0018006:	e8 2d fe ff ff       	call   c0017e38 <displayProgramFault(char const*)>
c001800b:	83 c4 10             	add    esp,0x10
c001800e:	83 ec 0c             	sub    esp,0xc
c0018011:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018014:	e8 1e fa ff ff       	call   c0017a37 <displayDebugInfo(regs*)>
c0018019:	83 c4 10             	add    esp,0x10
c001801c:	83 ec 0c             	sub    esp,0xc
c001801f:	6a 00                	push   0x0
c0018021:	e8 5e ec ff ff       	call   c0016c84 <Thr::terminateFromIRQ(int)>
c0018026:	83 c4 10             	add    esp,0x10
c0018029:	c9                   	leave  
c001802a:	c3                   	ret    

c001802b <i386SaveCoprocessor(void*)>:
c001802b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001802f:	83 c0 3f             	add    eax,0x3f
c0018032:	83 e0 c0             	and    eax,0xffffffc0
c0018035:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018039:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c001803f <i386LoadCoprocessor(void*)>:
c001803f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018043:	83 c0 3f             	add    eax,0x3f
c0018046:	83 e0 c0             	and    eax,0xffffffc0
c0018049:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001804d:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0018053 <x87EmulHandler(regs*, void*)>:
c0018053:	53                   	push   ebx
c0018054:	83 ec 08             	sub    esp,0x8
c0018057:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001805c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0018060:	74 10                	je     c0018072 <x87EmulHandler(regs*, void*)+0x1f>
c0018062:	83 ec 0c             	sub    esp,0xc
c0018065:	68 e9 2e 02 c0       	push   0xc0022ee9
c001806a:	e8 a4 96 ff ff       	call   c0011713 <KePanic(char const*)>
c001806f:	83 c4 10             	add    esp,0x10
c0018072:	0f 20 c0             	mov    eax,cr0
c0018075:	a8 08                	test   al,0x8
c0018077:	74 59                	je     c00180d2 <x87EmulHandler(regs*, void*)+0x7f>
c0018079:	0f 06                	clts   
c001807b:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0018080:	85 c0                	test   eax,eax
c0018082:	74 0e                	je     c0018092 <x87EmulHandler(regs*, void*)+0x3f>
c0018084:	83 ec 0c             	sub    esp,0xc
c0018087:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001808a:	e8 9c ff ff ff       	call   c001802b <i386SaveCoprocessor(void*)>
c001808f:	83 c4 10             	add    esp,0x10
c0018092:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018098:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001809c:	75 12                	jne    c00180b0 <x87EmulHandler(regs*, void*)+0x5d>
c001809e:	83 ec 0c             	sub    esp,0xc
c00180a1:	68 40 02 00 00       	push   0x240
c00180a6:	e8 3b fa fe ff       	call   c0007ae6 <malloc>
c00180ab:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00180ae:	eb 10                	jmp    c00180c0 <x87EmulHandler(regs*, void*)+0x6d>
c00180b0:	83 ec 0c             	sub    esp,0xc
c00180b3:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c00180b8:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00180bb:	e8 7f ff ff ff       	call   c001803f <i386LoadCoprocessor(void*)>
c00180c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180c5:	83 c4 10             	add    esp,0x10
c00180c8:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c00180cd:	83 c4 08             	add    esp,0x8
c00180d0:	5b                   	pop    ebx
c00180d1:	c3                   	ret    
c00180d2:	83 ec 0c             	sub    esp,0xc
c00180d5:	68 fd 2e 02 c0       	push   0xc0022efd
c00180da:	e8 96 28 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00180df:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00180e7:	83 c4 18             	add    esp,0x18
c00180ea:	5b                   	pop    ebx
c00180eb:	e9 94 eb ff ff       	jmp    c0016c84 <Thr::terminateFromIRQ(int)>

c00180f0 <HalInitialiseCoprocessor()>:
c00180f0:	83 ec 10             	sub    esp,0x10
c00180f3:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c00180fd:	6a 00                	push   0x0
c00180ff:	68 53 80 01 c0       	push   0xc0018053
c0018104:	6a 07                	push   0x7
c0018106:	e8 5b 4e ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001810b:	e8 50 70 00 00       	call   c001f160 <avxDetect>
c0018110:	83 c4 10             	add    esp,0x10
c0018113:	85 c0                	test   eax,eax
c0018115:	74 1c                	je     c0018133 <HalInitialiseCoprocessor()+0x43>
c0018117:	c7 05 70 c7 02 c0 8a f1 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f18a
c0018121:	c7 05 6c c7 02 c0 9b f1 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f19b
c001812b:	83 c4 0c             	add    esp,0xc
c001812e:	e9 79 70 00 00       	jmp    c001f1ac <avxInit>
c0018133:	e8 b8 73 00 00       	call   c001f4f0 <absolutelyNoChanceInHell>
c0018138:	85 c0                	test   eax,eax
c001813a:	74 1c                	je     c0018158 <HalInitialiseCoprocessor()+0x68>
c001813c:	c7 05 70 c7 02 c0 08 f5 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f508
c0018146:	c7 05 6c c7 02 c0 10 f5 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f510
c0018150:	83 c4 0c             	add    esp,0xc
c0018153:	e9 c0 73 00 00       	jmp    c001f518 <sseInit>
c0018158:	e8 d9 73 00 00       	call   c001f536 <x87Detect>
c001815d:	85 c0                	test   eax,eax
c001815f:	74 1c                	je     c001817d <HalInitialiseCoprocessor()+0x8d>
c0018161:	c7 05 70 c7 02 c0 51 f5 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f551
c001816b:	c7 05 6c c7 02 c0 58 f5 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f558
c0018175:	83 c4 0c             	add    esp,0xc
c0018178:	e9 e2 73 00 00       	jmp    c001f55f <x87Init>
c001817d:	c7 05 70 c7 02 c0 04 7a 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc0017a04
c0018187:	c7 05 6c c7 02 c0 04 7a 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc0017a04
c0018191:	0f 20 c0             	mov    eax,cr0
c0018194:	83 c8 04             	or     eax,0x4
c0018197:	0f 22 c0             	mov    cr0,eax
c001819a:	83 c4 0c             	add    esp,0xc
c001819d:	c3                   	ret    

c001819e <HalPanic(char const*)>:
c001819e:	53                   	push   ebx
c001819f:	83 ec 10             	sub    esp,0x10
c00181a2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00181a6:	fa                   	cli    
c00181a7:	53                   	push   ebx
c00181a8:	68 13 2f 02 c0       	push   0xc0022f13
c00181ad:	e8 c3 27 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c00181b2:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c00181b7:	83 c4 10             	add    esp,0x10
c00181ba:	85 c0                	test   eax,eax
c00181bc:	74 09                	je     c00181c7 <HalPanic(char const*)+0x29>
c00181be:	83 ec 0c             	sub    esp,0xc
c00181c1:	53                   	push   ebx
c00181c2:	ff d0                	call   eax
c00181c4:	83 c4 10             	add    esp,0x10
c00181c7:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c00181cc:	85 c0                	test   eax,eax
c00181ce:	0f 84 dc 00 00 00    	je     c00182b0 <HalPanic(char const*)+0x112>
c00181d4:	52                   	push   edx
c00181d5:	6a 01                	push   0x1
c00181d7:	6a 0f                	push   0xf
c00181d9:	50                   	push   eax
c00181da:	e8 05 04 ff ff       	call   c00085e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00181df:	59                   	pop    ecx
c00181e0:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181e6:	e8 e9 05 ff ff       	call   c00087d4 <VgaText::clearScreen()>
c00181eb:	58                   	pop    eax
c00181ec:	5a                   	pop    edx
c00181ed:	68 0c 10 02 c0       	push   0xc002100c
c00181f2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181f8:	e8 1f 04 ff ff       	call   c000861c <VgaText::setTitle(char*)>
c00181fd:	83 c4 0c             	add    esp,0xc
c0018200:	6a 01                	push   0x1
c0018202:	6a 0f                	push   0xf
c0018204:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001820a:	e8 d5 03 ff ff       	call   c00085e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001820f:	59                   	pop    ecx
c0018210:	58                   	pop    eax
c0018211:	68 2c 2f 02 c0       	push   0xc0022f2c
c0018216:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001821c:	e8 b5 08 ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0018221:	83 c4 0c             	add    esp,0xc
c0018224:	6a 0f                	push   0xf
c0018226:	6a 01                	push   0x1
c0018228:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001822e:	e8 b1 03 ff ff       	call   c00085e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018233:	58                   	pop    eax
c0018234:	5a                   	pop    edx
c0018235:	68 35 2f 02 c0       	push   0xc0022f35
c001823a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018240:	e8 91 08 ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0018245:	83 c4 0c             	add    esp,0xc
c0018248:	6a 01                	push   0x1
c001824a:	6a 0f                	push   0xf
c001824c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018252:	e8 8d 03 ff ff       	call   c00085e4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018257:	59                   	pop    ecx
c0018258:	58                   	pop    eax
c0018259:	68 79 2f 02 c0       	push   0xc0022f79
c001825e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018264:	e8 6d 08 ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c0018269:	58                   	pop    eax
c001826a:	5a                   	pop    edx
c001826b:	68 42 2f 02 c0       	push   0xc0022f42
c0018270:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018276:	e8 5b 08 ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c001827b:	59                   	pop    ecx
c001827c:	58                   	pop    eax
c001827d:	68 7c 2f 02 c0       	push   0xc0022f7c
c0018282:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018288:	e8 49 08 ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c001828d:	58                   	pop    eax
c001828e:	5a                   	pop    edx
c001828f:	53                   	push   ebx
c0018290:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018296:	e8 3b 08 ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c001829b:	59                   	pop    ecx
c001829c:	5b                   	pop    ebx
c001829d:	68 79 2f 02 c0       	push   0xc0022f79
c00182a2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00182a8:	e8 29 08 ff ff       	call   c0008ad6 <VgaText::puts(char const*)>
c00182ad:	83 c4 10             	add    esp,0x10
c00182b0:	eb fe                	jmp    c00182b0 <HalPanic(char const*)+0x112>

c00182b2 <HalQueryPerformanceCounter()>:
c00182b2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00182b7:	31 d2                	xor    edx,edx
c00182b9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00182bf:	31 c0                	xor    eax,eax
c00182c1:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00182c8:	74 02                	je     c00182cc <HalQueryPerformanceCounter()+0x1a>
c00182ca:	0f 31                	rdtsc  
c00182cc:	c3                   	ret    

c00182cd <HalInitialise()>:
c00182cd:	53                   	push   ebx
c00182ce:	83 ec 08             	sub    esp,0x8
c00182d1:	e8 c0 4e ff ff       	call   c000d196 <setupINTS()>
c00182d6:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c00182dd:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00182e2:	75 0f                	jne    c00182f3 <HalInitialise()+0x26>
c00182e4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00182ea:	83 e2 fe             	and    edx,0xfffffffe
c00182ed:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00182f3:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00182f9:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c0018300:	83 e2 fe             	and    edx,0xfffffffe
c0018303:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018309:	e8 9e 02 00 00       	call   c00185ac <picOpen()>
c001830e:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018315:	74 0a                	je     c0018321 <HalInitialise()+0x54>
c0018317:	e8 e0 01 00 00       	call   c00184fc <picDisable()>
c001831c:	e8 ad 67 00 00       	call   c001eace <apicOpen()>
c0018321:	bb 0f 00 00 00       	mov    ebx,0xf
c0018326:	50                   	push   eax
c0018327:	6a 00                	push   0x0
c0018329:	68 74 7f 01 c0       	push   0xc0017f74
c001832e:	6a 00                	push   0x0
c0018330:	e8 31 4c ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018335:	83 c4 0c             	add    esp,0xc
c0018338:	6a 00                	push   0x0
c001833a:	68 74 7f 01 c0       	push   0xc0017f74
c001833f:	6a 01                	push   0x1
c0018341:	e8 20 4c ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018346:	83 c4 0c             	add    esp,0xc
c0018349:	6a 00                	push   0x0
c001834b:	68 05 7a 01 c0       	push   0xc0017a05
c0018350:	6a 02                	push   0x2
c0018352:	e8 0f 4c ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018357:	83 c4 0c             	add    esp,0xc
c001835a:	6a 00                	push   0x0
c001835c:	68 74 7f 01 c0       	push   0xc0017f74
c0018361:	6a 03                	push   0x3
c0018363:	e8 fe 4b ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018368:	83 c4 0c             	add    esp,0xc
c001836b:	6a 00                	push   0x0
c001836d:	68 74 7f 01 c0       	push   0xc0017f74
c0018372:	6a 04                	push   0x4
c0018374:	e8 ed 4b ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018379:	83 c4 0c             	add    esp,0xc
c001837c:	6a 00                	push   0x0
c001837e:	68 74 7f 01 c0       	push   0xc0017f74
c0018383:	6a 05                	push   0x5
c0018385:	e8 dc 4b ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001838a:	83 c4 0c             	add    esp,0xc
c001838d:	6a 00                	push   0x0
c001838f:	68 a8 7f 01 c0       	push   0xc0017fa8
c0018394:	6a 06                	push   0x6
c0018396:	e8 cb 4b ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001839b:	83 c4 0c             	add    esp,0xc
c001839e:	6a 00                	push   0x0
c00183a0:	68 1e 7a 01 c0       	push   0xc0017a1e
c00183a5:	6a 08                	push   0x8
c00183a7:	e8 ba 4b ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183ac:	83 c4 0c             	add    esp,0xc
c00183af:	6a 00                	push   0x0
c00183b1:	68 74 7f 01 c0       	push   0xc0017f74
c00183b6:	6a 09                	push   0x9
c00183b8:	e8 a9 4b ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183bd:	83 c4 0c             	add    esp,0xc
c00183c0:	6a 00                	push   0x0
c00183c2:	68 74 7f 01 c0       	push   0xc0017f74
c00183c7:	6a 0a                	push   0xa
c00183c9:	e8 98 4b ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183ce:	83 c4 0c             	add    esp,0xc
c00183d1:	6a 00                	push   0x0
c00183d3:	68 74 7f 01 c0       	push   0xc0017f74
c00183d8:	6a 0b                	push   0xb
c00183da:	e8 87 4b ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183df:	83 c4 0c             	add    esp,0xc
c00183e2:	6a 00                	push   0x0
c00183e4:	68 84 7e 01 c0       	push   0xc0017e84
c00183e9:	6a 0d                	push   0xd
c00183eb:	e8 76 4b ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183f0:	83 c4 0c             	add    esp,0xc
c00183f3:	6a 00                	push   0x0
c00183f5:	68 eb 7e 01 c0       	push   0xc0017eeb
c00183fa:	6a 0e                	push   0xe
c00183fc:	e8 65 4b ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018401:	83 c4 10             	add    esp,0x10
c0018404:	50                   	push   eax
c0018405:	6a 00                	push   0x0
c0018407:	68 74 7f 01 c0       	push   0xc0017f74
c001840c:	53                   	push   ebx
c001840d:	43                   	inc    ebx
c001840e:	e8 53 4b ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018413:	83 c4 10             	add    esp,0x10
c0018416:	83 fb 1e             	cmp    ebx,0x1e
c0018419:	75 e9                	jne    c0018404 <HalInitialise()+0x137>
c001841b:	50                   	push   eax
c001841c:	6a 00                	push   0x0
c001841e:	68 ac 2b 01 c0       	push   0xc0012bac
c0018423:	6a 60                	push   0x60
c0018425:	e8 3c 4b ff ff       	call   c000cf66 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001842a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001842f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018439:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018440:	e8 a1 f6 fe ff       	call   c0007ae6 <malloc>
c0018445:	89 04 24             	mov    DWORD PTR [esp],eax
c0018448:	89 c3                	mov    ebx,eax
c001844a:	e8 3b 09 00 00       	call   c0018d8a <RTC::RTC()>
c001844f:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018459:	5a                   	pop    edx
c001845a:	59                   	pop    ecx
c001845b:	53                   	push   ebx
c001845c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018462:	e8 8f 45 ff ff       	call   c000c9f6 <Device::addChild(Device*)>
c0018467:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018469:	6a 00                	push   0x0
c001846b:	6a 00                	push   0x0
c001846d:	6a 00                	push   0x0
c001846f:	53                   	push   ebx
c0018470:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018473:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018478:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001847e:	83 c4 28             	add    esp,0x28
c0018481:	5b                   	pop    ebx
c0018482:	c3                   	ret    

c0018483 <HalMakeBeep(int)>:
c0018483:	53                   	push   ebx
c0018484:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018488:	85 db                	test   ebx,ebx
c001848a:	75 07                	jne    c0018493 <HalMakeBeep(int)+0x10>
c001848c:	e4 61                	in     al,0x61
c001848e:	83 e0 fc             	and    eax,0xfffffffc
c0018491:	eb 26                	jmp    c00184b9 <HalMakeBeep(int)+0x36>
c0018493:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018498:	99                   	cdq    
c0018499:	f7 fb                	idiv   ebx
c001849b:	89 c1                	mov    ecx,eax
c001849d:	b0 b6                	mov    al,0xb6
c001849f:	e6 43                	out    0x43,al
c00184a1:	88 c8                	mov    al,cl
c00184a3:	e6 42                	out    0x42,al
c00184a5:	89 c8                	mov    eax,ecx
c00184a7:	c1 e8 08             	shr    eax,0x8
c00184aa:	e6 42                	out    0x42,al
c00184ac:	e4 61                	in     al,0x61
c00184ae:	89 c2                	mov    edx,eax
c00184b0:	83 ca 03             	or     edx,0x3
c00184b3:	38 d0                	cmp    al,dl
c00184b5:	74 04                	je     c00184bb <HalMakeBeep(int)+0x38>
c00184b7:	88 d0                	mov    al,dl
c00184b9:	e6 61                	out    0x61,al
c00184bb:	5b                   	pop    ebx
c00184bc:	c3                   	ret    

c00184bd <HalGetRand()>:
c00184bd:	31 c0                	xor    eax,eax
c00184bf:	c3                   	ret    

c00184c0 <HalEndOfInterrupt(int)>:
c00184c0:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00184c7:	74 23                	je     c00184ec <HalEndOfInterrupt(int)+0x2c>
c00184c9:	83 ec 14             	sub    esp,0x14
c00184cc:	6a 1b                	push   0x1b
c00184ce:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00184d4:	e8 17 ec fe ff       	call   c00070f0 <Computer::rdmsr(unsigned int)>
c00184d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00184de:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00184e8:	83 c4 1c             	add    esp,0x1c
c00184eb:	c3                   	ret    
c00184ec:	e9 3f 02 00 00       	jmp    c0018730 <picEOI(int)>

c00184f1 <HalRestart()>:
c00184f1:	c3                   	ret    

c00184f2 <HalShutdown()>:
c00184f2:	c3                   	ret    

c00184f3 <HalSleep()>:
c00184f3:	c3                   	ret    

c00184f4 <picIoWait()>:
c00184f4:	eb 00                	jmp    c00184f6 <picIoWait()+0x2>
c00184f6:	eb 00                	jmp    c00184f8 <picIoWait()+0x4>
c00184f8:	90                   	nop
c00184f9:	c3                   	ret    
c00184fa:	66 90                	xchg   ax,ax

c00184fc <picDisable()>:
c00184fc:	83 ec 10             	sub    esp,0x10
c00184ff:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018506:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001850b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001850f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018514:	ee                   	out    dx,al
c0018515:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001851c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018521:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018525:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001852a:	ee                   	out    dx,al
c001852b:	90                   	nop
c001852c:	83 c4 10             	add    esp,0x10
c001852f:	c3                   	ret    

c0018530 <picGetIRQReg(int)>:
c0018530:	83 ec 10             	sub    esp,0x10
c0018533:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018537:	0f b6 c0             	movzx  eax,al
c001853a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018541:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018545:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018549:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001854e:	ee                   	out    dx,al
c001854f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018553:	0f b6 c0             	movzx  eax,al
c0018556:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001855d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018561:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018565:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001856a:	ee                   	out    dx,al
c001856b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018572:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018577:	89 c2                	mov    edx,eax
c0018579:	ec                   	in     al,dx
c001857a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001857e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018582:	0f b6 c0             	movzx  eax,al
c0018585:	c1 e0 08             	shl    eax,0x8
c0018588:	89 c1                	mov    ecx,eax
c001858a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018591:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018596:	89 c2                	mov    edx,eax
c0018598:	ec                   	in     al,dx
c0018599:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001859d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00185a1:	0f b6 c0             	movzx  eax,al
c00185a4:	09 c8                	or     eax,ecx
c00185a6:	83 c4 10             	add    esp,0x10
c00185a9:	c3                   	ret    
c00185aa:	66 90                	xchg   ax,ax

c00185ac <picOpen()>:
c00185ac:	83 ec 50             	sub    esp,0x50
c00185af:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00185b6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00185bb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00185bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00185c3:	ee                   	out    dx,al
c00185c4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00185cb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00185d0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00185d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00185d8:	ee                   	out    dx,al
c00185d9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00185e1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00185e9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00185f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185f4:	89 c2                	mov    edx,eax
c00185f6:	ec                   	in     al,dx
c00185f7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00185fb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00185ff:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018603:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001860a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001860e:	89 c2                	mov    edx,eax
c0018610:	ec                   	in     al,dx
c0018611:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018615:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018619:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001861d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018624:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018629:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001862d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018631:	ee                   	out    dx,al
c0018632:	e8 bd fe ff ff       	call   c00184f4 <picIoWait()>
c0018637:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001863e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018643:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018647:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001864b:	ee                   	out    dx,al
c001864c:	e8 a3 fe ff ff       	call   c00184f4 <picIoWait()>
c0018651:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018655:	0f b6 c0             	movzx  eax,al
c0018658:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001865f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018663:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018667:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001866b:	ee                   	out    dx,al
c001866c:	e8 83 fe ff ff       	call   c00184f4 <picIoWait()>
c0018671:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018675:	0f b6 c0             	movzx  eax,al
c0018678:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001867f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018683:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018687:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001868b:	ee                   	out    dx,al
c001868c:	e8 63 fe ff ff       	call   c00184f4 <picIoWait()>
c0018691:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018698:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001869d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00186a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00186a5:	ee                   	out    dx,al
c00186a6:	e8 49 fe ff ff       	call   c00184f4 <picIoWait()>
c00186ab:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00186b2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00186b7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00186bb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00186bf:	ee                   	out    dx,al
c00186c0:	e8 2f fe ff ff       	call   c00184f4 <picIoWait()>
c00186c5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00186cc:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00186d1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00186d5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00186d9:	ee                   	out    dx,al
c00186da:	e8 15 fe ff ff       	call   c00184f4 <picIoWait()>
c00186df:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00186e6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00186eb:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00186ef:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00186f3:	ee                   	out    dx,al
c00186f4:	e8 fb fd ff ff       	call   c00184f4 <picIoWait()>
c00186f9:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00186fe:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018705:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018709:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001870d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018711:	ee                   	out    dx,al
c0018712:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018717:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001871e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018722:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018726:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001872a:	ee                   	out    dx,al
c001872b:	90                   	nop
c001872c:	83 c4 50             	add    esp,0x50
c001872f:	c3                   	ret    

c0018730 <picEOI(int)>:
c0018730:	83 ec 10             	sub    esp,0x10
c0018733:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018738:	75 1e                	jne    c0018758 <picEOI(int)+0x28>
c001873a:	6a 0b                	push   0xb
c001873c:	e8 ef fd ff ff       	call   c0018530 <picGetIRQReg(int)>
c0018741:	83 c4 04             	add    esp,0x4
c0018744:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018749:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001874e:	25 80 00 00 00       	and    eax,0x80
c0018753:	74 73                	je     c00187c8 <picEOI(int)+0x98>
c0018755:	8d 76 00             	lea    esi,[esi+0x0]
c0018758:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001875d:	75 31                	jne    c0018790 <picEOI(int)+0x60>
c001875f:	6a 0b                	push   0xb
c0018761:	e8 ca fd ff ff       	call   c0018530 <picGetIRQReg(int)>
c0018766:	83 c4 04             	add    esp,0x4
c0018769:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001876e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018772:	98                   	cwde   
c0018773:	85 c0                	test   eax,eax
c0018775:	78 19                	js     c0018790 <picEOI(int)+0x60>
c0018777:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001877e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018783:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018787:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001878c:	ee                   	out    dx,al
c001878d:	eb 3d                	jmp    c00187cc <picEOI(int)+0x9c>
c001878f:	90                   	nop
c0018790:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018795:	7e 19                	jle    c00187b0 <picEOI(int)+0x80>
c0018797:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001879e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00187a3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00187a7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00187ac:	ee                   	out    dx,al
c00187ad:	8d 76 00             	lea    esi,[esi+0x0]
c00187b0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00187b7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00187bc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00187c0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00187c5:	ee                   	out    dx,al
c00187c6:	eb 04                	jmp    c00187cc <picEOI(int)+0x9c>
c00187c8:	90                   	nop
c00187c9:	8d 76 00             	lea    esi,[esi+0x0]
c00187cc:	83 c4 10             	add    esp,0x10
c00187cf:	c3                   	ret    

c00187d0 <RTC::open(int, int, void*)>:
c00187d0:	31 c0                	xor    eax,eax
c00187d2:	c3                   	ret    
c00187d3:	90                   	nop

c00187d4 <RTC::close(int, int, void*)>:
c00187d4:	31 c0                	xor    eax,eax
c00187d6:	c3                   	ret    
c00187d7:	90                   	nop

c00187d8 <RTC::timeInSecondsUTC()>:
c00187d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187dc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00187e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00187e8:	c3                   	ret    
c00187e9:	90                   	nop

c00187ea <RTC::timeInDatetimeUTC()>:
c00187ea:	53                   	push   ebx
c00187eb:	83 ec 14             	sub    esp,0x14
c00187ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00187f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00187f8:	50                   	push   eax
c00187f9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00187fc:	83 c4 0c             	add    esp,0xc
c00187ff:	52                   	push   edx
c0018800:	50                   	push   eax
c0018801:	53                   	push   ebx
c0018802:	e8 63 3f ff ff       	call   c000c76a <secondsToDatetime(unsigned long long)>
c0018807:	89 d8                	mov    eax,ebx
c0018809:	83 c4 14             	add    esp,0x14
c001880c:	5b                   	pop    ebx
c001880d:	c2 04 00             	ret    0x4

c0018810 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018810:	56                   	push   esi
c0018811:	53                   	push   ebx
c0018812:	83 ec 14             	sub    esp,0x14
c0018815:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018819:	8b 03                	mov    eax,DWORD PTR [ebx]
c001881b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001881e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018822:	52                   	push   edx
c0018823:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018827:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001882b:	50                   	push   eax
c001882c:	e8 39 3f ff ff       	call   c000c76a <secondsToDatetime(unsigned long long)>
c0018831:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018835:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018839:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001883d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018841:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018845:	89 f0                	mov    eax,esi
c0018847:	83 c4 20             	add    esp,0x20
c001884a:	5b                   	pop    ebx
c001884b:	5e                   	pop    esi
c001884c:	ff e0                	jmp    eax

c001884e <RTC::~RTC()>:
c001884e:	83 ec 0c             	sub    esp,0xc
c0018851:	ba 18 30 02 c0       	mov    edx,0xc0023018
c0018856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001885a:	89 10                	mov    DWORD PTR [eax],edx
c001885c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018860:	83 ec 0c             	sub    esp,0xc
c0018863:	50                   	push   eax
c0018864:	e8 93 3c ff ff       	call   c000c4fc <Clock::~Clock()>
c0018869:	83 c4 10             	add    esp,0x10
c001886c:	90                   	nop
c001886d:	83 c4 0c             	add    esp,0xc
c0018870:	c3                   	ret    
c0018871:	90                   	nop

c0018872 <RTC::~RTC()>:
c0018872:	83 ec 0c             	sub    esp,0xc
c0018875:	83 ec 0c             	sub    esp,0xc
c0018878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001887c:	e8 cd ff ff ff       	call   c001884e <RTC::~RTC()>
c0018881:	83 c4 10             	add    esp,0x10
c0018884:	83 ec 08             	sub    esp,0x8
c0018887:	68 60 01 00 00       	push   0x160
c001888c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018890:	e8 b3 1f ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c0018895:	83 c4 10             	add    esp,0x10
c0018898:	83 c4 0c             	add    esp,0xc
c001889b:	c3                   	ret    

c001889c <RTC::get_update_in_progress_flag()>:
c001889c:	83 ec 14             	sub    esp,0x14
c001889f:	6a 0a                	push   0xa
c00188a1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188a7:	e8 fc e8 fe ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c00188ac:	83 c4 1c             	add    esp,0x1c
c00188af:	0f b6 c0             	movzx  eax,al
c00188b2:	c1 e8 07             	shr    eax,0x7
c00188b5:	c3                   	ret    

c00188b6 <RTC::completeRTCRefresh()>:
c00188b6:	55                   	push   ebp
c00188b7:	57                   	push   edi
c00188b8:	56                   	push   esi
c00188b9:	53                   	push   ebx
c00188ba:	83 ec 3c             	sub    esp,0x3c
c00188bd:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00188c3:	83 ec 0c             	sub    esp,0xc
c00188c6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00188ca:	e8 cd ff ff ff       	call   c001889c <RTC::get_update_in_progress_flag()>
c00188cf:	83 c4 10             	add    esp,0x10
c00188d2:	84 c0                	test   al,al
c00188d4:	74 0e                	je     c00188e4 <RTC::completeRTCRefresh()+0x2e>
c00188d6:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00188dc:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00188e2:	73 df                	jae    c00188c3 <RTC::completeRTCRefresh()+0xd>
c00188e4:	51                   	push   ecx
c00188e5:	51                   	push   ecx
c00188e6:	6a 00                	push   0x0
c00188e8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188ee:	e8 b5 e8 fe ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c00188f3:	5b                   	pop    ebx
c00188f4:	89 c7                	mov    edi,eax
c00188f6:	5e                   	pop    esi
c00188f7:	6a 02                	push   0x2
c00188f9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188ff:	e8 a4 e8 fe ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c0018904:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018908:	5d                   	pop    ebp
c0018909:	58                   	pop    eax
c001890a:	6a 04                	push   0x4
c001890c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018912:	e8 91 e8 fe ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c0018917:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001891b:	58                   	pop    eax
c001891c:	5a                   	pop    edx
c001891d:	6a 07                	push   0x7
c001891f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018925:	e8 7e e8 fe ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c001892a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001892e:	59                   	pop    ecx
c001892f:	5b                   	pop    ebx
c0018930:	6a 08                	push   0x8
c0018932:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018938:	e8 6b e8 fe ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c001893d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018941:	5e                   	pop    esi
c0018942:	5d                   	pop    ebp
c0018943:	6a 09                	push   0x9
c0018945:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001894b:	e8 58 e8 fe ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c0018950:	0f b6 c0             	movzx  eax,al
c0018953:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018957:	83 c4 10             	add    esp,0x10
c001895a:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018960:	83 ec 0c             	sub    esp,0xc
c0018963:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018967:	e8 30 ff ff ff       	call   c001889c <RTC::get_update_in_progress_flag()>
c001896c:	83 c4 10             	add    esp,0x10
c001896f:	84 c0                	test   al,al
c0018971:	74 0e                	je     c0018981 <RTC::completeRTCRefresh()+0xcb>
c0018973:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018979:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c001897f:	73 df                	jae    c0018960 <RTC::completeRTCRefresh()+0xaa>
c0018981:	51                   	push   ecx
c0018982:	51                   	push   ecx
c0018983:	6a 00                	push   0x0
c0018985:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001898b:	e8 18 e8 fe ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c0018990:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018994:	5b                   	pop    ebx
c0018995:	5e                   	pop    esi
c0018996:	6a 02                	push   0x2
c0018998:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001899e:	e8 05 e8 fe ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c00189a3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00189a7:	5d                   	pop    ebp
c00189a8:	58                   	pop    eax
c00189a9:	6a 04                	push   0x4
c00189ab:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189b1:	e8 f2 e7 fe ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c00189b6:	88 c3                	mov    bl,al
c00189b8:	58                   	pop    eax
c00189b9:	5a                   	pop    edx
c00189ba:	6a 07                	push   0x7
c00189bc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189c2:	e8 e1 e7 fe ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c00189c7:	59                   	pop    ecx
c00189c8:	89 c6                	mov    esi,eax
c00189ca:	5d                   	pop    ebp
c00189cb:	6a 08                	push   0x8
c00189cd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189d3:	e8 d0 e7 fe ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c00189d8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00189dc:	58                   	pop    eax
c00189dd:	5a                   	pop    edx
c00189de:	6a 09                	push   0x9
c00189e0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189e6:	e8 bd e7 fe ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c00189eb:	89 f9                	mov    ecx,edi
c00189ed:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00189f1:	0f b6 e8             	movzx  ebp,al
c00189f4:	83 c4 10             	add    esp,0x10
c00189f7:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00189fb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a00:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0018a05:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018a09:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018a0d:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0018a11:	0f 94 c0             	sete   al
c0018a14:	0f b6 fb             	movzx  edi,bl
c0018a17:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0018a1b:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0018a20:	0f 94 c2             	sete   dl
c0018a23:	21 d0                	and    eax,edx
c0018a25:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018a29:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018a2d:	0f 94 c2             	sete   dl
c0018a30:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0018a34:	21 c2                	and    edx,eax
c0018a36:	89 f0                	mov    eax,esi
c0018a38:	0f b6 c0             	movzx  eax,al
c0018a3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a3f:	89 f0                	mov    eax,esi
c0018a41:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018a45:	0f 94 c0             	sete   al
c0018a48:	21 d0                	and    eax,edx
c0018a4a:	31 d2                	xor    edx,edx
c0018a4c:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018a50:	0f 94 c2             	sete   dl
c0018a53:	85 c2                	test   edx,eax
c0018a55:	75 27                	jne    c0018a7e <RTC::completeRTCRefresh()+0x1c8>
c0018a57:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018a5b:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018a5f:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018a63:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018a67:	89 f0                	mov    eax,esi
c0018a69:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018a6d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018a71:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018a75:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018a79:	e9 dc fe ff ff       	jmp    c001895a <RTC::completeRTCRefresh()+0xa4>
c0018a7e:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018a82:	75 d3                	jne    c0018a57 <RTC::completeRTCRefresh()+0x1a1>
c0018a84:	52                   	push   edx
c0018a85:	52                   	push   edx
c0018a86:	6a 0b                	push   0xb
c0018a88:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a8e:	e8 15 e7 fe ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c0018a93:	83 c4 10             	add    esp,0x10
c0018a96:	a8 04                	test   al,0x4
c0018a98:	75 7a                	jne    c0018b14 <RTC::completeRTCRefresh()+0x25e>
c0018a9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018a9e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018aa2:	83 e1 0f             	and    ecx,0xf
c0018aa5:	c1 ea 04             	shr    edx,0x4
c0018aa8:	c1 ef 04             	shr    edi,0x4
c0018aab:	6b d2 0a             	imul   edx,edx,0xa
c0018aae:	83 e6 0f             	and    esi,0xf
c0018ab1:	01 d1                	add    ecx,edx
c0018ab3:	c1 ed 04             	shr    ebp,0x4
c0018ab6:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018aba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018abe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ac2:	c1 ea 04             	shr    edx,0x4
c0018ac5:	83 e1 0f             	and    ecx,0xf
c0018ac8:	6b d2 0a             	imul   edx,edx,0xa
c0018acb:	6b ed 0a             	imul   ebp,ebp,0xa
c0018ace:	01 d1                	add    ecx,edx
c0018ad0:	89 fa                	mov    edx,edi
c0018ad2:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018ad6:	83 e2 07             	and    edx,0x7
c0018ad9:	89 d9                	mov    ecx,ebx
c0018adb:	6b d2 0a             	imul   edx,edx,0xa
c0018ade:	83 e1 0f             	and    ecx,0xf
c0018ae1:	83 e3 80             	and    ebx,0xffffff80
c0018ae4:	01 d1                	add    ecx,edx
c0018ae6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018aea:	09 cb                	or     ebx,ecx
c0018aec:	c1 ea 04             	shr    edx,0x4
c0018aef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018af3:	6b d2 0a             	imul   edx,edx,0xa
c0018af6:	83 e1 0f             	and    ecx,0xf
c0018af9:	01 d6                	add    esi,edx
c0018afb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018aff:	c1 ea 04             	shr    edx,0x4
c0018b02:	6b d2 0a             	imul   edx,edx,0xa
c0018b05:	01 d1                	add    ecx,edx
c0018b07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018b0b:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018b0f:	83 e2 0f             	and    edx,0xf
c0018b12:	01 d5                	add    ebp,edx
c0018b14:	a8 02                	test   al,0x2
c0018b16:	75 15                	jne    c0018b2d <RTC::completeRTCRefresh()+0x277>
c0018b18:	f6 c3 80             	test   bl,0x80
c0018b1b:	74 10                	je     c0018b2d <RTC::completeRTCRefresh()+0x277>
c0018b1d:	83 e3 7f             	and    ebx,0x7f
c0018b20:	b9 18 00 00 00       	mov    ecx,0x18
c0018b25:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018b28:	99                   	cdq    
c0018b29:	f7 f9                	idiv   ecx
c0018b2b:	88 d3                	mov    bl,dl
c0018b2d:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018b33:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018b39:	77 06                	ja     c0018b41 <RTC::completeRTCRefresh()+0x28b>
c0018b3b:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018b41:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b46:	31 c9                	xor    ecx,ecx
c0018b48:	c1 e0 10             	shl    eax,0x10
c0018b4b:	89 cd                	mov    ebp,ecx
c0018b4d:	c1 e7 10             	shl    edi,0x10
c0018b50:	31 d2                	xor    edx,edx
c0018b52:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018b58:	09 c5                	or     ebp,eax
c0018b5a:	89 f0                	mov    eax,esi
c0018b5c:	89 e9                	mov    ecx,ebp
c0018b5e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018b62:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018b66:	88 c2                	mov    dl,al
c0018b68:	88 d9                	mov    cl,bl
c0018b6a:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018b6e:	0f b7 c2             	movzx  eax,dx
c0018b71:	09 f8                	or     eax,edi
c0018b73:	89 c2                	mov    edx,eax
c0018b75:	50                   	push   eax
c0018b76:	50                   	push   eax
c0018b77:	51                   	push   ecx
c0018b78:	52                   	push   edx
c0018b79:	e8 6d 3a ff ff       	call   c000c5eb <datetimeToSeconds(datetime_t)>
c0018b7e:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018b82:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018b88:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018b8e:	83 c4 4c             	add    esp,0x4c
c0018b91:	5b                   	pop    ebx
c0018b92:	5e                   	pop    esi
c0018b93:	5f                   	pop    edi
c0018b94:	5d                   	pop    ebp
c0018b95:	c3                   	ret    

c0018b96 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018b96:	55                   	push   ebp
c0018b97:	57                   	push   edi
c0018b98:	56                   	push   esi
c0018b99:	53                   	push   ebx
c0018b9a:	83 ec 30             	sub    esp,0x30
c0018b9d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018ba1:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018ba5:	6a 00                	push   0x0
c0018ba7:	6a 00                	push   0x0
c0018ba9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018baf:	e8 0e e7 fe ff       	call   c00072c2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bb4:	83 c4 0c             	add    esp,0xc
c0018bb7:	6a 00                	push   0x0
c0018bb9:	6a 02                	push   0x2
c0018bbb:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bc1:	e8 fc e6 fe ff       	call   c00072c2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bc6:	31 d2                	xor    edx,edx
c0018bc8:	89 f9                	mov    ecx,edi
c0018bca:	89 f8                	mov    eax,edi
c0018bcc:	c1 e9 10             	shr    ecx,0x10
c0018bcf:	0f b6 c4             	movzx  eax,ah
c0018bd2:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018bd6:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018bda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018bde:	b9 64 00 00 00       	mov    ecx,0x64
c0018be3:	89 f0                	mov    eax,esi
c0018be5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018be9:	89 f0                	mov    eax,esi
c0018beb:	0f b6 c4             	movzx  eax,ah
c0018bee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018bf2:	89 f0                	mov    eax,esi
c0018bf4:	c1 e8 10             	shr    eax,0x10
c0018bf7:	f7 f1                	div    ecx
c0018bf9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018bfd:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018c01:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018c05:	59                   	pop    ecx
c0018c06:	5b                   	pop    ebx
c0018c07:	89 fb                	mov    ebx,edi
c0018c09:	6a 0b                	push   0xb
c0018c0b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c11:	e8 92 e5 fe ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c0018c16:	83 c4 10             	add    esp,0x10
c0018c19:	89 c5                	mov    ebp,eax
c0018c1b:	a8 04                	test   al,0x4
c0018c1d:	75 6e                	jne    c0018c8d <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018c1f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018c23:	31 d2                	xor    edx,edx
c0018c25:	0f b6 c1             	movzx  eax,cl
c0018c28:	b9 0a 00 00 00       	mov    ecx,0xa
c0018c2d:	f7 f1                	div    ecx
c0018c2f:	c1 e0 04             	shl    eax,0x4
c0018c32:	09 d0                	or     eax,edx
c0018c34:	31 d2                	xor    edx,edx
c0018c36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c3a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018c3f:	f7 f1                	div    ecx
c0018c41:	c1 e0 04             	shl    eax,0x4
c0018c44:	09 d0                	or     eax,edx
c0018c46:	31 d2                	xor    edx,edx
c0018c48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c4c:	0f b6 c3             	movzx  eax,bl
c0018c4f:	f7 f1                	div    ecx
c0018c51:	c1 e0 04             	shl    eax,0x4
c0018c54:	09 d0                	or     eax,edx
c0018c56:	31 d2                	xor    edx,edx
c0018c58:	89 c3                	mov    ebx,eax
c0018c5a:	89 f0                	mov    eax,esi
c0018c5c:	0f b6 c0             	movzx  eax,al
c0018c5f:	f7 f1                	div    ecx
c0018c61:	c1 e0 04             	shl    eax,0x4
c0018c64:	09 d0                	or     eax,edx
c0018c66:	31 d2                	xor    edx,edx
c0018c68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018c6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018c71:	f7 f1                	div    ecx
c0018c73:	c1 e0 04             	shl    eax,0x4
c0018c76:	09 d0                	or     eax,edx
c0018c78:	31 d2                	xor    edx,edx
c0018c7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018c7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c82:	f7 f1                	div    ecx
c0018c84:	c1 e0 04             	shl    eax,0x4
c0018c87:	09 d0                	or     eax,edx
c0018c89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018c8d:	83 e5 02             	and    ebp,0x2
c0018c90:	75 1e                	jne    c0018cb0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c92:	0f b6 c3             	movzx  eax,bl
c0018c95:	83 f8 0b             	cmp    eax,0xb
c0018c98:	76 10                	jbe    c0018caa <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018c9a:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018c9d:	88 d3                	mov    bl,dl
c0018c9f:	84 d2                	test   dl,dl
c0018ca1:	75 02                	jne    c0018ca5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018ca3:	b3 0c                	mov    bl,0xc
c0018ca5:	83 cb 80             	or     ebx,0xffffff80
c0018ca8:	eb 06                	jmp    c0018cb0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018caa:	85 c0                	test   eax,eax
c0018cac:	75 02                	jne    c0018cb0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018cae:	b3 0c                	mov    bl,0xc
c0018cb0:	0f b6 db             	movzx  ebx,bl
c0018cb3:	50                   	push   eax
c0018cb4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018cb9:	52                   	push   edx
c0018cba:	6a 00                	push   0x0
c0018cbc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018cc2:	e8 fb e5 fe ff       	call   c00072c2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018cc7:	83 c4 0c             	add    esp,0xc
c0018cca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ccf:	50                   	push   eax
c0018cd0:	6a 02                	push   0x2
c0018cd2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018cd8:	e8 e5 e5 fe ff       	call   c00072c2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018cdd:	83 c4 0c             	add    esp,0xc
c0018ce0:	53                   	push   ebx
c0018ce1:	6a 04                	push   0x4
c0018ce3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ce9:	e8 d4 e5 fe ff       	call   c00072c2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018cee:	83 c4 0c             	add    esp,0xc
c0018cf1:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018cf6:	52                   	push   edx
c0018cf7:	6a 07                	push   0x7
c0018cf9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018cff:	e8 be e5 fe ff       	call   c00072c2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018d04:	83 c4 0c             	add    esp,0xc
c0018d07:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018d0c:	50                   	push   eax
c0018d0d:	6a 08                	push   0x8
c0018d0f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018d15:	e8 a8 e5 fe ff       	call   c00072c2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018d1a:	83 c4 0c             	add    esp,0xc
c0018d1d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018d22:	55                   	push   ebp
c0018d23:	6a 09                	push   0x9
c0018d25:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018d2b:	e8 92 e5 fe ff       	call   c00072c2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018d30:	5a                   	pop    edx
c0018d31:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018d35:	e8 7c fb ff ff       	call   c00188b6 <RTC::completeRTCRefresh()>
c0018d3a:	83 c4 3c             	add    esp,0x3c
c0018d3d:	b0 01                	mov    al,0x1
c0018d3f:	5b                   	pop    ebx
c0018d40:	5e                   	pop    esi
c0018d41:	5f                   	pop    edi
c0018d42:	5d                   	pop    ebp
c0018d43:	c3                   	ret    

c0018d44 <rtcIRQHandler(regs*, void*)>:
c0018d44:	53                   	push   ebx
c0018d45:	83 ec 10             	sub    esp,0x10
c0018d48:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018d4c:	6a 0c                	push   0xc
c0018d4e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018d54:	e8 4f e4 fe ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c0018d59:	83 c4 10             	add    esp,0x10
c0018d5c:	a8 80                	test   al,0x80
c0018d5e:	74 24                	je     c0018d84 <rtcIRQHandler(regs*, void*)+0x40>
c0018d60:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018d67:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018d6e:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018d75:	75 0d                	jne    c0018d84 <rtcIRQHandler(regs*, void*)+0x40>
c0018d77:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018d7b:	83 c4 08             	add    esp,0x8
c0018d7e:	5b                   	pop    ebx
c0018d7f:	e9 32 fb ff ff       	jmp    c00188b6 <RTC::completeRTCRefresh()>
c0018d84:	83 c4 08             	add    esp,0x8
c0018d87:	5b                   	pop    ebx
c0018d88:	c3                   	ret    
c0018d89:	90                   	nop

c0018d8a <RTC::RTC()>:
c0018d8a:	83 ec 1c             	sub    esp,0x1c
c0018d8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d91:	83 ec 08             	sub    esp,0x8
c0018d94:	68 fb 2f 02 c0       	push   0xc0022ffb
c0018d99:	50                   	push   eax
c0018d9a:	e8 27 37 ff ff       	call   c000c4c6 <Clock::Clock(char const*)>
c0018d9f:	83 c4 10             	add    esp,0x10
c0018da2:	ba 18 30 02 c0       	mov    edx,0xc0023018
c0018da7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018dab:	89 10                	mov    DWORD PTR [eax],edx
c0018dad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018db1:	83 ec 0c             	sub    esp,0xc
c0018db4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018db8:	6a 01                	push   0x1
c0018dba:	68 44 8d 01 c0       	push   0xc0018d44
c0018dbf:	6a 08                	push   0x8
c0018dc1:	50                   	push   eax
c0018dc2:	e8 db 3b ff ff       	call   c000c9a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018dc7:	83 c4 20             	add    esp,0x20
c0018dca:	89 c2                	mov    edx,eax
c0018dcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018dd0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018dd6:	fa                   	cli    
c0018dd7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018ddc:	83 c0 01             	add    eax,0x1
c0018ddf:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018de4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018de9:	83 ec 08             	sub    esp,0x8
c0018dec:	6a 0b                	push   0xb
c0018dee:	50                   	push   eax
c0018def:	e8 b4 e3 fe ff       	call   c00071a8 <Computer::readCMOS(unsigned char)>
c0018df4:	83 c4 10             	add    esp,0x10
c0018df7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018dfb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018e00:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018e04:	83 ca 10             	or     edx,0x10
c0018e07:	0f b6 d2             	movzx  edx,dl
c0018e0a:	83 ec 04             	sub    esp,0x4
c0018e0d:	52                   	push   edx
c0018e0e:	6a 0b                	push   0xb
c0018e10:	50                   	push   eax
c0018e11:	e8 ac e4 fe ff       	call   c00072c2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018e16:	83 c4 10             	add    esp,0x10
c0018e19:	83 ec 0c             	sub    esp,0xc
c0018e1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e20:	e8 91 fa ff ff       	call   c00188b6 <RTC::completeRTCRefresh()>
c0018e25:	83 c4 10             	add    esp,0x10
c0018e28:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018e2d:	83 e8 01             	sub    eax,0x1
c0018e30:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018e35:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018e3a:	85 c0                	test   eax,eax
c0018e3c:	75 01                	jne    c0018e3f <RTC::RTC()+0xb5>
c0018e3e:	fb                   	sti    
c0018e3f:	90                   	nop
c0018e40:	83 c4 1c             	add    esp,0x1c
c0018e43:	c3                   	ret    

c0018e44 <HalConsoleScroll(int, int)>:
c0018e44:	83 ec 10             	sub    esp,0x10
c0018e47:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018e4f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018e57:	90                   	nop
c0018e58:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018e5d:	0f 8f e1 00 00 00    	jg     c0018f44 <HalConsoleScroll(int, int)+0x100>
c0018e63:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018e6b:	90                   	nop
c0018e6c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018e74:	0f 8f be 00 00 00    	jg     c0018f38 <HalConsoleScroll(int, int)+0xf4>
c0018e7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e7e:	89 d0                	mov    eax,edx
c0018e80:	c1 e0 02             	shl    eax,0x2
c0018e83:	01 d0                	add    eax,edx
c0018e85:	c1 e0 05             	shl    eax,0x5
c0018e88:	89 c2                	mov    edx,eax
c0018e8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e8e:	01 d0                	add    eax,edx
c0018e90:	89 c2                	mov    edx,eax
c0018e92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e96:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018e99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e9d:	89 d0                	mov    eax,edx
c0018e9f:	c1 e0 02             	shl    eax,0x2
c0018ea2:	01 d0                	add    eax,edx
c0018ea4:	c1 e0 05             	shl    eax,0x5
c0018ea7:	89 c2                	mov    edx,eax
c0018ea9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ead:	01 d0                	add    eax,edx
c0018eaf:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018eb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018eb9:	01 c2                	add    edx,eax
c0018ebb:	8a 01                	mov    al,BYTE PTR [ecx]
c0018ebd:	88 02                	mov    BYTE PTR [edx],al
c0018ebf:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018ec4:	75 66                	jne    c0018f2c <HalConsoleScroll(int, int)+0xe8>
c0018ec6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018eca:	83 e0 01             	and    eax,0x1
c0018ecd:	74 39                	je     c0018f08 <HalConsoleScroll(int, int)+0xc4>
c0018ecf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ed3:	83 e0 0f             	and    eax,0xf
c0018ed6:	88 c2                	mov    dl,al
c0018ed8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018edc:	c1 e0 04             	shl    eax,0x4
c0018edf:	09 d0                	or     eax,edx
c0018ee1:	88 c1                	mov    cl,al
c0018ee3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ee7:	89 d0                	mov    eax,edx
c0018ee9:	c1 e0 02             	shl    eax,0x2
c0018eec:	01 d0                	add    eax,edx
c0018eee:	c1 e0 05             	shl    eax,0x5
c0018ef1:	89 c2                	mov    edx,eax
c0018ef3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ef7:	01 d0                	add    eax,edx
c0018ef9:	89 c2                	mov    edx,eax
c0018efb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018eff:	01 d0                	add    eax,edx
c0018f01:	88 ca                	mov    dl,cl
c0018f03:	88 10                	mov    BYTE PTR [eax],dl
c0018f05:	eb 25                	jmp    c0018f2c <HalConsoleScroll(int, int)+0xe8>
c0018f07:	90                   	nop
c0018f08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f0c:	89 d0                	mov    eax,edx
c0018f0e:	c1 e0 02             	shl    eax,0x2
c0018f11:	01 d0                	add    eax,edx
c0018f13:	c1 e0 05             	shl    eax,0x5
c0018f16:	89 c2                	mov    edx,eax
c0018f18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f1c:	01 d0                	add    eax,edx
c0018f1e:	89 c2                	mov    edx,eax
c0018f20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f24:	01 d0                	add    eax,edx
c0018f26:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018f29:	8d 76 00             	lea    esi,[esi+0x0]
c0018f2c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018f31:	e9 36 ff ff ff       	jmp    c0018e6c <HalConsoleScroll(int, int)+0x28>
c0018f36:	66 90                	xchg   ax,ax
c0018f38:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018f3d:	e9 16 ff ff ff       	jmp    c0018e58 <HalConsoleScroll(int, int)+0x14>
c0018f42:	66 90                	xchg   ax,ax
c0018f44:	90                   	nop
c0018f45:	83 c4 10             	add    esp,0x10
c0018f48:	c3                   	ret    
c0018f49:	8d 76 00             	lea    esi,[esi+0x0]

c0018f4c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018f4c:	83 ec 14             	sub    esp,0x14
c0018f4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f53:	88 04 24             	mov    BYTE PTR [esp],al
c0018f56:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018f59:	0f b6 c0             	movzx  eax,al
c0018f5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f60:	89 d1                	mov    ecx,edx
c0018f62:	83 e1 0f             	and    ecx,0xf
c0018f65:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f69:	c1 e2 04             	shl    edx,0x4
c0018f6c:	0f b6 d2             	movzx  edx,dl
c0018f6f:	09 ca                	or     edx,ecx
c0018f71:	c1 e2 08             	shl    edx,0x8
c0018f74:	09 d0                	or     eax,edx
c0018f76:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018f7b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018f83:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f87:	89 d0                	mov    eax,edx
c0018f89:	c1 e0 02             	shl    eax,0x2
c0018f8c:	01 d0                	add    eax,edx
c0018f8e:	c1 e0 04             	shl    eax,0x4
c0018f91:	89 c2                	mov    edx,eax
c0018f93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f97:	01 d0                	add    eax,edx
c0018f99:	01 c0                	add    eax,eax
c0018f9b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018f9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018fa3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018fa8:	66 89 02             	mov    WORD PTR [edx],ax
c0018fab:	90                   	nop
c0018fac:	83 c4 14             	add    esp,0x14
c0018faf:	c3                   	ret    

c0018fb0 <HalConsoleCursorUpdate(int, int)>:
c0018fb0:	83 ec 20             	sub    esp,0x20
c0018fb3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fb7:	89 c2                	mov    edx,eax
c0018fb9:	c1 e2 02             	shl    edx,0x2
c0018fbc:	01 d0                	add    eax,edx
c0018fbe:	c1 e0 04             	shl    eax,0x4
c0018fc1:	89 c2                	mov    edx,eax
c0018fc3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018fc7:	01 d0                	add    eax,edx
c0018fc9:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018fce:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018fd5:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018fda:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018fde:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fe2:	ee                   	out    dx,al
c0018fe3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018fe8:	0f b6 c0             	movzx  eax,al
c0018feb:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018ff2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018ff6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018ffa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018ffe:	ee                   	out    dx,al
c0018fff:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0019006:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001900b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001900f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019013:	ee                   	out    dx,al
c0019014:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0019019:	c1 e8 08             	shr    eax,0x8
c001901c:	0f b6 c0             	movzx  eax,al
c001901f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0019026:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001902a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001902e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019032:	ee                   	out    dx,al
c0019033:	90                   	nop
c0019034:	83 c4 20             	add    esp,0x20
c0019037:	c3                   	ret    

c0019038 <FAT::getName()>:
c0019038:	b8 4c 30 02 c0       	mov    eax,0xc002304c
c001903d:	c3                   	ret    
c001903e:	66 90                	xchg   ax,ax

c0019040 <FAT::tell(void*, unsigned long long*)>:
c0019040:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019045:	75 09                	jne    c0019050 <FAT::tell(void*, unsigned long long*)+0x10>
c0019047:	b8 04 00 00 00       	mov    eax,0x4
c001904c:	c3                   	ret    
c001904d:	8d 76 00             	lea    esi,[esi+0x0]
c0019050:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019055:	75 09                	jne    c0019060 <FAT::tell(void*, unsigned long long*)+0x20>
c0019057:	b8 04 00 00 00       	mov    eax,0x4
c001905c:	c3                   	ret    
c001905d:	8d 76 00             	lea    esi,[esi+0x0]
c0019060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019064:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019067:	ba 00 00 00 00       	mov    edx,0x0
c001906c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019070:	89 01                	mov    DWORD PTR [ecx],eax
c0019072:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019075:	b8 00 00 00 00       	mov    eax,0x0
c001907a:	c3                   	ret    
c001907b:	90                   	nop

c001907c <FAT::stat(void*, unsigned long long*)>:
c001907c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019081:	75 09                	jne    c001908c <FAT::stat(void*, unsigned long long*)+0x10>
c0019083:	b8 04 00 00 00       	mov    eax,0x4
c0019088:	c3                   	ret    
c0019089:	8d 76 00             	lea    esi,[esi+0x0]
c001908c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019091:	75 09                	jne    c001909c <FAT::stat(void*, unsigned long long*)+0x20>
c0019093:	b8 04 00 00 00       	mov    eax,0x4
c0019098:	c3                   	ret    
c0019099:	8d 76 00             	lea    esi,[esi+0x0]
c001909c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00190a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00190a3:	ba 00 00 00 00       	mov    edx,0x0
c00190a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00190ac:	89 01                	mov    DWORD PTR [ecx],eax
c00190ae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00190b1:	b8 00 00 00 00       	mov    eax,0x0
c00190b6:	c3                   	ret    
c00190b7:	90                   	nop

c00190b8 <FAT::~FAT()>:
c00190b8:	83 ec 0c             	sub    esp,0xc
c00190bb:	ba 98 30 02 c0       	mov    edx,0xc0023098
c00190c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190c4:	89 10                	mov    DWORD PTR [eax],edx
c00190c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190ca:	83 ec 0c             	sub    esp,0xc
c00190cd:	50                   	push   eax
c00190ce:	e8 2b 27 ff ff       	call   c000b7fe <Filesystem::~Filesystem()>
c00190d3:	83 c4 10             	add    esp,0x10
c00190d6:	90                   	nop
c00190d7:	83 c4 0c             	add    esp,0xc
c00190da:	c3                   	ret    
c00190db:	90                   	nop

c00190dc <FAT::~FAT()>:
c00190dc:	83 ec 0c             	sub    esp,0xc
c00190df:	83 ec 0c             	sub    esp,0xc
c00190e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00190e6:	e8 cd ff ff ff       	call   c00190b8 <FAT::~FAT()>
c00190eb:	83 c4 10             	add    esp,0x10
c00190ee:	83 ec 08             	sub    esp,0x8
c00190f1:	6a 08                	push   0x8
c00190f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00190f7:	e8 4c 17 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c00190fc:	83 c4 10             	add    esp,0x10
c00190ff:	83 c4 0c             	add    esp,0xc
c0019102:	c3                   	ret    
c0019103:	90                   	nop

c0019104 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019104:	83 ec 1c             	sub    esp,0x1c
c0019107:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001910e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019113:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019117:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001911e:	83 f8 ff             	cmp    eax,0xffffffff
c0019121:	75 35                	jne    c0019158 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0019123:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019127:	88 c2                	mov    dl,al
c0019129:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001912e:	01 d0                	add    eax,edx
c0019130:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019134:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001913a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001913e:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019145:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001914a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001914e:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019155:	eb 19                	jmp    c0019170 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019157:	90                   	nop
c0019158:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001915c:	88 c2                	mov    dl,al
c001915e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019162:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019169:	01 d0                	add    eax,edx
c001916b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001916f:	90                   	nop
c0019170:	83 ec 04             	sub    esp,0x4
c0019173:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019177:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001917b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001917f:	50                   	push   eax
c0019180:	e8 4a be fe ff       	call   c0004fcf <f_getlabel>
c0019185:	83 c4 10             	add    esp,0x10
c0019188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001918c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019191:	75 09                	jne    c001919c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019193:	b8 00 00 00 00       	mov    eax,0x0
c0019198:	eb 0a                	jmp    c00191a4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001919a:	66 90                	xchg   ax,ax
c001919c:	b8 01 00 00 00       	mov    eax,0x1
c00191a1:	8d 76 00             	lea    esi,[esi+0x0]
c00191a4:	83 c4 1c             	add    esp,0x1c
c00191a7:	c3                   	ret    

c00191a8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00191a8:	57                   	push   edi
c00191a9:	83 ec 58             	sub    esp,0x58
c00191ac:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00191b4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00191b8:	b8 00 00 00 00       	mov    eax,0x0
c00191bd:	b9 0f 00 00 00       	mov    ecx,0xf
c00191c2:	fc                   	cld    
c00191c3:	89 d7                	mov    edi,edx
c00191c5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00191c7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00191cb:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00191d2:	83 f8 ff             	cmp    eax,0xffffffff
c00191d5:	75 35                	jne    c001920c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00191d7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00191db:	88 c2                	mov    dl,al
c00191dd:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00191e2:	01 d0                	add    eax,edx
c00191e4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00191e8:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00191ee:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00191f2:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00191f9:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00191fe:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019202:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019209:	eb 19                	jmp    c0019224 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001920b:	90                   	nop
c001920c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019210:	88 c2                	mov    dl,al
c0019212:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019216:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001921d:	01 d0                	add    eax,edx
c001921f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019223:	90                   	nop
c0019224:	83 ec 08             	sub    esp,0x8
c0019227:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001922b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001922f:	50                   	push   eax
c0019230:	e8 0b 76 fe ff       	call   c0000840 <strcat>
c0019235:	83 c4 10             	add    esp,0x10
c0019238:	83 ec 0c             	sub    esp,0xc
c001923b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001923f:	50                   	push   eax
c0019240:	e8 db be fe ff       	call   c0005120 <f_setlabel>
c0019245:	83 c4 10             	add    esp,0x10
c0019248:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001924c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019251:	75 09                	jne    c001925c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0019253:	b8 00 00 00 00       	mov    eax,0x0
c0019258:	eb 0a                	jmp    c0019264 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001925a:	66 90                	xchg   ax,ax
c001925c:	b8 01 00 00 00       	mov    eax,0x1
c0019261:	8d 76 00             	lea    esi,[esi+0x0]
c0019264:	83 c4 58             	add    esp,0x58
c0019267:	5f                   	pop    edi
c0019268:	c3                   	ret    
c0019269:	90                   	nop
c001926a:	66 90                	xchg   ax,ax

c001926c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001926c:	83 ec 2c             	sub    esp,0x2c
c001926f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019277:	83 ec 08             	sub    esp,0x8
c001927a:	68 70 30 02 c0       	push   0xc0023070
c001927f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019283:	e8 c8 74 fe ff       	call   c0000750 <strcmp>
c0019288:	83 c4 10             	add    esp,0x10
c001928b:	85 c0                	test   eax,eax
c001928d:	0f 94 c0             	sete   al
c0019290:	0f b6 c0             	movzx  eax,al
c0019293:	85 c0                	test   eax,eax
c0019295:	74 0d                	je     c00192a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019297:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001929f:	e9 c0 00 00 00       	jmp    c0019364 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00192a4:	83 ec 08             	sub    esp,0x8
c00192a7:	68 62 30 02 c0       	push   0xc0023062
c00192ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00192b0:	e8 9b 74 fe ff       	call   c0000750 <strcmp>
c00192b5:	83 c4 10             	add    esp,0x10
c00192b8:	85 c0                	test   eax,eax
c00192ba:	0f 94 c0             	sete   al
c00192bd:	0f b6 c0             	movzx  eax,al
c00192c0:	85 c0                	test   eax,eax
c00192c2:	74 10                	je     c00192d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00192c4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00192cc:	e9 93 00 00 00       	jmp    c0019364 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00192d1:	8d 76 00             	lea    esi,[esi+0x0]
c00192d4:	83 ec 08             	sub    esp,0x8
c00192d7:	68 68 30 02 c0       	push   0xc0023068
c00192dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00192e0:	e8 6b 74 fe ff       	call   c0000750 <strcmp>
c00192e5:	83 c4 10             	add    esp,0x10
c00192e8:	85 c0                	test   eax,eax
c00192ea:	0f 94 c0             	sete   al
c00192ed:	0f b6 c0             	movzx  eax,al
c00192f0:	85 c0                	test   eax,eax
c00192f2:	74 0c                	je     c0019300 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00192f4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00192fc:	eb 66                	jmp    c0019364 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00192fe:	66 90                	xchg   ax,ax
c0019300:	83 ec 08             	sub    esp,0x8
c0019303:	68 5c 06 02 c0       	push   0xc002065c
c0019308:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001930c:	e8 3f 74 fe ff       	call   c0000750 <strcmp>
c0019311:	83 c4 10             	add    esp,0x10
c0019314:	85 c0                	test   eax,eax
c0019316:	0f 94 c0             	sete   al
c0019319:	0f b6 c0             	movzx  eax,al
c001931c:	85 c0                	test   eax,eax
c001931e:	74 0c                	je     c001932c <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019320:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019328:	eb 3a                	jmp    c0019364 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001932a:	66 90                	xchg   ax,ax
c001932c:	83 ec 08             	sub    esp,0x8
c001932f:	68 6e 30 02 c0       	push   0xc002306e
c0019334:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019338:	e8 13 74 fe ff       	call   c0000750 <strcmp>
c001933d:	83 c4 10             	add    esp,0x10
c0019340:	85 c0                	test   eax,eax
c0019342:	0f 94 c0             	sete   al
c0019345:	0f b6 c0             	movzx  eax,al
c0019348:	85 c0                	test   eax,eax
c001934a:	74 0c                	je     c0019358 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001934c:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019354:	eb 0e                	jmp    c0019364 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019356:	66 90                	xchg   ax,ax
c0019358:	b8 08 00 00 00       	mov    eax,0x8
c001935d:	e9 ea 00 00 00       	jmp    c001944c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019362:	66 90                	xchg   ax,ax
c0019364:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001936b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019370:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019374:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001937b:	83 f8 ff             	cmp    eax,0xffffffff
c001937e:	75 34                	jne    c00193b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019380:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019384:	88 c2                	mov    dl,al
c0019386:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001938b:	01 d0                	add    eax,edx
c001938d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019391:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019397:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001939b:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00193a2:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00193a7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00193ab:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00193b2:	eb 18                	jmp    c00193cc <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00193b4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00193b8:	88 c2                	mov    dl,al
c00193ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193be:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00193c5:	01 d0                	add    eax,edx
c00193c7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00193cb:	90                   	nop
c00193cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00193d0:	88 04 24             	mov    BYTE PTR [esp],al
c00193d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00193d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00193e3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00193e8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00193f0:	83 ec 0c             	sub    esp,0xc
c00193f3:	68 00 20 00 00       	push   0x2000
c00193f8:	e8 e9 e6 fe ff       	call   c0007ae6 <malloc>
c00193fd:	83 c4 10             	add    esp,0x10
c0019400:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019404:	68 00 20 00 00       	push   0x2000
c0019409:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001940d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019411:	50                   	push   eax
c0019412:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019416:	50                   	push   eax
c0019417:	e8 01 c0 fe ff       	call   c000541d <f_mkfs>
c001941c:	83 c4 10             	add    esp,0x10
c001941f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019423:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019428:	75 0a                	jne    c0019434 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001942a:	b8 00 00 00 00       	mov    eax,0x0
c001942f:	eb 1b                	jmp    c001944c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019431:	8d 76 00             	lea    esi,[esi+0x0]
c0019434:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019439:	75 09                	jne    c0019444 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001943b:	b8 09 00 00 00       	mov    eax,0x9
c0019440:	eb 0a                	jmp    c001944c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019442:	66 90                	xchg   ax,ax
c0019444:	b8 01 00 00 00       	mov    eax,0x1
c0019449:	8d 76 00             	lea    esi,[esi+0x0]
c001944c:	83 c4 2c             	add    esp,0x2c
c001944f:	c3                   	ret    

c0019450 <FAT::tryMount(LogicalDisk*, int)>:
c0019450:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019456:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001945b:	83 f8 14             	cmp    eax,0x14
c001945e:	75 18                	jne    c0019478 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019460:	83 ec 0c             	sub    esp,0xc
c0019463:	68 74 30 02 c0       	push   0xc0023074
c0019468:	e8 a6 82 ff ff       	call   c0011713 <KePanic(char const*)>
c001946d:	83 c4 10             	add    esp,0x10
c0019470:	b0 00                	mov    al,0x0
c0019472:	e9 ed 01 00 00       	jmp    c0019664 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019477:	90                   	nop
c0019478:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001947f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019485:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001948b:	3d 00 02 00 00       	cmp    eax,0x200
c0019490:	74 0a                	je     c001949c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019492:	b0 00                	mov    al,0x0
c0019494:	e9 cb 01 00 00       	jmp    c0019664 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019499:	8d 76 00             	lea    esi,[esi+0x0]
c001949c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00194a4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00194ab:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00194b2:	83 f8 ff             	cmp    eax,0xffffffff
c00194b5:	74 09                	je     c00194c0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00194b7:	b0 01                	mov    al,0x1
c00194b9:	e9 a6 01 00 00       	jmp    c0019664 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00194be:	66 90                	xchg   ax,ax
c00194c0:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00194ca:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00194d2:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00194d9:	88 c2                	mov    dl,al
c00194db:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00194e0:	01 d0                	add    eax,edx
c00194e2:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00194e9:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00194ef:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00194f6:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00194fd:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019502:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019509:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019510:	83 ec 0c             	sub    esp,0xc
c0019513:	68 34 02 00 00       	push   0x234
c0019518:	e8 c9 e5 fe ff       	call   c0007ae6 <malloc>
c001951d:	83 c4 10             	add    esp,0x10
c0019520:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019527:	83 ec 04             	sub    esp,0x4
c001952a:	6a 00                	push   0x0
c001952c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019533:	50                   	push   eax
c0019534:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001953b:	e8 b8 a6 fe ff       	call   c0003bf8 <f_mount>
c0019540:	83 c4 10             	add    esp,0x10
c0019543:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001954a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019552:	74 1c                	je     c0019570 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019554:	83 ec 0c             	sub    esp,0xc
c0019557:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001955e:	e8 a3 e5 fe ff       	call   c0007b06 <rfree>
c0019563:	83 c4 10             	add    esp,0x10
c0019566:	b0 00                	mov    al,0x0
c0019568:	e9 f7 00 00 00       	jmp    c0019664 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001956d:	8d 76 00             	lea    esi,[esi+0x0]
c0019570:	83 ec 04             	sub    esp,0x4
c0019573:	68 00 01 00 00       	push   0x100
c0019578:	6a 00                	push   0x0
c001957a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019581:	50                   	push   eax
c0019582:	e8 69 6f fe ff       	call   c00004f0 <memset>
c0019587:	83 c4 10             	add    esp,0x10
c001958a:	83 ec 08             	sub    esp,0x8
c001958d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019594:	50                   	push   eax
c0019595:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001959c:	50                   	push   eax
c001959d:	e8 9e 72 fe ff       	call   c0000840 <strcat>
c00195a2:	83 c4 10             	add    esp,0x10
c00195a5:	83 ec 08             	sub    esp,0x8
c00195a8:	68 82 30 02 c0       	push   0xc0023082
c00195ad:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00195b4:	50                   	push   eax
c00195b5:	e8 86 72 fe ff       	call   c0000840 <strcat>
c00195ba:	83 c4 10             	add    esp,0x10
c00195bd:	83 ec 04             	sub    esp,0x4
c00195c0:	6a 01                	push   0x1
c00195c2:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00195c9:	50                   	push   eax
c00195ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00195ce:	50                   	push   eax
c00195cf:	e8 86 a6 fe ff       	call   c0003c5a <f_open>
c00195d4:	83 c4 10             	add    esp,0x10
c00195d7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00195de:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00195e5:	85 c0                	test   eax,eax
c00195e7:	74 0b                	je     c00195f4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00195e9:	78 31                	js     c001961c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00195eb:	83 e8 04             	sub    eax,0x4
c00195ee:	83 f8 01             	cmp    eax,0x1
c00195f1:	77 29                	ja     c001961c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00195f3:	90                   	nop
c00195f4:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00195fc:	83 ec 0c             	sub    esp,0xc
c00195ff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019603:	50                   	push   eax
c0019604:	e8 20 ae fe ff       	call   c0004429 <f_close>
c0019609:	83 c4 10             	add    esp,0x10
c001960c:	90                   	nop
c001960d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019615:	85 c0                	test   eax,eax
c0019617:	74 43                	je     c001965c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019619:	eb 31                	jmp    c001964c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001961b:	90                   	nop
c001961c:	83 ec 0c             	sub    esp,0xc
c001961f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019626:	e8 db e4 fe ff       	call   c0007b06 <rfree>
c001962b:	83 c4 10             	add    esp,0x10
c001962e:	83 ec 04             	sub    esp,0x4
c0019631:	6a 00                	push   0x0
c0019633:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001963a:	50                   	push   eax
c001963b:	6a 00                	push   0x0
c001963d:	e8 b6 a5 fe ff       	call   c0003bf8 <f_mount>
c0019642:	83 c4 10             	add    esp,0x10
c0019645:	b0 00                	mov    al,0x0
c0019647:	eb 1b                	jmp    c0019664 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019649:	8d 76 00             	lea    esi,[esi+0x0]
c001964c:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019651:	83 c0 01             	add    eax,0x1
c0019654:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c0019659:	8d 76 00             	lea    esi,[esi+0x0]
c001965c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019663:	90                   	nop
c0019664:	81 c4 4c 03 00 00    	add    esp,0x34c
c001966a:	c3                   	ret    
c001966b:	90                   	nop

c001966c <FAT::allocateSwapfile(char const*, int)>:
c001966c:	55                   	push   ebp
c001966d:	57                   	push   edi
c001966e:	56                   	push   esi
c001966f:	53                   	push   ebx
c0019670:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019676:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019681:	83 ec 0c             	sub    esp,0xc
c0019684:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001968b:	e8 56 e4 fe ff       	call   c0007ae6 <malloc>
c0019690:	83 c4 10             	add    esp,0x10
c0019693:	89 c7                	mov    edi,eax
c0019695:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001969a:	83 ec 04             	sub    esp,0x4
c001969d:	50                   	push   eax
c001969e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00196a5:	57                   	push   edi
c00196a6:	e8 d1 24 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c00196ab:	83 c4 10             	add    esp,0x10
c00196ae:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00196b5:	83 ec 04             	sub    esp,0x4
c00196b8:	8d 44 24 13          	lea    eax,[esp+0x13]
c00196bc:	50                   	push   eax
c00196bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196c1:	50                   	push   eax
c00196c2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196c9:	e8 ce 27 ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c00196ce:	83 c4 10             	add    esp,0x10
c00196d1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00196d8:	c1 e0 14             	shl    eax,0x14
c00196db:	89 c7                	mov    edi,eax
c00196dd:	89 c5                	mov    ebp,eax
c00196df:	c1 fd 1f             	sar    ebp,0x1f
c00196e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00196ea:	89 f9                	mov    ecx,edi
c00196ec:	31 c1                	xor    ecx,eax
c00196ee:	89 cb                	mov    ebx,ecx
c00196f0:	89 e9                	mov    ecx,ebp
c00196f2:	31 d1                	xor    ecx,edx
c00196f4:	89 ce                	mov    esi,ecx
c00196f6:	89 f0                	mov    eax,esi
c00196f8:	09 d8                	or     eax,ebx
c00196fa:	0f 84 9c 00 00 00    	je     c001979c <FAT::allocateSwapfile(char const*, int)+0x130>
c0019700:	83 ec 0c             	sub    esp,0xc
c0019703:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001970a:	e8 59 26 ff ff       	call   c000bd68 <File::unlink()>
c001970f:	83 c4 10             	add    esp,0x10
c0019712:	83 ec 08             	sub    esp,0x8
c0019715:	6a 12                	push   0x12
c0019717:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001971e:	e8 77 24 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c0019723:	83 c4 10             	add    esp,0x10
c0019726:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001972d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019733:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001973a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019741:	c1 e0 14             	shl    eax,0x14
c0019744:	83 ec 04             	sub    esp,0x4
c0019747:	6a 01                	push   0x1
c0019749:	50                   	push   eax
c001974a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019751:	e8 5a bb fe ff       	call   c00052b0 <f_expand>
c0019756:	83 c4 10             	add    esp,0x10
c0019759:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019760:	8b 00                	mov    eax,DWORD PTR [eax]
c0019762:	83 c0 10             	add    eax,0x10
c0019765:	8b 00                	mov    eax,DWORD PTR [eax]
c0019767:	83 ec 0c             	sub    esp,0xc
c001976a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001976e:	52                   	push   edx
c001976f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019773:	52                   	push   edx
c0019774:	6a 00                	push   0x0
c0019776:	68 00 04 00 00       	push   0x400
c001977b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019782:	ff d0                	call   eax
c0019784:	83 c4 20             	add    esp,0x20
c0019787:	83 ec 0c             	sub    esp,0xc
c001978a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019791:	e8 62 24 ff ff       	call   c000bbf8 <File::close()>
c0019796:	83 c4 10             	add    esp,0x10
c0019799:	8d 76 00             	lea    esi,[esi+0x0]
c001979c:	83 ec 08             	sub    esp,0x8
c001979f:	6a 01                	push   0x1
c00197a1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00197a8:	e8 ed 23 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c00197ad:	83 c4 10             	add    esp,0x10
c00197b0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00197b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00197b9:	83 c0 0c             	add    eax,0xc
c00197bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00197be:	83 ec 0c             	sub    esp,0xc
c00197c1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00197c5:	52                   	push   edx
c00197c6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00197ca:	52                   	push   edx
c00197cb:	6a 00                	push   0x0
c00197cd:	6a 04                	push   0x4
c00197cf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00197d6:	ff d0                	call   eax
c00197d8:	83 c4 20             	add    esp,0x20
c00197db:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00197e2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00197e8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00197ef:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00197f6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00197f9:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019800:	83 ec 0c             	sub    esp,0xc
c0019803:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001980a:	e8 e9 23 ff ff       	call   c000bbf8 <File::close()>
c001980f:	83 c4 10             	add    esp,0x10
c0019812:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019819:	ba 00 00 00 00       	mov    edx,0x0
c001981e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019824:	5b                   	pop    ebx
c0019825:	5e                   	pop    esi
c0019826:	5f                   	pop    edi
c0019827:	5d                   	pop    ebp
c0019828:	c3                   	ret    
c0019829:	90                   	nop
c001982a:	66 90                	xchg   ax,ax

c001982c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001982c:	57                   	push   edi
c001982d:	56                   	push   esi
c001982e:	53                   	push   ebx
c001982f:	81 ec 50 02 00 00    	sub    esp,0x250
c0019835:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001983d:	74 0d                	je     c001984c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001983f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019847:	75 0f                	jne    c0019858 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019849:	8d 76 00             	lea    esi,[esi+0x0]
c001984c:	b8 04 00 00 00       	mov    eax,0x4
c0019851:	e9 3a 01 00 00       	jmp    c0019990 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019856:	66 90                	xchg   ax,ax
c0019858:	83 ec 08             	sub    esp,0x8
c001985b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019862:	50                   	push   eax
c0019863:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001986a:	e8 87 ae fe ff       	call   c00046f6 <f_readdir>
c001986f:	83 c4 10             	add    esp,0x10
c0019872:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019879:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019880:	83 ec 0c             	sub    esp,0xc
c0019883:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001988a:	83 c0 16             	add    eax,0x16
c001988d:	50                   	push   eax
c001988e:	e8 dd 6c fe ff       	call   c0000570 <strlen>
c0019893:	83 c4 10             	add    esp,0x10
c0019896:	ba 00 00 00 00       	mov    edx,0x0
c001989b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001989f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00198a3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00198aa:	0f b6 c0             	movzx  eax,al
c00198ad:	83 e0 10             	and    eax,0x10
c00198b0:	74 0a                	je     c00198bc <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00198b2:	b8 02 00 00 00       	mov    eax,0x2
c00198b7:	eb 0b                	jmp    c00198c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00198b9:	8d 76 00             	lea    esi,[esi+0x0]
c00198bc:	b8 01 00 00 00       	mov    eax,0x1
c00198c1:	8d 76 00             	lea    esi,[esi+0x0]
c00198c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00198c8:	83 ec 08             	sub    esp,0x8
c00198cb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00198d2:	83 c0 16             	add    eax,0x16
c00198d5:	50                   	push   eax
c00198d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00198da:	83 c0 10             	add    eax,0x10
c00198dd:	50                   	push   eax
c00198de:	e8 5d 6d fe ff       	call   c0000640 <strcpy>
c00198e3:	83 c4 10             	add    esp,0x10
c00198e6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00198ed:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00198f4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198f8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00198ff:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019906:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001990d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019914:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001991b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019922:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019929:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019930:	89 c6                	mov    esi,eax
c0019932:	89 d7                	mov    edi,edx
c0019934:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019936:	89 c8                	mov    eax,ecx
c0019938:	89 fa                	mov    edx,edi
c001993a:	89 f3                	mov    ebx,esi
c001993c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019943:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001994a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019951:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019958:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001995e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019965:	0f be c0             	movsx  eax,al
c0019968:	85 c0                	test   eax,eax
c001996a:	75 08                	jne    c0019974 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001996c:	b8 07 00 00 00       	mov    eax,0x7
c0019971:	eb 1d                	jmp    c0019990 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019973:	90                   	nop
c0019974:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001997b:	85 c0                	test   eax,eax
c001997d:	75 09                	jne    c0019988 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001997f:	b8 00 00 00 00       	mov    eax,0x0
c0019984:	eb 0a                	jmp    c0019990 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019986:	66 90                	xchg   ax,ax
c0019988:	b8 01 00 00 00       	mov    eax,0x1
c001998d:	8d 76 00             	lea    esi,[esi+0x0]
c0019990:	81 c4 50 02 00 00    	add    esp,0x250
c0019996:	5b                   	pop    ebx
c0019997:	5e                   	pop    esi
c0019998:	5f                   	pop    edi
c0019999:	c3                   	ret    
c001999a:	66 90                	xchg   ax,ax

c001999c <FAT::read(void*, unsigned long, void*, int*)>:
c001999c:	83 ec 1c             	sub    esp,0x1c
c001999f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199a4:	74 0a                	je     c00199b0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00199a6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00199ab:	75 0b                	jne    c00199b8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00199ad:	8d 76 00             	lea    esi,[esi+0x0]
c00199b0:	b8 04 00 00 00       	mov    eax,0x4
c00199b5:	eb 41                	jmp    c00199f8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00199b7:	90                   	nop
c00199b8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199bc:	50                   	push   eax
c00199bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00199c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199c9:	e8 4f a5 fe ff       	call   c0003f1d <f_read>
c00199ce:	83 c4 10             	add    esp,0x10
c00199d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199d9:	89 c2                	mov    edx,eax
c00199db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199df:	89 10                	mov    DWORD PTR [eax],edx
c00199e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199e5:	85 c0                	test   eax,eax
c00199e7:	75 07                	jne    c00199f0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00199e9:	b8 00 00 00 00       	mov    eax,0x0
c00199ee:	eb 08                	jmp    c00199f8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00199f0:	b8 01 00 00 00       	mov    eax,0x1
c00199f5:	8d 76 00             	lea    esi,[esi+0x0]
c00199f8:	83 c4 1c             	add    esp,0x1c
c00199fb:	c3                   	ret    

c00199fc <FAT::write(void*, unsigned long, void*, int*)>:
c00199fc:	83 ec 1c             	sub    esp,0x1c
c00199ff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a04:	74 0a                	je     c0019a10 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019a06:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019a0b:	75 0b                	jne    c0019a18 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a10:	b8 04 00 00 00       	mov    eax,0x4
c0019a15:	eb 41                	jmp    c0019a58 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019a17:	90                   	nop
c0019a18:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a1c:	50                   	push   eax
c0019a1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019a25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a29:	e8 ee a6 fe ff       	call   c000411c <f_write>
c0019a2e:	83 c4 10             	add    esp,0x10
c0019a31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a39:	89 c2                	mov    edx,eax
c0019a3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019a3f:	89 10                	mov    DWORD PTR [eax],edx
c0019a41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a45:	85 c0                	test   eax,eax
c0019a47:	75 07                	jne    c0019a50 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019a49:	b8 00 00 00 00       	mov    eax,0x0
c0019a4e:	eb 08                	jmp    c0019a58 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019a50:	b8 01 00 00 00       	mov    eax,0x1
c0019a55:	8d 76 00             	lea    esi,[esi+0x0]
c0019a58:	83 c4 1c             	add    esp,0x1c
c0019a5b:	c3                   	ret    

c0019a5c <FAT::close(void*)>:
c0019a5c:	83 ec 1c             	sub    esp,0x1c
c0019a5f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a64:	75 0a                	jne    c0019a70 <FAT::close(void*)+0x14>
c0019a66:	b8 04 00 00 00       	mov    eax,0x4
c0019a6b:	eb 3f                	jmp    c0019aac <FAT::close(void*)+0x50>
c0019a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a70:	83 ec 0c             	sub    esp,0xc
c0019a73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a77:	e8 ad a9 fe ff       	call   c0004429 <f_close>
c0019a7c:	83 c4 10             	add    esp,0x10
c0019a7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a83:	83 ec 0c             	sub    esp,0xc
c0019a86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a8a:	e8 67 e0 fe ff       	call   c0007af6 <free>
c0019a8f:	83 c4 10             	add    esp,0x10
c0019a92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a96:	85 c0                	test   eax,eax
c0019a98:	75 0a                	jne    c0019aa4 <FAT::close(void*)+0x48>
c0019a9a:	b8 00 00 00 00       	mov    eax,0x0
c0019a9f:	eb 0b                	jmp    c0019aac <FAT::close(void*)+0x50>
c0019aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0019aa4:	b8 01 00 00 00       	mov    eax,0x1
c0019aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0019aac:	83 c4 1c             	add    esp,0x1c
c0019aaf:	c3                   	ret    

c0019ab0 <FAT::closeDir(void*)>:
c0019ab0:	83 ec 1c             	sub    esp,0x1c
c0019ab3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019ab8:	75 0a                	jne    c0019ac4 <FAT::closeDir(void*)+0x14>
c0019aba:	b8 04 00 00 00       	mov    eax,0x4
c0019abf:	eb 3f                	jmp    c0019b00 <FAT::closeDir(void*)+0x50>
c0019ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ac4:	83 ec 0c             	sub    esp,0xc
c0019ac7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019acb:	e8 04 ac fe ff       	call   c00046d4 <f_closedir>
c0019ad0:	83 c4 10             	add    esp,0x10
c0019ad3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ad7:	83 ec 0c             	sub    esp,0xc
c0019ada:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ade:	e8 13 e0 fe ff       	call   c0007af6 <free>
c0019ae3:	83 c4 10             	add    esp,0x10
c0019ae6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019aea:	85 c0                	test   eax,eax
c0019aec:	75 0a                	jne    c0019af8 <FAT::closeDir(void*)+0x48>
c0019aee:	b8 00 00 00 00       	mov    eax,0x0
c0019af3:	eb 0b                	jmp    c0019b00 <FAT::closeDir(void*)+0x50>
c0019af5:	8d 76 00             	lea    esi,[esi+0x0]
c0019af8:	b8 01 00 00 00       	mov    eax,0x1
c0019afd:	8d 76 00             	lea    esi,[esi+0x0]
c0019b00:	83 c4 1c             	add    esp,0x1c
c0019b03:	c3                   	ret    

c0019b04 <FAT::truncate(void*, unsigned long long)>:
c0019b04:	83 ec 2c             	sub    esp,0x2c
c0019b07:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019b0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019b13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b17:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019b1c:	75 0a                	jne    c0019b28 <FAT::truncate(void*, unsigned long long)+0x24>
c0019b1e:	b8 04 00 00 00       	mov    eax,0x4
c0019b23:	eb 47                	jmp    c0019b6c <FAT::truncate(void*, unsigned long long)+0x68>
c0019b25:	8d 76 00             	lea    esi,[esi+0x0]
c0019b28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019b2c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019b2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019b33:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019b3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b3f:	83 ec 08             	sub    esp,0x8
c0019b42:	50                   	push   eax
c0019b43:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019b47:	e8 0c a9 fe ff       	call   c0004458 <f_lseek>
c0019b4c:	83 c4 10             	add    esp,0x10
c0019b4f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019b53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b57:	85 c0                	test   eax,eax
c0019b59:	75 09                	jne    c0019b64 <FAT::truncate(void*, unsigned long long)+0x60>
c0019b5b:	b8 00 00 00 00       	mov    eax,0x0
c0019b60:	eb 0a                	jmp    c0019b6c <FAT::truncate(void*, unsigned long long)+0x68>
c0019b62:	66 90                	xchg   ax,ax
c0019b64:	b8 01 00 00 00       	mov    eax,0x1
c0019b69:	8d 76 00             	lea    esi,[esi+0x0]
c0019b6c:	83 c4 2c             	add    esp,0x2c
c0019b6f:	c3                   	ret    

c0019b70 <FAT::seek(void*, unsigned long long)>:
c0019b70:	83 ec 2c             	sub    esp,0x2c
c0019b73:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019b7b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019b7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b83:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019b88:	75 0a                	jne    c0019b94 <FAT::seek(void*, unsigned long long)+0x24>
c0019b8a:	b8 04 00 00 00       	mov    eax,0x4
c0019b8f:	eb 33                	jmp    c0019bc4 <FAT::seek(void*, unsigned long long)+0x54>
c0019b91:	8d 76 00             	lea    esi,[esi+0x0]
c0019b94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b98:	83 ec 08             	sub    esp,0x8
c0019b9b:	50                   	push   eax
c0019b9c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019ba0:	e8 b3 a8 fe ff       	call   c0004458 <f_lseek>
c0019ba5:	83 c4 10             	add    esp,0x10
c0019ba8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019bac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bb0:	85 c0                	test   eax,eax
c0019bb2:	75 08                	jne    c0019bbc <FAT::seek(void*, unsigned long long)+0x4c>
c0019bb4:	b8 00 00 00 00       	mov    eax,0x0
c0019bb9:	eb 09                	jmp    c0019bc4 <FAT::seek(void*, unsigned long long)+0x54>
c0019bbb:	90                   	nop
c0019bbc:	b8 01 00 00 00       	mov    eax,0x1
c0019bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0019bc4:	83 c4 2c             	add    esp,0x2c
c0019bc7:	c3                   	ret    

c0019bc8 <fatWrapperReadDisk>:
c0019bc8:	53                   	push   ebx
c0019bc9:	83 ec 18             	sub    esp,0x18
c0019bcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bd0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019bd4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bd9:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019be0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019be4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019be8:	ba 00 00 00 00       	mov    edx,0x0
c0019bed:	83 ec 0c             	sub    esp,0xc
c0019bf0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019bf4:	53                   	push   ebx
c0019bf5:	52                   	push   edx
c0019bf6:	50                   	push   eax
c0019bf7:	51                   	push   ecx
c0019bf8:	e8 17 42 ff ff       	call   c000de14 <LogicalDisk::read(unsigned long long, int, void*)>
c0019bfd:	83 c4 20             	add    esp,0x20
c0019c00:	83 c4 18             	add    esp,0x18
c0019c03:	5b                   	pop    ebx
c0019c04:	c3                   	ret    
c0019c05:	8d 76 00             	lea    esi,[esi+0x0]

c0019c08 <fatWrapperWriteDisk>:
c0019c08:	53                   	push   ebx
c0019c09:	83 ec 18             	sub    esp,0x18
c0019c0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c10:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019c14:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c19:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019c20:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019c24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019c28:	ba 00 00 00 00       	mov    edx,0x0
c0019c2d:	83 ec 0c             	sub    esp,0xc
c0019c30:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019c34:	53                   	push   ebx
c0019c35:	52                   	push   edx
c0019c36:	50                   	push   eax
c0019c37:	51                   	push   ecx
c0019c38:	e8 43 42 ff ff       	call   c000de80 <LogicalDisk::write(unsigned long long, int, void*)>
c0019c3d:	83 c4 20             	add    esp,0x20
c0019c40:	83 c4 18             	add    esp,0x18
c0019c43:	5b                   	pop    ebx
c0019c44:	c3                   	ret    
c0019c45:	8d 76 00             	lea    esi,[esi+0x0]

c0019c48 <fatWrapperIoctl>:
c0019c48:	53                   	push   ebx
c0019c49:	83 ec 28             	sub    esp,0x28
c0019c4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019c50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019c54:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019c58:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019c5c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c61:	83 f8 02             	cmp    eax,0x2
c0019c64:	75 32                	jne    c0019c98 <fatWrapperIoctl+0x50>
c0019c66:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019c6e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c73:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019c7a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c80:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019c86:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c8a:	66 89 02             	mov    WORD PTR [edx],ax
c0019c8d:	b8 00 00 00 00       	mov    eax,0x0
c0019c92:	e9 c5 00 00 00       	jmp    c0019d5c <fatWrapperIoctl+0x114>
c0019c97:	90                   	nop
c0019c98:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c9d:	83 f8 01             	cmp    eax,0x1
c0019ca0:	75 6a                	jne    c0019d0c <fatWrapperIoctl+0xc4>
c0019ca2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ca6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019caa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019caf:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019cb6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019cbc:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019cc2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019cc8:	89 c8                	mov    eax,ecx
c0019cca:	89 da                	mov    edx,ebx
c0019ccc:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019cd0:	c1 e0 0a             	shl    eax,0xa
c0019cd3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019cd8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019cdf:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019ce5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019ceb:	89 cb                	mov    ebx,ecx
c0019ced:	c1 fb 1f             	sar    ebx,0x1f
c0019cf0:	53                   	push   ebx
c0019cf1:	51                   	push   ecx
c0019cf2:	52                   	push   edx
c0019cf3:	50                   	push   eax
c0019cf4:	e8 77 5b 00 00       	call   c001f870 <__udivdi3>
c0019cf9:	83 c4 10             	add    esp,0x10
c0019cfc:	89 c2                	mov    edx,eax
c0019cfe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019d02:	89 10                	mov    DWORD PTR [eax],edx
c0019d04:	b8 00 00 00 00       	mov    eax,0x0
c0019d09:	eb 51                	jmp    c0019d5c <fatWrapperIoctl+0x114>
c0019d0b:	90                   	nop
c0019d0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d11:	85 c0                	test   eax,eax
c0019d13:	75 07                	jne    c0019d1c <fatWrapperIoctl+0xd4>
c0019d15:	b8 00 00 00 00       	mov    eax,0x0
c0019d1a:	eb 40                	jmp    c0019d5c <fatWrapperIoctl+0x114>
c0019d1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d21:	83 f8 03             	cmp    eax,0x3
c0019d24:	75 1a                	jne    c0019d40 <fatWrapperIoctl+0xf8>
c0019d26:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019d2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019d32:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019d38:	b8 00 00 00 00       	mov    eax,0x0
c0019d3d:	eb 1d                	jmp    c0019d5c <fatWrapperIoctl+0x114>
c0019d3f:	90                   	nop
c0019d40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019d45:	83 f8 04             	cmp    eax,0x4
c0019d48:	75 0a                	jne    c0019d54 <fatWrapperIoctl+0x10c>
c0019d4a:	b8 00 00 00 00       	mov    eax,0x0
c0019d4f:	eb 0b                	jmp    c0019d5c <fatWrapperIoctl+0x114>
c0019d51:	8d 76 00             	lea    esi,[esi+0x0]
c0019d54:	b8 04 00 00 00       	mov    eax,0x4
c0019d59:	8d 76 00             	lea    esi,[esi+0x0]
c0019d5c:	83 c4 28             	add    esp,0x28
c0019d5f:	5b                   	pop    ebx
c0019d60:	c3                   	ret    
c0019d61:	90                   	nop
c0019d62:	66 90                	xchg   ax,ax

c0019d64 <FAT::FAT()>:
c0019d64:	83 ec 1c             	sub    esp,0x1c
c0019d67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d6b:	83 ec 0c             	sub    esp,0xc
c0019d6e:	50                   	push   eax
c0019d6f:	e8 66 1a ff ff       	call   c000b7da <Filesystem::Filesystem()>
c0019d74:	83 c4 10             	add    esp,0x10
c0019d77:	ba 98 30 02 c0       	mov    edx,0xc0023098
c0019d7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d80:	89 10                	mov    DWORD PTR [eax],edx
c0019d82:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019d8c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019d94:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019d99:	7f 19                	jg     c0019db4 <FAT::FAT()+0x50>
c0019d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d9f:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019daa:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019daf:	eb e3                	jmp    c0019d94 <FAT::FAT()+0x30>
c0019db1:	8d 76 00             	lea    esi,[esi+0x0]
c0019db4:	90                   	nop
c0019db5:	83 c4 1c             	add    esp,0x1c
c0019db8:	c3                   	ret    
c0019db9:	90                   	nop
c0019dba:	66 90                	xchg   ax,ax

c0019dbc <FAT::fixFilepath(char*)>:
c0019dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019dc0:	8a 00                	mov    al,BYTE PTR [eax]
c0019dc2:	0f be c0             	movsx  eax,al
c0019dc5:	83 f8 40             	cmp    eax,0x40
c0019dc8:	7e 2e                	jle    c0019df8 <FAT::fixFilepath(char*)+0x3c>
c0019dca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019dce:	8a 00                	mov    al,BYTE PTR [eax]
c0019dd0:	83 e8 41             	sub    eax,0x41
c0019dd3:	88 c2                	mov    dl,al
c0019dd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019dd9:	88 10                	mov    BYTE PTR [eax],dl
c0019ddb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ddf:	8a 00                	mov    al,BYTE PTR [eax]
c0019de1:	0f be c0             	movsx  eax,al
c0019de4:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019deb:	83 c0 30             	add    eax,0x30
c0019dee:	88 c2                	mov    dl,al
c0019df0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019df4:	88 10                	mov    BYTE PTR [eax],dl
c0019df6:	66 90                	xchg   ax,ax
c0019df8:	90                   	nop
c0019df9:	c3                   	ret    
c0019dfa:	66 90                	xchg   ax,ax

c0019dfc <FAT::open(char const*, void**, FileOpenMode)>:
c0019dfc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e02:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e0a:	74 0c                	je     c0019e18 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019e0c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019e14:	75 0e                	jne    c0019e24 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019e16:	66 90                	xchg   ax,ax
c0019e18:	b8 04 00 00 00       	mov    eax,0x4
c0019e1d:	e9 46 01 00 00       	jmp    c0019f68 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019e22:	66 90                	xchg   ax,ax
c0019e24:	83 ec 08             	sub    esp,0x8
c0019e27:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e2e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e32:	50                   	push   eax
c0019e33:	e8 08 68 fe ff       	call   c0000640 <strcpy>
c0019e38:	83 c4 10             	add    esp,0x10
c0019e3b:	83 ec 08             	sub    esp,0x8
c0019e3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019e42:	50                   	push   eax
c0019e43:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e4a:	e8 6d ff ff ff       	call   c0019dbc <FAT::fixFilepath(char*)>
c0019e4f:	83 c4 10             	add    esp,0x10
c0019e52:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019e5a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e61:	83 e0 01             	and    eax,0x1
c0019e64:	74 12                	je     c0019e78 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019e66:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e6d:	83 c8 01             	or     eax,0x1
c0019e70:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e77:	90                   	nop
c0019e78:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e7f:	83 e0 04             	and    eax,0x4
c0019e82:	74 24                	je     c0019ea8 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019e84:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e8b:	83 c8 30             	or     eax,0x30
c0019e8e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e95:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e9c:	83 c8 02             	or     eax,0x2
c0019e9f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019ea6:	66 90                	xchg   ax,ax
c0019ea8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019eaf:	83 e0 02             	and    eax,0x2
c0019eb2:	74 14                	je     c0019ec8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019eb4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019ebb:	83 c8 02             	or     eax,0x2
c0019ebe:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ec8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ecf:	83 e0 08             	and    eax,0x8
c0019ed2:	74 14                	je     c0019ee8 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019ed4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019edb:	83 c8 04             	or     eax,0x4
c0019ede:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ee8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019eef:	83 e0 10             	and    eax,0x10
c0019ef2:	74 14                	je     c0019f08 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019ef4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019efb:	83 c8 08             	or     eax,0x8
c0019efe:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019f05:	8d 76 00             	lea    esi,[esi+0x0]
c0019f08:	83 ec 0c             	sub    esp,0xc
c0019f0b:	68 28 02 00 00       	push   0x228
c0019f10:	e8 d1 db fe ff       	call   c0007ae6 <malloc>
c0019f15:	83 c4 10             	add    esp,0x10
c0019f18:	89 c2                	mov    edx,eax
c0019f1a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f21:	89 10                	mov    DWORD PTR [eax],edx
c0019f23:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019f2b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f32:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f34:	83 ec 04             	sub    esp,0x4
c0019f37:	52                   	push   edx
c0019f38:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019f3c:	52                   	push   edx
c0019f3d:	50                   	push   eax
c0019f3e:	e8 17 9d fe ff       	call   c0003c5a <f_open>
c0019f43:	83 c4 10             	add    esp,0x10
c0019f46:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019f4d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019f55:	74 09                	je     c0019f60 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019f57:	b8 01 00 00 00       	mov    eax,0x1
c0019f5c:	eb 0a                	jmp    c0019f68 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019f5e:	66 90                	xchg   ax,ax
c0019f60:	b8 00 00 00 00       	mov    eax,0x0
c0019f65:	8d 76 00             	lea    esi,[esi+0x0]
c0019f68:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f6e:	c3                   	ret    
c0019f6f:	90                   	nop

c0019f70 <FAT::openDir(char const*, void**)>:
c0019f70:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019f76:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019f7e:	74 0c                	je     c0019f8c <FAT::openDir(char const*, void**)+0x1c>
c0019f80:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019f88:	75 0e                	jne    c0019f98 <FAT::openDir(char const*, void**)+0x28>
c0019f8a:	66 90                	xchg   ax,ax
c0019f8c:	b8 04 00 00 00       	mov    eax,0x4
c0019f91:	e9 82 00 00 00       	jmp    c001a018 <FAT::openDir(char const*, void**)+0xa8>
c0019f96:	66 90                	xchg   ax,ax
c0019f98:	83 ec 08             	sub    esp,0x8
c0019f9b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019fa2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fa6:	50                   	push   eax
c0019fa7:	e8 94 66 fe ff       	call   c0000640 <strcpy>
c0019fac:	83 c4 10             	add    esp,0x10
c0019faf:	83 ec 08             	sub    esp,0x8
c0019fb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019fb6:	50                   	push   eax
c0019fb7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019fbe:	e8 f9 fd ff ff       	call   c0019dbc <FAT::fixFilepath(char*)>
c0019fc3:	83 c4 10             	add    esp,0x10
c0019fc6:	83 ec 0c             	sub    esp,0xc
c0019fc9:	6a 30                	push   0x30
c0019fcb:	e8 16 db fe ff       	call   c0007ae6 <malloc>
c0019fd0:	83 c4 10             	add    esp,0x10
c0019fd3:	89 c2                	mov    edx,eax
c0019fd5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019fdc:	89 10                	mov    DWORD PTR [eax],edx
c0019fde:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019fe5:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fe7:	83 ec 08             	sub    esp,0x8
c0019fea:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019fee:	52                   	push   edx
c0019fef:	50                   	push   eax
c0019ff0:	e8 14 a6 fe ff       	call   c0004609 <f_opendir>
c0019ff5:	83 c4 10             	add    esp,0x10
c0019ff8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019fff:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a007:	74 07                	je     c001a010 <FAT::openDir(char const*, void**)+0xa0>
c001a009:	b8 01 00 00 00       	mov    eax,0x1
c001a00e:	eb 08                	jmp    c001a018 <FAT::openDir(char const*, void**)+0xa8>
c001a010:	b8 00 00 00 00       	mov    eax,0x0
c001a015:	8d 76 00             	lea    esi,[esi+0x0]
c001a018:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a01e:	c3                   	ret    
c001a01f:	90                   	nop

c001a020 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a020:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a026:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a02e:	75 0c                	jne    c001a03c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001a030:	b8 04 00 00 00       	mov    eax,0x4
c001a035:	e9 d6 00 00 00       	jmp    c001a110 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a03a:	66 90                	xchg   ax,ax
c001a03c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a044:	75 0a                	jne    c001a050 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001a046:	b8 04 00 00 00       	mov    eax,0x4
c001a04b:	e9 c0 00 00 00       	jmp    c001a110 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a050:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a058:	75 0a                	jne    c001a064 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001a05a:	b8 04 00 00 00       	mov    eax,0x4
c001a05f:	e9 ac 00 00 00       	jmp    c001a110 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a064:	83 ec 08             	sub    esp,0x8
c001a067:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a06e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a075:	50                   	push   eax
c001a076:	e8 c5 65 fe ff       	call   c0000640 <strcpy>
c001a07b:	83 c4 10             	add    esp,0x10
c001a07e:	83 ec 08             	sub    esp,0x8
c001a081:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a088:	50                   	push   eax
c001a089:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a090:	e8 27 fd ff ff       	call   c0019dbc <FAT::fixFilepath(char*)>
c001a095:	83 c4 10             	add    esp,0x10
c001a098:	83 ec 08             	sub    esp,0x8
c001a09b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a09f:	50                   	push   eax
c001a0a0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a0a7:	50                   	push   eax
c001a0a8:	e8 db a6 fe ff       	call   c0004788 <f_stat>
c001a0ad:	83 c4 10             	add    esp,0x10
c001a0b0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a0b7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a0be:	85 c0                	test   eax,eax
c001a0c0:	74 0a                	je     c001a0cc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a0c2:	83 f8 04             	cmp    eax,0x4
c001a0c5:	74 39                	je     c001a100 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a0c7:	eb 3f                	jmp    c001a108 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a0c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0cc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0d0:	0f b6 c0             	movzx  eax,al
c001a0d3:	83 e0 10             	and    eax,0x10
c001a0d6:	0f 95 c2             	setne  dl
c001a0d9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a0e0:	88 10                	mov    BYTE PTR [eax],dl
c001a0e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0e6:	ba 00 00 00 00       	mov    edx,0x0
c001a0eb:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a0f2:	89 01                	mov    DWORD PTR [ecx],eax
c001a0f4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a0f7:	b8 00 00 00 00       	mov    eax,0x0
c001a0fc:	eb 12                	jmp    c001a110 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a0fe:	66 90                	xchg   ax,ax
c001a100:	b8 02 00 00 00       	mov    eax,0x2
c001a105:	eb 09                	jmp    c001a110 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a107:	90                   	nop
c001a108:	b8 01 00 00 00       	mov    eax,0x1
c001a10d:	8d 76 00             	lea    esi,[esi+0x0]
c001a110:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a116:	c3                   	ret    
c001a117:	90                   	nop

c001a118 <FAT::unlink(char const*)>:
c001a118:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a11e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a126:	75 08                	jne    c001a130 <FAT::unlink(char const*)+0x18>
c001a128:	b8 04 00 00 00       	mov    eax,0x4
c001a12d:	eb 61                	jmp    c001a190 <FAT::unlink(char const*)+0x78>
c001a12f:	90                   	nop
c001a130:	83 ec 08             	sub    esp,0x8
c001a133:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a13a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a13e:	50                   	push   eax
c001a13f:	e8 fc 64 fe ff       	call   c0000640 <strcpy>
c001a144:	83 c4 10             	add    esp,0x10
c001a147:	83 ec 08             	sub    esp,0x8
c001a14a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a14e:	50                   	push   eax
c001a14f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a156:	e8 61 fc ff ff       	call   c0019dbc <FAT::fixFilepath(char*)>
c001a15b:	83 c4 10             	add    esp,0x10
c001a15e:	83 ec 0c             	sub    esp,0xc
c001a161:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a165:	50                   	push   eax
c001a166:	e8 8f a8 fe ff       	call   c00049fa <f_unlink>
c001a16b:	83 c4 10             	add    esp,0x10
c001a16e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a175:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a17c:	85 c0                	test   eax,eax
c001a17e:	75 08                	jne    c001a188 <FAT::unlink(char const*)+0x70>
c001a180:	b8 00 00 00 00       	mov    eax,0x0
c001a185:	eb 09                	jmp    c001a190 <FAT::unlink(char const*)+0x78>
c001a187:	90                   	nop
c001a188:	b8 01 00 00 00       	mov    eax,0x1
c001a18d:	8d 76 00             	lea    esi,[esi+0x0]
c001a190:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a196:	c3                   	ret    
c001a197:	90                   	nop

c001a198 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a198:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a19e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a1a5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a1ac:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a1b0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a1b4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a1bc:	75 0a                	jne    c001a1c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a1be:	b8 04 00 00 00       	mov    eax,0x4
c001a1c3:	e9 7c 01 00 00       	jmp    c001a344 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a1c8:	83 ec 08             	sub    esp,0x8
c001a1cb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a1d2:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a1d6:	50                   	push   eax
c001a1d7:	e8 64 64 fe ff       	call   c0000640 <strcpy>
c001a1dc:	83 c4 10             	add    esp,0x10
c001a1df:	83 ec 08             	sub    esp,0x8
c001a1e2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a1e6:	50                   	push   eax
c001a1e7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a1ee:	e8 c9 fb ff ff       	call   c0019dbc <FAT::fixFilepath(char*)>
c001a1f3:	83 c4 10             	add    esp,0x10
c001a1f6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a1fe:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a206:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a20b:	83 e0 01             	and    eax,0x1
c001a20e:	74 14                	je     c001a224 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a210:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a217:	83 c8 01             	or     eax,0x1
c001a21a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a221:	8d 76 00             	lea    esi,[esi+0x0]
c001a224:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a229:	83 e0 02             	and    eax,0x2
c001a22c:	74 12                	je     c001a240 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a22e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a235:	83 c8 20             	or     eax,0x20
c001a238:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a23f:	90                   	nop
c001a240:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a245:	83 e0 04             	and    eax,0x4
c001a248:	74 12                	je     c001a25c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a24a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a251:	83 c8 04             	or     eax,0x4
c001a254:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a25b:	90                   	nop
c001a25c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a261:	83 e0 08             	and    eax,0x8
c001a264:	74 12                	je     c001a278 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a266:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a26d:	83 c8 02             	or     eax,0x2
c001a270:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a277:	90                   	nop
c001a278:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a27d:	83 e0 01             	and    eax,0x1
c001a280:	74 12                	je     c001a294 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a282:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a289:	83 c8 01             	or     eax,0x1
c001a28c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a293:	90                   	nop
c001a294:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a299:	83 e0 02             	and    eax,0x2
c001a29c:	74 12                	je     c001a2b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a29e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a2a5:	83 c8 20             	or     eax,0x20
c001a2a8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a2af:	90                   	nop
c001a2b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a2b5:	83 e0 04             	and    eax,0x4
c001a2b8:	74 12                	je     c001a2cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a2ba:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a2c1:	83 c8 04             	or     eax,0x4
c001a2c4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a2cb:	90                   	nop
c001a2cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a2d1:	83 e0 08             	and    eax,0x8
c001a2d4:	74 12                	je     c001a2e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a2d6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a2dd:	83 c8 02             	or     eax,0x2
c001a2e0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a2e7:	90                   	nop
c001a2e8:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a2ef:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a2f6:	09 d0                	or     eax,edx
c001a2f8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a2ff:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a307:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a30f:	83 ec 04             	sub    esp,0x4
c001a312:	52                   	push   edx
c001a313:	50                   	push   eax
c001a314:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a318:	50                   	push   eax
c001a319:	e8 51 ab fe ff       	call   c0004e6f <f_chmod>
c001a31e:	83 c4 10             	add    esp,0x10
c001a321:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a328:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a32f:	85 c0                	test   eax,eax
c001a331:	75 09                	jne    c001a33c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a333:	b8 00 00 00 00       	mov    eax,0x0
c001a338:	eb 0a                	jmp    c001a344 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a33a:	66 90                	xchg   ax,ax
c001a33c:	b8 01 00 00 00       	mov    eax,0x1
c001a341:	8d 76 00             	lea    esi,[esi+0x0]
c001a344:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a34a:	c3                   	ret    
c001a34b:	90                   	nop

c001a34c <FAT::rename(char const*, char const*)>:
c001a34c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a352:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a35a:	74 0c                	je     c001a368 <FAT::rename(char const*, char const*)+0x1c>
c001a35c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a364:	75 0e                	jne    c001a374 <FAT::rename(char const*, char const*)+0x28>
c001a366:	66 90                	xchg   ax,ax
c001a368:	b8 04 00 00 00       	mov    eax,0x4
c001a36d:	e9 9e 00 00 00       	jmp    c001a410 <FAT::rename(char const*, char const*)+0xc4>
c001a372:	66 90                	xchg   ax,ax
c001a374:	83 ec 08             	sub    esp,0x8
c001a377:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a37e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a385:	50                   	push   eax
c001a386:	e8 b5 62 fe ff       	call   c0000640 <strcpy>
c001a38b:	83 c4 10             	add    esp,0x10
c001a38e:	83 ec 08             	sub    esp,0x8
c001a391:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a398:	50                   	push   eax
c001a399:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a3a0:	e8 17 fa ff ff       	call   c0019dbc <FAT::fixFilepath(char*)>
c001a3a5:	83 c4 10             	add    esp,0x10
c001a3a8:	83 ec 08             	sub    esp,0x8
c001a3ab:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a3b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3b6:	50                   	push   eax
c001a3b7:	e8 84 62 fe ff       	call   c0000640 <strcpy>
c001a3bc:	83 c4 10             	add    esp,0x10
c001a3bf:	83 ec 08             	sub    esp,0x8
c001a3c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a3c6:	50                   	push   eax
c001a3c7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a3ce:	e8 e9 f9 ff ff       	call   c0019dbc <FAT::fixFilepath(char*)>
c001a3d3:	83 c4 10             	add    esp,0x10
c001a3d6:	83 ec 08             	sub    esp,0x8
c001a3d9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a3dd:	50                   	push   eax
c001a3de:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a3e5:	50                   	push   eax
c001a3e6:	e8 cc a8 fe ff       	call   c0004cb7 <f_rename>
c001a3eb:	83 c4 10             	add    esp,0x10
c001a3ee:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a3f5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a3fc:	85 c0                	test   eax,eax
c001a3fe:	75 08                	jne    c001a408 <FAT::rename(char const*, char const*)+0xbc>
c001a400:	b8 00 00 00 00       	mov    eax,0x0
c001a405:	eb 09                	jmp    c001a410 <FAT::rename(char const*, char const*)+0xc4>
c001a407:	90                   	nop
c001a408:	b8 01 00 00 00       	mov    eax,0x1
c001a40d:	8d 76 00             	lea    esi,[esi+0x0]
c001a410:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a416:	c3                   	ret    
c001a417:	90                   	nop

c001a418 <FAT::mkdir(char const*)>:
c001a418:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a41e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a426:	75 08                	jne    c001a430 <FAT::mkdir(char const*)+0x18>
c001a428:	b8 04 00 00 00       	mov    eax,0x4
c001a42d:	eb 61                	jmp    c001a490 <FAT::mkdir(char const*)+0x78>
c001a42f:	90                   	nop
c001a430:	83 ec 08             	sub    esp,0x8
c001a433:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a43a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a43e:	50                   	push   eax
c001a43f:	e8 fc 61 fe ff       	call   c0000640 <strcpy>
c001a444:	83 c4 10             	add    esp,0x10
c001a447:	83 ec 08             	sub    esp,0x8
c001a44a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a44e:	50                   	push   eax
c001a44f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a456:	e8 61 f9 ff ff       	call   c0019dbc <FAT::fixFilepath(char*)>
c001a45b:	83 c4 10             	add    esp,0x10
c001a45e:	83 ec 0c             	sub    esp,0xc
c001a461:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a465:	50                   	push   eax
c001a466:	e8 b1 a6 fe ff       	call   c0004b1c <f_mkdir>
c001a46b:	83 c4 10             	add    esp,0x10
c001a46e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a475:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a47c:	85 c0                	test   eax,eax
c001a47e:	75 08                	jne    c001a488 <FAT::mkdir(char const*)+0x70>
c001a480:	b8 00 00 00 00       	mov    eax,0x0
c001a485:	eb 09                	jmp    c001a490 <FAT::mkdir(char const*)+0x78>
c001a487:	90                   	nop
c001a488:	b8 01 00 00 00       	mov    eax,0x1
c001a48d:	8d 76 00             	lea    esi,[esi+0x0]
c001a490:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a496:	c3                   	ret    
c001a497:	90                   	nop

c001a498 <FAT::exists(char const*)>:
c001a498:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a49e:	83 ec 08             	sub    esp,0x8
c001a4a1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a4a8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a4ac:	50                   	push   eax
c001a4ad:	e8 8e 61 fe ff       	call   c0000640 <strcpy>
c001a4b2:	83 c4 10             	add    esp,0x10
c001a4b5:	83 ec 08             	sub    esp,0x8
c001a4b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a4bc:	50                   	push   eax
c001a4bd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a4c4:	e8 f3 f8 ff ff       	call   c0019dbc <FAT::fixFilepath(char*)>
c001a4c9:	83 c4 10             	add    esp,0x10
c001a4cc:	83 ec 08             	sub    esp,0x8
c001a4cf:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a4d6:	50                   	push   eax
c001a4d7:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a4db:	50                   	push   eax
c001a4dc:	e8 a7 a2 fe ff       	call   c0004788 <f_stat>
c001a4e1:	83 c4 10             	add    esp,0x10
c001a4e4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a4eb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a4f2:	85 c0                	test   eax,eax
c001a4f4:	75 06                	jne    c001a4fc <FAT::exists(char const*)+0x64>
c001a4f6:	b0 01                	mov    al,0x1
c001a4f8:	eb 06                	jmp    c001a500 <FAT::exists(char const*)+0x68>
c001a4fa:	66 90                	xchg   ax,ax
c001a4fc:	b0 00                	mov    al,0x0
c001a4fe:	66 90                	xchg   ax,ax
c001a500:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a506:	c3                   	ret    
c001a507:	90                   	nop

c001a508 <isoReadDiscSectorHelper>:
c001a508:	83 ec 2c             	sub    esp,0x2c
c001a50b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a50f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a513:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a518:	83 e8 41             	sub    eax,0x41
c001a51b:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a522:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a526:	ba 00 00 00 00       	mov    edx,0x0
c001a52b:	83 ec 0c             	sub    esp,0xc
c001a52e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a532:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a536:	52                   	push   edx
c001a537:	50                   	push   eax
c001a538:	51                   	push   ecx
c001a539:	e8 d6 38 ff ff       	call   c000de14 <LogicalDisk::read(unsigned long long, int, void*)>
c001a53e:	83 c4 20             	add    esp,0x20
c001a541:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a545:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a54a:	74 0c                	je     c001a558 <isoReadDiscSectorHelper+0x50>
c001a54c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a550:	c1 e0 0b             	shl    eax,0xb
c001a553:	eb 0b                	jmp    c001a560 <isoReadDiscSectorHelper+0x58>
c001a555:	8d 76 00             	lea    esi,[esi+0x0]
c001a558:	b8 00 00 00 00       	mov    eax,0x0
c001a55d:	8d 76 00             	lea    esi,[esi+0x0]
c001a560:	83 c4 2c             	add    esp,0x2c
c001a563:	c3                   	ret    

c001a564 <iso_kprintf>:
c001a564:	83 ec 0c             	sub    esp,0xc
c001a567:	83 ec 08             	sub    esp,0x8
c001a56a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a56e:	68 46 2e 02 c0       	push   0xc0022e46
c001a573:	e8 fd 03 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001a578:	83 c4 10             	add    esp,0x10
c001a57b:	90                   	nop
c001a57c:	83 c4 0c             	add    esp,0xc
c001a57f:	c3                   	ret    

c001a580 <iso_kprintfd>:
c001a580:	83 ec 0c             	sub    esp,0xc
c001a583:	83 ec 08             	sub    esp,0x8
c001a586:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a58a:	68 a2 14 02 c0       	push   0xc00214a2
c001a58f:	e8 e1 03 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001a594:	83 c4 10             	add    esp,0x10
c001a597:	90                   	nop
c001a598:	83 c4 0c             	add    esp,0xc
c001a59b:	c3                   	ret    

c001a59c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a59c:	b8 08 00 00 00       	mov    eax,0x8
c001a5a1:	c3                   	ret    

c001a5a2 <ISO9660::truncate(void*, unsigned long long)>:
c001a5a2:	b8 01 00 00 00       	mov    eax,0x1
c001a5a7:	c3                   	ret    

c001a5a8 <ISO9660::getName()>:
c001a5a8:	b8 fc 30 02 c0       	mov    eax,0xc00230fc
c001a5ad:	c3                   	ret    

c001a5ae <ISO9660::closeDir(void*)>:
c001a5ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5b2:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5b4:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a5b7:	90                   	nop

c001a5b8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a5b8:	b8 01 00 00 00       	mov    eax,0x1
c001a5bd:	c3                   	ret    

c001a5be <ISO9660::unlink(char const*)>:
c001a5be:	b8 01 00 00 00       	mov    eax,0x1
c001a5c3:	c3                   	ret    

c001a5c4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a5c4:	b8 03 00 00 00       	mov    eax,0x3
c001a5c9:	c3                   	ret    

c001a5ca <ISO9660::rename(char const*, char const*)>:
c001a5ca:	b8 01 00 00 00       	mov    eax,0x1
c001a5cf:	c3                   	ret    

c001a5d0 <ISO9660::mkdir(char const*)>:
c001a5d0:	b8 01 00 00 00       	mov    eax,0x1
c001a5d5:	c3                   	ret    

c001a5d6 <ISO9660::~ISO9660()>:
c001a5d6:	83 ec 0c             	sub    esp,0xc
c001a5d9:	ba 3c 32 02 c0       	mov    edx,0xc002323c
c001a5de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5e2:	89 10                	mov    DWORD PTR [eax],edx
c001a5e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5e8:	83 ec 0c             	sub    esp,0xc
c001a5eb:	50                   	push   eax
c001a5ec:	e8 0d 12 ff ff       	call   c000b7fe <Filesystem::~Filesystem()>
c001a5f1:	83 c4 10             	add    esp,0x10
c001a5f4:	90                   	nop
c001a5f5:	83 c4 0c             	add    esp,0xc
c001a5f8:	c3                   	ret    
c001a5f9:	90                   	nop

c001a5fa <ISO9660::~ISO9660()>:
c001a5fa:	83 ec 0c             	sub    esp,0xc
c001a5fd:	83 ec 0c             	sub    esp,0xc
c001a600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a604:	e8 cd ff ff ff       	call   c001a5d6 <ISO9660::~ISO9660()>
c001a609:	83 c4 10             	add    esp,0x10
c001a60c:	83 ec 08             	sub    esp,0x8
c001a60f:	6a 08                	push   0x8
c001a611:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a615:	e8 2e 02 ff ff       	call   c000a848 <operator delete(void*, unsigned long)>
c001a61a:	83 c4 10             	add    esp,0x10
c001a61d:	83 c4 0c             	add    esp,0xc
c001a620:	c3                   	ret    
c001a621:	90                   	nop

c001a622 <ISO9660::exists(char const*)>:
c001a622:	83 ec 18             	sub    esp,0x18
c001a625:	68 17 31 02 c0       	push   0xc0023117
c001a62a:	e8 e4 70 ff ff       	call   c0011713 <KePanic(char const*)>
c001a62f:	31 c0                	xor    eax,eax
c001a631:	83 c4 1c             	add    esp,0x1c
c001a634:	c3                   	ret    
c001a635:	90                   	nop

c001a636 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a636:	56                   	push   esi
c001a637:	53                   	push   ebx
c001a638:	53                   	push   ebx
c001a639:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a63d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a641:	85 db                	test   ebx,ebx
c001a643:	0f 84 ca 00 00 00    	je     c001a713 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a649:	85 f6                	test   esi,esi
c001a64b:	0f 84 c2 00 00 00    	je     c001a713 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a651:	b8 03 00 00 00       	mov    eax,0x3
c001a656:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a65b:	0f 85 b7 00 00 00    	jne    c001a718 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a661:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a663:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a66a:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a670:	74 1b                	je     c001a68d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a672:	85 c0                	test   eax,eax
c001a674:	74 10                	je     c001a686 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a676:	83 ec 0c             	sub    esp,0xc
c001a679:	68 35 31 02 c0       	push   0xc0023135
c001a67e:	e8 90 70 ff ff       	call   c0011713 <KePanic(char const*)>
c001a683:	83 c4 10             	add    esp,0x10
c001a686:	8a 03                	mov    al,BYTE PTR [ebx]
c001a688:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a68d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a690:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a697:	85 c0                	test   eax,eax
c001a699:	74 09                	je     c001a6a4 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a69b:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a6a2:	74 48                	je     c001a6ec <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a6a4:	83 ec 0c             	sub    esp,0xc
c001a6a7:	68 45 31 02 c0       	push   0xc0023145
c001a6ac:	e8 c4 02 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001a6b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a6b4:	83 c4 10             	add    esp,0x10
c001a6b7:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a6be:	85 c0                	test   eax,eax
c001a6c0:	74 17                	je     c001a6d9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a6c2:	83 ec 0c             	sub    esp,0xc
c001a6c5:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a6cc:	68 65 31 02 c0       	push   0xc0023165
c001a6d1:	e8 9f 02 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001a6d6:	83 c4 10             	add    esp,0x10
c001a6d9:	83 ec 0c             	sub    esp,0xc
c001a6dc:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a6e3:	50                   	push   eax
c001a6e4:	e8 5d c3 fe ff       	call   c0006a46 <init_percd>
c001a6e9:	83 c4 10             	add    esp,0x10
c001a6ec:	83 c3 03             	add    ebx,0x3
c001a6ef:	51                   	push   ecx
c001a6f0:	51                   	push   ecx
c001a6f1:	6a 00                	push   0x0
c001a6f3:	53                   	push   ebx
c001a6f4:	e8 14 be fe ff       	call   c000650d <iso_open>
c001a6f9:	83 c4 10             	add    esp,0x10
c001a6fc:	89 c2                	mov    edx,eax
c001a6fe:	b8 01 00 00 00       	mov    eax,0x1
c001a703:	83 fa ff             	cmp    edx,0xffffffff
c001a706:	74 10                	je     c001a718 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a708:	83 c2 32             	add    edx,0x32
c001a70b:	31 c0                	xor    eax,eax
c001a70d:	01 d2                	add    edx,edx
c001a70f:	89 16                	mov    DWORD PTR [esi],edx
c001a711:	eb 05                	jmp    c001a718 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a713:	b8 04 00 00 00       	mov    eax,0x4
c001a718:	5a                   	pop    edx
c001a719:	5b                   	pop    ebx
c001a71a:	5e                   	pop    esi
c001a71b:	c3                   	ret    

c001a71c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a71c:	53                   	push   ebx
c001a71d:	83 ec 08             	sub    esp,0x8
c001a720:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a724:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a728:	85 c0                	test   eax,eax
c001a72a:	74 2d                	je     c001a759 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a72c:	85 db                	test   ebx,ebx
c001a72e:	74 29                	je     c001a759 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a730:	b9 02 00 00 00       	mov    ecx,0x2
c001a735:	52                   	push   edx
c001a736:	99                   	cdq    
c001a737:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a73b:	f7 f9                	idiv   ecx
c001a73d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a741:	83 e8 32             	sub    eax,0x32
c001a744:	50                   	push   eax
c001a745:	e8 6b be fe ff       	call   c00065b5 <iso_read>
c001a74a:	83 c4 10             	add    esp,0x10
c001a74d:	89 03                	mov    DWORD PTR [ebx],eax
c001a74f:	09 d0                	or     eax,edx
c001a751:	0f 94 c0             	sete   al
c001a754:	0f b6 c0             	movzx  eax,al
c001a757:	eb 05                	jmp    c001a75e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a759:	b8 04 00 00 00       	mov    eax,0x4
c001a75e:	83 c4 08             	add    esp,0x8
c001a761:	5b                   	pop    ebx
c001a762:	c3                   	ret    
c001a763:	90                   	nop

c001a764 <ISO9660::seek(void*, unsigned long long)>:
c001a764:	57                   	push   edi
c001a765:	56                   	push   esi
c001a766:	b8 04 00 00 00       	mov    eax,0x4
c001a76b:	51                   	push   ecx
c001a76c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a774:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a778:	85 d2                	test   edx,edx
c001a77a:	74 26                	je     c001a7a2 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a77c:	6a 00                	push   0x0
c001a77e:	b9 02 00 00 00       	mov    ecx,0x2
c001a783:	57                   	push   edi
c001a784:	89 d0                	mov    eax,edx
c001a786:	56                   	push   esi
c001a787:	99                   	cdq    
c001a788:	f7 f9                	idiv   ecx
c001a78a:	83 e8 32             	sub    eax,0x32
c001a78d:	50                   	push   eax
c001a78e:	e8 38 bf fe ff       	call   c00066cb <iso_seek>
c001a793:	83 c4 10             	add    esp,0x10
c001a796:	31 f0                	xor    eax,esi
c001a798:	31 fa                	xor    edx,edi
c001a79a:	09 d0                	or     eax,edx
c001a79c:	0f 95 c0             	setne  al
c001a79f:	0f b6 c0             	movzx  eax,al
c001a7a2:	5a                   	pop    edx
c001a7a3:	5e                   	pop    esi
c001a7a4:	5f                   	pop    edi
c001a7a5:	c3                   	ret    

c001a7a6 <ISO9660::tell(void*, unsigned long long*)>:
c001a7a6:	53                   	push   ebx
c001a7a7:	83 ec 08             	sub    esp,0x8
c001a7aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7ae:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a7b2:	85 c0                	test   eax,eax
c001a7b4:	74 24                	je     c001a7da <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a7b6:	85 db                	test   ebx,ebx
c001a7b8:	74 20                	je     c001a7da <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a7ba:	83 ec 0c             	sub    esp,0xc
c001a7bd:	b9 02 00 00 00       	mov    ecx,0x2
c001a7c2:	99                   	cdq    
c001a7c3:	f7 f9                	idiv   ecx
c001a7c5:	83 e8 32             	sub    eax,0x32
c001a7c8:	50                   	push   eax
c001a7c9:	e8 81 bf fe ff       	call   c000674f <iso_tell>
c001a7ce:	83 c4 10             	add    esp,0x10
c001a7d1:	89 03                	mov    DWORD PTR [ebx],eax
c001a7d3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a7d6:	31 c0                	xor    eax,eax
c001a7d8:	eb 05                	jmp    c001a7df <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a7da:	b8 04 00 00 00       	mov    eax,0x4
c001a7df:	83 c4 08             	add    esp,0x8
c001a7e2:	5b                   	pop    ebx
c001a7e3:	c3                   	ret    

c001a7e4 <ISO9660::stat(void*, unsigned long long*)>:
c001a7e4:	53                   	push   ebx
c001a7e5:	83 ec 14             	sub    esp,0x14
c001a7e8:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a7ec:	68 89 31 02 c0       	push   0xc0023189
c001a7f1:	e8 7f 01 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001a7f6:	83 c4 10             	add    esp,0x10
c001a7f9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a7fe:	74 2c                	je     c001a82c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a800:	85 db                	test   ebx,ebx
c001a802:	74 28                	je     c001a82c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a804:	83 ec 0c             	sub    esp,0xc
c001a807:	b9 02 00 00 00       	mov    ecx,0x2
c001a80c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a810:	99                   	cdq    
c001a811:	f7 f9                	idiv   ecx
c001a813:	83 e8 32             	sub    eax,0x32
c001a816:	50                   	push   eax
c001a817:	e8 64 bf fe ff       	call   c0006780 <iso_total>
c001a81c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a823:	89 03                	mov    DWORD PTR [ebx],eax
c001a825:	83 c4 10             	add    esp,0x10
c001a828:	31 c0                	xor    eax,eax
c001a82a:	eb 05                	jmp    c001a831 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a82c:	b8 04 00 00 00       	mov    eax,0x4
c001a831:	83 c4 08             	add    esp,0x8
c001a834:	5b                   	pop    ebx
c001a835:	c3                   	ret    

c001a836 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a836:	55                   	push   ebp
c001a837:	57                   	push   edi
c001a838:	56                   	push   esi
c001a839:	53                   	push   ebx
c001a83a:	83 ec 18             	sub    esp,0x18
c001a83d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a841:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a845:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a849:	68 91 31 02 c0       	push   0xc0023191
c001a84e:	e8 22 01 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001a853:	83 c4 10             	add    esp,0x10
c001a856:	85 ff                	test   edi,edi
c001a858:	0f 94 c0             	sete   al
c001a85b:	85 f6                	test   esi,esi
c001a85d:	0f 94 c2             	sete   dl
c001a860:	09 d0                	or     eax,edx
c001a862:	a8 01                	test   al,0x1
c001a864:	0f 85 dd 00 00 00    	jne    c001a947 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a86a:	85 db                	test   ebx,ebx
c001a86c:	0f 84 d5 00 00 00    	je     c001a947 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a872:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a875:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a87b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a882:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a889:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a88b:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a891:	74 1b                	je     c001a8ae <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a893:	85 c0                	test   eax,eax
c001a895:	74 10                	je     c001a8a7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a897:	83 ec 0c             	sub    esp,0xc
c001a89a:	68 35 31 02 c0       	push   0xc0023135
c001a89f:	e8 6f 6e ff ff       	call   c0011713 <KePanic(char const*)>
c001a8a4:	83 c4 10             	add    esp,0x10
c001a8a7:	8a 03                	mov    al,BYTE PTR [ebx]
c001a8a9:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a8ae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a8b1:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a8b8:	85 c0                	test   eax,eax
c001a8ba:	74 09                	je     c001a8c5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a8bc:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a8c3:	74 51                	je     c001a916 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a8c5:	83 ec 0c             	sub    esp,0xc
c001a8c8:	68 99 31 02 c0       	push   0xc0023199
c001a8cd:	e8 a3 00 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001a8d2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a8d5:	83 c4 10             	add    esp,0x10
c001a8d8:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a8e0:	74 21                	je     c001a903 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a8e2:	83 ec 0c             	sub    esp,0xc
c001a8e5:	68 b9 31 02 c0       	push   0xc00231b9
c001a8ea:	e8 86 00 ff ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001a8ef:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a8f2:	83 c4 10             	add    esp,0x10
c001a8f5:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a8fc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a903:	83 ec 0c             	sub    esp,0xc
c001a906:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a90d:	50                   	push   eax
c001a90e:	e8 33 c1 fe ff       	call   c0006a46 <init_percd>
c001a913:	83 c4 10             	add    esp,0x10
c001a916:	83 c3 03             	add    ebx,0x3
c001a919:	52                   	push   edx
c001a91a:	52                   	push   edx
c001a91b:	6a 00                	push   0x0
c001a91d:	53                   	push   ebx
c001a91e:	e8 ea bb fe ff       	call   c000650d <iso_open>
c001a923:	83 c4 10             	add    esp,0x10
c001a926:	89 c5                	mov    ebp,eax
c001a928:	83 f8 ff             	cmp    eax,0xffffffff
c001a92b:	75 21                	jne    c001a94e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a92d:	50                   	push   eax
c001a92e:	50                   	push   eax
c001a92f:	6a 01                	push   0x1
c001a931:	53                   	push   ebx
c001a932:	e8 d6 bb fe ff       	call   c000650d <iso_open>
c001a937:	83 c4 10             	add    esp,0x10
c001a93a:	ba 02 00 00 00       	mov    edx,0x2
c001a93f:	40                   	inc    eax
c001a940:	74 2b                	je     c001a96d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a942:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a945:	eb 24                	jmp    c001a96b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a947:	ba 04 00 00 00       	mov    edx,0x4
c001a94c:	eb 1f                	jmp    c001a96d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a94e:	83 ec 0c             	sub    esp,0xc
c001a951:	50                   	push   eax
c001a952:	e8 29 be fe ff       	call   c0006780 <iso_total>
c001a957:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a95e:	89 07                	mov    DWORD PTR [edi],eax
c001a960:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a963:	e8 2f bc fe ff       	call   c0006597 <iso_close>
c001a968:	83 c4 10             	add    esp,0x10
c001a96b:	31 d2                	xor    edx,edx
c001a96d:	83 c4 0c             	add    esp,0xc
c001a970:	89 d0                	mov    eax,edx
c001a972:	5b                   	pop    ebx
c001a973:	5e                   	pop    esi
c001a974:	5f                   	pop    edi
c001a975:	5d                   	pop    ebp
c001a976:	c3                   	ret    
c001a977:	90                   	nop

c001a978 <ISO9660::close(void*)>:
c001a978:	83 ec 0c             	sub    esp,0xc
c001a97b:	b8 04 00 00 00       	mov    eax,0x4
c001a980:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a984:	85 d2                	test   edx,edx
c001a986:	74 1b                	je     c001a9a3 <ISO9660::close(void*)+0x2b>
c001a988:	83 ec 0c             	sub    esp,0xc
c001a98b:	b9 02 00 00 00       	mov    ecx,0x2
c001a990:	89 d0                	mov    eax,edx
c001a992:	99                   	cdq    
c001a993:	f7 f9                	idiv   ecx
c001a995:	83 e8 32             	sub    eax,0x32
c001a998:	50                   	push   eax
c001a999:	e8 f9 bb fe ff       	call   c0006597 <iso_close>
c001a99e:	83 c4 10             	add    esp,0x10
c001a9a1:	31 c0                	xor    eax,eax
c001a9a3:	83 c4 0c             	add    esp,0xc
c001a9a6:	c3                   	ret    
c001a9a7:	90                   	nop

c001a9a8 <ISO9660::openDir(char const*, void**)>:
c001a9a8:	56                   	push   esi
c001a9a9:	53                   	push   ebx
c001a9aa:	50                   	push   eax
c001a9ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a9af:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a9b3:	85 db                	test   ebx,ebx
c001a9b5:	0f 84 bd 00 00 00    	je     c001aa78 <ISO9660::openDir(char const*, void**)+0xd0>
c001a9bb:	85 f6                	test   esi,esi
c001a9bd:	0f 84 b5 00 00 00    	je     c001aa78 <ISO9660::openDir(char const*, void**)+0xd0>
c001a9c3:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a9c5:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a9cc:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a9d2:	74 1b                	je     c001a9ef <ISO9660::openDir(char const*, void**)+0x47>
c001a9d4:	85 c0                	test   eax,eax
c001a9d6:	74 10                	je     c001a9e8 <ISO9660::openDir(char const*, void**)+0x40>
c001a9d8:	83 ec 0c             	sub    esp,0xc
c001a9db:	68 35 31 02 c0       	push   0xc0023135
c001a9e0:	e8 2e 6d ff ff       	call   c0011713 <KePanic(char const*)>
c001a9e5:	83 c4 10             	add    esp,0x10
c001a9e8:	8a 03                	mov    al,BYTE PTR [ebx]
c001a9ea:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a9ef:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a9f2:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a9f9:	85 c0                	test   eax,eax
c001a9fb:	74 10                	je     c001aa0d <ISO9660::openDir(char const*, void**)+0x65>
c001a9fd:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001aa04:	74 1a                	je     c001aa20 <ISO9660::openDir(char const*, void**)+0x78>
c001aa06:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001aa0d:	83 ec 0c             	sub    esp,0xc
c001aa10:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001aa17:	50                   	push   eax
c001aa18:	e8 29 c0 fe ff       	call   c0006a46 <init_percd>
c001aa1d:	83 c4 10             	add    esp,0x10
c001aa20:	83 c3 03             	add    ebx,0x3
c001aa23:	50                   	push   eax
c001aa24:	50                   	push   eax
c001aa25:	6a 01                	push   0x1
c001aa27:	53                   	push   ebx
c001aa28:	e8 e0 ba fe ff       	call   c000650d <iso_open>
c001aa2d:	83 c4 10             	add    esp,0x10
c001aa30:	89 c3                	mov    ebx,eax
c001aa32:	83 f8 ff             	cmp    eax,0xffffffff
c001aa35:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa3a:	75 1c                	jne    c001aa58 <ISO9660::openDir(char const*, void**)+0xb0>
c001aa3c:	53                   	push   ebx
c001aa3d:	53                   	push   ebx
c001aa3e:	68 dd 31 02 c0       	push   0xc00231dd
c001aa43:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa49:	e8 88 e0 fe ff       	call   c0008ad6 <VgaText::puts(char const*)>
c001aa4e:	83 c4 10             	add    esp,0x10
c001aa51:	b8 01 00 00 00       	mov    eax,0x1
c001aa56:	eb 25                	jmp    c001aa7d <ISO9660::openDir(char const*, void**)+0xd5>
c001aa58:	01 db                	add    ebx,ebx
c001aa5a:	51                   	push   ecx
c001aa5b:	83 c3 65             	add    ebx,0x65
c001aa5e:	51                   	push   ecx
c001aa5f:	68 f0 31 02 c0       	push   0xc00231f0
c001aa64:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa6a:	e8 67 e0 fe ff       	call   c0008ad6 <VgaText::puts(char const*)>
c001aa6f:	89 1e                	mov    DWORD PTR [esi],ebx
c001aa71:	83 c4 10             	add    esp,0x10
c001aa74:	31 c0                	xor    eax,eax
c001aa76:	eb 05                	jmp    c001aa7d <ISO9660::openDir(char const*, void**)+0xd5>
c001aa78:	b8 04 00 00 00       	mov    eax,0x4
c001aa7d:	5a                   	pop    edx
c001aa7e:	5b                   	pop    ebx
c001aa7f:	5e                   	pop    esi
c001aa80:	c3                   	ret    
c001aa81:	90                   	nop

c001aa82 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001aa82:	55                   	push   ebp
c001aa83:	57                   	push   edi
c001aa84:	56                   	push   esi
c001aa85:	53                   	push   ebx
c001aa86:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa8c:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001aa93:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aa9a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001aaa2:	0f 84 e7 00 00 00    	je     c001ab8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001aaa8:	85 db                	test   ebx,ebx
c001aaaa:	0f 84 df 00 00 00    	je     c001ab8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001aab0:	83 ec 0c             	sub    esp,0xc
c001aab3:	68 03 32 02 c0       	push   0xc0023203
c001aab8:	e8 b8 fe fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001aabd:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001aac4:	b9 02 00 00 00       	mov    ecx,0x2
c001aac9:	99                   	cdq    
c001aaca:	f7 f9                	idiv   ecx
c001aacc:	83 e8 32             	sub    eax,0x32
c001aacf:	89 04 24             	mov    DWORD PTR [esp],eax
c001aad2:	e8 fb bc fe ff       	call   c00067d2 <iso_readdir>
c001aad7:	83 c4 10             	add    esp,0x10
c001aada:	89 c6                	mov    esi,eax
c001aadc:	85 c0                	test   eax,eax
c001aade:	75 37                	jne    c001ab17 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001aae0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aae5:	56                   	push   esi
c001aae6:	56                   	push   esi
c001aae7:	68 0e 32 02 c0       	push   0xc002320e
c001aaec:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aaf2:	e8 df df fe ff       	call   c0008ad6 <VgaText::puts(char const*)>
c001aaf7:	83 c4 0c             	add    esp,0xc
c001aafa:	68 10 01 00 00       	push   0x110
c001aaff:	6a 00                	push   0x0
c001ab01:	57                   	push   edi
c001ab02:	e8 e9 59 fe ff       	call   c00004f0 <memset>
c001ab07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ab0d:	83 c4 10             	add    esp,0x10
c001ab10:	b8 01 00 00 00       	mov    eax,0x1
c001ab15:	eb 7d                	jmp    c001ab94 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001ab17:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001ab1d:	8d 68 08             	lea    ebp,[eax+0x8]
c001ab20:	83 ec 0c             	sub    esp,0xc
c001ab23:	55                   	push   ebp
c001ab24:	e8 47 5a fe ff       	call   c0000570 <strlen>
c001ab29:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ab31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab35:	83 c4 10             	add    esp,0x10
c001ab38:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001ab3c:	75 0a                	jne    c001ab48 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001ab3e:	b8 02 00 00 00       	mov    eax,0x2
c001ab43:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001ab46:	74 05                	je     c001ab4d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001ab48:	b8 01 00 00 00       	mov    eax,0x1
c001ab4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab51:	50                   	push   eax
c001ab52:	50                   	push   eax
c001ab53:	55                   	push   ebp
c001ab54:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ab58:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001ab5c:	50                   	push   eax
c001ab5d:	e8 de 5a fe ff       	call   c0000640 <strcpy>
c001ab62:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001ab69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab6b:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001ab71:	5a                   	pop    edx
c001ab72:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001ab77:	59                   	pop    ecx
c001ab78:	68 21 32 02 c0       	push   0xc0023221
c001ab7d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001ab83:	e8 4e df fe ff       	call   c0008ad6 <VgaText::puts(char const*)>
c001ab88:	83 c4 10             	add    esp,0x10
c001ab8b:	31 c0                	xor    eax,eax
c001ab8d:	eb 05                	jmp    c001ab94 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001ab8f:	b8 04 00 00 00       	mov    eax,0x4
c001ab94:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab9a:	5b                   	pop    ebx
c001ab9b:	5e                   	pop    esi
c001ab9c:	5f                   	pop    edi
c001ab9d:	5d                   	pop    ebp
c001ab9e:	c3                   	ret    

c001ab9f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ab9f:	57                   	push   edi
c001aba0:	56                   	push   esi
c001aba1:	53                   	push   ebx
c001aba2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aba6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001abaa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001abae:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001abb4:	0f be cb             	movsx  ecx,bl
c001abb7:	75 0b                	jne    c001abc4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001abb9:	0f be 05 60 44 02 c0 	movsx  eax,BYTE PTR ds:0xc0024460
c001abc0:	39 c8                	cmp    eax,ecx
c001abc2:	74 47                	je     c001ac0b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001abc4:	83 ec 0c             	sub    esp,0xc
c001abc7:	31 d2                	xor    edx,edx
c001abc9:	68 a0 c8 02 c0       	push   0xc002c8a0
c001abce:	6a 01                	push   0x1
c001abd0:	52                   	push   edx
c001abd1:	56                   	push   esi
c001abd2:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001abd9:	e8 36 32 ff ff       	call   c000de14 <LogicalDisk::read(unsigned long long, int, void*)>
c001abde:	83 c4 20             	add    esp,0x20
c001abe1:	85 c0                	test   eax,eax
c001abe3:	75 0e                	jne    c001abf3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001abe5:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001abeb:	88 1d 60 44 02 c0    	mov    BYTE PTR ds:0xc0024460,bl
c001abf1:	eb 18                	jmp    c001ac0b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001abf3:	50                   	push   eax
c001abf4:	68 00 08 00 00       	push   0x800
c001abf9:	6a 00                	push   0x0
c001abfb:	57                   	push   edi
c001abfc:	e8 ef 58 fe ff       	call   c00004f0 <memset>
c001ac01:	83 c4 10             	add    esp,0x10
c001ac04:	b8 01 00 00 00       	mov    eax,0x1
c001ac09:	eb 0e                	jmp    c001ac19 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001ac0b:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001ac10:	b9 00 08 00 00       	mov    ecx,0x800
c001ac15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac17:	31 c0                	xor    eax,eax
c001ac19:	5b                   	pop    ebx
c001ac1a:	5e                   	pop    esi
c001ac1b:	5f                   	pop    edi
c001ac1c:	c3                   	ret    
c001ac1d:	90                   	nop

c001ac1e <ISO9660::tryMount(LogicalDisk*, int)>:
c001ac1e:	53                   	push   ebx
c001ac1f:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001ac25:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001ac2f:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001ac36:	8d 58 41             	lea    ebx,[eax+0x41]
c001ac39:	0f be db             	movsx  ebx,bl
c001ac3c:	53                   	push   ebx
c001ac3d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ac41:	50                   	push   eax
c001ac42:	6a 10                	push   0x10
c001ac44:	e8 56 ff ff ff       	call   c001ab9f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ac49:	83 c4 10             	add    esp,0x10
c001ac4c:	31 d2                	xor    edx,edx
c001ac4e:	85 c0                	test   eax,eax
c001ac50:	75 33                	jne    c001ac85 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac52:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ac57:	75 2c                	jne    c001ac85 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac59:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ac5e:	75 25                	jne    c001ac85 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac60:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ac65:	75 1e                	jne    c001ac85 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac67:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ac6c:	75 17                	jne    c001ac85 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac6e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ac73:	75 10                	jne    c001ac85 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac75:	83 ec 0c             	sub    esp,0xc
c001ac78:	53                   	push   ebx
c001ac79:	e8 c8 bd fe ff       	call   c0006a46 <init_percd>
c001ac7e:	83 c4 10             	add    esp,0x10
c001ac81:	40                   	inc    eax
c001ac82:	0f 95 c2             	setne  dl
c001ac85:	88 d0                	mov    al,dl
c001ac87:	81 c4 08 08 00 00    	add    esp,0x808
c001ac8d:	5b                   	pop    ebx
c001ac8e:	c3                   	ret    
c001ac8f:	90                   	nop

c001ac90 <ISO9660::ISO9660()>:
c001ac90:	83 ec 0c             	sub    esp,0xc
c001ac93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac97:	83 ec 0c             	sub    esp,0xc
c001ac9a:	50                   	push   eax
c001ac9b:	e8 3a 0b ff ff       	call   c000b7da <Filesystem::Filesystem()>
c001aca0:	83 c4 10             	add    esp,0x10
c001aca3:	ba 3c 32 02 c0       	mov    edx,0xc002323c
c001aca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acac:	89 10                	mov    DWORD PTR [eax],edx
c001acae:	e8 a5 be fe ff       	call   c0006b58 <fs_iso9660_init>
c001acb3:	90                   	nop
c001acb4:	83 c4 0c             	add    esp,0xc
c001acb7:	c3                   	ret    

c001acb8 <SoundCard::beginPlayback()>:
c001acb8:	c7 44 24 04 a0 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc00232a0
c001acc0:	e9 4e 6a ff ff       	jmp    c0011713 <KePanic(char const*)>
c001acc5:	90                   	nop

c001acc6 <SoundCard::stopPlayback()>:
c001acc6:	c7 44 24 04 a0 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc00232a0
c001acce:	e9 40 6a ff ff       	jmp    c0011713 <KePanic(char const*)>
c001acd3:	90                   	nop

c001acd4 <SoundCard::SoundCard(char const*)>:
c001acd4:	83 ec 1c             	sub    esp,0x1c
c001acd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acdb:	83 ec 08             	sub    esp,0x8
c001acde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ace2:	50                   	push   eax
c001ace3:	e8 e0 1e ff ff       	call   c000cbc8 <Device::Device(char const*)>
c001ace8:	83 c4 10             	add    esp,0x10
c001aceb:	ba ec 32 02 c0       	mov    edx,0xc00232ec
c001acf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acf4:	89 10                	mov    DWORD PTR [eax],edx
c001acf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acfa:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ad01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad05:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ad0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad13:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ad1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad21:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ad2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad2f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ad39:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad41:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ad46:	7f 1a                	jg     c001ad62 <SoundCard::SoundCard(char const*)+0x8e>
c001ad48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad50:	83 c2 54             	add    edx,0x54
c001ad53:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ad5b:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ad60:	eb df                	jmp    c001ad41 <SoundCard::SoundCard(char const*)+0x6d>
c001ad62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad66:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ad6d:	90                   	nop
c001ad6e:	83 c4 1c             	add    esp,0x1c
c001ad71:	c3                   	ret    

c001ad72 <SoundCard::~SoundCard()>:
c001ad72:	83 ec 0c             	sub    esp,0xc
c001ad75:	ba ec 32 02 c0       	mov    edx,0xc00232ec
c001ad7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad7e:	89 10                	mov    DWORD PTR [eax],edx
c001ad80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad84:	83 ec 0c             	sub    esp,0xc
c001ad87:	50                   	push   eax
c001ad88:	e8 6b 1b ff ff       	call   c000c8f8 <Device::~Device()>
c001ad8d:	83 c4 10             	add    esp,0x10
c001ad90:	90                   	nop
c001ad91:	83 c4 0c             	add    esp,0xc
c001ad94:	c3                   	ret    
c001ad95:	90                   	nop

c001ad96 <SoundCard::~SoundCard()>:
c001ad96:	83 ec 0c             	sub    esp,0xc
c001ad99:	83 ec 0c             	sub    esp,0xc
c001ad9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ada0:	e8 cd ff ff ff       	call   c001ad72 <SoundCard::~SoundCard()>
c001ada5:	83 c4 10             	add    esp,0x10
c001ada8:	83 ec 08             	sub    esp,0x8
c001adab:	68 e8 01 00 00       	push   0x1e8
c001adb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adb4:	e8 8f fa fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c001adb9:	83 c4 10             	add    esp,0x10
c001adbc:	83 c4 0c             	add    esp,0xc
c001adbf:	c3                   	ret    

c001adc0 <SoundCard::configureRates(int, int, int)>:
c001adc0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001adc4:	31 c0                	xor    eax,eax
c001adc6:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001adcd:	75 20                	jne    c001adef <SoundCard::configureRates(int, int, int)+0x2f>
c001adcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001add3:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001add9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001addd:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ade3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade7:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001aded:	b0 01                	mov    al,0x1
c001adef:	c3                   	ret    

c001adf0 <SoundCard::getSamples16(int, short*)>:
c001adf0:	55                   	push   ebp
c001adf1:	57                   	push   edi
c001adf2:	31 ff                	xor    edi,edi
c001adf4:	56                   	push   esi
c001adf5:	53                   	push   ebx
c001adf6:	31 db                	xor    ebx,ebx
c001adf8:	83 ec 10             	sub    esp,0x10
c001adfb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001adff:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ae03:	8d 04 36             	lea    eax,[esi+esi*1]
c001ae06:	50                   	push   eax
c001ae07:	6a 00                	push   0x0
c001ae09:	55                   	push   ebp
c001ae0a:	e8 e1 56 fe ff       	call   c00004f0 <memset>
c001ae0f:	83 c4 10             	add    esp,0x10
c001ae12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae16:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001ae1d:	85 c0                	test   eax,eax
c001ae1f:	74 1b                	je     c001ae3c <SoundCard::getSamples16(int, short*)+0x4c>
c001ae21:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ae25:	75 15                	jne    c001ae3c <SoundCard::getSamples16(int, short*)+0x4c>
c001ae27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ae2b:	55                   	push   ebp
c001ae2c:	56                   	push   esi
c001ae2d:	50                   	push   eax
c001ae2e:	e8 f1 02 00 00       	call   c001b124 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ae33:	83 c4 10             	add    esp,0x10
c001ae36:	39 c7                	cmp    edi,eax
c001ae38:	7d 02                	jge    c001ae3c <SoundCard::getSamples16(int, short*)+0x4c>
c001ae3a:	89 c7                	mov    edi,eax
c001ae3c:	43                   	inc    ebx
c001ae3d:	83 fb 20             	cmp    ebx,0x20
c001ae40:	75 d0                	jne    c001ae12 <SoundCard::getSamples16(int, short*)+0x22>
c001ae42:	83 c4 0c             	add    esp,0xc
c001ae45:	89 f8                	mov    eax,edi
c001ae47:	5b                   	pop    ebx
c001ae48:	5e                   	pop    esi
c001ae49:	5f                   	pop    edi
c001ae4a:	5d                   	pop    ebp
c001ae4b:	c3                   	ret    

c001ae4c <SoundCard::getSamples32(int, int*)>:
c001ae4c:	55                   	push   ebp
c001ae4d:	57                   	push   edi
c001ae4e:	31 ff                	xor    edi,edi
c001ae50:	56                   	push   esi
c001ae51:	31 f6                	xor    esi,esi
c001ae53:	53                   	push   ebx
c001ae54:	83 ec 10             	sub    esp,0x10
c001ae57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae5b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ae5f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ae63:	c1 e0 02             	shl    eax,0x2
c001ae66:	50                   	push   eax
c001ae67:	6a 00                	push   0x0
c001ae69:	55                   	push   ebp
c001ae6a:	e8 81 56 fe ff       	call   c00004f0 <memset>
c001ae6f:	83 c4 10             	add    esp,0x10
c001ae72:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ae79:	85 c0                	test   eax,eax
c001ae7b:	74 1b                	je     c001ae98 <SoundCard::getSamples32(int, int*)+0x4c>
c001ae7d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ae81:	75 15                	jne    c001ae98 <SoundCard::getSamples32(int, int*)+0x4c>
c001ae83:	53                   	push   ebx
c001ae84:	55                   	push   ebp
c001ae85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae89:	50                   	push   eax
c001ae8a:	e8 61 03 00 00       	call   c001b1f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ae8f:	83 c4 10             	add    esp,0x10
c001ae92:	39 c6                	cmp    esi,eax
c001ae94:	7d 02                	jge    c001ae98 <SoundCard::getSamples32(int, int*)+0x4c>
c001ae96:	89 c6                	mov    esi,eax
c001ae98:	47                   	inc    edi
c001ae99:	83 ff 20             	cmp    edi,0x20
c001ae9c:	75 d4                	jne    c001ae72 <SoundCard::getSamples32(int, int*)+0x26>
c001ae9e:	85 f6                	test   esi,esi
c001aea0:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001aea7:	75 0f                	jne    c001aeb8 <SoundCard::getSamples32(int, int*)+0x6c>
c001aea9:	85 c0                	test   eax,eax
c001aeab:	74 1b                	je     c001aec8 <SoundCard::getSamples32(int, int*)+0x7c>
c001aead:	83 ec 0c             	sub    esp,0xc
c001aeb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aeb2:	53                   	push   ebx
c001aeb3:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001aeb6:	eb 0d                	jmp    c001aec5 <SoundCard::getSamples32(int, int*)+0x79>
c001aeb8:	85 c0                	test   eax,eax
c001aeba:	75 0c                	jne    c001aec8 <SoundCard::getSamples32(int, int*)+0x7c>
c001aebc:	83 ec 0c             	sub    esp,0xc
c001aebf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aec1:	53                   	push   ebx
c001aec2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001aec5:	83 c4 10             	add    esp,0x10
c001aec8:	83 c4 0c             	add    esp,0xc
c001aecb:	89 f0                	mov    eax,esi
c001aecd:	5b                   	pop    ebx
c001aece:	5e                   	pop    esi
c001aecf:	5f                   	pop    edi
c001aed0:	5d                   	pop    ebp
c001aed1:	c3                   	ret    

c001aed2 <SoundCard::addChannel(SoundPort*)>:
c001aed2:	83 ec 0c             	sub    esp,0xc
c001aed5:	31 c0                	xor    eax,eax
c001aed7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aedb:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001aee3:	74 1b                	je     c001af00 <SoundCard::addChannel(SoundPort*)+0x2e>
c001aee5:	40                   	inc    eax
c001aee6:	83 f8 20             	cmp    eax,0x20
c001aee9:	75 f0                	jne    c001aedb <SoundCard::addChannel(SoundPort*)+0x9>
c001aeeb:	83 ec 0c             	sub    esp,0xc
c001aeee:	68 c5 32 02 c0       	push   0xc00232c5
c001aef3:	e8 1b 68 ff ff       	call   c0011713 <KePanic(char const*)>
c001aef8:	83 c4 10             	add    esp,0x10
c001aefb:	83 c8 ff             	or     eax,0xffffffff
c001aefe:	eb 0b                	jmp    c001af0b <SoundCard::addChannel(SoundPort*)+0x39>
c001af00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001af04:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001af0b:	83 c4 0c             	add    esp,0xc
c001af0e:	c3                   	ret    
c001af0f:	90                   	nop

c001af10 <SoundCard::removeChannel(int)>:
c001af10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af18:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001af23:	c3                   	ret    

c001af24 <SoundPort::SoundPort(int, int, int, int)>:
c001af24:	83 ec 0c             	sub    esp,0xc
c001af27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af2b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001af32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af36:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001af3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af42:	89 10                	mov    DWORD PTR [eax],edx
c001af44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af48:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af4c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001af4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001af57:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001af5a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001af5f:	75 13                	jne    c001af74 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001af61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af65:	8b 00                	mov    eax,DWORD PTR [eax]
c001af67:	05 a0 0f 00 00       	add    eax,0xfa0
c001af6c:	01 c0                	add    eax,eax
c001af6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af72:	66 90                	xchg   ax,ax
c001af74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af78:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001af7c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001af7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af83:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001af8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af8e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af91:	c1 e0 02             	shl    eax,0x2
c001af94:	83 ec 0c             	sub    esp,0xc
c001af97:	50                   	push   eax
c001af98:	e8 49 cb fe ff       	call   c0007ae6 <malloc>
c001af9d:	83 c4 10             	add    esp,0x10
c001afa0:	89 c2                	mov    edx,eax
c001afa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afa6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001afa9:	90                   	nop
c001afaa:	83 c4 0c             	add    esp,0xc
c001afad:	c3                   	ret    
c001afae:	66 90                	xchg   ax,ax

c001afb0 <SoundPort::~SoundPort()>:
c001afb0:	83 ec 0c             	sub    esp,0xc
c001afb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afb7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001afba:	85 c0                	test   eax,eax
c001afbc:	74 1e                	je     c001afdc <SoundPort::~SoundPort()+0x2c>
c001afbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afc2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001afc5:	83 ec 0c             	sub    esp,0xc
c001afc8:	50                   	push   eax
c001afc9:	e8 28 cb fe ff       	call   c0007af6 <free>
c001afce:	83 c4 10             	add    esp,0x10
c001afd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afd5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001afdc:	90                   	nop
c001afdd:	83 c4 0c             	add    esp,0xc
c001afe0:	c3                   	ret    
c001afe1:	90                   	nop
c001afe2:	66 90                	xchg   ax,ax

c001afe4 <SoundPort::unpause()>:
c001afe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afe8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001afec:	c3                   	ret    
c001afed:	90                   	nop
c001afee:	66 90                	xchg   ax,ax

c001aff0 <SoundPort::pause()>:
c001aff0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aff4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aff8:	c3                   	ret    
c001aff9:	90                   	nop
c001affa:	66 90                	xchg   ax,ax

c001affc <SoundPort::getBufferUsed()>:
c001affc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b000:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b003:	c3                   	ret    

c001b004 <SoundPort::getBufferSize()>:
c001b004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b008:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b00b:	c3                   	ret    

c001b00c <SoundPort::buffer16(short*, int)>:
c001b00c:	55                   	push   ebp
c001b00d:	57                   	push   edi
c001b00e:	56                   	push   esi
c001b00f:	53                   	push   ebx
c001b010:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b014:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001b018:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b01b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b01e:	74 68                	je     c001b088 <SoundPort::buffer16(short*, int)+0x7c>
c001b020:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b024:	85 c9                	test   ecx,ecx
c001b026:	7e 60                	jle    c001b088 <SoundPort::buffer16(short*, int)+0x7c>
c001b028:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001b02c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b02f:	c1 e1 0f             	shl    ecx,0xf
c001b032:	8d 70 01             	lea    esi,[eax+0x1]
c001b035:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b038:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b03b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b03e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b041:	74 4d                	je     c001b090 <SoundPort::buffer16(short*, int)+0x84>
c001b043:	31 f6                	xor    esi,esi
c001b045:	eb 21                	jmp    c001b068 <SoundPort::buffer16(short*, int)+0x5c>
c001b047:	90                   	nop
c001b048:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001b04d:	8d 79 01             	lea    edi,[ecx+0x1]
c001b050:	c1 e3 0f             	shl    ebx,0xf
c001b053:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001b056:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001b059:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001b05c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b05f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b062:	74 1c                	je     c001b080 <SoundPort::buffer16(short*, int)+0x74>
c001b064:	89 c6                	mov    esi,eax
c001b066:	66 90                	xchg   ax,ax
c001b068:	8d 46 01             	lea    eax,[esi+0x1]
c001b06b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b06f:	75 d7                	jne    c001b048 <SoundPort::buffer16(short*, int)+0x3c>
c001b071:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b075:	8d 76 00             	lea    esi,[esi+0x0]
c001b078:	5b                   	pop    ebx
c001b079:	5e                   	pop    esi
c001b07a:	5f                   	pop    edi
c001b07b:	5d                   	pop    ebp
c001b07c:	c3                   	ret    
c001b07d:	8d 76 00             	lea    esi,[esi+0x0]
c001b080:	5b                   	pop    ebx
c001b081:	8d 46 02             	lea    eax,[esi+0x2]
c001b084:	5e                   	pop    esi
c001b085:	5f                   	pop    edi
c001b086:	5d                   	pop    ebp
c001b087:	c3                   	ret    
c001b088:	5b                   	pop    ebx
c001b089:	31 c0                	xor    eax,eax
c001b08b:	5e                   	pop    esi
c001b08c:	5f                   	pop    edi
c001b08d:	5d                   	pop    ebp
c001b08e:	c3                   	ret    
c001b08f:	90                   	nop
c001b090:	b8 01 00 00 00       	mov    eax,0x1
c001b095:	eb e1                	jmp    c001b078 <SoundPort::buffer16(short*, int)+0x6c>
c001b097:	90                   	nop

c001b098 <SoundPort::buffer32(int*, int)>:
c001b098:	55                   	push   ebp
c001b099:	57                   	push   edi
c001b09a:	56                   	push   esi
c001b09b:	53                   	push   ebx
c001b09c:	83 ec 04             	sub    esp,0x4
c001b09f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b0a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b0a7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b0aa:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b0ae:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0b1:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b0b4:	74 5a                	je     c001b110 <SoundPort::buffer32(int*, int)+0x78>
c001b0b6:	85 c0                	test   eax,eax
c001b0b8:	7e 56                	jle    c001b110 <SoundPort::buffer32(int*, int)+0x78>
c001b0ba:	8d 71 01             	lea    esi,[ecx+0x1]
c001b0bd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b0c0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b0c3:	8b 37                	mov    esi,DWORD PTR [edi]
c001b0c5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b0c8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b0cb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b0ce:	74 4c                	je     c001b11c <SoundPort::buffer32(int*, int)+0x84>
c001b0d0:	31 f6                	xor    esi,esi
c001b0d2:	eb 1c                	jmp    c001b0f0 <SoundPort::buffer32(int*, int)+0x58>
c001b0d4:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b0d7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b0da:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b0dd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b0e0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b0e4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b0e7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b0ea:	74 18                	je     c001b104 <SoundPort::buffer32(int*, int)+0x6c>
c001b0ec:	89 de                	mov    esi,ebx
c001b0ee:	66 90                	xchg   ax,ax
c001b0f0:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b0f3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b0f6:	75 dc                	jne    c001b0d4 <SoundPort::buffer32(int*, int)+0x3c>
c001b0f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b0fb:	90                   	nop
c001b0fc:	83 c4 04             	add    esp,0x4
c001b0ff:	5b                   	pop    ebx
c001b100:	5e                   	pop    esi
c001b101:	5f                   	pop    edi
c001b102:	5d                   	pop    ebp
c001b103:	c3                   	ret    
c001b104:	83 c4 04             	add    esp,0x4
c001b107:	8d 46 02             	lea    eax,[esi+0x2]
c001b10a:	5b                   	pop    ebx
c001b10b:	5e                   	pop    esi
c001b10c:	5f                   	pop    edi
c001b10d:	5d                   	pop    ebp
c001b10e:	c3                   	ret    
c001b10f:	90                   	nop
c001b110:	83 c4 04             	add    esp,0x4
c001b113:	31 c0                	xor    eax,eax
c001b115:	5b                   	pop    ebx
c001b116:	5e                   	pop    esi
c001b117:	5f                   	pop    edi
c001b118:	5d                   	pop    ebp
c001b119:	c3                   	ret    
c001b11a:	66 90                	xchg   ax,ax
c001b11c:	b8 01 00 00 00       	mov    eax,0x1
c001b121:	eb d9                	jmp    c001b0fc <SoundPort::buffer32(int*, int)+0x64>
c001b123:	90                   	nop

c001b124 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b124:	57                   	push   edi
c001b125:	56                   	push   esi
c001b126:	53                   	push   ebx
c001b127:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b12b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b12f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001b135:	39 03                	cmp    DWORD PTR [ebx],eax
c001b137:	74 13                	je     c001b14c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001b139:	83 ec 0c             	sub    esp,0xc
c001b13c:	68 18 33 02 c0       	push   0xc0023318
c001b141:	e8 cd 65 ff ff       	call   c0011713 <KePanic(char const*)>
c001b146:	83 c4 10             	add    esp,0x10
c001b149:	8d 76 00             	lea    esi,[esi+0x0]
c001b14c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001b152:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b155:	74 11                	je     c001b168 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001b157:	83 ec 0c             	sub    esp,0xc
c001b15a:	68 57 33 02 c0       	push   0xc0023357
c001b15f:	e8 af 65 ff ff       	call   c0011713 <KePanic(char const*)>
c001b164:	83 c4 10             	add    esp,0x10
c001b167:	90                   	nop
c001b168:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001b16e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b171:	74 11                	je     c001b184 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b173:	83 ec 0c             	sub    esp,0xc
c001b176:	68 57 33 02 c0       	push   0xc0023357
c001b17b:	e8 93 65 ff ff       	call   c0011713 <KePanic(char const*)>
c001b180:	83 c4 10             	add    esp,0x10
c001b183:	90                   	nop
c001b184:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b187:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b18b:	7e 07                	jle    c001b194 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b18d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b191:	8d 76 00             	lea    esi,[esi+0x0]
c001b194:	85 f6                	test   esi,esi
c001b196:	7e 2c                	jle    c001b1c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b198:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b19c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b19f:	31 c9                	xor    ecx,ecx
c001b1a1:	01 d7                	add    edi,edx
c001b1a3:	90                   	nop
c001b1a4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b1a7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b1aa:	85 c0                	test   eax,eax
c001b1ac:	79 06                	jns    c001b1b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b1ae:	05 ff 7f 00 00       	add    eax,0x7fff
c001b1b3:	90                   	nop
c001b1b4:	c1 f8 0f             	sar    eax,0xf
c001b1b7:	83 c1 04             	add    ecx,0x4
c001b1ba:	66 01 02             	add    WORD PTR [edx],ax
c001b1bd:	83 c2 02             	add    edx,0x2
c001b1c0:	39 d7                	cmp    edi,edx
c001b1c2:	75 e0                	jne    c001b1a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b1c4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b1c7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b1ca:	83 ec 04             	sub    esp,0x4
c001b1cd:	29 f0                	sub    eax,esi
c001b1cf:	c1 e0 02             	shl    eax,0x2
c001b1d2:	50                   	push   eax
c001b1d3:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b1d6:	50                   	push   eax
c001b1d7:	52                   	push   edx
c001b1d8:	e8 f3 51 fe ff       	call   c00003d0 <memmove>
c001b1dd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b1e0:	83 c4 10             	add    esp,0x10
c001b1e3:	29 f0                	sub    eax,esi
c001b1e5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b1e8:	89 f0                	mov    eax,esi
c001b1ea:	5b                   	pop    ebx
c001b1eb:	5e                   	pop    esi
c001b1ec:	5f                   	pop    edi
c001b1ed:	c3                   	ret    
c001b1ee:	66 90                	xchg   ax,ax

c001b1f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b1f0:	57                   	push   edi
c001b1f1:	56                   	push   esi
c001b1f2:	53                   	push   ebx
c001b1f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1f7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b1fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b1ff:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b205:	39 06                	cmp    DWORD PTR [esi],eax
c001b207:	74 13                	je     c001b21c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b209:	83 ec 0c             	sub    esp,0xc
c001b20c:	68 38 33 02 c0       	push   0xc0023338
c001b211:	e8 fd 64 ff ff       	call   c0011713 <KePanic(char const*)>
c001b216:	83 c4 10             	add    esp,0x10
c001b219:	8d 76 00             	lea    esi,[esi+0x0]
c001b21c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b222:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b225:	74 11                	je     c001b238 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b227:	83 ec 0c             	sub    esp,0xc
c001b22a:	68 73 33 02 c0       	push   0xc0023373
c001b22f:	e8 df 64 ff ff       	call   c0011713 <KePanic(char const*)>
c001b234:	83 c4 10             	add    esp,0x10
c001b237:	90                   	nop
c001b238:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b23e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b241:	74 11                	je     c001b254 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b243:	83 ec 0c             	sub    esp,0xc
c001b246:	68 73 33 02 c0       	push   0xc0023373
c001b24b:	e8 c3 64 ff ff       	call   c0011713 <KePanic(char const*)>
c001b250:	83 c4 10             	add    esp,0x10
c001b253:	90                   	nop
c001b254:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b257:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b25b:	7e 07                	jle    c001b264 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b25d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b261:	8d 76 00             	lea    esi,[esi+0x0]
c001b264:	85 ff                	test   edi,edi
c001b266:	7e 1c                	jle    c001b284 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b268:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b26f:	31 c0                	xor    eax,eax
c001b271:	8d 76 00             	lea    esi,[esi+0x0]
c001b274:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b277:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b27a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b27d:	83 c0 04             	add    eax,0x4
c001b280:	39 c1                	cmp    ecx,eax
c001b282:	75 f0                	jne    c001b274 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b284:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b287:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b28a:	83 ec 04             	sub    esp,0x4
c001b28d:	29 f8                	sub    eax,edi
c001b28f:	c1 e0 02             	shl    eax,0x2
c001b292:	50                   	push   eax
c001b293:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b296:	50                   	push   eax
c001b297:	52                   	push   edx
c001b298:	e8 33 51 fe ff       	call   c00003d0 <memmove>
c001b29d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b2a0:	83 c4 10             	add    esp,0x10
c001b2a3:	29 f8                	sub    eax,edi
c001b2a5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b2a8:	89 f8                	mov    eax,edi
c001b2aa:	5b                   	pop    ebx
c001b2ab:	5e                   	pop    esi
c001b2ac:	5f                   	pop    edi
c001b2ad:	c3                   	ret    

c001b2ae <PCI::open(int, int, void*)>:
c001b2ae:	83 ec 18             	sub    esp,0x18
c001b2b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b2b9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b2bf:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2c1:	50                   	push   eax
c001b2c2:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b2c5:	31 c0                	xor    eax,eax
c001b2c7:	83 c4 1c             	add    esp,0x1c
c001b2ca:	c3                   	ret    
c001b2cb:	90                   	nop

c001b2cc <PCI::close(int, int, void*)>:
c001b2cc:	31 c0                	xor    eax,eax
c001b2ce:	c3                   	ret    
c001b2cf:	90                   	nop

c001b2d0 <PCI::PCI()>:
c001b2d0:	83 ec 0c             	sub    esp,0xc
c001b2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2d7:	83 ec 08             	sub    esp,0x8
c001b2da:	68 8f 33 02 c0       	push   0xc002338f
c001b2df:	50                   	push   eax
c001b2e0:	e8 73 10 ff ff       	call   c000c358 <Bus::Bus(char const*)>
c001b2e5:	83 c4 10             	add    esp,0x10
c001b2e8:	ba 38 34 02 c0       	mov    edx,0xc0023438
c001b2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2f1:	89 10                	mov    DWORD PTR [eax],edx
c001b2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2f7:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b305:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b30e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b314:	0f b6 d0             	movzx  edx,al
c001b317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b31b:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b326:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b32c:	0f b6 d0             	movzx  edx,al
c001b32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b333:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b33c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b342:	8d 50 01             	lea    edx,[eax+0x1]
c001b345:	88 d1                	mov    cl,dl
c001b347:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b34b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b351:	0f b6 d0             	movzx  edx,al
c001b354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b358:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b35c:	83 c9 c0             	or     ecx,0xffffffc0
c001b35f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b363:	90                   	nop
c001b364:	83 c4 0c             	add    esp,0xc
c001b367:	c3                   	ret    

c001b368 <PCI::readBAR8(unsigned int, int)>:
c001b368:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b36c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b370:	f6 c2 01             	test   dl,0x1
c001b373:	74 07                	je     c001b37c <PCI::readBAR8(unsigned int, int)+0x14>
c001b375:	83 e2 fc             	and    edx,0xfffffffc
c001b378:	01 c2                	add    edx,eax
c001b37a:	ec                   	in     al,dx
c001b37b:	c3                   	ret    
c001b37c:	83 e2 f0             	and    edx,0xfffffff0
c001b37f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b382:	c3                   	ret    
c001b383:	90                   	nop

c001b384 <PCI::readBAR16(unsigned int, int)>:
c001b384:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b388:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b38c:	f6 c2 01             	test   dl,0x1
c001b38f:	74 08                	je     c001b399 <PCI::readBAR16(unsigned int, int)+0x15>
c001b391:	83 e2 fc             	and    edx,0xfffffffc
c001b394:	01 c2                	add    edx,eax
c001b396:	66 ed                	in     ax,dx
c001b398:	c3                   	ret    
c001b399:	83 e2 f0             	and    edx,0xfffffff0
c001b39c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b3a0:	c3                   	ret    
c001b3a1:	90                   	nop

c001b3a2 <PCI::readBAR32(unsigned int, int)>:
c001b3a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b3a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3aa:	f6 c2 01             	test   dl,0x1
c001b3ad:	74 07                	je     c001b3b6 <PCI::readBAR32(unsigned int, int)+0x14>
c001b3af:	83 e2 fc             	and    edx,0xfffffffc
c001b3b2:	01 c2                	add    edx,eax
c001b3b4:	ed                   	in     eax,dx
c001b3b5:	c3                   	ret    
c001b3b6:	83 e2 f0             	and    edx,0xfffffff0
c001b3b9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b3bc:	c3                   	ret    
c001b3bd:	90                   	nop

c001b3be <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b3be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b3c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3ca:	f6 c2 01             	test   dl,0x1
c001b3cd:	74 07                	je     c001b3d6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b3cf:	83 e2 fc             	and    edx,0xfffffffc
c001b3d2:	01 ca                	add    edx,ecx
c001b3d4:	ee                   	out    dx,al
c001b3d5:	c3                   	ret    
c001b3d6:	83 e2 f0             	and    edx,0xfffffff0
c001b3d9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b3dc:	c3                   	ret    
c001b3dd:	90                   	nop

c001b3de <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b3de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b3e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3ea:	f6 c2 01             	test   dl,0x1
c001b3ed:	74 08                	je     c001b3f7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b3ef:	83 e2 fc             	and    edx,0xfffffffc
c001b3f2:	01 ca                	add    edx,ecx
c001b3f4:	66 ef                	out    dx,ax
c001b3f6:	c3                   	ret    
c001b3f7:	83 e2 f0             	and    edx,0xfffffff0
c001b3fa:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b3fe:	c3                   	ret    
c001b3ff:	90                   	nop

c001b400 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b400:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b404:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b408:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b40c:	f6 c2 01             	test   dl,0x1
c001b40f:	74 07                	je     c001b418 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b411:	83 e2 fc             	and    edx,0xfffffffc
c001b414:	01 ca                	add    edx,ecx
c001b416:	ef                   	out    dx,eax
c001b417:	c3                   	ret    
c001b418:	83 e2 f0             	and    edx,0xfffffff0
c001b41b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b41e:	c3                   	ret    
c001b41f:	90                   	nop

c001b420 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b420:	55                   	push   ebp
c001b421:	57                   	push   edi
c001b422:	56                   	push   esi
c001b423:	53                   	push   ebx
c001b424:	83 ec 0c             	sub    esp,0xc
c001b427:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b42c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b430:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b434:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b438:	83 fe 07             	cmp    esi,0x7
c001b43b:	76 10                	jbe    c001b44d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b43d:	83 ec 0c             	sub    esp,0xc
c001b440:	68 97 33 02 c0       	push   0xc0023397
c001b445:	e8 c9 62 ff ff       	call   c0011713 <KePanic(char const*)>
c001b44a:	83 c4 10             	add    esp,0x10
c001b44d:	0f b6 db             	movzx  ebx,bl
c001b450:	83 fb 0f             	cmp    ebx,0xf
c001b453:	76 10                	jbe    c001b465 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b455:	83 ec 0c             	sub    esp,0xc
c001b458:	68 c7 33 02 c0       	push   0xc00233c7
c001b45d:	e8 b1 62 ff ff       	call   c0011713 <KePanic(char const*)>
c001b462:	83 c4 10             	add    esp,0x10
c001b465:	8d 04 36             	lea    eax,[esi+esi*1]
c001b468:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b46d:	83 c8 f0             	or     eax,0xfffffff0
c001b470:	ee                   	out    dx,al
c001b471:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b476:	89 e8                	mov    eax,ebp
c001b478:	ee                   	out    dx,al
c001b479:	83 c4 0c             	add    esp,0xc
c001b47c:	89 d8                	mov    eax,ebx
c001b47e:	89 f9                	mov    ecx,edi
c001b480:	c1 e0 08             	shl    eax,0x8
c001b483:	0f b6 d9             	movzx  ebx,cl
c001b486:	83 e3 fc             	and    ebx,0xfffffffc
c001b489:	09 d8                	or     eax,ebx
c001b48b:	5b                   	pop    ebx
c001b48c:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b491:	5e                   	pop    esi
c001b492:	5f                   	pop    edi
c001b493:	5d                   	pop    ebp
c001b494:	c3                   	ret    
c001b495:	90                   	nop

c001b496 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b496:	57                   	push   edi
c001b497:	56                   	push   esi
c001b498:	53                   	push   ebx
c001b499:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b49d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4a1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b4a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b4ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b4af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b4b3:	83 ff 01             	cmp    edi,0x1
c001b4b6:	75 3f                	jne    c001b4f7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b4b8:	89 de                	mov    esi,ebx
c001b4ba:	0f b6 c0             	movzx  eax,al
c001b4bd:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b4c3:	c1 e0 10             	shl    eax,0x10
c001b4c6:	0f b6 c9             	movzx  ecx,cl
c001b4c9:	09 f0                	or     eax,esi
c001b4cb:	c1 e1 08             	shl    ecx,0x8
c001b4ce:	0f b6 d2             	movzx  edx,dl
c001b4d1:	09 c8                	or     eax,ecx
c001b4d3:	c1 e2 0b             	shl    edx,0xb
c001b4d6:	09 d0                	or     eax,edx
c001b4d8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b4dd:	0d 00 00 00 80       	or     eax,0x80000000
c001b4e2:	ef                   	out    dx,eax
c001b4e3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b4e8:	ed                   	in     eax,dx
c001b4e9:	83 e3 02             	and    ebx,0x2
c001b4ec:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b4f3:	d3 e8                	shr    eax,cl
c001b4f5:	eb 44                	jmp    c001b53b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b4f7:	83 ff 02             	cmp    edi,0x2
c001b4fa:	75 2d                	jne    c001b529 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b4fc:	83 ec 0c             	sub    esp,0xc
c001b4ff:	0f b6 c9             	movzx  ecx,cl
c001b502:	0f b6 d2             	movzx  edx,dl
c001b505:	0f b6 fb             	movzx  edi,bl
c001b508:	0f b6 c0             	movzx  eax,al
c001b50b:	57                   	push   edi
c001b50c:	51                   	push   ecx
c001b50d:	52                   	push   edx
c001b50e:	50                   	push   eax
c001b50f:	56                   	push   esi
c001b510:	e8 0b ff ff ff       	call   c001b420 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b515:	89 c2                	mov    edx,eax
c001b517:	ed                   	in     eax,dx
c001b518:	83 e3 02             	and    ebx,0x2
c001b51b:	83 c4 20             	add    esp,0x20
c001b51e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b525:	d3 e8                	shr    eax,cl
c001b527:	eb 12                	jmp    c001b53b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b529:	83 ec 0c             	sub    esp,0xc
c001b52c:	68 f7 33 02 c0       	push   0xc00233f7
c001b531:	e8 dd 61 ff ff       	call   c0011713 <KePanic(char const*)>
c001b536:	83 c4 10             	add    esp,0x10
c001b539:	31 c0                	xor    eax,eax
c001b53b:	5b                   	pop    ebx
c001b53c:	5e                   	pop    esi
c001b53d:	5f                   	pop    edi
c001b53e:	c3                   	ret    
c001b53f:	90                   	nop

c001b540 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b540:	83 ec 18             	sub    esp,0x18
c001b543:	6a 00                	push   0x0
c001b545:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b54a:	50                   	push   eax
c001b54b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b550:	50                   	push   eax
c001b551:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b556:	50                   	push   eax
c001b557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b55b:	e8 36 ff ff ff       	call   c001b496 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b560:	83 c4 2c             	add    esp,0x2c
c001b563:	c3                   	ret    

c001b564 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b564:	83 ec 18             	sub    esp,0x18
c001b567:	6a 0e                	push   0xe
c001b569:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b56e:	50                   	push   eax
c001b56f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b574:	50                   	push   eax
c001b575:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b57a:	50                   	push   eax
c001b57b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b57f:	e8 12 ff ff ff       	call   c001b496 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b584:	83 c4 2c             	add    esp,0x2c
c001b587:	0f b6 c0             	movzx  eax,al
c001b58a:	c3                   	ret    
c001b58b:	90                   	nop

c001b58c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b58c:	55                   	push   ebp
c001b58d:	57                   	push   edi
c001b58e:	56                   	push   esi
c001b58f:	53                   	push   ebx
c001b590:	83 ec 18             	sub    esp,0x18
c001b593:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b598:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b59d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b5a2:	6a 0a                	push   0xa
c001b5a4:	56                   	push   esi
c001b5a5:	55                   	push   ebp
c001b5a6:	57                   	push   edi
c001b5a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b5ab:	e8 e6 fe ff ff       	call   c001b496 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5b0:	83 c4 14             	add    esp,0x14
c001b5b3:	89 c3                	mov    ebx,eax
c001b5b5:	6a 0a                	push   0xa
c001b5b7:	0f b6 db             	movzx  ebx,bl
c001b5ba:	56                   	push   esi
c001b5bb:	55                   	push   ebp
c001b5bc:	57                   	push   edi
c001b5bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b5c1:	e8 d0 fe ff ff       	call   c001b496 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5c6:	83 c4 2c             	add    esp,0x2c
c001b5c9:	25 00 ff 00 00       	and    eax,0xff00
c001b5ce:	09 d8                	or     eax,ebx
c001b5d0:	5b                   	pop    ebx
c001b5d1:	5e                   	pop    esi
c001b5d2:	5f                   	pop    edi
c001b5d3:	5d                   	pop    ebp
c001b5d4:	c3                   	ret    
c001b5d5:	90                   	nop

c001b5d6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b5d6:	83 ec 18             	sub    esp,0x18
c001b5d9:	6a 08                	push   0x8
c001b5db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5e0:	50                   	push   eax
c001b5e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5e6:	50                   	push   eax
c001b5e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5ec:	50                   	push   eax
c001b5ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5f1:	e8 a0 fe ff ff       	call   c001b496 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5f6:	83 c4 2c             	add    esp,0x2c
c001b5f9:	0f b6 c4             	movzx  eax,ah
c001b5fc:	c3                   	ret    
c001b5fd:	90                   	nop

c001b5fe <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b5fe:	83 ec 18             	sub    esp,0x18
c001b601:	6a 08                	push   0x8
c001b603:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b608:	50                   	push   eax
c001b609:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b60e:	50                   	push   eax
c001b60f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b614:	50                   	push   eax
c001b615:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b619:	e8 78 fe ff ff       	call   c001b496 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b61e:	83 c4 2c             	add    esp,0x2c
c001b621:	c3                   	ret    

c001b622 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b622:	83 ec 18             	sub    esp,0x18
c001b625:	6a 3c                	push   0x3c
c001b627:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b62c:	50                   	push   eax
c001b62d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b632:	50                   	push   eax
c001b633:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b638:	50                   	push   eax
c001b639:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b63d:	e8 54 fe ff ff       	call   c001b496 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b642:	83 c4 2c             	add    esp,0x2c
c001b645:	c3                   	ret    

c001b646 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b646:	83 ec 18             	sub    esp,0x18
c001b649:	6a 18                	push   0x18
c001b64b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b650:	50                   	push   eax
c001b651:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b656:	50                   	push   eax
c001b657:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b65c:	50                   	push   eax
c001b65d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b661:	e8 30 fe ff ff       	call   c001b496 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b666:	83 c4 2c             	add    esp,0x2c
c001b669:	0f b6 c4             	movzx  eax,ah
c001b66c:	c3                   	ret    
c001b66d:	90                   	nop

c001b66e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b66e:	55                   	push   ebp
c001b66f:	57                   	push   edi
c001b670:	56                   	push   esi
c001b671:	53                   	push   ebx
c001b672:	83 ec 28             	sub    esp,0x28
c001b675:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b679:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b67e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b683:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b688:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b68f:	8d 43 12             	lea    eax,[ebx+0x12]
c001b692:	83 c3 10             	add    ebx,0x10
c001b695:	0f b6 c0             	movzx  eax,al
c001b698:	0f b6 db             	movzx  ebx,bl
c001b69b:	50                   	push   eax
c001b69c:	51                   	push   ecx
c001b69d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b6a1:	57                   	push   edi
c001b6a2:	55                   	push   ebp
c001b6a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b6a7:	e8 ea fd ff ff       	call   c001b496 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6ac:	83 c4 14             	add    esp,0x14
c001b6af:	89 c6                	mov    esi,eax
c001b6b1:	53                   	push   ebx
c001b6b2:	c1 e6 10             	shl    esi,0x10
c001b6b5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b6b9:	51                   	push   ecx
c001b6ba:	57                   	push   edi
c001b6bb:	55                   	push   ebp
c001b6bc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b6c0:	e8 d1 fd ff ff       	call   c001b496 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6c5:	83 c4 3c             	add    esp,0x3c
c001b6c8:	0f b7 c0             	movzx  eax,ax
c001b6cb:	5b                   	pop    ebx
c001b6cc:	09 f0                	or     eax,esi
c001b6ce:	5e                   	pop    esi
c001b6cf:	5f                   	pop    edi
c001b6d0:	5d                   	pop    ebp
c001b6d1:	c3                   	ret    

c001b6d2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b6d2:	55                   	push   ebp
c001b6d3:	57                   	push   edi
c001b6d4:	56                   	push   esi
c001b6d5:	53                   	push   ebx
c001b6d6:	83 ec 0c             	sub    esp,0xc
c001b6d9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b6dd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b6e1:	89 f5                	mov    ebp,esi
c001b6e3:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b6e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b6ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b6f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b6f5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b6f9:	83 f9 01             	cmp    ecx,0x1
c001b6fc:	75 5d                	jne    c001b75b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b6fe:	0f b6 c8             	movzx  ecx,al
c001b701:	0f b6 d2             	movzx  edx,dl
c001b704:	c1 e1 10             	shl    ecx,0x10
c001b707:	c1 e2 0b             	shl    edx,0xb
c001b70a:	89 f0                	mov    eax,esi
c001b70c:	25 fc 00 00 00       	and    eax,0xfc
c001b711:	09 c1                	or     ecx,eax
c001b713:	89 e8                	mov    eax,ebp
c001b715:	0f b6 c0             	movzx  eax,al
c001b718:	c1 e0 08             	shl    eax,0x8
c001b71b:	09 c1                	or     ecx,eax
c001b71d:	09 d1                	or     ecx,edx
c001b71f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b724:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b72a:	89 c8                	mov    eax,ecx
c001b72c:	ef                   	out    dx,eax
c001b72d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b732:	ed                   	in     eax,dx
c001b733:	0f b7 db             	movzx  ebx,bx
c001b736:	83 e6 02             	and    esi,0x2
c001b739:	74 0a                	je     c001b745 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b73b:	0f b7 d0             	movzx  edx,ax
c001b73e:	c1 e3 10             	shl    ebx,0x10
c001b741:	09 d3                	or     ebx,edx
c001b743:	eb 05                	jmp    c001b74a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b745:	66 31 c0             	xor    ax,ax
c001b748:	09 c3                	or     ebx,eax
c001b74a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b74f:	89 c8                	mov    eax,ecx
c001b751:	ef                   	out    dx,eax
c001b752:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b757:	89 d8                	mov    eax,ebx
c001b759:	eb 41                	jmp    c001b79c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b75b:	83 f9 02             	cmp    ecx,0x2
c001b75e:	75 45                	jne    c001b7a5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b760:	83 ec 0c             	sub    esp,0xc
c001b763:	0f b6 d2             	movzx  edx,dl
c001b766:	89 f1                	mov    ecx,esi
c001b768:	0f b6 c0             	movzx  eax,al
c001b76b:	0f b6 f1             	movzx  esi,cl
c001b76e:	89 e9                	mov    ecx,ebp
c001b770:	56                   	push   esi
c001b771:	0f b6 c9             	movzx  ecx,cl
c001b774:	51                   	push   ecx
c001b775:	52                   	push   edx
c001b776:	50                   	push   eax
c001b777:	57                   	push   edi
c001b778:	e8 a3 fc ff ff       	call   c001b420 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b77d:	89 c2                	mov    edx,eax
c001b77f:	ed                   	in     eax,dx
c001b780:	83 c4 20             	add    esp,0x20
c001b783:	0f b7 db             	movzx  ebx,bx
c001b786:	f6 c2 02             	test   dl,0x2
c001b789:	74 0c                	je     c001b797 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b78b:	0f b7 c8             	movzx  ecx,ax
c001b78e:	89 d8                	mov    eax,ebx
c001b790:	c1 e0 10             	shl    eax,0x10
c001b793:	09 c8                	or     eax,ecx
c001b795:	eb 05                	jmp    c001b79c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b797:	66 31 c0             	xor    ax,ax
c001b79a:	09 d8                	or     eax,ebx
c001b79c:	ef                   	out    dx,eax
c001b79d:	83 c4 0c             	add    esp,0xc
c001b7a0:	5b                   	pop    ebx
c001b7a1:	5e                   	pop    esi
c001b7a2:	5f                   	pop    edi
c001b7a3:	5d                   	pop    ebp
c001b7a4:	c3                   	ret    
c001b7a5:	c7 44 24 20 f7 33 02 c0 	mov    DWORD PTR [esp+0x20],0xc00233f7
c001b7ad:	83 c4 0c             	add    esp,0xc
c001b7b0:	5b                   	pop    ebx
c001b7b1:	5e                   	pop    esi
c001b7b2:	5f                   	pop    edi
c001b7b3:	5d                   	pop    ebp
c001b7b4:	e9 5a 5f ff ff       	jmp    c0011713 <KePanic(char const*)>
c001b7b9:	90                   	nop

c001b7ba <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b7ba:	55                   	push   ebp
c001b7bb:	57                   	push   edi
c001b7bc:	56                   	push   esi
c001b7bd:	53                   	push   ebx
c001b7be:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b7c4:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b7cb:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b7d2:	0f 85 bd 00 00 00    	jne    c001b895 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b7d8:	83 ec 0c             	sub    esp,0xc
c001b7db:	68 14 01 00 00       	push   0x114
c001b7e0:	e8 01 c3 fe ff       	call   c0007ae6 <malloc>
c001b7e5:	83 c4 0c             	add    esp,0xc
c001b7e8:	89 c3                	mov    ebx,eax
c001b7ea:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b7f0:	68 fd 33 02 c0       	push   0xc00233fd
c001b7f5:	50                   	push   eax
c001b7f6:	e8 81 03 ff ff       	call   c000bb7c <File::File(char const*, Process*)>
c001b7fb:	83 c4 10             	add    esp,0x10
c001b7fe:	85 db                	test   ebx,ebx
c001b800:	0f 84 67 02 00 00    	je     c001ba6d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b806:	56                   	push   esi
c001b807:	56                   	push   esi
c001b808:	6a 01                	push   0x1
c001b80a:	53                   	push   ebx
c001b80b:	e8 8a 03 ff ff       	call   c000bb9a <File::open(FileOpenMode)>
c001b810:	83 c4 10             	add    esp,0x10
c001b813:	85 c0                	test   eax,eax
c001b815:	0f 85 52 02 00 00    	jne    c001ba6d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b81b:	52                   	push   edx
c001b81c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b820:	50                   	push   eax
c001b821:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b825:	50                   	push   eax
c001b826:	53                   	push   ebx
c001b827:	e8 70 06 ff ff       	call   c000be9c <File::stat(unsigned long long*, bool*)>
c001b82c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b830:	40                   	inc    eax
c001b831:	89 04 24             	mov    DWORD PTR [esp],eax
c001b834:	e8 ad c2 fe ff       	call   c0007ae6 <malloc>
c001b839:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b83d:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b842:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b846:	59                   	pop    ecx
c001b847:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b849:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b84d:	51                   	push   ecx
c001b84e:	50                   	push   eax
c001b84f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b853:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b857:	53                   	push   ebx
c001b858:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b85b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b85f:	83 c4 20             	add    esp,0x20
c001b862:	89 c8                	mov    eax,ecx
c001b864:	99                   	cdq    
c001b865:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b869:	0f 85 fe 01 00 00    	jne    c001ba6d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b86f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b873:	0f 85 f4 01 00 00    	jne    c001ba6d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b879:	83 ec 0c             	sub    esp,0xc
c001b87c:	53                   	push   ebx
c001b87d:	e8 76 03 ff ff       	call   c000bbf8 <File::close()>
c001b882:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b886:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b88d:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b892:	83 c4 10             	add    esp,0x10
c001b895:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c001b89a:	8b 1d a8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0a8
c001b8a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b8a4:	31 f6                	xor    esi,esi
c001b8a6:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b8ae:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b8b5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b8ba:	31 c9                	xor    ecx,ecx
c001b8bc:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b8c4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b8c9:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b8d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b8d5:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b8dd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b8e1:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b8e5:	0f 8e 82 01 00 00    	jle    c001ba6d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b8eb:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b8ee:	d4 40                	aam    0x40
c001b8f0:	d5 39                	aad    0x39
c001b8f2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b8f6:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b8fa:	d4 40                	aam    0x40
c001b8fc:	d5 39                	aad    0x39
c001b8fe:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b902:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b906:	d4 40                	aam    0x40
c001b908:	d5 39                	aad    0x39
c001b90a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b90e:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b912:	d4 40                	aam    0x40
c001b914:	d5 39                	aad    0x39
c001b916:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b91a:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b91e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b922:	3c 56                	cmp    al,0x56
c001b924:	74 43                	je     c001b969 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b926:	d4 40                	aam    0x40
c001b928:	d5 39                	aad    0x39
c001b92a:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b92d:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b931:	0f b6 c9             	movzx  ecx,cl
c001b934:	c1 e1 04             	shl    ecx,0x4
c001b937:	d4 40                	aam    0x40
c001b939:	d5 39                	aad    0x39
c001b93b:	83 e8 30             	sub    eax,0x30
c001b93e:	0f b6 c0             	movzx  eax,al
c001b941:	09 c1                	or     ecx,eax
c001b943:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b947:	c1 e1 04             	shl    ecx,0x4
c001b94a:	d4 40                	aam    0x40
c001b94c:	d5 39                	aad    0x39
c001b94e:	83 e8 30             	sub    eax,0x30
c001b951:	0f b6 c0             	movzx  eax,al
c001b954:	09 c1                	or     ecx,eax
c001b956:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b95a:	c1 e1 04             	shl    ecx,0x4
c001b95d:	d4 40                	aam    0x40
c001b95f:	d5 39                	aad    0x39
c001b961:	83 e8 30             	sub    eax,0x30
c001b964:	0f b6 c0             	movzx  eax,al
c001b967:	09 c1                	or     ecx,eax
c001b969:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b96d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b971:	3c 58                	cmp    al,0x58
c001b973:	74 47                	je     c001b9bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b975:	d4 40                	aam    0x40
c001b977:	d5 39                	aad    0x39
c001b979:	8d 50 d0             	lea    edx,[eax-0x30]
c001b97c:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b980:	0f b6 d2             	movzx  edx,dl
c001b983:	c1 e2 04             	shl    edx,0x4
c001b986:	d4 40                	aam    0x40
c001b988:	d5 39                	aad    0x39
c001b98a:	83 e8 30             	sub    eax,0x30
c001b98d:	0f b6 c0             	movzx  eax,al
c001b990:	09 c2                	or     edx,eax
c001b992:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b996:	c1 e2 04             	shl    edx,0x4
c001b999:	d4 40                	aam    0x40
c001b99b:	d5 39                	aad    0x39
c001b99d:	83 e8 30             	sub    eax,0x30
c001b9a0:	0f b6 c0             	movzx  eax,al
c001b9a3:	09 c2                	or     edx,eax
c001b9a5:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b9a9:	c1 e2 04             	shl    edx,0x4
c001b9ac:	d4 40                	aam    0x40
c001b9ae:	d5 39                	aad    0x39
c001b9b0:	83 e8 30             	sub    eax,0x30
c001b9b3:	0f b6 c0             	movzx  eax,al
c001b9b6:	09 c2                	or     edx,eax
c001b9b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b9bc:	83 c6 10             	add    esi,0x10
c001b9bf:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b9c3:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b9c7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b9cb:	83 fa 0a             	cmp    edx,0xa
c001b9ce:	74 0b                	je     c001b9db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b9d0:	47                   	inc    edi
c001b9d1:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b9d5:	75 19                	jne    c001b9f0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b9d7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b9db:	31 c0                	xor    eax,eax
c001b9dd:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b9e2:	0f 94 c0             	sete   al
c001b9e5:	01 c6                	add    esi,eax
c001b9e7:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b9ec:	75 0b                	jne    c001b9f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b9ee:	eb 14                	jmp    c001ba04 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b9f0:	46                   	inc    esi
c001b9f1:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b9f4:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b9f7:	eb ca                	jmp    c001b9c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b9f9:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b9fe:	0f 85 dd fe ff ff    	jne    c001b8e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ba04:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001ba09:	74 10                	je     c001ba1b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001ba0b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001ba10:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001ba15:	0f 85 c6 fe ff ff    	jne    c001b8e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ba1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ba23:	83 e8 30             	sub    eax,0x30
c001ba26:	83 ef 30             	sub    edi,0x30
c001ba29:	c1 e0 04             	shl    eax,0x4
c001ba2c:	09 f8                	or     eax,edi
c001ba2e:	0f b6 c0             	movzx  eax,al
c001ba31:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001ba35:	0f 85 a6 fe ff ff    	jne    c001b8e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ba3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba3f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001ba43:	83 e8 30             	sub    eax,0x30
c001ba46:	83 ef 30             	sub    edi,0x30
c001ba49:	c1 e0 04             	shl    eax,0x4
c001ba4c:	09 f8                	or     eax,edi
c001ba4e:	0f b6 c0             	movzx  eax,al
c001ba51:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001ba55:	0f 85 86 fe ff ff    	jne    c001b8e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ba5b:	50                   	push   eax
c001ba5c:	50                   	push   eax
c001ba5d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001ba61:	50                   	push   eax
c001ba62:	55                   	push   ebp
c001ba63:	e8 d8 4b fe ff       	call   c0000640 <strcpy>
c001ba68:	83 c4 10             	add    esp,0x10
c001ba6b:	eb 06                	jmp    c001ba73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001ba6d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001ba71:	31 ed                	xor    ebp,ebp
c001ba73:	81 c4 4c 01 00 00    	add    esp,0x14c
c001ba79:	89 e8                	mov    eax,ebp
c001ba7b:	5b                   	pop    ebx
c001ba7c:	5e                   	pop    esi
c001ba7d:	5f                   	pop    edi
c001ba7e:	5d                   	pop    ebp
c001ba7f:	c3                   	ret    

c001ba80 <PCI::checkBus(unsigned char)>:
c001ba80:	56                   	push   esi
c001ba81:	53                   	push   ebx
c001ba82:	31 db                	xor    ebx,ebx
c001ba84:	51                   	push   ecx
c001ba85:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ba8a:	52                   	push   edx
c001ba8b:	53                   	push   ebx
c001ba8c:	43                   	inc    ebx
c001ba8d:	56                   	push   esi
c001ba8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba92:	e8 03 03 00 00       	call   c001bd9a <PCI::checkDevice(unsigned char, unsigned char)>
c001ba97:	83 c4 10             	add    esp,0x10
c001ba9a:	83 fb 20             	cmp    ebx,0x20
c001ba9d:	75 eb                	jne    c001ba8a <PCI::checkBus(unsigned char)+0xa>
c001ba9f:	58                   	pop    eax
c001baa0:	5b                   	pop    ebx
c001baa1:	5e                   	pop    esi
c001baa2:	c3                   	ret    
c001baa3:	90                   	nop

c001baa4 <PCI::foundDevice(PCIDeviceInfo)>:
c001baa4:	55                   	push   ebp
c001baa5:	57                   	push   edi
c001baa6:	56                   	push   esi
c001baa7:	53                   	push   ebx
c001baa8:	83 ec 1c             	sub    esp,0x1c
c001baab:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001bab0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bab4:	3d ff ff 00 00       	cmp    eax,0xffff
c001bab9:	0f 84 57 01 00 00    	je     c001bc16 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001babf:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001bac4:	66 3d 06 04          	cmp    ax,0x406
c001bac8:	75 2c                	jne    c001baf6 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001baca:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001bacf:	50                   	push   eax
c001bad0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001bad5:	50                   	push   eax
c001bad6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001badb:	50                   	push   eax
c001badc:	53                   	push   ebx
c001badd:	e8 64 fb ff ff       	call   c001b646 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001bae2:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001bae6:	0f b6 c0             	movzx  eax,al
c001bae9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001baed:	83 c4 2c             	add    esp,0x2c
c001baf0:	5b                   	pop    ebx
c001baf1:	5e                   	pop    esi
c001baf2:	5f                   	pop    edi
c001baf3:	5d                   	pop    ebp
c001baf4:	eb 8a                	jmp    c001ba80 <PCI::checkBus(unsigned char)>
c001baf6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bafa:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001bb00:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bb04:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001bb08:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001bb0d:	85 d2                	test   edx,edx
c001bb0f:	74 36                	je     c001bb47 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001bb11:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001bb14:	85 c9                	test   ecx,ecx
c001bb16:	74 2b                	je     c001bb43 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001bb18:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001bb1e:	31 ee                	xor    esi,ebp
c001bb20:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001bb26:	75 1b                	jne    c001bb43 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001bb28:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001bb2c:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001bb32:	75 0f                	jne    c001bb43 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001bb34:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001bb3b:	39 f9                	cmp    ecx,edi
c001bb3d:	0f 84 d3 00 00 00    	je     c001bc16 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001bb43:	8b 12                	mov    edx,DWORD PTR [edx]
c001bb45:	eb c6                	jmp    c001bb0d <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001bb47:	3d 01 06 00 00       	cmp    eax,0x601
c001bb4c:	75 19                	jne    c001bb67 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001bb4e:	83 ec 0c             	sub    esp,0xc
c001bb51:	68 64 01 00 00       	push   0x164
c001bb56:	e8 8b bf fe ff       	call   c0007ae6 <malloc>
c001bb5b:	89 c5                	mov    ebp,eax
c001bb5d:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb60:	e8 a1 0e 00 00       	call   c001ca06 <SATABus::SATABus()>
c001bb65:	eb 1e                	jmp    c001bb85 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001bb67:	3d 01 01 00 00       	cmp    eax,0x101
c001bb6c:	75 62                	jne    c001bbd0 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001bb6e:	83 ec 0c             	sub    esp,0xc
c001bb71:	68 70 02 00 00       	push   0x270
c001bb76:	e8 6b bf fe ff       	call   c0007ae6 <malloc>
c001bb7b:	89 c5                	mov    ebp,eax
c001bb7d:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb80:	e8 e5 02 00 00       	call   c001be6a <IDE::IDE()>
c001bb85:	5f                   	pop    edi
c001bb86:	58                   	pop    eax
c001bb87:	55                   	push   ebp
c001bb88:	53                   	push   ebx
c001bb89:	e8 68 0e ff ff       	call   c000c9f6 <Device::addChild(Device*)>
c001bb8e:	83 ec 1c             	sub    esp,0x1c
c001bb91:	b9 09 00 00 00       	mov    ecx,0x9
c001bb96:	fc                   	cld    
c001bb97:	89 e7                	mov    edi,esp
c001bb99:	8d 74 24 60          	lea    esi,[esp+0x60]
c001bb9d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb9f:	55                   	push   ebp
c001bba0:	e8 97 0d ff ff       	call   c000c93c <Device::preOpenPCI(PCIDeviceInfo)>
c001bba5:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bba8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001bbac:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bbb4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001bbbc:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001bbc4:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001bbc7:	83 c4 4c             	add    esp,0x4c
c001bbca:	5b                   	pop    ebx
c001bbcb:	5e                   	pop    esi
c001bbcc:	5f                   	pop    edi
c001bbcd:	5d                   	pop    ebp
c001bbce:	ff e0                	jmp    eax
c001bbd0:	83 ec 0c             	sub    esp,0xc
c001bbd3:	68 58 01 00 00       	push   0x158
c001bbd8:	e8 09 bf fe ff       	call   c0007ae6 <malloc>
c001bbdd:	89 c5                	mov    ebp,eax
c001bbdf:	58                   	pop    eax
c001bbe0:	5a                   	pop    edx
c001bbe1:	68 16 34 02 c0       	push   0xc0023416
c001bbe6:	55                   	push   ebp
c001bbe7:	e8 e2 10 ff ff       	call   c000ccce <DriverlessDevice::DriverlessDevice(char const*)>
c001bbec:	59                   	pop    ecx
c001bbed:	5e                   	pop    esi
c001bbee:	55                   	push   ebp
c001bbef:	53                   	push   ebx
c001bbf0:	e8 01 0e ff ff       	call   c000c9f6 <Device::addChild(Device*)>
c001bbf5:	83 c4 10             	add    esp,0x10
c001bbf8:	b9 09 00 00 00       	mov    ecx,0x9
c001bbfd:	fc                   	cld    
c001bbfe:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bc02:	89 fe                	mov    esi,edi
c001bc04:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bc06:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001bc0a:	83 c4 1c             	add    esp,0x1c
c001bc0d:	5b                   	pop    ebx
c001bc0e:	5e                   	pop    esi
c001bc0f:	5f                   	pop    edi
c001bc10:	5d                   	pop    ebp
c001bc11:	e9 26 0d ff ff       	jmp    c000c93c <Device::preOpenPCI(PCIDeviceInfo)>
c001bc16:	83 c4 1c             	add    esp,0x1c
c001bc19:	5b                   	pop    ebx
c001bc1a:	5e                   	pop    esi
c001bc1b:	5f                   	pop    edi
c001bc1c:	5d                   	pop    ebp
c001bc1d:	c3                   	ret    

c001bc1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bc1e:	55                   	push   ebp
c001bc1f:	57                   	push   edi
c001bc20:	56                   	push   esi
c001bc21:	53                   	push   ebx
c001bc22:	83 ec 68             	sub    esp,0x68
c001bc25:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bc29:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bc30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bc34:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bc3b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bc40:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bc44:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bc4b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bc54:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bc59:	6a 0c                	push   0xc
c001bc5b:	57                   	push   edi
c001bc5c:	53                   	push   ebx
c001bc5d:	56                   	push   esi
c001bc5e:	55                   	push   ebp
c001bc5f:	e8 32 f8 ff ff       	call   c001b496 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc64:	83 c4 20             	add    esp,0x20
c001bc67:	57                   	push   edi
c001bc68:	53                   	push   ebx
c001bc69:	56                   	push   esi
c001bc6a:	55                   	push   ebp
c001bc6b:	e8 1c f9 ff ff       	call   c001b58c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bc70:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bc75:	57                   	push   edi
c001bc76:	53                   	push   ebx
c001bc77:	56                   	push   esi
c001bc78:	55                   	push   ebp
c001bc79:	e8 a4 f9 ff ff       	call   c001b622 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bc7e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bc82:	83 c4 14             	add    esp,0x14
c001bc85:	6a 3c                	push   0x3c
c001bc87:	57                   	push   edi
c001bc88:	53                   	push   ebx
c001bc89:	56                   	push   esi
c001bc8a:	55                   	push   ebp
c001bc8b:	e8 06 f8 ff ff       	call   c001b496 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc90:	0f b6 c4             	movzx  eax,ah
c001bc93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bc97:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bc9b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bc9f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bca4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bcaa:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bcb0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bcb4:	83 c4 20             	add    esp,0x20
c001bcb7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bcbc:	74 30                	je     c001bcee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bcbe:	31 c0                	xor    eax,eax
c001bcc0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bcc4:	7e 28                	jle    c001bcee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bcc6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bcce:	39 cb                	cmp    ebx,ecx
c001bcd0:	75 19                	jne    c001bceb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bcd2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bcda:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bcde:	75 0b                	jne    c001bceb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bce0:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bce7:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bceb:	40                   	inc    eax
c001bcec:	eb d2                	jmp    c001bcc0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bcee:	31 d2                	xor    edx,edx
c001bcf0:	83 ec 0c             	sub    esp,0xc
c001bcf3:	57                   	push   edi
c001bcf4:	53                   	push   ebx
c001bcf5:	56                   	push   esi
c001bcf6:	52                   	push   edx
c001bcf7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bcfb:	55                   	push   ebp
c001bcfc:	e8 6d f9 ff ff       	call   c001b66e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd01:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bd05:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bd09:	42                   	inc    edx
c001bd0a:	83 c4 20             	add    esp,0x20
c001bd0d:	83 fa 06             	cmp    edx,0x6
c001bd10:	75 de                	jne    c001bcf0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bd12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bd16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd1a:	c1 e2 08             	shl    edx,0x8
c001bd1d:	83 ec 0c             	sub    esp,0xc
c001bd20:	0f b6 c4             	movzx  eax,ah
c001bd23:	09 d0                	or     eax,edx
c001bd25:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bd2a:	6a 02                	push   0x2
c001bd2c:	57                   	push   edi
c001bd2d:	53                   	push   ebx
c001bd2e:	56                   	push   esi
c001bd2f:	55                   	push   ebp
c001bd30:	e8 61 f7 ff ff       	call   c001b496 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd35:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bd3a:	83 c4 20             	add    esp,0x20
c001bd3d:	57                   	push   edi
c001bd3e:	53                   	push   ebx
c001bd3f:	56                   	push   esi
c001bd40:	55                   	push   ebp
c001bd41:	e8 90 f8 ff ff       	call   c001b5d6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bd46:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bd4a:	57                   	push   edi
c001bd4b:	53                   	push   ebx
c001bd4c:	56                   	push   esi
c001bd4d:	55                   	push   ebp
c001bd4e:	e8 ed f7 ff ff       	call   c001b540 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd53:	b9 09 00 00 00       	mov    ecx,0x9
c001bd58:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bd5d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bd61:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bd65:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bd69:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bd6d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bd71:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bd75:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bd79:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bd7d:	83 ec 0c             	sub    esp,0xc
c001bd80:	fc                   	cld    
c001bd81:	89 e7                	mov    edi,esp
c001bd83:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bd87:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bd89:	55                   	push   ebp
c001bd8a:	e8 15 fd ff ff       	call   c001baa4 <PCI::foundDevice(PCIDeviceInfo)>
c001bd8f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bd95:	5b                   	pop    ebx
c001bd96:	5e                   	pop    esi
c001bd97:	5f                   	pop    edi
c001bd98:	5d                   	pop    ebp
c001bd99:	c3                   	ret    

c001bd9a <PCI::checkDevice(unsigned char, unsigned char)>:
c001bd9a:	55                   	push   ebp
c001bd9b:	57                   	push   edi
c001bd9c:	56                   	push   esi
c001bd9d:	53                   	push   ebx
c001bd9e:	83 ec 0c             	sub    esp,0xc
c001bda1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bda5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bdaa:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bdaf:	6a 00                	push   0x0
c001bdb1:	56                   	push   esi
c001bdb2:	57                   	push   edi
c001bdb3:	55                   	push   ebp
c001bdb4:	e8 87 f7 ff ff       	call   c001b540 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bdb9:	6a 00                	push   0x0
c001bdbb:	56                   	push   esi
c001bdbc:	57                   	push   edi
c001bdbd:	55                   	push   ebp
c001bdbe:	e8 5b fe ff ff       	call   c001bc1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bdc3:	83 c4 20             	add    esp,0x20
c001bdc6:	6a 00                	push   0x0
c001bdc8:	56                   	push   esi
c001bdc9:	57                   	push   edi
c001bdca:	55                   	push   ebp
c001bdcb:	e8 94 f7 ff ff       	call   c001b564 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bdd0:	83 c4 10             	add    esp,0x10
c001bdd3:	a8 80                	test   al,0x80
c001bdd5:	74 2d                	je     c001be04 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bdd7:	bb 01 00 00 00       	mov    ebx,0x1
c001bddc:	53                   	push   ebx
c001bddd:	56                   	push   esi
c001bdde:	57                   	push   edi
c001bddf:	55                   	push   ebp
c001bde0:	e8 5b f7 ff ff       	call   c001b540 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bde5:	83 c4 10             	add    esp,0x10
c001bde8:	0f b7 c0             	movzx  eax,ax
c001bdeb:	3d ff ff 00 00       	cmp    eax,0xffff
c001bdf0:	74 0c                	je     c001bdfe <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bdf2:	53                   	push   ebx
c001bdf3:	56                   	push   esi
c001bdf4:	57                   	push   edi
c001bdf5:	55                   	push   ebp
c001bdf6:	e8 23 fe ff ff       	call   c001bc1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bdfb:	83 c4 10             	add    esp,0x10
c001bdfe:	43                   	inc    ebx
c001bdff:	83 fb 08             	cmp    ebx,0x8
c001be02:	75 d8                	jne    c001bddc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001be04:	83 c4 0c             	add    esp,0xc
c001be07:	5b                   	pop    ebx
c001be08:	5e                   	pop    esi
c001be09:	5f                   	pop    edi
c001be0a:	5d                   	pop    ebp
c001be0b:	c3                   	ret    

c001be0c <PCI::detect()>:
c001be0c:	56                   	push   esi
c001be0d:	53                   	push   ebx
c001be0e:	53                   	push   ebx
c001be0f:	31 db                	xor    ebx,ebx
c001be11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001be15:	6a 00                	push   0x0
c001be17:	6a 00                	push   0x0
c001be19:	6a 00                	push   0x0
c001be1b:	56                   	push   esi
c001be1c:	e8 43 f7 ff ff       	call   c001b564 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001be21:	83 c4 10             	add    esp,0x10
c001be24:	a8 80                	test   al,0x80
c001be26:	75 21                	jne    c001be49 <PCI::detect()+0x3d>
c001be28:	51                   	push   ecx
c001be29:	51                   	push   ecx
c001be2a:	6a 00                	push   0x0
c001be2c:	56                   	push   esi
c001be2d:	e8 4e fc ff ff       	call   c001ba80 <PCI::checkBus(unsigned char)>
c001be32:	83 c4 10             	add    esp,0x10
c001be35:	eb 2a                	jmp    c001be61 <PCI::detect()+0x55>
c001be37:	52                   	push   edx
c001be38:	52                   	push   edx
c001be39:	53                   	push   ebx
c001be3a:	43                   	inc    ebx
c001be3b:	56                   	push   esi
c001be3c:	e8 3f fc ff ff       	call   c001ba80 <PCI::checkBus(unsigned char)>
c001be41:	83 c4 10             	add    esp,0x10
c001be44:	83 fb 08             	cmp    ebx,0x8
c001be47:	74 18                	je     c001be61 <PCI::detect()+0x55>
c001be49:	53                   	push   ebx
c001be4a:	6a 00                	push   0x0
c001be4c:	6a 00                	push   0x0
c001be4e:	56                   	push   esi
c001be4f:	e8 ec f6 ff ff       	call   c001b540 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001be54:	83 c4 10             	add    esp,0x10
c001be57:	0f b7 c0             	movzx  eax,ax
c001be5a:	3d ff ff 00 00       	cmp    eax,0xffff
c001be5f:	74 d6                	je     c001be37 <PCI::detect()+0x2b>
c001be61:	58                   	pop    eax
c001be62:	5b                   	pop    ebx
c001be63:	5e                   	pop    esi
c001be64:	c3                   	ret    
c001be65:	90                   	nop

c001be66 <IDE::close(int, int, void*)>:
c001be66:	83 c8 ff             	or     eax,0xffffffff
c001be69:	c3                   	ret    

c001be6a <IDE::IDE()>:
c001be6a:	83 ec 0c             	sub    esp,0xc
c001be6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be71:	83 ec 08             	sub    esp,0x8
c001be74:	68 5c 34 02 c0       	push   0xc002345c
c001be79:	50                   	push   eax
c001be7a:	e8 f5 0e ff ff       	call   c000cd74 <HardDiskController::HardDiskController(char const*)>
c001be7f:	83 c4 10             	add    esp,0x10
c001be82:	ba ec 34 02 c0       	mov    edx,0xc00234ec
c001be87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be8b:	89 10                	mov    DWORD PTR [eax],edx
c001be8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be91:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001be98:	90                   	nop
c001be99:	83 c4 0c             	add    esp,0xc
c001be9c:	c3                   	ret    
c001be9d:	90                   	nop

c001be9e <IDE::prepareInterrupt(unsigned char)>:
c001be9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bea3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bea7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001beaf:	c3                   	ret    

c001beb0 <selectDrive(unsigned char, unsigned char)>:
c001beb0:	c3                   	ret    
c001beb1:	90                   	nop

c001beb2 <IDE::getBase(unsigned char)>:
c001beb2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001beb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bebb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bec3:	c3                   	ret    

c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bec4:	55                   	push   ebp
c001bec5:	57                   	push   edi
c001bec6:	56                   	push   esi
c001bec7:	53                   	push   ebx
c001bec8:	83 ec 1c             	sub    esp,0x1c
c001becb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001becf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bed3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bed6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001beda:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bede:	80 f9 03             	cmp    cl,0x3
c001bee1:	77 4f                	ja     c001bf32 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bee3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bee7:	0f b6 fa             	movzx  edi,dl
c001beea:	0f b6 db             	movzx  ebx,bl
c001beed:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bef0:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bef5:	80 ca 80             	or     dl,0x80
c001bef8:	52                   	push   edx
c001bef9:	6a 0c                	push   0xc
c001befb:	57                   	push   edi
c001befc:	56                   	push   esi
c001befd:	e8 c2 ff ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf02:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001bf07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bf0b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bf0f:	ee                   	out    dx,al
c001bf10:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bf15:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001bf19:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bf1d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bf21:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bf29:	83 c4 2c             	add    esp,0x2c
c001bf2c:	5b                   	pop    ebx
c001bf2d:	5e                   	pop    esi
c001bf2e:	5f                   	pop    edi
c001bf2f:	5d                   	pop    ebp
c001bf30:	eb 92                	jmp    c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf32:	0f b6 cb             	movzx  ecx,bl
c001bf35:	83 f9 07             	cmp    ecx,0x7
c001bf38:	77 12                	ja     c001bf4c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bf3a:	0f b6 d2             	movzx  edx,dl
c001bf3d:	0f b6 db             	movzx  ebx,bl
c001bf40:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001bf48:	01 da                	add    edx,ebx
c001bf4a:	eb 2f                	jmp    c001bf7b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bf4c:	83 f9 0d             	cmp    ecx,0xd
c001bf4f:	77 13                	ja     c001bf64 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bf51:	0f b6 d2             	movzx  edx,dl
c001bf54:	0f b6 db             	movzx  ebx,bl
c001bf57:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001bf5e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bf62:	eb 17                	jmp    c001bf7b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bf64:	83 f9 15             	cmp    ecx,0x15
c001bf67:	77 13                	ja     c001bf7c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bf69:	0f b6 d2             	movzx  edx,dl
c001bf6c:	0f b6 db             	movzx  ebx,bl
c001bf6f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001bf77:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bf7b:	ee                   	out    dx,al
c001bf7c:	83 c4 1c             	add    esp,0x1c
c001bf7f:	5b                   	pop    ebx
c001bf80:	5e                   	pop    esi
c001bf81:	5f                   	pop    edi
c001bf82:	5d                   	pop    ebp
c001bf83:	c3                   	ret    

c001bf84 <IDE::read(unsigned char, unsigned char)>:
c001bf84:	55                   	push   ebp
c001bf85:	57                   	push   edi
c001bf86:	56                   	push   esi
c001bf87:	53                   	push   ebx
c001bf88:	83 ec 1c             	sub    esp,0x1c
c001bf8b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bf8f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bf93:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bf96:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001bf9a:	3c 03                	cmp    al,0x3
c001bf9c:	77 40                	ja     c001bfde <IDE::read(unsigned char, unsigned char)+0x5a>
c001bf9e:	0f b6 f9             	movzx  edi,cl
c001bfa1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bfa4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bfa9:	0c 80                	or     al,0x80
c001bfab:	50                   	push   eax
c001bfac:	6a 0c                	push   0xc
c001bfae:	57                   	push   edi
c001bfaf:	56                   	push   esi
c001bfb0:	e8 0f ff ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfb5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bfba:	0f b6 d3             	movzx  edx,bl
c001bfbd:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bfc1:	ec                   	in     al,dx
c001bfc2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bfc6:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bfcb:	52                   	push   edx
c001bfcc:	6a 0c                	push   0xc
c001bfce:	57                   	push   edi
c001bfcf:	56                   	push   esi
c001bfd0:	e8 ef fe ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfd5:	83 c4 20             	add    esp,0x20
c001bfd8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bfdc:	eb 4c                	jmp    c001c02a <IDE::read(unsigned char, unsigned char)+0xa6>
c001bfde:	0f b6 d3             	movzx  edx,bl
c001bfe1:	83 fa 07             	cmp    edx,0x7
c001bfe4:	77 12                	ja     c001bff8 <IDE::read(unsigned char, unsigned char)+0x74>
c001bfe6:	0f b6 c9             	movzx  ecx,cl
c001bfe9:	0f b6 d3             	movzx  edx,bl
c001bfec:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001bff4:	01 c2                	add    edx,eax
c001bff6:	eb 31                	jmp    c001c029 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bff8:	83 fa 0d             	cmp    edx,0xd
c001bffb:	77 13                	ja     c001c010 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bffd:	0f b6 c9             	movzx  ecx,cl
c001c000:	0f b6 d3             	movzx  edx,bl
c001c003:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001c00a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c00e:	eb 19                	jmp    c001c029 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c010:	31 c0                	xor    eax,eax
c001c012:	83 fa 15             	cmp    edx,0x15
c001c015:	77 13                	ja     c001c02a <IDE::read(unsigned char, unsigned char)+0xa6>
c001c017:	0f b6 c9             	movzx  ecx,cl
c001c01a:	0f b6 d3             	movzx  edx,bl
c001c01d:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001c025:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c029:	ec                   	in     al,dx
c001c02a:	83 c4 1c             	add    esp,0x1c
c001c02d:	5b                   	pop    ebx
c001c02e:	5e                   	pop    esi
c001c02f:	5f                   	pop    edi
c001c030:	5d                   	pop    ebp
c001c031:	c3                   	ret    

c001c032 <IDE::waitInterrupt(unsigned char)>:
c001c032:	55                   	push   ebp
c001c033:	57                   	push   edi
c001c034:	56                   	push   esi
c001c035:	53                   	push   ebx
c001c036:	31 db                	xor    ebx,ebx
c001c038:	83 ec 0c             	sub    esp,0xc
c001c03b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c03f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c044:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c04c:	89 e8                	mov    eax,ebp
c001c04e:	84 c0                	test   al,al
c001c050:	75 30                	jne    c001c082 <IDE::waitInterrupt(unsigned char)+0x50>
c001c052:	50                   	push   eax
c001c053:	6a 0c                	push   0xc
c001c055:	56                   	push   esi
c001c056:	57                   	push   edi
c001c057:	e8 28 ff ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c05c:	83 c4 10             	add    esp,0x10
c001c05f:	a8 01                	test   al,0x1
c001c061:	75 27                	jne    c001c08a <IDE::waitInterrupt(unsigned char)+0x58>
c001c063:	f6 c3 04             	test   bl,0x4
c001c066:	75 12                	jne    c001c07a <IDE::waitInterrupt(unsigned char)+0x48>
c001c068:	83 fb 32             	cmp    ebx,0x32
c001c06b:	7e 0d                	jle    c001c07a <IDE::waitInterrupt(unsigned char)+0x48>
c001c06d:	83 ec 0c             	sub    esp,0xc
c001c070:	6a 64                	push   0x64
c001c072:	e8 b1 a4 ff ff       	call   c0016528 <milliTenthSleep(unsigned int)>
c001c077:	83 c4 10             	add    esp,0x10
c001c07a:	83 fb 3c             	cmp    ebx,0x3c
c001c07d:	74 0b                	je     c001c08a <IDE::waitInterrupt(unsigned char)+0x58>
c001c07f:	43                   	inc    ebx
c001c080:	eb c2                	jmp    c001c044 <IDE::waitInterrupt(unsigned char)+0x12>
c001c082:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c08a:	83 c4 0c             	add    esp,0xc
c001c08d:	89 e8                	mov    eax,ebp
c001c08f:	5b                   	pop    ebx
c001c090:	5e                   	pop    esi
c001c091:	5f                   	pop    edi
c001c092:	5d                   	pop    ebp
c001c093:	c3                   	ret    

c001c094 <ideChannel0IRQHandler(regs*, void*)>:
c001c094:	83 ec 10             	sub    esp,0x10
c001c097:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c09b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c0a2:	6a 07                	push   0x7
c001c0a4:	6a 00                	push   0x0
c001c0a6:	50                   	push   eax
c001c0a7:	e8 d8 fe ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c0ac:	83 c4 1c             	add    esp,0x1c
c001c0af:	c3                   	ret    

c001c0b0 <ideChannel1IRQHandler(regs*, void*)>:
c001c0b0:	83 ec 10             	sub    esp,0x10
c001c0b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c0b7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c0be:	6a 07                	push   0x7
c001c0c0:	6a 01                	push   0x1
c001c0c2:	50                   	push   eax
c001c0c3:	e8 bc fe ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c0c8:	83 c4 1c             	add    esp,0x1c
c001c0cb:	c3                   	ret    

c001c0cc <IDE::enableIRQs(unsigned char, bool)>:
c001c0cc:	57                   	push   edi
c001c0cd:	b8 02 00 00 00       	mov    eax,0x2
c001c0d2:	56                   	push   esi
c001c0d3:	53                   	push   ebx
c001c0d4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c0d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c0dc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c0e1:	74 02                	je     c001c0e5 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c0e3:	31 c0                	xor    eax,eax
c001c0e5:	0f b6 db             	movzx  ebx,bl
c001c0e8:	bf 04 00 00 00       	mov    edi,0x4
c001c0ed:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c0f4:	50                   	push   eax
c001c0f5:	6a 0c                	push   0xc
c001c0f7:	53                   	push   ebx
c001c0f8:	56                   	push   esi
c001c0f9:	e8 c6 fd ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0fe:	83 c4 10             	add    esp,0x10
c001c101:	50                   	push   eax
c001c102:	6a 0c                	push   0xc
c001c104:	53                   	push   ebx
c001c105:	56                   	push   esi
c001c106:	e8 79 fe ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c10b:	83 c4 10             	add    esp,0x10
c001c10e:	4f                   	dec    edi
c001c10f:	75 f0                	jne    c001c101 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c111:	5b                   	pop    ebx
c001c112:	5e                   	pop    esi
c001c113:	5f                   	pop    edi
c001c114:	c3                   	ret    
c001c115:	90                   	nop

c001c116 <IDE::open(int, int, void*)>:
c001c116:	55                   	push   ebp
c001c117:	57                   	push   edi
c001c118:	56                   	push   esi
c001c119:	53                   	push   ebx
c001c11a:	83 ec 1c             	sub    esp,0x1c
c001c11d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c121:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c12a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c133:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c13a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c141:	0f 85 de 02 00 00    	jne    c001c425 <IDE::open(int, int, void*)+0x30f>
c001c147:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c14d:	88 04 24             	mov    BYTE PTR [esp],al
c001c150:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c153:	83 e0 7f             	and    eax,0x7f
c001c156:	83 f8 05             	cmp    eax,0x5
c001c159:	74 05                	je     c001c160 <IDE::open(int, int, void*)+0x4a>
c001c15b:	83 f8 0f             	cmp    eax,0xf
c001c15e:	75 32                	jne    c001c192 <IDE::open(int, int, void*)+0x7c>
c001c160:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c166:	83 e0 fc             	and    eax,0xfffffffc
c001c169:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c170:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c176:	83 e0 fc             	and    eax,0xfffffffc
c001c179:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c180:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c186:	83 e0 fc             	and    eax,0xfffffffc
c001c189:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c190:	eb 14                	jmp    c001c1a6 <IDE::open(int, int, void*)+0x90>
c001c192:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c19c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c1a6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c1ad:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c1b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c1b8:	89 c6                	mov    esi,eax
c001c1ba:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c1bf:	c1 e6 10             	shl    esi,0x10
c001c1c2:	89 e8                	mov    eax,ebp
c001c1c4:	89 fa                	mov    edx,edi
c001c1c6:	c1 e0 0b             	shl    eax,0xb
c001c1c9:	09 f0                	or     eax,esi
c001c1cb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c1d2:	c1 e6 08             	shl    esi,0x8
c001c1d5:	09 c6                	or     esi,eax
c001c1d7:	89 f0                	mov    eax,esi
c001c1d9:	0d 08 00 00 80       	or     eax,0x80000008
c001c1de:	ef                   	out    dx,eax
c001c1df:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c1e4:	89 ca                	mov    edx,ecx
c001c1e6:	ed                   	in     eax,dx
c001c1e7:	c1 e8 10             	shr    eax,0x10
c001c1ea:	3d ff ff 00 00       	cmp    eax,0xffff
c001c1ef:	0f 84 f9 00 00 00    	je     c001c2ee <IDE::open(int, int, void*)+0x1d8>
c001c1f5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c1fb:	89 fa                	mov    edx,edi
c001c1fd:	89 f0                	mov    eax,esi
c001c1ff:	ef                   	out    dx,eax
c001c200:	b0 fe                	mov    al,0xfe
c001c202:	89 ca                	mov    edx,ecx
c001c204:	ee                   	out    dx,al
c001c205:	89 f0                	mov    eax,esi
c001c207:	89 fa                	mov    edx,edi
c001c209:	ef                   	out    dx,eax
c001c20a:	89 ca                	mov    edx,ecx
c001c20c:	ed                   	in     eax,dx
c001c20d:	3c fe                	cmp    al,0xfe
c001c20f:	0f 85 a9 00 00 00    	jne    c001c2be <IDE::open(int, int, void*)+0x1a8>
c001c215:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c21b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c222:	74 33                	je     c001c257 <IDE::open(int, int, void*)+0x141>
c001c224:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c22a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c22e:	40                   	inc    eax
c001c22f:	83 ec 0c             	sub    esp,0xc
c001c232:	0f b6 c0             	movzx  eax,al
c001c235:	50                   	push   eax
c001c236:	55                   	push   ebp
c001c237:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c23b:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c241:	51                   	push   ecx
c001c242:	e8 e5 37 ff ff       	call   c000fa2c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c247:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c24c:	83 c4 1c             	add    esp,0x1c
c001c24f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c255:	eb 0a                	jmp    c001c261 <IDE::open(int, int, void*)+0x14b>
c001c257:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c261:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c268:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c26f:	c1 e1 10             	shl    ecx,0x10
c001c272:	c1 e0 08             	shl    eax,0x8
c001c275:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c27a:	09 c1                	or     ecx,eax
c001c27c:	89 fa                	mov    edx,edi
c001c27e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c285:	c1 e0 0b             	shl    eax,0xb
c001c288:	09 c1                	or     ecx,eax
c001c28a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c290:	89 c8                	mov    eax,ecx
c001c292:	ef                   	out    dx,eax
c001c293:	be fc 0c 00 00       	mov    esi,0xcfc
c001c298:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c29e:	89 f2                	mov    edx,esi
c001c2a0:	ee                   	out    dx,al
c001c2a1:	89 c8                	mov    eax,ecx
c001c2a3:	89 fa                	mov    edx,edi
c001c2a5:	ef                   	out    dx,eax
c001c2a6:	89 f2                	mov    edx,esi
c001c2a8:	ed                   	in     eax,dx
c001c2a9:	0f b6 c0             	movzx  eax,al
c001c2ac:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c2b2:	74 4a                	je     c001c2fe <IDE::open(int, int, void*)+0x1e8>
c001c2b4:	83 ec 0c             	sub    esp,0xc
c001c2b7:	68 74 34 02 c0       	push   0xc0023474
c001c2bc:	eb 38                	jmp    c001c2f6 <IDE::open(int, int, void*)+0x1e0>
c001c2be:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c2c7:	75 1b                	jne    c001c2e4 <IDE::open(int, int, void*)+0x1ce>
c001c2c9:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c2cd:	3d 80 00 00 00       	cmp    eax,0x80
c001c2d2:	74 07                	je     c001c2db <IDE::open(int, int, void*)+0x1c5>
c001c2d4:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c2d9:	75 09                	jne    c001c2e4 <IDE::open(int, int, void*)+0x1ce>
c001c2db:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c2e2:	eb 1a                	jmp    c001c2fe <IDE::open(int, int, void*)+0x1e8>
c001c2e4:	83 ec 0c             	sub    esp,0xc
c001c2e7:	68 7c 34 02 c0       	push   0xc002347c
c001c2ec:	eb 08                	jmp    c001c2f6 <IDE::open(int, int, void*)+0x1e0>
c001c2ee:	83 ec 0c             	sub    esp,0xc
c001c2f1:	68 ad 34 02 c0       	push   0xc00234ad
c001c2f6:	e8 18 54 ff ff       	call   c0011713 <KePanic(char const*)>
c001c2fb:	83 c4 10             	add    esp,0x10
c001c2fe:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c305:	74 1a                	je     c001c321 <IDE::open(int, int, void*)+0x20b>
c001c307:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c30d:	83 e0 fc             	and    eax,0xfffffffc
c001c310:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c317:	83 c0 08             	add    eax,0x8
c001c31a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c321:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c327:	89 c2                	mov    edx,eax
c001c329:	83 e2 0f             	and    edx,0xf
c001c32c:	83 fa 08             	cmp    edx,0x8
c001c32f:	75 0a                	jne    c001c33b <IDE::open(int, int, void*)+0x225>
c001c331:	83 e8 02             	sub    eax,0x2
c001c334:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c33b:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c341:	89 c2                	mov    edx,eax
c001c343:	83 e2 0f             	and    edx,0xf
c001c346:	83 fa 08             	cmp    edx,0x8
c001c349:	75 0a                	jne    c001c355 <IDE::open(int, int, void*)+0x23f>
c001c34b:	83 e8 02             	sub    eax,0x2
c001c34e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c355:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c35c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c363:	89 d0                	mov    eax,edx
c001c365:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c368:	8d 7a 01             	lea    edi,[edx+0x1]
c001c36b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c36f:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c373:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c377:	83 e1 3f             	and    ecx,0x3f
c001c37a:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c37e:	89 f9                	mov    ecx,edi
c001c380:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c387:	0f b6 c9             	movzx  ecx,cl
c001c38a:	8d 78 02             	lea    edi,[eax+0x2]
c001c38d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c390:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c394:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c398:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c39c:	83 e2 3f             	and    edx,0x3f
c001c39f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c3a3:	89 f9                	mov    ecx,edi
c001c3a5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c3ab:	0f b6 d1             	movzx  edx,cl
c001c3ae:	8d 78 03             	lea    edi,[eax+0x3]
c001c3b1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c3b4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c3b8:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c3bc:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c3c0:	83 e1 3f             	and    ecx,0x3f
c001c3c3:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c3c7:	89 f9                	mov    ecx,edi
c001c3c9:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c3cf:	0f b6 c9             	movzx  ecx,cl
c001c3d2:	8d 78 04             	lea    edi,[eax+0x4]
c001c3d5:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c3d8:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c3dc:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c3e0:	89 fa                	mov    edx,edi
c001c3e2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c3e8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c3ec:	83 e2 3f             	and    edx,0x3f
c001c3ef:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c3f3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c3fa:	66 85 f6             	test   si,si
c001c3fd:	74 65                	je     c001c464 <IDE::open(int, int, void*)+0x34e>
c001c3ff:	89 f9                	mov    ecx,edi
c001c401:	83 c0 05             	add    eax,0x5
c001c404:	0f b6 d1             	movzx  edx,cl
c001c407:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c40a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c40e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c412:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c418:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c41c:	83 e0 3f             	and    eax,0x3f
c001c41f:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c423:	eb 3f                	jmp    c001c464 <IDE::open(int, int, void*)+0x34e>
c001c425:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c42b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c432:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c439:	05 06 02 00 00       	add    eax,0x206
c001c43e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c445:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c44c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c453:	05 06 02 00 00       	add    eax,0x206
c001c458:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c45f:	e9 bd fe ff ff       	jmp    c001c321 <IDE::open(int, int, void*)+0x20b>
c001c464:	50                   	push   eax
c001c465:	50                   	push   eax
c001c466:	6a 00                	push   0x0
c001c468:	53                   	push   ebx
c001c469:	e8 30 fa ff ff       	call   c001be9e <IDE::prepareInterrupt(unsigned char)>
c001c46e:	5a                   	pop    edx
c001c46f:	59                   	pop    ecx
c001c470:	6a 01                	push   0x1
c001c472:	53                   	push   ebx
c001c473:	e8 26 fa ff ff       	call   c001be9e <IDE::prepareInterrupt(unsigned char)>
c001c478:	83 c4 0c             	add    esp,0xc
c001c47b:	6a 00                	push   0x0
c001c47d:	6a 00                	push   0x0
c001c47f:	53                   	push   ebx
c001c480:	e8 47 fc ff ff       	call   c001c0cc <IDE::enableIRQs(unsigned char, bool)>
c001c485:	83 c4 0c             	add    esp,0xc
c001c488:	6a 00                	push   0x0
c001c48a:	6a 01                	push   0x1
c001c48c:	53                   	push   ebx
c001c48d:	e8 3a fc ff ff       	call   c001c0cc <IDE::enableIRQs(unsigned char, bool)>
c001c492:	83 c4 10             	add    esp,0x10
c001c495:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c49c:	74 34                	je     c001c4d2 <IDE::open(int, int, void*)+0x3bc>
c001c49e:	83 ec 0c             	sub    esp,0xc
c001c4a1:	53                   	push   ebx
c001c4a2:	6a 01                	push   0x1
c001c4a4:	68 94 c0 01 c0       	push   0xc001c094
c001c4a9:	6a 0e                	push   0xe
c001c4ab:	53                   	push   ebx
c001c4ac:	e8 f1 04 ff ff       	call   c000c9a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c4b1:	83 c4 14             	add    esp,0x14
c001c4b4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c4ba:	53                   	push   ebx
c001c4bb:	6a 01                	push   0x1
c001c4bd:	68 b0 c0 01 c0       	push   0xc001c0b0
c001c4c2:	6a 0f                	push   0xf
c001c4c4:	53                   	push   ebx
c001c4c5:	e8 d8 04 ff ff       	call   c000c9a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c4ca:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c4d0:	eb 38                	jmp    c001c50a <IDE::open(int, int, void*)+0x3f4>
c001c4d2:	83 ec 0c             	sub    esp,0xc
c001c4d5:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c4df:	53                   	push   ebx
c001c4e0:	6a 00                	push   0x0
c001c4e2:	68 94 c0 01 c0       	push   0xc001c094
c001c4e7:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c4ed:	53                   	push   ebx
c001c4ee:	e8 af 04 ff ff       	call   c000c9a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c4f3:	83 c4 14             	add    esp,0x14
c001c4f6:	53                   	push   ebx
c001c4f7:	6a 00                	push   0x0
c001c4f9:	68 b0 c0 01 c0       	push   0xc001c0b0
c001c4fe:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c504:	53                   	push   ebx
c001c505:	e8 98 04 ff ff       	call   c000c9a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c50a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c50c:	83 c4 20             	add    esp,0x20
c001c50f:	83 ec 0c             	sub    esp,0xc
c001c512:	53                   	push   ebx
c001c513:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c516:	83 c4 0c             	add    esp,0xc
c001c519:	6a 07                	push   0x7
c001c51b:	6a 00                	push   0x0
c001c51d:	53                   	push   ebx
c001c51e:	e8 61 fa ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c523:	83 c4 0c             	add    esp,0xc
c001c526:	6a 07                	push   0x7
c001c528:	6a 01                	push   0x1
c001c52a:	53                   	push   ebx
c001c52b:	e8 54 fa ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c530:	83 c4 0c             	add    esp,0xc
c001c533:	6a 01                	push   0x1
c001c535:	6a 00                	push   0x0
c001c537:	53                   	push   ebx
c001c538:	e8 8f fb ff ff       	call   c001c0cc <IDE::enableIRQs(unsigned char, bool)>
c001c53d:	83 c4 0c             	add    esp,0xc
c001c540:	6a 01                	push   0x1
c001c542:	6a 01                	push   0x1
c001c544:	53                   	push   ebx
c001c545:	e8 82 fb ff ff       	call   c001c0cc <IDE::enableIRQs(unsigned char, bool)>
c001c54a:	83 c4 2c             	add    esp,0x2c
c001c54d:	31 c0                	xor    eax,eax
c001c54f:	5b                   	pop    ebx
c001c550:	5e                   	pop    esi
c001c551:	5f                   	pop    edi
c001c552:	5d                   	pop    ebp
c001c553:	c3                   	ret    

c001c554 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c554:	55                   	push   ebp
c001c555:	57                   	push   edi
c001c556:	56                   	push   esi
c001c557:	53                   	push   ebx
c001c558:	83 ec 1c             	sub    esp,0x1c
c001c55b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c55f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c563:	8d 42 f8             	lea    eax,[edx-0x8]
c001c566:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c56a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c56e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c572:	3c 03                	cmp    al,0x3
c001c574:	77 5a                	ja     c001c5d0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c576:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c57a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c57e:	0f b6 db             	movzx  ebx,bl
c001c581:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c584:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c589:	0c 80                	or     al,0x80
c001c58b:	50                   	push   eax
c001c58c:	6a 0c                	push   0xc
c001c58e:	53                   	push   ebx
c001c58f:	56                   	push   esi
c001c590:	e8 2f f9 ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c595:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c59a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c59e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c5a2:	0f b6 d2             	movzx  edx,dl
c001c5a5:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c5a9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c5ab:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c5b0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c5b4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c5b8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c5bc:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c5c4:	83 c4 2c             	add    esp,0x2c
c001c5c7:	5b                   	pop    ebx
c001c5c8:	5e                   	pop    esi
c001c5c9:	5f                   	pop    edi
c001c5ca:	5d                   	pop    ebp
c001c5cb:	e9 f4 f8 ff ff       	jmp    c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5d0:	0f b6 c2             	movzx  eax,dl
c001c5d3:	83 f8 07             	cmp    eax,0x7
c001c5d6:	77 12                	ja     c001c5ea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c5d8:	0f b6 c2             	movzx  eax,dl
c001c5db:	0f b6 db             	movzx  ebx,bl
c001c5de:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c5e6:	01 c2                	add    edx,eax
c001c5e8:	eb 2f                	jmp    c001c619 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c5ea:	83 f8 0d             	cmp    eax,0xd
c001c5ed:	77 13                	ja     c001c602 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c5ef:	0f b6 db             	movzx  ebx,bl
c001c5f2:	0f b6 d2             	movzx  edx,dl
c001c5f5:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c5fc:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c600:	eb 17                	jmp    c001c619 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c602:	83 f8 15             	cmp    eax,0x15
c001c605:	77 14                	ja     c001c61b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c607:	0f b6 db             	movzx  ebx,bl
c001c60a:	0f b6 d2             	movzx  edx,dl
c001c60d:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c615:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c619:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c61b:	83 c4 1c             	add    esp,0x1c
c001c61e:	5b                   	pop    ebx
c001c61f:	5e                   	pop    esi
c001c620:	5f                   	pop    edi
c001c621:	5d                   	pop    ebp
c001c622:	c3                   	ret    
c001c623:	90                   	nop

c001c624 <IDE::detect()>:
c001c624:	55                   	push   ebp
c001c625:	57                   	push   edi
c001c626:	56                   	push   esi
c001c627:	53                   	push   ebx
c001c628:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c62e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c635:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c63c:	0f 85 a4 02 00 00    	jne    c001c8e6 <IDE::detect()+0x2c2>
c001c642:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c649:	31 f6                	xor    esi,esi
c001c64b:	31 ed                	xor    ebp,ebp
c001c64d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c655:	89 e8                	mov    eax,ebp
c001c657:	c1 e0 06             	shl    eax,0x6
c001c65a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c662:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c666:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c66a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c66e:	c1 e0 04             	shl    eax,0x4
c001c671:	83 c8 a0             	or     eax,0xffffffa0
c001c674:	0f b6 c0             	movzx  eax,al
c001c677:	50                   	push   eax
c001c678:	6a 06                	push   0x6
c001c67a:	56                   	push   esi
c001c67b:	53                   	push   ebx
c001c67c:	e8 43 f8 ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c681:	83 c4 0c             	add    esp,0xc
c001c684:	6a 0c                	push   0xc
c001c686:	56                   	push   esi
c001c687:	53                   	push   ebx
c001c688:	e8 f7 f8 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c68d:	83 c4 0c             	add    esp,0xc
c001c690:	6a 0c                	push   0xc
c001c692:	56                   	push   esi
c001c693:	53                   	push   ebx
c001c694:	e8 eb f8 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c699:	83 c4 0c             	add    esp,0xc
c001c69c:	6a 0c                	push   0xc
c001c69e:	56                   	push   esi
c001c69f:	53                   	push   ebx
c001c6a0:	e8 df f8 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c6a5:	83 c4 0c             	add    esp,0xc
c001c6a8:	6a 0c                	push   0xc
c001c6aa:	56                   	push   esi
c001c6ab:	53                   	push   ebx
c001c6ac:	e8 d3 f8 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c6b1:	68 ec 00 00 00       	push   0xec
c001c6b6:	6a 07                	push   0x7
c001c6b8:	56                   	push   esi
c001c6b9:	53                   	push   ebx
c001c6ba:	e8 05 f8 ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6bf:	83 c4 1c             	add    esp,0x1c
c001c6c2:	6a 0c                	push   0xc
c001c6c4:	56                   	push   esi
c001c6c5:	53                   	push   ebx
c001c6c6:	e8 b9 f8 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c6cb:	83 c4 0c             	add    esp,0xc
c001c6ce:	6a 0c                	push   0xc
c001c6d0:	56                   	push   esi
c001c6d1:	53                   	push   ebx
c001c6d2:	e8 ad f8 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c6d7:	83 c4 0c             	add    esp,0xc
c001c6da:	6a 0c                	push   0xc
c001c6dc:	56                   	push   esi
c001c6dd:	53                   	push   ebx
c001c6de:	e8 a1 f8 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c6e3:	83 c4 0c             	add    esp,0xc
c001c6e6:	6a 0c                	push   0xc
c001c6e8:	56                   	push   esi
c001c6e9:	53                   	push   ebx
c001c6ea:	e8 95 f8 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c6ef:	83 c4 0c             	add    esp,0xc
c001c6f2:	6a 0c                	push   0xc
c001c6f4:	56                   	push   esi
c001c6f5:	53                   	push   ebx
c001c6f6:	e8 89 f8 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c6fb:	83 c4 10             	add    esp,0x10
c001c6fe:	84 c0                	test   al,al
c001c700:	0f 84 60 01 00 00    	je     c001c866 <IDE::detect()+0x242>
c001c706:	31 ff                	xor    edi,edi
c001c708:	50                   	push   eax
c001c709:	6a 0c                	push   0xc
c001c70b:	56                   	push   esi
c001c70c:	53                   	push   ebx
c001c70d:	e8 72 f8 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c712:	83 c4 10             	add    esp,0x10
c001c715:	a8 01                	test   al,0x1
c001c717:	0f 85 6a 01 00 00    	jne    c001c887 <IDE::detect()+0x263>
c001c71d:	a8 80                	test   al,0x80
c001c71f:	75 04                	jne    c001c725 <IDE::detect()+0x101>
c001c721:	a8 08                	test   al,0x8
c001c723:	75 23                	jne    c001c748 <IDE::detect()+0x124>
c001c725:	47                   	inc    edi
c001c726:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c72c:	7e da                	jle    c001c708 <IDE::detect()+0xe4>
c001c72e:	83 ec 0c             	sub    esp,0xc
c001c731:	6a 32                	push   0x32
c001c733:	e8 f0 9d ff ff       	call   c0016528 <milliTenthSleep(unsigned int)>
c001c738:	83 c4 10             	add    esp,0x10
c001c73b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c741:	75 c5                	jne    c001c708 <IDE::detect()+0xe4>
c001c743:	e9 3f 01 00 00       	jmp    c001c887 <IDE::detect()+0x263>
c001c748:	31 c9                	xor    ecx,ecx
c001c74a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c74e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c752:	83 ec 0c             	sub    esp,0xc
c001c755:	68 80 00 00 00       	push   0x80
c001c75a:	57                   	push   edi
c001c75b:	6a 00                	push   0x0
c001c75d:	56                   	push   esi
c001c75e:	53                   	push   ebx
c001c75f:	e8 f0 fd ff ff       	call   c001c554 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c764:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c769:	89 e8                	mov    eax,ebp
c001c76b:	89 d1                	mov    ecx,edx
c001c76d:	c1 e0 06             	shl    eax,0x6
c001c770:	01 d8                	add    eax,ebx
c001c772:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c779:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c780:	89 f2                	mov    edx,esi
c001c782:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c788:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c78c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c792:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c796:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c79d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c7a5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c7ac:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c7b4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c7ba:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c7c1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c7c7:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c7cb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c7cf:	83 c4 20             	add    esp,0x20
c001c7d2:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c7d5:	83 c0 02             	add    eax,0x2
c001c7d8:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c7de:	83 c7 02             	add    edi,0x2
c001c7e1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c7e4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c7ea:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c7ee:	75 e2                	jne    c001c7d2 <IDE::detect()+0x1ae>
c001c7f0:	89 e8                	mov    eax,ebp
c001c7f2:	c1 e0 06             	shl    eax,0x6
c001c7f5:	01 d8                	add    eax,ebx
c001c7f7:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c7fe:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c805:	c1 ea 09             	shr    edx,0x9
c001c808:	83 e2 01             	and    edx,0x1
c001c80b:	80 e1 01             	and    cl,0x1
c001c80e:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c814:	75 22                	jne    c001c838 <IDE::detect()+0x214>
c001c816:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c81d:	74 46                	je     c001c865 <IDE::detect()+0x241>
c001c81f:	83 ec 0c             	sub    esp,0xc
c001c822:	68 7c 01 00 00       	push   0x17c
c001c827:	e8 ba b2 fe ff       	call   c0007ae6 <malloc>
c001c82c:	89 c7                	mov    edi,eax
c001c82e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c831:	e8 1a 05 00 00       	call   c001cd50 <ATA::ATA()>
c001c836:	eb 17                	jmp    c001c84f <IDE::detect()+0x22b>
c001c838:	83 ec 0c             	sub    esp,0xc
c001c83b:	68 84 01 00 00       	push   0x184
c001c840:	e8 a1 b2 fe ff       	call   c0007ae6 <malloc>
c001c845:	89 c7                	mov    edi,eax
c001c847:	89 04 24             	mov    DWORD PTR [esp],eax
c001c84a:	e8 45 0e 00 00       	call   c001d694 <ATAPI::ATAPI()>
c001c84f:	5a                   	pop    edx
c001c850:	59                   	pop    ecx
c001c851:	57                   	push   edi
c001c852:	53                   	push   ebx
c001c853:	e8 9e 01 ff ff       	call   c000c9f6 <Device::addChild(Device*)>
c001c858:	8b 07                	mov    eax,DWORD PTR [edi]
c001c85a:	53                   	push   ebx
c001c85b:	55                   	push   ebp
c001c85c:	6a 00                	push   0x0
c001c85e:	57                   	push   edi
c001c85f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c862:	83 c4 20             	add    esp,0x20
c001c865:	45                   	inc    ebp
c001c866:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c86b:	74 0d                	je     c001c87a <IDE::detect()+0x256>
c001c86d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c875:	e9 db fd ff ff       	jmp    c001c655 <IDE::detect()+0x31>
c001c87a:	4e                   	dec    esi
c001c87b:	74 69                	je     c001c8e6 <IDE::detect()+0x2c2>
c001c87d:	be 01 00 00 00       	mov    esi,0x1
c001c882:	e9 c6 fd ff ff       	jmp    c001c64d <IDE::detect()+0x29>
c001c887:	50                   	push   eax
c001c888:	6a 04                	push   0x4
c001c88a:	56                   	push   esi
c001c88b:	53                   	push   ebx
c001c88c:	e8 f3 f6 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c891:	83 c4 0c             	add    esp,0xc
c001c894:	89 c7                	mov    edi,eax
c001c896:	6a 05                	push   0x5
c001c898:	56                   	push   esi
c001c899:	53                   	push   ebx
c001c89a:	e8 e5 f6 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c89f:	83 c4 10             	add    esp,0x10
c001c8a2:	89 f9                	mov    ecx,edi
c001c8a4:	0f b6 c0             	movzx  eax,al
c001c8a7:	0f b6 f9             	movzx  edi,cl
c001c8aa:	83 ff 14             	cmp    edi,0x14
c001c8ad:	75 07                	jne    c001c8b6 <IDE::detect()+0x292>
c001c8af:	3d eb 00 00 00       	cmp    eax,0xeb
c001c8b4:	eb 0a                	jmp    c001c8c0 <IDE::detect()+0x29c>
c001c8b6:	3d 96 00 00 00       	cmp    eax,0x96
c001c8bb:	75 a9                	jne    c001c866 <IDE::detect()+0x242>
c001c8bd:	83 ff 69             	cmp    edi,0x69
c001c8c0:	75 a4                	jne    c001c866 <IDE::detect()+0x242>
c001c8c2:	68 a1 00 00 00       	push   0xa1
c001c8c7:	6a 07                	push   0x7
c001c8c9:	56                   	push   esi
c001c8ca:	53                   	push   ebx
c001c8cb:	e8 f4 f5 ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8d0:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c8d7:	e8 4c 9c ff ff       	call   c0016528 <milliTenthSleep(unsigned int)>
c001c8dc:	83 c4 10             	add    esp,0x10
c001c8df:	b1 01                	mov    cl,0x1
c001c8e1:	e9 64 fe ff ff       	jmp    c001c74a <IDE::detect()+0x126>
c001c8e6:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c8ec:	5b                   	pop    ebx
c001c8ed:	5e                   	pop    esi
c001c8ee:	5f                   	pop    edi
c001c8ef:	5d                   	pop    ebp
c001c8f0:	c3                   	ret    
c001c8f1:	90                   	nop

c001c8f2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c8f2:	55                   	push   ebp
c001c8f3:	57                   	push   edi
c001c8f4:	56                   	push   esi
c001c8f5:	53                   	push   ebx
c001c8f6:	83 ec 1c             	sub    esp,0x1c
c001c8f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c8fd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c901:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c905:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c909:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c90d:	88 c3                	mov    bl,al
c001c90f:	25 ff 00 00 00       	and    eax,0xff
c001c914:	0f 84 88 00 00 00    	je     c001c9a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c91a:	83 ec 0c             	sub    esp,0xc
c001c91d:	89 c7                	mov    edi,eax
c001c91f:	68 d7 34 02 c0       	push   0xc00234d7
c001c924:	e8 4c e0 fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001c929:	83 c4 10             	add    esp,0x10
c001c92c:	83 ff 01             	cmp    edi,0x1
c001c92f:	74 6b                	je     c001c99c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c931:	83 ff 02             	cmp    edi,0x2
c001c934:	75 58                	jne    c001c98e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c936:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c93b:	01 ff                	add    edi,edi
c001c93d:	50                   	push   eax
c001c93e:	09 fe                	or     esi,edi
c001c940:	6a 01                	push   0x1
c001c942:	89 f0                	mov    eax,esi
c001c944:	0f b6 f0             	movzx  esi,al
c001c947:	c1 e6 06             	shl    esi,0x6
c001c94a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c952:	50                   	push   eax
c001c953:	55                   	push   ebp
c001c954:	e8 2b f6 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c959:	83 c4 10             	add    esp,0x10
c001c95c:	a8 01                	test   al,0x1
c001c95e:	74 02                	je     c001c962 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c960:	b3 07                	mov    bl,0x7
c001c962:	a8 02                	test   al,0x2
c001c964:	74 02                	je     c001c968 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c966:	b3 03                	mov    bl,0x3
c001c968:	a8 04                	test   al,0x4
c001c96a:	74 02                	je     c001c96e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c96c:	b3 14                	mov    bl,0x14
c001c96e:	a8 08                	test   al,0x8
c001c970:	74 02                	je     c001c974 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c972:	b3 03                	mov    bl,0x3
c001c974:	a8 10                	test   al,0x10
c001c976:	74 02                	je     c001c97a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c978:	b3 15                	mov    bl,0x15
c001c97a:	a8 20                	test   al,0x20
c001c97c:	74 02                	je     c001c980 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c97e:	b3 03                	mov    bl,0x3
c001c980:	a8 40                	test   al,0x40
c001c982:	74 02                	je     c001c986 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c984:	b3 16                	mov    bl,0x16
c001c986:	a8 80                	test   al,0x80
c001c988:	74 18                	je     c001c9a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c98a:	b3 0d                	mov    bl,0xd
c001c98c:	eb 14                	jmp    c001c9a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c98e:	83 ff 03             	cmp    edi,0x3
c001c991:	74 0d                	je     c001c9a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c993:	83 ff 04             	cmp    edi,0x4
c001c996:	75 0a                	jne    c001c9a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c998:	b3 08                	mov    bl,0x8
c001c99a:	eb 06                	jmp    c001c9a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c99c:	b3 13                	mov    bl,0x13
c001c99e:	eb 02                	jmp    c001c9a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c9a0:	b3 17                	mov    bl,0x17
c001c9a2:	83 c4 1c             	add    esp,0x1c
c001c9a5:	88 d8                	mov    al,bl
c001c9a7:	5b                   	pop    ebx
c001c9a8:	5e                   	pop    esi
c001c9a9:	5f                   	pop    edi
c001c9aa:	5d                   	pop    ebp
c001c9ab:	c3                   	ret    

c001c9ac <IDE::polling(unsigned char, unsigned int)>:
c001c9ac:	57                   	push   edi
c001c9ad:	56                   	push   esi
c001c9ae:	53                   	push   ebx
c001c9af:	bb 04 00 00 00       	mov    ebx,0x4
c001c9b4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c9b8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c9bd:	52                   	push   edx
c001c9be:	6a 0c                	push   0xc
c001c9c0:	56                   	push   esi
c001c9c1:	57                   	push   edi
c001c9c2:	e8 bd f5 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c9c7:	83 c4 10             	add    esp,0x10
c001c9ca:	4b                   	dec    ebx
c001c9cb:	75 f0                	jne    c001c9bd <IDE::polling(unsigned char, unsigned int)+0x11>
c001c9cd:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c9d2:	50                   	push   eax
c001c9d3:	6a 0c                	push   0xc
c001c9d5:	56                   	push   esi
c001c9d6:	57                   	push   edi
c001c9d7:	e8 a8 f5 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001c9dc:	83 c4 10             	add    esp,0x10
c001c9df:	a8 01                	test   al,0x1
c001c9e1:	75 17                	jne    c001c9fa <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c9e3:	a8 20                	test   al,0x20
c001c9e5:	75 0f                	jne    c001c9f6 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c9e7:	4b                   	dec    ebx
c001c9e8:	74 10                	je     c001c9fa <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c9ea:	a8 80                	test   al,0x80
c001c9ec:	75 e4                	jne    c001c9d2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c9ee:	a8 08                	test   al,0x8
c001c9f0:	74 e0                	je     c001c9d2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c9f2:	31 c0                	xor    eax,eax
c001c9f4:	eb 06                	jmp    c001c9fc <IDE::polling(unsigned char, unsigned int)+0x50>
c001c9f6:	b0 01                	mov    al,0x1
c001c9f8:	eb 02                	jmp    c001c9fc <IDE::polling(unsigned char, unsigned int)+0x50>
c001c9fa:	b0 02                	mov    al,0x2
c001c9fc:	5b                   	pop    ebx
c001c9fd:	5e                   	pop    esi
c001c9fe:	5f                   	pop    edi
c001c9ff:	c3                   	ret    

c001ca00 <SATABus::close(int, int, void*)>:
c001ca00:	31 c0                	xor    eax,eax
c001ca02:	c3                   	ret    
c001ca03:	90                   	nop

c001ca04 <SATABus::detect()>:
c001ca04:	c3                   	ret    
c001ca05:	90                   	nop

c001ca06 <SATABus::SATABus()>:
c001ca06:	83 ec 0c             	sub    esp,0xc
c001ca09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca0d:	83 ec 08             	sub    esp,0x8
c001ca10:	68 10 35 02 c0       	push   0xc0023510
c001ca15:	50                   	push   eax
c001ca16:	e8 59 03 ff ff       	call   c000cd74 <HardDiskController::HardDiskController(char const*)>
c001ca1b:	83 c4 10             	add    esp,0x10
c001ca1e:	ba 3c 35 02 c0       	mov    edx,0xc002353c
c001ca23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca27:	89 10                	mov    DWORD PTR [eax],edx
c001ca29:	83 ec 0c             	sub    esp,0xc
c001ca2c:	6a 50                	push   0x50
c001ca2e:	e8 8b b4 fe ff       	call   c0007ebe <Phys::allocateContiguousPages(int)>
c001ca33:	83 c4 10             	add    esp,0x10
c001ca36:	89 c2                	mov    edx,eax
c001ca38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca3c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ca42:	83 ec 0c             	sub    esp,0xc
c001ca45:	6a 50                	push   0x50
c001ca47:	e8 f1 cb fe ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c001ca4c:	83 c4 10             	add    esp,0x10
c001ca4f:	89 c2                	mov    edx,eax
c001ca51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca55:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ca5b:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001ca60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ca64:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001ca6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ca6e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ca74:	83 ec 0c             	sub    esp,0xc
c001ca77:	6a 03                	push   0x3
c001ca79:	6a 50                	push   0x50
c001ca7b:	51                   	push   ecx
c001ca7c:	52                   	push   edx
c001ca7d:	50                   	push   eax
c001ca7e:	e8 c7 d4 fe ff       	call   c0009f4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ca83:	83 c4 20             	add    esp,0x20
c001ca86:	90                   	nop
c001ca87:	83 c4 0c             	add    esp,0xc
c001ca8a:	c3                   	ret    
c001ca8b:	90                   	nop

c001ca8c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ca8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca90:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001ca93:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ca96:	09 c2                	or     edx,eax
c001ca98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001caa2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001caa4:	31 c0                	xor    eax,eax
c001caa6:	c1 e9 08             	shr    ecx,0x8
c001caa9:	83 e1 0f             	and    ecx,0xf
c001caac:	39 c8                	cmp    eax,ecx
c001caae:	74 0a                	je     c001caba <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001cab0:	f6 c2 01             	test   dl,0x1
c001cab3:	74 08                	je     c001cabd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001cab5:	d1 ea                	shr    edx,1
c001cab7:	40                   	inc    eax
c001cab8:	eb f2                	jmp    c001caac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001caba:	83 c8 ff             	or     eax,0xffffffff
c001cabd:	c3                   	ret    

c001cabe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001cabe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cac2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001cac5:	89 c2                	mov    edx,eax
c001cac7:	c1 ea 08             	shr    edx,0x8
c001caca:	83 e2 0f             	and    edx,0xf
c001cacd:	4a                   	dec    edx
c001cace:	75 32                	jne    c001cb02 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001cad0:	83 e0 0f             	and    eax,0xf
c001cad3:	83 f8 03             	cmp    eax,0x3
c001cad6:	75 2a                	jne    c001cb02 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001cad8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001cadb:	b8 02 00 00 00       	mov    eax,0x2
c001cae0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001cae6:	74 1c                	je     c001cb04 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001cae8:	b8 04 00 00 00       	mov    eax,0x4
c001caed:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001caf3:	74 0f                	je     c001cb04 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001caf5:	31 c0                	xor    eax,eax
c001caf7:	83 fa 03             	cmp    edx,0x3
c001cafa:	0f 94 c0             	sete   al
c001cafd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001cb01:	c3                   	ret    
c001cb02:	31 c0                	xor    eax,eax
c001cb04:	c3                   	ret    
c001cb05:	90                   	nop

c001cb06 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001cb06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb0a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cb0d:	0f ba e2 0f          	bt     edx,0xf
c001cb11:	72 f7                	jb     c001cb0a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001cb13:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cb16:	83 ca 10             	or     edx,0x10
c001cb19:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cb1c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cb1f:	83 ca 01             	or     edx,0x1
c001cb22:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cb25:	c3                   	ret    

c001cb26 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001cb26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb2a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cb2d:	83 e2 fe             	and    edx,0xfffffffe
c001cb30:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cb33:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cb36:	83 e2 ef             	and    edx,0xffffffef
c001cb39:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cb3c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cb3f:	0f ba e2 0e          	bt     edx,0xe
c001cb43:	72 f7                	jb     c001cb3c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001cb45:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cb48:	0f ba e2 0f          	bt     edx,0xf
c001cb4c:	72 ee                	jb     c001cb3c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001cb4e:	c3                   	ret    
c001cb4f:	90                   	nop

c001cb50 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001cb50:	55                   	push   ebp
c001cb51:	57                   	push   edi
c001cb52:	56                   	push   esi
c001cb53:	53                   	push   ebx
c001cb54:	83 ec 1c             	sub    esp,0x1c
c001cb57:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cb5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cb5f:	53                   	push   ebx
c001cb60:	56                   	push   esi
c001cb61:	e8 c0 ff ff ff       	call   c001cb26 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001cb66:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001cb6a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001cb70:	83 ec 0c             	sub    esp,0xc
c001cb73:	c1 e5 0a             	shl    ebp,0xa
c001cb76:	01 e8                	add    eax,ebp
c001cb78:	89 03                	mov    DWORD PTR [ebx],eax
c001cb7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb7c:	68 00 04 00 00       	push   0x400
c001cb81:	6a 00                	push   0x0
c001cb83:	50                   	push   eax
c001cb84:	e8 67 39 fe ff       	call   c00004f0 <memset>
c001cb89:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001cb8f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001cb93:	01 e8                	add    eax,ebp
c001cb95:	83 c4 1c             	add    esp,0x1c
c001cb98:	89 03                	mov    DWORD PTR [ebx],eax
c001cb9a:	c1 e2 08             	shl    edx,0x8
c001cb9d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cba4:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001cbaa:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001cbb0:	01 f8                	add    eax,edi
c001cbb2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cbb5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cbb8:	68 00 01 00 00       	push   0x100
c001cbbd:	6a 00                	push   0x0
c001cbbf:	50                   	push   eax
c001cbc0:	e8 2b 39 fe ff       	call   c00004f0 <memset>
c001cbc5:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001cbcb:	01 fa                	add    edx,edi
c001cbcd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cbd1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001cbd4:	c1 e7 0d             	shl    edi,0xd
c001cbd7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cbde:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001cbe4:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001cbea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbee:	31 ff                	xor    edi,edi
c001cbf0:	83 c4 10             	add    esp,0x10
c001cbf3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001cbf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbfd:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001cc03:	83 c5 20             	add    ebp,0x20
c001cc06:	01 f8                	add    eax,edi
c001cc08:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cc0b:	52                   	push   edx
c001cc0c:	68 00 01 00 00       	push   0x100
c001cc11:	6a 00                	push   0x0
c001cc13:	50                   	push   eax
c001cc14:	e8 d7 38 fe ff       	call   c00004f0 <memset>
c001cc19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cc1d:	83 c4 10             	add    esp,0x10
c001cc20:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001cc26:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001cc2d:	01 f8                	add    eax,edi
c001cc2f:	81 c7 00 01 00 00    	add    edi,0x100
c001cc35:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cc38:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001cc3e:	75 b3                	jne    c001cbf3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001cc40:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cc47:	50                   	push   eax
c001cc48:	50                   	push   eax
c001cc49:	53                   	push   ebx
c001cc4a:	56                   	push   esi
c001cc4b:	e8 b6 fe ff ff       	call   c001cb06 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cc50:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cc57:	83 c4 2c             	add    esp,0x2c
c001cc5a:	5b                   	pop    ebx
c001cc5b:	5e                   	pop    esi
c001cc5c:	5f                   	pop    edi
c001cc5d:	5d                   	pop    ebp
c001cc5e:	c3                   	ret    
c001cc5f:	90                   	nop

c001cc60 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cc60:	55                   	push   ebp
c001cc61:	57                   	push   edi
c001cc62:	56                   	push   esi
c001cc63:	53                   	push   ebx
c001cc64:	31 db                	xor    ebx,ebx
c001cc66:	83 ec 0c             	sub    esp,0xc
c001cc69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc6d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cc71:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cc74:	f7 c7 01 00 00 00    	test   edi,0x1
c001cc7a:	74 7a                	je     c001ccf6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cc7c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cc80:	89 d8                	mov    eax,ebx
c001cc82:	c1 e0 07             	shl    eax,0x7
c001cc85:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cc8c:	55                   	push   ebp
c001cc8d:	56                   	push   esi
c001cc8e:	e8 2b fe ff ff       	call   c001cabe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cc93:	5a                   	pop    edx
c001cc94:	83 f8 01             	cmp    eax,0x1
c001cc97:	59                   	pop    ecx
c001cc98:	75 21                	jne    c001ccbb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cc9a:	50                   	push   eax
c001cc9b:	53                   	push   ebx
c001cc9c:	55                   	push   ebp
c001cc9d:	56                   	push   esi
c001cc9e:	e8 ad fe ff ff       	call   c001cb50 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cca3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001ccaa:	e8 37 ae fe ff       	call   c0007ae6 <malloc>
c001ccaf:	89 c5                	mov    ebp,eax
c001ccb1:	89 04 24             	mov    DWORD PTR [esp],eax
c001ccb4:	e8 99 10 00 00       	call   c001dd52 <SATA::SATA()>
c001ccb9:	eb 24                	jmp    c001ccdf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001ccbb:	83 f8 04             	cmp    eax,0x4
c001ccbe:	75 36                	jne    c001ccf6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ccc0:	51                   	push   ecx
c001ccc1:	53                   	push   ebx
c001ccc2:	55                   	push   ebp
c001ccc3:	56                   	push   esi
c001ccc4:	e8 87 fe ff ff       	call   c001cb50 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ccc9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ccd0:	e8 11 ae fe ff       	call   c0007ae6 <malloc>
c001ccd5:	89 c5                	mov    ebp,eax
c001ccd7:	89 04 24             	mov    DWORD PTR [esp],eax
c001ccda:	e8 d5 17 00 00       	call   c001e4b4 <SATAPI::SATAPI()>
c001ccdf:	58                   	pop    eax
c001cce0:	5a                   	pop    edx
c001cce1:	55                   	push   ebp
c001cce2:	56                   	push   esi
c001cce3:	e8 0e fd fe ff       	call   c000c9f6 <Device::addChild(Device*)>
c001cce8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cceb:	56                   	push   esi
c001ccec:	6a 00                	push   0x0
c001ccee:	53                   	push   ebx
c001ccef:	55                   	push   ebp
c001ccf0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ccf3:	83 c4 20             	add    esp,0x20
c001ccf6:	d1 ef                	shr    edi,1
c001ccf8:	43                   	inc    ebx
c001ccf9:	83 fb 20             	cmp    ebx,0x20
c001ccfc:	0f 85 72 ff ff ff    	jne    c001cc74 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cd02:	83 c4 0c             	add    esp,0xc
c001cd05:	5b                   	pop    ebx
c001cd06:	5e                   	pop    esi
c001cd07:	5f                   	pop    edi
c001cd08:	5d                   	pop    ebp
c001cd09:	c3                   	ret    

c001cd0a <SATABus::open(int, int, void*)>:
c001cd0a:	83 ec 14             	sub    esp,0x14
c001cd0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd11:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cd17:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cd1d:	52                   	push   edx
c001cd1e:	50                   	push   eax
c001cd1f:	e8 3c ff ff ff       	call   c001cc60 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cd24:	31 c0                	xor    eax,eax
c001cd26:	83 c4 1c             	add    esp,0x1c
c001cd29:	c3                   	ret    

c001cd2a <ATA::close(int, int, void*)>:
c001cd2a:	83 ec 0c             	sub    esp,0xc
c001cd2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd31:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cd37:	85 c0                	test   eax,eax
c001cd39:	74 0c                	je     c001cd47 <ATA::close(int, int, void*)+0x1d>
c001cd3b:	83 ec 0c             	sub    esp,0xc
c001cd3e:	8b 10                	mov    edx,DWORD PTR [eax]
c001cd40:	50                   	push   eax
c001cd41:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cd44:	83 c4 10             	add    esp,0x10
c001cd47:	31 c0                	xor    eax,eax
c001cd49:	83 c4 0c             	add    esp,0xc
c001cd4c:	c3                   	ret    
c001cd4d:	90                   	nop

c001cd4e <ATA::powerSaving(PowerSavingLevel)>:
c001cd4e:	c3                   	ret    
c001cd4f:	90                   	nop

c001cd50 <ATA::ATA()>:
c001cd50:	83 ec 0c             	sub    esp,0xc
c001cd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd57:	83 ec 04             	sub    esp,0x4
c001cd5a:	68 00 02 00 00       	push   0x200
c001cd5f:	68 09 36 02 c0       	push   0xc0023609
c001cd64:	50                   	push   eax
c001cd65:	e8 94 00 ff ff       	call   c000cdfe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cd6a:	83 c4 10             	add    esp,0x10
c001cd6d:	ba 7c 35 02 c0       	mov    edx,0xc002357c
c001cd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd76:	89 10                	mov    DWORD PTR [eax],edx
c001cd78:	90                   	nop
c001cd79:	83 c4 0c             	add    esp,0xc
c001cd7c:	c3                   	ret    
c001cd7d:	90                   	nop

c001cd7e <ATA::flush(bool)>:
c001cd7e:	53                   	push   ebx
c001cd7f:	83 ec 08             	sub    esp,0x8
c001cd82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd86:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cd8b:	83 f8 01             	cmp    eax,0x1
c001cd8e:	19 c0                	sbb    eax,eax
c001cd90:	83 e0 fd             	and    eax,0xfffffffd
c001cd93:	05 ea 00 00 00       	add    eax,0xea
c001cd98:	50                   	push   eax
c001cd99:	6a 07                	push   0x7
c001cd9b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cda2:	50                   	push   eax
c001cda3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cda9:	e8 16 f1 ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdae:	83 c4 0c             	add    esp,0xc
c001cdb1:	6a 00                	push   0x0
c001cdb3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdba:	50                   	push   eax
c001cdbb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdc1:	e8 e6 fb ff ff       	call   c001c9ac <IDE::polling(unsigned char, unsigned int)>
c001cdc6:	83 c4 18             	add    esp,0x18
c001cdc9:	5b                   	pop    ebx
c001cdca:	c3                   	ret    
c001cdcb:	90                   	nop

c001cdcc <ATA::readyForCommand()>:
c001cdcc:	56                   	push   esi
c001cdcd:	53                   	push   ebx
c001cdce:	53                   	push   ebx
c001cdcf:	31 db                	xor    ebx,ebx
c001cdd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cdd5:	51                   	push   ecx
c001cdd6:	6a 0c                	push   0xc
c001cdd8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cddf:	50                   	push   eax
c001cde0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cde6:	e8 99 f1 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001cdeb:	83 c4 10             	add    esp,0x10
c001cdee:	a8 88                	test   al,0x88
c001cdf0:	74 1f                	je     c001ce11 <ATA::readyForCommand()+0x45>
c001cdf2:	43                   	inc    ebx
c001cdf3:	83 fb 63             	cmp    ebx,0x63
c001cdf6:	7e dd                	jle    c001cdd5 <ATA::readyForCommand()+0x9>
c001cdf8:	83 ec 0c             	sub    esp,0xc
c001cdfb:	6a 0a                	push   0xa
c001cdfd:	e8 26 97 ff ff       	call   c0016528 <milliTenthSleep(unsigned int)>
c001ce02:	83 c4 10             	add    esp,0x10
c001ce05:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ce0b:	75 c8                	jne    c001cdd5 <ATA::readyForCommand()+0x9>
c001ce0d:	31 c0                	xor    eax,eax
c001ce0f:	eb 02                	jmp    c001ce13 <ATA::readyForCommand()+0x47>
c001ce11:	b0 01                	mov    al,0x1
c001ce13:	5a                   	pop    edx
c001ce14:	5b                   	pop    ebx
c001ce15:	5e                   	pop    esi
c001ce16:	c3                   	ret    
c001ce17:	90                   	nop

c001ce18 <ATA::access(unsigned long long, int, void*, bool)>:
c001ce18:	55                   	push   ebp
c001ce19:	57                   	push   edi
c001ce1a:	56                   	push   esi
c001ce1b:	53                   	push   ebx
c001ce1c:	83 ec 2c             	sub    esp,0x2c
c001ce1f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ce23:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ce27:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ce2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce2f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ce33:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ce37:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ce3b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ce41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ce45:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ce4b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ce4f:	c1 e0 06             	shl    eax,0x6
c001ce52:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001ce5a:	74 5d                	je     c001ceb9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001ce5c:	89 fa                	mov    edx,edi
c001ce5e:	89 f0                	mov    eax,esi
c001ce60:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001ce64:	c1 ea 1c             	shr    edx,0x1c
c001ce67:	89 d1                	mov    ecx,edx
c001ce69:	09 c1                	or     ecx,eax
c001ce6b:	74 25                	je     c001ce92 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001ce6d:	31 ed                	xor    ebp,ebp
c001ce6f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001ce76:	89 fa                	mov    edx,edi
c001ce78:	89 f0                	mov    eax,esi
c001ce7a:	0f ad d0             	shrd   eax,edx,cl
c001ce7d:	d3 ea                	shr    edx,cl
c001ce7f:	f6 c1 20             	test   cl,0x20
c001ce82:	74 02                	je     c001ce86 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001ce84:	89 d0                	mov    eax,edx
c001ce86:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001ce8a:	45                   	inc    ebp
c001ce8b:	83 fd 06             	cmp    ebp,0x6
c001ce8e:	75 df                	jne    c001ce6f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001ce90:	eb 76                	jmp    c001cf08 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001ce92:	89 f0                	mov    eax,esi
c001ce94:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001ce99:	89 fa                	mov    edx,edi
c001ce9b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cea2:	0f ac d0 10          	shrd   eax,edx,0x10
c001cea6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ceab:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ceaf:	c1 ee 18             	shr    esi,0x18
c001ceb2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ceb7:	eb 56                	jmp    c001cf0f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ceb9:	6a 00                	push   0x0
c001cebb:	6a 3f                	push   0x3f
c001cebd:	57                   	push   edi
c001cebe:	56                   	push   esi
c001cebf:	e8 ac 2a 00 00       	call   c001f970 <__umoddi3>
c001cec4:	83 c4 10             	add    esp,0x10
c001cec7:	40                   	inc    eax
c001cec8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cecc:	6a 00                	push   0x0
c001cece:	68 f0 03 00 00       	push   0x3f0
c001ced3:	57                   	push   edi
c001ced4:	56                   	push   esi
c001ced5:	e8 96 29 00 00       	call   c001f870 <__udivdi3>
c001ceda:	83 c4 10             	add    esp,0x10
c001cedd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cee2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cee9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ceee:	6a 00                	push   0x0
c001cef0:	6a 3f                	push   0x3f
c001cef2:	57                   	push   edi
c001cef3:	56                   	push   esi
c001cef4:	e8 77 29 00 00       	call   c001f870 <__udivdi3>
c001cef9:	83 c4 10             	add    esp,0x10
c001cefc:	83 e0 0f             	and    eax,0xf
c001ceff:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001cf04:	89 c6                	mov    esi,eax
c001cf06:	eb 07                	jmp    c001cf0f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cf08:	31 f6                	xor    esi,esi
c001cf0a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001cf0f:	bf 01 00 00 00       	mov    edi,0x1
c001cf14:	50                   	push   eax
c001cf15:	6a 00                	push   0x0
c001cf17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf1e:	50                   	push   eax
c001cf1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf23:	e8 a4 f1 ff ff       	call   c001c0cc <IDE::enableIRQs(unsigned char, bool)>
c001cf28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf2b:	e8 9c fe ff ff       	call   c001cdcc <ATA::readyForCommand()>
c001cf30:	83 c4 10             	add    esp,0x10
c001cf33:	84 c0                	test   al,al
c001cf35:	0f 84 69 02 00 00    	je     c001d1a4 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cf3b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cf41:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cf47:	c1 e0 04             	shl    eax,0x4
c001cf4a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cf51:	09 c6                	or     esi,eax
c001cf53:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001cf58:	75 05                	jne    c001cf5f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cf5a:	83 ce a0             	or     esi,0xffffffa0
c001cf5d:	eb 03                	jmp    c001cf62 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001cf5f:	83 ce e0             	or     esi,0xffffffe0
c001cf62:	89 f0                	mov    eax,esi
c001cf64:	0f b6 f0             	movzx  esi,al
c001cf67:	56                   	push   esi
c001cf68:	6a 06                	push   0x6
c001cf6a:	51                   	push   ecx
c001cf6b:	52                   	push   edx
c001cf6c:	e8 53 ef ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf71:	83 c4 10             	add    esp,0x10
c001cf74:	6a 00                	push   0x0
c001cf76:	6a 01                	push   0x1
c001cf78:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf7f:	50                   	push   eax
c001cf80:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf86:	e8 39 ef ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf8b:	83 c4 10             	add    esp,0x10
c001cf8e:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001cf93:	83 f8 02             	cmp    eax,0x2
c001cf96:	75 6e                	jne    c001d006 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001cf98:	6a 00                	push   0x0
c001cf9a:	6a 08                	push   0x8
c001cf9c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfa3:	50                   	push   eax
c001cfa4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfaa:	e8 15 ef ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfaf:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cfb4:	50                   	push   eax
c001cfb5:	6a 09                	push   0x9
c001cfb7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfbe:	50                   	push   eax
c001cfbf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfc5:	e8 fa ee ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfca:	83 c4 20             	add    esp,0x20
c001cfcd:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cfd2:	50                   	push   eax
c001cfd3:	6a 0a                	push   0xa
c001cfd5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfdc:	50                   	push   eax
c001cfdd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfe3:	e8 dc ee ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfe8:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cfed:	50                   	push   eax
c001cfee:	6a 0b                	push   0xb
c001cff0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cff7:	50                   	push   eax
c001cff8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cffe:	e8 c1 ee ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d003:	83 c4 20             	add    esp,0x20
c001d006:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d00b:	50                   	push   eax
c001d00c:	6a 02                	push   0x2
c001d00e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d015:	50                   	push   eax
c001d016:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d01c:	e8 a3 ee ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d021:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d026:	50                   	push   eax
c001d027:	6a 03                	push   0x3
c001d029:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d030:	50                   	push   eax
c001d031:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d037:	e8 88 ee ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d03c:	83 c4 20             	add    esp,0x20
c001d03f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d044:	50                   	push   eax
c001d045:	6a 04                	push   0x4
c001d047:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d04e:	50                   	push   eax
c001d04f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d055:	e8 6a ee ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d05a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d05f:	50                   	push   eax
c001d060:	6a 05                	push   0x5
c001d062:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d069:	50                   	push   eax
c001d06a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d070:	e8 4f ee ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d075:	83 c4 20             	add    esp,0x20
c001d078:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d07d:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001d082:	74 11                	je     c001d095 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001d084:	b8 30 00 00 00       	mov    eax,0x30
c001d089:	83 fa 02             	cmp    edx,0x2
c001d08c:	75 16                	jne    c001d0a4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001d08e:	b8 34 00 00 00       	mov    eax,0x34
c001d093:	eb 0f                	jmp    c001d0a4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001d095:	b8 20 00 00 00       	mov    eax,0x20
c001d09a:	83 fa 02             	cmp    edx,0x2
c001d09d:	75 05                	jne    c001d0a4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001d09f:	b8 24 00 00 00       	mov    eax,0x24
c001d0a4:	50                   	push   eax
c001d0a5:	6a 07                	push   0x7
c001d0a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0ae:	50                   	push   eax
c001d0af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0b5:	e8 0a ee ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0ba:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d0be:	83 c4 10             	add    esp,0x10
c001d0c1:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001d0c6:	85 f6                	test   esi,esi
c001d0c8:	0f 84 b3 00 00 00    	je     c001d181 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001d0ce:	50                   	push   eax
c001d0cf:	6a 01                	push   0x1
c001d0d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0d8:	50                   	push   eax
c001d0d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0df:	e8 c8 f8 ff ff       	call   c001c9ac <IDE::polling(unsigned char, unsigned int)>
c001d0e4:	83 c4 10             	add    esp,0x10
c001d0e7:	0f b6 f8             	movzx  edi,al
c001d0ea:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d0f0:	85 ff                	test   edi,edi
c001d0f2:	74 1d                	je     c001d111 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001d0f4:	57                   	push   edi
c001d0f5:	0f b6 d2             	movzx  edx,dl
c001d0f8:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d0ff:	50                   	push   eax
c001d100:	52                   	push   edx
c001d101:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d107:	e8 e6 f7 ff ff       	call   c001c8f2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d10c:	e9 90 00 00 00       	jmp    c001d1a1 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001d111:	85 ed                	test   ebp,ebp
c001d113:	74 3b                	je     c001d150 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001d115:	31 c9                	xor    ecx,ecx
c001d117:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d11b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d11f:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001d123:	50                   	push   eax
c001d124:	50                   	push   eax
c001d125:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d12c:	50                   	push   eax
c001d12d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d133:	e8 7a ed ff ff       	call   c001beb2 <IDE::getBase(unsigned char)>
c001d138:	89 c2                	mov    edx,eax
c001d13a:	89 f8                	mov    eax,edi
c001d13c:	66 ef                	out    dx,ax
c001d13e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d142:	83 c4 10             	add    esp,0x10
c001d145:	41                   	inc    ecx
c001d146:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d14c:	75 c9                	jne    c001d117 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001d14e:	eb 23                	jmp    c001d173 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001d150:	0f b6 d2             	movzx  edx,dl
c001d153:	51                   	push   ecx
c001d154:	51                   	push   ecx
c001d155:	52                   	push   edx
c001d156:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d15c:	e8 51 ed ff ff       	call   c001beb2 <IDE::getBase(unsigned char)>
c001d161:	b9 00 01 00 00       	mov    ecx,0x100
c001d166:	89 c2                	mov    edx,eax
c001d168:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d16c:	fc                   	cld    
c001d16d:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d170:	83 c4 10             	add    esp,0x10
c001d173:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d17b:	4e                   	dec    esi
c001d17c:	e9 45 ff ff ff       	jmp    c001d0c6 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001d181:	31 ff                	xor    edi,edi
c001d183:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d188:	74 1a                	je     c001d1a4 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001d18a:	50                   	push   eax
c001d18b:	50                   	push   eax
c001d18c:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d191:	83 f8 02             	cmp    eax,0x2
c001d194:	0f 94 c0             	sete   al
c001d197:	0f b6 c0             	movzx  eax,al
c001d19a:	50                   	push   eax
c001d19b:	53                   	push   ebx
c001d19c:	e8 dd fb ff ff       	call   c001cd7e <ATA::flush(bool)>
c001d1a1:	83 c4 10             	add    esp,0x10
c001d1a4:	83 c4 2c             	add    esp,0x2c
c001d1a7:	89 f8                	mov    eax,edi
c001d1a9:	5b                   	pop    ebx
c001d1aa:	5e                   	pop    esi
c001d1ab:	5f                   	pop    edi
c001d1ac:	5d                   	pop    ebp
c001d1ad:	c3                   	ret    

c001d1ae <ATA::detectCHS()>:
c001d1ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1b2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d1b8:	c1 e0 06             	shl    eax,0x6
c001d1bb:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d1c1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d1cb:	c7 44 24 04 60 35 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023560
c001d1d3:	e9 3b 45 ff ff       	jmp    c0011713 <KePanic(char const*)>

c001d1d8 <ATA::open(int, int, void*)>:
c001d1d8:	53                   	push   ebx
c001d1d9:	83 ec 08             	sub    esp,0x8
c001d1dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d1e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1e8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d1ee:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d1f4:	c1 e0 06             	shl    eax,0x6
c001d1f7:	01 d0                	add    eax,edx
c001d1f9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d200:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d206:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d20d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d217:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d21d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d224:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d22b:	75 0c                	jne    c001d239 <ATA::open(int, int, void*)+0x61>
c001d22d:	83 ec 0c             	sub    esp,0xc
c001d230:	53                   	push   ebx
c001d231:	e8 78 ff ff ff       	call   c001d1ae <ATA::detectCHS()>
c001d236:	83 c4 10             	add    esp,0x10
c001d239:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d23f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d245:	c1 e0 06             	shl    eax,0x6
c001d248:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d24f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d259:	d1 e8                	shr    eax,1
c001d25b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d261:	6a 04                	push   0x4
c001d263:	6a 0c                	push   0xc
c001d265:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d26c:	50                   	push   eax
c001d26d:	52                   	push   edx
c001d26e:	e8 51 ec ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d273:	90                   	nop
c001d274:	90                   	nop
c001d275:	6a 00                	push   0x0
c001d277:	6a 0c                	push   0xc
c001d279:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d280:	50                   	push   eax
c001d281:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d287:	e8 38 ec ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d28c:	83 c4 14             	add    esp,0x14
c001d28f:	53                   	push   ebx
c001d290:	e8 d1 fb fe ff       	call   c000ce66 <PhysicalDisk::startCache()>
c001d295:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d298:	e8 0d 0e ff ff       	call   c000e0aa <createPartitionsForDisk(PhysicalDisk*)>
c001d29d:	31 c0                	xor    eax,eax
c001d29f:	83 c4 18             	add    esp,0x18
c001d2a2:	5b                   	pop    ebx
c001d2a3:	c3                   	ret    

c001d2a4 <combineCharAndColour(char, unsigned char)>:
c001d2a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d2a9:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d2af:	c1 e0 08             	shl    eax,0x8
c001d2b2:	09 d0                	or     eax,edx
c001d2b4:	c3                   	ret    

c001d2b5 <combineColours(unsigned char, unsigned char)>:
c001d2b5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d2ba:	c1 e0 04             	shl    eax,0x4
c001d2bd:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d2c1:	c3                   	ret    

c001d2c2 <ATA::read(unsigned long long, int, void*)>:
c001d2c2:	55                   	push   ebp
c001d2c3:	57                   	push   edi
c001d2c4:	56                   	push   esi
c001d2c5:	be 04 00 00 00       	mov    esi,0x4
c001d2ca:	53                   	push   ebx
c001d2cb:	83 ec 0c             	sub    esp,0xc
c001d2ce:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d2d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2d6:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d2d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d2dd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d2e1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d2e7:	0f 87 a1 01 00 00    	ja     c001d48e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d2ed:	be 06 00 00 00       	mov    esi,0x6
c001d2f2:	85 c9                	test   ecx,ecx
c001d2f4:	0f 84 94 01 00 00    	je     c001d48e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d2fa:	55                   	push   ebp
c001d2fb:	55                   	push   ebp
c001d2fc:	6a 00                	push   0x0
c001d2fe:	51                   	push   ecx
c001d2ff:	53                   	push   ebx
c001d300:	52                   	push   edx
c001d301:	50                   	push   eax
c001d302:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d306:	e8 0d fb ff ff       	call   c001ce18 <ATA::access(unsigned long long, int, void*, bool)>
c001d30b:	83 c4 20             	add    esp,0x20
c001d30e:	89 c6                	mov    esi,eax
c001d310:	85 c0                	test   eax,eax
c001d312:	0f 85 71 01 00 00    	jne    c001d489 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d318:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d31e:	89 da                	mov    edx,ebx
c001d320:	50                   	push   eax
c001d321:	bd 10 27 00 00       	mov    ebp,0x2710
c001d326:	50                   	push   eax
c001d327:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d32d:	6a 0f                	push   0xf
c001d32f:	6a 00                	push   0x0
c001d331:	e8 7f ff ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001d336:	59                   	pop    ecx
c001d337:	b9 0a 00 00 00       	mov    ecx,0xa
c001d33c:	5b                   	pop    ebx
c001d33d:	0f b6 d8             	movzx  ebx,al
c001d340:	89 d0                	mov    eax,edx
c001d342:	53                   	push   ebx
c001d343:	99                   	cdq    
c001d344:	f7 fd                	idiv   ebp
c001d346:	99                   	cdq    
c001d347:	f7 f9                	idiv   ecx
c001d349:	83 c2 30             	add    edx,0x30
c001d34c:	0f b6 d2             	movzx  edx,dl
c001d34f:	52                   	push   edx
c001d350:	e8 4f ff ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d355:	5f                   	pop    edi
c001d356:	bf e8 03 00 00       	mov    edi,0x3e8
c001d35b:	5a                   	pop    edx
c001d35c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d362:	53                   	push   ebx
c001d363:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d368:	99                   	cdq    
c001d369:	f7 ff                	idiv   edi
c001d36b:	99                   	cdq    
c001d36c:	f7 f9                	idiv   ecx
c001d36e:	8d 42 30             	lea    eax,[edx+0x30]
c001d371:	0f b6 c0             	movzx  eax,al
c001d374:	50                   	push   eax
c001d375:	e8 2a ff ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d37a:	5f                   	pop    edi
c001d37b:	bf 64 00 00 00       	mov    edi,0x64
c001d380:	5a                   	pop    edx
c001d381:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d387:	53                   	push   ebx
c001d388:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d38d:	99                   	cdq    
c001d38e:	f7 ff                	idiv   edi
c001d390:	99                   	cdq    
c001d391:	f7 f9                	idiv   ecx
c001d393:	8d 42 30             	lea    eax,[edx+0x30]
c001d396:	0f b6 c0             	movzx  eax,al
c001d399:	50                   	push   eax
c001d39a:	e8 05 ff ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d39f:	5a                   	pop    edx
c001d3a0:	5a                   	pop    edx
c001d3a1:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d3a7:	53                   	push   ebx
c001d3a8:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3ad:	99                   	cdq    
c001d3ae:	f7 f9                	idiv   ecx
c001d3b0:	99                   	cdq    
c001d3b1:	f7 f9                	idiv   ecx
c001d3b3:	8d 42 30             	lea    eax,[edx+0x30]
c001d3b6:	0f b6 c0             	movzx  eax,al
c001d3b9:	50                   	push   eax
c001d3ba:	e8 e5 fe ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d3bf:	5a                   	pop    edx
c001d3c0:	5a                   	pop    edx
c001d3c1:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d3c7:	53                   	push   ebx
c001d3c8:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3cd:	99                   	cdq    
c001d3ce:	f7 f9                	idiv   ecx
c001d3d0:	83 c2 30             	add    edx,0x30
c001d3d3:	0f b6 d2             	movzx  edx,dl
c001d3d6:	52                   	push   edx
c001d3d7:	e8 c8 fe ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d3dc:	5a                   	pop    edx
c001d3dd:	5a                   	pop    edx
c001d3de:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d3e4:	53                   	push   ebx
c001d3e5:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3ea:	99                   	cdq    
c001d3eb:	f7 fd                	idiv   ebp
c001d3ed:	99                   	cdq    
c001d3ee:	f7 f9                	idiv   ecx
c001d3f0:	8d 42 30             	lea    eax,[edx+0x30]
c001d3f3:	0f b6 c0             	movzx  eax,al
c001d3f6:	50                   	push   eax
c001d3f7:	e8 a8 fe ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d3fc:	5d                   	pop    ebp
c001d3fd:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d402:	5a                   	pop    edx
c001d403:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d409:	53                   	push   ebx
c001d40a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d40f:	99                   	cdq    
c001d410:	f7 fd                	idiv   ebp
c001d412:	99                   	cdq    
c001d413:	f7 f9                	idiv   ecx
c001d415:	8d 42 30             	lea    eax,[edx+0x30]
c001d418:	0f b6 c0             	movzx  eax,al
c001d41b:	50                   	push   eax
c001d41c:	e8 83 fe ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d421:	5d                   	pop    ebp
c001d422:	5a                   	pop    edx
c001d423:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d429:	53                   	push   ebx
c001d42a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d42f:	99                   	cdq    
c001d430:	f7 ff                	idiv   edi
c001d432:	99                   	cdq    
c001d433:	f7 f9                	idiv   ecx
c001d435:	8d 42 30             	lea    eax,[edx+0x30]
c001d438:	0f b6 c0             	movzx  eax,al
c001d43b:	50                   	push   eax
c001d43c:	e8 63 fe ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d441:	5f                   	pop    edi
c001d442:	5d                   	pop    ebp
c001d443:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d449:	53                   	push   ebx
c001d44a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d44f:	99                   	cdq    
c001d450:	f7 f9                	idiv   ecx
c001d452:	99                   	cdq    
c001d453:	f7 f9                	idiv   ecx
c001d455:	8d 42 30             	lea    eax,[edx+0x30]
c001d458:	0f b6 c0             	movzx  eax,al
c001d45b:	50                   	push   eax
c001d45c:	e8 43 fe ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d461:	5a                   	pop    edx
c001d462:	5f                   	pop    edi
c001d463:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d469:	53                   	push   ebx
c001d46a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d46f:	99                   	cdq    
c001d470:	f7 f9                	idiv   ecx
c001d472:	83 c2 30             	add    edx,0x30
c001d475:	0f b6 d2             	movzx  edx,dl
c001d478:	52                   	push   edx
c001d479:	e8 26 fe ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d47e:	83 c4 10             	add    esp,0x10
c001d481:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d487:	eb 05                	jmp    c001d48e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d489:	be 01 00 00 00       	mov    esi,0x1
c001d48e:	83 c4 0c             	add    esp,0xc
c001d491:	89 f0                	mov    eax,esi
c001d493:	5b                   	pop    ebx
c001d494:	5e                   	pop    esi
c001d495:	5f                   	pop    edi
c001d496:	5d                   	pop    ebp
c001d497:	c3                   	ret    

c001d498 <ATA::write(unsigned long long, int, void*)>:
c001d498:	55                   	push   ebp
c001d499:	57                   	push   edi
c001d49a:	56                   	push   esi
c001d49b:	be 04 00 00 00       	mov    esi,0x4
c001d4a0:	53                   	push   ebx
c001d4a1:	83 ec 0c             	sub    esp,0xc
c001d4a4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d4a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4ac:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d4af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d4b3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d4b7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d4bd:	0f 87 9c 01 00 00    	ja     c001d65f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d4c3:	be 06 00 00 00       	mov    esi,0x6
c001d4c8:	85 c9                	test   ecx,ecx
c001d4ca:	0f 84 8f 01 00 00    	je     c001d65f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d4d0:	55                   	push   ebp
c001d4d1:	55                   	push   ebp
c001d4d2:	6a 01                	push   0x1
c001d4d4:	51                   	push   ecx
c001d4d5:	53                   	push   ebx
c001d4d6:	52                   	push   edx
c001d4d7:	50                   	push   eax
c001d4d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d4dc:	e8 37 f9 ff ff       	call   c001ce18 <ATA::access(unsigned long long, int, void*, bool)>
c001d4e1:	83 c4 20             	add    esp,0x20
c001d4e4:	89 c6                	mov    esi,eax
c001d4e6:	85 c0                	test   eax,eax
c001d4e8:	0f 85 6c 01 00 00    	jne    c001d65a <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d4ee:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d4f4:	bd 10 27 00 00       	mov    ebp,0x2710
c001d4f9:	50                   	push   eax
c001d4fa:	50                   	push   eax
c001d4fb:	6a 0f                	push   0xf
c001d4fd:	6a 00                	push   0x0
c001d4ff:	e8 b1 fd ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001d504:	5a                   	pop    edx
c001d505:	0f b6 d8             	movzx  ebx,al
c001d508:	59                   	pop    ecx
c001d509:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d50e:	53                   	push   ebx
c001d50f:	b9 0a 00 00 00       	mov    ecx,0xa
c001d514:	99                   	cdq    
c001d515:	f7 fd                	idiv   ebp
c001d517:	99                   	cdq    
c001d518:	f7 f9                	idiv   ecx
c001d51a:	8d 42 30             	lea    eax,[edx+0x30]
c001d51d:	0f b6 c0             	movzx  eax,al
c001d520:	50                   	push   eax
c001d521:	e8 7e fd ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d526:	5f                   	pop    edi
c001d527:	bf e8 03 00 00       	mov    edi,0x3e8
c001d52c:	5a                   	pop    edx
c001d52d:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d533:	53                   	push   ebx
c001d534:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d539:	99                   	cdq    
c001d53a:	f7 ff                	idiv   edi
c001d53c:	99                   	cdq    
c001d53d:	f7 f9                	idiv   ecx
c001d53f:	8d 42 30             	lea    eax,[edx+0x30]
c001d542:	0f b6 c0             	movzx  eax,al
c001d545:	50                   	push   eax
c001d546:	e8 59 fd ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d54b:	5f                   	pop    edi
c001d54c:	bf 64 00 00 00       	mov    edi,0x64
c001d551:	5a                   	pop    edx
c001d552:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d558:	53                   	push   ebx
c001d559:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d55e:	99                   	cdq    
c001d55f:	f7 ff                	idiv   edi
c001d561:	99                   	cdq    
c001d562:	f7 f9                	idiv   ecx
c001d564:	8d 42 30             	lea    eax,[edx+0x30]
c001d567:	0f b6 c0             	movzx  eax,al
c001d56a:	50                   	push   eax
c001d56b:	e8 34 fd ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d570:	5a                   	pop    edx
c001d571:	5a                   	pop    edx
c001d572:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d578:	53                   	push   ebx
c001d579:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d57e:	99                   	cdq    
c001d57f:	f7 f9                	idiv   ecx
c001d581:	99                   	cdq    
c001d582:	f7 f9                	idiv   ecx
c001d584:	8d 42 30             	lea    eax,[edx+0x30]
c001d587:	0f b6 c0             	movzx  eax,al
c001d58a:	50                   	push   eax
c001d58b:	e8 14 fd ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d590:	5a                   	pop    edx
c001d591:	5a                   	pop    edx
c001d592:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d598:	53                   	push   ebx
c001d599:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d59e:	99                   	cdq    
c001d59f:	f7 f9                	idiv   ecx
c001d5a1:	8d 42 30             	lea    eax,[edx+0x30]
c001d5a4:	0f b6 c0             	movzx  eax,al
c001d5a7:	50                   	push   eax
c001d5a8:	e8 f7 fc ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d5ad:	5a                   	pop    edx
c001d5ae:	5a                   	pop    edx
c001d5af:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d5b5:	53                   	push   ebx
c001d5b6:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5bb:	99                   	cdq    
c001d5bc:	f7 fd                	idiv   ebp
c001d5be:	99                   	cdq    
c001d5bf:	f7 f9                	idiv   ecx
c001d5c1:	8d 42 30             	lea    eax,[edx+0x30]
c001d5c4:	0f b6 c0             	movzx  eax,al
c001d5c7:	50                   	push   eax
c001d5c8:	e8 d7 fc ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d5cd:	5d                   	pop    ebp
c001d5ce:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d5d3:	5a                   	pop    edx
c001d5d4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d5da:	53                   	push   ebx
c001d5db:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5e0:	99                   	cdq    
c001d5e1:	f7 fd                	idiv   ebp
c001d5e3:	99                   	cdq    
c001d5e4:	f7 f9                	idiv   ecx
c001d5e6:	8d 42 30             	lea    eax,[edx+0x30]
c001d5e9:	0f b6 c0             	movzx  eax,al
c001d5ec:	50                   	push   eax
c001d5ed:	e8 b2 fc ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d5f2:	5d                   	pop    ebp
c001d5f3:	5a                   	pop    edx
c001d5f4:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d5fa:	53                   	push   ebx
c001d5fb:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d600:	99                   	cdq    
c001d601:	f7 ff                	idiv   edi
c001d603:	99                   	cdq    
c001d604:	f7 f9                	idiv   ecx
c001d606:	8d 42 30             	lea    eax,[edx+0x30]
c001d609:	0f b6 c0             	movzx  eax,al
c001d60c:	50                   	push   eax
c001d60d:	e8 92 fc ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d612:	5f                   	pop    edi
c001d613:	5d                   	pop    ebp
c001d614:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d61a:	53                   	push   ebx
c001d61b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d620:	99                   	cdq    
c001d621:	f7 f9                	idiv   ecx
c001d623:	99                   	cdq    
c001d624:	f7 f9                	idiv   ecx
c001d626:	8d 42 30             	lea    eax,[edx+0x30]
c001d629:	0f b6 c0             	movzx  eax,al
c001d62c:	50                   	push   eax
c001d62d:	e8 72 fc ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d632:	5a                   	pop    edx
c001d633:	5f                   	pop    edi
c001d634:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d63a:	53                   	push   ebx
c001d63b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d640:	99                   	cdq    
c001d641:	f7 f9                	idiv   ecx
c001d643:	83 c2 30             	add    edx,0x30
c001d646:	0f b6 d2             	movzx  edx,dl
c001d649:	52                   	push   edx
c001d64a:	e8 55 fc ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001d64f:	83 c4 10             	add    esp,0x10
c001d652:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d658:	eb 05                	jmp    c001d65f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d65a:	be 01 00 00 00       	mov    esi,0x1
c001d65f:	83 c4 0c             	add    esp,0xc
c001d662:	89 f0                	mov    eax,esi
c001d664:	5b                   	pop    ebx
c001d665:	5e                   	pop    esi
c001d666:	5f                   	pop    edi
c001d667:	5d                   	pop    ebp
c001d668:	c3                   	ret    
c001d669:	90                   	nop

c001d66a <ATAPI::write(unsigned long long, int, void*)>:
c001d66a:	b8 03 00 00 00       	mov    eax,0x3
c001d66f:	c3                   	ret    

c001d670 <ATAPI::close(int, int, void*)>:
c001d670:	83 ec 0c             	sub    esp,0xc
c001d673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d677:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d67d:	85 c0                	test   eax,eax
c001d67f:	74 0c                	je     c001d68d <ATAPI::close(int, int, void*)+0x1d>
c001d681:	83 ec 0c             	sub    esp,0xc
c001d684:	8b 10                	mov    edx,DWORD PTR [eax]
c001d686:	50                   	push   eax
c001d687:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d68a:	83 c4 10             	add    esp,0x10
c001d68d:	31 c0                	xor    eax,eax
c001d68f:	83 c4 0c             	add    esp,0xc
c001d692:	c3                   	ret    
c001d693:	90                   	nop

c001d694 <ATAPI::ATAPI()>:
c001d694:	83 ec 0c             	sub    esp,0xc
c001d697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d69b:	83 ec 04             	sub    esp,0x4
c001d69e:	68 00 08 00 00       	push   0x800
c001d6a3:	68 a9 36 02 c0       	push   0xc00236a9
c001d6a8:	50                   	push   eax
c001d6a9:	e8 50 f7 fe ff       	call   c000cdfe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d6ae:	83 c4 10             	add    esp,0x10
c001d6b1:	ba c4 35 02 c0       	mov    edx,0xc00235c4
c001d6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6ba:	89 10                	mov    DWORD PTR [eax],edx
c001d6bc:	90                   	nop
c001d6bd:	83 c4 0c             	add    esp,0xc
c001d6c0:	c3                   	ret    
c001d6c1:	90                   	nop

c001d6c2 <ATAPI::readyForCommand()>:
c001d6c2:	56                   	push   esi
c001d6c3:	53                   	push   ebx
c001d6c4:	53                   	push   ebx
c001d6c5:	31 db                	xor    ebx,ebx
c001d6c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d6cb:	51                   	push   ecx
c001d6cc:	6a 0c                	push   0xc
c001d6ce:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d6d5:	50                   	push   eax
c001d6d6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d6dc:	e8 a3 e8 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001d6e1:	83 c4 10             	add    esp,0x10
c001d6e4:	a8 88                	test   al,0x88
c001d6e6:	74 25                	je     c001d70d <ATAPI::readyForCommand()+0x4b>
c001d6e8:	43                   	inc    ebx
c001d6e9:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d6ef:	7e da                	jle    c001d6cb <ATAPI::readyForCommand()+0x9>
c001d6f1:	83 ec 0c             	sub    esp,0xc
c001d6f4:	68 5e 01 00 00       	push   0x15e
c001d6f9:	e8 2a 8e ff ff       	call   c0016528 <milliTenthSleep(unsigned int)>
c001d6fe:	83 c4 10             	add    esp,0x10
c001d701:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d707:	75 c2                	jne    c001d6cb <ATAPI::readyForCommand()+0x9>
c001d709:	31 c0                	xor    eax,eax
c001d70b:	eb 02                	jmp    c001d70f <ATAPI::readyForCommand()+0x4d>
c001d70d:	b0 01                	mov    al,0x1
c001d70f:	5a                   	pop    edx
c001d710:	5b                   	pop    ebx
c001d711:	5e                   	pop    esi
c001d712:	c3                   	ret    
c001d713:	90                   	nop

c001d714 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d714:	55                   	push   ebp
c001d715:	57                   	push   edi
c001d716:	56                   	push   esi
c001d717:	53                   	push   ebx
c001d718:	83 ec 20             	sub    esp,0x20
c001d71b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d71f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d723:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d727:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d72b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d72f:	6a 01                	push   0x1
c001d731:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d738:	50                   	push   eax
c001d739:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d73f:	e8 88 e9 ff ff       	call   c001c0cc <IDE::enableIRQs(unsigned char, bool)>
c001d744:	5e                   	pop    esi
c001d745:	58                   	pop    eax
c001d746:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d74d:	50                   	push   eax
c001d74e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d754:	e8 45 e7 ff ff       	call   c001be9e <IDE::prepareInterrupt(unsigned char)>
c001d759:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d75c:	e8 61 ff ff ff       	call   c001d6c2 <ATAPI::readyForCommand()>
c001d761:	83 c4 10             	add    esp,0x10
c001d764:	84 c0                	test   al,al
c001d766:	75 0a                	jne    c001d772 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d768:	bb 01 00 00 00       	mov    ebx,0x1
c001d76d:	e9 60 02 00 00       	jmp    c001d9d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d772:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d778:	c1 e0 04             	shl    eax,0x4
c001d77b:	0f b6 c0             	movzx  eax,al
c001d77e:	50                   	push   eax
c001d77f:	6a 06                	push   0x6
c001d781:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d788:	50                   	push   eax
c001d789:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d78f:	e8 30 e7 ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d794:	6a 00                	push   0x0
c001d796:	6a 01                	push   0x1
c001d798:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d79f:	50                   	push   eax
c001d7a0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7a6:	e8 19 e7 ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ab:	83 c4 20             	add    esp,0x20
c001d7ae:	0f b6 c3             	movzx  eax,bl
c001d7b1:	0f b6 df             	movzx  ebx,bh
c001d7b4:	50                   	push   eax
c001d7b5:	6a 04                	push   0x4
c001d7b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7be:	50                   	push   eax
c001d7bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7c5:	e8 fa e6 ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ca:	53                   	push   ebx
c001d7cb:	6a 05                	push   0x5
c001d7cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7d4:	50                   	push   eax
c001d7d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7db:	e8 e4 e6 ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7e0:	83 c4 20             	add    esp,0x20
c001d7e3:	68 a0 00 00 00       	push   0xa0
c001d7e8:	6a 07                	push   0x7
c001d7ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7f1:	50                   	push   eax
c001d7f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7f8:	e8 c7 e6 ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7fd:	83 c4 0c             	add    esp,0xc
c001d800:	6a 01                	push   0x1
c001d802:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d809:	50                   	push   eax
c001d80a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d810:	e8 97 f1 ff ff       	call   c001c9ac <IDE::polling(unsigned char, unsigned int)>
c001d815:	83 c4 10             	add    esp,0x10
c001d818:	0f b6 d8             	movzx  ebx,al
c001d81b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d821:	85 db                	test   ebx,ebx
c001d823:	74 20                	je     c001d845 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d825:	53                   	push   ebx
c001d826:	0f b6 c0             	movzx  eax,al
c001d829:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d830:	52                   	push   edx
c001d831:	50                   	push   eax
c001d832:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d838:	e8 b5 f0 ff ff       	call   c001c8f2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d83d:	83 c4 10             	add    esp,0x10
c001d840:	e9 8d 01 00 00       	jmp    c001d9d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d845:	0f b6 c0             	movzx  eax,al
c001d848:	53                   	push   ebx
c001d849:	53                   	push   ebx
c001d84a:	50                   	push   eax
c001d84b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d851:	e8 5c e6 ff ff       	call   c001beb2 <IDE::getBase(unsigned char)>
c001d856:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d85a:	b9 06 00 00 00       	mov    ecx,0x6
c001d85f:	89 c2                	mov    edx,eax
c001d861:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d864:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d868:	83 c4 10             	add    esp,0x10
c001d86b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d870:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d874:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d87a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d881:	85 db                	test   ebx,ebx
c001d883:	0f 84 ec 00 00 00    	je     c001d975 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d889:	51                   	push   ecx
c001d88a:	51                   	push   ecx
c001d88b:	52                   	push   edx
c001d88c:	50                   	push   eax
c001d88d:	e8 a0 e7 ff ff       	call   c001c032 <IDE::waitInterrupt(unsigned char)>
c001d892:	83 c4 10             	add    esp,0x10
c001d895:	84 c0                	test   al,al
c001d897:	0f 84 cb fe ff ff    	je     c001d768 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d89d:	56                   	push   esi
c001d89e:	56                   	push   esi
c001d89f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8a6:	50                   	push   eax
c001d8a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8ad:	e8 ec e5 ff ff       	call   c001be9e <IDE::prepareInterrupt(unsigned char)>
c001d8b2:	83 c4 0c             	add    esp,0xc
c001d8b5:	6a 04                	push   0x4
c001d8b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8be:	50                   	push   eax
c001d8bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8c5:	e8 ba e6 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001d8ca:	83 c4 0c             	add    esp,0xc
c001d8cd:	89 c6                	mov    esi,eax
c001d8cf:	6a 05                	push   0x5
c001d8d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8d8:	50                   	push   eax
c001d8d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8df:	e8 a0 e6 ff ff       	call   c001bf84 <IDE::read(unsigned char, unsigned char)>
c001d8e4:	89 f1                	mov    ecx,esi
c001d8e6:	0f b6 c0             	movzx  eax,al
c001d8e9:	0f b6 f1             	movzx  esi,cl
c001d8ec:	c1 e0 08             	shl    eax,0x8
c001d8ef:	09 c6                	or     esi,eax
c001d8f1:	d1 fe                	sar    esi,1
c001d8f3:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d8f7:	83 c4 10             	add    esp,0x10
c001d8fa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d8ff:	74 41                	je     c001d942 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d901:	31 c9                	xor    ecx,ecx
c001d903:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d909:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d910:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d914:	75 0a                	jne    c001d920 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d916:	01 c9                	add    ecx,ecx
c001d918:	01 cd                	add    ebp,ecx
c001d91a:	4b                   	dec    ebx
c001d91b:	e9 54 ff ff ff       	jmp    c001d874 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d920:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d925:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d929:	51                   	push   ecx
c001d92a:	51                   	push   ecx
c001d92b:	52                   	push   edx
c001d92c:	50                   	push   eax
c001d92d:	e8 80 e5 ff ff       	call   c001beb2 <IDE::getBase(unsigned char)>
c001d932:	89 c2                	mov    edx,eax
c001d934:	89 f0                	mov    eax,esi
c001d936:	66 ef                	out    dx,ax
c001d938:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d93c:	83 c4 10             	add    esp,0x10
c001d93f:	41                   	inc    ecx
c001d940:	eb c1                	jmp    c001d903 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d942:	31 f6                	xor    esi,esi
c001d944:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d94a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d951:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d955:	75 06                	jne    c001d95d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d957:	01 f6                	add    esi,esi
c001d959:	01 f5                	add    ebp,esi
c001d95b:	eb bd                	jmp    c001d91a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d95d:	51                   	push   ecx
c001d95e:	51                   	push   ecx
c001d95f:	52                   	push   edx
c001d960:	50                   	push   eax
c001d961:	e8 4c e5 ff ff       	call   c001beb2 <IDE::getBase(unsigned char)>
c001d966:	89 c2                	mov    edx,eax
c001d968:	66 ed                	in     ax,dx
c001d96a:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d96f:	83 c4 10             	add    esp,0x10
c001d972:	46                   	inc    esi
c001d973:	eb cf                	jmp    c001d944 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d975:	51                   	push   ecx
c001d976:	51                   	push   ecx
c001d977:	52                   	push   edx
c001d978:	50                   	push   eax
c001d979:	e8 b4 e6 ff ff       	call   c001c032 <IDE::waitInterrupt(unsigned char)>
c001d97e:	83 c4 10             	add    esp,0x10
c001d981:	84 c0                	test   al,al
c001d983:	0f 84 df fd ff ff    	je     c001d768 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d989:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d98e:	52                   	push   edx
c001d98f:	52                   	push   edx
c001d990:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d997:	50                   	push   eax
c001d998:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d99e:	e8 fb e4 ff ff       	call   c001be9e <IDE::prepareInterrupt(unsigned char)>
c001d9a3:	83 c4 10             	add    esp,0x10
c001d9a6:	50                   	push   eax
c001d9a7:	50                   	push   eax
c001d9a8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d9af:	50                   	push   eax
c001d9b0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d9b6:	e8 f7 e4 ff ff       	call   c001beb2 <IDE::getBase(unsigned char)>
c001d9bb:	8d 50 07             	lea    edx,[eax+0x7]
c001d9be:	ec                   	in     al,dx
c001d9bf:	83 c4 10             	add    esp,0x10
c001d9c2:	a8 88                	test   al,0x88
c001d9c4:	74 0a                	je     c001d9d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d9c6:	4b                   	dec    ebx
c001d9c7:	75 dd                	jne    c001d9a6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d9c9:	bb 02 00 00 00       	mov    ebx,0x2
c001d9ce:	eb 02                	jmp    c001d9d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d9d0:	31 db                	xor    ebx,ebx
c001d9d2:	83 c4 1c             	add    esp,0x1c
c001d9d5:	89 d8                	mov    eax,ebx
c001d9d7:	5b                   	pop    ebx
c001d9d8:	5e                   	pop    esi
c001d9d9:	5f                   	pop    edi
c001d9da:	5d                   	pop    ebp
c001d9db:	c3                   	ret    

c001d9dc <ATAPI::diskRemoved()>:
c001d9dc:	53                   	push   ebx
c001d9dd:	83 ec 14             	sub    esp,0x14
c001d9e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d9e4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d9eb:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d9f1:	e8 a4 03 ff ff       	call   c000dd9a <LogicalDisk::unmount()>
c001d9f6:	58                   	pop    eax
c001d9f7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d9fd:	e8 7a 0d ff ff       	call   c000e77c <VCache::writeWriteBuffer()>
c001da02:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001da08:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001da0c:	83 c4 18             	add    esp,0x18
c001da0f:	5b                   	pop    ebx
c001da10:	e9 57 0d ff ff       	jmp    c000e76c <VCache::invalidateReadBuffer()>
c001da15:	90                   	nop

c001da16 <ATAPI::eject()>:
c001da16:	57                   	push   edi
c001da17:	b9 03 00 00 00       	mov    ecx,0x3
c001da1c:	53                   	push   ebx
c001da1d:	83 ec 14             	sub    esp,0x14
c001da20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001da24:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001da28:	fc                   	cld    
c001da29:	31 c0                	xor    eax,eax
c001da2b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001da2d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001da32:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001da37:	50                   	push   eax
c001da38:	50                   	push   eax
c001da39:	6a 00                	push   0x0
c001da3b:	6a 00                	push   0x0
c001da3d:	6a 00                	push   0x0
c001da3f:	6a 02                	push   0x2
c001da41:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001da45:	50                   	push   eax
c001da46:	53                   	push   ebx
c001da47:	e8 c8 fc ff ff       	call   c001d714 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da4c:	83 c4 14             	add    esp,0x14
c001da4f:	53                   	push   ebx
c001da50:	e8 87 ff ff ff       	call   c001d9dc <ATAPI::diskRemoved()>
c001da55:	83 c4 24             	add    esp,0x24
c001da58:	31 c0                	xor    eax,eax
c001da5a:	5b                   	pop    ebx
c001da5b:	5f                   	pop    edi
c001da5c:	c3                   	ret    
c001da5d:	90                   	nop

c001da5e <ATAPI::diskInserted()>:
c001da5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da62:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001da69:	c3                   	ret    

c001da6a <ATAPI::detectMedia()>:
c001da6a:	56                   	push   esi
c001da6b:	53                   	push   ebx
c001da6c:	83 ec 28             	sub    esp,0x28
c001da6f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001da73:	6a 0c                	push   0xc
c001da75:	6a 00                	push   0x0
c001da77:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001da7b:	56                   	push   esi
c001da7c:	e8 6f 2a fe ff       	call   c00004f0 <memset>
c001da81:	58                   	pop    eax
c001da82:	5a                   	pop    edx
c001da83:	6a 00                	push   0x0
c001da85:	6a 00                	push   0x0
c001da87:	6a 00                	push   0x0
c001da89:	6a 00                	push   0x0
c001da8b:	56                   	push   esi
c001da8c:	53                   	push   ebx
c001da8d:	e8 82 fc ff ff       	call   c001d714 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da92:	83 c4 1c             	add    esp,0x1c
c001da95:	6a 0c                	push   0xc
c001da97:	6a 00                	push   0x0
c001da99:	56                   	push   esi
c001da9a:	e8 51 2a fe ff       	call   c00004f0 <memset>
c001da9f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001daa4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001daa9:	59                   	pop    ecx
c001daaa:	58                   	pop    eax
c001daab:	6a 01                	push   0x1
c001daad:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001dab1:	50                   	push   eax
c001dab2:	6a 00                	push   0x0
c001dab4:	6a 12                	push   0x12
c001dab6:	56                   	push   esi
c001dab7:	53                   	push   ebx
c001dab8:	e8 57 fc ff ff       	call   c001d714 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dabd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001dac1:	83 c4 20             	add    esp,0x20
c001dac4:	83 e0 7f             	and    eax,0x7f
c001dac7:	83 f8 70             	cmp    eax,0x70
c001daca:	74 15                	je     c001dae1 <ATAPI::detectMedia()+0x77>
c001dacc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dad3:	75 0c                	jne    c001dae1 <ATAPI::detectMedia()+0x77>
c001dad5:	83 ec 0c             	sub    esp,0xc
c001dad8:	53                   	push   ebx
c001dad9:	e8 80 ff ff ff       	call   c001da5e <ATAPI::diskInserted()>
c001dade:	83 c4 10             	add    esp,0x10
c001dae1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dae5:	83 e0 0f             	and    eax,0xf
c001dae8:	83 f8 02             	cmp    eax,0x2
c001daeb:	75 1b                	jne    c001db08 <ATAPI::detectMedia()+0x9e>
c001daed:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001daf2:	75 2d                	jne    c001db21 <ATAPI::detectMedia()+0xb7>
c001daf4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dafb:	74 24                	je     c001db21 <ATAPI::detectMedia()+0xb7>
c001dafd:	83 ec 0c             	sub    esp,0xc
c001db00:	53                   	push   ebx
c001db01:	e8 d6 fe ff ff       	call   c001d9dc <ATAPI::diskRemoved()>
c001db06:	eb 16                	jmp    c001db1e <ATAPI::detectMedia()+0xb4>
c001db08:	85 c0                	test   eax,eax
c001db0a:	75 15                	jne    c001db21 <ATAPI::detectMedia()+0xb7>
c001db0c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db13:	75 0c                	jne    c001db21 <ATAPI::detectMedia()+0xb7>
c001db15:	83 ec 0c             	sub    esp,0xc
c001db18:	53                   	push   ebx
c001db19:	e8 40 ff ff ff       	call   c001da5e <ATAPI::diskInserted()>
c001db1e:	83 c4 10             	add    esp,0x10
c001db21:	83 c4 24             	add    esp,0x24
c001db24:	5b                   	pop    ebx
c001db25:	5e                   	pop    esi
c001db26:	c3                   	ret    
c001db27:	90                   	nop

c001db28 <ATAPI::open(int, int, void*)>:
c001db28:	56                   	push   esi
c001db29:	53                   	push   ebx
c001db2a:	50                   	push   eax
c001db2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001db33:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db37:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001db3d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001db43:	c1 e0 06             	shl    eax,0x6
c001db46:	01 d0                	add    eax,edx
c001db48:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001db4f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001db55:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001db5c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001db66:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001db6c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001db73:	6a 04                	push   0x4
c001db75:	6a 0c                	push   0xc
c001db77:	51                   	push   ecx
c001db78:	52                   	push   edx
c001db79:	e8 46 e3 ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db7e:	90                   	nop
c001db7f:	90                   	nop
c001db80:	6a 00                	push   0x0
c001db82:	6a 0c                	push   0xc
c001db84:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db8b:	50                   	push   eax
c001db8c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db92:	e8 2d e3 ff ff       	call   c001bec4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db97:	83 c4 14             	add    esp,0x14
c001db9a:	68 78 01 00 00       	push   0x178
c001db9f:	e8 42 9f fe ff       	call   c0007ae6 <malloc>
c001dba4:	83 c4 0c             	add    esp,0xc
c001dba7:	89 c6                	mov    esi,eax
c001dba9:	6a 00                	push   0x0
c001dbab:	68 ff ff ff 7f       	push   0x7fffffff
c001dbb0:	6a 00                	push   0x0
c001dbb2:	6a 00                	push   0x0
c001dbb4:	53                   	push   ebx
c001dbb5:	68 5b 37 02 c0       	push   0xc002375b
c001dbba:	50                   	push   eax
c001dbbb:	e8 18 00 ff ff       	call   c000dbd8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001dbc0:	83 c4 14             	add    esp,0x14
c001dbc3:	56                   	push   esi
c001dbc4:	e8 cf 00 ff ff       	call   c000dc98 <LogicalDisk::assignDriveLetter()>
c001dbc9:	5a                   	pop    edx
c001dbca:	0f be c0             	movsx  eax,al
c001dbcd:	59                   	pop    ecx
c001dbce:	50                   	push   eax
c001dbcf:	68 ac 35 02 c0       	push   0xc00235ac
c001dbd4:	e8 9c cd fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001dbd9:	58                   	pop    eax
c001dbda:	5a                   	pop    edx
c001dbdb:	56                   	push   esi
c001dbdc:	53                   	push   ebx
c001dbdd:	e8 14 ee fe ff       	call   c000c9f6 <Device::addChild(Device*)>
c001dbe2:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001dbe8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbeb:	e8 76 f2 fe ff       	call   c000ce66 <PhysicalDisk::startCache()>
c001dbf0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001dbf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbfa:	e8 6b fe ff ff       	call   c001da6a <ATAPI::detectMedia()>
c001dbff:	83 c4 14             	add    esp,0x14
c001dc02:	31 c0                	xor    eax,eax
c001dc04:	5b                   	pop    ebx
c001dc05:	5e                   	pop    esi
c001dc06:	c3                   	ret    
c001dc07:	90                   	nop

c001dc08 <ATAPI::read(unsigned long long, int, void*)>:
c001dc08:	55                   	push   ebp
c001dc09:	57                   	push   edi
c001dc0a:	56                   	push   esi
c001dc0b:	53                   	push   ebx
c001dc0c:	83 ec 1c             	sub    esp,0x1c
c001dc0f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dc13:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001dc17:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dc1b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dc22:	74 3c                	je     c001dc60 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001dc24:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dc28:	b9 03 00 00 00       	mov    ecx,0x3
c001dc2d:	fc                   	cld    
c001dc2e:	31 c0                	xor    eax,eax
c001dc30:	0f ce                	bswap  esi
c001dc32:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dc34:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dc39:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dc3d:	89 e8                	mov    eax,ebp
c001dc3f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dc43:	50                   	push   eax
c001dc44:	50                   	push   eax
c001dc45:	55                   	push   ebp
c001dc46:	c1 e5 0b             	shl    ebp,0xb
c001dc49:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dc4d:	6a 00                	push   0x0
c001dc4f:	55                   	push   ebp
c001dc50:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dc54:	50                   	push   eax
c001dc55:	53                   	push   ebx
c001dc56:	e8 b9 fa ff ff       	call   c001d714 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dc5b:	83 c4 20             	add    esp,0x20
c001dc5e:	eb 1a                	jmp    c001dc7a <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dc60:	83 ec 0c             	sub    esp,0xc
c001dc63:	53                   	push   ebx
c001dc64:	e8 01 fe ff ff       	call   c001da6a <ATAPI::detectMedia()>
c001dc69:	83 c4 10             	add    esp,0x10
c001dc6c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dc73:	75 af                	jne    c001dc24 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dc75:	b8 02 00 00 00       	mov    eax,0x2
c001dc7a:	83 c4 1c             	add    esp,0x1c
c001dc7d:	5b                   	pop    ebx
c001dc7e:	5e                   	pop    esi
c001dc7f:	5f                   	pop    edi
c001dc80:	5d                   	pop    ebp
c001dc81:	c3                   	ret    

c001dc82 <SATA::close(int, int, void*)>:
c001dc82:	83 ec 0c             	sub    esp,0xc
c001dc85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc89:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dc8f:	85 c0                	test   eax,eax
c001dc91:	74 0c                	je     c001dc9f <SATA::close(int, int, void*)+0x1d>
c001dc93:	83 ec 0c             	sub    esp,0xc
c001dc96:	8b 10                	mov    edx,DWORD PTR [eax]
c001dc98:	50                   	push   eax
c001dc99:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dc9c:	83 c4 10             	add    esp,0x10
c001dc9f:	31 c0                	xor    eax,eax
c001dca1:	83 c4 0c             	add    esp,0xc
c001dca4:	c3                   	ret    
c001dca5:	90                   	nop

c001dca6 <SATA::powerSaving(PowerSavingLevel)>:
c001dca6:	c3                   	ret    
c001dca7:	90                   	nop

c001dca8 <SATA::open(int, int, void*)>:
c001dca8:	56                   	push   esi
c001dca9:	53                   	push   ebx
c001dcaa:	50                   	push   eax
c001dcab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dcaf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dcb3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dcbd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dcc3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dccd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dcd1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dcdb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dce1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dce8:	e8 02 a1 fe ff       	call   c0007def <Phys::allocatePage()>
c001dced:	89 c6                	mov    esi,eax
c001dcef:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dcf5:	81 c6 00 10 00 00    	add    esi,0x1000
c001dcfb:	e8 ef a0 fe ff       	call   c0007def <Phys::allocatePage()>
c001dd00:	39 c6                	cmp    esi,eax
c001dd02:	74 10                	je     c001dd14 <SATA::open(int, int, void*)+0x6c>
c001dd04:	83 ec 0c             	sub    esp,0xc
c001dd07:	68 f4 35 02 c0       	push   0xc00235f4
c001dd0c:	e8 02 3a ff ff       	call   c0011713 <KePanic(char const*)>
c001dd11:	83 c4 10             	add    esp,0x10
c001dd14:	83 ec 0c             	sub    esp,0xc
c001dd17:	6a 02                	push   0x2
c001dd19:	e8 1f b9 fe ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c001dd1e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dd24:	6a 03                	push   0x3
c001dd26:	50                   	push   eax
c001dd27:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dd2d:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dd33:	e8 18 c0 fe ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dd38:	83 c4 14             	add    esp,0x14
c001dd3b:	53                   	push   ebx
c001dd3c:	e8 25 f1 fe ff       	call   c000ce66 <PhysicalDisk::startCache()>
c001dd41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dd44:	e8 61 03 ff ff       	call   c000e0aa <createPartitionsForDisk(PhysicalDisk*)>
c001dd49:	83 c4 14             	add    esp,0x14
c001dd4c:	31 c0                	xor    eax,eax
c001dd4e:	5b                   	pop    ebx
c001dd4f:	5e                   	pop    esi
c001dd50:	c3                   	ret    
c001dd51:	90                   	nop

c001dd52 <SATA::SATA()>:
c001dd52:	83 ec 0c             	sub    esp,0xc
c001dd55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd59:	83 ec 04             	sub    esp,0x4
c001dd5c:	68 00 02 00 00       	push   0x200
c001dd61:	68 08 36 02 c0       	push   0xc0023608
c001dd66:	50                   	push   eax
c001dd67:	e8 92 f0 fe ff       	call   c000cdfe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dd6c:	83 c4 10             	add    esp,0x10
c001dd6f:	ba 78 36 02 c0       	mov    edx,0xc0023678
c001dd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd78:	89 10                	mov    DWORD PTR [eax],edx
c001dd7a:	90                   	nop
c001dd7b:	83 c4 0c             	add    esp,0xc
c001dd7e:	c3                   	ret    
c001dd7f:	90                   	nop

c001dd80 <SATA::access(unsigned long long, int, void*, bool)>:
c001dd80:	55                   	push   ebp
c001dd81:	57                   	push   edi
c001dd82:	56                   	push   esi
c001dd83:	53                   	push   ebx
c001dd84:	83 ec 2c             	sub    esp,0x2c
c001dd87:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dd8b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dd8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dd93:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dd97:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd9b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dda0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dda4:	7e 10                	jle    c001ddb6 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001dda6:	83 ec 0c             	sub    esp,0xc
c001dda9:	68 18 36 02 c0       	push   0xc0023618
c001ddae:	e8 60 39 ff ff       	call   c0011713 <KePanic(char const*)>
c001ddb3:	83 c4 10             	add    esp,0x10
c001ddb6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ddbc:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ddc2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ddcc:	89 d0                	mov    eax,edx
c001ddce:	c1 e0 07             	shl    eax,0x7
c001ddd1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ddd5:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dddf:	51                   	push   ecx
c001dde0:	8d 42 02             	lea    eax,[edx+0x2]
c001dde3:	51                   	push   ecx
c001dde4:	c1 e0 07             	shl    eax,0x7
c001dde7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ddeb:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ddef:	50                   	push   eax
c001ddf0:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ddf6:	e8 91 ec ff ff       	call   c001ca8c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ddfb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ddff:	83 c4 10             	add    esp,0x10
c001de02:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001de07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001de0b:	0f 84 57 01 00 00    	je     c001df68 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001de11:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001de15:	c1 e0 09             	shl    eax,0x9
c001de18:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001de1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001de21:	74 0e                	je     c001de31 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001de23:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001de29:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001de2d:	89 c1                	mov    ecx,eax
c001de2f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de31:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001de37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001de3b:	8d 42 02             	lea    eax,[edx+0x2]
c001de3e:	c1 e0 07             	shl    eax,0x7
c001de41:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001de45:	8b 00                	mov    eax,DWORD PTR [eax]
c001de47:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001de4d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001de53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de57:	c1 e1 05             	shl    ecx,0x5
c001de5a:	01 c8                	add    eax,ecx
c001de5c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001de60:	83 e1 01             	and    ecx,0x1
c001de63:	89 ce                	mov    esi,ecx
c001de65:	8a 08                	mov    cl,BYTE PTR [eax]
c001de67:	c1 e6 06             	shl    esi,0x6
c001de6a:	83 e1 bf             	and    ecx,0xffffffbf
c001de6d:	09 f1                	or     ecx,esi
c001de6f:	88 08                	mov    BYTE PTR [eax],cl
c001de71:	8b 08                	mov    ecx,DWORD PTR [eax]
c001de73:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001de79:	81 c9 05 00 01 00    	or     ecx,0x10005
c001de7f:	89 08                	mov    DWORD PTR [eax],ecx
c001de81:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001de87:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001de8d:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001de93:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001de96:	50                   	push   eax
c001de97:	68 90 00 00 00       	push   0x90
c001de9c:	6a 00                	push   0x0
c001de9e:	56                   	push   esi
c001de9f:	e8 4c 26 fe ff       	call   c00004f0 <memset>
c001dea4:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001deaa:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001deb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001deb4:	83 c4 10             	add    esp,0x10
c001deb7:	48                   	dec    eax
c001deb8:	25 ff ff 3f 00       	and    eax,0x3fffff
c001debd:	89 c1                	mov    ecx,eax
c001debf:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001dec5:	25 00 00 c0 ff       	and    eax,0xffc00000
c001deca:	09 c8                	or     eax,ecx
c001decc:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ded2:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001ded8:	83 c8 80             	or     eax,0xffffff80
c001dedb:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001dee1:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dee4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dee8:	25 00 7f 00 00       	and    eax,0x7f00
c001deed:	0d 27 80 ff ff       	or     eax,0xffff8027
c001def2:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001def7:	66 89 06             	mov    WORD PTR [esi],ax
c001defa:	b0 35                	mov    al,0x35
c001defc:	75 02                	jne    c001df00 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001defe:	b0 25                	mov    al,0x25
c001df00:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001df03:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001df07:	89 e8                	mov    eax,ebp
c001df09:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001df0d:	c1 e8 10             	shr    eax,0x10
c001df10:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001df13:	89 e8                	mov    eax,ebp
c001df15:	c1 e8 18             	shr    eax,0x18
c001df18:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001df1b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001df1f:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001df22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001df26:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001df29:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001df2d:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001df31:	89 d6                	mov    esi,edx
c001df33:	31 c0                	xor    eax,eax
c001df35:	c1 e6 07             	shl    esi,0x7
c001df38:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001df3c:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001df42:	80 e1 88             	and    cl,0x88
c001df45:	74 0a                	je     c001df51 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001df47:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df4c:	74 0a                	je     c001df58 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001df4e:	40                   	inc    eax
c001df4f:	eb eb                	jmp    c001df3c <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001df51:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df56:	75 17                	jne    c001df6f <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001df58:	83 ec 0c             	sub    esp,0xc
c001df5b:	68 51 36 02 c0       	push   0xc0023651
c001df60:	e8 10 ca fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001df65:	83 c4 10             	add    esp,0x10
c001df68:	b8 01 00 00 00       	mov    eax,0x1
c001df6d:	eb 5d                	jmp    c001dfcc <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001df6f:	b8 01 00 00 00       	mov    eax,0x1
c001df74:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001df78:	c1 e2 07             	shl    edx,0x7
c001df7b:	d3 e0                	shl    eax,cl
c001df7d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001df81:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001df87:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001df8d:	85 c8                	test   eax,ecx
c001df8f:	74 16                	je     c001dfa7 <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001df91:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001df97:	0f ba e1 1e          	bt     ecx,0x1e
c001df9b:	73 ea                	jae    c001df87 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001df9d:	83 ec 0c             	sub    esp,0xc
c001dfa0:	68 5f 36 02 c0       	push   0xc002365f
c001dfa5:	eb b9                	jmp    c001df60 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001dfa7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001dfad:	0f ba e0 1e          	bt     eax,0x1e
c001dfb1:	72 b5                	jb     c001df68 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dfb3:	31 c0                	xor    eax,eax
c001dfb5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dfba:	75 10                	jne    c001dfcc <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001dfbc:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001dfc2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001dfc6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dfca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dfcc:	83 c4 2c             	add    esp,0x2c
c001dfcf:	5b                   	pop    ebx
c001dfd0:	5e                   	pop    esi
c001dfd1:	5f                   	pop    edi
c001dfd2:	5d                   	pop    ebp
c001dfd3:	c3                   	ret    

c001dfd4 <SATA::read(unsigned long long, int, void*)>:
c001dfd4:	55                   	push   ebp
c001dfd5:	57                   	push   edi
c001dfd6:	56                   	push   esi
c001dfd7:	be 04 00 00 00       	mov    esi,0x4
c001dfdc:	53                   	push   ebx
c001dfdd:	83 ec 0c             	sub    esp,0xc
c001dfe0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dfe4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dfe8:	8d 7b ff             	lea    edi,[ebx-0x1]
c001dfeb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dfef:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001dff3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dff9:	0f 87 1a 02 00 00    	ja     c001e219 <SATA::read(unsigned long long, int, void*)+0x245>
c001dfff:	be 06 00 00 00       	mov    esi,0x6
c001e004:	85 c9                	test   ecx,ecx
c001e006:	0f 84 0d 02 00 00    	je     c001e219 <SATA::read(unsigned long long, int, void*)+0x245>
c001e00c:	56                   	push   esi
c001e00d:	56                   	push   esi
c001e00e:	6a 00                	push   0x0
c001e010:	51                   	push   ecx
c001e011:	53                   	push   ebx
c001e012:	52                   	push   edx
c001e013:	50                   	push   eax
c001e014:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e018:	e8 63 fd ff ff       	call   c001dd80 <SATA::access(unsigned long long, int, void*, bool)>
c001e01d:	83 c4 20             	add    esp,0x20
c001e020:	89 c6                	mov    esi,eax
c001e022:	85 c0                	test   eax,eax
c001e024:	0f 85 ea 01 00 00    	jne    c001e214 <SATA::read(unsigned long long, int, void*)+0x240>
c001e02a:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001e030:	bb 0a 00 00 00       	mov    ebx,0xa
c001e035:	50                   	push   eax
c001e036:	50                   	push   eax
c001e037:	6a 0f                	push   0xf
c001e039:	6a 00                	push   0x0
c001e03b:	e8 75 f2 ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e040:	5a                   	pop    edx
c001e041:	0f b6 c0             	movzx  eax,al
c001e044:	59                   	pop    ecx
c001e045:	b9 10 27 00 00       	mov    ecx,0x2710
c001e04a:	50                   	push   eax
c001e04b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e050:	99                   	cdq    
c001e051:	f7 f9                	idiv   ecx
c001e053:	99                   	cdq    
c001e054:	f7 fb                	idiv   ebx
c001e056:	8d 42 30             	lea    eax,[edx+0x30]
c001e059:	0f b6 c0             	movzx  eax,al
c001e05c:	50                   	push   eax
c001e05d:	e8 42 f2 ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e062:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e068:	5f                   	pop    edi
c001e069:	5d                   	pop    ebp
c001e06a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001e06f:	6a 0f                	push   0xf
c001e071:	6a 00                	push   0x0
c001e073:	e8 3d f2 ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e078:	5a                   	pop    edx
c001e079:	0f b6 c0             	movzx  eax,al
c001e07c:	59                   	pop    ecx
c001e07d:	50                   	push   eax
c001e07e:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e083:	99                   	cdq    
c001e084:	f7 fd                	idiv   ebp
c001e086:	99                   	cdq    
c001e087:	f7 fb                	idiv   ebx
c001e089:	8d 42 30             	lea    eax,[edx+0x30]
c001e08c:	0f b6 c0             	movzx  eax,al
c001e08f:	50                   	push   eax
c001e090:	e8 0f f2 ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e095:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e09b:	5f                   	pop    edi
c001e09c:	bf 64 00 00 00       	mov    edi,0x64
c001e0a1:	58                   	pop    eax
c001e0a2:	6a 0f                	push   0xf
c001e0a4:	6a 00                	push   0x0
c001e0a6:	e8 0a f2 ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e0ab:	5a                   	pop    edx
c001e0ac:	0f b6 c0             	movzx  eax,al
c001e0af:	59                   	pop    ecx
c001e0b0:	50                   	push   eax
c001e0b1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e0b6:	99                   	cdq    
c001e0b7:	f7 ff                	idiv   edi
c001e0b9:	99                   	cdq    
c001e0ba:	f7 fb                	idiv   ebx
c001e0bc:	8d 42 30             	lea    eax,[edx+0x30]
c001e0bf:	0f b6 c0             	movzx  eax,al
c001e0c2:	50                   	push   eax
c001e0c3:	e8 dc f1 ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e0c8:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e0ce:	58                   	pop    eax
c001e0cf:	5a                   	pop    edx
c001e0d0:	6a 0f                	push   0xf
c001e0d2:	6a 00                	push   0x0
c001e0d4:	e8 dc f1 ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e0d9:	59                   	pop    ecx
c001e0da:	0f b6 c0             	movzx  eax,al
c001e0dd:	5a                   	pop    edx
c001e0de:	50                   	push   eax
c001e0df:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e0e4:	99                   	cdq    
c001e0e5:	f7 fb                	idiv   ebx
c001e0e7:	99                   	cdq    
c001e0e8:	f7 fb                	idiv   ebx
c001e0ea:	8d 42 30             	lea    eax,[edx+0x30]
c001e0ed:	0f b6 c0             	movzx  eax,al
c001e0f0:	50                   	push   eax
c001e0f1:	e8 ae f1 ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e0f6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e0fc:	59                   	pop    ecx
c001e0fd:	58                   	pop    eax
c001e0fe:	6a 0f                	push   0xf
c001e100:	6a 00                	push   0x0
c001e102:	e8 ae f1 ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e107:	5a                   	pop    edx
c001e108:	0f b6 c0             	movzx  eax,al
c001e10b:	59                   	pop    ecx
c001e10c:	50                   	push   eax
c001e10d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e112:	99                   	cdq    
c001e113:	f7 fb                	idiv   ebx
c001e115:	8d 42 30             	lea    eax,[edx+0x30]
c001e118:	0f b6 c0             	movzx  eax,al
c001e11b:	50                   	push   eax
c001e11c:	e8 83 f1 ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e121:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e127:	58                   	pop    eax
c001e128:	5a                   	pop    edx
c001e129:	6a 0f                	push   0xf
c001e12b:	6a 00                	push   0x0
c001e12d:	e8 83 f1 ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e132:	59                   	pop    ecx
c001e133:	0f b6 c0             	movzx  eax,al
c001e136:	5a                   	pop    edx
c001e137:	b9 10 27 00 00       	mov    ecx,0x2710
c001e13c:	50                   	push   eax
c001e13d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e142:	99                   	cdq    
c001e143:	f7 f9                	idiv   ecx
c001e145:	99                   	cdq    
c001e146:	f7 fb                	idiv   ebx
c001e148:	8d 42 30             	lea    eax,[edx+0x30]
c001e14b:	0f b6 c0             	movzx  eax,al
c001e14e:	50                   	push   eax
c001e14f:	e8 50 f1 ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e154:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e15a:	59                   	pop    ecx
c001e15b:	58                   	pop    eax
c001e15c:	6a 0f                	push   0xf
c001e15e:	6a 00                	push   0x0
c001e160:	e8 50 f1 ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e165:	5a                   	pop    edx
c001e166:	0f b6 c0             	movzx  eax,al
c001e169:	59                   	pop    ecx
c001e16a:	50                   	push   eax
c001e16b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e170:	99                   	cdq    
c001e171:	f7 fd                	idiv   ebp
c001e173:	99                   	cdq    
c001e174:	f7 fb                	idiv   ebx
c001e176:	8d 42 30             	lea    eax,[edx+0x30]
c001e179:	0f b6 c0             	movzx  eax,al
c001e17c:	50                   	push   eax
c001e17d:	e8 22 f1 ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e182:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e188:	5d                   	pop    ebp
c001e189:	58                   	pop    eax
c001e18a:	6a 0f                	push   0xf
c001e18c:	6a 00                	push   0x0
c001e18e:	e8 22 f1 ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e193:	5a                   	pop    edx
c001e194:	0f b6 c0             	movzx  eax,al
c001e197:	59                   	pop    ecx
c001e198:	50                   	push   eax
c001e199:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e19e:	99                   	cdq    
c001e19f:	f7 ff                	idiv   edi
c001e1a1:	99                   	cdq    
c001e1a2:	f7 fb                	idiv   ebx
c001e1a4:	8d 42 30             	lea    eax,[edx+0x30]
c001e1a7:	0f b6 c0             	movzx  eax,al
c001e1aa:	50                   	push   eax
c001e1ab:	e8 f4 f0 ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e1b0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e1b6:	5f                   	pop    edi
c001e1b7:	5d                   	pop    ebp
c001e1b8:	6a 0f                	push   0xf
c001e1ba:	6a 00                	push   0x0
c001e1bc:	e8 f4 f0 ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e1c1:	5a                   	pop    edx
c001e1c2:	0f b6 c0             	movzx  eax,al
c001e1c5:	59                   	pop    ecx
c001e1c6:	50                   	push   eax
c001e1c7:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e1cc:	99                   	cdq    
c001e1cd:	f7 fb                	idiv   ebx
c001e1cf:	99                   	cdq    
c001e1d0:	f7 fb                	idiv   ebx
c001e1d2:	8d 42 30             	lea    eax,[edx+0x30]
c001e1d5:	0f b6 c0             	movzx  eax,al
c001e1d8:	50                   	push   eax
c001e1d9:	e8 c6 f0 ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e1de:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e1e4:	5f                   	pop    edi
c001e1e5:	5d                   	pop    ebp
c001e1e6:	6a 0f                	push   0xf
c001e1e8:	6a 00                	push   0x0
c001e1ea:	e8 c6 f0 ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e1ef:	5a                   	pop    edx
c001e1f0:	0f b6 c0             	movzx  eax,al
c001e1f3:	59                   	pop    ecx
c001e1f4:	50                   	push   eax
c001e1f5:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e1fa:	99                   	cdq    
c001e1fb:	f7 fb                	idiv   ebx
c001e1fd:	83 c2 30             	add    edx,0x30
c001e200:	0f b6 d2             	movzx  edx,dl
c001e203:	52                   	push   edx
c001e204:	e8 9b f0 ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e209:	83 c4 10             	add    esp,0x10
c001e20c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e212:	eb 05                	jmp    c001e219 <SATA::read(unsigned long long, int, void*)+0x245>
c001e214:	be 01 00 00 00       	mov    esi,0x1
c001e219:	83 c4 0c             	add    esp,0xc
c001e21c:	89 f0                	mov    eax,esi
c001e21e:	5b                   	pop    ebx
c001e21f:	5e                   	pop    esi
c001e220:	5f                   	pop    edi
c001e221:	5d                   	pop    ebp
c001e222:	c3                   	ret    
c001e223:	90                   	nop

c001e224 <SATA::write(unsigned long long, int, void*)>:
c001e224:	55                   	push   ebp
c001e225:	b8 04 00 00 00       	mov    eax,0x4
c001e22a:	57                   	push   edi
c001e22b:	56                   	push   esi
c001e22c:	53                   	push   ebx
c001e22d:	83 ec 1c             	sub    esp,0x1c
c001e230:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e234:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e238:	8d 75 ff             	lea    esi,[ebp-0x1]
c001e23b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e23f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001e243:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e249:	0f 87 32 02 00 00    	ja     c001e481 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e24f:	b8 06 00 00 00       	mov    eax,0x6
c001e254:	85 ff                	test   edi,edi
c001e256:	0f 84 25 02 00 00    	je     c001e481 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e25c:	89 ee                	mov    esi,ebp
c001e25e:	c1 e6 09             	shl    esi,0x9
c001e261:	01 fe                	add    esi,edi
c001e263:	89 c8                	mov    eax,ecx
c001e265:	89 da                	mov    edx,ebx
c001e267:	83 c0 01             	add    eax,0x1
c001e26a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e26e:	83 d2 00             	adc    edx,0x0
c001e271:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e275:	50                   	push   eax
c001e276:	50                   	push   eax
c001e277:	6a 01                	push   0x1
c001e279:	57                   	push   edi
c001e27a:	81 c7 00 02 00 00    	add    edi,0x200
c001e280:	6a 01                	push   0x1
c001e282:	53                   	push   ebx
c001e283:	51                   	push   ecx
c001e284:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e288:	e8 f3 fa ff ff       	call   c001dd80 <SATA::access(unsigned long long, int, void*, bool)>
c001e28d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e291:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e295:	83 c4 20             	add    esp,0x20
c001e298:	39 f7                	cmp    edi,esi
c001e29a:	75 c7                	jne    c001e263 <SATA::write(unsigned long long, int, void*)+0x3f>
c001e29c:	bb 0a 00 00 00       	mov    ebx,0xa
c001e2a1:	01 2d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebp
c001e2a7:	bd 10 27 00 00       	mov    ebp,0x2710
c001e2ac:	50                   	push   eax
c001e2ad:	50                   	push   eax
c001e2ae:	6a 0f                	push   0xf
c001e2b0:	6a 00                	push   0x0
c001e2b2:	e8 fe ef ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e2b7:	5a                   	pop    edx
c001e2b8:	0f b6 c0             	movzx  eax,al
c001e2bb:	59                   	pop    ecx
c001e2bc:	50                   	push   eax
c001e2bd:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2c2:	99                   	cdq    
c001e2c3:	f7 fd                	idiv   ebp
c001e2c5:	99                   	cdq    
c001e2c6:	f7 fb                	idiv   ebx
c001e2c8:	8d 42 30             	lea    eax,[edx+0x30]
c001e2cb:	0f b6 c0             	movzx  eax,al
c001e2ce:	50                   	push   eax
c001e2cf:	e8 d0 ef ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e2d4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e2da:	5e                   	pop    esi
c001e2db:	5f                   	pop    edi
c001e2dc:	bf e8 03 00 00       	mov    edi,0x3e8
c001e2e1:	6a 0f                	push   0xf
c001e2e3:	6a 00                	push   0x0
c001e2e5:	e8 cb ef ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e2ea:	5a                   	pop    edx
c001e2eb:	0f b6 c0             	movzx  eax,al
c001e2ee:	59                   	pop    ecx
c001e2ef:	50                   	push   eax
c001e2f0:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2f5:	99                   	cdq    
c001e2f6:	f7 ff                	idiv   edi
c001e2f8:	99                   	cdq    
c001e2f9:	f7 fb                	idiv   ebx
c001e2fb:	8d 42 30             	lea    eax,[edx+0x30]
c001e2fe:	0f b6 c0             	movzx  eax,al
c001e301:	50                   	push   eax
c001e302:	e8 9d ef ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e307:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e30d:	5e                   	pop    esi
c001e30e:	be 64 00 00 00       	mov    esi,0x64
c001e313:	58                   	pop    eax
c001e314:	6a 0f                	push   0xf
c001e316:	6a 00                	push   0x0
c001e318:	e8 98 ef ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e31d:	5a                   	pop    edx
c001e31e:	0f b6 c0             	movzx  eax,al
c001e321:	59                   	pop    ecx
c001e322:	50                   	push   eax
c001e323:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e328:	99                   	cdq    
c001e329:	f7 fe                	idiv   esi
c001e32b:	99                   	cdq    
c001e32c:	f7 fb                	idiv   ebx
c001e32e:	8d 42 30             	lea    eax,[edx+0x30]
c001e331:	0f b6 c0             	movzx  eax,al
c001e334:	50                   	push   eax
c001e335:	e8 6a ef ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e33a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e340:	58                   	pop    eax
c001e341:	5a                   	pop    edx
c001e342:	6a 0f                	push   0xf
c001e344:	6a 00                	push   0x0
c001e346:	e8 6a ef ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e34b:	59                   	pop    ecx
c001e34c:	0f b6 c0             	movzx  eax,al
c001e34f:	5a                   	pop    edx
c001e350:	50                   	push   eax
c001e351:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e356:	99                   	cdq    
c001e357:	f7 fb                	idiv   ebx
c001e359:	99                   	cdq    
c001e35a:	f7 fb                	idiv   ebx
c001e35c:	8d 42 30             	lea    eax,[edx+0x30]
c001e35f:	0f b6 c0             	movzx  eax,al
c001e362:	50                   	push   eax
c001e363:	e8 3c ef ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e368:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e36e:	59                   	pop    ecx
c001e36f:	58                   	pop    eax
c001e370:	6a 0f                	push   0xf
c001e372:	6a 00                	push   0x0
c001e374:	e8 3c ef ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e379:	5a                   	pop    edx
c001e37a:	0f b6 c0             	movzx  eax,al
c001e37d:	59                   	pop    ecx
c001e37e:	50                   	push   eax
c001e37f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e384:	99                   	cdq    
c001e385:	f7 fb                	idiv   ebx
c001e387:	83 c2 30             	add    edx,0x30
c001e38a:	0f b6 d2             	movzx  edx,dl
c001e38d:	52                   	push   edx
c001e38e:	e8 11 ef ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e393:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e399:	58                   	pop    eax
c001e39a:	5a                   	pop    edx
c001e39b:	6a 0f                	push   0xf
c001e39d:	6a 00                	push   0x0
c001e39f:	e8 11 ef ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e3a4:	59                   	pop    ecx
c001e3a5:	0f b6 c0             	movzx  eax,al
c001e3a8:	5a                   	pop    edx
c001e3a9:	50                   	push   eax
c001e3aa:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3af:	99                   	cdq    
c001e3b0:	f7 fd                	idiv   ebp
c001e3b2:	99                   	cdq    
c001e3b3:	f7 fb                	idiv   ebx
c001e3b5:	8d 42 30             	lea    eax,[edx+0x30]
c001e3b8:	0f b6 c0             	movzx  eax,al
c001e3bb:	50                   	push   eax
c001e3bc:	e8 e3 ee ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e3c1:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e3c7:	59                   	pop    ecx
c001e3c8:	5d                   	pop    ebp
c001e3c9:	6a 0f                	push   0xf
c001e3cb:	6a 00                	push   0x0
c001e3cd:	e8 e3 ee ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e3d2:	5a                   	pop    edx
c001e3d3:	0f b6 c0             	movzx  eax,al
c001e3d6:	59                   	pop    ecx
c001e3d7:	50                   	push   eax
c001e3d8:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3dd:	99                   	cdq    
c001e3de:	f7 ff                	idiv   edi
c001e3e0:	99                   	cdq    
c001e3e1:	f7 fb                	idiv   ebx
c001e3e3:	8d 42 30             	lea    eax,[edx+0x30]
c001e3e6:	0f b6 c0             	movzx  eax,al
c001e3e9:	50                   	push   eax
c001e3ea:	e8 b5 ee ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e3ef:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e3f5:	5f                   	pop    edi
c001e3f6:	5d                   	pop    ebp
c001e3f7:	6a 0f                	push   0xf
c001e3f9:	6a 00                	push   0x0
c001e3fb:	e8 b5 ee ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e400:	5a                   	pop    edx
c001e401:	0f b6 c0             	movzx  eax,al
c001e404:	59                   	pop    ecx
c001e405:	50                   	push   eax
c001e406:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e40b:	99                   	cdq    
c001e40c:	f7 fe                	idiv   esi
c001e40e:	99                   	cdq    
c001e40f:	f7 fb                	idiv   ebx
c001e411:	8d 42 30             	lea    eax,[edx+0x30]
c001e414:	0f b6 c0             	movzx  eax,al
c001e417:	50                   	push   eax
c001e418:	e8 87 ee ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e41d:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e423:	5e                   	pop    esi
c001e424:	5f                   	pop    edi
c001e425:	6a 0f                	push   0xf
c001e427:	6a 00                	push   0x0
c001e429:	e8 87 ee ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e42e:	5d                   	pop    ebp
c001e42f:	0f b6 c0             	movzx  eax,al
c001e432:	5a                   	pop    edx
c001e433:	50                   	push   eax
c001e434:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e439:	99                   	cdq    
c001e43a:	f7 fb                	idiv   ebx
c001e43c:	99                   	cdq    
c001e43d:	f7 fb                	idiv   ebx
c001e43f:	8d 42 30             	lea    eax,[edx+0x30]
c001e442:	0f b6 c0             	movzx  eax,al
c001e445:	50                   	push   eax
c001e446:	e8 59 ee ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e44b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e451:	59                   	pop    ecx
c001e452:	5e                   	pop    esi
c001e453:	6a 0f                	push   0xf
c001e455:	6a 00                	push   0x0
c001e457:	e8 59 ee ff ff       	call   c001d2b5 <combineColours(unsigned char, unsigned char)>
c001e45c:	5f                   	pop    edi
c001e45d:	0f b6 c0             	movzx  eax,al
c001e460:	5d                   	pop    ebp
c001e461:	50                   	push   eax
c001e462:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e467:	99                   	cdq    
c001e468:	f7 fb                	idiv   ebx
c001e46a:	83 c2 30             	add    edx,0x30
c001e46d:	0f b6 d2             	movzx  edx,dl
c001e470:	52                   	push   edx
c001e471:	e8 2e ee ff ff       	call   c001d2a4 <combineCharAndColour(char, unsigned char)>
c001e476:	83 c4 10             	add    esp,0x10
c001e479:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e47f:	31 c0                	xor    eax,eax
c001e481:	83 c4 1c             	add    esp,0x1c
c001e484:	5b                   	pop    ebx
c001e485:	5e                   	pop    esi
c001e486:	5f                   	pop    edi
c001e487:	5d                   	pop    ebp
c001e488:	c3                   	ret    
c001e489:	90                   	nop

c001e48a <SATAPI::write(unsigned long long, int, void*)>:
c001e48a:	b8 03 00 00 00       	mov    eax,0x3
c001e48f:	c3                   	ret    

c001e490 <SATAPI::close(int, int, void*)>:
c001e490:	83 ec 0c             	sub    esp,0xc
c001e493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e497:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e49d:	85 c0                	test   eax,eax
c001e49f:	74 0c                	je     c001e4ad <SATAPI::close(int, int, void*)+0x1d>
c001e4a1:	83 ec 0c             	sub    esp,0xc
c001e4a4:	8b 10                	mov    edx,DWORD PTR [eax]
c001e4a6:	50                   	push   eax
c001e4a7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e4aa:	83 c4 10             	add    esp,0x10
c001e4ad:	31 c0                	xor    eax,eax
c001e4af:	83 c4 0c             	add    esp,0xc
c001e4b2:	c3                   	ret    
c001e4b3:	90                   	nop

c001e4b4 <SATAPI::SATAPI()>:
c001e4b4:	83 ec 0c             	sub    esp,0xc
c001e4b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4bb:	83 ec 04             	sub    esp,0x4
c001e4be:	68 00 08 00 00       	push   0x800
c001e4c3:	68 a8 36 02 c0       	push   0xc00236a8
c001e4c8:	50                   	push   eax
c001e4c9:	e8 30 e9 fe ff       	call   c000cdfe <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e4ce:	83 c4 10             	add    esp,0x10
c001e4d1:	ba 9c 37 02 c0       	mov    edx,0xc002379c
c001e4d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4da:	89 10                	mov    DWORD PTR [eax],edx
c001e4dc:	90                   	nop
c001e4dd:	83 c4 0c             	add    esp,0xc
c001e4e0:	c3                   	ret    
c001e4e1:	90                   	nop

c001e4e2 <SATAPI::diskRemoved()>:
c001e4e2:	c3                   	ret    
c001e4e3:	90                   	nop

c001e4e4 <SATAPI::diskInserted()>:
c001e4e4:	83 ec 18             	sub    esp,0x18
c001e4e7:	68 b4 36 02 c0       	push   0xc00236b4
c001e4ec:	e8 84 c4 fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001e4f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4f5:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e4fc:	83 c4 1c             	add    esp,0x1c
c001e4ff:	c3                   	ret    

c001e500 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e500:	55                   	push   ebp
c001e501:	57                   	push   edi
c001e502:	56                   	push   esi
c001e503:	53                   	push   ebx
c001e504:	83 ec 34             	sub    esp,0x34
c001e507:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e50b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e50f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e513:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e517:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e51b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e521:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e527:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e52b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e531:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e535:	83 c0 02             	add    eax,0x2
c001e538:	c1 e0 07             	shl    eax,0x7
c001e53b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e53f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e543:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e547:	c1 e0 07             	shl    eax,0x7
c001e54a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e54e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e552:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e55c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e560:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e566:	e8 21 e5 ff ff       	call   c001ca8c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e56b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e56f:	83 c4 10             	add    esp,0x10
c001e572:	b8 01 00 00 00       	mov    eax,0x1
c001e577:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e57c:	0f 84 53 02 00 00    	je     c001e7d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e582:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e58c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e58e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e594:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e59a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e59e:	c1 e1 05             	shl    ecx,0x5
c001e5a1:	01 c8                	add    eax,ecx
c001e5a3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e5a5:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e5ab:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e5b1:	89 08                	mov    DWORD PTR [eax],ecx
c001e5b3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e5b9:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e5bf:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e5c5:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e5c8:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e5cb:	50                   	push   eax
c001e5cc:	68 90 00 00 00       	push   0x90
c001e5d1:	6a 00                	push   0x0
c001e5d3:	53                   	push   ebx
c001e5d4:	e8 17 1f fe ff       	call   c00004f0 <memset>
c001e5d9:	b9 0c 00 00 00       	mov    ecx,0xc
c001e5de:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e5e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e5e4:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e5ea:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e5ee:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e5f4:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e5f8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e5fc:	48                   	dec    eax
c001e5fd:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e602:	89 c1                	mov    ecx,eax
c001e604:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e60a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e60f:	09 c8                	or     eax,ecx
c001e611:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e617:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e61d:	83 c8 80             	or     eax,0xffffff80
c001e620:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e626:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e629:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e62d:	25 00 7f 00 00       	and    eax,0x7f00
c001e632:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e636:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e63b:	66 89 03             	mov    WORD PTR [ebx],ax
c001e63e:	89 d0                	mov    eax,edx
c001e640:	c1 ea 18             	shr    edx,0x18
c001e643:	c1 e8 10             	shr    eax,0x10
c001e646:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e649:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e64c:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e650:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e653:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e657:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e65a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e65e:	83 c4 10             	add    esp,0x10
c001e661:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e665:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e669:	31 c0                	xor    eax,eax
c001e66b:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e671:	80 e1 88             	and    cl,0x88
c001e674:	74 0a                	je     c001e680 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e676:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e67b:	74 0a                	je     c001e687 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e67d:	40                   	inc    eax
c001e67e:	eb eb                	jmp    c001e66b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e680:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e685:	75 43                	jne    c001e6ca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e687:	83 ec 0c             	sub    esp,0xc
c001e68a:	68 cc 36 02 c0       	push   0xc00236cc
c001e68f:	e8 e1 c2 fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001e694:	58                   	pop    eax
c001e695:	5a                   	pop    edx
c001e696:	68 e1 36 02 c0       	push   0xc00236e1
c001e69b:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e6a1:	e8 30 a4 fe ff       	call   c0008ad6 <VgaText::puts(char const*)>
c001e6a6:	59                   	pop    ecx
c001e6a7:	5b                   	pop    ebx
c001e6a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e6ac:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e6b2:	e8 6f e4 ff ff       	call   c001cb26 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e6b7:	5e                   	pop    esi
c001e6b8:	5f                   	pop    edi
c001e6b9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e6bd:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e6c3:	e8 3e e4 ff ff       	call   c001cb06 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e6c8:	eb 48                	jmp    c001e712 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e6ca:	be 01 00 00 00       	mov    esi,0x1
c001e6cf:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e6d3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e6d7:	d3 e6                	shl    esi,cl
c001e6d9:	c1 e7 07             	shl    edi,0x7
c001e6dc:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e6e2:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e6e7:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e6eb:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e6f1:	85 c6                	test   esi,eax
c001e6f3:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e6f9:	0f 84 a3 00 00 00    	je     c001e7a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e6ff:	0f ba e0 1e          	bt     eax,0x1e
c001e703:	73 1a                	jae    c001e71f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e705:	83 ec 0c             	sub    esp,0xc
c001e708:	68 f3 36 02 c0       	push   0xc00236f3
c001e70d:	e8 63 c2 fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001e712:	83 c4 10             	add    esp,0x10
c001e715:	b8 01 00 00 00       	mov    eax,0x1
c001e71a:	e9 b6 00 00 00       	jmp    c001e7d5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e71f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e725:	83 f8 0d             	cmp    eax,0xd
c001e728:	77 0a                	ja     c001e734 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e72a:	83 ec 0c             	sub    esp,0xc
c001e72d:	68 c8 00 00 00       	push   0xc8
c001e732:	eb 28                	jmp    c001e75c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e734:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e73a:	83 f8 0d             	cmp    eax,0xd
c001e73d:	77 0a                	ja     c001e749 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e73f:	83 ec 0c             	sub    esp,0xc
c001e742:	68 58 02 00 00       	push   0x258
c001e747:	eb 13                	jmp    c001e75c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e749:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e74f:	83 f8 06             	cmp    eax,0x6
c001e752:	77 10                	ja     c001e764 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e754:	83 ec 0c             	sub    esp,0xc
c001e757:	68 dc 05 00 00       	push   0x5dc
c001e75c:	e8 c7 7d ff ff       	call   c0016528 <milliTenthSleep(unsigned int)>
c001e761:	83 c4 10             	add    esp,0x10
c001e764:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e768:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e76b:	75 06                	jne    c001e773 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e76d:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e771:	74 15                	je     c001e788 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e773:	83 fb 06             	cmp    ebx,0x6
c001e776:	77 10                	ja     c001e788 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e778:	83 ec 0c             	sub    esp,0xc
c001e77b:	68 c4 09 00 00       	push   0x9c4
c001e780:	e8 a3 7d ff ff       	call   c0016528 <milliTenthSleep(unsigned int)>
c001e785:	83 c4 10             	add    esp,0x10
c001e788:	43                   	inc    ebx
c001e789:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e78f:	0f 85 56 ff ff ff    	jne    c001e6eb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e795:	83 ec 0c             	sub    esp,0xc
c001e798:	68 06 37 02 c0       	push   0xc0023706
c001e79d:	e9 6b ff ff ff       	jmp    c001e70d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e7a2:	0f ba e0 1e          	bt     eax,0x1e
c001e7a6:	73 0d                	jae    c001e7b5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e7a8:	83 ec 0c             	sub    esp,0xc
c001e7ab:	68 1a 37 02 c0       	push   0xc002371a
c001e7b0:	e9 58 ff ff ff       	jmp    c001e70d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e7b5:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e7ba:	74 17                	je     c001e7d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e7bc:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e7c1:	74 10                	je     c001e7d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e7c3:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e7c9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e7cd:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e7d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e7d3:	31 c0                	xor    eax,eax
c001e7d5:	83 c4 2c             	add    esp,0x2c
c001e7d8:	5b                   	pop    ebx
c001e7d9:	5e                   	pop    esi
c001e7da:	5f                   	pop    edi
c001e7db:	5d                   	pop    ebp
c001e7dc:	c3                   	ret    
c001e7dd:	90                   	nop

c001e7de <SATAPI::eject()>:
c001e7de:	57                   	push   edi
c001e7df:	b9 03 00 00 00       	mov    ecx,0x3
c001e7e4:	83 ec 18             	sub    esp,0x18
c001e7e7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e7eb:	fc                   	cld    
c001e7ec:	31 c0                	xor    eax,eax
c001e7ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e7f0:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e7f5:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e7fa:	50                   	push   eax
c001e7fb:	6a 00                	push   0x0
c001e7fd:	6a 00                	push   0x0
c001e7ff:	6a 00                	push   0x0
c001e801:	6a 00                	push   0x0
c001e803:	6a 02                	push   0x2
c001e805:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e809:	50                   	push   eax
c001e80a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e80e:	e8 ed fc ff ff       	call   c001e500 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e813:	31 c0                	xor    eax,eax
c001e815:	83 c4 38             	add    esp,0x38
c001e818:	5f                   	pop    edi
c001e819:	c3                   	ret    

c001e81a <SATAPI::detectMedia()>:
c001e81a:	53                   	push   ebx
c001e81b:	83 ec 14             	sub    esp,0x14
c001e81e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e822:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e828:	e8 4f ff fe ff       	call   c000e77c <VCache::writeWriteBuffer()>
c001e82d:	59                   	pop    ecx
c001e82e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e834:	e8 33 ff fe ff       	call   c000e76c <VCache::invalidateReadBuffer()>
c001e839:	c7 04 24 2f 37 02 c0 	mov    DWORD PTR [esp],0xc002372f
c001e840:	e8 30 c1 fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001e845:	83 c4 10             	add    esp,0x10
c001e848:	31 c0                	xor    eax,eax
c001e84a:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e851:	85 d2                	test   edx,edx
c001e853:	74 0f                	je     c001e864 <SATAPI::detectMedia()+0x4a>
c001e855:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e85b:	75 07                	jne    c001e864 <SATAPI::detectMedia()+0x4a>
c001e85d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e864:	40                   	inc    eax
c001e865:	83 f8 1a             	cmp    eax,0x1a
c001e868:	75 e0                	jne    c001e84a <SATAPI::detectMedia()+0x30>
c001e86a:	83 c4 08             	add    esp,0x8
c001e86d:	5b                   	pop    ebx
c001e86e:	c3                   	ret    
c001e86f:	90                   	nop

c001e870 <SATAPI::open(int, int, void*)>:
c001e870:	56                   	push   esi
c001e871:	53                   	push   ebx
c001e872:	51                   	push   ecx
c001e873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e877:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e87b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e885:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e88b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e895:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e899:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e8a3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e8a9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e8b0:	e8 3a 95 fe ff       	call   c0007def <Phys::allocatePage()>
c001e8b5:	89 c6                	mov    esi,eax
c001e8b7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e8bd:	81 c6 00 10 00 00    	add    esi,0x1000
c001e8c3:	e8 27 95 fe ff       	call   c0007def <Phys::allocatePage()>
c001e8c8:	39 c6                	cmp    esi,eax
c001e8ca:	74 10                	je     c001e8dc <SATAPI::open(int, int, void*)+0x6c>
c001e8cc:	83 ec 0c             	sub    esp,0xc
c001e8cf:	68 44 37 02 c0       	push   0xc0023744
c001e8d4:	e8 3a 2e ff ff       	call   c0011713 <KePanic(char const*)>
c001e8d9:	83 c4 10             	add    esp,0x10
c001e8dc:	83 ec 0c             	sub    esp,0xc
c001e8df:	6a 02                	push   0x2
c001e8e1:	e8 57 ad fe ff       	call   c000963d <Virt::allocateKernelVirtualPages(int)>
c001e8e6:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e8ec:	6a 03                	push   0x3
c001e8ee:	50                   	push   eax
c001e8ef:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e8f5:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e8fb:	e8 50 b4 fe ff       	call   c0009d50 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e900:	83 c4 14             	add    esp,0x14
c001e903:	68 78 01 00 00       	push   0x178
c001e908:	e8 d9 91 fe ff       	call   c0007ae6 <malloc>
c001e90d:	83 c4 0c             	add    esp,0xc
c001e910:	89 c6                	mov    esi,eax
c001e912:	6a 00                	push   0x0
c001e914:	68 ff ff ff 7f       	push   0x7fffffff
c001e919:	6a 00                	push   0x0
c001e91b:	6a 00                	push   0x0
c001e91d:	53                   	push   ebx
c001e91e:	68 5a 37 02 c0       	push   0xc002375a
c001e923:	50                   	push   eax
c001e924:	e8 af f2 fe ff       	call   c000dbd8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e929:	83 c4 14             	add    esp,0x14
c001e92c:	56                   	push   esi
c001e92d:	e8 66 f3 fe ff       	call   c000dc98 <LogicalDisk::assignDriveLetter()>
c001e932:	5a                   	pop    edx
c001e933:	0f be c0             	movsx  eax,al
c001e936:	59                   	pop    ecx
c001e937:	50                   	push   eax
c001e938:	68 ac 35 02 c0       	push   0xc00235ac
c001e93d:	e8 33 c0 fe ff       	call   c000a975 <Dbg::kprintf(char const*, ...)>
c001e942:	58                   	pop    eax
c001e943:	5a                   	pop    edx
c001e944:	56                   	push   esi
c001e945:	53                   	push   ebx
c001e946:	e8 ab e0 fe ff       	call   c000c9f6 <Device::addChild(Device*)>
c001e94b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e951:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e954:	e8 0d e5 fe ff       	call   c000ce66 <PhysicalDisk::startCache()>
c001e959:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e960:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e963:	e8 b2 fe ff ff       	call   c001e81a <SATAPI::detectMedia()>
c001e968:	83 c4 14             	add    esp,0x14
c001e96b:	31 c0                	xor    eax,eax
c001e96d:	5b                   	pop    ebx
c001e96e:	5e                   	pop    esi
c001e96f:	c3                   	ret    

c001e970 <SATAPI::read(unsigned long long, int, void*)>:
c001e970:	57                   	push   edi
c001e971:	56                   	push   esi
c001e972:	53                   	push   ebx
c001e973:	83 ec 30             	sub    esp,0x30
c001e976:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e97a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e97e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e982:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e986:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e98a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e98e:	83 fe 04             	cmp    esi,0x4
c001e991:	7e 10                	jle    c001e9a3 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e993:	83 ec 0c             	sub    esp,0xc
c001e996:	68 68 37 02 c0       	push   0xc0023768
c001e99b:	e8 73 2d ff ff       	call   c0011713 <KePanic(char const*)>
c001e9a0:	83 c4 10             	add    esp,0x10
c001e9a3:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e9a9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e9af:	51                   	push   ecx
c001e9b0:	50                   	push   eax
c001e9b1:	83 c0 02             	add    eax,0x2
c001e9b4:	c1 e0 07             	shl    eax,0x7
c001e9b7:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e9bd:	50                   	push   eax
c001e9be:	52                   	push   edx
c001e9bf:	e8 8c e1 ff ff       	call   c001cb50 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e9c4:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e9c8:	b9 03 00 00 00       	mov    ecx,0x3
c001e9cd:	fc                   	cld    
c001e9ce:	31 c0                	xor    eax,eax
c001e9d0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e9d2:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e9d7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e9dc:	83 c4 0c             	add    esp,0xc
c001e9df:	6a 00                	push   0x0
c001e9e1:	6a 00                	push   0x0
c001e9e3:	6a 00                	push   0x0
c001e9e5:	6a 00                	push   0x0
c001e9e7:	6a 02                	push   0x2
c001e9e9:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e9ed:	50                   	push   eax
c001e9ee:	53                   	push   ebx
c001e9ef:	e8 0c fb ff ff       	call   c001e500 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e9f4:	83 c4 20             	add    esp,0x20
c001e9f7:	85 c0                	test   eax,eax
c001e9f9:	75 44                	jne    c001ea3f <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e9fb:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e9ff:	b9 03 00 00 00       	mov    ecx,0x3
c001ea04:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ea06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea0a:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001ea0f:	0f c8                	bswap  eax
c001ea11:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001ea15:	89 f0                	mov    eax,esi
c001ea17:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001ea1b:	50                   	push   eax
c001ea1c:	56                   	push   esi
c001ea1d:	c1 e6 0b             	shl    esi,0xb
c001ea20:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001ea24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ea28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ea2c:	56                   	push   esi
c001ea2d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ea31:	50                   	push   eax
c001ea32:	53                   	push   ebx
c001ea33:	e8 c8 fa ff ff       	call   c001e500 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ea38:	83 c4 20             	add    esp,0x20
c001ea3b:	85 c0                	test   eax,eax
c001ea3d:	74 14                	je     c001ea53 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001ea3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ea43:	83 ec 0c             	sub    esp,0xc
c001ea46:	53                   	push   ebx
c001ea47:	e8 ce fd ff ff       	call   c001e81a <SATAPI::detectMedia()>
c001ea4c:	83 c4 10             	add    esp,0x10
c001ea4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea53:	83 c4 30             	add    esp,0x30
c001ea56:	5b                   	pop    ebx
c001ea57:	5e                   	pop    esi
c001ea58:	5f                   	pop    edi
c001ea59:	c3                   	ret    

c001ea5a <IOAPIC::close(int, int, void*)>:
c001ea5a:	b8 00 00 00 00       	mov    eax,0x0
c001ea5f:	c3                   	ret    

c001ea60 <apicGetBase()>:
c001ea60:	55                   	push   ebp
c001ea61:	89 e5                	mov    ebp,esp
c001ea63:	83 ec 18             	sub    esp,0x18
c001ea66:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea6b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ea71:	83 e0 08             	and    eax,0x8
c001ea74:	0f b6 c0             	movzx  eax,al
c001ea77:	85 c0                	test   eax,eax
c001ea79:	75 07                	jne    c001ea82 <apicGetBase()+0x22>
c001ea7b:	b8 00 00 00 00       	mov    eax,0x0
c001ea80:	eb 21                	jmp    c001eaa3 <apicGetBase()+0x43>
c001ea82:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea87:	83 ec 08             	sub    esp,0x8
c001ea8a:	6a 1b                	push   0x1b
c001ea8c:	50                   	push   eax
c001ea8d:	e8 5e 86 fe ff       	call   c00070f0 <Computer::rdmsr(unsigned int)>
c001ea92:	83 c4 10             	add    esp,0x10
c001ea95:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ea98:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001ea9b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea9e:	25 00 00 ff ff       	and    eax,0xffff0000
c001eaa3:	c9                   	leave  
c001eaa4:	c3                   	ret    
c001eaa5:	90                   	nop

c001eaa6 <IOAPIC::IOAPIC()>:
c001eaa6:	83 ec 0c             	sub    esp,0xc
c001eaa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaad:	83 ec 08             	sub    esp,0x8
c001eab0:	68 cc 37 02 c0       	push   0xc00237cc
c001eab5:	50                   	push   eax
c001eab6:	e8 0d e1 fe ff       	call   c000cbc8 <Device::Device(char const*)>
c001eabb:	83 c4 10             	add    esp,0x10
c001eabe:	ba dc 37 02 c0       	mov    edx,0xc00237dc
c001eac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac7:	89 10                	mov    DWORD PTR [eax],edx
c001eac9:	90                   	nop
c001eaca:	83 c4 0c             	add    esp,0xc
c001eacd:	c3                   	ret    

c001eace <apicOpen()>:
c001eace:	55                   	push   ebp
c001eacf:	89 e5                	mov    ebp,esp
c001ead1:	53                   	push   ebx
c001ead2:	83 ec 34             	sub    esp,0x34
c001ead5:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001eada:	83 f0 01             	xor    eax,0x1
c001eadd:	0f b6 c0             	movzx  eax,al
c001eae0:	85 c0                	test   eax,eax
c001eae2:	0f 84 a3 00 00 00    	je     c001eb8b <apicOpen()+0xbd>
c001eae8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001eaec:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001eaf1:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eaf5:	0f b6 c0             	movzx  eax,al
c001eaf8:	39 c2                	cmp    edx,eax
c001eafa:	0f 83 84 00 00 00    	jae    c001eb84 <apicOpen()+0xb6>
c001eb00:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001eb07:	83 ec 0c             	sub    esp,0xc
c001eb0a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001eb0d:	e8 d4 8f fe ff       	call   c0007ae6 <malloc>
c001eb12:	83 c4 10             	add    esp,0x10
c001eb15:	89 c3                	mov    ebx,eax
c001eb17:	83 ec 0c             	sub    esp,0xc
c001eb1a:	53                   	push   ebx
c001eb1b:	e8 86 ff ff ff       	call   c001eaa6 <IOAPIC::IOAPIC()>
c001eb20:	83 c4 10             	add    esp,0x10
c001eb23:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001eb26:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001eb2a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001eb2d:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001eb34:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001eb39:	83 c0 01             	add    eax,0x1
c001eb3c:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001eb41:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001eb46:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001eb4c:	83 ec 08             	sub    esp,0x8
c001eb4f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eb52:	50                   	push   eax
c001eb53:	e8 9e de fe ff       	call   c000c9f6 <Device::addChild(Device*)>
c001eb58:	83 c4 10             	add    esp,0x10
c001eb5b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eb5e:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb60:	83 c0 08             	add    eax,0x8
c001eb63:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb65:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eb69:	6a 00                	push   0x0
c001eb6b:	6a 00                	push   0x0
c001eb6d:	52                   	push   edx
c001eb6e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eb71:	ff d0                	call   eax
c001eb73:	83 c4 10             	add    esp,0x10
c001eb76:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001eb79:	83 c0 01             	add    eax,0x1
c001eb7c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001eb7f:	e9 68 ff ff ff       	jmp    c001eaec <apicOpen()+0x1e>
c001eb84:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001eb8b:	e8 d0 fe ff ff       	call   c001ea60 <apicGetBase()>
c001eb90:	05 f0 00 00 00       	add    eax,0xf0
c001eb95:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eb98:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb9d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eba0:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001eba7:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ebae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ebb1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ebb4:	89 10                	mov    DWORD PTR [eax],edx
c001ebb6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ebbd:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001ebc2:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ebc5:	7d 7c                	jge    c001ec43 <apicOpen()+0x175>
c001ebc7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ebca:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ebd1:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ebd4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ebd7:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ebde:	c1 e8 08             	shr    eax,0x8
c001ebe1:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ebe5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ebe8:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ebef:	c1 e8 18             	shr    eax,0x18
c001ebf2:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ebf5:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ebf9:	3d ff 00 00 00       	cmp    eax,0xff
c001ebfe:	75 3a                	jne    c001ec3a <apicOpen()+0x16c>
c001ec00:	e8 5b fe ff ff       	call   c001ea60 <apicGetBase()>
c001ec05:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ec09:	83 fa 01             	cmp    edx,0x1
c001ec0c:	75 07                	jne    c001ec15 <apicOpen()+0x147>
c001ec0e:	ba 60 03 00 00       	mov    edx,0x360
c001ec13:	eb 05                	jmp    c001ec1a <apicOpen()+0x14c>
c001ec15:	ba 50 03 00 00       	mov    edx,0x350
c001ec1a:	01 d0                	add    eax,edx
c001ec1c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ec1f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ec22:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec24:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ec27:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ec2e:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ec32:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ec35:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ec38:	89 10                	mov    DWORD PTR [eax],edx
c001ec3a:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ec3e:	e9 7a ff ff ff       	jmp    c001ebbd <apicOpen()+0xef>
c001ec43:	90                   	nop
c001ec44:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ec47:	c9                   	leave  
c001ec48:	c3                   	ret    
c001ec49:	90                   	nop

c001ec4a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ec4a:	55                   	push   ebp
c001ec4b:	89 e5                	mov    ebp,esp
c001ec4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec50:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ec56:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ec59:	72 1d                	jb     c001ec78 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ec5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec5e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ec64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec67:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ec6d:	01 d0                	add    eax,edx
c001ec6f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ec72:	73 04                	jae    c001ec78 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ec74:	b0 01                	mov    al,0x1
c001ec76:	eb 02                	jmp    c001ec7a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ec78:	b0 00                	mov    al,0x0
c001ec7a:	5d                   	pop    ebp
c001ec7b:	c3                   	ret    

c001ec7c <IOAPIC::read(int)>:
c001ec7c:	55                   	push   ebp
c001ec7d:	89 e5                	mov    ebp,esp
c001ec7f:	83 ec 10             	sub    esp,0x10
c001ec82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec85:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec8b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec91:	0f b6 d0             	movzx  edx,al
c001ec94:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec97:	89 10                	mov    DWORD PTR [eax],edx
c001ec99:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec9c:	83 c0 10             	add    eax,0x10
c001ec9f:	8b 00                	mov    eax,DWORD PTR [eax]
c001eca1:	c9                   	leave  
c001eca2:	c3                   	ret    
c001eca3:	90                   	nop

c001eca4 <IOAPIC::open(int, int, void*)>:
c001eca4:	55                   	push   ebp
c001eca5:	89 e5                	mov    ebp,esp
c001eca7:	57                   	push   edi
c001eca8:	56                   	push   esi
c001eca9:	53                   	push   ebx
c001ecaa:	83 ec 04             	sub    esp,0x4
c001ecad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecb0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ecb3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ecb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecbc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ecc2:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001ecc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eccc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ecd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecd5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ecdb:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001ece2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ece5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001eceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecee:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ecf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecf7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ecfd:	0f b6 f0             	movzx  esi,al
c001ed00:	89 d0                	mov    eax,edx
c001ed02:	ba 00 00 00 00       	mov    edx,0x0
c001ed07:	89 c7                	mov    edi,eax
c001ed09:	83 e7 ff             	and    edi,0xffffffff
c001ed0c:	89 f9                	mov    ecx,edi
c001ed0e:	0f b6 da             	movzx  ebx,dl
c001ed11:	89 c8                	mov    eax,ecx
c001ed13:	89 da                	mov    edx,ebx
c001ed15:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ed18:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ed1b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ed1f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ed23:	83 e0 00             	and    eax,0x0
c001ed26:	09 d0                	or     eax,edx
c001ed28:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ed2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed2f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ed35:	8d 50 01             	lea    edx,[eax+0x1]
c001ed38:	88 d1                	mov    cl,dl
c001ed3a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ed3d:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ed43:	0f b6 d0             	movzx  edx,al
c001ed46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed49:	83 c2 08             	add    edx,0x8
c001ed4c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ed50:	0f b6 c9             	movzx  ecx,cl
c001ed53:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ed59:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ed5d:	6a 01                	push   0x1
c001ed5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed62:	e8 15 ff ff ff       	call   c001ec7c <IOAPIC::read(int)>
c001ed67:	83 c4 08             	add    esp,0x8
c001ed6a:	c1 f8 10             	sar    eax,0x10
c001ed6d:	0f b6 c0             	movzx  eax,al
c001ed70:	8d 50 01             	lea    edx,[eax+0x1]
c001ed73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed76:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ed7c:	b8 00 00 00 00       	mov    eax,0x0
c001ed81:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ed84:	5b                   	pop    ebx
c001ed85:	5e                   	pop    esi
c001ed86:	5f                   	pop    edi
c001ed87:	5d                   	pop    ebp
c001ed88:	c3                   	ret    
c001ed89:	90                   	nop

c001ed8a <IOAPIC::write(int, int)>:
c001ed8a:	55                   	push   ebp
c001ed8b:	89 e5                	mov    ebp,esp
c001ed8d:	83 ec 10             	sub    esp,0x10
c001ed90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed93:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ed99:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ed9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed9f:	0f b6 d0             	movzx  edx,al
c001eda2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eda5:	89 10                	mov    DWORD PTR [eax],edx
c001eda7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001edaa:	8d 50 10             	lea    edx,[eax+0x10]
c001edad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001edb0:	89 02                	mov    DWORD PTR [edx],eax
c001edb2:	90                   	nop
c001edb3:	c9                   	leave  
c001edb4:	c3                   	ret    
c001edb5:	90                   	nop

c001edb6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001edb6:	55                   	push   ebp
c001edb7:	89 e5                	mov    ebp,esp
c001edb9:	53                   	push   ebx
c001edba:	83 ec 2c             	sub    esp,0x2c
c001edbd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001edc0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001edc3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001edc6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001edc9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001edcc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001edcf:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001edd2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001edd5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001edd8:	88 d8                	mov    al,bl
c001edda:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001eddd:	88 c8                	mov    al,cl
c001eddf:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ede2:	88 d0                	mov    al,dl
c001ede4:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ede7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001edeb:	83 c0 08             	add    eax,0x8
c001edee:	01 c0                	add    eax,eax
c001edf0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001edf3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001edf7:	83 c0 08             	add    eax,0x8
c001edfa:	01 c0                	add    eax,eax
c001edfc:	83 c0 01             	add    eax,0x1
c001edff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ee02:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ee05:	50                   	push   eax
c001ee06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee09:	e8 6e fe ff ff       	call   c001ec7c <IOAPIC::read(int)>
c001ee0e:	83 c4 08             	add    esp,0x8
c001ee11:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ee14:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ee1b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ee1e:	c1 e0 18             	shl    eax,0x18
c001ee21:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ee24:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ee27:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ee2a:	52                   	push   edx
c001ee2b:	50                   	push   eax
c001ee2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee2f:	e8 56 ff ff ff       	call   c001ed8a <IOAPIC::write(int, int)>
c001ee34:	83 c4 0c             	add    esp,0xc
c001ee37:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee3a:	50                   	push   eax
c001ee3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee3e:	e8 39 fe ff ff       	call   c001ec7c <IOAPIC::read(int)>
c001ee43:	83 c4 08             	add    esp,0x8
c001ee46:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ee49:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ee50:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ee57:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ee5e:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ee62:	85 c0                	test   eax,eax
c001ee64:	74 09                	je     c001ee6f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ee66:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ee6d:	eb 07                	jmp    c001ee76 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ee6f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ee76:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ee7a:	85 c0                	test   eax,eax
c001ee7c:	74 09                	je     c001ee87 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ee7e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ee85:	eb 07                	jmp    c001ee8e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ee87:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ee8e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ee95:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ee99:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ee9c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ee9f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eea2:	52                   	push   edx
c001eea3:	50                   	push   eax
c001eea4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eea7:	e8 de fe ff ff       	call   c001ed8a <IOAPIC::write(int, int)>
c001eeac:	83 c4 0c             	add    esp,0xc
c001eeaf:	90                   	nop
c001eeb0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eeb3:	c9                   	leave  
c001eeb4:	c3                   	ret    
c001eeb5:	66 90                	xchg   ax,ax
c001eeb7:	90                   	nop

c001eeb8 <APICTimer::close(int, int, void*)>:
c001eeb8:	b8 00 00 00 00       	mov    eax,0x0
c001eebd:	c3                   	ret    
c001eebe:	66 90                	xchg   ax,ax

c001eec0 <apicTimerHandler(regs*, void*)>:
c001eec0:	83 ec 0c             	sub    esp,0xc
c001eec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eec7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001eec9:	b8 10 27 00 00       	mov    eax,0x2710
c001eece:	ba 00 00 00 00       	mov    edx,0x0
c001eed3:	f7 f1                	div    ecx
c001eed5:	83 ec 0c             	sub    esp,0xc
c001eed8:	50                   	push   eax
c001eed9:	e8 b6 f5 fe ff       	call   c000e494 <timerHandler(unsigned int)>
c001eede:	83 c4 10             	add    esp,0x10
c001eee1:	90                   	nop
c001eee2:	83 c4 0c             	add    esp,0xc
c001eee5:	c3                   	ret    
c001eee6:	66 90                	xchg   ax,ax

c001eee8 <APICTimer::open(int, int, void*)>:
c001eee8:	83 ec 0c             	sub    esp,0xc
c001eeeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeef:	8b 00                	mov    eax,DWORD PTR [eax]
c001eef1:	83 c0 24             	add    eax,0x24
c001eef4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eef6:	83 ec 08             	sub    esp,0x8
c001eef9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eefd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef01:	ff d0                	call   eax
c001ef03:	83 c4 10             	add    esp,0x10
c001ef06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef0a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef0e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ef14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef1c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ef22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef26:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ef2c:	83 ec 0c             	sub    esp,0xc
c001ef2f:	51                   	push   ecx
c001ef30:	6a 01                	push   0x1
c001ef32:	68 c0 ee 01 c0       	push   0xc001eec0
c001ef37:	52                   	push   edx
c001ef38:	50                   	push   eax
c001ef39:	e8 64 da fe ff       	call   c000c9a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef3e:	83 c4 20             	add    esp,0x20
c001ef41:	89 c2                	mov    edx,eax
c001ef43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef47:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef4d:	b8 00 00 00 00       	mov    eax,0x0
c001ef52:	83 c4 0c             	add    esp,0xc
c001ef55:	c3                   	ret    
c001ef56:	66 90                	xchg   ax,ax

c001ef58 <APICTimer::write(int)>:
c001ef58:	83 ec 0c             	sub    esp,0xc
c001ef5b:	83 ec 0c             	sub    esp,0xc
c001ef5e:	68 00 38 02 c0       	push   0xc0023800
c001ef63:	e8 ab 27 ff ff       	call   c0011713 <KePanic(char const*)>
c001ef68:	83 c4 10             	add    esp,0x10
c001ef6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef73:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef79:	90                   	nop
c001ef7a:	83 c4 0c             	add    esp,0xc
c001ef7d:	c3                   	ret    
c001ef7e:	66 90                	xchg   ax,ax

c001ef80 <APICTimer::APICTimer()>:
c001ef80:	83 ec 0c             	sub    esp,0xc
c001ef83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef87:	83 ec 08             	sub    esp,0x8
c001ef8a:	68 10 38 02 c0       	push   0xc0023810
c001ef8f:	50                   	push   eax
c001ef90:	e8 33 f4 fe ff       	call   c000e3c8 <Timer::Timer(char const*)>
c001ef95:	83 c4 10             	add    esp,0x10
c001ef98:	ba 24 38 02 c0       	mov    edx,0xc0023824
c001ef9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa1:	89 10                	mov    DWORD PTR [eax],edx
c001efa3:	90                   	nop
c001efa4:	83 c4 0c             	add    esp,0xc
c001efa7:	c3                   	ret    

c001efa8 <PIT::write(int)>:
c001efa8:	83 ec 10             	sub    esp,0x10
c001efab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001efaf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001efb3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001efb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efbd:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001efc2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001efc7:	89 c2                	mov    edx,eax
c001efc9:	c1 fa 1f             	sar    edx,0x1f
c001efcc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001efd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efd4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001efdb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001efe0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001efe4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001efe9:	ee                   	out    dx,al
c001efea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efee:	0f b6 c0             	movzx  eax,al
c001eff1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001eff8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001effc:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f000:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f005:	ee                   	out    dx,al
c001f006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f00a:	c1 f8 08             	sar    eax,0x8
c001f00d:	0f b6 c0             	movzx  eax,al
c001f010:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f017:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f01b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f01f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f024:	ee                   	out    dx,al
c001f025:	90                   	nop
c001f026:	83 c4 10             	add    esp,0x10
c001f029:	c3                   	ret    
c001f02a:	66 90                	xchg   ax,ax

c001f02c <pitHandler(regs*, void*)>:
c001f02c:	83 ec 0c             	sub    esp,0xc
c001f02f:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001f035:	b8 10 27 00 00       	mov    eax,0x2710
c001f03a:	89 c2                	mov    edx,eax
c001f03c:	c1 fa 1f             	sar    edx,0x1f
c001f03f:	f7 f9                	idiv   ecx
c001f041:	83 ec 0c             	sub    esp,0xc
c001f044:	50                   	push   eax
c001f045:	e8 4a f4 fe ff       	call   c000e494 <timerHandler(unsigned int)>
c001f04a:	83 c4 10             	add    esp,0x10
c001f04d:	90                   	nop
c001f04e:	83 c4 0c             	add    esp,0xc
c001f051:	c3                   	ret    
c001f052:	66 90                	xchg   ax,ax

c001f054 <PIT::open(int, int, void*)>:
c001f054:	83 ec 0c             	sub    esp,0xc
c001f057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f05b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f05d:	83 c0 24             	add    eax,0x24
c001f060:	8b 00                	mov    eax,DWORD PTR [eax]
c001f062:	83 ec 08             	sub    esp,0x8
c001f065:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f069:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f06d:	ff d0                	call   eax
c001f06f:	83 c4 10             	add    esp,0x10
c001f072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f076:	83 ec 0c             	sub    esp,0xc
c001f079:	6a 00                	push   0x0
c001f07b:	6a 01                	push   0x1
c001f07d:	68 2c f0 01 c0       	push   0xc001f02c
c001f082:	6a 00                	push   0x0
c001f084:	50                   	push   eax
c001f085:	e8 18 d9 fe ff       	call   c000c9a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f08a:	83 c4 20             	add    esp,0x20
c001f08d:	89 c2                	mov    edx,eax
c001f08f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f093:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f099:	b8 00 00 00 00       	mov    eax,0x0
c001f09e:	83 c4 0c             	add    esp,0xc
c001f0a1:	c3                   	ret    
c001f0a2:	66 90                	xchg   ax,ax

c001f0a4 <PIT::close(int, int, void*)>:
c001f0a4:	83 ec 0c             	sub    esp,0xc
c001f0a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ab:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f0b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b9:	6a 01                	push   0x1
c001f0bb:	68 2c f0 01 c0       	push   0xc001f02c
c001f0c0:	6a 00                	push   0x0
c001f0c2:	50                   	push   eax
c001f0c3:	e8 10 d9 fe ff       	call   c000c9d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f0c8:	83 c4 10             	add    esp,0x10
c001f0cb:	b8 00 00 00 00       	mov    eax,0x0
c001f0d0:	83 c4 0c             	add    esp,0xc
c001f0d3:	c3                   	ret    

c001f0d4 <PIT::PIT()>:
c001f0d4:	83 ec 0c             	sub    esp,0xc
c001f0d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0db:	83 ec 08             	sub    esp,0x8
c001f0de:	68 4c 38 02 c0       	push   0xc002384c
c001f0e3:	50                   	push   eax
c001f0e4:	e8 df f2 fe ff       	call   c000e3c8 <Timer::Timer(char const*)>
c001f0e9:	83 c4 10             	add    esp,0x10
c001f0ec:	ba 74 38 02 c0       	mov    edx,0xc0023874
c001f0f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f5:	89 10                	mov    DWORD PTR [eax],edx
c001f0f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0fb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f101:	0f b6 d0             	movzx  edx,al
c001f104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f108:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f10f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f113:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f119:	0f b6 d0             	movzx  edx,al
c001f11c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f120:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f129:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f12f:	8d 50 01             	lea    edx,[eax+0x1]
c001f132:	88 d1                	mov    cl,dl
c001f134:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f138:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f13e:	0f b6 d0             	movzx  edx,al
c001f141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f145:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f149:	83 e1 3f             	and    ecx,0x3f
c001f14c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f150:	90                   	nop
c001f151:	83 c4 0c             	add    esp,0xc
c001f154:	c3                   	ret    
c001f155:	66 90                	xchg   ax,ax
c001f157:	66 90                	xchg   ax,ax
c001f159:	66 90                	xchg   ax,ax
c001f15b:	66 90                	xchg   ax,ax
c001f15d:	66 90                	xchg   ax,ax
c001f15f:	90                   	nop

c001f160 <avxDetect>:
c001f160:	b8 01 00 00 00       	mov    eax,0x1
c001f165:	0f a2                	cpuid  
c001f167:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f16d:	74 15                	je     c001f184 <avxDetect.noAVX>
c001f16f:	b8 01 00 00 00       	mov    eax,0x1
c001f174:	0f a2                	cpuid  
c001f176:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f17c:	74 06                	je     c001f184 <avxDetect.noAVX>
c001f17e:	b8 01 00 00 00       	mov    eax,0x1
c001f183:	c3                   	ret    

c001f184 <avxDetect.noAVX>:
c001f184:	b8 00 00 00 00       	mov    eax,0x0
c001f189:	c3                   	ret    

c001f18a <avxSave>:
c001f18a:	53                   	push   ebx
c001f18b:	52                   	push   edx
c001f18c:	31 c0                	xor    eax,eax
c001f18e:	48                   	dec    eax
c001f18f:	89 c2                	mov    edx,eax
c001f191:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f195:	0f ae 23             	xsave  [ebx]
c001f198:	5a                   	pop    edx
c001f199:	5b                   	pop    ebx
c001f19a:	c3                   	ret    

c001f19b <avxLoad>:
c001f19b:	53                   	push   ebx
c001f19c:	52                   	push   edx
c001f19d:	31 c0                	xor    eax,eax
c001f19f:	48                   	dec    eax
c001f1a0:	89 c2                	mov    edx,eax
c001f1a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f1a6:	0f ae 2b             	xrstor [ebx]
c001f1a9:	5a                   	pop    edx
c001f1aa:	5b                   	pop    ebx
c001f1ab:	c3                   	ret    

c001f1ac <avxInit>:
c001f1ac:	e8 67 03 00 00       	call   c001f518 <sseInit>
c001f1b1:	50                   	push   eax
c001f1b2:	51                   	push   ecx
c001f1b3:	0f 20 e0             	mov    eax,cr4
c001f1b6:	0d 00 00 04 00       	or     eax,0x40000
c001f1bb:	0f 22 e0             	mov    cr4,eax
c001f1be:	31 c9                	xor    ecx,ecx
c001f1c0:	0f 01 d0             	xgetbv 
c001f1c3:	0d 07 00 00 00       	or     eax,0x7
c001f1c8:	0f 01 d1             	xsetbv 
c001f1cb:	59                   	pop    ecx
c001f1cc:	58                   	pop    eax
c001f1cd:	c3                   	ret    

c001f1ce <avxClose>:
c001f1ce:	c3                   	ret    

c001f1cf <wouldSheSayYes>:
c001f1cf:	c3                   	ret    
c001f1d0:	49                   	dec    ecx
c001f1d1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f1d5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f1d9:	75 20                	jne    c001f1fb <isr0+0xb>
c001f1db:	4e                   	dec    esi
c001f1dc:	79 61                	jns    c001f23f <isr7+0x3>
c001f1de:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f1e3:	66 90                	xchg   ax,ax
c001f1e5:	66 90                	xchg   ax,ax
c001f1e7:	66 90                	xchg   ax,ax
c001f1e9:	66 90                	xchg   ax,ax
c001f1eb:	66 90                	xchg   ax,ax
c001f1ed:	66 90                	xchg   ax,ax
c001f1ef:	90                   	nop

c001f1f0 <isr0>:
c001f1f0:	fa                   	cli    
c001f1f1:	68 00 00 00 00       	push   0x0
c001f1f6:	68 00 00 00 00       	push   0x0
c001f1fb:	e9 56 01 00 00       	jmp    c001f356 <int_common_stub>

c001f200 <isr1>:
c001f200:	fa                   	cli    
c001f201:	6a 00                	push   0x0
c001f203:	6a 01                	push   0x1
c001f205:	e9 4c 01 00 00       	jmp    c001f356 <int_common_stub>

c001f20a <isr2>:
c001f20a:	fa                   	cli    
c001f20b:	6a 00                	push   0x0
c001f20d:	6a 02                	push   0x2
c001f20f:	e9 42 01 00 00       	jmp    c001f356 <int_common_stub>

c001f214 <isr3>:
c001f214:	fa                   	cli    
c001f215:	6a 00                	push   0x0
c001f217:	6a 03                	push   0x3
c001f219:	e9 38 01 00 00       	jmp    c001f356 <int_common_stub>

c001f21e <isr4>:
c001f21e:	fa                   	cli    
c001f21f:	6a 00                	push   0x0
c001f221:	6a 04                	push   0x4
c001f223:	e9 2e 01 00 00       	jmp    c001f356 <int_common_stub>

c001f228 <isr5>:
c001f228:	fa                   	cli    
c001f229:	6a 00                	push   0x0
c001f22b:	6a 05                	push   0x5
c001f22d:	e9 24 01 00 00       	jmp    c001f356 <int_common_stub>

c001f232 <isr6>:
c001f232:	fa                   	cli    
c001f233:	6a 00                	push   0x0
c001f235:	6a 06                	push   0x6
c001f237:	e9 1a 01 00 00       	jmp    c001f356 <int_common_stub>

c001f23c <isr7>:
c001f23c:	fa                   	cli    
c001f23d:	6a 00                	push   0x0
c001f23f:	6a 07                	push   0x7
c001f241:	e9 10 01 00 00       	jmp    c001f356 <int_common_stub>

c001f246 <isr8>:
c001f246:	fa                   	cli    
c001f247:	6a 08                	push   0x8
c001f249:	e9 08 01 00 00       	jmp    c001f356 <int_common_stub>

c001f24e <isr9>:
c001f24e:	fa                   	cli    
c001f24f:	6a 00                	push   0x0
c001f251:	6a 09                	push   0x9
c001f253:	e9 fe 00 00 00       	jmp    c001f356 <int_common_stub>

c001f258 <isr10>:
c001f258:	fa                   	cli    
c001f259:	6a 0a                	push   0xa
c001f25b:	e9 f6 00 00 00       	jmp    c001f356 <int_common_stub>

c001f260 <isr11>:
c001f260:	fa                   	cli    
c001f261:	6a 0b                	push   0xb
c001f263:	e9 ee 00 00 00       	jmp    c001f356 <int_common_stub>

c001f268 <isr12>:
c001f268:	fa                   	cli    
c001f269:	6a 0c                	push   0xc
c001f26b:	e9 e6 00 00 00       	jmp    c001f356 <int_common_stub>

c001f270 <isr13>:
c001f270:	fa                   	cli    
c001f271:	6a 0d                	push   0xd
c001f273:	53                   	push   ebx
c001f274:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f278:	81 fb 46 f4 01 c0    	cmp    ebx,0xc001f446
c001f27e:	5b                   	pop    ebx
c001f27f:	0f 84 c3 01 00 00    	je     c001f448 <finishSignal2>
c001f285:	e9 cc 00 00 00       	jmp    c001f356 <int_common_stub>

c001f28a <isr14>:
c001f28a:	fa                   	cli    
c001f28b:	6a 0e                	push   0xe
c001f28d:	e9 c4 00 00 00       	jmp    c001f356 <int_common_stub>

c001f292 <isr15>:
c001f292:	fa                   	cli    
c001f293:	6a 00                	push   0x0
c001f295:	6a 0f                	push   0xf
c001f297:	e9 ba 00 00 00       	jmp    c001f356 <int_common_stub>

c001f29c <isr16>:
c001f29c:	fa                   	cli    
c001f29d:	6a 00                	push   0x0
c001f29f:	6a 10                	push   0x10
c001f2a1:	e9 b0 00 00 00       	jmp    c001f356 <int_common_stub>

c001f2a6 <isr17>:
c001f2a6:	fa                   	cli    
c001f2a7:	6a 00                	push   0x0
c001f2a9:	6a 11                	push   0x11
c001f2ab:	e9 a6 00 00 00       	jmp    c001f356 <int_common_stub>

c001f2b0 <isr18>:
c001f2b0:	fa                   	cli    
c001f2b1:	6a 00                	push   0x0
c001f2b3:	6a 12                	push   0x12
c001f2b5:	e9 9c 00 00 00       	jmp    c001f356 <int_common_stub>

c001f2ba <irq3>:
c001f2ba:	fa                   	cli    
c001f2bb:	6a 00                	push   0x0
c001f2bd:	6a 23                	push   0x23
c001f2bf:	e9 92 00 00 00       	jmp    c001f356 <int_common_stub>

c001f2c4 <irq4>:
c001f2c4:	fa                   	cli    
c001f2c5:	6a 00                	push   0x0
c001f2c7:	6a 24                	push   0x24
c001f2c9:	e9 88 00 00 00       	jmp    c001f356 <int_common_stub>

c001f2ce <irq5>:
c001f2ce:	fa                   	cli    
c001f2cf:	6a 00                	push   0x0
c001f2d1:	6a 25                	push   0x25
c001f2d3:	e9 7e 00 00 00       	jmp    c001f356 <int_common_stub>

c001f2d8 <irq6>:
c001f2d8:	fa                   	cli    
c001f2d9:	6a 00                	push   0x0
c001f2db:	6a 26                	push   0x26
c001f2dd:	e9 74 00 00 00       	jmp    c001f356 <int_common_stub>

c001f2e2 <irq7>:
c001f2e2:	fa                   	cli    
c001f2e3:	6a 00                	push   0x0
c001f2e5:	6a 27                	push   0x27
c001f2e7:	e9 6a 00 00 00       	jmp    c001f356 <int_common_stub>

c001f2ec <irq8>:
c001f2ec:	fa                   	cli    
c001f2ed:	6a 00                	push   0x0
c001f2ef:	6a 28                	push   0x28
c001f2f1:	e9 60 00 00 00       	jmp    c001f356 <int_common_stub>

c001f2f6 <irq9>:
c001f2f6:	fa                   	cli    
c001f2f7:	6a 00                	push   0x0
c001f2f9:	6a 29                	push   0x29
c001f2fb:	e9 56 00 00 00       	jmp    c001f356 <int_common_stub>

c001f300 <irq10>:
c001f300:	fa                   	cli    
c001f301:	6a 00                	push   0x0
c001f303:	6a 2a                	push   0x2a
c001f305:	e9 4c 00 00 00       	jmp    c001f356 <int_common_stub>

c001f30a <irq11>:
c001f30a:	fa                   	cli    
c001f30b:	6a 00                	push   0x0
c001f30d:	6a 2b                	push   0x2b
c001f30f:	e9 42 00 00 00       	jmp    c001f356 <int_common_stub>

c001f314 <irq12>:
c001f314:	fa                   	cli    
c001f315:	6a 00                	push   0x0
c001f317:	6a 2c                	push   0x2c
c001f319:	e9 38 00 00 00       	jmp    c001f356 <int_common_stub>

c001f31e <irq13>:
c001f31e:	fa                   	cli    
c001f31f:	6a 00                	push   0x0
c001f321:	6a 2d                	push   0x2d
c001f323:	e9 2e 00 00 00       	jmp    c001f356 <int_common_stub>

c001f328 <irq14>:
c001f328:	fa                   	cli    
c001f329:	6a 00                	push   0x0
c001f32b:	6a 2e                	push   0x2e
c001f32d:	e9 24 00 00 00       	jmp    c001f356 <int_common_stub>

c001f332 <irq15>:
c001f332:	fa                   	cli    
c001f333:	6a 00                	push   0x0
c001f335:	6a 2f                	push   0x2f
c001f337:	e9 1a 00 00 00       	jmp    c001f356 <int_common_stub>

c001f33c <irq1>:
c001f33c:	fa                   	cli    
c001f33d:	6a 00                	push   0x0
c001f33f:	6a 21                	push   0x21
c001f341:	eb 13                	jmp    c001f356 <int_common_stub>

c001f343 <irq2>:
c001f343:	fa                   	cli    
c001f344:	6a 00                	push   0x0
c001f346:	6a 22                	push   0x22
c001f348:	eb 0c                	jmp    c001f356 <int_common_stub>

c001f34a <isr96>:
c001f34a:	6a 00                	push   0x0
c001f34c:	6a 60                	push   0x60
c001f34e:	fb                   	sti    
c001f34f:	eb 37                	jmp    c001f388 <syscall_common_stub>

c001f351 <irq0>:
c001f351:	fa                   	cli    
c001f352:	6a 00                	push   0x0
c001f354:	6a 20                	push   0x20

c001f356 <int_common_stub>:
c001f356:	60                   	pusha  
c001f357:	1e                   	push   ds
c001f358:	06                   	push   es
c001f359:	0f a0                	push   fs
c001f35b:	0f a8                	push   gs
c001f35d:	66 b8 10 00          	mov    ax,0x10
c001f361:	66 8e d8             	mov    ds,ax
c001f364:	66 8e c0             	mov    es,ax
c001f367:	66 8e e0             	mov    fs,ax
c001f36a:	66 8e e8             	mov    gs,ax
c001f36d:	54                   	push   esp
c001f36e:	fc                   	cld    
c001f36f:	e8 68 db fe ff       	call   c000cedc <int_handler>
c001f374:	81 c4 04 00 00 00    	add    esp,0x4
c001f37a:	0f a9                	pop    gs
c001f37c:	0f a1                	pop    fs
c001f37e:	07                   	pop    es
c001f37f:	1f                   	pop    ds
c001f380:	61                   	popa   
c001f381:	81 c4 08 00 00 00    	add    esp,0x8
c001f387:	cf                   	iret   

c001f388 <syscall_common_stub>:
c001f388:	60                   	pusha  
c001f389:	1e                   	push   ds
c001f38a:	06                   	push   es
c001f38b:	0f a0                	push   fs
c001f38d:	0f a8                	push   gs
c001f38f:	66 b8 10 00          	mov    ax,0x10
c001f393:	66 8e d8             	mov    ds,ax
c001f396:	66 8e c0             	mov    es,ax
c001f399:	66 8e e0             	mov    fs,ax
c001f39c:	66 8e e8             	mov    gs,ax
c001f39f:	54                   	push   esp
c001f3a0:	fc                   	cld    
c001f3a1:	e8 36 db fe ff       	call   c000cedc <int_handler>
c001f3a6:	81 c4 04 00 00 00    	add    esp,0x4
c001f3ac:	0f a9                	pop    gs
c001f3ae:	0f a1                	pop    fs
c001f3b0:	07                   	pop    es
c001f3b1:	1f                   	pop    ds
c001f3b2:	e8 73 29 ff ff       	call   c0011d2a <KiCheckSignalZ>
c001f3b7:	3d 00 00 00 00       	cmp    eax,0x0
c001f3bc:	0f 84 c0 00 00 00    	je     c001f482 <skipSignals>
c001f3c2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f3c7:	61                   	popa   
c001f3c8:	53                   	push   ebx
c001f3c9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f3cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f3d2:	5b                   	pop    ebx
c001f3d3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f3d8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f3db:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f3de:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f3e1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f3e4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f3e7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f3ea:	81 c4 08 00 00 00    	add    esp,0x8
c001f3f0:	5e                   	pop    esi
c001f3f1:	5b                   	pop    ebx
c001f3f2:	59                   	pop    ecx
c001f3f3:	5a                   	pop    edx
c001f3f4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f3f7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f3fa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f3fd:	52                   	push   edx
c001f3fe:	51                   	push   ecx
c001f3ff:	53                   	push   ebx
c001f400:	56                   	push   esi
c001f401:	81 ec 08 00 00 00    	sub    esp,0x8
c001f407:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f40a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f40d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f410:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f413:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f416:	60                   	pusha  
c001f417:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f41d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f420:	89 e3                	mov    ebx,esp
c001f422:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f425:	52                   	push   edx
c001f426:	68 46 f4 01 c0       	push   0xc001f446
c001f42b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f42e:	89 dc                	mov    esp,ebx
c001f430:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f433:	68 23 00 00 00       	push   0x23
c001f438:	51                   	push   ecx
c001f439:	68 02 02 00 00       	push   0x202
c001f43e:	68 1b 00 00 00       	push   0x1b
c001f443:	ff 36                	push   DWORD PTR [esi]
c001f445:	cf                   	iret   

c001f446 <finishSignal>:
c001f446:	cd 0f                	int    0xf

c001f448 <finishSignal2>:
c001f448:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f44e:	e8 54 29 ff ff       	call   c0011da7 <KiFinishSignalZ>
c001f453:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f459:	68 23 00 00 00       	push   0x23
c001f45e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f461:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f464:	68 1b 00 00 00       	push   0x1b
c001f469:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f46c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f46f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f472:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f475:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f478:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f47b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f47e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f481:	cf                   	iret   

c001f482 <skipSignals>:
c001f482:	61                   	popa   
c001f483:	81 c4 08 00 00 00    	add    esp,0x8
c001f489:	cf                   	iret   
c001f48a:	90                   	nop
c001f48b:	90                   	nop

c001f48c <irq16>:
c001f48c:	fa                   	cli    
c001f48d:	6a 00                	push   0x0
c001f48f:	6a 30                	push   0x30
c001f491:	e9 c0 fe ff ff       	jmp    c001f356 <int_common_stub>

c001f496 <irq17>:
c001f496:	fa                   	cli    
c001f497:	6a 00                	push   0x0
c001f499:	6a 31                	push   0x31
c001f49b:	e9 b6 fe ff ff       	jmp    c001f356 <int_common_stub>

c001f4a0 <irq18>:
c001f4a0:	fa                   	cli    
c001f4a1:	6a 00                	push   0x0
c001f4a3:	6a 32                	push   0x32
c001f4a5:	e9 ac fe ff ff       	jmp    c001f356 <int_common_stub>

c001f4aa <irq19>:
c001f4aa:	fa                   	cli    
c001f4ab:	6a 00                	push   0x0
c001f4ad:	6a 33                	push   0x33
c001f4af:	e9 a2 fe ff ff       	jmp    c001f356 <int_common_stub>

c001f4b4 <irq20>:
c001f4b4:	fa                   	cli    
c001f4b5:	6a 00                	push   0x0
c001f4b7:	6a 34                	push   0x34
c001f4b9:	e9 98 fe ff ff       	jmp    c001f356 <int_common_stub>

c001f4be <irq21>:
c001f4be:	fa                   	cli    
c001f4bf:	6a 00                	push   0x0
c001f4c1:	6a 35                	push   0x35
c001f4c3:	e9 8e fe ff ff       	jmp    c001f356 <int_common_stub>

c001f4c8 <irq22>:
c001f4c8:	fa                   	cli    
c001f4c9:	6a 00                	push   0x0
c001f4cb:	6a 36                	push   0x36
c001f4cd:	e9 84 fe ff ff       	jmp    c001f356 <int_common_stub>

c001f4d2 <irq23>:
c001f4d2:	fa                   	cli    
c001f4d3:	6a 00                	push   0x0
c001f4d5:	6a 37                	push   0x37
c001f4d7:	e9 7a fe ff ff       	jmp    c001f356 <int_common_stub>
c001f4dc:	66 90                	xchg   ax,ax
c001f4de:	66 90                	xchg   ax,ax

c001f4e0 <i386GetRDRAND>:
c001f4e0:	b9 64 00 00 00       	mov    ecx,0x64

c001f4e5 <retry>:
c001f4e5:	0f c7 f0             	rdrand eax
c001f4e8:	72 05                	jb     c001f4ef <retry.done>
c001f4ea:	e2 f9                	loop   c001f4e5 <retry>

c001f4ec <retry.fail>:
c001f4ec:	31 c0                	xor    eax,eax
c001f4ee:	c3                   	ret    

c001f4ef <retry.done>:
c001f4ef:	c3                   	ret    

c001f4f0 <absolutelyNoChanceInHell>:
c001f4f0:	b8 01 00 00 00       	mov    eax,0x1
c001f4f5:	0f a2                	cpuid  
c001f4f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f4fd:	74 06                	je     c001f505 <sseDetect.noSSE>
c001f4ff:	b8 01 00 00 00       	mov    eax,0x1
c001f504:	c3                   	ret    

c001f505 <sseDetect.noSSE>:
c001f505:	31 c0                	xor    eax,eax
c001f507:	c3                   	ret    

c001f508 <sseSave>:
c001f508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f50c:	0f ae 00             	fxsave [eax]
c001f50f:	c3                   	ret    

c001f510 <sseLoad>:
c001f510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f514:	0f ae 08             	fxrstor [eax]
c001f517:	c3                   	ret    

c001f518 <sseInit>:
c001f518:	e8 42 00 00 00       	call   c001f55f <x87Init>
c001f51d:	0f 20 e0             	mov    eax,cr4
c001f520:	66 0d 00 06          	or     ax,0x600
c001f524:	0f 22 e0             	mov    cr4,eax
c001f527:	c3                   	ret    

c001f528 <sseClose>:
c001f528:	c3                   	ret    
c001f529:	66 90                	xchg   ax,ax
c001f52b:	66 90                	xchg   ax,ax
c001f52d:	66 90                	xchg   ax,ax
c001f52f:	90                   	nop

c001f530 <value_37F>:
c001f530:	7f 03                	jg     c001f535 <value_37A+0x1>

c001f532 <value_37E>:
c001f532:	7e 03                	jle    c001f537 <x87Detect+0x1>

c001f534 <value_37A>:
c001f534:	7a 03                	jp     c001f539 <x87Detect+0x3>

c001f536 <x87Detect>:
c001f536:	b8 01 00 00 00       	mov    eax,0x1
c001f53b:	0f a2                	cpuid  
c001f53d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f543:	74 06                	je     c001f54b <x87Detect.nox87>
c001f545:	b8 01 00 00 00       	mov    eax,0x1
c001f54a:	c3                   	ret    

c001f54b <x87Detect.nox87>:
c001f54b:	b8 00 00 00 00       	mov    eax,0x0
c001f550:	c3                   	ret    

c001f551 <x87Save>:
c001f551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f555:	dd 30                	fnsave [eax]
c001f557:	c3                   	ret    

c001f558 <x87Load>:
c001f558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f55c:	dd 20                	frstor [eax]
c001f55e:	c3                   	ret    

c001f55f <x87Init>:
c001f55f:	0f 20 c0             	mov    eax,cr0
c001f562:	66 25 fb ff          	and    ax,0xfffb
c001f566:	66 0d 22 00          	or     ax,0x22
c001f56a:	0f 22 c0             	mov    cr0,eax
c001f56d:	db e3                	fninit 
c001f56f:	0f 06                	clts   
c001f571:	d9 2d 34 f5 01 c0    	fldcw  WORD PTR ds:0xc001f534
c001f577:	c3                   	ret    

c001f578 <x87Close>:
c001f578:	c3                   	ret    
c001f579:	66 90                	xchg   ax,ax
c001f57b:	90                   	nop

c001f57c <__do_global_ctors_aux>:
c001f57c:	a1 30 05 02 c0       	mov    eax,ds:0xc0020530
c001f581:	83 f8 ff             	cmp    eax,0xffffffff
c001f584:	74 1a                	je     c001f5a0 <__do_global_ctors_aux+0x24>
c001f586:	55                   	push   ebp
c001f587:	89 e5                	mov    ebp,esp
c001f589:	53                   	push   ebx
c001f58a:	52                   	push   edx
c001f58b:	bb 30 05 02 c0       	mov    ebx,0xc0020530
c001f590:	ff d0                	call   eax
c001f592:	83 eb 04             	sub    ebx,0x4
c001f595:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f597:	83 f8 ff             	cmp    eax,0xffffffff
c001f59a:	75 f4                	jne    c001f590 <__do_global_ctors_aux+0x14>
c001f59c:	58                   	pop    eax
c001f59d:	5b                   	pop    ebx
c001f59e:	5d                   	pop    ebp
c001f59f:	c3                   	ret    
c001f5a0:	c3                   	ret    
c001f5a1:	66 90                	xchg   ax,ax
c001f5a3:	90                   	nop

c001f5a4 <__divdi3>:
c001f5a4:	55                   	push   ebp
c001f5a5:	57                   	push   edi
c001f5a6:	56                   	push   esi
c001f5a7:	53                   	push   ebx
c001f5a8:	83 ec 1c             	sub    esp,0x1c
c001f5ab:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f5af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f5b3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f5b6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f5ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f5be:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f5c2:	85 db                	test   ebx,ebx
c001f5c4:	0f 88 8e 00 00 00    	js     c001f658 <__divdi3+0xb4>
c001f5ca:	89 dd                	mov    ebp,ebx
c001f5cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f5d4:	89 d3                	mov    ebx,edx
c001f5d6:	85 d2                	test   edx,edx
c001f5d8:	79 0d                	jns    c001f5e7 <__divdi3+0x43>
c001f5da:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f5de:	f7 d8                	neg    eax
c001f5e0:	83 d2 00             	adc    edx,0x0
c001f5e3:	f7 da                	neg    edx
c001f5e5:	89 d3                	mov    ebx,edx
c001f5e7:	89 c7                	mov    edi,eax
c001f5e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f5ec:	85 db                	test   ebx,ebx
c001f5ee:	75 48                	jne    c001f638 <__divdi3+0x94>
c001f5f0:	39 ef                	cmp    edi,ebp
c001f5f2:	76 24                	jbe    c001f618 <__divdi3+0x74>
c001f5f4:	89 ea                	mov    edx,ebp
c001f5f6:	f7 f7                	div    edi
c001f5f8:	89 c1                	mov    ecx,eax
c001f5fa:	31 f6                	xor    esi,esi
c001f5fc:	89 c8                	mov    eax,ecx
c001f5fe:	89 f2                	mov    edx,esi
c001f600:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f604:	85 c9                	test   ecx,ecx
c001f606:	74 07                	je     c001f60f <__divdi3+0x6b>
c001f608:	f7 d8                	neg    eax
c001f60a:	83 d2 00             	adc    edx,0x0
c001f60d:	f7 da                	neg    edx
c001f60f:	83 c4 1c             	add    esp,0x1c
c001f612:	5b                   	pop    ebx
c001f613:	5e                   	pop    esi
c001f614:	5f                   	pop    edi
c001f615:	5d                   	pop    ebp
c001f616:	c3                   	ret    
c001f617:	90                   	nop
c001f618:	85 ff                	test   edi,edi
c001f61a:	75 0b                	jne    c001f627 <__divdi3+0x83>
c001f61c:	b8 01 00 00 00       	mov    eax,0x1
c001f621:	31 d2                	xor    edx,edx
c001f623:	f7 f3                	div    ebx
c001f625:	89 c7                	mov    edi,eax
c001f627:	31 d2                	xor    edx,edx
c001f629:	89 e8                	mov    eax,ebp
c001f62b:	f7 f7                	div    edi
c001f62d:	89 c6                	mov    esi,eax
c001f62f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f632:	f7 f7                	div    edi
c001f634:	89 c1                	mov    ecx,eax
c001f636:	eb c4                	jmp    c001f5fc <__divdi3+0x58>
c001f638:	39 eb                	cmp    ebx,ebp
c001f63a:	77 3c                	ja     c001f678 <__divdi3+0xd4>
c001f63c:	0f bd f3             	bsr    esi,ebx
c001f63f:	83 f6 1f             	xor    esi,0x1f
c001f642:	75 40                	jne    c001f684 <__divdi3+0xe0>
c001f644:	39 eb                	cmp    ebx,ebp
c001f646:	72 09                	jb     c001f651 <__divdi3+0xad>
c001f648:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f64b:	0f 87 97 00 00 00    	ja     c001f6e8 <__divdi3+0x144>
c001f651:	b9 01 00 00 00       	mov    ecx,0x1
c001f656:	eb a4                	jmp    c001f5fc <__divdi3+0x58>
c001f658:	f7 d9                	neg    ecx
c001f65a:	83 d3 00             	adc    ebx,0x0
c001f65d:	f7 db                	neg    ebx
c001f65f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f662:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f666:	89 dd                	mov    ebp,ebx
c001f668:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f670:	e9 5f ff ff ff       	jmp    c001f5d4 <__divdi3+0x30>
c001f675:	8d 76 00             	lea    esi,[esi+0x0]
c001f678:	31 f6                	xor    esi,esi
c001f67a:	31 c9                	xor    ecx,ecx
c001f67c:	e9 7b ff ff ff       	jmp    c001f5fc <__divdi3+0x58>
c001f681:	8d 76 00             	lea    esi,[esi+0x0]
c001f684:	b8 20 00 00 00       	mov    eax,0x20
c001f689:	29 f0                	sub    eax,esi
c001f68b:	89 f1                	mov    ecx,esi
c001f68d:	d3 e3                	shl    ebx,cl
c001f68f:	89 fa                	mov    edx,edi
c001f691:	88 c1                	mov    cl,al
c001f693:	d3 ea                	shr    edx,cl
c001f695:	09 da                	or     edx,ebx
c001f697:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f69b:	89 f1                	mov    ecx,esi
c001f69d:	d3 e7                	shl    edi,cl
c001f69f:	89 eb                	mov    ebx,ebp
c001f6a1:	88 c1                	mov    cl,al
c001f6a3:	d3 eb                	shr    ebx,cl
c001f6a5:	89 f1                	mov    ecx,esi
c001f6a7:	d3 e5                	shl    ebp,cl
c001f6a9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f6ac:	88 c1                	mov    cl,al
c001f6ae:	d3 ea                	shr    edx,cl
c001f6b0:	09 d5                	or     ebp,edx
c001f6b2:	89 e8                	mov    eax,ebp
c001f6b4:	89 da                	mov    edx,ebx
c001f6b6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f6ba:	89 d3                	mov    ebx,edx
c001f6bc:	89 c5                	mov    ebp,eax
c001f6be:	f7 e7                	mul    edi
c001f6c0:	39 d3                	cmp    ebx,edx
c001f6c2:	72 18                	jb     c001f6dc <__divdi3+0x138>
c001f6c4:	74 0a                	je     c001f6d0 <__divdi3+0x12c>
c001f6c6:	89 e9                	mov    ecx,ebp
c001f6c8:	31 f6                	xor    esi,esi
c001f6ca:	e9 2d ff ff ff       	jmp    c001f5fc <__divdi3+0x58>
c001f6cf:	90                   	nop
c001f6d0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f6d3:	89 f1                	mov    ecx,esi
c001f6d5:	d3 e7                	shl    edi,cl
c001f6d7:	39 c7                	cmp    edi,eax
c001f6d9:	73 eb                	jae    c001f6c6 <__divdi3+0x122>
c001f6db:	90                   	nop
c001f6dc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f6df:	31 f6                	xor    esi,esi
c001f6e1:	e9 16 ff ff ff       	jmp    c001f5fc <__divdi3+0x58>
c001f6e6:	66 90                	xchg   ax,ax
c001f6e8:	31 c9                	xor    ecx,ecx
c001f6ea:	e9 0d ff ff ff       	jmp    c001f5fc <__divdi3+0x58>
c001f6ef:	90                   	nop

c001f6f0 <__moddi3>:
c001f6f0:	55                   	push   ebp
c001f6f1:	57                   	push   edi
c001f6f2:	56                   	push   esi
c001f6f3:	53                   	push   ebx
c001f6f4:	83 ec 2c             	sub    esp,0x2c
c001f6f7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f6fb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f6ff:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f703:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f707:	85 db                	test   ebx,ebx
c001f709:	0f 88 85 00 00 00    	js     c001f794 <__moddi3+0xa4>
c001f70f:	89 de                	mov    esi,ebx
c001f711:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f719:	89 d7                	mov    edi,edx
c001f71b:	85 d2                	test   edx,edx
c001f71d:	79 09                	jns    c001f728 <__moddi3+0x38>
c001f71f:	f7 d8                	neg    eax
c001f721:	83 d2 00             	adc    edx,0x0
c001f724:	f7 da                	neg    edx
c001f726:	89 d7                	mov    edi,edx
c001f728:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f72c:	89 cd                	mov    ebp,ecx
c001f72e:	85 ff                	test   edi,edi
c001f730:	75 52                	jne    c001f784 <__moddi3+0x94>
c001f732:	89 c3                	mov    ebx,eax
c001f734:	39 f0                	cmp    eax,esi
c001f736:	76 24                	jbe    c001f75c <__moddi3+0x6c>
c001f738:	89 c8                	mov    eax,ecx
c001f73a:	89 f2                	mov    edx,esi
c001f73c:	f7 f3                	div    ebx
c001f73e:	89 d6                	mov    esi,edx
c001f740:	89 f0                	mov    eax,esi
c001f742:	31 d2                	xor    edx,edx
c001f744:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f748:	85 c9                	test   ecx,ecx
c001f74a:	74 07                	je     c001f753 <__moddi3+0x63>
c001f74c:	f7 d8                	neg    eax
c001f74e:	83 d2 00             	adc    edx,0x0
c001f751:	f7 da                	neg    edx
c001f753:	83 c4 2c             	add    esp,0x2c
c001f756:	5b                   	pop    ebx
c001f757:	5e                   	pop    esi
c001f758:	5f                   	pop    edi
c001f759:	5d                   	pop    ebp
c001f75a:	c3                   	ret    
c001f75b:	90                   	nop
c001f75c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f760:	85 db                	test   ebx,ebx
c001f762:	75 0d                	jne    c001f771 <__moddi3+0x81>
c001f764:	b8 01 00 00 00       	mov    eax,0x1
c001f769:	31 d2                	xor    edx,edx
c001f76b:	f7 f7                	div    edi
c001f76d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f771:	89 f0                	mov    eax,esi
c001f773:	31 d2                	xor    edx,edx
c001f775:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f779:	f7 f7                	div    edi
c001f77b:	89 e8                	mov    eax,ebp
c001f77d:	f7 f7                	div    edi
c001f77f:	89 d6                	mov    esi,edx
c001f781:	eb bd                	jmp    c001f740 <__moddi3+0x50>
c001f783:	90                   	nop
c001f784:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f788:	39 f7                	cmp    edi,esi
c001f78a:	76 20                	jbe    c001f7ac <__moddi3+0xbc>
c001f78c:	89 c8                	mov    eax,ecx
c001f78e:	89 f2                	mov    edx,esi
c001f790:	eb b2                	jmp    c001f744 <__moddi3+0x54>
c001f792:	66 90                	xchg   ax,ax
c001f794:	f7 d9                	neg    ecx
c001f796:	83 d3 00             	adc    ebx,0x0
c001f799:	f7 db                	neg    ebx
c001f79b:	89 de                	mov    esi,ebx
c001f79d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f7a5:	e9 6f ff ff ff       	jmp    c001f719 <__moddi3+0x29>
c001f7aa:	66 90                	xchg   ax,ax
c001f7ac:	0f bd c7             	bsr    eax,edi
c001f7af:	83 f0 1f             	xor    eax,0x1f
c001f7b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f7b6:	75 24                	jne    c001f7dc <__moddi3+0xec>
c001f7b8:	39 f7                	cmp    edi,esi
c001f7ba:	72 06                	jb     c001f7c2 <__moddi3+0xd2>
c001f7bc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f7c0:	77 0c                	ja     c001f7ce <__moddi3+0xde>
c001f7c2:	89 e9                	mov    ecx,ebp
c001f7c4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f7c8:	19 fe                	sbb    esi,edi
c001f7ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f7ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f7d2:	89 f2                	mov    edx,esi
c001f7d4:	e9 6b ff ff ff       	jmp    c001f744 <__moddi3+0x54>
c001f7d9:	8d 76 00             	lea    esi,[esi+0x0]
c001f7dc:	b8 20 00 00 00       	mov    eax,0x20
c001f7e1:	89 c2                	mov    edx,eax
c001f7e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f7e7:	29 da                	sub    edx,ebx
c001f7e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f7ed:	88 d9                	mov    cl,bl
c001f7ef:	d3 e7                	shl    edi,cl
c001f7f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7f5:	88 d1                	mov    cl,dl
c001f7f7:	d3 e8                	shr    eax,cl
c001f7f9:	09 c7                	or     edi,eax
c001f7fb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f7ff:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f803:	89 d8                	mov    eax,ebx
c001f805:	88 d9                	mov    cl,bl
c001f807:	d3 e7                	shl    edi,cl
c001f809:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f80d:	89 f3                	mov    ebx,esi
c001f80f:	88 d1                	mov    cl,dl
c001f811:	d3 eb                	shr    ebx,cl
c001f813:	89 c7                	mov    edi,eax
c001f815:	88 c1                	mov    cl,al
c001f817:	d3 e6                	shl    esi,cl
c001f819:	89 e8                	mov    eax,ebp
c001f81b:	88 d1                	mov    cl,dl
c001f81d:	d3 e8                	shr    eax,cl
c001f81f:	09 f0                	or     eax,esi
c001f821:	89 f9                	mov    ecx,edi
c001f823:	d3 e5                	shl    ebp,cl
c001f825:	89 da                	mov    edx,ebx
c001f827:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f82b:	89 d3                	mov    ebx,edx
c001f82d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f831:	89 c6                	mov    esi,eax
c001f833:	89 d1                	mov    ecx,edx
c001f835:	39 d3                	cmp    ebx,edx
c001f837:	72 27                	jb     c001f860 <__moddi3+0x170>
c001f839:	74 21                	je     c001f85c <__moddi3+0x16c>
c001f83b:	29 f5                	sub    ebp,esi
c001f83d:	19 cb                	sbb    ebx,ecx
c001f83f:	89 de                	mov    esi,ebx
c001f841:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f845:	d3 e6                	shl    esi,cl
c001f847:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f84b:	89 f9                	mov    ecx,edi
c001f84d:	d3 ed                	shr    ebp,cl
c001f84f:	09 ee                	or     esi,ebp
c001f851:	89 f0                	mov    eax,esi
c001f853:	d3 eb                	shr    ebx,cl
c001f855:	89 da                	mov    edx,ebx
c001f857:	e9 e8 fe ff ff       	jmp    c001f744 <__moddi3+0x54>
c001f85c:	39 c5                	cmp    ebp,eax
c001f85e:	73 db                	jae    c001f83b <__moddi3+0x14b>
c001f860:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f864:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f868:	89 d1                	mov    ecx,edx
c001f86a:	89 c6                	mov    esi,eax
c001f86c:	eb cd                	jmp    c001f83b <__moddi3+0x14b>
c001f86e:	66 90                	xchg   ax,ax

c001f870 <__udivdi3>:
c001f870:	55                   	push   ebp
c001f871:	57                   	push   edi
c001f872:	56                   	push   esi
c001f873:	53                   	push   ebx
c001f874:	83 ec 1c             	sub    esp,0x1c
c001f877:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f87b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f87f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f883:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f887:	85 d2                	test   edx,edx
c001f889:	75 41                	jne    c001f8cc <__udivdi3+0x5c>
c001f88b:	39 f7                	cmp    edi,esi
c001f88d:	76 15                	jbe    c001f8a4 <__udivdi3+0x34>
c001f88f:	89 e8                	mov    eax,ebp
c001f891:	89 f2                	mov    edx,esi
c001f893:	f7 f7                	div    edi
c001f895:	31 db                	xor    ebx,ebx
c001f897:	89 da                	mov    edx,ebx
c001f899:	83 c4 1c             	add    esp,0x1c
c001f89c:	5b                   	pop    ebx
c001f89d:	5e                   	pop    esi
c001f89e:	5f                   	pop    edi
c001f89f:	5d                   	pop    ebp
c001f8a0:	c3                   	ret    
c001f8a1:	8d 76 00             	lea    esi,[esi+0x0]
c001f8a4:	89 f9                	mov    ecx,edi
c001f8a6:	85 ff                	test   edi,edi
c001f8a8:	75 0b                	jne    c001f8b5 <__udivdi3+0x45>
c001f8aa:	b8 01 00 00 00       	mov    eax,0x1
c001f8af:	31 d2                	xor    edx,edx
c001f8b1:	f7 f7                	div    edi
c001f8b3:	89 c1                	mov    ecx,eax
c001f8b5:	31 d2                	xor    edx,edx
c001f8b7:	89 f0                	mov    eax,esi
c001f8b9:	f7 f1                	div    ecx
c001f8bb:	89 c3                	mov    ebx,eax
c001f8bd:	89 e8                	mov    eax,ebp
c001f8bf:	f7 f1                	div    ecx
c001f8c1:	89 da                	mov    edx,ebx
c001f8c3:	83 c4 1c             	add    esp,0x1c
c001f8c6:	5b                   	pop    ebx
c001f8c7:	5e                   	pop    esi
c001f8c8:	5f                   	pop    edi
c001f8c9:	5d                   	pop    ebp
c001f8ca:	c3                   	ret    
c001f8cb:	90                   	nop
c001f8cc:	39 f2                	cmp    edx,esi
c001f8ce:	77 1c                	ja     c001f8ec <__udivdi3+0x7c>
c001f8d0:	0f bd da             	bsr    ebx,edx
c001f8d3:	83 f3 1f             	xor    ebx,0x1f
c001f8d6:	75 24                	jne    c001f8fc <__udivdi3+0x8c>
c001f8d8:	39 f2                	cmp    edx,esi
c001f8da:	72 08                	jb     c001f8e4 <__udivdi3+0x74>
c001f8dc:	39 ef                	cmp    edi,ebp
c001f8de:	0f 87 84 00 00 00    	ja     c001f968 <__udivdi3+0xf8>
c001f8e4:	b8 01 00 00 00       	mov    eax,0x1
c001f8e9:	eb ac                	jmp    c001f897 <__udivdi3+0x27>
c001f8eb:	90                   	nop
c001f8ec:	31 db                	xor    ebx,ebx
c001f8ee:	31 c0                	xor    eax,eax
c001f8f0:	89 da                	mov    edx,ebx
c001f8f2:	83 c4 1c             	add    esp,0x1c
c001f8f5:	5b                   	pop    ebx
c001f8f6:	5e                   	pop    esi
c001f8f7:	5f                   	pop    edi
c001f8f8:	5d                   	pop    ebp
c001f8f9:	c3                   	ret    
c001f8fa:	66 90                	xchg   ax,ax
c001f8fc:	b8 20 00 00 00       	mov    eax,0x20
c001f901:	29 d8                	sub    eax,ebx
c001f903:	88 d9                	mov    cl,bl
c001f905:	d3 e2                	shl    edx,cl
c001f907:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f90b:	89 fa                	mov    edx,edi
c001f90d:	88 c1                	mov    cl,al
c001f90f:	d3 ea                	shr    edx,cl
c001f911:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f915:	09 d1                	or     ecx,edx
c001f917:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f91b:	88 d9                	mov    cl,bl
c001f91d:	d3 e7                	shl    edi,cl
c001f91f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f923:	89 f7                	mov    edi,esi
c001f925:	88 c1                	mov    cl,al
c001f927:	d3 ef                	shr    edi,cl
c001f929:	88 d9                	mov    cl,bl
c001f92b:	d3 e6                	shl    esi,cl
c001f92d:	89 ea                	mov    edx,ebp
c001f92f:	88 c1                	mov    cl,al
c001f931:	d3 ea                	shr    edx,cl
c001f933:	09 d6                	or     esi,edx
c001f935:	89 f0                	mov    eax,esi
c001f937:	89 fa                	mov    edx,edi
c001f939:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f93d:	89 d7                	mov    edi,edx
c001f93f:	89 c6                	mov    esi,eax
c001f941:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f945:	39 d7                	cmp    edi,edx
c001f947:	72 13                	jb     c001f95c <__udivdi3+0xec>
c001f949:	74 09                	je     c001f954 <__udivdi3+0xe4>
c001f94b:	89 f0                	mov    eax,esi
c001f94d:	31 db                	xor    ebx,ebx
c001f94f:	e9 43 ff ff ff       	jmp    c001f897 <__udivdi3+0x27>
c001f954:	88 d9                	mov    cl,bl
c001f956:	d3 e5                	shl    ebp,cl
c001f958:	39 c5                	cmp    ebp,eax
c001f95a:	73 ef                	jae    c001f94b <__udivdi3+0xdb>
c001f95c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f95f:	31 db                	xor    ebx,ebx
c001f961:	e9 31 ff ff ff       	jmp    c001f897 <__udivdi3+0x27>
c001f966:	66 90                	xchg   ax,ax
c001f968:	31 c0                	xor    eax,eax
c001f96a:	e9 28 ff ff ff       	jmp    c001f897 <__udivdi3+0x27>
c001f96f:	90                   	nop

c001f970 <__umoddi3>:
c001f970:	55                   	push   ebp
c001f971:	57                   	push   edi
c001f972:	56                   	push   esi
c001f973:	53                   	push   ebx
c001f974:	83 ec 1c             	sub    esp,0x1c
c001f977:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f97b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f97f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f983:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f987:	89 da                	mov    edx,ebx
c001f989:	85 c0                	test   eax,eax
c001f98b:	75 37                	jne    c001f9c4 <__umoddi3+0x54>
c001f98d:	39 df                	cmp    edi,ebx
c001f98f:	76 13                	jbe    c001f9a4 <__umoddi3+0x34>
c001f991:	89 f0                	mov    eax,esi
c001f993:	f7 f7                	div    edi
c001f995:	89 d0                	mov    eax,edx
c001f997:	31 d2                	xor    edx,edx
c001f999:	83 c4 1c             	add    esp,0x1c
c001f99c:	5b                   	pop    ebx
c001f99d:	5e                   	pop    esi
c001f99e:	5f                   	pop    edi
c001f99f:	5d                   	pop    ebp
c001f9a0:	c3                   	ret    
c001f9a1:	8d 76 00             	lea    esi,[esi+0x0]
c001f9a4:	89 fd                	mov    ebp,edi
c001f9a6:	85 ff                	test   edi,edi
c001f9a8:	75 0b                	jne    c001f9b5 <__umoddi3+0x45>
c001f9aa:	b8 01 00 00 00       	mov    eax,0x1
c001f9af:	31 d2                	xor    edx,edx
c001f9b1:	f7 f7                	div    edi
c001f9b3:	89 c5                	mov    ebp,eax
c001f9b5:	89 d8                	mov    eax,ebx
c001f9b7:	31 d2                	xor    edx,edx
c001f9b9:	f7 f5                	div    ebp
c001f9bb:	89 f0                	mov    eax,esi
c001f9bd:	f7 f5                	div    ebp
c001f9bf:	89 d0                	mov    eax,edx
c001f9c1:	eb d4                	jmp    c001f997 <__umoddi3+0x27>
c001f9c3:	90                   	nop
c001f9c4:	89 f1                	mov    ecx,esi
c001f9c6:	39 d8                	cmp    eax,ebx
c001f9c8:	76 0a                	jbe    c001f9d4 <__umoddi3+0x64>
c001f9ca:	89 f0                	mov    eax,esi
c001f9cc:	83 c4 1c             	add    esp,0x1c
c001f9cf:	5b                   	pop    ebx
c001f9d0:	5e                   	pop    esi
c001f9d1:	5f                   	pop    edi
c001f9d2:	5d                   	pop    ebp
c001f9d3:	c3                   	ret    
c001f9d4:	0f bd e8             	bsr    ebp,eax
c001f9d7:	83 f5 1f             	xor    ebp,0x1f
c001f9da:	75 1c                	jne    c001f9f8 <__umoddi3+0x88>
c001f9dc:	39 d8                	cmp    eax,ebx
c001f9de:	72 04                	jb     c001f9e4 <__umoddi3+0x74>
c001f9e0:	39 f7                	cmp    edi,esi
c001f9e2:	77 08                	ja     c001f9ec <__umoddi3+0x7c>
c001f9e4:	89 da                	mov    edx,ebx
c001f9e6:	29 fe                	sub    esi,edi
c001f9e8:	19 c2                	sbb    edx,eax
c001f9ea:	89 f1                	mov    ecx,esi
c001f9ec:	89 c8                	mov    eax,ecx
c001f9ee:	83 c4 1c             	add    esp,0x1c
c001f9f1:	5b                   	pop    ebx
c001f9f2:	5e                   	pop    esi
c001f9f3:	5f                   	pop    edi
c001f9f4:	5d                   	pop    ebp
c001f9f5:	c3                   	ret    
c001f9f6:	66 90                	xchg   ax,ax
c001f9f8:	ba 20 00 00 00       	mov    edx,0x20
c001f9fd:	29 ea                	sub    edx,ebp
c001f9ff:	89 e9                	mov    ecx,ebp
c001fa01:	d3 e0                	shl    eax,cl
c001fa03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fa07:	89 f8                	mov    eax,edi
c001fa09:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001fa0d:	88 d1                	mov    cl,dl
c001fa0f:	d3 e8                	shr    eax,cl
c001fa11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa15:	09 c1                	or     ecx,eax
c001fa17:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fa1b:	89 e9                	mov    ecx,ebp
c001fa1d:	d3 e7                	shl    edi,cl
c001fa1f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fa23:	89 d8                	mov    eax,ebx
c001fa25:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa29:	88 d1                	mov    cl,dl
c001fa2b:	d3 e8                	shr    eax,cl
c001fa2d:	89 c7                	mov    edi,eax
c001fa2f:	89 e9                	mov    ecx,ebp
c001fa31:	d3 e3                	shl    ebx,cl
c001fa33:	89 f0                	mov    eax,esi
c001fa35:	88 d1                	mov    cl,dl
c001fa37:	d3 e8                	shr    eax,cl
c001fa39:	09 d8                	or     eax,ebx
c001fa3b:	89 e9                	mov    ecx,ebp
c001fa3d:	d3 e6                	shl    esi,cl
c001fa3f:	89 f3                	mov    ebx,esi
c001fa41:	89 fa                	mov    edx,edi
c001fa43:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fa47:	89 d1                	mov    ecx,edx
c001fa49:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fa4d:	89 c6                	mov    esi,eax
c001fa4f:	89 d7                	mov    edi,edx
c001fa51:	39 d1                	cmp    ecx,edx
c001fa53:	72 27                	jb     c001fa7c <__umoddi3+0x10c>
c001fa55:	74 21                	je     c001fa78 <__umoddi3+0x108>
c001fa57:	89 ca                	mov    edx,ecx
c001fa59:	29 f3                	sub    ebx,esi
c001fa5b:	19 fa                	sbb    edx,edi
c001fa5d:	89 d0                	mov    eax,edx
c001fa5f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001fa63:	d3 e0                	shl    eax,cl
c001fa65:	89 e9                	mov    ecx,ebp
c001fa67:	d3 eb                	shr    ebx,cl
c001fa69:	09 d8                	or     eax,ebx
c001fa6b:	d3 ea                	shr    edx,cl
c001fa6d:	83 c4 1c             	add    esp,0x1c
c001fa70:	5b                   	pop    ebx
c001fa71:	5e                   	pop    esi
c001fa72:	5f                   	pop    edi
c001fa73:	5d                   	pop    ebp
c001fa74:	c3                   	ret    
c001fa75:	8d 76 00             	lea    esi,[esi+0x0]
c001fa78:	39 c3                	cmp    ebx,eax
c001fa7a:	73 db                	jae    c001fa57 <__umoddi3+0xe7>
c001fa7c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fa80:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fa84:	89 d7                	mov    edi,edx
c001fa86:	89 c6                	mov    esi,eax
c001fa88:	eb cd                	jmp    c001fa57 <__umoddi3+0xe7>

Disassembly of section .init:

c001fa8a <_init>:
c001fa8a:	55                   	push   ebp
c001fa8b:	89 e5                	mov    ebp,esp
c001fa8d:	e8 62 06 fe ff       	call   c00000f4 <frame_dummy>
c001fa92:	e8 e5 fa ff ff       	call   c001f57c <__do_global_ctors_aux>
c001fa97:	5d                   	pop    ebp
c001fa98:	c3                   	ret    

Disassembly of section .fini:

c001fa99 <_fini>:
c001fa99:	55                   	push   ebp
c001fa9a:	89 e5                	mov    ebp,esp
c001fa9c:	e8 e3 05 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001faa1:	5d                   	pop    ebp
c001faa2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001faa4 <Computer::~Computer()>:
c001faa4:	83 ec 0c             	sub    esp,0xc
c001faa7:	ba 1c 0e 02 c0       	mov    edx,0xc0020e1c
c001faac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab0:	89 10                	mov    DWORD PTR [eax],edx
c001fab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab6:	83 ec 0c             	sub    esp,0xc
c001fab9:	50                   	push   eax
c001faba:	e8 39 ce fe ff       	call   c000c8f8 <Device::~Device()>
c001fabf:	83 c4 10             	add    esp,0x10
c001fac2:	90                   	nop
c001fac3:	83 c4 0c             	add    esp,0xc
c001fac6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001fac8 <Computer::~Computer()>:
c001fac8:	83 ec 0c             	sub    esp,0xc
c001facb:	83 ec 0c             	sub    esp,0xc
c001face:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fad2:	e8 cd ff ff ff       	call   c001faa4 <Computer::~Computer()>
c001fad7:	83 c4 10             	add    esp,0x10
c001fada:	83 ec 08             	sub    esp,0x8
c001fadd:	68 70 01 00 00       	push   0x170
c001fae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fae6:	e8 5d ad fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c001faeb:	83 c4 10             	add    esp,0x10
c001faee:	83 c4 0c             	add    esp,0xc
c001faf1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001faf2 <idleCommon()>:
c001faf2:	83 ec 0c             	sub    esp,0xc
c001faf5:	fa                   	cli    
c001faf6:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001fafc:	e8 f7 66 ff ff       	call   c00161f8 <schedule()>
c001fb01:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001fb06:	48                   	dec    eax
c001fb07:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001fb0c:	75 01                	jne    c001fb0f <idleCommon()+0x1d>
c001fb0e:	fb                   	sti    
c001fb0f:	83 c4 0c             	add    esp,0xc
c001fb12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001fb14 <LinkedList<UnixFile>::~LinkedList()>:
c001fb14:	90                   	nop
c001fb15:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001fb16 <LinkedList<UnixFile>::LinkedList()>:
c001fb16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb1a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb2f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb3a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb44:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb4f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb56:	90                   	nop
c001fb57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fb58 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fb58:	83 ec 0c             	sub    esp,0xc
c001fb5b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fb60:	75 10                	jne    c001fb72 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fb62:	83 ec 0c             	sub    esp,0xc
c001fb65:	68 30 10 02 c0       	push   0xc0021030
c001fb6a:	e8 a4 1b ff ff       	call   c0011713 <KePanic(char const*)>
c001fb6f:	83 c4 10             	add    esp,0x10
c001fb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb76:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb78:	85 c0                	test   eax,eax
c001fb7a:	74 34                	je     c001fbb0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb83:	85 c0                	test   eax,eax
c001fb85:	74 29                	je     c001fbb0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb92:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb9d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fba7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fbae:	eb 65                	jmp    c001fc15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fbb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbb6:	85 c0                	test   eax,eax
c001fbb8:	75 4b                	jne    c001fc05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbc1:	85 c0                	test   eax,eax
c001fbc3:	75 40                	jne    c001fc05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fbc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbcd:	89 10                	mov    DWORD PTR [eax],edx
c001fbcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbd7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbe1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fbe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbef:	85 c0                	test   eax,eax
c001fbf1:	74 22                	je     c001fc15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fbf3:	83 ec 0c             	sub    esp,0xc
c001fbf6:	68 52 10 02 c0       	push   0xc0021052
c001fbfb:	e8 13 1b ff ff       	call   c0011713 <KePanic(char const*)>
c001fc00:	83 c4 10             	add    esp,0x10
c001fc03:	eb 10                	jmp    c001fc15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fc05:	83 ec 0c             	sub    esp,0xc
c001fc08:	68 5c 10 02 c0       	push   0xc002105c
c001fc0d:	e8 01 1b ff ff       	call   c0011713 <KePanic(char const*)>
c001fc12:	83 c4 10             	add    esp,0x10
c001fc15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc19:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc1c:	8d 50 01             	lea    edx,[eax+0x1]
c001fc1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc23:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc26:	90                   	nop
c001fc27:	83 c4 0c             	add    esp,0xc
c001fc2a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fc2c <LinkedList<UnixFile>::getFirstElement()>:
c001fc2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc30:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fc34 <LinkedList<UnixFile>::removeFirst()>:
c001fc34:	83 ec 0c             	sub    esp,0xc
c001fc37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc3d:	85 c0                	test   eax,eax
c001fc3f:	75 12                	jne    c001fc53 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fc41:	83 ec 0c             	sub    esp,0xc
c001fc44:	68 68 10 02 c0       	push   0xc0021068
c001fc49:	e8 c5 1a ff ff       	call   c0011713 <KePanic(char const*)>
c001fc4e:	83 c4 10             	add    esp,0x10
c001fc51:	eb 7e                	jmp    c001fcd1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fc53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc5d:	85 c0                	test   eax,eax
c001fc5f:	74 10                	je     c001fc71 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fc61:	83 ec 0c             	sub    esp,0xc
c001fc64:	68 b3 10 02 c0       	push   0xc00210b3
c001fc69:	e8 a5 1a ff ff       	call   c0011713 <KePanic(char const*)>
c001fc6e:	83 c4 10             	add    esp,0x10
c001fc71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc75:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc7a:	85 c0                	test   eax,eax
c001fc7c:	75 33                	jne    c001fcb1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc9a:	83 f8 01             	cmp    eax,0x1
c001fc9d:	74 21                	je     c001fcc0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc9f:	83 ec 0c             	sub    esp,0xc
c001fca2:	68 8c 10 02 c0       	push   0xc002108c
c001fca7:	e8 67 1a ff ff       	call   c0011713 <KePanic(char const*)>
c001fcac:	83 c4 10             	add    esp,0x10
c001fcaf:	eb 0f                	jmp    c001fcc0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fcb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcb7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcbe:	89 10                	mov    DWORD PTR [eax],edx
c001fcc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcc7:	8d 50 ff             	lea    edx,[eax-0x1]
c001fcca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fcd1:	83 c4 0c             	add    esp,0xc
c001fcd4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fcd6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fcd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fcda:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcdd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fcde <DriverlessDevice::~DriverlessDevice()>:
c001fcde:	ba 20 1d 02 c0       	mov    edx,0xc0021d20
c001fce3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fce7:	89 10                	mov    DWORD PTR [eax],edx
c001fce9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fced:	50                   	push   eax
c001fcee:	e8 05 cc fe ff       	call   c000c8f8 <Device::~Device()>
c001fcf3:	83 c4 04             	add    esp,0x4
c001fcf6:	90                   	nop
c001fcf7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fcf8 <DriverlessDevice::~DriverlessDevice()>:
c001fcf8:	83 ec 0c             	sub    esp,0xc
c001fcfb:	83 ec 0c             	sub    esp,0xc
c001fcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd02:	e8 d7 ff ff ff       	call   c001fcde <DriverlessDevice::~DriverlessDevice()>
c001fd07:	83 c4 10             	add    esp,0x10
c001fd0a:	83 ec 08             	sub    esp,0x8
c001fd0d:	68 58 01 00 00       	push   0x158
c001fd12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd16:	e8 2d ab fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c001fd1b:	83 c4 10             	add    esp,0x10
c001fd1e:	83 c4 0c             	add    esp,0xc
c001fd21:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fd22 <LinkedList<Device>::addElement(Device*)>:
c001fd22:	83 ec 0c             	sub    esp,0xc
c001fd25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd2a:	75 10                	jne    c001fd3c <LinkedList<Device>::addElement(Device*)+0x1a>
c001fd2c:	83 ec 0c             	sub    esp,0xc
c001fd2f:	68 30 10 02 c0       	push   0xc0021030
c001fd34:	e8 da 19 ff ff       	call   c0011713 <KePanic(char const*)>
c001fd39:	83 c4 10             	add    esp,0x10
c001fd3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd40:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd42:	85 c0                	test   eax,eax
c001fd44:	74 3a                	je     c001fd80 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd4d:	85 c0                	test   eax,eax
c001fd4f:	74 2f                	je     c001fd80 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fd51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd5c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd6a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd74:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd7e:	eb 68                	jmp    c001fde8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd84:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd86:	85 c0                	test   eax,eax
c001fd88:	75 4e                	jne    c001fdd8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd91:	85 c0                	test   eax,eax
c001fd93:	75 43                	jne    c001fdd8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd9d:	89 10                	mov    DWORD PTR [eax],edx
c001fd9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fda7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fdaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdb1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fdbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdbf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdc2:	85 c0                	test   eax,eax
c001fdc4:	74 22                	je     c001fde8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fdc6:	83 ec 0c             	sub    esp,0xc
c001fdc9:	68 52 10 02 c0       	push   0xc0021052
c001fdce:	e8 40 19 ff ff       	call   c0011713 <KePanic(char const*)>
c001fdd3:	83 c4 10             	add    esp,0x10
c001fdd6:	eb 10                	jmp    c001fde8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fdd8:	83 ec 0c             	sub    esp,0xc
c001fddb:	68 5c 10 02 c0       	push   0xc002105c
c001fde0:	e8 2e 19 ff ff       	call   c0011713 <KePanic(char const*)>
c001fde5:	83 c4 10             	add    esp,0x10
c001fde8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdef:	8d 50 01             	lea    edx,[eax+0x1]
c001fdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fdf9:	90                   	nop
c001fdfa:	83 c4 0c             	add    esp,0xc
c001fdfd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fdfe <LinkedList<Device>::LinkedList()>:
c001fdfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fe1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fe3e:	90                   	nop
c001fe3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fe40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fe40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe44:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe46:	85 c0                	test   eax,eax
c001fe48:	75 0e                	jne    c001fe58 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fe4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe51:	85 c0                	test   eax,eax
c001fe53:	75 03                	jne    c001fe58 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fe55:	b0 01                	mov    al,0x1
c001fe57:	c3                   	ret    
c001fe58:	b0 00                	mov    al,0x0
c001fe5a:	90                   	nop
c001fe5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fe5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fe5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe60:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fe64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fe64:	83 ec 0c             	sub    esp,0xc
c001fe67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe6d:	85 c0                	test   eax,eax
c001fe6f:	75 17                	jne    c001fe88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fe71:	83 ec 0c             	sub    esp,0xc
c001fe74:	68 68 10 02 c0       	push   0xc0021068
c001fe79:	e8 95 18 ff ff       	call   c0011713 <KePanic(char const*)>
c001fe7e:	83 c4 10             	add    esp,0x10
c001fe81:	e9 96 00 00 00       	jmp    c001ff1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fe86:	66 90                	xchg   ax,ax
c001fe88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe8f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe92:	85 c0                	test   eax,eax
c001fe94:	0f 95 c0             	setne  al
c001fe97:	0f b6 c0             	movzx  eax,al
c001fe9a:	85 c0                	test   eax,eax
c001fe9c:	74 12                	je     c001feb0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fe9e:	83 ec 0c             	sub    esp,0xc
c001fea1:	68 b3 10 02 c0       	push   0xc00210b3
c001fea6:	e8 68 18 ff ff       	call   c0011713 <KePanic(char const*)>
c001feab:	83 c4 10             	add    esp,0x10
c001feae:	66 90                	xchg   ax,ax
c001feb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001feb6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001feb9:	85 c0                	test   eax,eax
c001febb:	0f 94 c0             	sete   al
c001febe:	0f b6 c0             	movzx  eax,al
c001fec1:	85 c0                	test   eax,eax
c001fec3:	74 33                	je     c001fef8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001feda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fede:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fee1:	83 f8 01             	cmp    eax,0x1
c001fee4:	74 22                	je     c001ff08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fee6:	83 ec 0c             	sub    esp,0xc
c001fee9:	68 8c 10 02 c0       	push   0xc002108c
c001feee:	e8 20 18 ff ff       	call   c0011713 <KePanic(char const*)>
c001fef3:	83 c4 10             	add    esp,0x10
c001fef6:	eb 10                	jmp    c001ff08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fefe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ff01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff05:	89 10                	mov    DWORD PTR [eax],edx
c001ff07:	90                   	nop
c001ff08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff0f:	8d 50 ff             	lea    edx,[eax-0x1]
c001ff12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff16:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff19:	8d 76 00             	lea    esi,[esi+0x0]
c001ff1c:	83 c4 0c             	add    esp,0xc
c001ff1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ff20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ff20:	83 ec 0c             	sub    esp,0xc
c001ff23:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ff28:	75 12                	jne    c001ff3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ff2a:	83 ec 0c             	sub    esp,0xc
c001ff2d:	68 30 10 02 c0       	push   0xc0021030
c001ff32:	e8 dc 17 ff ff       	call   c0011713 <KePanic(char const*)>
c001ff37:	83 c4 10             	add    esp,0x10
c001ff3a:	66 90                	xchg   ax,ax
c001ff3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff42:	85 c0                	test   eax,eax
c001ff44:	74 36                	je     c001ff7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ff46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff4d:	85 c0                	test   eax,eax
c001ff4f:	74 2b                	je     c001ff7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ff51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff5c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ff5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff71:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff78:	eb 6a                	jmp    c001ffe4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff7a:	66 90                	xchg   ax,ax
c001ff7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff82:	85 c0                	test   eax,eax
c001ff84:	75 4e                	jne    c001ffd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff8d:	85 c0                	test   eax,eax
c001ff8f:	75 43                	jne    c001ffd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff99:	89 10                	mov    DWORD PTR [eax],edx
c001ff9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ffa3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ffa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ffb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffbb:	85 c0                	test   eax,eax
c001ffbd:	74 25                	je     c001ffe4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ffbf:	83 ec 0c             	sub    esp,0xc
c001ffc2:	68 52 10 02 c0       	push   0xc0021052
c001ffc7:	e8 47 17 ff ff       	call   c0011713 <KePanic(char const*)>
c001ffcc:	83 c4 10             	add    esp,0x10
c001ffcf:	eb 13                	jmp    c001ffe4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ffd1:	8d 76 00             	lea    esi,[esi+0x0]
c001ffd4:	83 ec 0c             	sub    esp,0xc
c001ffd7:	68 5c 10 02 c0       	push   0xc002105c
c001ffdc:	e8 32 17 ff ff       	call   c0011713 <KePanic(char const*)>
c001ffe1:	83 c4 10             	add    esp,0x10
c001ffe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffeb:	8d 50 01             	lea    edx,[eax+0x1]
c001ffee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fff5:	90                   	nop
c001fff6:	83 c4 0c             	add    esp,0xc
c001fff9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fffc <ACPI::~ACPI()>:
c001fffc:	83 ec 0c             	sub    esp,0xc
c001ffff:	ba b0 23 02 c0       	mov    edx,0xc00223b0
c0020004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020008:	89 10                	mov    DWORD PTR [eax],edx
c002000a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002000e:	83 ec 0c             	sub    esp,0xc
c0020011:	50                   	push   eax
c0020012:	e8 e1 c8 fe ff       	call   c000c8f8 <Device::~Device()>
c0020017:	83 c4 10             	add    esp,0x10
c002001a:	90                   	nop
c002001b:	83 c4 0c             	add    esp,0xc
c002001e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0020020 <ACPI::~ACPI()>:
c0020020:	83 ec 0c             	sub    esp,0xc
c0020023:	83 ec 0c             	sub    esp,0xc
c0020026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002002a:	e8 cd ff ff ff       	call   c001fffc <ACPI::~ACPI()>
c002002f:	83 c4 10             	add    esp,0x10
c0020032:	83 ec 08             	sub    esp,0x8
c0020035:	68 64 12 00 00       	push   0x1264
c002003a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002003e:	e8 05 a8 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c0020043:	83 c4 10             	add    esp,0x10
c0020046:	83 c4 0c             	add    esp,0xc
c0020049:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002004c <LinkedList<Device>::~LinkedList()>:
c002004c:	90                   	nop
c002004d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0020050 <LinkedList<Device>::isEmpty()>:
c0020050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020054:	8b 00                	mov    eax,DWORD PTR [eax]
c0020056:	85 c0                	test   eax,eax
c0020058:	75 0e                	jne    c0020068 <LinkedList<Device>::isEmpty()+0x18>
c002005a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002005e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020061:	85 c0                	test   eax,eax
c0020063:	75 03                	jne    c0020068 <LinkedList<Device>::isEmpty()+0x18>
c0020065:	b0 01                	mov    al,0x1
c0020067:	c3                   	ret    
c0020068:	b0 00                	mov    al,0x0
c002006a:	90                   	nop
c002006b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002006c <LinkedList<Device>::getFirstElement()>:
c002006c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020070:	8b 00                	mov    eax,DWORD PTR [eax]
c0020072:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020074 <LinkedList<Device>::removeFirst()>:
c0020074:	83 ec 0c             	sub    esp,0xc
c0020077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002007b:	8b 00                	mov    eax,DWORD PTR [eax]
c002007d:	85 c0                	test   eax,eax
c002007f:	75 17                	jne    c0020098 <LinkedList<Device>::removeFirst()+0x24>
c0020081:	83 ec 0c             	sub    esp,0xc
c0020084:	68 68 10 02 c0       	push   0xc0021068
c0020089:	e8 85 16 ff ff       	call   c0011713 <KePanic(char const*)>
c002008e:	83 c4 10             	add    esp,0x10
c0020091:	e9 92 00 00 00       	jmp    c0020128 <LinkedList<Device>::removeFirst()+0xb4>
c0020096:	66 90                	xchg   ax,ax
c0020098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002009c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002009f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00200a5:	85 c0                	test   eax,eax
c00200a7:	74 13                	je     c00200bc <LinkedList<Device>::removeFirst()+0x48>
c00200a9:	83 ec 0c             	sub    esp,0xc
c00200ac:	68 b3 10 02 c0       	push   0xc00210b3
c00200b1:	e8 5d 16 ff ff       	call   c0011713 <KePanic(char const*)>
c00200b6:	83 c4 10             	add    esp,0x10
c00200b9:	8d 76 00             	lea    esi,[esi+0x0]
c00200bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00200c2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00200c8:	85 c0                	test   eax,eax
c00200ca:	75 34                	jne    c0020100 <LinkedList<Device>::removeFirst()+0x8c>
c00200cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00200d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00200e8:	83 f8 01             	cmp    eax,0x1
c00200eb:	74 27                	je     c0020114 <LinkedList<Device>::removeFirst()+0xa0>
c00200ed:	83 ec 0c             	sub    esp,0xc
c00200f0:	68 8c 10 02 c0       	push   0xc002108c
c00200f5:	e8 19 16 ff ff       	call   c0011713 <KePanic(char const*)>
c00200fa:	83 c4 10             	add    esp,0x10
c00200fd:	eb 15                	jmp    c0020114 <LinkedList<Device>::removeFirst()+0xa0>
c00200ff:	90                   	nop
c0020100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020104:	8b 00                	mov    eax,DWORD PTR [eax]
c0020106:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002010c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020110:	89 10                	mov    DWORD PTR [eax],edx
c0020112:	66 90                	xchg   ax,ax
c0020114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020118:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002011b:	8d 50 ff             	lea    edx,[eax-0x1]
c002011e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020122:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020125:	8d 76 00             	lea    esi,[esi+0x0]
c0020128:	83 c4 0c             	add    esp,0xc
c002012b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002012c <CPU::~CPU()>:
c002012c:	83 ec 0c             	sub    esp,0xc
c002012f:	ba 58 25 02 c0       	mov    edx,0xc0022558
c0020134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020138:	89 10                	mov    DWORD PTR [eax],edx
c002013a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002013e:	83 ec 0c             	sub    esp,0xc
c0020141:	50                   	push   eax
c0020142:	e8 b1 c7 fe ff       	call   c000c8f8 <Device::~Device()>
c0020147:	83 c4 10             	add    esp,0x10
c002014a:	90                   	nop
c002014b:	83 c4 0c             	add    esp,0xc
c002014e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020150 <CPU::~CPU()>:
c0020150:	83 ec 0c             	sub    esp,0xc
c0020153:	83 ec 0c             	sub    esp,0xc
c0020156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002015a:	e8 cd ff ff ff       	call   c002012c <CPU::~CPU()>
c002015f:	83 c4 10             	add    esp,0x10
c0020162:	83 ec 08             	sub    esp,0x8
c0020165:	68 94 11 00 00       	push   0x1194
c002016a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002016e:	e8 d5 a6 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c0020173:	83 c4 10             	add    esp,0x10
c0020176:	83 c4 0c             	add    esp,0xc
c0020179:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002017c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002017c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020180:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020183:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020184 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020184:	90                   	nop
c0020185:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020188 <ThreadControlBlock::ThreadControlBlock()>:
c0020188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002018c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020193:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020197:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002019e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201a2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00201a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201ad:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00201b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201b8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00201bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201c3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00201c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201cb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00201cf:	90                   	nop
c00201d0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00201d4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00201d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00201de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00201e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201ed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00201fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020202:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020209:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002020d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020214:	90                   	nop
c0020215:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020216 <PCI::~PCI()>:
c0020216:	83 ec 0c             	sub    esp,0xc
c0020219:	ba 38 34 02 c0       	mov    edx,0xc0023438
c002021e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020222:	89 10                	mov    DWORD PTR [eax],edx
c0020224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020228:	83 ec 0c             	sub    esp,0xc
c002022b:	50                   	push   eax
c002022c:	e8 5f c1 fe ff       	call   c000c390 <Bus::~Bus()>
c0020231:	83 c4 10             	add    esp,0x10
c0020234:	90                   	nop
c0020235:	83 c4 0c             	add    esp,0xc
c0020238:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002023a <PCI::~PCI()>:
c002023a:	83 ec 0c             	sub    esp,0xc
c002023d:	83 ec 0c             	sub    esp,0xc
c0020240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020244:	e8 cd ff ff ff       	call   c0020216 <PCI::~PCI()>
c0020249:	83 c4 10             	add    esp,0x10
c002024c:	83 ec 08             	sub    esp,0x8
c002024f:	68 5c 01 00 00       	push   0x15c
c0020254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020258:	e8 eb a5 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c002025d:	83 c4 10             	add    esp,0x10
c0020260:	83 c4 0c             	add    esp,0xc
c0020263:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020264 <IDE::~IDE()>:
c0020264:	83 ec 0c             	sub    esp,0xc
c0020267:	ba ec 34 02 c0       	mov    edx,0xc00234ec
c002026c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020270:	89 10                	mov    DWORD PTR [eax],edx
c0020272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020276:	83 ec 0c             	sub    esp,0xc
c0020279:	50                   	push   eax
c002027a:	e8 2d cb fe ff       	call   c000cdac <HardDiskController::~HardDiskController()>
c002027f:	83 c4 10             	add    esp,0x10
c0020282:	90                   	nop
c0020283:	83 c4 0c             	add    esp,0xc
c0020286:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020288 <IDE::~IDE()>:
c0020288:	83 ec 0c             	sub    esp,0xc
c002028b:	83 ec 0c             	sub    esp,0xc
c002028e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020292:	e8 cd ff ff ff       	call   c0020264 <IDE::~IDE()>
c0020297:	83 c4 10             	add    esp,0x10
c002029a:	83 ec 08             	sub    esp,0x8
c002029d:	68 70 02 00 00       	push   0x270
c00202a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202a6:	e8 9d a5 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c00202ab:	83 c4 10             	add    esp,0x10
c00202ae:	83 c4 0c             	add    esp,0xc
c00202b1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00202b2 <SATABus::~SATABus()>:
c00202b2:	83 ec 0c             	sub    esp,0xc
c00202b5:	ba 3c 35 02 c0       	mov    edx,0xc002353c
c00202ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202be:	89 10                	mov    DWORD PTR [eax],edx
c00202c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c4:	83 ec 0c             	sub    esp,0xc
c00202c7:	50                   	push   eax
c00202c8:	e8 df ca fe ff       	call   c000cdac <HardDiskController::~HardDiskController()>
c00202cd:	83 c4 10             	add    esp,0x10
c00202d0:	90                   	nop
c00202d1:	83 c4 0c             	add    esp,0xc
c00202d4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00202d6 <SATABus::~SATABus()>:
c00202d6:	83 ec 0c             	sub    esp,0xc
c00202d9:	83 ec 0c             	sub    esp,0xc
c00202dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202e0:	e8 cd ff ff ff       	call   c00202b2 <SATABus::~SATABus()>
c00202e5:	83 c4 10             	add    esp,0x10
c00202e8:	83 ec 08             	sub    esp,0x8
c00202eb:	68 64 01 00 00       	push   0x164
c00202f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202f4:	e8 4f a5 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c00202f9:	83 c4 10             	add    esp,0x10
c00202fc:	83 c4 0c             	add    esp,0xc
c00202ff:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020300 <ATA::~ATA()>:
c0020300:	83 ec 0c             	sub    esp,0xc
c0020303:	ba 7c 35 02 c0       	mov    edx,0xc002357c
c0020308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002030c:	89 10                	mov    DWORD PTR [eax],edx
c002030e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020312:	83 ec 0c             	sub    esp,0xc
c0020315:	50                   	push   eax
c0020316:	e8 73 cb fe ff       	call   c000ce8e <PhysicalDisk::~PhysicalDisk()>
c002031b:	83 c4 10             	add    esp,0x10
c002031e:	90                   	nop
c002031f:	83 c4 0c             	add    esp,0xc
c0020322:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020324 <ATA::~ATA()>:
c0020324:	83 ec 0c             	sub    esp,0xc
c0020327:	83 ec 0c             	sub    esp,0xc
c002032a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002032e:	e8 cd ff ff ff       	call   c0020300 <ATA::~ATA()>
c0020333:	83 c4 10             	add    esp,0x10
c0020336:	83 ec 08             	sub    esp,0x8
c0020339:	68 7c 01 00 00       	push   0x17c
c002033e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020342:	e8 01 a5 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c0020347:	83 c4 10             	add    esp,0x10
c002034a:	83 c4 0c             	add    esp,0xc
c002034d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002034e <ATAPI::~ATAPI()>:
c002034e:	83 ec 0c             	sub    esp,0xc
c0020351:	ba c4 35 02 c0       	mov    edx,0xc00235c4
c0020356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002035a:	89 10                	mov    DWORD PTR [eax],edx
c002035c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020360:	83 ec 0c             	sub    esp,0xc
c0020363:	50                   	push   eax
c0020364:	e8 25 cb fe ff       	call   c000ce8e <PhysicalDisk::~PhysicalDisk()>
c0020369:	83 c4 10             	add    esp,0x10
c002036c:	90                   	nop
c002036d:	83 c4 0c             	add    esp,0xc
c0020370:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020372 <ATAPI::~ATAPI()>:
c0020372:	83 ec 0c             	sub    esp,0xc
c0020375:	83 ec 0c             	sub    esp,0xc
c0020378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002037c:	e8 cd ff ff ff       	call   c002034e <ATAPI::~ATAPI()>
c0020381:	83 c4 10             	add    esp,0x10
c0020384:	83 ec 08             	sub    esp,0x8
c0020387:	68 84 01 00 00       	push   0x184
c002038c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020390:	e8 b3 a4 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c0020395:	83 c4 10             	add    esp,0x10
c0020398:	83 c4 0c             	add    esp,0xc
c002039b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002039c <SATA::~SATA()>:
c002039c:	83 ec 0c             	sub    esp,0xc
c002039f:	ba 78 36 02 c0       	mov    edx,0xc0023678
c00203a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a8:	89 10                	mov    DWORD PTR [eax],edx
c00203aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203ae:	83 ec 0c             	sub    esp,0xc
c00203b1:	50                   	push   eax
c00203b2:	e8 d7 ca fe ff       	call   c000ce8e <PhysicalDisk::~PhysicalDisk()>
c00203b7:	83 c4 10             	add    esp,0x10
c00203ba:	90                   	nop
c00203bb:	83 c4 0c             	add    esp,0xc
c00203be:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00203c0 <SATA::~SATA()>:
c00203c0:	83 ec 0c             	sub    esp,0xc
c00203c3:	83 ec 0c             	sub    esp,0xc
c00203c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203ca:	e8 cd ff ff ff       	call   c002039c <SATA::~SATA()>
c00203cf:	83 c4 10             	add    esp,0x10
c00203d2:	83 ec 08             	sub    esp,0x8
c00203d5:	68 7c 01 00 00       	push   0x17c
c00203da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203de:	e8 65 a4 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c00203e3:	83 c4 10             	add    esp,0x10
c00203e6:	83 c4 0c             	add    esp,0xc
c00203e9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00203ea <SATAPI::~SATAPI()>:
c00203ea:	83 ec 0c             	sub    esp,0xc
c00203ed:	ba 9c 37 02 c0       	mov    edx,0xc002379c
c00203f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203f6:	89 10                	mov    DWORD PTR [eax],edx
c00203f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203fc:	83 ec 0c             	sub    esp,0xc
c00203ff:	50                   	push   eax
c0020400:	e8 89 ca fe ff       	call   c000ce8e <PhysicalDisk::~PhysicalDisk()>
c0020405:	83 c4 10             	add    esp,0x10
c0020408:	90                   	nop
c0020409:	83 c4 0c             	add    esp,0xc
c002040c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002040e <SATAPI::~SATAPI()>:
c002040e:	83 ec 0c             	sub    esp,0xc
c0020411:	83 ec 0c             	sub    esp,0xc
c0020414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020418:	e8 cd ff ff ff       	call   c00203ea <SATAPI::~SATAPI()>
c002041d:	83 c4 10             	add    esp,0x10
c0020420:	83 ec 08             	sub    esp,0x8
c0020423:	68 84 01 00 00       	push   0x184
c0020428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002042c:	e8 17 a4 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c0020431:	83 c4 10             	add    esp,0x10
c0020434:	83 c4 0c             	add    esp,0xc
c0020437:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020438 <IOAPIC::~IOAPIC()>:
c0020438:	83 ec 0c             	sub    esp,0xc
c002043b:	ba dc 37 02 c0       	mov    edx,0xc00237dc
c0020440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020444:	89 10                	mov    DWORD PTR [eax],edx
c0020446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002044a:	83 ec 0c             	sub    esp,0xc
c002044d:	50                   	push   eax
c002044e:	e8 a5 c4 fe ff       	call   c000c8f8 <Device::~Device()>
c0020453:	83 c4 10             	add    esp,0x10
c0020456:	90                   	nop
c0020457:	83 c4 0c             	add    esp,0xc
c002045a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002045c <IOAPIC::~IOAPIC()>:
c002045c:	83 ec 0c             	sub    esp,0xc
c002045f:	83 ec 0c             	sub    esp,0xc
c0020462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020466:	e8 cd ff ff ff       	call   c0020438 <IOAPIC::~IOAPIC()>
c002046b:	83 c4 10             	add    esp,0x10
c002046e:	83 ec 08             	sub    esp,0x8
c0020471:	68 68 01 00 00       	push   0x168
c0020476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002047a:	e8 c9 a3 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c002047f:	83 c4 10             	add    esp,0x10
c0020482:	83 c4 0c             	add    esp,0xc
c0020485:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020488 <APICTimer::~APICTimer()>:
c0020488:	83 ec 0c             	sub    esp,0xc
c002048b:	ba 24 38 02 c0       	mov    edx,0xc0023824
c0020490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020494:	89 10                	mov    DWORD PTR [eax],edx
c0020496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002049a:	83 ec 0c             	sub    esp,0xc
c002049d:	50                   	push   eax
c002049e:	e8 5d df fe ff       	call   c000e400 <Timer::~Timer()>
c00204a3:	83 c4 10             	add    esp,0x10
c00204a6:	90                   	nop
c00204a7:	83 c4 0c             	add    esp,0xc
c00204aa:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00204ac <APICTimer::~APICTimer()>:
c00204ac:	83 ec 0c             	sub    esp,0xc
c00204af:	83 ec 0c             	sub    esp,0xc
c00204b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204b6:	e8 cd ff ff ff       	call   c0020488 <APICTimer::~APICTimer()>
c00204bb:	83 c4 10             	add    esp,0x10
c00204be:	83 ec 08             	sub    esp,0x8
c00204c1:	68 60 01 00 00       	push   0x160
c00204c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204ca:	e8 79 a3 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c00204cf:	83 c4 10             	add    esp,0x10
c00204d2:	83 c4 0c             	add    esp,0xc
c00204d5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00204d8 <PIT::~PIT()>:
c00204d8:	83 ec 0c             	sub    esp,0xc
c00204db:	ba 74 38 02 c0       	mov    edx,0xc0023874
c00204e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204e4:	89 10                	mov    DWORD PTR [eax],edx
c00204e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ea:	83 ec 0c             	sub    esp,0xc
c00204ed:	50                   	push   eax
c00204ee:	e8 0d df fe ff       	call   c000e400 <Timer::~Timer()>
c00204f3:	83 c4 10             	add    esp,0x10
c00204f6:	90                   	nop
c00204f7:	83 c4 0c             	add    esp,0xc
c00204fa:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00204fc <PIT::~PIT()>:
c00204fc:	83 ec 0c             	sub    esp,0xc
c00204ff:	83 ec 0c             	sub    esp,0xc
c0020502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020506:	e8 cd ff ff ff       	call   c00204d8 <PIT::~PIT()>
c002050b:	83 c4 10             	add    esp,0x10
c002050e:	83 ec 08             	sub    esp,0x8
c0020511:	68 5c 01 00 00       	push   0x15c
c0020516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002051a:	e8 29 a3 fe ff       	call   c000a848 <operator delete(void*, unsigned long)>
c002051f:	83 c4 10             	add    esp,0x10
c0020522:	83 c4 0c             	add    esp,0xc
c0020525:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 89 26 02 c0       	mov    esi,0xc0022689
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be a5 26 02 c0       	mov    esi,0xc00226a5
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
